
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 19 11 02 00       	call   c002113e <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 1d 02 c0       	mov    ebx,0xc0021dc2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 1d 02 c0    	cmp    ebx,0xc0021dd0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 5e 02 c0       	mov    eax,0xc0025e18
c0000049:	3d 18 5e 02 c0       	cmp    eax,0xc0025e18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 5e 02 c0       	push   0xc0025e18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 5e 02 c0       	mov    eax,0xc0025e18
c0000075:	2d 18 5e 02 c0       	sub    eax,0xc0025e18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 5e 02 c0       	push   0xc0025e18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a0 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fa0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 1d 02 c0       	mov    ebx,0xc0021dd8
c00000bb:	81 eb d4 1d 02 c0    	sub    ebx,0xc0021dd4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 1d 02 c0       	mov    esi,0xc0021dd4
c00000ca:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a4 5f 02 c0       	mov    ds:0xc0025fa4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 5e 02 c0       	push   0xc0025e18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a0 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fa0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a8 5f 02 c0       	push   0xc0025fa8
c000012c:	68 18 5e 02 c0       	push   0xc0025e18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 cc 74 01 00       	call   c00177a4 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 e1 c4 00 00       	call   c000c7d1 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 aa 74 01 00       	call   c00177a4 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 73 79 01 00       	call   c0017c8c <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 b6 7f 01 00       	call   c00182d8 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 f0 63 02 c0 	lgdtd  ds:0xc00263f0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 6e e2 00 00       	call   c000e785 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 c0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fc0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d c0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fc0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 e0 1d 02 c0 02 	test   BYTE PTR [edx-0x3ffde220],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 e0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde220],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 e0 1d 02 c0 08 	test   BYTE PTR [edx-0x3ffde220],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 e0 1d 02 c0 04 	test   BYTE PTR [ebx-0x3ffde220],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 e0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde220],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d e0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fe0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d e0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fe0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 e4 5f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda01c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 e4 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda01c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d e0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fe0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 0c 60 02 c0    	cmp    DWORD PTR ds:0xc002600c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 1c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002601c
c0000d6c:	c7 42 0c 14 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026014
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 1c 60 02 c0    	mov    DWORD PTR ds:0xc002601c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 0c 60 02 c0    	mov    DWORD PTR ds:0xc002600c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 e0 5f 02 c0 02 	test   BYTE PTR ds:0xc0025fe0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d e0 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025fe0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 e4 5f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda01c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 e4 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda01c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 14 60 02 c0 	lea    edx,[eax*8-0x3ffd9fec]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 20 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026020
c00010ee:	81 fb 14 60 02 c0    	cmp    ebx,0xc0026014
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 14 60 02 c0       	cmp    eax,0xc0026014
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 10 60 02 c0    	cmp    DWORD PTR ds:0xc0026010,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 1c 60 02 c0       	mov    ds:0xc002601c,eax
c000112a:	a3 20 60 02 c0       	mov    ds:0xc0026020,eax
c000112f:	a3 10 60 02 c0       	mov    ds:0xc0026010,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 14 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026014
c000113d:	c7 40 0c 14 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026014
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 20 60 02 c0       	mov    ds:0xc0026020,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 14 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026014
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 d8 5f 02 c0 	lea    ebp,[edx*4-0x3ffda028]
c000118e:	8b 14 95 e0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda020]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 e0 5f 02 c0 	lea    ecx,[edx*4-0x3ffda020]
c00011a9:	8b 14 95 e0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda020]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 14 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9cec],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 14 60 02 c0 	lea    eax,[eax*8-0x3ffd9fec]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 1c 60 02 c0    	mov    DWORD PTR ds:0xc002601c,ecx
c0001263:	89 0d 20 60 02 c0    	mov    DWORD PTR ds:0xc0026020,ecx
c0001269:	c7 41 08 14 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026014
c0001270:	c7 41 0c 14 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026014
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 0c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9ff4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 14 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9cec]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 14 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9cec]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 0c 60 02 c0 	lea    edx,[eax*4-0x3ffd9ff4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 14 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9cec],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 1c 60 02 c0    	mov    DWORD PTR ds:0xc002601c,edi
c0001336:	89 3d 20 60 02 c0    	mov    DWORD PTR ds:0xc0026020,edi
c000133c:	c7 47 08 14 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026014
c0001343:	c7 47 0c 14 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026014
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 10 60 02 c0    	mov    DWORD PTR ds:0xc0026010,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 0c 60 02 c0       	mov    eax,ds:0xc002600c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 0c 60 02 c0    	mov    DWORD PTR ds:0xc002600c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba e0 5f 02 c0       	mov    edx,0xc0025fe0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d e0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fe0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 34 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026334
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 34 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026334,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 34 63 02 c0    	mov    DWORD PTR ds:0xc0026334,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 0c 60 02 c0    	cmp    DWORD PTR ds:0xc002600c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 0c 60 02 c0    	mov    DWORD PTR ds:0xc002600c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d e0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fe0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 3c 63 02 c0    	push   DWORD PTR ds:0xc002633c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d e0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fe0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 3c 63 02 c0       	mov    eax,ds:0xc002633c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 0c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002600c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 0c 60 02 c0       	mov    eax,ds:0xc002600c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 e4 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda01c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 14 60 02 c0       	mov    eax,0xc0026014
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 0c 63 02 c0       	cmp    eax,0xc002630c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 48 63 02 c0       	mov    eax,ds:0xc0026348
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 30 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026330
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 44 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026344
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 54 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026354
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 e4 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde11c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 e0 5f 02 c0       	mov    eax,ds:0xc0025fe0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 e0 5f 02 c0       	mov    ds:0xc0025fe0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 28 63 02 c0    	mov    DWORD PTR ds:0xc0026328,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 2c 63 02 c0    	mov    DWORD PTR ds:0xc002632c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 34 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026334,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 80 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8580]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 b6 94 01 00       	jmp    c001afdc <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 80 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8580]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 e8 94 01 00       	jmp    c001b024 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 80 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8580]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 11 95 01 00       	jmp    c001b06c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 e6 f0 01 00       	call   c0020f24 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 00 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde000]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 00 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde000]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 20 20 02 c0       	mov    edx,0xc0022020
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 04 4b 02 c0       	mov    edx,0xc0024b04
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 2c 20 02 c0       	mov    edx,0xc002202c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 10 20 02 c0       	mov    edx,0xc0022010
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 80 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c80]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 60 63 02 c0    	mov    ax,ds:0xc0026360
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 60 63 02 c0    	mov    ds:0xc0026360,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 e3 de 01 00       	call   c0020f24 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 32 20 02 c0       	mov    eax,0xc0022032
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 80 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde080]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 3b 20 02 c0       	mov    eax,0xc002203b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 00 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde000]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 ae c8 01 00       	call   c0020f24 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 10 20 02 c0       	mov    edx,0xc0022010
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 10 1f 02 c0       	mov    edx,0xc0021f10
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 80 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c80]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 80 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c80],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 75 b2 01 00       	call   c0020f24 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 5b b2 01 00       	call   c0020f24 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 57 1f 02 c0       	mov    eax,0xc0021f57
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 50 1f 02 c0       	mov    eax,0xc0021f50
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 f4 9d 01 00       	call   c0020f24 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 80 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c80]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 40 1f 02 c0       	mov    esi,0xc0021f40
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 68 97 01 00       	call   c0020f24 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 20 20 02 c0       	mov    edx,0xc0022020
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 42 20 02 c0       	mov    edx,0xc0022042
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 4e 20 02 c0       	mov    edx,0xc002204e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 62 20 02 c0       	mov    edx,0xc0022062
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 80 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022380
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 80 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022380
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 80 21 02 c0       	mov    eax,0xc0022180
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 c0 20 02 c0       	mov    eax,0xc00220c0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000888b:	48                   	dec    eax
c000888c:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00088a2:	48                   	dec    eax
c00088a3:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00088b3:	ff 05 e4 78 02 c0    	inc    DWORD PTR ds:0xc00278e4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00088c2:	48                   	dec    eax
c00088c3:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d e0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278e0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00088dd:	e8 16 f6 00 00       	call   c0017ef8 <schedule()>
c00088e2:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00088e7:	48                   	dec    eax
c00088e8:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 50 65 02 c0       	mov    eax,ds:0xc0026550
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 80 24 02 c0       	push   0xc0022480
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 e8 63 02 c0       	mov    eax,0xc00263e8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 89 24 02 c0       	push   0xc0022489
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 24 0f 02 c0       	mov    eax,0xc0020f24
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 93 24 02 c0       	push   0xc0022493
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 58 0c 02 c0       	mov    eax,0xc0020c58
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 9c 24 02 c0       	push   0xc002249c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 24 10 02 c0       	mov    eax,0xc0021024
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 a6 24 02 c0       	push   0xc00224a6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 a4 0d 02 c0       	mov    eax,0xc0020da4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 af 24 02 c0       	push   0xc00224af
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ec 63 02 c0       	mov    eax,0xc00263ec
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 bc 24 02 c0       	push   0xc00224bc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ed 63 02 c0       	mov    eax,0xc00263ed
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 ef 55 00 00       	call   c000e034 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 c9 24 02 c0       	push   0xc00224c9
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 e0 24 02 c0 	mov    DWORD PTR [esp],0xc00224e0
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0008aa2:	68 f9 24 02 c0       	push   0xc00224f9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 25 f0 00 00       	call   c0017ad4 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 18 f2 00 00       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 20 87 01 c0       	push   0xc0018720
c0008acd:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0008ad3:	e8 04 f2 00 00       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0008ae0:	68 a0 26 02 c0       	push   0xc00226a0
c0008ae5:	c6 05 ed 63 02 c0 01 	mov    BYTE PTR ds:0xc00263ed,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 05 00 01 00       	call   c0018afb <Vm::initialise8086()>
c0008af6:	e8 ff 42 00 00       	call   c000cdfa <Fs::initVFS()>
c0008afb:	c7 04 24 06 25 02 c0 	mov    DWORD PTR [esp],0xc0022506
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 a0 26 02 c0       	push   0xc00226a0
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 12 d8 00 00       	call   c0016342 <Sys::loadSyscalls()>
c0008b30:	e8 e7 b6 00 00       	call   c001421c <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 20 25 02 c0       	push   0xc0022520
c0008b3f:	68 29 25 02 c0       	push   0xc0022529
c0008b44:	e8 bc c5 00 00       	call   c0015105 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 9b 4d 00 00       	call   c000d8ec <User::loadClockSettings(int)>
c0008b51:	c7 04 24 c4 26 02 c0 	mov    DWORD PTR [esp],0xc00226c4
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 86 54 00 00       	call   c000dff4 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 31 25 02 c0 	mov    DWORD PTR [esp],0xc0022531
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 05 b2 00 00       	call   c0013d84 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 4b 25 02 c0 	mov    DWORD PTR [esp],0xc002254b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 5c 25 02 c0       	push   0xc002255c
c0008b9a:	e8 73 e9 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 9b eb 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 3b f5 00 00       	call   c00180f0 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 78 25 02 c0       	push   0xc0022578
c0008bc9:	50                   	push   eax
c0008bca:	e8 df 54 00 00       	call   c000e0ae <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 74 27 02 c0       	mov    edx,0xc0022774
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 01 64 02 c0 04 	test   BYTE PTR ds:0xc0026401,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 83 7e 01 00       	call   c0020be6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 e8 9e 00 00       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 c1 9e 00 00       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 9f 9e 00 00       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 7d 9e 00 00       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 00 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026400,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 8b 9d 00 00       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 66 9d 00 00       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 ed 7c 01 00       	call   c0020ba0 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 aa 7c 01 00       	call   c0020b80 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 82 9d 00 00       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 81 25 02 c0       	push   0xc0022581
c0008f46:	e8 da b3 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 87 25 02 c0       	push   0xc0022587
c0008f7e:	e8 a2 b3 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 e4 26 02 c0       	push   0xc00226e4
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 00 64 02 c0 04 	test   BYTE PTR ds:0xc0026400,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 c0 57 02 c0 	sete   BYTE PTR ds:0xc00257c0
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 8d 25 02 c0       	push   0xc002258d
c0008ff3:	e8 6c 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 a3 25 02 c0       	push   0xc00225a3
c0009004:	e8 5b 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 b7 25 02 c0       	push   0xc00225b7
c0009012:	e8 4d 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 ca 25 02 c0       	push   0xc00225ca
c0009023:	e8 3c 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 e1 25 02 c0       	push   0xc00225e1
c0009031:	e8 2e 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 f7 25 02 c0 	mov    DWORD PTR [esp],0xc00225f7
c000903d:	e8 22 3a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 09 26 02 c0 	mov    DWORD PTR [esp],0xc0022609
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 94 8d 00 00       	call   c0011df8 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 23 26 02 c0 	mov    DWORD PTR [esp],0xc0022623
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 26 4e 00 00       	call   c000deaa <Device::addChild(Device*)>
c0009084:	c7 04 24 08 27 02 c0 	mov    DWORD PTR [esp],0xc0022708
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 28 27 02 c0 	mov    DWORD PTR [esp],0xc0022728
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 3d 26 02 c0 	mov    DWORD PTR [esp],0xc002263d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 31 25 02 c0 	mov    DWORD PTR [esp],0xc0022531
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 62 9c 00 00       	call   c0012d3e <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 bf 4d 00 00       	call   c000deaa <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 48 27 02 c0       	push   0xc0022748
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 35 53 00 00       	call   c000e446 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 82 4d 00 00       	call   c000deaa <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 4e 26 02 c0       	push   0xc002264e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 9a ec 00 00       	call   c0017df0 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 69 26 02 c0       	push   0xc0022669
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 bf 38 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 7a 26 02 c0       	push   0xc002267a
c00091c2:	e8 5e b1 00 00       	call   c0014325 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 87 26 02 c0       	push   0xc0022687
c00091d7:	e8 49 b1 00 00       	call   c0014325 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 91 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022691
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 32 b1 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 f2 63 02 c0       	mov    ds:0xc00263f2,eax
c00092af:	66 89 15 f0 63 02 c0 	mov    WORD PTR ds:0xc00263f0,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00093c6:	48                   	dec    eax
c00093c7:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 89 7d 01 00       	call   c00211a6 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 80 7d 01 00       	call   c00211a6 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 f8 63 02 c0 ff 07 	mov    WORD PTR ds:0xc00263f8,0x7ff
c0009519:	a3 fa 63 02 c0       	mov    ds:0xc00263fa,eax
c000951e:	0f 01 1d f8 63 02 c0 	lidtd  ds:0xc00263f8
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c0009810:	e8 1d 26 00 00       	call   c000be32 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 99 17 00 00       	call   c000afcc <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 ce 17 00 00       	call   c000b010 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 98 27 02 c0       	push   0xc0022798
c000989d:	e8 c2 31 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 4c 56 02 c0       	mov    eax,ds:0xc002564c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 50 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026550
c00098cc:	8b 3d 4c 56 02 c0    	mov    edi,DWORD PTR ds:0xc002564c
c00098d2:	e8 f4 04 00 00       	call   c0009dcb <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 4c 24 00 00       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 4c 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002564c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 4c 56 02 c0       	mov    eax,ds:0xc002564c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 c4 27 02 c0       	push   0xc00227c4
c0009918:	e8 47 31 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 b6 27 02 c0       	push   0xc00227b6
c0009937:	e8 e9 a9 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 bb 27 02 c0       	push   0xc00227bb
c000994d:	e8 d3 a9 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000996d:	48                   	dec    eax
c000996e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c000998b:	e8 a2 24 00 00       	call   c000be32 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c00099a1:	e8 36 21 00 00       	call   c000badc <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 f4 27 02 c0       	push   0xc00227f4
c0009ace:	e8 91 2f 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 f4 09 00 00       	call   c000a4cc <installVgaTextImplementation()>
c0009ad8:	0f b6 05 60 56 02 c0 	movzx  eax,BYTE PTR ds:0xc0025660
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 60 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9a0]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 96 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda96a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 95 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda96b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 60 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9a0]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 0c 28 02 c0       	push   0xc002280c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 00 64 02 c0       	mov    ds:0xc0026400,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 06 04 00 00       	call   c0009f86 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 c3 1c 00 00       	call   c000b848 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 74 1d 00 00       	call   c000b904 <VAS::VAS()>
c0009b90:	89 1d 50 65 02 c0    	mov    DWORD PTR ds:0xc0026550,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 e8 63 02 c0    	mov    DWORD PTR ds:0xc00263e8,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 e8 1f 00 00       	call   c000bbb4 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 2b 28 02 c0       	push   0xc002282b
c0009be3:	e8 7c 2e 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	c1 e8 0c             	shr    eax,0xc
c0009bf9:	31 c9                	xor    ecx,ecx
c0009bfb:	eb 17                	jmp    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009bfd:	85 c9                	test   ecx,ecx
c0009bff:	75 04                	jne    c0009c05 <Phys::allocateDMA(unsigned long)+0x32>
c0009c01:	89 d5                	mov    ebp,edx
c0009c03:	89 d3                	mov    ebx,edx
c0009c05:	8d 71 01             	lea    esi,[ecx+0x1]
c0009c08:	39 f0                	cmp    eax,esi
c0009c0a:	74 23                	je     c0009c2f <Phys::allocateDMA(unsigned long)+0x5c>
c0009c0c:	42                   	inc    edx
c0009c0d:	89 f1                	mov    ecx,esi
c0009c0f:	83 fa 2f             	cmp    edx,0x2f
c0009c12:	7f 11                	jg     c0009c25 <Phys::allocateDMA(unsigned long)+0x52>
c0009c14:	80 ba 40 64 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9bc0],0x0
c0009c1b:	74 e0                	je     c0009bfd <Phys::allocateDMA(unsigned long)+0x2a>
c0009c1d:	31 c9                	xor    ecx,ecx
c0009c1f:	42                   	inc    edx
c0009c20:	83 fa 2f             	cmp    edx,0x2f
c0009c23:	7e ef                	jle    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009c25:	83 c4 0c             	add    esp,0xc
c0009c28:	31 c0                	xor    eax,eax
c0009c2a:	5b                   	pop    ebx
c0009c2b:	5e                   	pop    esi
c0009c2c:	5f                   	pop    edi
c0009c2d:	5d                   	pop    ebp
c0009c2e:	c3                   	ret    
c0009c2f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0009c32:	89 d7                	mov    edi,edx
c0009c34:	4f                   	dec    edi
c0009c35:	79 03                	jns    c0009c3a <Phys::allocateDMA(unsigned long)+0x67>
c0009c37:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3a:	c1 ff 04             	sar    edi,0x4
c0009c3d:	89 da                	mov    edx,ebx
c0009c3f:	c1 fa 04             	sar    edx,0x4
c0009c42:	39 fa                	cmp    edx,edi
c0009c44:	75 4a                	jne    c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c46:	85 f6                	test   esi,esi
c0009c48:	74 1b                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4a:	bd 40 64 02 c0       	mov    ebp,0xc0026440
c0009c4f:	8d 93 40 64 02 c0    	lea    edx,[ebx-0x3ffd9bc0]
c0009c55:	f7 d5                	not    ebp
c0009c57:	29 dd                	sub    ebp,ebx
c0009c59:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5c:	42                   	inc    edx
c0009c5d:	8d 74 15 00          	lea    esi,[ebp+edx*1+0x0]
c0009c61:	39 f1                	cmp    ecx,esi
c0009c63:	7f f4                	jg     c0009c59 <Phys::allocateDMA(unsigned long)+0x86>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	01 05 30 64 02 c0    	add    DWORD PTR ds:0xc0026430,eax
c0009c6e:	68 44 28 02 c0       	push   0xc0022844
c0009c73:	e8 ec 2d 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	85 ff                	test   edi,edi
c0009c7d:	74 17                	je     c0009c96 <Phys::allocateDMA(unsigned long)+0xc3>
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c88:	5b                   	pop    ebx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	5e                   	pop    esi
c0009c8d:	5f                   	pop    edi
c0009c8e:	5d                   	pop    ebp
c0009c8f:	c3                   	ret    
c0009c90:	89 ea                	mov    edx,ebp
c0009c92:	31 c9                	xor    ecx,ecx
c0009c94:	eb 89                	jmp    c0009c1f <Phys::allocateDMA(unsigned long)+0x4c>
c0009c96:	83 c4 0c             	add    esp,0xc
c0009c99:	c1 e3 0c             	shl    ebx,0xc
c0009c9c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    

c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca7:	83 ec 18             	sub    esp,0x18
c0009caa:	68 5b 28 02 c0       	push   0xc002285b
c0009caf:	e8 b0 2d 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc5:	c1 e9 0c             	shr    ecx,0xc
c0009cc8:	29 0d 30 64 02 c0    	sub    DWORD PTR ds:0xc0026430,ecx
c0009cce:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cd6:	76 29                	jbe    c0009d01 <Phys::freeDMA(unsigned long, unsigned long)+0x5a>
c0009cd8:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cde:	c1 ea 0c             	shr    edx,0xc
c0009ce1:	83 c2 10             	add    edx,0x10
c0009ce4:	85 c9                	test   ecx,ecx
c0009ce6:	74 15                	je     c0009cfd <Phys::freeDMA(unsigned long, unsigned long)+0x56>
c0009ce8:	8d 82 40 64 02 c0    	lea    eax,[edx-0x3ffd9bc0]
c0009cee:	8d 94 11 40 64 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9bc0]
c0009cf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cf8:	40                   	inc    eax
c0009cf9:	39 d0                	cmp    eax,edx
c0009cfb:	75 f8                	jne    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x4e>
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	c3                   	ret    
c0009d01:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009d07:	c1 ea 0c             	shr    edx,0xc
c0009d0a:	eb d8                	jmp    c0009ce4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>

c0009d0c <Phys::setPageState(unsigned long, bool)>:
c0009d0c:	56                   	push   esi
c0009d0d:	ba 01 00 00 00       	mov    edx,0x1
c0009d12:	53                   	push   ebx
c0009d13:	8b 35 a4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257a4
c0009d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d21:	89 c8                	mov    eax,ecx
c0009d23:	83 e1 07             	and    ecx,0x7
c0009d26:	c1 e8 03             	shr    eax,0x3
c0009d29:	d3 e3                	shl    ebx,cl
c0009d2b:	01 c6                	add    esi,eax
c0009d2d:	d3 e2                	shl    edx,cl
c0009d2f:	f7 d2                	not    edx
c0009d31:	20 16                	and    BYTE PTR [esi],dl
c0009d33:	03 05 a4 57 02 c0    	add    eax,DWORD PTR ds:0xc00257a4
c0009d39:	08 18                	or     BYTE PTR [eax],bl
c0009d3b:	5b                   	pop    ebx
c0009d3c:	5e                   	pop    esi
c0009d3d:	c3                   	ret    

c0009d3e <Phys::getPageState(unsigned long)>:
c0009d3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d42:	8b 15 a4 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257a4
c0009d48:	89 c8                	mov    eax,ecx
c0009d4a:	83 e1 07             	and    ecx,0x7
c0009d4d:	c1 e8 03             	shr    eax,0x3
c0009d50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d54:	d3 f8                	sar    eax,cl
c0009d56:	83 e0 01             	and    eax,0x1
c0009d59:	c3                   	ret    

c0009d5a <Phys::freePage(unsigned long)>:
c0009d5a:	53                   	push   ebx
c0009d5b:	83 ec 10             	sub    esp,0x10
c0009d5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d62:	53                   	push   ebx
c0009d63:	68 71 28 02 c0       	push   0xc0022871
c0009d68:	e8 f7 2c 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009d6d:	83 c4 10             	add    esp,0x10
c0009d70:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009d76:	76 3d                	jbe    c0009db5 <Phys::freePage(unsigned long)+0x5b>
c0009d78:	83 ec 0c             	sub    esp,0xc
c0009d7b:	c1 eb 0c             	shr    ebx,0xc
c0009d7e:	53                   	push   ebx
c0009d7f:	e8 ba ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009d84:	83 c4 10             	add    esp,0x10
c0009d87:	84 c0                	test   al,al
c0009d89:	74 19                	je     c0009da4 <Phys::freePage(unsigned long)+0x4a>
c0009d8b:	83 ec 08             	sub    esp,0x8
c0009d8e:	ff 0d 30 64 02 c0    	dec    DWORD PTR ds:0xc0026430
c0009d94:	6a 00                	push   0x0
c0009d96:	53                   	push   ebx
c0009d97:	e8 70 ff ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009d9c:	83 c4 10             	add    esp,0x10
c0009d9f:	83 c4 08             	add    esp,0x8
c0009da2:	5b                   	pop    ebx
c0009da3:	c3                   	ret    
c0009da4:	c7 44 24 10 84 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022884
c0009dac:	83 c4 08             	add    esp,0x8
c0009daf:	5b                   	pop    ebx
c0009db0:	e9 70 a5 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c0009db5:	83 ec 08             	sub    esp,0x8
c0009db8:	68 00 10 00 00       	push   0x1000
c0009dbd:	53                   	push   ebx
c0009dbe:	e8 e4 fe ff ff       	call   c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>
c0009dc3:	83 c4 10             	add    esp,0x10
c0009dc6:	83 c4 08             	add    esp,0x8
c0009dc9:	5b                   	pop    ebx
c0009dca:	c3                   	ret    

c0009dcb <Phys::allocatePage()>:
c0009dcb:	56                   	push   esi
c0009dcc:	53                   	push   ebx
c0009dcd:	83 ec 14             	sub    esp,0x14
c0009dd0:	8b 35 24 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026424
c0009dd6:	89 f3                	mov    ebx,esi
c0009dd8:	eb 0a                	jmp    c0009de4 <Phys::allocatePage()+0x19>
c0009dda:	89 1d 24 64 02 c0    	mov    DWORD PTR ds:0xc0026424,ebx
c0009de0:	39 de                	cmp    esi,ebx
c0009de2:	74 24                	je     c0009e08 <Phys::allocatePage()+0x3d>
c0009de4:	53                   	push   ebx
c0009de5:	e8 54 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009dea:	5a                   	pop    edx
c0009deb:	84 c0                	test   al,al
c0009ded:	74 73                	je     c0009e62 <Phys::allocatePage()+0x97>
c0009def:	43                   	inc    ebx
c0009df0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009df6:	75 e2                	jne    c0009dda <Phys::allocatePage()+0xf>
c0009df8:	31 db                	xor    ebx,ebx
c0009dfa:	c7 05 24 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026424,0x0
c0009e04:	39 de                	cmp    esi,ebx
c0009e06:	75 dc                	jne    c0009de4 <Phys::allocatePage()+0x19>
c0009e08:	80 35 70 64 02 c0 01 	xor    BYTE PTR ds:0xc0026470,0x1
c0009e0f:	0f 85 8e 00 00 00    	jne    c0009ea3 <Phys::allocatePage()+0xd8>
c0009e15:	83 ec 0c             	sub    esp,0xc
c0009e18:	68 28 29 02 c0       	push   0xc0022928
c0009e1d:	e8 42 2c 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009e22:	58                   	pop    eax
c0009e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e31:	e8 b4 28 00 00       	call   c000c6ea <VAS::scanForEviction()>
c0009e36:	83 c4 10             	add    esp,0x10
c0009e39:	85 c0                	test   eax,eax
c0009e3b:	0f 85 94 00 00 00    	jne    c0009ed5 <Phys::allocatePage()+0x10a>
c0009e41:	83 ec 0c             	sub    esp,0xc
c0009e44:	68 b8 28 02 c0       	push   0xc00228b8
c0009e49:	e8 d7 a4 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0009e4e:	83 c4 10             	add    esp,0x10
c0009e51:	8b 1d 24 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026424
c0009e57:	53                   	push   ebx
c0009e58:	e8 e1 fe ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e5d:	5a                   	pop    edx
c0009e5e:	84 c0                	test   al,al
c0009e60:	75 8d                	jne    c0009def <Phys::allocatePage()+0x24>
c0009e62:	6a 01                	push   0x1
c0009e64:	53                   	push   ebx
c0009e65:	e8 a2 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009e6a:	5a                   	pop    edx
c0009e6b:	a1 30 64 02 c0       	mov    eax,ds:0xc0026430
c0009e70:	59                   	pop    ecx
c0009e71:	40                   	inc    eax
c0009e72:	8b 15 24 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026424
c0009e78:	a3 30 64 02 c0       	mov    ds:0xc0026430,eax
c0009e7d:	c1 e2 0c             	shl    edx,0xc
c0009e80:	52                   	push   edx
c0009e81:	ff 35 34 64 02 c0    	push   DWORD PTR ds:0xc0026434
c0009e87:	50                   	push   eax
c0009e88:	68 9a 28 02 c0       	push   0xc002289a
c0009e8d:	e8 d2 2b 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009e92:	a1 24 64 02 c0       	mov    eax,ds:0xc0026424
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	c1 e0 0c             	shl    eax,0xc
c0009e9d:	83 c4 14             	add    esp,0x14
c0009ea0:	5b                   	pop    ebx
c0009ea1:	5e                   	pop    esi
c0009ea2:	c3                   	ret    
c0009ea3:	83 ec 0c             	sub    esp,0xc
c0009ea6:	68 00 10 00 00       	push   0x1000
c0009eab:	e8 23 fd ff ff       	call   c0009bd3 <Phys::allocateDMA(unsigned long)>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	85 c0                	test   eax,eax
c0009eb5:	0f 84 5a ff ff ff    	je     c0009e15 <Phys::allocatePage()+0x4a>
c0009ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ebf:	83 ec 0c             	sub    esp,0xc
c0009ec2:	68 08 29 02 c0       	push   0xc0022908
c0009ec7:	e8 98 2b 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009ecc:	83 c4 10             	add    esp,0x10
c0009ecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed3:	eb c8                	jmp    c0009e9d <Phys::allocatePage()+0xd2>
c0009ed5:	83 ec 08             	sub    esp,0x8
c0009ed8:	89 c2                	mov    edx,eax
c0009eda:	6a 01                	push   0x1
c0009edc:	c1 ea 0c             	shr    edx,0xc
c0009edf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ee3:	52                   	push   edx
c0009ee4:	e8 23 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009ee9:	83 c4 10             	add    esp,0x10
c0009eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ef0:	eb ab                	jmp    c0009e9d <Phys::allocatePage()+0xd2>

c0009ef2 <Phys::allocateContiguousPages(int)>:
c0009ef2:	57                   	push   edi
c0009ef3:	56                   	push   esi
c0009ef4:	53                   	push   ebx
c0009ef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ef9:	fa                   	cli    
c0009efa:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0009f00:	31 db                	xor    ebx,ebx
c0009f02:	85 db                	test   ebx,ebx
c0009f04:	75 11                	jne    c0009f17 <Phys::allocateContiguousPages(int)+0x25>
c0009f06:	e8 c0 fe ff ff       	call   c0009dcb <Phys::allocatePage()>
c0009f0b:	83 fe 01             	cmp    esi,0x1
c0009f0e:	89 c7                	mov    edi,eax
c0009f10:	74 21                	je     c0009f33 <Phys::allocateContiguousPages(int)+0x41>
c0009f12:	bb 01 00 00 00       	mov    ebx,0x1
c0009f17:	e8 af fe ff ff       	call   c0009dcb <Phys::allocatePage()>
c0009f1c:	89 da                	mov    edx,ebx
c0009f1e:	c1 e2 0c             	shl    edx,0xc
c0009f21:	01 fa                	add    edx,edi
c0009f23:	39 c2                	cmp    edx,eax
c0009f25:	74 20                	je     c0009f47 <Phys::allocateContiguousPages(int)+0x55>
c0009f27:	bb 01 00 00 00       	mov    ebx,0x1
c0009f2c:	89 c7                	mov    edi,eax
c0009f2e:	83 fe 01             	cmp    esi,0x1
c0009f31:	75 e4                	jne    c0009f17 <Phys::allocateContiguousPages(int)+0x25>
c0009f33:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0009f38:	48                   	dec    eax
c0009f39:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0009f3e:	75 01                	jne    c0009f41 <Phys::allocateContiguousPages(int)+0x4f>
c0009f40:	fb                   	sti    
c0009f41:	89 f8                	mov    eax,edi
c0009f43:	5b                   	pop    ebx
c0009f44:	5e                   	pop    esi
c0009f45:	5f                   	pop    edi
c0009f46:	c3                   	ret    
c0009f47:	43                   	inc    ebx
c0009f48:	39 f3                	cmp    ebx,esi
c0009f4a:	75 b6                	jne    c0009f02 <Phys::allocateContiguousPages(int)+0x10>
c0009f4c:	eb e5                	jmp    c0009f33 <Phys::allocateContiguousPages(int)+0x41>

c0009f4e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f4e:	56                   	push   esi
c0009f4f:	53                   	push   ebx
c0009f50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f54:	39 1d 28 64 02 c0    	cmp    DWORD PTR ds:0xc0026428,ebx
c0009f5a:	73 06                	jae    c0009f62 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f5c:	89 1d 28 64 02 c0    	mov    DWORD PTR ds:0xc0026428,ebx
c0009f62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f66:	c1 eb 0c             	shr    ebx,0xc
c0009f69:	c1 e8 0c             	shr    eax,0xc
c0009f6c:	39 d8                	cmp    eax,ebx
c0009f6e:	73 13                	jae    c0009f83 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f70:	6a 00                	push   0x0
c0009f72:	8d 70 01             	lea    esi,[eax+0x1]
c0009f75:	50                   	push   eax
c0009f76:	e8 91 fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009f7b:	5a                   	pop    edx
c0009f7c:	89 f0                	mov    eax,esi
c0009f7e:	59                   	pop    ecx
c0009f7f:	39 f3                	cmp    ebx,esi
c0009f81:	75 ed                	jne    c0009f70 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f83:	5b                   	pop    ebx
c0009f84:	5e                   	pop    esi
c0009f85:	c3                   	ret    

c0009f86 <Phys::physicalMemorySetup(unsigned int)>:
c0009f86:	55                   	push   ebp
c0009f87:	57                   	push   edi
c0009f88:	56                   	push   esi
c0009f89:	53                   	push   ebx
c0009f8a:	83 ec 40             	sub    esp,0x40
c0009f8d:	6a 30                	push   0x30
c0009f8f:	6a 00                	push   0x0
c0009f91:	68 40 64 02 c0       	push   0xc0026440
c0009f96:	e8 e9 66 ff ff       	call   c0000684 <memset>
c0009f9b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa4:	05 00 10 00 00       	add    eax,0x1000
c0009fa9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fad:	5b                   	pop    ebx
c0009fae:	31 db                	xor    ebx,ebx
c0009fb0:	5e                   	pop    esi
c0009fb1:	50                   	push   eax
c0009fb2:	68 c6 28 02 c0       	push   0xc00228c6
c0009fb7:	e8 a8 2a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0009fbc:	83 c4 10             	add    esp,0x10
c0009fbf:	83 ec 08             	sub    esp,0x8
c0009fc2:	6a 01                	push   0x1
c0009fc4:	53                   	push   ebx
c0009fc5:	43                   	inc    ebx
c0009fc6:	e8 41 fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009fcb:	83 c4 10             	add    esp,0x10
c0009fce:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fd4:	75 e9                	jne    c0009fbf <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fd6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fdd:	66 85 c0             	test   ax,ax
c0009fe0:	0f 84 8e 01 00 00    	je     c000a174 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fe6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009ff2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009ff6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009ffb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a007:	eb 15                	jmp    c000a01e <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a009:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a00d:	83 c3 18             	add    ebx,0x18
c000a010:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a014:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a018:	0f 84 66 01 00 00    	je     c000a184 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a01e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a021:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a024:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a027:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a02b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a02f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a031:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a034:	01 f0                	add    eax,esi
c000a036:	55                   	push   ebp
c000a037:	11 fa                	adc    edx,edi
c000a039:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a03d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a041:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a045:	56                   	push   esi
c000a046:	68 58 29 02 c0       	push   0xc0022958
c000a04b:	e8 14 2a 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000a050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	09 f8                	or     eax,edi
c000a059:	0f 85 25 01 00 00    	jne    c000a184 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a05f:	4d                   	dec    ebp
c000a060:	75 a7                	jne    c000a009 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a062:	ba 00 00 08 00       	mov    edx,0x80000
c000a067:	89 c1                	mov    ecx,eax
c000a069:	39 f2                	cmp    edx,esi
c000a06b:	19 f9                	sbb    ecx,edi
c000a06d:	0f 82 a7 00 00 00    	jb     c000a11a <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a073:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a077:	89 c1                	mov    ecx,eax
c000a079:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a07d:	0f 83 97 00 00 00    	jae    c000a11a <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a083:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a088:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a08c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a090:	39 fa                	cmp    edx,edi
c000a092:	19 e8                	sbb    eax,ebp
c000a094:	0f 82 14 01 00 00    	jb     c000a1ae <Phys::physicalMemorySetup(unsigned int)+0x228>
c000a09a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a09e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0a2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a0a8:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0ad:	83 d5 ff             	adc    ebp,0xffffffff
c000a0b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0b4:	31 c0                	xor    eax,eax
c000a0b6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0ba:	39 fa                	cmp    edx,edi
c000a0bc:	89 c1                	mov    ecx,eax
c000a0be:	19 e9                	sbb    ecx,ebp
c000a0c0:	0f 83 43 ff ff ff    	jae    c000a009 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0c6:	be 00 00 08 00       	mov    esi,0x80000
c000a0cb:	50                   	push   eax
c000a0cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	68 7c 29 02 c0       	push   0xc002297c
c000a0d7:	e8 88 29 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000a0dc:	5a                   	pop    edx
c000a0dd:	59                   	pop    ecx
c000a0de:	57                   	push   edi
c000a0df:	56                   	push   esi
c000a0e0:	e8 69 fe ff ff       	call   c0009f4e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0ed:	83 c4 0c             	add    esp,0xc
c000a0f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0f4:	03 05 34 64 02 c0    	add    eax,DWORD PTR ds:0xc0026434
c000a0fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a101:	a3 34 64 02 c0       	mov    ds:0xc0026434,eax
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	68 ec 28 02 c0       	push   0xc00228ec
c000a10d:	e8 52 29 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000a112:	83 c4 10             	add    esp,0x10
c000a115:	e9 ef fe ff ff       	jmp    c000a009 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a11a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a11e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a122:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a126:	39 ea                	cmp    edx,ebp
c000a128:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a12c:	0f 82 d7 fe ff ff    	jb     c000a009 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a132:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a137:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a13b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a13f:	0f 83 c4 fe ff ff    	jae    c000a009 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a145:	39 ee                	cmp    esi,ebp
c000a147:	89 f8                	mov    eax,edi
c000a149:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a14d:	0f 83 78 ff ff ff    	jae    c000a0cb <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a157:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a15b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a15f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a163:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a16f:	e9 57 ff ff ff       	jmp    c000a0cb <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a174:	83 ec 0c             	sub    esp,0xc
c000a177:	68 de 28 02 c0       	push   0xc00228de
c000a17c:	e8 a4 a1 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000a181:	83 c4 10             	add    esp,0x10
c000a184:	bb 40 01 00 00       	mov    ebx,0x140
c000a189:	83 ec 08             	sub    esp,0x8
c000a18c:	6a 00                	push   0x0
c000a18e:	53                   	push   ebx
c000a18f:	43                   	inc    ebx
c000a190:	e8 77 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a195:	ff 05 34 64 02 c0    	inc    DWORD PTR ds:0xc0026434
c000a19b:	83 c4 10             	add    esp,0x10
c000a19e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a1a4:	75 e3                	jne    c000a189 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a1a6:	83 c4 3c             	add    esp,0x3c
c000a1a9:	5b                   	pop    ebx
c000a1aa:	5e                   	pop    esi
c000a1ab:	5f                   	pop    edi
c000a1ac:	5d                   	pop    ebp
c000a1ad:	c3                   	ret    
c000a1ae:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a1b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a1be:	e9 d7 fe ff ff       	jmp    c000a09a <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a1c3:	90                   	nop

c000a1c4 <Pipe::isAtty()>:
c000a1c4:	31 c0                	xor    eax,eax
c000a1c6:	c3                   	ret    
c000a1c7:	90                   	nop

c000a1c8 <Pipe::~Pipe()>:
c000a1c8:	83 ec 0c             	sub    esp,0xc
c000a1cb:	ba e8 29 02 c0       	mov    edx,0xc00229e8
c000a1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1da:	83 ec 0c             	sub    esp,0xc
c000a1dd:	50                   	push   eax
c000a1de:	e8 45 12 00 00       	call   c000b428 <UnixFile::~UnixFile()>
c000a1e3:	83 c4 10             	add    esp,0x10
c000a1e6:	90                   	nop
c000a1e7:	83 c4 0c             	add    esp,0xc
c000a1ea:	c3                   	ret    
c000a1eb:	90                   	nop

c000a1ec <Pipe::~Pipe()>:
c000a1ec:	83 ec 0c             	sub    esp,0xc
c000a1ef:	83 ec 0c             	sub    esp,0xc
c000a1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1f6:	e8 cd ff ff ff       	call   c000a1c8 <Pipe::~Pipe()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	83 ec 08             	sub    esp,0x8
c000a201:	6a 20                	push   0x20
c000a203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a207:	e8 77 27 00 00       	call   c000c983 <operator delete(void*, unsigned long)>
c000a20c:	83 c4 10             	add    esp,0x10
c000a20f:	83 c4 0c             	add    esp,0xc
c000a212:	c3                   	ret    
c000a213:	90                   	nop

c000a214 <Pipe::read(unsigned long long, void*, int*)>:
c000a214:	55                   	push   ebp
c000a215:	57                   	push   edi
c000a216:	56                   	push   esi
c000a217:	53                   	push   ebx
c000a218:	83 ec 1c             	sub    esp,0x1c
c000a21b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a21f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a223:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a227:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a22a:	89 c8                	mov    eax,ecx
c000a22c:	99                   	cdq    
c000a22d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a231:	74 24                	je     c000a257 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a233:	39 f9                	cmp    ecx,edi
c000a235:	89 d1                	mov    ecx,edx
c000a237:	19 f1                	sbb    ecx,esi
c000a239:	73 1c                	jae    c000a257 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a23b:	fa                   	cli    
c000a23c:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c000a242:	e8 b1 dc 00 00       	call   c0017ef8 <schedule()>
c000a247:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000a24c:	48                   	dec    eax
c000a24d:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000a252:	75 d3                	jne    c000a227 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a254:	fb                   	sti    
c000a255:	eb d0                	jmp    c000a227 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a257:	39 f8                	cmp    eax,edi
c000a259:	89 d1                	mov    ecx,edx
c000a25b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a262:	19 f1                	sbb    ecx,esi
c000a264:	73 07                	jae    c000a26d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a266:	89 04 24             	mov    DWORD PTR [esp],eax
c000a269:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a26d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a270:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a273:	29 f7                	sub    edi,esi
c000a275:	89 f8                	mov    eax,edi
c000a277:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a27b:	99                   	cdq    
c000a27c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a27f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a283:	19 d0                	sbb    eax,edx
c000a285:	73 07                	jae    c000a28e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a287:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a28a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a28e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a291:	89 ea                	mov    edx,ebp
c000a293:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a297:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a29c:	74 0d                	je     c000a2ab <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a29e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a2a1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a2a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2ab:	85 d2                	test   edx,edx
c000a2ad:	74 11                	je     c000a2c0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a2af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2b3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a2b6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a2ba:	89 d1                	mov    ecx,edx
c000a2bc:	89 c7                	mov    edi,eax
c000a2be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a2c6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a2c9:	99                   	cdq    
c000a2ca:	89 f7                	mov    edi,esi
c000a2cc:	03 04 24             	add    eax,DWORD PTR [esp]
c000a2cf:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a2d3:	c1 ff 1f             	sar    edi,0x1f
c000a2d6:	57                   	push   edi
c000a2d7:	56                   	push   esi
c000a2d8:	52                   	push   edx
c000a2d9:	50                   	push   eax
c000a2da:	e8 45 6d 01 00       	call   c0021024 <__umoddi3>
c000a2df:	83 c4 10             	add    esp,0x10
c000a2e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2e5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a2ea:	75 10                	jne    c000a2fc <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a2ec:	83 ec 0c             	sub    esp,0xc
c000a2ef:	68 a5 29 02 c0       	push   0xc00229a5
c000a2f4:	e8 2c a0 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000a2f9:	83 c4 10             	add    esp,0x10
c000a2fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a300:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a303:	89 10                	mov    DWORD PTR [eax],edx
c000a305:	83 c4 1c             	add    esp,0x1c
c000a308:	31 c0                	xor    eax,eax
c000a30a:	5b                   	pop    ebx
c000a30b:	5e                   	pop    esi
c000a30c:	5f                   	pop    edi
c000a30d:	5d                   	pop    ebp
c000a30e:	c3                   	ret    
c000a30f:	90                   	nop

c000a310 <Pipe::write(unsigned long long, void*, int*)>:
c000a310:	55                   	push   ebp
c000a311:	57                   	push   edi
c000a312:	56                   	push   esi
c000a313:	53                   	push   ebx
c000a314:	83 ec 1c             	sub    esp,0x1c
c000a317:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a31b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a31f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a322:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a326:	89 04 24             	mov    DWORD PTR [esp],eax
c000a329:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a32d:	89 d8                	mov    eax,ebx
c000a32f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a332:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a336:	89 d6                	mov    esi,edx
c000a338:	89 d7                	mov    edi,edx
c000a33a:	c1 ff 1f             	sar    edi,0x1f
c000a33d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a340:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a344:	c1 f8 1f             	sar    eax,0x1f
c000a347:	39 f3                	cmp    ebx,esi
c000a349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a34d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a351:	19 f8                	sbb    eax,edi
c000a353:	b8 01 00 00 00       	mov    eax,0x1
c000a358:	72 6e                	jb     c000a3c8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a35a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a35d:	01 d0                	add    eax,edx
c000a35f:	99                   	cdq    
c000a360:	f7 fb                	idiv   ebx
c000a362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a366:	29 d3                	sub    ebx,edx
c000a368:	89 d7                	mov    edi,edx
c000a36a:	89 de                	mov    esi,ebx
c000a36c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a36f:	c1 fb 1f             	sar    ebx,0x1f
c000a372:	39 f2                	cmp    edx,esi
c000a374:	19 d8                	sbb    eax,ebx
c000a376:	b8 00 00 00 00       	mov    eax,0x0
c000a37b:	72 04                	jb     c000a381 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a37d:	89 d0                	mov    eax,edx
c000a37f:	29 f0                	sub    eax,esi
c000a381:	89 d3                	mov    ebx,edx
c000a383:	29 c3                	sub    ebx,eax
c000a385:	74 0b                	je     c000a392 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a387:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a38a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a38e:	89 d9                	mov    ecx,ebx
c000a390:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a392:	85 c0                	test   eax,eax
c000a394:	74 0d                	je     c000a3a3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a396:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a39a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a39d:	89 de                	mov    esi,ebx
c000a39f:	89 c1                	mov    ecx,eax
c000a3a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3a3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a3a6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a3ab:	75 10                	jne    c000a3bd <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a3ad:	83 ec 0c             	sub    esp,0xc
c000a3b0:	68 c1 29 02 c0       	push   0xc00229c1
c000a3b5:	e8 6b 9f 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3c1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a3c4:	89 08                	mov    DWORD PTR [eax],ecx
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	83 c4 1c             	add    esp,0x1c
c000a3cb:	5b                   	pop    ebx
c000a3cc:	5e                   	pop    esi
c000a3cd:	5f                   	pop    edi
c000a3ce:	5d                   	pop    ebp
c000a3cf:	c3                   	ret    

c000a3d0 <Pipe::Pipe(int)>:
c000a3d0:	83 ec 0c             	sub    esp,0xc
c000a3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d7:	83 ec 08             	sub    esp,0x8
c000a3da:	6a 00                	push   0x0
c000a3dc:	50                   	push   eax
c000a3dd:	e8 64 0e 00 00       	call   c000b246 <UnixFile::UnixFile(int)>
c000a3e2:	83 c4 10             	add    esp,0x10
c000a3e5:	ba e8 29 02 c0       	mov    edx,0xc00229e8
c000a3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ee:	89 10                	mov    DWORD PTR [eax],edx
c000a3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a3f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ff:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a411:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a415:	83 ec 0c             	sub    esp,0xc
c000a418:	50                   	push   eax
c000a419:	e8 a5 f5 ff ff       	call   c00099c3 <malloc>
c000a41e:	83 c4 10             	add    esp,0x10
c000a421:	89 c2                	mov    edx,eax
c000a423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a427:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a42e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a432:	90                   	nop
c000a433:	83 c4 0c             	add    esp,0xc
c000a436:	c3                   	ret    
c000a437:	90                   	nop

c000a438 <VgaText::isAtty()>:
c000a438:	b0 01                	mov    al,0x1
c000a43a:	c3                   	ret    
c000a43b:	90                   	nop

c000a43c <VgaText::~VgaText()>:
c000a43c:	83 ec 0c             	sub    esp,0xc
c000a43f:	ba 70 2a 02 c0       	mov    edx,0xc0022a70
c000a444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a448:	89 10                	mov    DWORD PTR [eax],edx
c000a44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a44e:	83 ec 0c             	sub    esp,0xc
c000a451:	50                   	push   eax
c000a452:	e8 d1 0f 00 00       	call   c000b428 <UnixFile::~UnixFile()>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	90                   	nop
c000a45b:	83 c4 0c             	add    esp,0xc
c000a45e:	c3                   	ret    
c000a45f:	90                   	nop

c000a460 <VgaText::~VgaText()>:
c000a460:	83 ec 0c             	sub    esp,0xc
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a46a:	e8 cd ff ff ff       	call   c000a43c <VgaText::~VgaText()>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	83 ec 08             	sub    esp,0x8
c000a475:	68 c4 02 00 00       	push   0x2c4
c000a47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47e:	e8 00 25 00 00       	call   c000c983 <operator delete(void*, unsigned long)>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	83 c4 0c             	add    esp,0xc
c000a489:	c3                   	ret    

c000a48a <VgaText::read(unsigned long long, void*, int*)>:
c000a48a:	83 ec 10             	sub    esp,0x10
c000a48d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a491:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a499:	e8 54 58 00 00       	call   c000fcf2 <readKeyboard(VgaText*, char*, unsigned long)>
c000a49e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a4a2:	89 02                	mov    DWORD PTR [edx],eax
c000a4a4:	31 c0                	xor    eax,eax
c000a4a6:	83 c4 1c             	add    esp,0x1c
c000a4a9:	c3                   	ret    

c000a4aa <setTerminalScrollLock(bool)>:
c000a4aa:	c3                   	ret    

c000a4ab <addToTerminalCycle(VgaText*)>:
c000a4ab:	8b 15 a0 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a0
c000a4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a4b5:	85 d2                	test   edx,edx
c000a4b7:	75 09                	jne    c000a4c2 <addToTerminalCycle(VgaText*)+0x17>
c000a4b9:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a4bc:	a3 a0 64 02 c0       	mov    ds:0xc00264a0,eax
c000a4c1:	c3                   	ret    
c000a4c2:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a4c5:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a4c8:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a4cb:	c3                   	ret    

c000a4cc <installVgaTextImplementation()>:
c000a4cc:	83 ec 10             	sub    esp,0x10
c000a4cf:	6a 20                	push   0x20
c000a4d1:	6a 00                	push   0x0
c000a4d3:	68 80 64 02 c0       	push   0xc0026480
c000a4d8:	e8 a7 61 ff ff       	call   c0000684 <memset>
c000a4dd:	83 c4 1c             	add    esp,0x1c
c000a4e0:	c3                   	ret    

c000a4e1 <scrollTerminalScrollLock(int)>:
c000a4e1:	c3                   	ret    

c000a4e2 <VgaText::updateTitle()>:
c000a4e2:	53                   	push   ebx
c000a4e3:	31 c0                	xor    eax,eax
c000a4e5:	83 ec 58             	sub    esp,0x58
c000a4e8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a4ec:	89 e1                	mov    ecx,esp
c000a4ee:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a4f2:	40                   	inc    eax
c000a4f3:	83 f8 50             	cmp    eax,0x50
c000a4f6:	75 f6                	jne    c000a4ee <VgaText::updateTitle()+0xc>
c000a4f8:	31 c0                	xor    eax,eax
c000a4fa:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a501:	84 db                	test   bl,bl
c000a503:	74 06                	je     c000a50b <VgaText::updateTitle()+0x29>
c000a505:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a508:	40                   	inc    eax
c000a509:	eb ef                	jmp    c000a4fa <VgaText::updateTitle()+0x18>
c000a50b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a50e:	85 c0                	test   eax,eax
c000a510:	74 09                	je     c000a51b <VgaText::updateTitle()+0x39>
c000a512:	53                   	push   ebx
c000a513:	53                   	push   ebx
c000a514:	51                   	push   ecx
c000a515:	52                   	push   edx
c000a516:	ff d0                	call   eax
c000a518:	83 c4 10             	add    esp,0x10
c000a51b:	83 c4 58             	add    esp,0x58
c000a51e:	5b                   	pop    ebx
c000a51f:	c3                   	ret    

c000a520 <VgaText::load()>:
c000a520:	53                   	push   ebx
c000a521:	31 c0                	xor    eax,eax
c000a523:	83 ec 58             	sub    esp,0x58
c000a526:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a52a:	89 e2                	mov    edx,esp
c000a52c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a530:	40                   	inc    eax
c000a531:	83 f8 50             	cmp    eax,0x50
c000a534:	75 f6                	jne    c000a52c <VgaText::load()+0xc>
c000a536:	31 c0                	xor    eax,eax
c000a538:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a53f:	84 c9                	test   cl,cl
c000a541:	74 06                	je     c000a549 <VgaText::load()+0x29>
c000a543:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a546:	40                   	inc    eax
c000a547:	eb ef                	jmp    c000a538 <VgaText::load()+0x18>
c000a549:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	74 09                	je     c000a559 <VgaText::load()+0x39>
c000a550:	51                   	push   ecx
c000a551:	51                   	push   ecx
c000a552:	52                   	push   edx
c000a553:	53                   	push   ebx
c000a554:	ff d0                	call   eax
c000a556:	83 c4 10             	add    esp,0x10
c000a559:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a55c:	85 c0                	test   eax,eax
c000a55e:	74 09                	je     c000a569 <VgaText::load()+0x49>
c000a560:	83 ec 0c             	sub    esp,0xc
c000a563:	53                   	push   ebx
c000a564:	ff d0                	call   eax
c000a566:	83 c4 10             	add    esp,0x10
c000a569:	83 c4 58             	add    esp,0x58
c000a56c:	5b                   	pop    ebx
c000a56d:	c3                   	ret    

c000a56e <VgaText::updateCursor()>:
c000a56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a572:	39 05 a4 64 02 c0    	cmp    DWORD PTR ds:0xc00264a4,eax
c000a578:	75 09                	jne    c000a583 <VgaText::updateCursor()+0x15>
c000a57a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a57d:	85 c0                	test   eax,eax
c000a57f:	74 02                	je     c000a583 <VgaText::updateCursor()+0x15>
c000a581:	ff e0                	jmp    eax
c000a583:	c3                   	ret    

c000a584 <VgaText::doANSI_SGR(int)>:
c000a584:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a58c:	85 d2                	test   edx,edx
c000a58e:	75 0b                	jne    c000a59b <VgaText::doANSI_SGR(int)+0x17>
c000a590:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a596:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a599:	eb 59                	jmp    c000a5f4 <VgaText::doANSI_SGR(int)+0x70>
c000a59b:	83 fa 07             	cmp    edx,0x7
c000a59e:	75 0b                	jne    c000a5ab <VgaText::doANSI_SGR(int)+0x27>
c000a5a0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a5a3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a5a6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a5a9:	eb 49                	jmp    c000a5f4 <VgaText::doANSI_SGR(int)+0x70>
c000a5ab:	83 fa 1b             	cmp    edx,0x1b
c000a5ae:	74 e0                	je     c000a590 <VgaText::doANSI_SGR(int)+0xc>
c000a5b0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a5b3:	83 f9 07             	cmp    ecx,0x7
c000a5b6:	77 09                	ja     c000a5c1 <VgaText::doANSI_SGR(int)+0x3d>
c000a5b8:	8b 14 8d e0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda820]
c000a5bf:	eb 20                	jmp    c000a5e1 <VgaText::doANSI_SGR(int)+0x5d>
c000a5c1:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a5c4:	83 f9 07             	cmp    ecx,0x7
c000a5c7:	77 09                	ja     c000a5d2 <VgaText::doANSI_SGR(int)+0x4e>
c000a5c9:	8b 14 8d e0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda820]
c000a5d0:	eb 22                	jmp    c000a5f4 <VgaText::doANSI_SGR(int)+0x70>
c000a5d2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a5d5:	83 f9 07             	cmp    ecx,0x7
c000a5d8:	77 0b                	ja     c000a5e5 <VgaText::doANSI_SGR(int)+0x61>
c000a5da:	8b 14 95 98 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda968]
c000a5e1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5e4:	c3                   	ret    
c000a5e5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a5e8:	83 f9 07             	cmp    ecx,0x7
c000a5eb:	77 0a                	ja     c000a5f7 <VgaText::doANSI_SGR(int)+0x73>
c000a5ed:	8b 14 95 70 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda990]
c000a5f4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5f7:	c3                   	ret    

c000a5f8 <VgaText::setDefaultBgColour(VgaColour)>:
c000a5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a600:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a603:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a606:	c3                   	ret    
c000a607:	90                   	nop

c000a608 <VgaText::setDefaultFgColour(VgaColour)>:
c000a608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a610:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a613:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a616:	c3                   	ret    
c000a617:	90                   	nop

c000a618 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a618:	53                   	push   ebx
c000a619:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a61d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a621:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a625:	51                   	push   ecx
c000a626:	e8 cd ff ff ff       	call   c000a5f8 <VgaText::setDefaultBgColour(VgaColour)>
c000a62b:	58                   	pop    eax
c000a62c:	5a                   	pop    edx
c000a62d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a631:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a635:	5b                   	pop    ebx
c000a636:	eb d0                	jmp    c000a608 <VgaText::setDefaultFgColour(VgaColour)>

c000a638 <VgaText::setTitleTextColour(VgaColour)>:
c000a638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a63c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a640:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a643:	e9 9a fe ff ff       	jmp    c000a4e2 <VgaText::updateTitle()>

c000a648 <VgaText::setTitleColour(VgaColour)>:
c000a648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a64c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a650:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a653:	e9 8a fe ff ff       	jmp    c000a4e2 <VgaText::updateTitle()>

c000a658 <VgaText::setTitle(char*)>:
c000a658:	53                   	push   ebx
c000a659:	83 ec 10             	sub    esp,0x10
c000a65c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a664:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a66a:	50                   	push   eax
c000a66b:	e8 d0 60 ff ff       	call   c0000740 <strcpy>
c000a670:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a674:	83 c4 18             	add    esp,0x18
c000a677:	5b                   	pop    ebx
c000a678:	e9 65 fe ff ff       	jmp    c000a4e2 <VgaText::updateTitle()>
c000a67d:	90                   	nop

c000a67e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a67e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a682:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a687:	83 e0 0f             	and    eax,0xf
c000a68a:	c1 e2 04             	shl    edx,0x4
c000a68d:	09 d0                	or     eax,edx
c000a68f:	c3                   	ret    

c000a690 <VgaText::scrollScreen()>:
c000a690:	55                   	push   ebp
c000a691:	b9 01 00 00 00       	mov    ecx,0x1
c000a696:	57                   	push   edi
c000a697:	56                   	push   esi
c000a698:	53                   	push   ebx
c000a699:	83 ec 0c             	sub    esp,0xc
c000a69c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6a0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a6a6:	31 ff                	xor    edi,edi
c000a6a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a6ab:	83 f9 17             	cmp    ecx,0x17
c000a6ae:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a6b1:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a6b8:	75 27                	jne    c000a6e1 <VgaText::scrollScreen()+0x51>
c000a6ba:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a6bd:	01 f5                	add    ebp,esi
c000a6bf:	f7 c7 01 00 00 00    	test   edi,0x1
c000a6c5:	74 16                	je     c000a6dd <VgaText::scrollScreen()+0x4d>
c000a6c7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a6cb:	50                   	push   eax
c000a6cc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a6d0:	50                   	push   eax
c000a6d1:	e8 a8 ff ff ff       	call   c000a67e <VgaText::combineColours(unsigned char, unsigned char)>
c000a6d6:	5a                   	pop    edx
c000a6d7:	5a                   	pop    edx
c000a6d8:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a6db:	eb 04                	jmp    c000a6e1 <VgaText::scrollScreen()+0x51>
c000a6dd:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6e1:	47                   	inc    edi
c000a6e2:	46                   	inc    esi
c000a6e3:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a6e9:	75 bd                	jne    c000a6a8 <VgaText::scrollScreen()+0x18>
c000a6eb:	41                   	inc    ecx
c000a6ec:	83 f9 18             	cmp    ecx,0x18
c000a6ef:	75 af                	jne    c000a6a0 <VgaText::scrollScreen()+0x10>
c000a6f1:	39 1d a4 64 02 c0    	cmp    DWORD PTR ds:0xc00264a4,ebx
c000a6f7:	75 1b                	jne    c000a714 <VgaText::scrollScreen()+0x84>
c000a6f9:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a6fd:	74 05                	je     c000a704 <VgaText::scrollScreen()+0x74>
c000a6ff:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a702:	eb 10                	jmp    c000a714 <VgaText::scrollScreen()+0x84>
c000a704:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a707:	85 c0                	test   eax,eax
c000a709:	74 09                	je     c000a714 <VgaText::scrollScreen()+0x84>
c000a70b:	83 ec 0c             	sub    esp,0xc
c000a70e:	53                   	push   ebx
c000a70f:	ff d0                	call   eax
c000a711:	83 c4 10             	add    esp,0x10
c000a714:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a718:	83 c4 0c             	add    esp,0xc
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	e9 4a fe ff ff       	jmp    c000a56e <VgaText::updateCursor()>

c000a724 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a724:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a729:	c1 e0 08             	shl    eax,0x8
c000a72c:	89 c2                	mov    edx,eax
c000a72e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a733:	09 d0                	or     eax,edx
c000a735:	c3                   	ret    

c000a736 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a736:	56                   	push   esi
c000a737:	53                   	push   ebx
c000a738:	51                   	push   ecx
c000a739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a73d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a742:	50                   	push   eax
c000a743:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a748:	50                   	push   eax
c000a749:	e8 30 ff ff ff       	call   c000a67e <VgaText::combineColours(unsigned char, unsigned char)>
c000a74e:	5b                   	pop    ebx
c000a74f:	0f b6 c0             	movzx  eax,al
c000a752:	5e                   	pop    esi
c000a753:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a758:	50                   	push   eax
c000a759:	53                   	push   ebx
c000a75a:	e8 c5 ff ff ff       	call   c000a724 <VgaText::combineCharAndColour(char, unsigned char)>
c000a75f:	5a                   	pop    edx
c000a760:	5e                   	pop    esi
c000a761:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a764:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a76a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a76e:	0f b7 d2             	movzx  edx,dx
c000a771:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a775:	39 0d a4 64 02 c0    	cmp    DWORD PTR ds:0xc00264a4,ecx
c000a77b:	75 10                	jne    c000a78d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a77d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a780:	85 c0                	test   eax,eax
c000a782:	74 09                	je     c000a78d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a784:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a788:	5a                   	pop    edx
c000a789:	5b                   	pop    ebx
c000a78a:	5e                   	pop    esi
c000a78b:	ff e0                	jmp    eax
c000a78d:	58                   	pop    eax
c000a78e:	5b                   	pop    ebx
c000a78f:	5e                   	pop    esi
c000a790:	c3                   	ret    
c000a791:	90                   	nop

c000a792 <VgaText::getCursorX()>:
c000a792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a796:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a799:	c3                   	ret    

c000a79a <VgaText::getCursorY()>:
c000a79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a79e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a7a1:	c3                   	ret    

c000a7a2 <VgaText::setCursor(int, int)>:
c000a7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7aa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a7ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a7b4:	e9 b5 fd ff ff       	jmp    c000a56e <VgaText::updateCursor()>

c000a7b9 <setActiveTerminal(VgaText*)>:
c000a7b9:	53                   	push   ebx
c000a7ba:	83 ec 08             	sub    esp,0x8
c000a7bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a7c1:	85 db                	test   ebx,ebx
c000a7c3:	75 11                	jne    c000a7d6 <setActiveTerminal(VgaText*)+0x1d>
c000a7c5:	c7 44 24 10 fc 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229fc
c000a7cd:	83 c4 08             	add    esp,0x8
c000a7d0:	5b                   	pop    ebx
c000a7d1:	e9 4f 9b 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c000a7d6:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000a7db:	85 c0                	test   eax,eax
c000a7dd:	74 0c                	je     c000a7eb <setActiveTerminal(VgaText*)+0x32>
c000a7df:	83 ec 0c             	sub    esp,0xc
c000a7e2:	50                   	push   eax
c000a7e3:	e8 86 fd ff ff       	call   c000a56e <VgaText::updateCursor()>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 1d a4 64 02 c0    	mov    DWORD PTR ds:0xc00264a4,ebx
c000a7f1:	51                   	push   ecx
c000a7f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a7f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a7f8:	53                   	push   ebx
c000a7f9:	e8 a4 ff ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000a7fe:	83 c4 10             	add    esp,0x10
c000a801:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a805:	75 07                	jne    c000a80e <setActiveTerminal(VgaText*)+0x55>
c000a807:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a80e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a812:	83 c4 08             	add    esp,0x8
c000a815:	5b                   	pop    ebx
c000a816:	e9 05 fd ff ff       	jmp    c000a520 <VgaText::load()>

c000a81b <doTerminalCycle()>:
c000a81b:	83 ec 18             	sub    esp,0x18
c000a81e:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000a823:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a826:	50                   	push   eax
c000a827:	a3 a0 64 02 c0       	mov    ds:0xc00264a0,eax
c000a82c:	e8 88 ff ff ff       	call   c000a7b9 <setActiveTerminal(VgaText*)>
c000a831:	83 c4 1c             	add    esp,0x1c
c000a834:	c3                   	ret    
c000a835:	90                   	nop

c000a836 <VgaText::setCursorX(int)>:
c000a836:	83 ec 10             	sub    esp,0x10
c000a839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a83d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	50                   	push   eax
c000a845:	e8 58 ff ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000a84a:	83 c4 1c             	add    esp,0x1c
c000a84d:	c3                   	ret    

c000a84e <VgaText::setCursorY(int)>:
c000a84e:	83 ec 10             	sub    esp,0x10
c000a851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a859:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a85c:	50                   	push   eax
c000a85d:	e8 40 ff ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000a862:	83 c4 1c             	add    esp,0x1c
c000a865:	c3                   	ret    

c000a866 <VgaText::incrementCursor(bool)>:
c000a866:	56                   	push   esi
c000a867:	53                   	push   ebx
c000a868:	51                   	push   ecx
c000a869:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a86d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a871:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a874:	40                   	inc    eax
c000a875:	83 f8 50             	cmp    eax,0x50
c000a878:	74 05                	je     c000a87f <VgaText::incrementCursor(bool)+0x19>
c000a87a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a87d:	eb 24                	jmp    c000a8a3 <VgaText::incrementCursor(bool)+0x3d>
c000a87f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a882:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a889:	8d 50 01             	lea    edx,[eax+0x1]
c000a88c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a88f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a892:	75 0f                	jne    c000a8a3 <VgaText::incrementCursor(bool)+0x3d>
c000a894:	83 ec 0c             	sub    esp,0xc
c000a897:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a89a:	53                   	push   ebx
c000a89b:	e8 f0 fd ff ff       	call   c000a690 <VgaText::scrollScreen()>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	89 f0                	mov    eax,esi
c000a8a5:	84 c0                	test   al,al
c000a8a7:	74 0c                	je     c000a8b5 <VgaText::incrementCursor(bool)+0x4f>
c000a8a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8ad:	5a                   	pop    edx
c000a8ae:	5b                   	pop    ebx
c000a8af:	5e                   	pop    esi
c000a8b0:	e9 b9 fc ff ff       	jmp    c000a56e <VgaText::updateCursor()>
c000a8b5:	58                   	pop    eax
c000a8b6:	5b                   	pop    ebx
c000a8b7:	5e                   	pop    esi
c000a8b8:	c3                   	ret    
c000a8b9:	90                   	nop

c000a8ba <VgaText::decrementCursor(bool)>:
c000a8ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8c2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	74 04                	je     c000a8cd <VgaText::decrementCursor(bool)+0x13>
c000a8c9:	48                   	dec    eax
c000a8ca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a8cd:	84 c9                	test   cl,cl
c000a8cf:	74 09                	je     c000a8da <VgaText::decrementCursor(bool)+0x20>
c000a8d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d5:	e9 94 fc ff ff       	jmp    c000a56e <VgaText::updateCursor()>
c000a8da:	c3                   	ret    
c000a8db:	90                   	nop

c000a8dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8dc:	53                   	push   ebx
c000a8dd:	83 ec 08             	sub    esp,0x8
c000a8e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a8f0:	3c 07                	cmp    al,0x7
c000a8f2:	75 2a                	jne    c000a91e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a8f4:	a1 58 65 02 c0       	mov    eax,ds:0xc0026558
c000a8f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a901:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a909:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a911:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a915:	83 c4 08             	add    esp,0x8
c000a918:	5b                   	pop    ebx
c000a919:	e9 60 2f 00 00       	jmp    c000d87e <Buzzer::beep(int, int, bool)>
c000a91e:	3c 0d                	cmp    al,0xd
c000a920:	75 09                	jne    c000a92b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a922:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a929:	eb 2c                	jmp    c000a957 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a92b:	3c 0a                	cmp    al,0xa
c000a92d:	75 31                	jne    c000a960 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a92f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a932:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a939:	8d 50 01             	lea    edx,[eax+0x1]
c000a93c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a93f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a942:	75 0f                	jne    c000a953 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a944:	83 ec 0c             	sub    esp,0xc
c000a947:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a94a:	53                   	push   ebx
c000a94b:	e8 40 fd ff ff       	call   c000a690 <VgaText::scrollScreen()>
c000a950:	83 c4 10             	add    esp,0x10
c000a953:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a957:	83 c4 08             	add    esp,0x8
c000a95a:	5b                   	pop    ebx
c000a95b:	e9 0e fc ff ff       	jmp    c000a56e <VgaText::updateCursor()>
c000a960:	3c 08                	cmp    al,0x8
c000a962:	75 25                	jne    c000a989 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a964:	50                   	push   eax
c000a965:	50                   	push   eax
c000a966:	6a 01                	push   0x1
c000a968:	53                   	push   ebx
c000a969:	e8 4c ff ff ff       	call   c000a8ba <VgaText::decrementCursor(bool)>
c000a96e:	5a                   	pop    edx
c000a96f:	59                   	pop    ecx
c000a970:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a973:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a976:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a979:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a97c:	6a 20                	push   0x20
c000a97e:	53                   	push   ebx
c000a97f:	e8 b2 fd ff ff       	call   c000a736 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a984:	83 c4 28             	add    esp,0x28
c000a987:	5b                   	pop    ebx
c000a988:	c3                   	ret    
c000a989:	83 ec 08             	sub    esp,0x8
c000a98c:	0f be c0             	movsx  eax,al
c000a98f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a992:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a995:	51                   	push   ecx
c000a996:	52                   	push   edx
c000a997:	50                   	push   eax
c000a998:	53                   	push   ebx
c000a999:	e8 98 fd ff ff       	call   c000a736 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a99e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a9a2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a9aa:	83 c4 28             	add    esp,0x28
c000a9ad:	5b                   	pop    ebx
c000a9ae:	e9 b3 fe ff ff       	jmp    c000a866 <VgaText::incrementCursor(bool)>
c000a9b3:	90                   	nop

c000a9b4 <VgaText::doUpdate()>:
c000a9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b8:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a9bb:	85 c0                	test   eax,eax
c000a9bd:	74 02                	je     c000a9c1 <VgaText::doUpdate()+0xd>
c000a9bf:	ff e0                	jmp    eax
c000a9c1:	c3                   	ret    

c000a9c2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a9c2:	55                   	push   ebp
c000a9c3:	31 ed                	xor    ebp,ebp
c000a9c5:	57                   	push   edi
c000a9c6:	56                   	push   esi
c000a9c7:	53                   	push   ebx
c000a9c8:	83 ec 1c             	sub    esp,0x1c
c000a9cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a9cf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9d4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a9db:	50                   	push   eax
c000a9dc:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9e1:	50                   	push   eax
c000a9e2:	e8 97 fc ff ff       	call   c000a67e <VgaText::combineColours(unsigned char, unsigned char)>
c000a9e7:	59                   	pop    ecx
c000a9e8:	0f b6 c0             	movzx  eax,al
c000a9eb:	5e                   	pop    esi
c000a9ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a9f5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9fc:	0f b7 f6             	movzx  esi,si
c000a9ff:	01 f6                	add    esi,esi
c000aa01:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa04:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa07:	84 c0                	test   al,al
c000aa09:	0f 84 fd 00 00 00    	je     c000ab0c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa0f:	3c 0d                	cmp    al,0xd
c000aa11:	75 0c                	jne    c000aa1f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa13:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa1a:	e9 e7 00 00 00       	jmp    c000ab06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa1f:	3c 0a                	cmp    al,0xa
c000aa21:	75 47                	jne    c000aa6a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa23:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa26:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa2d:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa30:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa33:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa36:	75 0f                	jne    c000aa47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa38:	83 ec 0c             	sub    esp,0xc
c000aa3b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa3e:	53                   	push   ebx
c000aa3f:	e8 4c fc ff ff       	call   c000a690 <VgaText::scrollScreen()>
c000aa44:	83 c4 10             	add    esp,0x10
c000aa47:	83 ec 0c             	sub    esp,0xc
c000aa4a:	31 ed                	xor    ebp,ebp
c000aa4c:	53                   	push   ebx
c000aa4d:	e8 1c fb ff ff       	call   c000a56e <VgaText::updateCursor()>
c000aa52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa5d:	0f b7 f6             	movzx  esi,si
c000aa60:	01 f6                	add    esi,esi
c000aa62:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa65:	e9 9c 00 00 00       	jmp    c000ab06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa6a:	3c 08                	cmp    al,0x8
c000aa6c:	75 35                	jne    c000aaa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa6e:	56                   	push   esi
c000aa6f:	56                   	push   esi
c000aa70:	6a 01                	push   0x1
c000aa72:	53                   	push   ebx
c000aa73:	e8 42 fe ff ff       	call   c000a8ba <VgaText::decrementCursor(bool)>
c000aa78:	58                   	pop    eax
c000aa79:	5a                   	pop    edx
c000aa7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa80:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa86:	6a 20                	push   0x20
c000aa88:	53                   	push   ebx
c000aa89:	e8 a8 fc ff ff       	call   c000a736 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa8e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa93:	83 c4 20             	add    esp,0x20
c000aa96:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa99:	0f b7 f6             	movzx  esi,si
c000aa9c:	01 f6                	add    esi,esi
c000aa9e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aaa1:	eb 63                	jmp    c000ab06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aaa3:	51                   	push   ecx
c000aaa4:	51                   	push   ecx
c000aaa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa9:	50                   	push   eax
c000aaaa:	e8 75 fc ff ff       	call   c000a724 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	66 89 06             	mov    WORD PTR [esi],ax
c000aab5:	39 1d a4 64 02 c0    	cmp    DWORD PTR ds:0xc00264a4,ebx
c000aabb:	75 21                	jne    c000aade <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aabd:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aac0:	85 c0                	test   eax,eax
c000aac2:	74 1a                	je     c000aade <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aac4:	52                   	push   edx
c000aac5:	52                   	push   edx
c000aac6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aac9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aacc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aad0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aad4:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aad7:	51                   	push   ecx
c000aad8:	53                   	push   ebx
c000aad9:	ff d0                	call   eax
c000aadb:	83 c4 20             	add    esp,0x20
c000aade:	83 c6 02             	add    esi,0x2
c000aae1:	50                   	push   eax
c000aae2:	50                   	push   eax
c000aae3:	6a 00                	push   0x0
c000aae5:	53                   	push   ebx
c000aae6:	e8 7b fd ff ff       	call   c000a866 <VgaText::incrementCursor(bool)>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aaf2:	75 0d                	jne    c000ab01 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000aaf4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaf9:	0f b7 f6             	movzx  esi,si
c000aafc:	01 f6                	add    esi,esi
c000aafe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab01:	bd 01 00 00 00       	mov    ebp,0x1
c000ab06:	47                   	inc    edi
c000ab07:	e9 f8 fe ff ff       	jmp    c000aa04 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab0c:	83 ec 0c             	sub    esp,0xc
c000ab0f:	53                   	push   ebx
c000ab10:	e8 59 fa ff ff       	call   c000a56e <VgaText::updateCursor()>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	89 e8                	mov    eax,ebp
c000ab1a:	84 c0                	test   al,al
c000ab1c:	74 0c                	je     c000ab2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab1e:	83 ec 0c             	sub    esp,0xc
c000ab21:	53                   	push   ebx
c000ab22:	e8 8d fe ff ff       	call   c000a9b4 <VgaText::doUpdate()>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab31:	83 c4 1c             	add    esp,0x1c
c000ab34:	5b                   	pop    ebx
c000ab35:	5e                   	pop    esi
c000ab36:	5f                   	pop    edi
c000ab37:	5d                   	pop    ebp
c000ab38:	c3                   	ret    
c000ab39:	90                   	nop

c000ab3a <VgaText::clearScreen()>:
c000ab3a:	57                   	push   edi
c000ab3b:	56                   	push   esi
c000ab3c:	31 f6                	xor    esi,esi
c000ab3e:	53                   	push   ebx
c000ab3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab43:	52                   	push   edx
c000ab44:	6a 00                	push   0x0
c000ab46:	6a 00                	push   0x0
c000ab48:	53                   	push   ebx
c000ab49:	e8 54 fc ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000ab4e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab55:	83 c4 10             	add    esp,0x10
c000ab58:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab5b:	7e 20                	jle    c000ab7d <VgaText::clearScreen()+0x43>
c000ab5d:	31 ff                	xor    edi,edi
c000ab5f:	50                   	push   eax
c000ab60:	50                   	push   eax
c000ab61:	56                   	push   esi
c000ab62:	57                   	push   edi
c000ab63:	47                   	inc    edi
c000ab64:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab6a:	6a 20                	push   0x20
c000ab6c:	53                   	push   ebx
c000ab6d:	e8 c4 fb ff ff       	call   c000a736 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab72:	83 c4 20             	add    esp,0x20
c000ab75:	83 ff 50             	cmp    edi,0x50
c000ab78:	75 e5                	jne    c000ab5f <VgaText::clearScreen()+0x25>
c000ab7a:	46                   	inc    esi
c000ab7b:	eb db                	jmp    c000ab58 <VgaText::clearScreen()+0x1e>
c000ab7d:	83 ec 0c             	sub    esp,0xc
c000ab80:	53                   	push   ebx
c000ab81:	e8 2e fe ff ff       	call   c000a9b4 <VgaText::doUpdate()>
c000ab86:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	5b                   	pop    ebx
c000ab91:	5e                   	pop    esi
c000ab92:	5f                   	pop    edi
c000ab93:	c3                   	ret    

c000ab94 <VgaText::putchar(char)>:
c000ab94:	56                   	push   esi
c000ab95:	53                   	push   ebx
c000ab96:	83 ec 14             	sub    esp,0x14
c000ab99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aba1:	3c 5b                	cmp    al,0x5b
c000aba3:	75 18                	jne    c000abbd <VgaText::putchar(char)+0x29>
c000aba5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aba9:	74 1f                	je     c000abca <VgaText::putchar(char)+0x36>
c000abab:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000abb1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000abb8:	e9 bd 00 00 00       	jmp    c000ac7a <VgaText::putchar(char)+0xe6>
c000abbd:	3c 1b                	cmp    al,0x1b
c000abbf:	75 09                	jne    c000abca <VgaText::putchar(char)+0x36>
c000abc1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000abc5:	e9 b0 00 00 00       	jmp    c000ac7a <VgaText::putchar(char)+0xe6>
c000abca:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000abcd:	84 c9                	test   cl,cl
c000abcf:	0f 84 92 00 00 00    	je     c000ac67 <VgaText::putchar(char)+0xd3>
c000abd5:	8d 50 c0             	lea    edx,[eax-0x40]
c000abd8:	80 fa 3e             	cmp    dl,0x3e
c000abdb:	77 76                	ja     c000ac53 <VgaText::putchar(char)+0xbf>
c000abdd:	3c 6d                	cmp    al,0x6d
c000abdf:	75 47                	jne    c000ac28 <VgaText::putchar(char)+0x94>
c000abe1:	31 f6                	xor    esi,esi
c000abe3:	31 d2                	xor    edx,edx
c000abe5:	31 c0                	xor    eax,eax
c000abe7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000abea:	7e 2d                	jle    c000ac19 <VgaText::putchar(char)+0x85>
c000abec:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000abf1:	80 fa 3b             	cmp    dl,0x3b
c000abf4:	75 17                	jne    c000ac0d <VgaText::putchar(char)+0x79>
c000abf6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000abfa:	50                   	push   eax
c000abfb:	53                   	push   ebx
c000abfc:	e8 83 f9 ff ff       	call   c000a584 <VgaText::doANSI_SGR(int)>
c000ac01:	59                   	pop    ecx
c000ac02:	31 d2                	xor    edx,edx
c000ac04:	58                   	pop    eax
c000ac05:	31 c0                	xor    eax,eax
c000ac07:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac0b:	eb 09                	jmp    c000ac16 <VgaText::putchar(char)+0x82>
c000ac0d:	6b c0 0a             	imul   eax,eax,0xa
c000ac10:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac14:	88 ca                	mov    dl,cl
c000ac16:	46                   	inc    esi
c000ac17:	eb ce                	jmp    c000abe7 <VgaText::putchar(char)+0x53>
c000ac19:	84 d2                	test   dl,dl
c000ac1b:	74 2e                	je     c000ac4b <VgaText::putchar(char)+0xb7>
c000ac1d:	50                   	push   eax
c000ac1e:	53                   	push   ebx
c000ac1f:	e8 60 f9 ff ff       	call   c000a584 <VgaText::doANSI_SGR(int)>
c000ac24:	58                   	pop    eax
c000ac25:	5a                   	pop    edx
c000ac26:	eb 23                	jmp    c000ac4b <VgaText::putchar(char)+0xb7>
c000ac28:	3c 4a                	cmp    al,0x4a
c000ac2a:	75 1f                	jne    c000ac4b <VgaText::putchar(char)+0xb7>
c000ac2c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac30:	75 19                	jne    c000ac4b <VgaText::putchar(char)+0xb7>
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	53                   	push   ebx
c000ac36:	e8 ff fe ff ff       	call   c000ab3a <VgaText::clearScreen()>
c000ac3b:	83 c4 0c             	add    esp,0xc
c000ac3e:	6a 00                	push   0x0
c000ac40:	6a 00                	push   0x0
c000ac42:	53                   	push   ebx
c000ac43:	e8 5a fb ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000ac48:	83 c4 10             	add    esp,0x10
c000ac4b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac51:	eb 27                	jmp    c000ac7a <VgaText::putchar(char)+0xe6>
c000ac53:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac56:	83 fa 0e             	cmp    edx,0xe
c000ac59:	7f 1f                	jg     c000ac7a <VgaText::putchar(char)+0xe6>
c000ac5b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac5e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac61:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac65:	eb 13                	jmp    c000ac7a <VgaText::putchar(char)+0xe6>
c000ac67:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac6a:	0f be c0             	movsx  eax,al
c000ac6d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac70:	50                   	push   eax
c000ac71:	53                   	push   ebx
c000ac72:	e8 65 fc ff ff       	call   c000a8dc <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	83 c4 14             	add    esp,0x14
c000ac7d:	5b                   	pop    ebx
c000ac7e:	5e                   	pop    esi
c000ac7f:	c3                   	ret    

c000ac80 <VgaText::putx(unsigned int)>:
c000ac80:	57                   	push   edi
c000ac81:	b9 11 00 00 00       	mov    ecx,0x11
c000ac86:	56                   	push   esi
c000ac87:	be 0a 2a 02 c0       	mov    esi,0xc0022a0a
c000ac8c:	53                   	push   ebx
c000ac8d:	83 ec 20             	sub    esp,0x20
c000ac90:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ac94:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ac98:	fc                   	cld    
c000ac99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac9b:	be 08 00 00 00       	mov    esi,0x8
c000aca0:	50                   	push   eax
c000aca1:	50                   	push   eax
c000aca2:	89 d8                	mov    eax,ebx
c000aca4:	c1 e3 04             	shl    ebx,0x4
c000aca7:	c1 e8 1c             	shr    eax,0x1c
c000acaa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000acaf:	50                   	push   eax
c000acb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acb4:	e8 db fe ff ff       	call   c000ab94 <VgaText::putchar(char)>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	4e                   	dec    esi
c000acbd:	75 e1                	jne    c000aca0 <VgaText::putx(unsigned int)+0x20>
c000acbf:	83 c4 20             	add    esp,0x20
c000acc2:	5b                   	pop    ebx
c000acc3:	5e                   	pop    esi
c000acc4:	5f                   	pop    edi
c000acc5:	c3                   	ret    

c000acc6 <VgaText::puts(char const*)>:
c000acc6:	53                   	push   ebx
c000acc7:	83 ec 08             	sub    esp,0x8
c000acca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000acd1:	84 c0                	test   al,al
c000acd3:	74 12                	je     c000ace7 <VgaText::puts(char const*)+0x21>
c000acd5:	43                   	inc    ebx
c000acd6:	51                   	push   ecx
c000acd7:	51                   	push   ecx
c000acd8:	50                   	push   eax
c000acd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acdd:	e8 b2 fe ff ff       	call   c000ab94 <VgaText::putchar(char)>
c000ace2:	83 c4 10             	add    esp,0x10
c000ace5:	eb e7                	jmp    c000acce <VgaText::puts(char const*)+0x8>
c000ace7:	83 c4 08             	add    esp,0x8
c000acea:	5b                   	pop    ebx
c000aceb:	c3                   	ret    

c000acec <VgaText::VgaText(char const*)>:
c000acec:	57                   	push   edi
c000aced:	56                   	push   esi
c000acee:	53                   	push   ebx
c000acef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf3:	83 ec 08             	sub    esp,0x8
c000acf6:	6a 00                	push   0x0
c000acf8:	50                   	push   eax
c000acf9:	e8 48 05 00 00       	call   c000b246 <UnixFile::UnixFile(int)>
c000acfe:	83 c4 10             	add    esp,0x10
c000ad01:	ba 70 2a 02 c0       	mov    edx,0xc0022a70
c000ad06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0a:	89 10                	mov    DWORD PTR [eax],edx
c000ad0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad10:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad26:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad36:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad41:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad57:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad62:	8d 50 60             	lea    edx,[eax+0x60]
c000ad65:	bb 80 64 02 c0       	mov    ebx,0xc0026480
c000ad6a:	b8 08 00 00 00       	mov    eax,0x8
c000ad6f:	fc                   	cld    
c000ad70:	89 d7                	mov    edi,edx
c000ad72:	89 de                	mov    esi,ebx
c000ad74:	89 c1                	mov    ecx,eax
c000ad76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7c:	05 82 00 00 00       	add    eax,0x82
c000ad81:	83 ec 08             	sub    esp,0x8
c000ad84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad88:	50                   	push   eax
c000ad89:	e8 b2 59 ff ff       	call   c0000740 <strcpy>
c000ad8e:	83 c4 10             	add    esp,0x10
c000ad91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad95:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ad9c:	83 ec 0c             	sub    esp,0xc
c000ad9f:	6a 01                	push   0x1
c000ada1:	e8 e3 08 00 00       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c000ada6:	83 c4 10             	add    esp,0x10
c000ada9:	89 c2                	mov    edx,eax
c000adab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adaf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adb2:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c000adb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adbc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adbf:	89 c6                	mov    esi,eax
c000adc1:	e8 05 f0 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000adc6:	68 05 0c 00 00       	push   0xc05
c000adcb:	56                   	push   esi
c000adcc:	50                   	push   eax
c000adcd:	53                   	push   ebx
c000adce:	e8 5d 0f 00 00       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000add3:	83 c4 10             	add    esp,0x10
c000add6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000addd:	83 ec 04             	sub    esp,0x4
c000ade0:	68 00 0f 00 00       	push   0xf00
c000ade5:	6a 00                	push   0x0
c000ade7:	50                   	push   eax
c000ade8:	e8 97 58 ff ff       	call   c0000684 <memset>
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	83 ec 04             	sub    esp,0x4
c000adf3:	6a 00                	push   0x0
c000adf5:	6a 07                	push   0x7
c000adf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adfb:	e8 18 f8 ff ff       	call   c000a618 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	83 ec 04             	sub    esp,0x4
c000ae06:	6a 00                	push   0x0
c000ae08:	6a 00                	push   0x0
c000ae0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae0e:	e8 8f f9 ff ff       	call   c000a7a2 <VgaText::setCursor(int, int)>
c000ae13:	83 c4 10             	add    esp,0x10
c000ae16:	83 ec 0c             	sub    esp,0xc
c000ae19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae1d:	e8 18 fd ff ff       	call   c000ab3a <VgaText::clearScreen()>
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae29:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae31:	05 02 01 00 00       	add    eax,0x102
c000ae36:	83 ec 04             	sub    esp,0x4
c000ae39:	68 96 00 00 00       	push   0x96
c000ae3e:	6a 00                	push   0x0
c000ae40:	50                   	push   eax
c000ae41:	e8 3e 58 ff ff       	call   c0000684 <memset>
c000ae46:	83 c4 10             	add    esp,0x10
c000ae49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4d:	05 98 01 00 00       	add    eax,0x198
c000ae52:	83 ec 04             	sub    esp,0x4
c000ae55:	68 2c 01 00 00       	push   0x12c
c000ae5a:	6a 00                	push   0x0
c000ae5c:	50                   	push   eax
c000ae5d:	e8 22 58 ff ff       	call   c0000684 <memset>
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	90                   	nop
c000ae66:	5b                   	pop    ebx
c000ae67:	5e                   	pop    esi
c000ae68:	5f                   	pop    edi
c000ae69:	c3                   	ret    

c000ae6a <VgaText::receiveKey(unsigned char)>:
c000ae6a:	55                   	push   ebp
c000ae6b:	57                   	push   edi
c000ae6c:	56                   	push   esi
c000ae6d:	53                   	push   ebx
c000ae6e:	83 ec 1c             	sub    esp,0x1c
c000ae71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae79:	84 db                	test   bl,bl
c000ae7b:	0f 84 c9 00 00 00    	je     c000af4a <VgaText::receiveKey(unsigned char)+0xe0>
c000ae81:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae87:	80 fb 08             	cmp    bl,0x8
c000ae8a:	75 2c                	jne    c000aeb8 <VgaText::receiveKey(unsigned char)+0x4e>
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	57                   	push   edi
c000ae90:	e8 0b 58 ff ff       	call   c00006a0 <strlen>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	85 c0                	test   eax,eax
c000ae9a:	74 41                	je     c000aedd <VgaText::receiveKey(unsigned char)+0x73>
c000ae9c:	50                   	push   eax
c000ae9d:	50                   	push   eax
c000ae9e:	6a 08                	push   0x8
c000aea0:	56                   	push   esi
c000aea1:	e8 ee fc ff ff       	call   c000ab94 <VgaText::putchar(char)>
c000aea6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aea9:	e8 f2 57 ff ff       	call   c00006a0 <strlen>
c000aeae:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000aeb6:	eb 22                	jmp    c000aeda <VgaText::receiveKey(unsigned char)+0x70>
c000aeb8:	0f be c3             	movsx  eax,bl
c000aebb:	52                   	push   edx
c000aebc:	52                   	push   edx
c000aebd:	50                   	push   eax
c000aebe:	56                   	push   esi
c000aebf:	e8 d0 fc ff ff       	call   c000ab94 <VgaText::putchar(char)>
c000aec4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000aec8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aecd:	59                   	pop    ecx
c000aece:	5d                   	pop    ebp
c000aecf:	8d 44 24 16          	lea    eax,[esp+0x16]
c000aed3:	50                   	push   eax
c000aed4:	57                   	push   edi
c000aed5:	e8 a6 59 ff ff       	call   c0000880 <strcat>
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aee4:	75 05                	jne    c000aeeb <VgaText::receiveKey(unsigned char)+0x81>
c000aee6:	80 fb 0a             	cmp    bl,0xa
c000aee9:	75 53                	jne    c000af3e <VgaText::receiveKey(unsigned char)+0xd4>
c000aeeb:	83 ec 0c             	sub    esp,0xc
c000aeee:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000aef4:	53                   	push   ebx
c000aef5:	e8 a6 57 ff ff       	call   c00006a0 <strlen>
c000aefa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aefd:	89 c5                	mov    ebp,eax
c000aeff:	e8 9c 57 ff ff       	call   c00006a0 <strlen>
c000af04:	83 c4 10             	add    esp,0x10
c000af07:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af0b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af10:	76 10                	jbe    c000af22 <VgaText::receiveKey(unsigned char)+0xb8>
c000af12:	83 ec 0c             	sub    esp,0xc
c000af15:	68 1b 2a 02 c0       	push   0xc0022a1b
c000af1a:	e8 06 94 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000af1f:	83 c4 10             	add    esp,0x10
c000af22:	50                   	push   eax
c000af23:	50                   	push   eax
c000af24:	57                   	push   edi
c000af25:	53                   	push   ebx
c000af26:	e8 55 59 ff ff       	call   c0000880 <strcat>
c000af2b:	83 c4 0c             	add    esp,0xc
c000af2e:	68 96 00 00 00       	push   0x96
c000af33:	6a 00                	push   0x0
c000af35:	57                   	push   edi
c000af36:	e8 49 57 ff ff       	call   c0000684 <memset>
c000af3b:	83 c4 10             	add    esp,0x10
c000af3e:	83 ec 0c             	sub    esp,0xc
c000af41:	56                   	push   esi
c000af42:	e8 6d fa ff ff       	call   c000a9b4 <VgaText::doUpdate()>
c000af47:	83 c4 10             	add    esp,0x10
c000af4a:	83 c4 1c             	add    esp,0x1c
c000af4d:	5b                   	pop    ebx
c000af4e:	5e                   	pop    esi
c000af4f:	5f                   	pop    edi
c000af50:	5d                   	pop    ebp
c000af51:	c3                   	ret    

c000af52 <VgaText::write(unsigned long long, void*, int*)>:
c000af52:	55                   	push   ebp
c000af53:	57                   	push   edi
c000af54:	56                   	push   esi
c000af55:	53                   	push   ebx
c000af56:	83 ec 0c             	sub    esp,0xc
c000af59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af5d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af65:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af6c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af6f:	39 eb                	cmp    ebx,ebp
c000af71:	74 13                	je     c000af86 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af73:	43                   	inc    ebx
c000af74:	50                   	push   eax
c000af75:	50                   	push   eax
c000af76:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af7a:	50                   	push   eax
c000af7b:	56                   	push   esi
c000af7c:	e8 13 fc ff ff       	call   c000ab94 <VgaText::putchar(char)>
c000af81:	83 c4 10             	add    esp,0x10
c000af84:	eb e9                	jmp    c000af6f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af86:	83 ec 0c             	sub    esp,0xc
c000af89:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000af90:	56                   	push   esi
c000af91:	e8 1e fa ff ff       	call   c000a9b4 <VgaText::doUpdate()>
c000af96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af9a:	89 38                	mov    DWORD PTR [eax],edi
c000af9c:	83 c4 1c             	add    esp,0x1c
c000af9f:	31 c0                	xor    eax,eax
c000afa1:	5b                   	pop    ebx
c000afa2:	5e                   	pop    esi
c000afa3:	5f                   	pop    edi
c000afa4:	5d                   	pop    ebp
c000afa5:	c3                   	ret    

c000afa6 <newTerminal(char*)>:
c000afa6:	83 ec 28             	sub    esp,0x28
c000afa9:	68 c4 02 00 00       	push   0x2c4
c000afae:	e8 10 ea ff ff       	call   c00099c3 <malloc>
c000afb3:	5a                   	pop    edx
c000afb4:	59                   	pop    ecx
c000afb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000afb9:	50                   	push   eax
c000afba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afbe:	e8 29 fd ff ff       	call   c000acec <VgaText::VgaText(char const*)>
c000afc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afc7:	83 c4 2c             	add    esp,0x2c
c000afca:	c3                   	ret    
c000afcb:	90                   	nop

c000afcc <TSS::TSS()>:
c000afcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afd7:	90                   	nop
c000afd8:	c3                   	ret    
c000afd9:	90                   	nop
c000afda:	66 90                	xchg   ax,ax

c000afdc <TSS::setESP(unsigned long)>:
c000afdc:	55                   	push   ebp
c000afdd:	89 e5                	mov    ebp,esp
c000afdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afe5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000afe8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afeb:	90                   	nop
c000afec:	5d                   	pop    ebp
c000afed:	c3                   	ret    
c000afee:	66 90                	xchg   ax,ax

c000aff0 <TSS::flush()>:
c000aff0:	55                   	push   ebp
c000aff1:	89 e5                	mov    ebp,esp
c000aff3:	83 ec 10             	sub    esp,0x10
c000aff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aff9:	8b 00                	mov    eax,DWORD PTR [eax]
c000affb:	83 c8 03             	or     eax,0x3
c000affe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b002:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b006:	66 89 d0             	mov    ax,dx
c000b009:	0f 00 d8             	ltr    ax
c000b00c:	90                   	nop
c000b00d:	c9                   	leave  
c000b00e:	c3                   	ret    
c000b00f:	90                   	nop

c000b010 <TSS::setup(unsigned long, unsigned long)>:
c000b010:	55                   	push   ebp
c000b011:	89 e5                	mov    ebp,esp
c000b013:	83 ec 18             	sub    esp,0x18
c000b016:	83 ec 0c             	sub    esp,0xc
c000b019:	6a 68                	push   0x68
c000b01b:	e8 a3 e9 ff ff       	call   c00099c3 <malloc>
c000b020:	83 c4 10             	add    esp,0x10
c000b023:	89 c2                	mov    edx,eax
c000b025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b028:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b02e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b031:	83 ec 04             	sub    esp,0x4
c000b034:	6a 68                	push   0x68
c000b036:	6a 00                	push   0x0
c000b038:	50                   	push   eax
c000b039:	e8 46 56 ff ff       	call   c0000684 <memset>
c000b03e:	83 c4 10             	add    esp,0x10
c000b041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b047:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b053:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b062:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b077:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b083:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b0b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b0d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d8:	0f 20 da             	mov    edx,cr3
c000b0db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ea:	83 ec 08             	sub    esp,0x8
c000b0ed:	50                   	push   eax
c000b0ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0f1:	50                   	push   eax
c000b0f2:	e8 29 e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	83 ec 08             	sub    esp,0x8
c000b0fd:	6a 68                	push   0x68
c000b0ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b102:	50                   	push   eax
c000b103:	e8 34 e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b10f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b112:	83 e0 0f             	and    eax,0xf
c000b115:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b118:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b11b:	83 c8 40             	or     eax,0x40
c000b11e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b121:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000b126:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b12c:	05 78 01 00 00       	add    eax,0x178
c000b131:	83 ec 04             	sub    esp,0x4
c000b134:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b137:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b13a:	50                   	push   eax
c000b13b:	e8 30 e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	89 c2                	mov    edx,eax
c000b145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b148:	89 10                	mov    DWORD PTR [eax],edx
c000b14a:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000b14f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b155:	05 78 01 00 00       	add    eax,0x178
c000b15a:	83 ec 0c             	sub    esp,0xc
c000b15d:	50                   	push   eax
c000b15e:	e8 37 e1 ff ff       	call   c000929a <GDT::flush()>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b169:	8b 00                	mov    eax,DWORD PTR [eax]
c000b16b:	c9                   	leave  
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b172:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b179:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b17e:	75 08                	jne    c000b188 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b180:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b186:	eb 38                	jmp    c000b1c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b188:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b18d:	75 17                	jne    c000b1a6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b18f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b194:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b197:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b19d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b19f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1a3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b1a6:	89 c1                	mov    ecx,eax
c000b1a8:	83 e1 fd             	and    ecx,0xfffffffd
c000b1ab:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b1b1:	74 cd                	je     c000b180 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1b3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1b8:	83 e0 ef             	and    eax,0xffffffef
c000b1bb:	83 f8 08             	cmp    eax,0x8
c000b1be:	76 c0                	jbe    c000b180 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1c0:	31 c0                	xor    eax,eax
c000b1c2:	c3                   	ret    
c000b1c3:	90                   	nop

c000b1c4 <ReservedFilename::isAtty()>:
c000b1c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b1cb:	31 c0                	xor    eax,eax
c000b1cd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b1d3:	74 09                	je     c000b1de <ReservedFilename::isAtty()+0x1a>
c000b1d5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b1db:	0f 94 c0             	sete   al
c000b1de:	c3                   	ret    
c000b1df:	90                   	nop

c000b1e0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1ef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1f4:	75 08                	jne    c000b1fe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b1f6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1fc:	eb 3d                	jmp    c000b23b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1fe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b203:	75 17                	jne    c000b21c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b20a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b20d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b213:	8b 10                	mov    edx,DWORD PTR [eax]
c000b215:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b219:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b21c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b221:	75 04                	jne    c000b227 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b223:	89 0a                	mov    DWORD PTR [edx],ecx
c000b225:	eb 14                	jmp    c000b23b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b227:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b22c:	74 c8                	je     c000b1f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b22e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b233:	83 e0 ef             	and    eax,0xffffffef
c000b236:	83 f8 08             	cmp    eax,0x8
c000b239:	76 bb                	jbe    c000b1f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b23b:	31 c0                	xor    eax,eax
c000b23d:	c3                   	ret    

c000b23e <UnixFile::getFileDescriptor()>:
c000b23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b245:	c3                   	ret    

c000b246 <UnixFile::UnixFile(int)>:
c000b246:	53                   	push   ebx
c000b247:	83 ec 28             	sub    esp,0x28
c000b24a:	ba 38 2b 02 c0       	mov    edx,0xc0022b38
c000b24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b253:	89 10                	mov    DWORD PTR [eax],edx
c000b255:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b25d:	0f 8f 8c 01 00 00    	jg     c000b3ef <UnixFile::UnixFile(int)+0x1a9>
c000b263:	a1 20 58 02 c0       	mov    eax,ds:0xc0025820
c000b268:	8d 50 01             	lea    edx,[eax+0x1]
c000b26b:	89 15 20 58 02 c0    	mov    DWORD PTR ds:0xc0025820,edx
c000b271:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b275:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b278:	83 ec 08             	sub    esp,0x8
c000b27b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b27f:	68 38 65 02 c0       	push   0xc0026538
c000b284:	e8 83 5f 01 00       	call   c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	a0 34 65 02 c0       	mov    al,ds:0xc0026534
c000b291:	83 f0 01             	xor    eax,0x1
c000b294:	84 c0                	test   al,al
c000b296:	0f 84 54 01 00 00    	je     c000b3f0 <UnixFile::UnixFile(int)+0x1aa>
c000b29c:	c6 05 34 65 02 c0 01 	mov    BYTE PTR ds:0xc0026534,0x1
c000b2a3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b2ab:	83 ec 0c             	sub    esp,0xc
c000b2ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b2:	e8 0c e7 ff ff       	call   c00099c3 <malloc>
c000b2b7:	83 c4 10             	add    esp,0x10
c000b2ba:	89 c3                	mov    ebx,eax
c000b2bc:	83 ec 08             	sub    esp,0x8
c000b2bf:	68 03 ff ff 0f       	push   0xfffff03
c000b2c4:	53                   	push   ebx
c000b2c5:	e8 2c 01 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b2ca:	83 c4 10             	add    esp,0x10
c000b2cd:	89 1d 2c 65 02 c0    	mov    DWORD PTR ds:0xc002652c,ebx
c000b2d3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b2db:	83 ec 0c             	sub    esp,0xc
c000b2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e2:	e8 dc e6 ff ff       	call   c00099c3 <malloc>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	89 c3                	mov    ebx,eax
c000b2ec:	83 ec 08             	sub    esp,0x8
c000b2ef:	68 01 ff ff 0f       	push   0xfffff01
c000b2f4:	53                   	push   ebx
c000b2f5:	e8 fc 00 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	89 1d 30 65 02 c0    	mov    DWORD PTR ds:0xc0026530,ebx
c000b303:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b30b:	83 ec 0c             	sub    esp,0xc
c000b30e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b312:	e8 ac e6 ff ff       	call   c00099c3 <malloc>
c000b317:	83 c4 10             	add    esp,0x10
c000b31a:	89 c3                	mov    ebx,eax
c000b31c:	83 ec 08             	sub    esp,0x8
c000b31f:	68 00 ff ff 0f       	push   0xfffff00
c000b324:	53                   	push   ebx
c000b325:	e8 cc 00 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	89 1d 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,ebx
c000b333:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b342:	e8 7c e6 ff ff       	call   c00099c3 <malloc>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	89 c3                	mov    ebx,eax
c000b34c:	83 ec 08             	sub    esp,0x8
c000b34f:	68 02 ff ff 0f       	push   0xfffff02
c000b354:	53                   	push   ebx
c000b355:	e8 9c 00 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b35a:	83 c4 10             	add    esp,0x10
c000b35d:	89 1d 28 65 02 c0    	mov    DWORD PTR ds:0xc0026528,ebx
c000b363:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b36b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b370:	7f 7e                	jg     c000b3f0 <UnixFile::UnixFile(int)+0x1aa>
c000b372:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b37a:	83 ec 0c             	sub    esp,0xc
c000b37d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b381:	e8 3d e6 ff ff       	call   c00099c3 <malloc>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 c3                	mov    ebx,eax
c000b38b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b38f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b394:	83 ec 08             	sub    esp,0x8
c000b397:	50                   	push   eax
c000b398:	53                   	push   ebx
c000b399:	e8 58 00 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3a5:	89 1c 85 00 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b00],ebx
c000b3ac:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b3b4:	83 ec 0c             	sub    esp,0xc
c000b3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3bb:	e8 03 e6 ff ff       	call   c00099c3 <malloc>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 c3                	mov    ebx,eax
c000b3c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3c9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b3ce:	83 ec 08             	sub    esp,0x8
c000b3d1:	50                   	push   eax
c000b3d2:	53                   	push   ebx
c000b3d3:	e8 1e 00 00 00       	call   c000b3f6 <ReservedFilename::ReservedFilename(int)>
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3df:	89 1c 85 c0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b40],ebx
c000b3e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b3ea:	e9 7c ff ff ff       	jmp    c000b36b <UnixFile::UnixFile(int)+0x125>
c000b3ef:	90                   	nop
c000b3f0:	83 c4 28             	add    esp,0x28
c000b3f3:	5b                   	pop    ebx
c000b3f4:	c3                   	ret    
c000b3f5:	90                   	nop

c000b3f6 <ReservedFilename::ReservedFilename(int)>:
c000b3f6:	83 ec 0c             	sub    esp,0xc
c000b3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fd:	83 ec 08             	sub    esp,0x8
c000b400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b404:	50                   	push   eax
c000b405:	e8 3c fe ff ff       	call   c000b246 <UnixFile::UnixFile(int)>
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	ba 54 2b 02 c0       	mov    edx,0xc0022b54
c000b412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b416:	89 10                	mov    DWORD PTR [eax],edx
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b420:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b423:	90                   	nop
c000b424:	83 c4 0c             	add    esp,0xc
c000b427:	c3                   	ret    

c000b428 <UnixFile::~UnixFile()>:
c000b428:	83 ec 1c             	sub    esp,0x1c
c000b42b:	ba 38 2b 02 c0       	mov    edx,0xc0022b38
c000b430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b434:	89 10                	mov    DWORD PTR [eax],edx
c000b436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b43a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b43d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b442:	7f 73                	jg     c000b4b7 <UnixFile::~UnixFile()+0x8f>
c000b444:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	68 38 65 02 c0       	push   0xc0026538
c000b454:	e8 87 5e 01 00       	call   c00212e0 <LinkedList<UnixFile>::getFirstElement()>
c000b459:	83 c4 10             	add    esp,0x10
c000b45c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	68 38 65 02 c0       	push   0xc0026538
c000b468:	e8 7b 5e 01 00       	call   c00212e8 <LinkedList<UnixFile>::removeFirst()>
c000b46d:	83 c4 10             	add    esp,0x10
c000b470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b474:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b478:	74 40                	je     c000b4ba <UnixFile::~UnixFile()+0x92>
c000b47a:	83 ec 08             	sub    esp,0x8
c000b47d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b481:	68 38 65 02 c0       	push   0xc0026538
c000b486:	e8 81 5d 01 00       	call   c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b492:	8d 50 01             	lea    edx,[eax+0x1]
c000b495:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b499:	3d 88 13 00 00       	cmp    eax,0x1388
c000b49e:	0f 94 c0             	sete   al
c000b4a1:	84 c0                	test   al,al
c000b4a3:	74 a7                	je     c000b44c <UnixFile::~UnixFile()+0x24>
c000b4a5:	83 ec 0c             	sub    esp,0xc
c000b4a8:	68 10 2b 02 c0       	push   0xc0022b10
c000b4ad:	e8 73 8e 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	eb 95                	jmp    c000b44c <UnixFile::~UnixFile()+0x24>
c000b4b7:	90                   	nop
c000b4b8:	eb 01                	jmp    c000b4bb <UnixFile::~UnixFile()+0x93>
c000b4ba:	90                   	nop
c000b4bb:	90                   	nop
c000b4bc:	83 c4 1c             	add    esp,0x1c
c000b4bf:	c3                   	ret    

c000b4c0 <UnixFile::~UnixFile()>:
c000b4c0:	83 ec 0c             	sub    esp,0xc
c000b4c3:	83 ec 0c             	sub    esp,0xc
c000b4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ca:	e8 59 ff ff ff       	call   c000b428 <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	83 ec 08             	sub    esp,0x8
c000b4d5:	6a 0c                	push   0xc
c000b4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4db:	e8 a3 14 00 00       	call   c000c983 <operator delete(void*, unsigned long)>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	83 c4 0c             	add    esp,0xc
c000b4e6:	c3                   	ret    
c000b4e7:	90                   	nop

c000b4e8 <ReservedFilename::~ReservedFilename()>:
c000b4e8:	83 ec 0c             	sub    esp,0xc
c000b4eb:	ba 54 2b 02 c0       	mov    edx,0xc0022b54
c000b4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f4:	89 10                	mov    DWORD PTR [eax],edx
c000b4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	50                   	push   eax
c000b4fe:	e8 25 ff ff ff       	call   c000b428 <UnixFile::~UnixFile()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	90                   	nop
c000b507:	83 c4 0c             	add    esp,0xc
c000b50a:	c3                   	ret    
c000b50b:	90                   	nop

c000b50c <ReservedFilename::~ReservedFilename()>:
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	83 ec 0c             	sub    esp,0xc
c000b512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b516:	e8 cd ff ff ff       	call   c000b4e8 <ReservedFilename::~ReservedFilename()>
c000b51b:	83 c4 10             	add    esp,0x10
c000b51e:	83 ec 08             	sub    esp,0x8
c000b521:	6a 0c                	push   0xc
c000b523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b527:	e8 57 14 00 00       	call   c000c983 <operator delete(void*, unsigned long)>
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	83 c4 0c             	add    esp,0xc
c000b532:	c3                   	ret    

c000b533 <getFromFileDescriptor(int)>:
c000b533:	53                   	push   ebx
c000b534:	83 ec 08             	sub    esp,0x8
c000b537:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b53b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b541:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b547:	7f 2c                	jg     c000b575 <getFromFileDescriptor(int)+0x42>
c000b549:	83 ec 0c             	sub    esp,0xc
c000b54c:	68 38 65 02 c0       	push   0xc0026538
c000b551:	e8 8a 5d 01 00       	call   c00212e0 <LinkedList<UnixFile>::getFirstElement()>
c000b556:	83 c4 10             	add    esp,0x10
c000b559:	85 c0                	test   eax,eax
c000b55b:	75 04                	jne    c000b561 <getFromFileDescriptor(int)+0x2e>
c000b55d:	31 c0                	xor    eax,eax
c000b55f:	eb 6e                	jmp    c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b561:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b564:	74 69                	je     c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b566:	52                   	push   edx
c000b567:	52                   	push   edx
c000b568:	50                   	push   eax
c000b569:	68 38 65 02 c0       	push   0xc0026538
c000b56e:	e8 17 5e 01 00       	call   c002138a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b573:	eb e1                	jmp    c000b556 <getFromFileDescriptor(int)+0x23>
c000b575:	a1 2c 65 02 c0       	mov    eax,ds:0xc002652c
c000b57a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b580:	74 4d                	je     c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b582:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c000b587:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b58d:	74 40                	je     c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b58f:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000b594:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b59a:	74 33                	je     c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b59c:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000b5a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b5a7:	74 26                	je     c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b5a9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b5af:	83 f8 08             	cmp    eax,0x8
c000b5b2:	77 09                	ja     c000b5bd <getFromFileDescriptor(int)+0x8a>
c000b5b4:	8b 04 85 00 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b00]
c000b5bb:	eb 12                	jmp    c000b5cf <getFromFileDescriptor(int)+0x9c>
c000b5bd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b5c3:	83 fb 08             	cmp    ebx,0x8
c000b5c6:	77 95                	ja     c000b55d <getFromFileDescriptor(int)+0x2a>
c000b5c8:	8b 04 9d c0 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b40]
c000b5cf:	83 c4 08             	add    esp,0x8
c000b5d2:	5b                   	pop    ebx
c000b5d3:	c3                   	ret    

c000b5d4 <__static_initialization_and_destruction_0(int, int)>:
c000b5d4:	83 ec 0c             	sub    esp,0xc
c000b5d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5dc:	75 34                	jne    c000b612 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5e6:	75 2a                	jne    c000b612 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	68 38 65 02 c0       	push   0xc0026538
c000b5f0:	e8 d5 5b 01 00       	call   c00211ca <LinkedList<UnixFile>::LinkedList()>
c000b5f5:	83 c4 10             	add    esp,0x10
c000b5f8:	83 ec 04             	sub    esp,0x4
c000b5fb:	68 48 56 02 c0       	push   0xc0025648
c000b600:	68 38 65 02 c0       	push   0xc0026538
c000b605:	68 c8 11 02 c0       	push   0xc00211c8
c000b60a:	e8 ee 12 00 00       	call   c000c8fd <__cxa_atexit>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	90                   	nop
c000b613:	83 c4 0c             	add    esp,0xc
c000b616:	c3                   	ret    

c000b617 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b617:	83 ec 0c             	sub    esp,0xc
c000b61a:	83 ec 08             	sub    esp,0x8
c000b61d:	68 ff ff 00 00       	push   0xffff
c000b622:	6a 01                	push   0x1
c000b624:	e8 ab ff ff ff       	call   c000b5d4 <__static_initialization_and_destruction_0(int, int)>
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	83 c4 0c             	add    esp,0xc
c000b62f:	c3                   	ret    

c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b630:	53                   	push   ebx
c000b631:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b639:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b63f:	89 c8                	mov    eax,ecx
c000b641:	d1 e8                	shr    eax,1
c000b643:	03 05 28 58 02 c0    	add    eax,DWORD PTR ds:0xc0025828
c000b649:	83 e1 01             	and    ecx,0x1
c000b64c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b64e:	75 09                	jne    c000b659 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b650:	83 e2 f0             	and    edx,0xfffffff0
c000b653:	09 da                	or     edx,ebx
c000b655:	88 10                	mov    BYTE PTR [eax],dl
c000b657:	5b                   	pop    ebx
c000b658:	c3                   	ret    
c000b659:	c1 e3 04             	shl    ebx,0x4
c000b65c:	83 e2 0f             	and    edx,0xf
c000b65f:	09 da                	or     edx,ebx
c000b661:	88 10                	mov    BYTE PTR [eax],dl
c000b663:	5b                   	pop    ebx
c000b664:	c3                   	ret    

c000b665 <Virt::getPageState(unsigned long)>:
c000b665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b669:	8b 0d 28 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025828
c000b66f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b675:	89 d0                	mov    eax,edx
c000b677:	d1 e8                	shr    eax,1
c000b679:	83 e2 01             	and    edx,0x1
c000b67c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b67f:	75 04                	jne    c000b685 <Virt::getPageState(unsigned long)+0x20>
c000b681:	83 e0 0f             	and    eax,0xf
c000b684:	c3                   	ret    
c000b685:	c0 e8 04             	shr    al,0x4
c000b688:	c3                   	ret    

c000b689 <Virt::allocateKernelVirtualPages(int)>:
c000b689:	55                   	push   ebp
c000b68a:	31 ed                	xor    ebp,ebp
c000b68c:	57                   	push   edi
c000b68d:	56                   	push   esi
c000b68e:	53                   	push   ebx
c000b68f:	31 db                	xor    ebx,ebx
c000b691:	83 ec 1c             	sub    esp,0x1c
c000b694:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b698:	8b 3d 24 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025824
c000b69e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b6a3:	57                   	push   edi
c000b6a4:	e8 bc ff ff ff       	call   c000b665 <Virt::getPageState(unsigned long)>
c000b6a9:	5a                   	pop    edx
c000b6aa:	84 c0                	test   al,al
c000b6ac:	75 3a                	jne    c000b6e8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b6ae:	85 db                	test   ebx,ebx
c000b6b0:	75 02                	jne    c000b6b4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b6b2:	89 fd                	mov    ebp,edi
c000b6b4:	43                   	inc    ebx
c000b6b5:	39 f3                	cmp    ebx,esi
c000b6b7:	74 5a                	je     c000b713 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b6b9:	47                   	inc    edi
c000b6ba:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6c0:	76 31                	jbe    c000b6f3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b6c2:	c7 05 24 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025824,0xc8000
c000b6cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b6d1:	75 28                	jne    c000b6fb <Virt::allocateKernelVirtualPages(int)+0x72>
c000b6d3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b6d8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6dd:	57                   	push   edi
c000b6de:	e8 82 ff ff ff       	call   c000b665 <Virt::getPageState(unsigned long)>
c000b6e3:	5a                   	pop    edx
c000b6e4:	84 c0                	test   al,al
c000b6e6:	74 c6                	je     c000b6ae <Virt::allocateKernelVirtualPages(int)+0x25>
c000b6e8:	31 db                	xor    ebx,ebx
c000b6ea:	47                   	inc    edi
c000b6eb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6f1:	77 cf                	ja     c000b6c2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b6f3:	89 3d 24 58 02 c0    	mov    DWORD PTR ds:0xc0025824,edi
c000b6f9:	eb a8                	jmp    c000b6a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6fb:	83 ec 0c             	sub    esp,0xc
c000b6fe:	68 68 2b 02 c0       	push   0xc0022b68
c000b703:	e8 1d 8c 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000b708:	8b 3d 24 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025824
c000b70e:	83 c4 10             	add    esp,0x10
c000b711:	eb 90                	jmp    c000b6a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b713:	89 2d 24 58 02 c0    	mov    DWORD PTR ds:0xc0025824,ebp
c000b719:	4b                   	dec    ebx
c000b71a:	74 5f                	je     c000b77b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b71c:	85 f6                	test   esi,esi
c000b71e:	74 3d                	je     c000b75d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b720:	89 e8                	mov    eax,ebp
c000b722:	31 db                	xor    ebx,ebx
c000b724:	8d 7e ff             	lea    edi,[esi-0x1]
c000b727:	eb 14                	jmp    c000b73d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b729:	6a 01                	push   0x1
c000b72b:	43                   	inc    ebx
c000b72c:	50                   	push   eax
c000b72d:	e8 fe fe ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b732:	58                   	pop    eax
c000b733:	39 f3                	cmp    ebx,esi
c000b735:	5a                   	pop    edx
c000b736:	74 25                	je     c000b75d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b738:	a1 24 58 02 c0       	mov    eax,ds:0xc0025824
c000b73d:	8d 50 01             	lea    edx,[eax+0x1]
c000b740:	85 db                	test   ebx,ebx
c000b742:	89 15 24 58 02 c0    	mov    DWORD PTR ds:0xc0025824,edx
c000b748:	74 20                	je     c000b76a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b74a:	39 df                	cmp    edi,ebx
c000b74c:	75 db                	jne    c000b729 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b74e:	6a 03                	push   0x3
c000b750:	43                   	inc    ebx
c000b751:	50                   	push   eax
c000b752:	e8 d9 fe ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b757:	59                   	pop    ecx
c000b758:	39 f3                	cmp    ebx,esi
c000b75a:	58                   	pop    eax
c000b75b:	75 db                	jne    c000b738 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b75d:	83 c4 1c             	add    esp,0x1c
c000b760:	89 e8                	mov    eax,ebp
c000b762:	5b                   	pop    ebx
c000b763:	c1 e0 0c             	shl    eax,0xc
c000b766:	5e                   	pop    esi
c000b767:	5f                   	pop    edi
c000b768:	5d                   	pop    ebp
c000b769:	c3                   	ret    
c000b76a:	6a 02                	push   0x2
c000b76c:	bb 01 00 00 00       	mov    ebx,0x1
c000b771:	50                   	push   eax
c000b772:	e8 b9 fe ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b777:	58                   	pop    eax
c000b778:	5a                   	pop    edx
c000b779:	eb bd                	jmp    c000b738 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b77b:	6a 04                	push   0x4
c000b77d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b780:	55                   	push   ebp
c000b781:	a3 24 58 02 c0       	mov    ds:0xc0025824,eax
c000b786:	e8 a5 fe ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b78b:	59                   	pop    ecx
c000b78c:	89 e8                	mov    eax,ebp
c000b78e:	5b                   	pop    ebx
c000b78f:	c1 e0 0c             	shl    eax,0xc
c000b792:	83 c4 1c             	add    esp,0x1c
c000b795:	5b                   	pop    ebx
c000b796:	5e                   	pop    esi
c000b797:	5f                   	pop    edi
c000b798:	5d                   	pop    ebp
c000b799:	c3                   	ret    

c000b79a <Virt::freeSwapfilePage(unsigned long)>:
c000b79a:	53                   	push   ebx
c000b79b:	8b 15 4c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002654c
c000b7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7a5:	b8 01 00 00 00       	mov    eax,0x1
c000b7aa:	89 cb                	mov    ebx,ecx
c000b7ac:	d3 e0                	shl    eax,cl
c000b7ae:	c1 eb 05             	shr    ebx,0x5
c000b7b1:	f7 d0                	not    eax
c000b7b3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b7b6:	5b                   	pop    ebx
c000b7b7:	c3                   	ret    

c000b7b8 <Virt::swapIDToSector(unsigned long)>:
c000b7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7bc:	0f af 05 2c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002582c
c000b7c3:	03 05 34 58 02 c0    	add    eax,DWORD PTR ds:0xc0025834
c000b7c9:	c3                   	ret    

c000b7ca <Virt::allocateSwapfilePage()>:
c000b7ca:	55                   	push   ebp
c000b7cb:	31 d2                	xor    edx,edx
c000b7cd:	57                   	push   edi
c000b7ce:	56                   	push   esi
c000b7cf:	53                   	push   ebx
c000b7d0:	83 ec 0c             	sub    esp,0xc
c000b7d3:	8b 0d 2c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002582c
c000b7d9:	a1 30 58 02 c0       	mov    eax,ds:0xc0025830
c000b7de:	f7 f1                	div    ecx
c000b7e0:	39 0d 30 58 02 c0    	cmp    DWORD PTR ds:0xc0025830,ecx
c000b7e6:	72 2d                	jb     c000b815 <Virt::allocateSwapfilePage()+0x4b>
c000b7e8:	8b 35 4c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002654c
c000b7ee:	8b 16                	mov    edx,DWORD PTR [esi]
c000b7f0:	f6 c2 01             	test   dl,0x1
c000b7f3:	74 3c                	je     c000b831 <Virt::allocateSwapfilePage()+0x67>
c000b7f5:	31 c9                	xor    ecx,ecx
c000b7f7:	bf 01 00 00 00       	mov    edi,0x1
c000b7fc:	eb 12                	jmp    c000b810 <Virt::allocateSwapfilePage()+0x46>
c000b7fe:	89 fd                	mov    ebp,edi
c000b800:	89 ca                	mov    edx,ecx
c000b802:	d3 e5                	shl    ebp,cl
c000b804:	c1 ea 05             	shr    edx,0x5
c000b807:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b80a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b80c:	85 ea                	test   edx,ebp
c000b80e:	74 2a                	je     c000b83a <Virt::allocateSwapfilePage()+0x70>
c000b810:	41                   	inc    ecx
c000b811:	39 c8                	cmp    eax,ecx
c000b813:	77 e9                	ja     c000b7fe <Virt::allocateSwapfilePage()+0x34>
c000b815:	83 ec 0c             	sub    esp,0xc
c000b818:	68 48 2d 02 c0       	push   0xc0022d48
c000b81d:	e8 03 8b 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000b822:	83 c4 10             	add    esp,0x10
c000b825:	31 c9                	xor    ecx,ecx
c000b827:	83 c4 0c             	add    esp,0xc
c000b82a:	89 c8                	mov    eax,ecx
c000b82c:	5b                   	pop    ebx
c000b82d:	5e                   	pop    esi
c000b82e:	5f                   	pop    edi
c000b82f:	5d                   	pop    ebp
c000b830:	c3                   	ret    
c000b831:	89 f3                	mov    ebx,esi
c000b833:	bd 01 00 00 00       	mov    ebp,0x1
c000b838:	31 c9                	xor    ecx,ecx
c000b83a:	09 ea                	or     edx,ebp
c000b83c:	89 c8                	mov    eax,ecx
c000b83e:	89 13                	mov    DWORD PTR [ebx],edx
c000b840:	83 c4 0c             	add    esp,0xc
c000b843:	5b                   	pop    ebx
c000b844:	5e                   	pop    esi
c000b845:	5f                   	pop    edi
c000b846:	5d                   	pop    ebp
c000b847:	c3                   	ret    

c000b848 <Virt::virtualMemorySetup()>:
c000b848:	53                   	push   ebx
c000b849:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b84e:	6a 0f                	push   0xf
c000b850:	53                   	push   ebx
c000b851:	43                   	inc    ebx
c000b852:	e8 d9 fd ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b857:	58                   	pop    eax
c000b858:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b85e:	5a                   	pop    edx
c000b85f:	75 ed                	jne    c000b84e <Virt::virtualMemorySetup()+0x6>
c000b861:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b866:	6a 00                	push   0x0
c000b868:	53                   	push   ebx
c000b869:	43                   	inc    ebx
c000b86a:	e8 c1 fd ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b86f:	59                   	pop    ecx
c000b870:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b876:	58                   	pop    eax
c000b877:	75 ed                	jne    c000b866 <Virt::virtualMemorySetup()+0x1e>
c000b879:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b87e:	6a 0f                	push   0xf
c000b880:	53                   	push   ebx
c000b881:	43                   	inc    ebx
c000b882:	e8 a9 fd ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b887:	58                   	pop    eax
c000b888:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b88e:	5a                   	pop    edx
c000b88f:	75 ed                	jne    c000b87e <Virt::virtualMemorySetup()+0x36>
c000b891:	5b                   	pop    ebx
c000b892:	c3                   	ret    

c000b893 <Virt::setupPageSwapping(int)>:
c000b893:	53                   	push   ebx
c000b894:	83 ec 0c             	sub    esp,0xc
c000b897:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b89b:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c000b8a0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b8a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8a8:	53                   	push   ebx
c000b8a9:	c1 e3 0b             	shl    ebx,0xb
c000b8ac:	68 5f 2d 02 c0       	push   0xc0022d5f
c000b8b1:	50                   	push   eax
c000b8b2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b8b5:	89 1d 30 58 02 c0    	mov    DWORD PTR ds:0xc0025830,ebx
c000b8bb:	c6 05 38 58 02 c0 43 	mov    BYTE PTR ds:0xc0025838,0x43
c000b8c2:	c1 eb 08             	shr    ebx,0x8
c000b8c5:	a3 34 58 02 c0       	mov    ds:0xc0025834,eax
c000b8ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8cd:	c7 05 2c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002582c,0x8
c000b8d7:	e8 e7 e0 ff ff       	call   c00099c3 <malloc>
c000b8dc:	83 c4 0c             	add    esp,0xc
c000b8df:	89 c1                	mov    ecx,eax
c000b8e1:	a3 4c 65 02 c0       	mov    ds:0xc002654c,eax
c000b8e6:	31 d2                	xor    edx,edx
c000b8e8:	a1 30 58 02 c0       	mov    eax,ds:0xc0025830
c000b8ed:	f7 35 2c 58 02 c0    	div    DWORD PTR ds:0xc002582c
c000b8f3:	c1 e8 05             	shr    eax,0x5
c000b8f6:	50                   	push   eax
c000b8f7:	6a 00                	push   0x0
c000b8f9:	51                   	push   ecx
c000b8fa:	e8 85 4d ff ff       	call   c0000684 <memset>
c000b8ff:	83 c4 18             	add    esp,0x18
c000b902:	5b                   	pop    ebx
c000b903:	c3                   	ret    

c000b904 <VAS::VAS()>:
c000b904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b908:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b90f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b913:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b91e:	a3 50 65 02 c0       	mov    ds:0xc0026550,eax
c000b923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b927:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b92f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b936:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b93d:	90                   	nop
c000b93e:	c3                   	ret    
c000b93f:	90                   	nop

c000b940 <VAS::VAS(VAS*)>:
c000b940:	83 ec 0c             	sub    esp,0xc
c000b943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b947:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b952:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b959:	83 ec 0c             	sub    esp,0xc
c000b95c:	68 88 2b 02 c0       	push   0xc0022b88
c000b961:	e8 bf 89 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	90                   	nop
c000b96a:	83 c4 0c             	add    esp,0xc
c000b96d:	c3                   	ret    

c000b96e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b96e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b972:	89 c2                	mov    edx,eax
c000b974:	c1 e8 0a             	shr    eax,0xa
c000b977:	c1 ea 16             	shr    edx,0x16
c000b97a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b97f:	19 c9                	sbb    ecx,ecx
c000b981:	c1 e2 0c             	shl    edx,0xc
c000b984:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b98a:	25 fc 0f 00 00       	and    eax,0xffc
c000b98f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b996:	01 d0                	add    eax,edx
c000b998:	c3                   	ret    
c000b999:	90                   	nop

c000b99a <VAS::getPageTableEntry(unsigned long)>:
c000b99a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b99e:	89 ca                	mov    edx,ecx
c000b9a0:	c1 e9 0a             	shr    ecx,0xa
c000b9a3:	c1 ea 16             	shr    edx,0x16
c000b9a6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b9ac:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b9b2:	c1 e0 0c             	shl    eax,0xc
c000b9b5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b9b8:	c3                   	ret    

c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b9b9:	57                   	push   edi
c000b9ba:	56                   	push   esi
c000b9bb:	be 01 00 00 00       	mov    esi,0x1
c000b9c0:	53                   	push   ebx
c000b9c1:	83 ec 10             	sub    esp,0x10
c000b9c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9c8:	c1 eb 0c             	shr    ebx,0xc
c000b9cb:	eb 3f                	jmp    c000ba0c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b9cd:	83 ec 08             	sub    esp,0x8
c000b9d0:	57                   	push   edi
c000b9d1:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c000b9d7:	e8 be ff ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000b9dc:	83 c4 10             	add    esp,0x10
c000b9df:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9e5:	f6 c4 04             	test   ah,0x4
c000b9e8:	75 5f                	jne    c000ba49 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b9ea:	80 fa 04             	cmp    dl,0x4
c000b9ed:	74 78                	je     c000ba67 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b9ef:	80 fa 02             	cmp    dl,0x2
c000b9f2:	0f 84 88 00 00 00    	je     c000ba80 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b9f8:	80 fa 03             	cmp    dl,0x3
c000b9fb:	0f 84 ad 00 00 00    	je     c000baae <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba01:	fe ca                	dec    dl
c000ba03:	0f 84 92 00 00 00    	je     c000ba9b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba09:	43                   	inc    ebx
c000ba0a:	31 f6                	xor    esi,esi
c000ba0c:	53                   	push   ebx
c000ba0d:	89 df                	mov    edi,ebx
c000ba0f:	e8 51 fc ff ff       	call   c000b665 <Virt::getPageState(unsigned long)>
c000ba14:	c1 e7 0c             	shl    edi,0xc
c000ba17:	59                   	pop    ecx
c000ba18:	84 c0                	test   al,al
c000ba1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba1e:	75 ad                	jne    c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	68 76 2d 02 c0       	push   0xc0022d76
c000ba28:	e8 f8 88 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000ba2d:	58                   	pop    eax
c000ba2e:	5a                   	pop    edx
c000ba2f:	57                   	push   edi
c000ba30:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c000ba36:	e8 5f ff ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba44:	f6 c4 04             	test   ah,0x4
c000ba47:	74 c0                	je     c000ba09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba49:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba52:	83 ec 0c             	sub    esp,0xc
c000ba55:	50                   	push   eax
c000ba56:	e8 ff e2 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000ba5b:	83 c4 10             	add    esp,0x10
c000ba5e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba62:	80 fa 04             	cmp    dl,0x4
c000ba65:	75 88                	jne    c000b9ef <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba67:	89 f0                	mov    eax,esi
c000ba69:	84 c0                	test   al,al
c000ba6b:	75 47                	jne    c000bab4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba6d:	c7 44 24 20 ac 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022bac
c000ba75:	83 c4 10             	add    esp,0x10
c000ba78:	5b                   	pop    ebx
c000ba79:	5e                   	pop    esi
c000ba7a:	5f                   	pop    edi
c000ba7b:	e9 a5 88 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c000ba80:	89 f0                	mov    eax,esi
c000ba82:	84 c0                	test   al,al
c000ba84:	75 15                	jne    c000ba9b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba86:	83 ec 0c             	sub    esp,0xc
c000ba89:	68 92 2d 02 c0       	push   0xc0022d92
c000ba8e:	e8 92 88 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000ba93:	83 c4 10             	add    esp,0x10
c000ba96:	e9 6e ff ff ff       	jmp    c000ba09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba9b:	83 ec 08             	sub    esp,0x8
c000ba9e:	6a 00                	push   0x0
c000baa0:	53                   	push   ebx
c000baa1:	e8 8a fb ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	e9 5b ff ff ff       	jmp    c000ba09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baae:	89 f0                	mov    eax,esi
c000bab0:	84 c0                	test   al,al
c000bab2:	75 15                	jne    c000bac9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bab4:	83 ec 08             	sub    esp,0x8
c000bab7:	6a 00                	push   0x0
c000bab9:	53                   	push   ebx
c000baba:	e8 71 fb ff ff       	call   c000b630 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	83 c4 10             	add    esp,0x10
c000bac5:	5b                   	pop    ebx
c000bac6:	5e                   	pop    esi
c000bac7:	5f                   	pop    edi
c000bac8:	c3                   	ret    
c000bac9:	c7 44 24 20 ae 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022dae
c000bad1:	83 c4 10             	add    esp,0x10
c000bad4:	5b                   	pop    ebx
c000bad5:	5e                   	pop    esi
c000bad6:	5f                   	pop    edi
c000bad7:	e9 49 88 00 00       	jmp    c0014325 <Krnl::panic(char const*)>

c000badc <VAS::freeAllocatedPages(unsigned long)>:
c000badc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bae0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bae4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bae8:	74 09                	je     c000baf3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000baea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000baee:	e9 c6 fe ff ff       	jmp    c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000baf3:	c7 44 24 04 d0 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd0
c000bafb:	e9 64 0f 00 00       	jmp    c000ca64 <Dbg::kprintf(char const*, ...)>

c000bb00 <VAS::virtualToPhysical(unsigned long)>:
c000bb00:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb08:	e8 8d fe ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000bb0d:	5a                   	pop    edx
c000bb0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb10:	59                   	pop    ecx
c000bb11:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb16:	c3                   	ret    
c000bb17:	90                   	nop

c000bb18 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb18:	55                   	push   ebp
c000bb19:	57                   	push   edi
c000bb1a:	56                   	push   esi
c000bb1b:	53                   	push   ebx
c000bb1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb20:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb24:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb28:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb2c:	85 db                	test   ebx,ebx
c000bb2e:	7e 22                	jle    c000bb52 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb30:	c1 e3 0c             	shl    ebx,0xc
c000bb33:	01 f3                	add    ebx,esi
c000bb35:	56                   	push   esi
c000bb36:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb3c:	55                   	push   ebp
c000bb3d:	e8 58 fe ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000bb42:	5a                   	pop    edx
c000bb43:	59                   	pop    ecx
c000bb44:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb46:	21 f9                	and    ecx,edi
c000bb48:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb4c:	39 f3                	cmp    ebx,esi
c000bb4e:	89 08                	mov    DWORD PTR [eax],ecx
c000bb50:	75 e3                	jne    c000bb35 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb52:	5b                   	pop    ebx
c000bb53:	5e                   	pop    esi
c000bb54:	5f                   	pop    edi
c000bb55:	5d                   	pop    ebp
c000bb56:	c3                   	ret    
c000bb57:	90                   	nop

c000bb58 <VAS::setToWriteCombining(unsigned long, int)>:
c000bb58:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000bb5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb63:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb6a:	75 01                	jne    c000bb6d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb6c:	c3                   	ret    
c000bb6d:	68 80 00 00 00       	push   0x80
c000bb72:	6a ff                	push   0xffffffff
c000bb74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb80:	e8 93 ff ff ff       	call   c000bb18 <VAS::reflagRange(unsigned long, int, int, int)>
c000bb85:	83 c4 14             	add    esp,0x14
c000bb88:	c3                   	ret    
c000bb89:	90                   	nop

c000bb8a <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb93:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb9a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bb9d:	19 c0                	sbb    eax,eax
c000bb9f:	83 ca 03             	or     edx,0x3
c000bba2:	83 e0 fc             	and    eax,0xfffffffc
c000bba5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bbac:	0f 20 d8             	mov    eax,cr3
c000bbaf:	0f 22 d8             	mov    cr3,eax
c000bbb2:	c3                   	ret    
c000bbb3:	90                   	nop

c000bbb4 <VAS::~VAS()>:
c000bbb4:	83 ec 2c             	sub    esp,0x2c
c000bbb7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bbbf:	fa                   	cli    
c000bbc0:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000bbc5:	40                   	inc    eax
c000bbc6:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000bbcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bbdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbdf:	6a 01                	push   0x1
c000bbe1:	50                   	push   eax
c000bbe2:	e8 a3 ff ff ff       	call   c000bb8a <VAS::mapOtherVASIn(bool, VAS*)>
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bbf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bbfa:	0f 8f d4 00 00 00    	jg     c000bcd4 <VAS::~VAS()+0x120>
c000bc00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc0b:	c1 e2 02             	shl    edx,0x2
c000bc0e:	01 d0                	add    eax,edx
c000bc10:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1a:	83 e0 01             	and    eax,0x1
c000bc1d:	0f 84 a8 00 00 00    	je     c000bccb <VAS::~VAS()+0x117>
c000bc23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc33:	7f 72                	jg     c000bca7 <VAS::~VAS()+0xf3>
c000bc35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc39:	c1 e0 0a             	shl    eax,0xa
c000bc3c:	89 c2                	mov    edx,eax
c000bc3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc42:	01 d0                	add    eax,edx
c000bc44:	c1 e0 0c             	shl    eax,0xc
c000bc47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc50:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc5f:	6a 01                	push   0x1
c000bc61:	50                   	push   eax
c000bc62:	e8 07 fd ff ff       	call   c000b96e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc67:	83 c4 0c             	add    esp,0xc
c000bc6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc72:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7c:	25 01 04 00 00       	and    eax,0x401
c000bc81:	3d 01 04 00 00       	cmp    eax,0x401
c000bc86:	75 19                	jne    c000bca1 <VAS::~VAS()+0xed>
c000bc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc91:	83 ec 0c             	sub    esp,0xc
c000bc94:	50                   	push   eax
c000bc95:	e8 c0 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bc9a:	83 c4 10             	add    esp,0x10
c000bc9d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bca1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bca5:	eb 84                	jmp    c000bc2b <VAS::~VAS()+0x77>
c000bca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcab:	25 00 04 00 00       	and    eax,0x400
c000bcb0:	74 19                	je     c000bccb <VAS::~VAS()+0x117>
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	50                   	push   eax
c000bcbf:	e8 96 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bcc4:	83 c4 10             	add    esp,0x10
c000bcc7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bccb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bccf:	e9 1e ff ff ff       	jmp    c000bbf2 <VAS::~VAS()+0x3e>
c000bcd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	50                   	push   eax
c000bcdf:	e8 d5 fc ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000bce4:	83 c4 10             	add    esp,0x10
c000bce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bceb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	50                   	push   eax
c000bcf2:	e8 63 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bcf7:	83 c4 10             	add    esp,0x10
c000bcfa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd02:	c1 e0 02             	shl    eax,0x2
c000bd05:	83 ec 08             	sub    esp,0x8
c000bd08:	50                   	push   eax
c000bd09:	68 f4 2b 02 c0       	push   0xc0022bf4
c000bd0e:	e8 51 0d 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000bd13:	83 c4 10             	add    esp,0x10
c000bd16:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000bd1b:	48                   	dec    eax
c000bd1c:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000bd21:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000bd26:	85 c0                	test   eax,eax
c000bd28:	75 01                	jne    c000bd2b <VAS::~VAS()+0x177>
c000bd2a:	fb                   	sti    
c000bd2b:	90                   	nop
c000bd2c:	83 c4 2c             	add    esp,0x2c
c000bd2f:	c3                   	ret    

c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd30:	55                   	push   ebp
c000bd31:	57                   	push   edi
c000bd32:	56                   	push   esi
c000bd33:	53                   	push   ebx
c000bd34:	83 ec 1c             	sub    esp,0x1c
c000bd37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd3f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd45:	77 08                	ja     c000bd4f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd47:	0f 20 d8             	mov    eax,cr3
c000bd4a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd4d:	75 47                	jne    c000bd96 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd53:	09 d8                	or     eax,ebx
c000bd55:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd5a:	75 57                	jne    c000bdb3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd5c:	89 de                	mov    esi,ebx
c000bd5e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd61:	c1 ee 16             	shr    esi,0x16
c000bd64:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd6b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd6f:	74 54                	je     c000bdc5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd75:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd7b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd7f:	c1 e6 0c             	shl    esi,0xc
c000bd82:	c1 eb 0a             	shr    ebx,0xa
c000bd85:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd8b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd8e:	83 c4 1c             	add    esp,0x1c
c000bd91:	5b                   	pop    ebx
c000bd92:	5e                   	pop    esi
c000bd93:	5f                   	pop    edi
c000bd94:	5d                   	pop    ebp
c000bd95:	c3                   	ret    
c000bd96:	83 ec 0c             	sub    esp,0xc
c000bd99:	68 14 2c 02 c0       	push   0xc0022c14
c000bd9e:	e8 c1 0c 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000bda3:	83 c4 10             	add    esp,0x10
c000bda6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdaa:	09 d8                	or     eax,ebx
c000bdac:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdb1:	74 a9                	je     c000bd5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdb3:	83 ec 0c             	sub    esp,0xc
c000bdb6:	68 7c 2c 02 c0       	push   0xc0022c7c
c000bdbb:	e8 65 85 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	eb 97                	jmp    c000bd5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdc9:	e8 fd df ff ff       	call   c0009dcb <Phys::allocatePage()>
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	89 c5                	mov    ebp,eax
c000bdd3:	8b 0d 50 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026550
c000bdd9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bddd:	6a 01                	push   0x1
c000bddf:	e8 a5 f8 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c000bde4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bdeb:	6a 01                	push   0x1
c000bded:	50                   	push   eax
c000bdee:	55                   	push   ebp
c000bdef:	81 cd 07 04 00 00    	or     ebp,0x407
c000bdf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bdf9:	51                   	push   ecx
c000bdfa:	e8 27 02 00 00       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bdff:	83 c4 1c             	add    esp,0x1c
c000be02:	68 00 10 00 00       	push   0x1000
c000be07:	6a 00                	push   0x0
c000be09:	50                   	push   eax
c000be0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be0e:	e8 71 48 ff ff       	call   c0000684 <memset>
c000be13:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be1a:	e8 9a fb ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000be1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be23:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be2c:	e9 40 ff ff ff       	jmp    c000bd71 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be31:	90                   	nop

c000be32 <VAS::allocatePages(int, int)>:
c000be32:	55                   	push   ebp
c000be33:	57                   	push   edi
c000be34:	56                   	push   esi
c000be35:	53                   	push   ebx
c000be36:	83 ec 1c             	sub    esp,0x1c
c000be39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be3d:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000be42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be48:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be4e:	83 e0 01             	and    eax,0x1
c000be51:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be59:	0f 85 cc 00 00 00    	jne    c000bf2b <VAS::allocatePages(int, int)+0xf9>
c000be5f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be66:	85 c0                	test   eax,eax
c000be68:	0f 84 a1 00 00 00    	je     c000bf0f <VAS::allocatePages(int, int)+0xdd>
c000be6e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be76:	c1 e6 0c             	shl    esi,0xc
c000be79:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be7d:	85 c0                	test   eax,eax
c000be7f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be82:	7e 33                	jle    c000beb7 <VAS::allocatePages(int, int)+0x85>
c000be84:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be88:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be8c:	81 cd 00 04 00 00    	or     ebp,0x400
c000be92:	e8 34 df ff ff       	call   c0009dcb <Phys::allocatePage()>
c000be97:	55                   	push   ebp
c000be98:	53                   	push   ebx
c000be99:	50                   	push   eax
c000be9a:	57                   	push   edi
c000be9b:	e8 90 fe ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bea8:	74 03                	je     c000bead <VAS::allocatePages(int, int)+0x7b>
c000beaa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bead:	81 c3 00 10 00 00    	add    ebx,0x1000
c000beb3:	39 de                	cmp    esi,ebx
c000beb5:	75 db                	jne    c000be92 <VAS::allocatePages(int, int)+0x60>
c000beb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bebc:	75 12                	jne    c000bed0 <VAS::allocatePages(int, int)+0x9e>
c000bebe:	0f 20 d8             	mov    eax,cr3
c000bec1:	0f 22 d8             	mov    cr3,eax
c000bec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bec8:	83 c4 1c             	add    esp,0x1c
c000becb:	5b                   	pop    ebx
c000becc:	5e                   	pop    esi
c000becd:	5f                   	pop    edi
c000bece:	5d                   	pop    ebp
c000becf:	c3                   	ret    
c000bed0:	c1 ee 0a             	shr    esi,0xa
c000bed3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bed7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bedd:	c1 eb 0a             	shr    ebx,0xa
c000bee0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bee6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000beec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bef2:	39 c3                	cmp    ebx,eax
c000bef4:	77 ce                	ja     c000bec4 <VAS::allocatePages(int, int)+0x92>
c000bef6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bef9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000beff:	39 d8                	cmp    eax,ebx
c000bf01:	73 f3                	jae    c000bef6 <VAS::allocatePages(int, int)+0xc4>
c000bf03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf07:	83 c4 1c             	add    esp,0x1c
c000bf0a:	5b                   	pop    ebx
c000bf0b:	5e                   	pop    esi
c000bf0c:	5f                   	pop    edi
c000bf0d:	5d                   	pop    ebp
c000bf0e:	c3                   	ret    
c000bf0f:	83 ec 0c             	sub    esp,0xc
c000bf12:	68 a0 2c 02 c0       	push   0xc0022ca0
c000bf17:	e8 09 84 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000bf1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf23:	83 c4 10             	add    esp,0x10
c000bf26:	e9 43 ff ff ff       	jmp    c000be6e <VAS::allocatePages(int, int)+0x3c>
c000bf2b:	83 ec 0c             	sub    esp,0xc
c000bf2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf32:	e8 52 f7 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c000bf37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf3b:	83 c4 10             	add    esp,0x10
c000bf3e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf43:	0f 87 9b 00 00 00    	ja     c000bfe4 <VAS::allocatePages(int, int)+0x1b2>
c000bf49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf4d:	85 d2                	test   edx,edx
c000bf4f:	7e 3c                	jle    c000bf8d <VAS::allocatePages(int, int)+0x15b>
c000bf51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf55:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf5d:	c1 e5 0c             	shl    ebp,0xc
c000bf60:	81 ce 00 04 00 00    	or     esi,0x400
c000bf66:	01 dd                	add    ebp,ebx
c000bf68:	e8 5e de ff ff       	call   c0009dcb <Phys::allocatePage()>
c000bf6d:	56                   	push   esi
c000bf6e:	53                   	push   ebx
c000bf6f:	50                   	push   eax
c000bf70:	57                   	push   edi
c000bf71:	e8 ba fd ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf76:	83 c4 10             	add    esp,0x10
c000bf79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf7e:	74 03                	je     c000bf83 <VAS::allocatePages(int, int)+0x151>
c000bf80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf83:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf89:	39 dd                	cmp    ebp,ebx
c000bf8b:	75 db                	jne    c000bf68 <VAS::allocatePages(int, int)+0x136>
c000bf8d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf92:	0f 84 26 ff ff ff    	je     c000bebe <VAS::allocatePages(int, int)+0x8c>
c000bf98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfa0:	89 d3                	mov    ebx,edx
c000bfa2:	c1 e0 0c             	shl    eax,0xc
c000bfa5:	c1 eb 0a             	shr    ebx,0xa
c000bfa8:	01 d0                	add    eax,edx
c000bfaa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bfb0:	c1 e8 0a             	shr    eax,0xa
c000bfb3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfb9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfbe:	2d 00 00 40 00       	sub    eax,0x400000
c000bfc3:	39 c3                	cmp    ebx,eax
c000bfc5:	0f 87 f9 fe ff ff    	ja     c000bec4 <VAS::allocatePages(int, int)+0x92>
c000bfcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfd4:	39 d8                	cmp    eax,ebx
c000bfd6:	73 f3                	jae    c000bfcb <VAS::allocatePages(int, int)+0x199>
c000bfd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfdc:	83 c4 1c             	add    esp,0x1c
c000bfdf:	5b                   	pop    ebx
c000bfe0:	5e                   	pop    esi
c000bfe1:	5f                   	pop    edi
c000bfe2:	5d                   	pop    ebp
c000bfe3:	c3                   	ret    
c000bfe4:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000bfe9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfef:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000bff6:	0f 84 4d ff ff ff    	je     c000bf49 <VAS::allocatePages(int, int)+0x117>
c000bffc:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c004:	e9 40 ff ff ff       	jmp    c000bf49 <VAS::allocatePages(int, int)+0x117>
c000c009:	90                   	nop

c000c00a <VAS::setCPUSpecific(unsigned long)>:
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	6a 05                	push   0x5
c000c00f:	68 00 00 40 c2       	push   0xc2400000
c000c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c01c:	e8 0f fd ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c021:	83 c4 1c             	add    esp,0x1c
c000c024:	c3                   	ret    
c000c025:	90                   	nop

c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c026:	55                   	push   ebp
c000c027:	57                   	push   edi
c000c028:	56                   	push   esi
c000c029:	53                   	push   ebx
c000c02a:	83 ec 1c             	sub    esp,0x1c
c000c02d:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c032:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c036:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c03c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c040:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c046:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c04a:	83 e0 01             	and    eax,0x1
c000c04d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c051:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c055:	85 c0                	test   eax,eax
c000c057:	7e 39                	jle    c000c092 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c059:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c05d:	89 f3                	mov    ebx,esi
c000c05f:	c1 e0 0c             	shl    eax,0xc
c000c062:	01 f0                	add    eax,esi
c000c064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c068:	55                   	push   ebp
c000c069:	53                   	push   ebx
c000c06a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c06e:	29 f0                	sub    eax,esi
c000c070:	01 d8                	add    eax,ebx
c000c072:	50                   	push   eax
c000c073:	57                   	push   edi
c000c074:	e8 b7 fc ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c079:	83 c4 10             	add    esp,0x10
c000c07c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c081:	74 03                	je     c000c086 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c083:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c086:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c08c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c090:	75 d6                	jne    c000c068 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c092:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c097:	75 10                	jne    c000c0a9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c099:	0f 20 d8             	mov    eax,cr3
c000c09c:	0f 22 d8             	mov    cr3,eax
c000c09f:	83 c4 1c             	add    esp,0x1c
c000c0a2:	89 f0                	mov    eax,esi
c000c0a4:	5b                   	pop    ebx
c000c0a5:	5e                   	pop    esi
c000c0a6:	5f                   	pop    edi
c000c0a7:	5d                   	pop    ebp
c000c0a8:	c3                   	ret    
c000c0a9:	89 f3                	mov    ebx,esi
c000c0ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0af:	c1 eb 0a             	shr    ebx,0xa
c000c0b2:	c1 e0 0c             	shl    eax,0xc
c000c0b5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c0bb:	01 f0                	add    eax,esi
c000c0bd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c0c3:	c1 e8 0a             	shr    eax,0xa
c000c0c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0cb:	2d 00 00 40 00       	sub    eax,0x400000
c000c0d0:	39 c3                	cmp    ebx,eax
c000c0d2:	77 cb                	ja     c000c09f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c0d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0dd:	39 d8                	cmp    eax,ebx
c000c0df:	73 f3                	jae    c000c0d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0e1:	83 c4 1c             	add    esp,0x1c
c000c0e4:	89 f0                	mov    eax,esi
c000c0e6:	5b                   	pop    ebx
c000c0e7:	5e                   	pop    esi
c000c0e8:	5f                   	pop    edi
c000c0e9:	5d                   	pop    ebp
c000c0ea:	c3                   	ret    
c000c0eb:	90                   	nop

c000c0ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c0ec:	55                   	push   ebp
c000c0ed:	57                   	push   edi
c000c0ee:	56                   	push   esi
c000c0ef:	53                   	push   ebx
c000c0f0:	83 ec 1c             	sub    esp,0x1c
c000c0f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c0fb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c0ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c103:	a9 ff 0f 00 00       	test   eax,0xfff
c000c108:	75 4a                	jne    c000c154 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c10a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c10e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c111:	c1 eb 16             	shr    ebx,0x16
c000c114:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c11b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c11f:	74 4d                	je     c000c16e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c121:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c125:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c129:	c1 e8 0a             	shr    eax,0xa
c000c12c:	80 fa 01             	cmp    dl,0x1
c000c12f:	19 d2                	sbb    edx,edx
c000c131:	c1 e3 0c             	shl    ebx,0xc
c000c134:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c138:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c13e:	25 fc 0f 00 00       	and    eax,0xffc
c000c143:	01 d8                	add    eax,ebx
c000c145:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c14c:	83 c4 1c             	add    esp,0x1c
c000c14f:	5b                   	pop    ebx
c000c150:	5e                   	pop    esi
c000c151:	5f                   	pop    edi
c000c152:	5d                   	pop    ebp
c000c153:	c3                   	ret    
c000c154:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 cc 2c 02 c0       	push   0xc0022ccc
c000c160:	e8 c0 81 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c16c:	eb 9c                	jmp    c000c10a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c16e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c172:	e8 54 dc ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c177:	83 ec 0c             	sub    esp,0xc
c000c17a:	89 c5                	mov    ebp,eax
c000c17c:	8b 0d 50 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026550
c000c182:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c186:	6a 01                	push   0x1
c000c188:	e8 fc f4 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c000c18d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c194:	6a 01                	push   0x1
c000c196:	50                   	push   eax
c000c197:	55                   	push   ebp
c000c198:	81 cd 07 04 00 00    	or     ebp,0x407
c000c19e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c1a2:	51                   	push   ecx
c000c1a3:	e8 7e fe ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1a8:	83 c4 1c             	add    esp,0x1c
c000c1ab:	68 00 10 00 00       	push   0x1000
c000c1b0:	6a 00                	push   0x0
c000c1b2:	50                   	push   eax
c000c1b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1b7:	e8 c8 44 ff ff       	call   c0000684 <memset>
c000c1bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c1c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c1c3:	e8 f1 f7 ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1c8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1cb:	83 c4 10             	add    esp,0x10
c000c1ce:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c1d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1d5:	e9 47 ff ff ff       	jmp    c000c121 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c1da <VAS::VAS(bool)>:
c000c1da:	53                   	push   ebx
c000c1db:	83 ec 28             	sub    esp,0x28
c000c1de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c1f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c200:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c204:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c207:	e8 bf db ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c212:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c215:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	6a 01                	push   0x1
c000c220:	e8 64 f4 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	89 c2                	mov    edx,eax
c000c22a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c22e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	6a 03                	push   0x3
c000c236:	6a 01                	push   0x1
c000c238:	52                   	push   edx
c000c239:	50                   	push   eax
c000c23a:	53                   	push   ebx
c000c23b:	e8 e6 fd ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c240:	83 c4 20             	add    esp,0x20
c000c243:	89 c2                	mov    edx,eax
c000c245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c249:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c24c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c254:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c25c:	7f 1c                	jg     c000c27a <VAS::VAS(bool)+0xa0>
c000c25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c262:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c265:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c269:	c1 e2 02             	shl    edx,0x2
c000c26c:	01 d0                	add    eax,edx
c000c26e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c274:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c278:	eb da                	jmp    c000c254 <VAS::VAS(bool)+0x7a>
c000c27a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c282:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c28a:	7f 7a                	jg     c000c306 <VAS::VAS(bool)+0x12c>
c000c28c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c290:	2d 00 02 00 00       	sub    eax,0x200
c000c295:	c1 e0 0c             	shl    eax,0xc
c000c298:	83 c8 03             	or     eax,0x3
c000c29b:	89 c2                	mov    edx,eax
c000c29d:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c2a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2a8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2ae:	83 e0 10             	and    eax,0x10
c000c2b1:	84 c0                	test   al,al
c000c2b3:	74 07                	je     c000c2bc <VAS::VAS(bool)+0xe2>
c000c2b5:	b8 00 01 00 00       	mov    eax,0x100
c000c2ba:	eb 05                	jmp    c000c2c1 <VAS::VAS(bool)+0xe7>
c000c2bc:	b8 00 00 00 00       	mov    eax,0x0
c000c2c1:	09 d0                	or     eax,edx
c000c2c3:	89 c1                	mov    ecx,eax
c000c2c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2d0:	c1 e2 02             	shl    edx,0x2
c000c2d3:	01 d0                	add    eax,edx
c000c2d5:	89 ca                	mov    edx,ecx
c000c2d7:	89 10                	mov    DWORD PTR [eax],edx
c000c2d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2dd:	2d 40 03 00 00       	sub    eax,0x340
c000c2e2:	83 f8 7f             	cmp    eax,0x7f
c000c2e5:	77 16                	ja     c000c2fd <VAS::VAS(bool)+0x123>
c000c2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2f2:	c1 e2 02             	shl    edx,0x2
c000c2f5:	01 d0                	add    eax,edx
c000c2f7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2fd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c301:	e9 7c ff ff ff       	jmp    c000c282 <VAS::VAS(bool)+0xa8>
c000c306:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c30b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c311:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c317:	83 e0 10             	and    eax,0x10
c000c31a:	84 c0                	test   al,al
c000c31c:	74 07                	je     c000c325 <VAS::VAS(bool)+0x14b>
c000c31e:	b8 03 41 00 00       	mov    eax,0x4103
c000c323:	eb 05                	jmp    c000c32a <VAS::VAS(bool)+0x150>
c000c325:	b8 03 40 00 00       	mov    eax,0x4003
c000c32a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c32e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c331:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c337:	89 02                	mov    DWORD PTR [edx],eax
c000c339:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c33e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c344:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c34a:	83 ec 08             	sub    esp,0x8
c000c34d:	50                   	push   eax
c000c34e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c352:	e8 b3 fc ff ff       	call   c000c00a <VAS::setCPUSpecific(unsigned long)>
c000c357:	83 c4 10             	add    esp,0x10
c000c35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c35e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c361:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c366:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c36c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c372:	83 e0 10             	and    eax,0x10
c000c375:	84 c0                	test   al,al
c000c377:	74 07                	je     c000c380 <VAS::VAS(bool)+0x1a6>
c000c379:	b8 00 01 00 00       	mov    eax,0x100
c000c37e:	eb 05                	jmp    c000c385 <VAS::VAS(bool)+0x1ab>
c000c380:	b8 00 00 00 00       	mov    eax,0x0
c000c385:	09 c2                	or     edx,eax
c000c387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c38b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38e:	05 fc 0f 00 00       	add    eax,0xffc
c000c393:	83 ca 03             	or     edx,0x3
c000c396:	89 10                	mov    DWORD PTR [eax],edx
c000c398:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c39d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3a3:	83 ec 0c             	sub    esp,0xc
c000c3a6:	50                   	push   eax
c000c3a7:	e8 fe 1d 00 00       	call   c000e1aa <Device::getName()>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	83 ec 08             	sub    esp,0x8
c000c3b2:	68 c8 2d 02 c0       	push   0xc0022dc8
c000c3b7:	50                   	push   eax
c000c3b8:	e8 0f 44 ff ff       	call   c00007cc <strcmp>
c000c3bd:	83 c4 10             	add    esp,0x10
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 94 c0             	sete   al
c000c3c5:	84 c0                	test   al,al
c000c3c7:	0f 84 87 00 00 00    	je     c000c454 <VAS::VAS(bool)+0x27a>
c000c3cd:	fa                   	cli    
c000c3ce:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000c3d3:	40                   	inc    eax
c000c3d4:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000c3d9:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c3de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3e4:	05 7c 09 00 00       	add    eax,0x97c
c000c3e9:	83 ec 0c             	sub    esp,0xc
c000c3ec:	50                   	push   eax
c000c3ed:	e8 c0 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3f2:	83 c4 10             	add    esp,0x10
c000c3f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3fa:	89 c3                	mov    ebx,eax
c000c3fc:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000c401:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c407:	05 7c 09 00 00       	add    eax,0x97c
c000c40c:	83 ec 0c             	sub    esp,0xc
c000c40f:	50                   	push   eax
c000c410:	e8 9d d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	83 ec 08             	sub    esp,0x8
c000c41b:	50                   	push   eax
c000c41c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c420:	e8 75 f5 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000c425:	83 c4 10             	add    esp,0x10
c000c428:	8b 00                	mov    eax,DWORD PTR [eax]
c000c42a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c42f:	6a 11                	push   0x11
c000c431:	53                   	push   ebx
c000c432:	50                   	push   eax
c000c433:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c437:	e8 f4 f8 ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000c444:	48                   	dec    eax
c000c445:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000c44a:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000c44f:	85 c0                	test   eax,eax
c000c451:	75 01                	jne    c000c454 <VAS::VAS(bool)+0x27a>
c000c453:	fb                   	sti    
c000c454:	90                   	nop
c000c455:	83 c4 28             	add    esp,0x28
c000c458:	5b                   	pop    ebx
c000c459:	c3                   	ret    

c000c45a <VAS::evict(unsigned long)>:
c000c45a:	55                   	push   ebp
c000c45b:	57                   	push   edi
c000c45c:	56                   	push   esi
c000c45d:	53                   	push   ebx
c000c45e:	83 ec 28             	sub    esp,0x28
c000c461:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c465:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c469:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c46d:	68 d6 2d 02 c0       	push   0xc0022dd6
c000c472:	e8 ed 05 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c477:	e8 4e f3 ff ff       	call   c000b7ca <Virt::allocateSwapfilePage()>
c000c47c:	5a                   	pop    edx
c000c47d:	89 c7                	mov    edi,eax
c000c47f:	59                   	pop    ecx
c000c480:	50                   	push   eax
c000c481:	68 f3 2d 02 c0       	push   0xc0022df3
c000c486:	e8 d9 05 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c48b:	83 c4 10             	add    esp,0x10
c000c48e:	8b 1d 2c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002582c
c000c494:	85 db                	test   ebx,ebx
c000c496:	7e 3d                	jle    c000c4d5 <VAS::evict(unsigned long)+0x7b>
c000c498:	89 ee                	mov    esi,ebp
c000c49a:	31 db                	xor    ebx,ebx
c000c49c:	83 ec 0c             	sub    esp,0xc
c000c49f:	57                   	push   edi
c000c4a0:	e8 13 f3 ff ff       	call   c000b7b8 <Virt::swapIDToSector(unsigned long)>
c000c4a5:	89 34 24             	mov    DWORD PTR [esp],esi
c000c4a8:	01 d8                	add    eax,ebx
c000c4aa:	6a 01                	push   0x1
c000c4ac:	31 d2                	xor    edx,edx
c000c4ae:	43                   	inc    ebx
c000c4af:	52                   	push   edx
c000c4b0:	81 c6 00 02 00 00    	add    esi,0x200
c000c4b6:	50                   	push   eax
c000c4b7:	0f be 05 38 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025838
c000c4be:	ff 34 85 dc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9724]
c000c4c5:	e8 22 3d 00 00       	call   c00101ec <LogicalDisk::write(unsigned long long, int, void*)>
c000c4ca:	83 c4 20             	add    esp,0x20
c000c4cd:	39 1d 2c 58 02 c0    	cmp    DWORD PTR ds:0xc002582c,ebx
c000c4d3:	7f c7                	jg     c000c49c <VAS::evict(unsigned long)+0x42>
c000c4d5:	83 ec 08             	sub    esp,0x8
c000c4d8:	c1 e7 0b             	shl    edi,0xb
c000c4db:	55                   	push   ebp
c000c4dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4e0:	e8 b5 f4 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000c4e5:	5a                   	pop    edx
c000c4e6:	89 c6                	mov    esi,eax
c000c4e8:	59                   	pop    ecx
c000c4e9:	ff 30                	push   DWORD PTR [eax]
c000c4eb:	68 03 2e 02 c0       	push   0xc0022e03
c000c4f0:	e8 6f 05 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c4f5:	8b 16                	mov    edx,DWORD PTR [esi]
c000c4f7:	89 d3                	mov    ebx,edx
c000c4f9:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c4ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c505:	09 d7                	or     edi,edx
c000c507:	89 3e                	mov    DWORD PTR [esi],edi
c000c509:	5e                   	pop    esi
c000c50a:	58                   	pop    eax
c000c50b:	57                   	push   edi
c000c50c:	68 1c 2e 02 c0       	push   0xc0022e1c
c000c511:	e8 4e 05 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c519:	ff 05 48 65 02 c0    	inc    DWORD PTR ds:0xc0026548
c000c51f:	e8 36 d8 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000c524:	0f 20 d8             	mov    eax,cr3
c000c527:	0f 22 d8             	mov    cr3,eax
c000c52a:	ff 35 48 65 02 c0    	push   DWORD PTR ds:0xc0026548
c000c530:	55                   	push   ebp
c000c531:	53                   	push   ebx
c000c532:	68 f0 2c 02 c0       	push   0xc0022cf0
c000c537:	e8 28 05 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c53c:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000c541:	c7 44 24 50 35 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e35
c000c549:	8d 50 01             	lea    edx,[eax+0x1]
c000c54c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c550:	89 15 44 65 02 c0    	mov    DWORD PTR ds:0xc0026544,edx
c000c556:	83 c4 3c             	add    esp,0x3c
c000c559:	5b                   	pop    ebx
c000c55a:	5e                   	pop    esi
c000c55b:	5f                   	pop    edi
c000c55c:	5d                   	pop    ebp
c000c55d:	e9 02 05 00 00       	jmp    c000ca64 <Dbg::kprintf(char const*, ...)>

c000c562 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c562:	55                   	push   ebp
c000c563:	57                   	push   edi
c000c564:	56                   	push   esi
c000c565:	53                   	push   ebx
c000c566:	83 ec 24             	sub    esp,0x24
c000c569:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c56d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c571:	68 46 2e 02 c0       	push   0xc0022e46
c000c576:	e8 e9 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c57b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c57f:	58                   	pop    eax
c000c580:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c586:	5a                   	pop    edx
c000c587:	57                   	push   edi
c000c588:	53                   	push   ebx
c000c589:	e8 0c f4 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000c58e:	59                   	pop    ecx
c000c58f:	5e                   	pop    esi
c000c590:	89 c6                	mov    esi,eax
c000c592:	ff 30                	push   DWORD PTR [eax]
c000c594:	68 59 2e 02 c0       	push   0xc0022e59
c000c599:	e8 c6 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c59e:	83 c4 10             	add    esp,0x10
c000c5a1:	85 ff                	test   edi,edi
c000c5a3:	74 0a                	je     c000c5af <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c5a5:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c5a7:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c5ad:	74 0a                	je     c000c5b9 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c5af:	83 c4 1c             	add    esp,0x1c
c000c5b2:	31 c0                	xor    eax,eax
c000c5b4:	5b                   	pop    ebx
c000c5b5:	5e                   	pop    esi
c000c5b6:	5f                   	pop    edi
c000c5b7:	5d                   	pop    ebp
c000c5b8:	c3                   	ret    
c000c5b9:	83 ec 08             	sub    esp,0x8
c000c5bc:	c1 ed 0b             	shr    ebp,0xb
c000c5bf:	55                   	push   ebp
c000c5c0:	68 67 2e 02 c0       	push   0xc0022e67
c000c5c5:	e8 9a 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c5ca:	e8 fc d7 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c5cf:	59                   	pop    ecx
c000c5d0:	5a                   	pop    edx
c000c5d1:	50                   	push   eax
c000c5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5d6:	68 72 2e 02 c0       	push   0xc0022e72
c000c5db:	e8 84 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c5e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5e4:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5e6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c5ec:	09 d0                	or     eax,edx
c000c5ee:	0d 01 08 00 00       	or     eax,0x801
c000c5f3:	89 06                	mov    DWORD PTR [esi],eax
c000c5f5:	59                   	pop    ecx
c000c5f6:	5e                   	pop    esi
c000c5f7:	50                   	push   eax
c000c5f8:	68 87 2e 02 c0       	push   0xc0022e87
c000c5fd:	e8 62 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c602:	0f 20 d8             	mov    eax,cr3
c000c605:	83 c4 0c             	add    esp,0xc
c000c608:	53                   	push   ebx
c000c609:	50                   	push   eax
c000c60a:	68 9f 2e 02 c0       	push   0xc0022e9f
c000c60f:	e8 50 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c614:	c7 04 24 b7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eb7
c000c61b:	e8 44 04 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c620:	83 c4 10             	add    esp,0x10
c000c623:	a1 2c 58 02 c0       	mov    eax,ds:0xc002582c
c000c628:	85 c0                	test   eax,eax
c000c62a:	7e 3d                	jle    c000c669 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c62c:	89 fe                	mov    esi,edi
c000c62e:	31 db                	xor    ebx,ebx
c000c630:	83 ec 0c             	sub    esp,0xc
c000c633:	55                   	push   ebp
c000c634:	e8 7f f1 ff ff       	call   c000b7b8 <Virt::swapIDToSector(unsigned long)>
c000c639:	89 34 24             	mov    DWORD PTR [esp],esi
c000c63c:	01 d8                	add    eax,ebx
c000c63e:	6a 01                	push   0x1
c000c640:	31 d2                	xor    edx,edx
c000c642:	43                   	inc    ebx
c000c643:	52                   	push   edx
c000c644:	81 c6 00 02 00 00    	add    esi,0x200
c000c64a:	50                   	push   eax
c000c64b:	0f be 05 38 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025838
c000c652:	ff 34 85 dc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9724]
c000c659:	e8 22 3b 00 00       	call   c0010180 <LogicalDisk::read(unsigned long long, int, void*)>
c000c65e:	83 c4 20             	add    esp,0x20
c000c661:	39 1d 2c 58 02 c0    	cmp    DWORD PTR ds:0xc002582c,ebx
c000c667:	7f c7                	jg     c000c630 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c669:	a1 48 65 02 c0       	mov    eax,ds:0xc0026548
c000c66e:	48                   	dec    eax
c000c66f:	52                   	push   edx
c000c670:	a3 48 65 02 c0       	mov    ds:0xc0026548,eax
c000c675:	50                   	push   eax
c000c676:	57                   	push   edi
c000c677:	68 c7 2e 02 c0       	push   0xc0022ec7
c000c67c:	e8 e3 03 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c681:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c684:	e8 11 f1 ff ff       	call   c000b79a <Virt::freeSwapfilePage(unsigned long)>
c000c689:	c7 04 24 dc 2e 02 c0 	mov    DWORD PTR [esp],0xc0022edc
c000c690:	e8 cf 03 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c695:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	48                   	dec    eax
c000c69e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000c6a3:	85 c0                	test   eax,eax
c000c6a5:	75 01                	jne    c000c6a8 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c6a7:	fb                   	sti    
c000c6a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6ac:	25 ff 0f 00 00       	and    eax,0xfff
c000c6b1:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6b6:	77 20                	ja     c000c6d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c6b8:	0f 20 d8             	mov    eax,cr3
c000c6bb:	0f 22 d8             	mov    cr3,eax
c000c6be:	83 ec 0c             	sub    esp,0xc
c000c6c1:	68 02 2f 02 c0       	push   0xc0022f02
c000c6c6:	e8 99 03 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	b0 01                	mov    al,0x1
c000c6d0:	83 c4 1c             	add    esp,0x1c
c000c6d3:	5b                   	pop    ebx
c000c6d4:	5e                   	pop    esi
c000c6d5:	5f                   	pop    edi
c000c6d6:	5d                   	pop    ebp
c000c6d7:	c3                   	ret    
c000c6d8:	83 ec 0c             	sub    esp,0xc
c000c6db:	68 f2 2e 02 c0       	push   0xc0022ef2
c000c6e0:	e8 7f 03 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	eb ce                	jmp    c000c6b8 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c6ea <VAS::scanForEviction()>:
c000c6ea:	55                   	push   ebp
c000c6eb:	31 ed                	xor    ebp,ebp
c000c6ed:	57                   	push   edi
c000c6ee:	56                   	push   esi
c000c6ef:	53                   	push   ebx
c000c6f0:	83 ec 0c             	sub    esp,0xc
c000c6f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6f7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c6fa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c700:	75 0e                	jne    c000c710 <VAS::scanForEviction()+0x26>
c000c702:	89 da                	mov    edx,ebx
c000c704:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c707:	c1 ea 16             	shr    edx,0x16
c000c70a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c70e:	74 4e                	je     c000c75e <VAS::scanForEviction()+0x74>
c000c710:	53                   	push   ebx
c000c711:	56                   	push   esi
c000c712:	e8 83 f2 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000c717:	5f                   	pop    edi
c000c718:	8b 38                	mov    edi,DWORD PTR [eax]
c000c71a:	5a                   	pop    edx
c000c71b:	89 fa                	mov    edx,edi
c000c71d:	81 e2 01 08 00 00    	and    edx,0x801
c000c723:	81 fa 01 08 00 00    	cmp    edx,0x801
c000c729:	74 3e                	je     c000c769 <VAS::scanForEviction()+0x7f>
c000c72b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c731:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c737:	76 2b                	jbe    c000c764 <VAS::scanForEviction()+0x7a>
c000c739:	45                   	inc    ebp
c000c73a:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c741:	83 fd 04             	cmp    ebp,0x4
c000c744:	74 35                	je     c000c77b <VAS::scanForEviction()+0x91>
c000c746:	31 db                	xor    ebx,ebx
c000c748:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c74e:	75 c0                	jne    c000c710 <VAS::scanForEviction()+0x26>
c000c750:	89 da                	mov    edx,ebx
c000c752:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c755:	c1 ea 16             	shr    edx,0x16
c000c758:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c75c:	75 b2                	jne    c000c710 <VAS::scanForEviction()+0x26>
c000c75e:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c764:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c767:	eb 91                	jmp    c000c6fa <VAS::scanForEviction()+0x10>
c000c769:	f7 c7 20 00 00 00    	test   edi,0x20
c000c76f:	74 22                	je     c000c793 <VAS::scanForEviction()+0xa9>
c000c771:	83 e7 df             	and    edi,0xffffffdf
c000c774:	89 38                	mov    DWORD PTR [eax],edi
c000c776:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c779:	eb b0                	jmp    c000c72b <VAS::scanForEviction()+0x41>
c000c77b:	83 ec 0c             	sub    esp,0xc
c000c77e:	68 20 2d 02 c0       	push   0xc0022d20
c000c783:	e8 9d 7b 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000c788:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c78b:	83 c4 10             	add    esp,0x10
c000c78e:	e9 67 ff ff ff       	jmp    c000c6fa <VAS::scanForEviction()+0x10>
c000c793:	83 ec 08             	sub    esp,0x8
c000c796:	53                   	push   ebx
c000c797:	68 10 2f 02 c0       	push   0xc0022f10
c000c79c:	e8 c3 02 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c7a1:	58                   	pop    eax
c000c7a2:	5a                   	pop    edx
c000c7a3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7a6:	56                   	push   esi
c000c7a7:	e8 ae fc ff ff       	call   c000c45a <VAS::evict(unsigned long)>
c000c7ac:	59                   	pop    ecx
c000c7ad:	5b                   	pop    ebx
c000c7ae:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7b1:	68 24 2f 02 c0       	push   0xc0022f24
c000c7b6:	e8 a9 02 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c7bb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7c2:	89 f8                	mov    eax,edi
c000c7c4:	83 c4 1c             	add    esp,0x1c
c000c7c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7cc:	5b                   	pop    ebx
c000c7cd:	5e                   	pop    esi
c000c7ce:	5f                   	pop    edi
c000c7cf:	5d                   	pop    ebp
c000c7d0:	c3                   	ret    

c000c7d1 <mapVASFirstTime>:
c000c7d1:	55                   	push   ebp
c000c7d2:	57                   	push   edi
c000c7d3:	56                   	push   esi
c000c7d4:	53                   	push   ebx
c000c7d5:	83 ec 0c             	sub    esp,0xc
c000c7d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7e0:	4a                   	dec    edx
c000c7e1:	0f 84 fe 00 00 00    	je     c000c8e5 <mapVASFirstTime+0x114>
c000c7e7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7ea:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7ed:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7f2:	c1 e5 15             	shl    ebp,0x15
c000c7f5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c7fa:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c800:	29 eb                	sub    ebx,ebp
c000c802:	29 ef                	sub    edi,ebp
c000c804:	83 ec 08             	sub    esp,0x8
c000c807:	53                   	push   ebx
c000c808:	68 50 2f 02 c0       	push   0xc0022f50
c000c80d:	e8 52 02 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c812:	e8 b4 d5 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c817:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c81e:	6a 01                	push   0x1
c000c820:	53                   	push   ebx
c000c821:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c827:	50                   	push   eax
c000c828:	56                   	push   esi
c000c829:	e8 f8 f7 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c82e:	83 c4 20             	add    esp,0x20
c000c831:	39 fb                	cmp    ebx,edi
c000c833:	75 cf                	jne    c000c804 <mapVASFirstTime+0x33>
c000c835:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c83a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c83f:	29 eb                	sub    ebx,ebp
c000c841:	29 ef                	sub    edi,ebp
c000c843:	83 ec 08             	sub    esp,0x8
c000c846:	53                   	push   ebx
c000c847:	68 6c 2f 02 c0       	push   0xc0022f6c
c000c84c:	e8 13 02 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c851:	58                   	pop    eax
c000c852:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c856:	5a                   	pop    edx
c000c857:	19 c0                	sbb    eax,eax
c000c859:	83 e0 04             	and    eax,0x4
c000c85c:	05 03 04 00 00       	add    eax,0x403
c000c861:	50                   	push   eax
c000c862:	68 91 2e 02 c0       	push   0xc0022e91
c000c867:	e8 f8 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c86c:	e8 5a d5 ff ff       	call   c0009dcb <Phys::allocatePage()>
c000c871:	59                   	pop    ecx
c000c872:	89 c5                	mov    ebp,eax
c000c874:	58                   	pop    eax
c000c875:	55                   	push   ebp
c000c876:	68 80 2f 02 c0       	push   0xc0022f80
c000c87b:	e8 e4 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c880:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c884:	19 d2                	sbb    edx,edx
c000c886:	83 e2 04             	and    edx,0x4
c000c889:	81 c2 03 04 00 00    	add    edx,0x403
c000c88f:	89 14 24             	mov    DWORD PTR [esp],edx
c000c892:	6a 01                	push   0x1
c000c894:	53                   	push   ebx
c000c895:	55                   	push   ebp
c000c896:	56                   	push   esi
c000c897:	e8 8a f7 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c89c:	83 c4 18             	add    esp,0x18
c000c89f:	53                   	push   ebx
c000c8a0:	56                   	push   esi
c000c8a1:	e8 f4 f0 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c000c8a6:	5a                   	pop    edx
c000c8a7:	59                   	pop    ecx
c000c8a8:	ff 30                	push   DWORD PTR [eax]
c000c8aa:	68 9c 2f 02 c0       	push   0xc0022f9c
c000c8af:	e8 b0 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c8b4:	0f 20 d8             	mov    eax,cr3
c000c8b7:	83 c4 0c             	add    esp,0xc
c000c8ba:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8c0:	56                   	push   esi
c000c8c1:	50                   	push   eax
c000c8c2:	68 9f 2e 02 c0       	push   0xc0022e9f
c000c8c7:	e8 98 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	39 df                	cmp    edi,ebx
c000c8d1:	0f 85 6c ff ff ff    	jne    c000c843 <mapVASFirstTime+0x72>
c000c8d7:	0f 20 d8             	mov    eax,cr3
c000c8da:	0f 22 d8             	mov    cr3,eax
c000c8dd:	83 c4 0c             	add    esp,0xc
c000c8e0:	5b                   	pop    ebx
c000c8e1:	5e                   	pop    esi
c000c8e2:	5f                   	pop    edi
c000c8e3:	5d                   	pop    ebp
c000c8e4:	c3                   	ret    
c000c8e5:	83 ec 0c             	sub    esp,0xc
c000c8e8:	68 37 2f 02 c0       	push   0xc0022f37
c000c8ed:	e8 72 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	83 c4 0c             	add    esp,0xc
c000c8f8:	5b                   	pop    ebx
c000c8f9:	5e                   	pop    esi
c000c8fa:	5f                   	pop    edi
c000c8fb:	5d                   	pop    ebp
c000c8fc:	c3                   	ret    

c000c8fd <__cxa_atexit>:
c000c8fd:	31 c0                	xor    eax,eax
c000c8ff:	c3                   	ret    

c000c900 <__cxa_finalize>:
c000c900:	c3                   	ret    

c000c901 <__stack_chk_fail>:
c000c901:	55                   	push   ebp
c000c902:	89 e5                	mov    ebp,esp
c000c904:	83 ec 14             	sub    esp,0x14
c000c907:	68 a7 2f 02 c0       	push   0xc0022fa7
c000c90c:	e8 53 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c911:	58                   	pop    eax
c000c912:	5a                   	pop    edx
c000c913:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c916:	68 f7 2f 02 c0       	push   0xc0022ff7
c000c91b:	e8 44 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c920:	59                   	pop    ecx
c000c921:	58                   	pop    eax
c000c922:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c925:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c928:	68 f7 2f 02 c0       	push   0xc0022ff7
c000c92d:	e8 32 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c932:	5a                   	pop    edx
c000c933:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c936:	59                   	pop    ecx
c000c937:	8b 00                	mov    eax,DWORD PTR [eax]
c000c939:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c93c:	68 f7 2f 02 c0       	push   0xc0022ff7
c000c941:	e8 1e 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c946:	5a                   	pop    edx
c000c947:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c94a:	59                   	pop    ecx
c000c94b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c94d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c94f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c952:	68 f7 2f 02 c0       	push   0xc0022ff7
c000c957:	e8 08 01 00 00       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000c95c:	c7 04 24 ff 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fff
c000c963:	e8 bd 79 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000c968:	83 c4 10             	add    esp,0x10
c000c96b:	c9                   	leave  
c000c96c:	c3                   	ret    

c000c96d <__cxa_pure_virtual>:
c000c96d:	83 ec 18             	sub    esp,0x18
c000c970:	68 17 30 02 c0       	push   0xc0023017
c000c975:	e8 ab 79 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000c97a:	83 c4 1c             	add    esp,0x1c
c000c97d:	c3                   	ret    

c000c97e <operator new[](unsigned long)>:
c000c97e:	e9 40 d0 ff ff       	jmp    c00099c3 <malloc>

c000c983 <operator delete(void*, unsigned long)>:
c000c983:	e9 5b d0 ff ff       	jmp    c00099e3 <rfree>

c000c988 <operator delete[](void*)>:
c000c988:	e9 56 d0 ff ff       	jmp    c00099e3 <rfree>

c000c98d <operator delete[](void*, unsigned long)>:
c000c98d:	e9 51 d0 ff ff       	jmp    c00099e3 <rfree>

c000c992 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c992:	55                   	push   ebp
c000c993:	b9 11 00 00 00       	mov    ecx,0x11
c000c998:	57                   	push   edi
c000c999:	56                   	push   esi
c000c99a:	be 0a 2a 02 c0       	mov    esi,0xc0022a0a
c000c99f:	53                   	push   ebx
c000c9a0:	83 ec 20             	sub    esp,0x20
c000c9a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9a7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9ab:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9af:	fc                   	cld    
c000c9b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9b2:	89 ee                	mov    esi,ebp
c000c9b4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9b8:	eb 02                	jmp    c000c9bc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9ba:	89 c6                	mov    esi,eax
c000c9bc:	31 d2                	xor    edx,edx
c000c9be:	41                   	inc    ecx
c000c9bf:	89 f0                	mov    eax,esi
c000c9c1:	f7 f3                	div    ebx
c000c9c3:	39 de                	cmp    esi,ebx
c000c9c5:	73 f3                	jae    c000c9ba <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9c7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9ca:	eb 02                	jmp    c000c9ce <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9cc:	89 c5                	mov    ebp,eax
c000c9ce:	31 d2                	xor    edx,edx
c000c9d0:	49                   	dec    ecx
c000c9d1:	89 e8                	mov    eax,ebp
c000c9d3:	f7 f3                	div    ebx
c000c9d5:	39 dd                	cmp    ebp,ebx
c000c9d7:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9db:	88 11                	mov    BYTE PTR [ecx],dl
c000c9dd:	73 ed                	jae    c000c9cc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9e3:	83 c4 20             	add    esp,0x20
c000c9e6:	5b                   	pop    ebx
c000c9e7:	5e                   	pop    esi
c000c9e8:	5f                   	pop    edi
c000c9e9:	5d                   	pop    ebp
c000c9ea:	c3                   	ret    

c000c9eb <Dbg::logc(char)>:
c000c9eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9ef:	f6 05 00 64 02 c0 10 	test   BYTE PTR ds:0xc0026400,0x10
c000c9f6:	75 12                	jne    c000ca0a <Dbg::logc(char)+0x1f>
c000c9f8:	ba fd 03 00 00       	mov    edx,0x3fd
c000c9fd:	ec                   	in     al,dx
c000c9fe:	a8 20                	test   al,0x20
c000ca00:	74 fb                	je     c000c9fd <Dbg::logc(char)+0x12>
c000ca02:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca07:	88 c8                	mov    al,cl
c000ca09:	ee                   	out    dx,al
c000ca0a:	c3                   	ret    

c000ca0b <Dbg::logs(char*)>:
c000ca0b:	53                   	push   ebx
c000ca0c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca10:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca13:	84 c0                	test   al,al
c000ca15:	74 0f                	je     c000ca26 <Dbg::logs(char*)+0x1b>
c000ca17:	50                   	push   eax
c000ca18:	43                   	inc    ebx
c000ca19:	e8 cd ff ff ff       	call   c000c9eb <Dbg::logc(char)>
c000ca1e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca21:	5a                   	pop    edx
c000ca22:	84 c0                	test   al,al
c000ca24:	75 f1                	jne    c000ca17 <Dbg::logs(char*)+0xc>
c000ca26:	5b                   	pop    ebx
c000ca27:	c3                   	ret    

c000ca28 <Dbg::logWriteInt(unsigned int)>:
c000ca28:	83 ec 10             	sub    esp,0x10
c000ca2b:	6a 0a                	push   0xa
c000ca2d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca31:	50                   	push   eax
c000ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca36:	e8 57 ff ff ff       	call   c000c992 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca3b:	50                   	push   eax
c000ca3c:	e8 ca ff ff ff       	call   c000ca0b <Dbg::logs(char*)>
c000ca41:	83 c4 20             	add    esp,0x20
c000ca44:	c3                   	ret    

c000ca45 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca45:	83 ec 10             	sub    esp,0x10
c000ca48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca50:	50                   	push   eax
c000ca51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca55:	e8 38 ff ff ff       	call   c000c992 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca5a:	50                   	push   eax
c000ca5b:	e8 ab ff ff ff       	call   c000ca0b <Dbg::logs(char*)>
c000ca60:	83 c4 20             	add    esp,0x20
c000ca63:	c3                   	ret    

c000ca64 <Dbg::kprintf(char const*, ...)>:
c000ca64:	55                   	push   ebp
c000ca65:	57                   	push   edi
c000ca66:	56                   	push   esi
c000ca67:	53                   	push   ebx
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca6f:	f6 05 00 64 02 c0 10 	test   BYTE PTR ds:0xc0026400,0x10
c000ca76:	74 08                	je     c000ca80 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca78:	83 c4 0c             	add    esp,0xc
c000ca7b:	5b                   	pop    ebx
c000ca7c:	5e                   	pop    esi
c000ca7d:	5f                   	pop    edi
c000ca7e:	5d                   	pop    ebp
c000ca7f:	c3                   	ret    
c000ca80:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca84:	31 db                	xor    ebx,ebx
c000ca86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca8a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca8d:	84 c0                	test   al,al
c000ca8f:	74 e7                	je     c000ca78 <Dbg::kprintf(char const*, ...)+0x14>
c000ca91:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca94:	3c 25                	cmp    al,0x25
c000ca96:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca99:	75 44                	jne    c000cadf <Dbg::kprintf(char const*, ...)+0x7b>
c000ca9b:	83 c3 02             	add    ebx,0x2
c000ca9e:	8a 07                	mov    al,BYTE PTR [edi]
c000caa0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000caa3:	83 e8 25             	sub    eax,0x25
c000caa6:	3c 53                	cmp    al,0x53
c000caa8:	0f 87 c9 00 00 00    	ja     c000cb77 <Dbg::kprintf(char const*, ...)+0x113>
c000caae:	0f b6 c0             	movzx  eax,al
c000cab1:	ff 24 85 2c 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcfd4]
c000cab8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cabc:	89 c8                	mov    eax,ecx
c000cabe:	83 c1 04             	add    ecx,0x4
c000cac1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cac5:	ff 30                	push   DWORD PTR [eax]
c000cac7:	e8 5c ff ff ff       	call   c000ca28 <Dbg::logWriteInt(unsigned int)>
c000cacc:	5f                   	pop    edi
c000cacd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cad1:	84 c0                	test   al,al
c000cad3:	74 a3                	je     c000ca78 <Dbg::kprintf(char const*, ...)+0x14>
c000cad5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cad8:	3c 25                	cmp    al,0x25
c000cada:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cadd:	74 bc                	je     c000ca9b <Dbg::kprintf(char const*, ...)+0x37>
c000cadf:	50                   	push   eax
c000cae0:	89 eb                	mov    ebx,ebp
c000cae2:	e8 04 ff ff ff       	call   c000c9eb <Dbg::logc(char)>
c000cae7:	89 fd                	mov    ebp,edi
c000cae9:	58                   	pop    eax
c000caea:	eb e1                	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000caec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caf0:	89 c8                	mov    eax,ecx
c000caf2:	83 c1 04             	add    ecx,0x4
c000caf5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000caf9:	ff 30                	push   DWORD PTR [eax]
c000cafb:	e8 0b ff ff ff       	call   c000ca0b <Dbg::logs(char*)>
c000cb00:	58                   	pop    eax
c000cb01:	eb ca                	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb07:	89 d0                	mov    eax,edx
c000cb09:	83 c2 04             	add    edx,0x4
c000cb0c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb10:	ff 30                	push   DWORD PTR [eax]
c000cb12:	e8 11 ff ff ff       	call   c000ca28 <Dbg::logWriteInt(unsigned int)>
c000cb17:	58                   	pop    eax
c000cb18:	eb b3                	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb1e:	89 d0                	mov    eax,edx
c000cb20:	83 c2 04             	add    edx,0x4
c000cb23:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb2a:	50                   	push   eax
c000cb2b:	e8 bb fe ff ff       	call   c000c9eb <Dbg::logc(char)>
c000cb30:	58                   	pop    eax
c000cb31:	eb 9a                	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb37:	89 c8                	mov    eax,ecx
c000cb39:	83 c1 04             	add    ecx,0x4
c000cb3c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb40:	6a 10                	push   0x10
c000cb42:	ff 30                	push   DWORD PTR [eax]
c000cb44:	e8 fc fe ff ff       	call   c000ca45 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb49:	59                   	pop    ecx
c000cb4a:	5f                   	pop    edi
c000cb4b:	eb 80                	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb51:	89 d0                	mov    eax,edx
c000cb53:	83 c2 08             	add    edx,0x8
c000cb56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb5a:	6a 10                	push   0x10
c000cb5c:	ff 30                	push   DWORD PTR [eax]
c000cb5e:	e8 e2 fe ff ff       	call   c000ca45 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb63:	58                   	pop    eax
c000cb64:	5a                   	pop    edx
c000cb65:	e9 63 ff ff ff       	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb6a:	6a 25                	push   0x25
c000cb6c:	e8 7a fe ff ff       	call   c000c9eb <Dbg::logc(char)>
c000cb71:	58                   	pop    eax
c000cb72:	e9 56 ff ff ff       	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>
c000cb77:	6a 25                	push   0x25
c000cb79:	e8 6d fe ff ff       	call   c000c9eb <Dbg::logc(char)>
c000cb7e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb81:	50                   	push   eax
c000cb82:	e8 64 fe ff ff       	call   c000c9eb <Dbg::logc(char)>
c000cb87:	5a                   	pop    edx
c000cb88:	59                   	pop    ecx
c000cb89:	e9 3f ff ff ff       	jmp    c000cacd <Dbg::kprintf(char const*, ...)+0x69>

c000cb8e <File::read(unsigned long long, void*, int*)>:
c000cb8e:	53                   	push   ebx
c000cb8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb97:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb9e:	3c 19                	cmp    al,0x19
c000cba0:	77 35                	ja     c000cbd7 <File::read(unsigned long long, void*, int*)+0x49>
c000cba2:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 2a                	je     c000cbd7 <File::read(unsigned long long, void*, int*)+0x49>
c000cbad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbb3:	85 c0                	test   eax,eax
c000cbb5:	74 20                	je     c000cbd7 <File::read(unsigned long long, void*, int*)+0x49>
c000cbb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbbb:	74 21                	je     c000cbde <File::read(unsigned long long, void*, int*)+0x50>
c000cbbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbbf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbc3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbd1:	5b                   	pop    ebx
c000cbd2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbd5:	ff e0                	jmp    eax
c000cbd7:	b8 0b 00 00 00       	mov    eax,0xb
c000cbdc:	eb 05                	jmp    c000cbe3 <File::read(unsigned long long, void*, int*)+0x55>
c000cbde:	b8 05 00 00 00       	mov    eax,0x5
c000cbe3:	5b                   	pop    ebx
c000cbe4:	c3                   	ret    
c000cbe5:	90                   	nop

c000cbe6 <File::write(unsigned long long, void*, int*)>:
c000cbe6:	53                   	push   ebx
c000cbe7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbeb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbf6:	3c 19                	cmp    al,0x19
c000cbf8:	77 35                	ja     c000cc2f <File::write(unsigned long long, void*, int*)+0x49>
c000cbfa:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c000cc01:	85 c0                	test   eax,eax
c000cc03:	74 2a                	je     c000cc2f <File::write(unsigned long long, void*, int*)+0x49>
c000cc05:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc0b:	85 c0                	test   eax,eax
c000cc0d:	74 20                	je     c000cc2f <File::write(unsigned long long, void*, int*)+0x49>
c000cc0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc13:	74 21                	je     c000cc36 <File::write(unsigned long long, void*, int*)+0x50>
c000cc15:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc1b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc29:	5b                   	pop    ebx
c000cc2a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc2d:	ff e0                	jmp    eax
c000cc2f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc34:	eb 05                	jmp    c000cc3b <File::write(unsigned long long, void*, int*)+0x55>
c000cc36:	b8 05 00 00 00       	mov    eax,0x5
c000cc3b:	5b                   	pop    ebx
c000cc3c:	c3                   	ret    
c000cc3d:	90                   	nop

c000cc3e <Directory::read(unsigned long long, void*, int*)>:
c000cc3e:	53                   	push   ebx
c000cc3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc43:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc47:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc4e:	3c 19                	cmp    al,0x19
c000cc50:	77 35                	ja     c000cc87 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc52:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c000cc59:	85 c0                	test   eax,eax
c000cc5b:	74 2a                	je     c000cc87 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc5d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc63:	85 c0                	test   eax,eax
c000cc65:	74 20                	je     c000cc87 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc67:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc6b:	74 21                	je     c000cc8e <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc6f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc73:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc81:	5b                   	pop    ebx
c000cc82:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc85:	ff e0                	jmp    eax
c000cc87:	b8 0b 00 00 00       	mov    eax,0xb
c000cc8c:	eb 05                	jmp    c000cc93 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc8e:	b8 05 00 00 00       	mov    eax,0x5
c000cc93:	5b                   	pop    ebx
c000cc94:	c3                   	ret    
c000cc95:	90                   	nop

c000cc96 <Directory::write(unsigned long long, void*, int*)>:
c000cc96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc9a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cca1:	b8 0b 00 00 00       	mov    eax,0xb
c000cca6:	80 fa 19             	cmp    dl,0x19
c000cca9:	77 18                	ja     c000ccc3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccab:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000ccb2:	85 d2                	test   edx,edx
c000ccb4:	74 0d                	je     c000ccc3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccb6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ccbd:	19 c0                	sbb    eax,eax
c000ccbf:	83 e0 0a             	and    eax,0xa
c000ccc2:	40                   	inc    eax
c000ccc3:	c3                   	ret    

c000ccc4 <File::isAtty()>:
c000ccc4:	31 c0                	xor    eax,eax
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <Directory::isAtty()>:
c000ccc8:	31 c0                	xor    eax,eax
c000ccca:	c3                   	ret    
c000cccb:	90                   	nop

c000cccc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cccc:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd1:	c3                   	ret    

c000ccd2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ccd2:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd7:	c3                   	ret    

c000ccd8 <Filesystem::allocateSwapfile(char const*, int)>:
c000ccd8:	31 c0                	xor    eax,eax
c000ccda:	31 d2                	xor    edx,edx
c000ccdc:	c3                   	ret    
c000ccdd:	90                   	nop

c000ccde <File::~File()>:
c000ccde:	83 ec 0c             	sub    esp,0xc
c000cce1:	ba ec 31 02 c0       	mov    edx,0xc00231ec
c000cce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccea:	89 10                	mov    DWORD PTR [eax],edx
c000ccec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	50                   	push   eax
c000ccf4:	e8 2f e7 ff ff       	call   c000b428 <UnixFile::~UnixFile()>
c000ccf9:	83 c4 10             	add    esp,0x10
c000ccfc:	90                   	nop
c000ccfd:	83 c4 0c             	add    esp,0xc
c000cd00:	c3                   	ret    
c000cd01:	90                   	nop

c000cd02 <File::~File()>:
c000cd02:	83 ec 0c             	sub    esp,0xc
c000cd05:	83 ec 0c             	sub    esp,0xc
c000cd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0c:	e8 cd ff ff ff       	call   c000ccde <File::~File()>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	83 ec 08             	sub    esp,0x8
c000cd17:	68 14 01 00 00       	push   0x114
c000cd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd20:	e8 5e fc ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000cd25:	83 c4 10             	add    esp,0x10
c000cd28:	83 c4 0c             	add    esp,0xc
c000cd2b:	c3                   	ret    

c000cd2c <Directory::~Directory()>:
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	ba 08 32 02 c0       	mov    edx,0xc0023208
c000cd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd38:	89 10                	mov    DWORD PTR [eax],edx
c000cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3e:	83 ec 0c             	sub    esp,0xc
c000cd41:	50                   	push   eax
c000cd42:	e8 e1 e6 ff ff       	call   c000b428 <UnixFile::~UnixFile()>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	90                   	nop
c000cd4b:	83 c4 0c             	add    esp,0xc
c000cd4e:	c3                   	ret    
c000cd4f:	90                   	nop

c000cd50 <Directory::~Directory()>:
c000cd50:	83 ec 0c             	sub    esp,0xc
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5a:	e8 cd ff ff ff       	call   c000cd2c <Directory::~Directory()>
c000cd5f:	83 c4 10             	add    esp,0x10
c000cd62:	83 ec 08             	sub    esp,0x8
c000cd65:	68 14 01 00 00       	push   0x114
c000cd6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6e:	e8 10 fc ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000cd73:	83 c4 10             	add    esp,0x10
c000cd76:	83 c4 0c             	add    esp,0xc
c000cd79:	c3                   	ret    

c000cd7a <Filesystem::Filesystem()>:
c000cd7a:	ba 84 31 02 c0       	mov    edx,0xc0023184
c000cd7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd83:	89 10                	mov    DWORD PTR [eax],edx
c000cd85:	8b 15 54 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026554
c000cd8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd96:	a3 54 65 02 c0       	mov    ds:0xc0026554,eax
c000cd9b:	90                   	nop
c000cd9c:	c3                   	ret    
c000cd9d:	90                   	nop

c000cd9e <Filesystem::~Filesystem()>:
c000cd9e:	ba 84 31 02 c0       	mov    edx,0xc0023184
c000cda3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cda7:	89 10                	mov    DWORD PTR [eax],edx
c000cda9:	90                   	nop
c000cdaa:	c3                   	ret    
c000cdab:	90                   	nop

c000cdac <Filesystem::~Filesystem()>:
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdb3:	e8 e6 ff ff ff       	call   c000cd9e <Filesystem::~Filesystem()>
c000cdb8:	83 c4 04             	add    esp,0x4
c000cdbb:	83 ec 08             	sub    esp,0x8
c000cdbe:	6a 08                	push   0x8
c000cdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc4:	e8 ba fb ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000cdc9:	83 c4 10             	add    esp,0x10
c000cdcc:	83 c4 0c             	add    esp,0xc
c000cdcf:	c3                   	ret    

c000cdd0 <Fs::getcwd(Process*, char*, int)>:
c000cdd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd4:	31 c0                	xor    eax,eax
c000cdd6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cdd9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cddd:	7d 15                	jge    c000cdf4 <Fs::getcwd(Process*, char*, int)+0x24>
c000cddf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cde3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdea:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cded:	84 c9                	test   cl,cl
c000cdef:	74 06                	je     c000cdf7 <Fs::getcwd(Process*, char*, int)+0x27>
c000cdf1:	40                   	inc    eax
c000cdf2:	eb e2                	jmp    c000cdd6 <Fs::getcwd(Process*, char*, int)+0x6>
c000cdf4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdf7:	31 c0                	xor    eax,eax
c000cdf9:	c3                   	ret    

c000cdfa <Fs::initVFS()>:
c000cdfa:	83 ec 18             	sub    esp,0x18
c000cdfd:	6a 08                	push   0x8
c000cdff:	e8 bf cb ff ff       	call   c00099c3 <malloc>
c000ce04:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce07:	e8 70 e3 00 00       	call   c001b17c <FAT::FAT()>
c000ce0c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce13:	e8 ab cb ff ff       	call   c00099c3 <malloc>
c000ce18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce1b:	e8 ba f5 00 00       	call   c001c3da <ISO9660::ISO9660()>
c000ce20:	83 c4 1c             	add    esp,0x1c
c000ce23:	c3                   	ret    

c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce24:	55                   	push   ebp
c000ce25:	57                   	push   edi
c000ce26:	56                   	push   esi
c000ce27:	53                   	push   ebx
c000ce28:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce2e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce35:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce3c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce43:	68 00 04 00 00       	push   0x400
c000ce48:	6a 00                	push   0x0
c000ce4a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce4e:	56                   	push   esi
c000ce4f:	e8 30 38 ff ff       	call   c0000684 <memset>
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce5b:	75 0b                	jne    c000ce68 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce5d:	50                   	push   eax
c000ce5e:	50                   	push   eax
c000ce5f:	57                   	push   edi
c000ce60:	56                   	push   esi
c000ce61:	e8 da 38 ff ff       	call   c0000740 <strcpy>
c000ce66:	eb 41                	jmp    c000cea9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce68:	8a 07                	mov    al,BYTE PTR [edi]
c000ce6a:	3c 5c                	cmp    al,0x5c
c000ce6c:	74 04                	je     c000ce72 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce6e:	3c 2f                	cmp    al,0x2f
c000ce70:	75 18                	jne    c000ce8a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce72:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce75:	3c 60                	cmp    al,0x60
c000ce77:	7e 03                	jle    c000ce7c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce79:	83 e8 20             	sub    eax,0x20
c000ce7c:	88 04 24             	mov    BYTE PTR [esp],al
c000ce7f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce86:	50                   	push   eax
c000ce87:	50                   	push   eax
c000ce88:	eb 18                	jmp    c000cea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce8a:	50                   	push   eax
c000ce8b:	50                   	push   eax
c000ce8c:	55                   	push   ebp
c000ce8d:	56                   	push   esi
c000ce8e:	e8 ad 38 ff ff       	call   c0000740 <strcpy>
c000ce93:	5a                   	pop    edx
c000ce94:	59                   	pop    ecx
c000ce95:	68 1a 48 02 c0       	push   0xc002481a
c000ce9a:	56                   	push   esi
c000ce9b:	e8 e0 39 ff ff       	call   c0000880 <strcat>
c000cea0:	5d                   	pop    ebp
c000cea1:	58                   	pop    eax
c000cea2:	57                   	push   edi
c000cea3:	56                   	push   esi
c000cea4:	e8 d7 39 ff ff       	call   c0000880 <strcat>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ceaf:	3c 60                	cmp    al,0x60
c000ceb1:	7e 03                	jle    c000ceb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ceb3:	83 e8 20             	sub    eax,0x20
c000ceb6:	88 04 24             	mov    BYTE PTR [esp],al
c000ceb9:	88 03                	mov    BYTE PTR [ebx],al
c000cebb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cec2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cec8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cecc:	bf 03 00 00 00       	mov    edi,0x3
c000ced1:	b8 03 00 00 00       	mov    eax,0x3
c000ced6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ced9:	84 d2                	test   dl,dl
c000cedb:	0f 84 91 00 00 00    	je     c000cf72 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cee1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cee4:	80 fa 5c             	cmp    dl,0x5c
c000cee7:	74 05                	je     c000ceee <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cee9:	80 fa 2f             	cmp    dl,0x2f
c000ceec:	75 12                	jne    c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceee:	89 c5                	mov    ebp,eax
c000cef0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cef5:	74 09                	je     c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cef7:	40                   	inc    eax
c000cef8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cefc:	89 cf                	mov    edi,ecx
c000cefe:	eb d6                	jmp    c000ced6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf00:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf05:	75 5b                	jne    c000cf62 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf07:	80 fa 2e             	cmp    dl,0x2e
c000cf0a:	75 56                	jne    c000cf62 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf0c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf10:	74 19                	je     c000cf2b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf12:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf17:	74 53                	je     c000cf6c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf19:	89 f9                	mov    ecx,edi
c000cf1b:	41                   	inc    ecx
c000cf1c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf1f:	80 fa 2f             	cmp    dl,0x2f
c000cf22:	74 f7                	je     c000cf1b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf24:	80 fa 5c             	cmp    dl,0x5c
c000cf27:	74 f2                	je     c000cf1b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf29:	eb d1                	jmp    c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf2b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf30:	74 3a                	je     c000cf6c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf32:	83 f8 03             	cmp    eax,0x3
c000cf35:	74 c5                	je     c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf37:	41                   	inc    ecx
c000cf38:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf3b:	80 fa 2f             	cmp    dl,0x2f
c000cf3e:	74 f7                	je     c000cf37 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf40:	80 fa 5c             	cmp    dl,0x5c
c000cf43:	74 f2                	je     c000cf37 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf45:	48                   	dec    eax
c000cf46:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf4a:	75 06                	jne    c000cf52 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf4c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf50:	eb f3                	jmp    c000cf45 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf52:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf56:	74 07                	je     c000cf5f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf58:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf5c:	48                   	dec    eax
c000cf5d:	eb f3                	jmp    c000cf52 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf5f:	40                   	inc    eax
c000cf60:	eb 9a                	jmp    c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf62:	80 fa 2f             	cmp    dl,0x2f
c000cf65:	74 95                	je     c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf67:	80 fa 5c             	cmp    dl,0x5c
c000cf6a:	74 90                	je     c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf6f:	40                   	inc    eax
c000cf70:	eb 8a                	jmp    c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf72:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	53                   	push   ebx
c000cf7a:	e8 21 37 ff ff       	call   c00006a0 <strlen>
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf87:	75 26                	jne    c000cfaf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf89:	83 ec 0c             	sub    esp,0xc
c000cf8c:	53                   	push   ebx
c000cf8d:	e8 0e 37 ff ff       	call   c00006a0 <strlen>
c000cf92:	83 c4 10             	add    esp,0x10
c000cf95:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf9a:	74 26                	je     c000cfc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cf9c:	83 ec 0c             	sub    esp,0xc
c000cf9f:	53                   	push   ebx
c000cfa0:	e8 fb 36 ff ff       	call   c00006a0 <strlen>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfad:	eb c7                	jmp    c000cf76 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfaf:	83 ec 0c             	sub    esp,0xc
c000cfb2:	53                   	push   ebx
c000cfb3:	e8 e8 36 ff ff       	call   c00006a0 <strlen>
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfc0:	74 c7                	je     c000cf89 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfc2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfc8:	5b                   	pop    ebx
c000cfc9:	5e                   	pop    esi
c000cfca:	5f                   	pop    edi
c000cfcb:	5d                   	pop    ebp
c000cfcc:	c3                   	ret    
c000cfcd:	90                   	nop

c000cfce <File::File(char const*, Process*)>:
c000cfce:	83 ec 0c             	sub    esp,0xc
c000cfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd5:	83 ec 08             	sub    esp,0x8
c000cfd8:	6a 00                	push   0x0
c000cfda:	50                   	push   eax
c000cfdb:	e8 66 e2 ff ff       	call   c000b246 <UnixFile::UnixFile(int)>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	ba ec 31 02 c0       	mov    edx,0xc00231ec
c000cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfec:	89 10                	mov    DWORD PTR [eax],edx
c000cfee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cff2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cffc:	83 c0 0d             	add    eax,0xd
c000cfff:	83 ec 04             	sub    esp,0x4
c000d002:	52                   	push   edx
c000d003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d007:	50                   	push   eax
c000d008:	e8 17 fe ff ff       	call   c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d014:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d017:	8d 50 bf             	lea    edx,[eax-0x41]
c000d01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d028:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d02c:	90                   	nop
c000d02d:	83 c4 0c             	add    esp,0xc
c000d030:	c3                   	ret    
c000d031:	90                   	nop

c000d032 <File::open(FileOpenMode)>:
c000d032:	53                   	push   ebx
c000d033:	b8 0b 00 00 00       	mov    eax,0xb
c000d038:	83 ec 08             	sub    esp,0x8
c000d03b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d03f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d046:	80 fa 19             	cmp    dl,0x19
c000d049:	77 40                	ja     c000d08b <File::open(FileOpenMode)+0x59>
c000d04b:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000d052:	85 d2                	test   edx,edx
c000d054:	74 35                	je     c000d08b <File::open(FileOpenMode)+0x59>
c000d056:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d05c:	85 d2                	test   edx,edx
c000d05e:	74 2b                	je     c000d08b <File::open(FileOpenMode)+0x59>
c000d060:	b8 06 00 00 00       	mov    eax,0x6
c000d065:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d069:	75 20                	jne    c000d08b <File::open(FileOpenMode)+0x59>
c000d06b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d06d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d077:	51                   	push   ecx
c000d078:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d07b:	51                   	push   ecx
c000d07c:	52                   	push   edx
c000d07d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d080:	83 c4 10             	add    esp,0x10
c000d083:	85 c0                	test   eax,eax
c000d085:	75 04                	jne    c000d08b <File::open(FileOpenMode)+0x59>
c000d087:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d08b:	83 c4 08             	add    esp,0x8
c000d08e:	5b                   	pop    ebx
c000d08f:	c3                   	ret    

c000d090 <File::close()>:
c000d090:	53                   	push   ebx
c000d091:	b8 0b 00 00 00       	mov    eax,0xb
c000d096:	83 ec 08             	sub    esp,0x8
c000d099:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d09d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0a4:	80 fa 19             	cmp    dl,0x19
c000d0a7:	77 41                	ja     c000d0ea <File::close()+0x5a>
c000d0a9:	8b 1c 95 e0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9620]
c000d0b0:	85 db                	test   ebx,ebx
c000d0b2:	74 36                	je     c000d0ea <File::close()+0x5a>
c000d0b4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0bb:	74 2d                	je     c000d0ea <File::close()+0x5a>
c000d0bd:	b8 05 00 00 00       	mov    eax,0x5
c000d0c2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0c6:	74 22                	je     c000d0ea <File::close()+0x5a>
c000d0c8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0cc:	8b 04 95 e0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9620]
c000d0d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0d9:	53                   	push   ebx
c000d0da:	53                   	push   ebx
c000d0db:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0dd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0e3:	50                   	push   eax
c000d0e4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0e7:	83 c4 10             	add    esp,0x10
c000d0ea:	83 c4 08             	add    esp,0x8
c000d0ed:	5b                   	pop    ebx
c000d0ee:	c3                   	ret    
c000d0ef:	90                   	nop

c000d0f0 <File::seek(unsigned long long)>:
c000d0f0:	56                   	push   esi
c000d0f1:	53                   	push   ebx
c000d0f2:	b8 0b 00 00 00       	mov    eax,0xb
c000d0f7:	51                   	push   ecx
c000d0f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d100:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d107:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d10b:	80 fa 19             	cmp    dl,0x19
c000d10e:	77 31                	ja     c000d141 <File::seek(unsigned long long)+0x51>
c000d110:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000d117:	85 d2                	test   edx,edx
c000d119:	74 26                	je     c000d141 <File::seek(unsigned long long)+0x51>
c000d11b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d121:	85 d2                	test   edx,edx
c000d123:	74 1c                	je     c000d141 <File::seek(unsigned long long)+0x51>
c000d125:	b8 05 00 00 00       	mov    eax,0x5
c000d12a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d12e:	74 11                	je     c000d141 <File::seek(unsigned long long)+0x51>
c000d130:	8b 02                	mov    eax,DWORD PTR [edx]
c000d132:	53                   	push   ebx
c000d133:	51                   	push   ecx
c000d134:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d13a:	52                   	push   edx
c000d13b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d13e:	83 c4 10             	add    esp,0x10
c000d141:	5a                   	pop    edx
c000d142:	5b                   	pop    ebx
c000d143:	5e                   	pop    esi
c000d144:	c3                   	ret    
c000d145:	90                   	nop

c000d146 <File::tell(unsigned long long*)>:
c000d146:	83 ec 0c             	sub    esp,0xc
c000d149:	b8 0b 00 00 00       	mov    eax,0xb
c000d14e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d152:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d159:	80 fa 19             	cmp    dl,0x19
c000d15c:	77 34                	ja     c000d192 <File::tell(unsigned long long*)+0x4c>
c000d15e:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000d165:	85 d2                	test   edx,edx
c000d167:	74 29                	je     c000d192 <File::tell(unsigned long long*)+0x4c>
c000d169:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d16f:	85 d2                	test   edx,edx
c000d171:	74 1f                	je     c000d192 <File::tell(unsigned long long*)+0x4c>
c000d173:	b8 05 00 00 00       	mov    eax,0x5
c000d178:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d17c:	74 14                	je     c000d192 <File::tell(unsigned long long*)+0x4c>
c000d17e:	50                   	push   eax
c000d17f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d181:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d185:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d18b:	52                   	push   edx
c000d18c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d18f:	83 c4 10             	add    esp,0x10
c000d192:	83 c4 0c             	add    esp,0xc
c000d195:	c3                   	ret    

c000d196 <File::rewind()>:
c000d196:	83 ec 10             	sub    esp,0x10
c000d199:	6a 00                	push   0x0
c000d19b:	6a 00                	push   0x0
c000d19d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a1:	e8 4a ff ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c000d1a6:	83 c4 1c             	add    esp,0x1c
c000d1a9:	c3                   	ret    

c000d1aa <File::unlink()>:
c000d1aa:	83 ec 0c             	sub    esp,0xc
c000d1ad:	b8 0b 00 00 00       	mov    eax,0xb
c000d1b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1bd:	80 f9 19             	cmp    cl,0x19
c000d1c0:	77 2f                	ja     c000d1f1 <File::unlink()+0x47>
c000d1c2:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d1c9:	85 c9                	test   ecx,ecx
c000d1cb:	74 24                	je     c000d1f1 <File::unlink()+0x47>
c000d1cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1d3:	85 c9                	test   ecx,ecx
c000d1d5:	74 1a                	je     c000d1f1 <File::unlink()+0x47>
c000d1d7:	b8 06 00 00 00       	mov    eax,0x6
c000d1dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1e0:	75 0f                	jne    c000d1f1 <File::unlink()+0x47>
c000d1e2:	83 c2 0d             	add    edx,0xd
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1e9:	52                   	push   edx
c000d1ea:	51                   	push   ecx
c000d1eb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1ee:	83 c4 10             	add    esp,0x10
c000d1f1:	83 c4 0c             	add    esp,0xc
c000d1f4:	c3                   	ret    
c000d1f5:	90                   	nop

c000d1f6 <File::rename(char const*)>:
c000d1f6:	83 ec 0c             	sub    esp,0xc
c000d1f9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d202:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d209:	80 f9 19             	cmp    cl,0x19
c000d20c:	77 32                	ja     c000d240 <File::rename(char const*)+0x4a>
c000d20e:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d215:	85 c9                	test   ecx,ecx
c000d217:	74 27                	je     c000d240 <File::rename(char const*)+0x4a>
c000d219:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d21f:	85 c9                	test   ecx,ecx
c000d221:	74 1d                	je     c000d240 <File::rename(char const*)+0x4a>
c000d223:	b8 06 00 00 00       	mov    eax,0x6
c000d228:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d22c:	75 12                	jne    c000d240 <File::rename(char const*)+0x4a>
c000d22e:	83 c2 0d             	add    edx,0xd
c000d231:	50                   	push   eax
c000d232:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d234:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d238:	52                   	push   edx
c000d239:	51                   	push   ecx
c000d23a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	83 c4 0c             	add    esp,0xc
c000d243:	c3                   	ret    

c000d244 <File::chfatattr(unsigned char, unsigned char)>:
c000d244:	57                   	push   edi
c000d245:	b8 0b 00 00 00       	mov    eax,0xb
c000d24a:	56                   	push   esi
c000d24b:	53                   	push   ebx
c000d24c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d250:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d254:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d25b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d25f:	80 f9 19             	cmp    cl,0x19
c000d262:	77 37                	ja     c000d29b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d264:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d26b:	85 c9                	test   ecx,ecx
c000d26d:	74 2c                	je     c000d29b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d26f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d275:	85 c9                	test   ecx,ecx
c000d277:	74 22                	je     c000d29b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d279:	b8 06 00 00 00       	mov    eax,0x6
c000d27e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d282:	75 17                	jne    c000d29b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d284:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d286:	89 f0                	mov    eax,esi
c000d288:	83 c2 0d             	add    edx,0xd
c000d28b:	0f b6 f0             	movzx  esi,al
c000d28e:	0f b6 db             	movzx  ebx,bl
c000d291:	56                   	push   esi
c000d292:	53                   	push   ebx
c000d293:	52                   	push   edx
c000d294:	51                   	push   ecx
c000d295:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d298:	83 c4 10             	add    esp,0x10
c000d29b:	5b                   	pop    ebx
c000d29c:	5e                   	pop    esi
c000d29d:	5f                   	pop    edi
c000d29e:	c3                   	ret    
c000d29f:	90                   	nop

c000d2a0 <File::exists()>:
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	31 c0                	xor    eax,eax
c000d2a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2a9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b0:	80 f9 19             	cmp    cl,0x19
c000d2b3:	77 24                	ja     c000d2d9 <File::exists()+0x39>
c000d2b5:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d2bc:	85 c9                	test   ecx,ecx
c000d2be:	74 19                	je     c000d2d9 <File::exists()+0x39>
c000d2c0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2c6:	85 c9                	test   ecx,ecx
c000d2c8:	74 0f                	je     c000d2d9 <File::exists()+0x39>
c000d2ca:	83 c2 0d             	add    edx,0xd
c000d2cd:	50                   	push   eax
c000d2ce:	50                   	push   eax
c000d2cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d1:	52                   	push   edx
c000d2d2:	51                   	push   ecx
c000d2d3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2d6:	83 c4 10             	add    esp,0x10
c000d2d9:	83 c4 0c             	add    esp,0xc
c000d2dc:	c3                   	ret    
c000d2dd:	90                   	nop

c000d2de <File::stat(unsigned long long*, bool*)>:
c000d2de:	56                   	push   esi
c000d2df:	53                   	push   ebx
c000d2e0:	50                   	push   eax
c000d2e1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2f9:	80 f9 19             	cmp    cl,0x19
c000d2fc:	77 3d                	ja     c000d33b <File::stat(unsigned long long*, bool*)+0x5d>
c000d2fe:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d305:	85 c9                	test   ecx,ecx
c000d307:	74 32                	je     c000d33b <File::stat(unsigned long long*, bool*)+0x5d>
c000d309:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d30f:	85 c9                	test   ecx,ecx
c000d311:	74 28                	je     c000d33b <File::stat(unsigned long long*, bool*)+0x5d>
c000d313:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d315:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d319:	74 13                	je     c000d32e <File::stat(unsigned long long*, bool*)+0x50>
c000d31b:	83 ec 04             	sub    esp,0x4
c000d31e:	56                   	push   esi
c000d31f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d325:	51                   	push   ecx
c000d326:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d329:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d32c:	eb 0a                	jmp    c000d338 <File::stat(unsigned long long*, bool*)+0x5a>
c000d32e:	53                   	push   ebx
c000d32f:	83 c2 0d             	add    edx,0xd
c000d332:	56                   	push   esi
c000d333:	52                   	push   edx
c000d334:	51                   	push   ecx
c000d335:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d338:	83 c4 10             	add    esp,0x10
c000d33b:	5a                   	pop    edx
c000d33c:	5b                   	pop    ebx
c000d33d:	5e                   	pop    esi
c000d33e:	c3                   	ret    

c000d33f <Fs::setcwd(Process*, char*)>:
c000d33f:	55                   	push   ebp
c000d340:	57                   	push   edi
c000d341:	56                   	push   esi
c000d342:	53                   	push   ebx
c000d343:	81 ec 20 02 00 00    	sub    esp,0x220
c000d349:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d350:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d356:	57                   	push   edi
c000d357:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d35e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d362:	56                   	push   esi
c000d363:	e8 bc fa ff ff       	call   c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d368:	89 34 24             	mov    DWORD PTR [esp],esi
c000d36b:	e8 30 33 ff ff       	call   c00006a0 <strlen>
c000d370:	83 c4 10             	add    esp,0x10
c000d373:	83 f8 02             	cmp    eax,0x2
c000d376:	77 17                	ja     c000d38f <Fs::setcwd(Process*, char*)+0x50>
c000d378:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d37d:	83 e8 41             	sub    eax,0x41
c000d380:	83 f8 19             	cmp    eax,0x19
c000d383:	76 24                	jbe    c000d3a9 <Fs::setcwd(Process*, char*)+0x6a>
c000d385:	b8 03 00 00 00       	mov    eax,0x3
c000d38a:	e9 e0 00 00 00       	jmp    c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d38f:	83 ec 0c             	sub    esp,0xc
c000d392:	56                   	push   esi
c000d393:	e8 08 33 ff ff       	call   c00006a0 <strlen>
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	83 f8 03             	cmp    eax,0x3
c000d39e:	75 34                	jne    c000d3d4 <Fs::setcwd(Process*, char*)+0x95>
c000d3a0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3a5:	75 2d                	jne    c000d3d4 <Fs::setcwd(Process*, char*)+0x95>
c000d3a7:	eb cf                	jmp    c000d378 <Fs::setcwd(Process*, char*)+0x39>
c000d3a9:	8b 14 85 e0 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9620]
c000d3b0:	b8 05 00 00 00       	mov    eax,0x5
c000d3b5:	85 d2                	test   edx,edx
c000d3b7:	0f 84 b2 00 00 00    	je     c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d3bd:	b8 06 00 00 00       	mov    eax,0x6
c000d3c2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3c9:	0f 85 92 00 00 00    	jne    c000d461 <Fs::setcwd(Process*, char*)+0x122>
c000d3cf:	e9 9b 00 00 00       	jmp    c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d3d4:	83 ec 0c             	sub    esp,0xc
c000d3d7:	68 14 01 00 00       	push   0x114
c000d3dc:	e8 e2 c5 ff ff       	call   c00099c3 <malloc>
c000d3e1:	83 c4 0c             	add    esp,0xc
c000d3e4:	89 c3                	mov    ebx,eax
c000d3e6:	55                   	push   ebp
c000d3e7:	56                   	push   esi
c000d3e8:	50                   	push   eax
c000d3e9:	e8 e0 fb ff ff       	call   c000cfce <File::File(char const*, Process*)>
c000d3ee:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3f3:	83 c4 0c             	add    esp,0xc
c000d3f6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d3fa:	50                   	push   eax
c000d3fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3ff:	50                   	push   eax
c000d400:	53                   	push   ebx
c000d401:	e8 d8 fe ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c000d406:	83 c4 10             	add    esp,0x10
c000d409:	83 f8 02             	cmp    eax,0x2
c000d40c:	74 04                	je     c000d412 <Fs::setcwd(Process*, char*)+0xd3>
c000d40e:	85 c0                	test   eax,eax
c000d410:	74 1c                	je     c000d42e <Fs::setcwd(Process*, char*)+0xef>
c000d412:	b8 01 00 00 00       	mov    eax,0x1
c000d417:	85 db                	test   ebx,ebx
c000d419:	74 54                	je     c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d41b:	83 ec 0c             	sub    esp,0xc
c000d41e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d420:	53                   	push   ebx
c000d421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d424:	83 c4 10             	add    esp,0x10
c000d427:	b8 01 00 00 00       	mov    eax,0x1
c000d42c:	eb 41                	jmp    c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d42e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d433:	75 1c                	jne    c000d451 <Fs::setcwd(Process*, char*)+0x112>
c000d435:	b8 02 00 00 00       	mov    eax,0x2
c000d43a:	85 db                	test   ebx,ebx
c000d43c:	74 31                	je     c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d43e:	83 ec 0c             	sub    esp,0xc
c000d441:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d443:	53                   	push   ebx
c000d444:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d447:	83 c4 10             	add    esp,0x10
c000d44a:	b8 02 00 00 00       	mov    eax,0x2
c000d44f:	eb 1e                	jmp    c000d46f <Fs::setcwd(Process*, char*)+0x130>
c000d451:	85 db                	test   ebx,ebx
c000d453:	74 0c                	je     c000d461 <Fs::setcwd(Process*, char*)+0x122>
c000d455:	83 ec 0c             	sub    esp,0xc
c000d458:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d45a:	53                   	push   ebx
c000d45b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	50                   	push   eax
c000d462:	50                   	push   eax
c000d463:	56                   	push   esi
c000d464:	57                   	push   edi
c000d465:	e8 d6 32 ff ff       	call   c0000740 <strcpy>
c000d46a:	83 c4 10             	add    esp,0x10
c000d46d:	31 c0                	xor    eax,eax
c000d46f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d475:	5b                   	pop    ebx
c000d476:	5e                   	pop    esi
c000d477:	5f                   	pop    edi
c000d478:	5d                   	pop    ebp
c000d479:	c3                   	ret    

c000d47a <Directory::Directory(char const*, Process*)>:
c000d47a:	83 ec 0c             	sub    esp,0xc
c000d47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d481:	83 ec 08             	sub    esp,0x8
c000d484:	6a 00                	push   0x0
c000d486:	50                   	push   eax
c000d487:	e8 ba dd ff ff       	call   c000b246 <UnixFile::UnixFile(int)>
c000d48c:	83 c4 10             	add    esp,0x10
c000d48f:	ba 08 32 02 c0       	mov    edx,0xc0023208
c000d494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d498:	89 10                	mov    DWORD PTR [eax],edx
c000d49a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d49e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a8:	83 c0 0d             	add    eax,0xd
c000d4ab:	83 ec 04             	sub    esp,0x4
c000d4ae:	52                   	push   edx
c000d4af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b3:	50                   	push   eax
c000d4b4:	e8 6b f9 ff ff       	call   c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4c3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ca:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4d8:	90                   	nop
c000d4d9:	83 c4 0c             	add    esp,0xc
c000d4dc:	c3                   	ret    
c000d4dd:	90                   	nop

c000d4de <Directory::open()>:
c000d4de:	53                   	push   ebx
c000d4df:	b8 0b 00 00 00       	mov    eax,0xb
c000d4e4:	83 ec 08             	sub    esp,0x8
c000d4e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4eb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4f2:	80 fa 19             	cmp    dl,0x19
c000d4f5:	77 3d                	ja     c000d534 <Directory::open()+0x56>
c000d4f7:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000d4fe:	85 d2                	test   edx,edx
c000d500:	74 32                	je     c000d534 <Directory::open()+0x56>
c000d502:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d508:	85 d2                	test   edx,edx
c000d50a:	74 28                	je     c000d534 <Directory::open()+0x56>
c000d50c:	b8 06 00 00 00       	mov    eax,0x6
c000d511:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d515:	75 1d                	jne    c000d534 <Directory::open()+0x56>
c000d517:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d51d:	50                   	push   eax
c000d51e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d520:	51                   	push   ecx
c000d521:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d524:	51                   	push   ecx
c000d525:	52                   	push   edx
c000d526:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	85 c0                	test   eax,eax
c000d52e:	75 04                	jne    c000d534 <Directory::open()+0x56>
c000d530:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d534:	83 c4 08             	add    esp,0x8
c000d537:	5b                   	pop    ebx
c000d538:	c3                   	ret    
c000d539:	90                   	nop

c000d53a <Directory::close()>:
c000d53a:	53                   	push   ebx
c000d53b:	b8 0b 00 00 00       	mov    eax,0xb
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d547:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d54e:	80 fa 19             	cmp    dl,0x19
c000d551:	77 41                	ja     c000d594 <Directory::close()+0x5a>
c000d553:	8b 1c 95 e0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9620]
c000d55a:	85 db                	test   ebx,ebx
c000d55c:	74 36                	je     c000d594 <Directory::close()+0x5a>
c000d55e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d565:	74 2d                	je     c000d594 <Directory::close()+0x5a>
c000d567:	b8 05 00 00 00       	mov    eax,0x5
c000d56c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d570:	74 22                	je     c000d594 <Directory::close()+0x5a>
c000d572:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d576:	8b 04 95 e0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9620]
c000d57d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d583:	53                   	push   ebx
c000d584:	53                   	push   ebx
c000d585:	8b 10                	mov    edx,DWORD PTR [eax]
c000d587:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d58d:	50                   	push   eax
c000d58e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	83 c4 08             	add    esp,0x8
c000d597:	5b                   	pop    ebx
c000d598:	c3                   	ret    
c000d599:	90                   	nop

c000d59a <Directory::unlink()>:
c000d59a:	83 ec 0c             	sub    esp,0xc
c000d59d:	b8 0b 00 00 00       	mov    eax,0xb
c000d5a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5ad:	80 f9 19             	cmp    cl,0x19
c000d5b0:	77 2f                	ja     c000d5e1 <Directory::unlink()+0x47>
c000d5b2:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d5b9:	85 c9                	test   ecx,ecx
c000d5bb:	74 24                	je     c000d5e1 <Directory::unlink()+0x47>
c000d5bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5c3:	85 c9                	test   ecx,ecx
c000d5c5:	74 1a                	je     c000d5e1 <Directory::unlink()+0x47>
c000d5c7:	b8 06 00 00 00       	mov    eax,0x6
c000d5cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5d0:	75 0f                	jne    c000d5e1 <Directory::unlink()+0x47>
c000d5d2:	83 c2 0d             	add    edx,0xd
c000d5d5:	50                   	push   eax
c000d5d6:	50                   	push   eax
c000d5d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5d9:	52                   	push   edx
c000d5da:	51                   	push   ecx
c000d5db:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5de:	83 c4 10             	add    esp,0x10
c000d5e1:	83 c4 0c             	add    esp,0xc
c000d5e4:	c3                   	ret    
c000d5e5:	90                   	nop

c000d5e6 <Directory::rename(char const*)>:
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d5ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5f9:	80 f9 19             	cmp    cl,0x19
c000d5fc:	77 32                	ja     c000d630 <Directory::rename(char const*)+0x4a>
c000d5fe:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d605:	85 c9                	test   ecx,ecx
c000d607:	74 27                	je     c000d630 <Directory::rename(char const*)+0x4a>
c000d609:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d60f:	85 c9                	test   ecx,ecx
c000d611:	74 1d                	je     c000d630 <Directory::rename(char const*)+0x4a>
c000d613:	b8 06 00 00 00       	mov    eax,0x6
c000d618:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d61c:	75 12                	jne    c000d630 <Directory::rename(char const*)+0x4a>
c000d61e:	83 c2 0d             	add    edx,0xd
c000d621:	50                   	push   eax
c000d622:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d628:	52                   	push   edx
c000d629:	51                   	push   ecx
c000d62a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	83 c4 0c             	add    esp,0xc
c000d633:	c3                   	ret    

c000d634 <Directory::exists()>:
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	31 c0                	xor    eax,eax
c000d639:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d63d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d644:	80 f9 19             	cmp    cl,0x19
c000d647:	77 24                	ja     c000d66d <Directory::exists()+0x39>
c000d649:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d650:	85 c9                	test   ecx,ecx
c000d652:	74 19                	je     c000d66d <Directory::exists()+0x39>
c000d654:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d65a:	85 c9                	test   ecx,ecx
c000d65c:	74 0f                	je     c000d66d <Directory::exists()+0x39>
c000d65e:	83 c2 0d             	add    edx,0xd
c000d661:	50                   	push   eax
c000d662:	50                   	push   eax
c000d663:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d665:	52                   	push   edx
c000d666:	51                   	push   ecx
c000d667:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	83 c4 0c             	add    esp,0xc
c000d670:	c3                   	ret    
c000d671:	90                   	nop

c000d672 <Directory::read(dirent*)>:
c000d672:	83 ec 1c             	sub    esp,0x1c
c000d675:	b8 0b 00 00 00       	mov    eax,0xb
c000d67a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d67e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d685:	80 fa 19             	cmp    dl,0x19
c000d688:	77 30                	ja     c000d6ba <Directory::read(dirent*)+0x48>
c000d68a:	8b 14 95 e0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9620]
c000d691:	85 d2                	test   edx,edx
c000d693:	74 25                	je     c000d6ba <Directory::read(dirent*)+0x48>
c000d695:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d69c:	74 1c                	je     c000d6ba <Directory::read(dirent*)+0x48>
c000d69e:	83 ec 0c             	sub    esp,0xc
c000d6a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6a3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6a7:	52                   	push   edx
c000d6a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ac:	6a 00                	push   0x0
c000d6ae:	68 10 01 00 00       	push   0x110
c000d6b3:	51                   	push   ecx
c000d6b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6b7:	83 c4 20             	add    esp,0x20
c000d6ba:	83 c4 1c             	add    esp,0x1c
c000d6bd:	c3                   	ret    

c000d6be <Directory::create()>:
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6d1:	80 f9 19             	cmp    cl,0x19
c000d6d4:	77 2f                	ja     c000d705 <Directory::create()+0x47>
c000d6d6:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c000d6dd:	85 c9                	test   ecx,ecx
c000d6df:	74 24                	je     c000d705 <Directory::create()+0x47>
c000d6e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6e7:	85 c9                	test   ecx,ecx
c000d6e9:	74 1a                	je     c000d705 <Directory::create()+0x47>
c000d6eb:	b8 06 00 00 00       	mov    eax,0x6
c000d6f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6f4:	75 0f                	jne    c000d705 <Directory::create()+0x47>
c000d6f6:	83 c2 0d             	add    edx,0xd
c000d6f9:	50                   	push   eax
c000d6fa:	50                   	push   eax
c000d6fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6fd:	52                   	push   edx
c000d6fe:	51                   	push   ecx
c000d6ff:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	c3                   	ret    
c000d709:	90                   	nop

c000d70a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d70a:	b8 0a 00 00 00       	mov    eax,0xa
c000d70f:	c3                   	ret    

c000d710 <Bus::Bus(char const*)>:
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d717:	83 ec 08             	sub    esp,0x8
c000d71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71e:	50                   	push   eax
c000d71f:	e8 8a 09 00 00       	call   c000e0ae <Device::Device(char const*)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	ba 24 32 02 c0       	mov    edx,0xc0023224
c000d72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d730:	89 10                	mov    DWORD PTR [eax],edx
c000d732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d736:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d740:	90                   	nop
c000d741:	83 c4 0c             	add    esp,0xc
c000d744:	c3                   	ret    
c000d745:	90                   	nop
c000d746:	66 90                	xchg   ax,ax

c000d748 <Bus::~Bus()>:
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	ba 24 32 02 c0       	mov    edx,0xc0023224
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	50                   	push   eax
c000d75e:	e8 15 06 00 00       	call   c000dd78 <Device::~Device()>
c000d763:	83 c4 10             	add    esp,0x10
c000d766:	90                   	nop
c000d767:	83 c4 0c             	add    esp,0xc
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <Bus::~Bus()>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	83 ec 0c             	sub    esp,0xc
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	e8 cd ff ff ff       	call   c000d748 <Bus::~Bus()>
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	83 ec 08             	sub    esp,0x8
c000d781:	68 58 01 00 00       	push   0x158
c000d786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78a:	e8 f4 f1 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	83 c4 0c             	add    esp,0xc
c000d795:	c3                   	ret    
c000d796:	66 90                	xchg   ax,ax

c000d798 <Buzzer::Buzzer(char const*)>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79f:	83 ec 08             	sub    esp,0x8
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	50                   	push   eax
c000d7a7:	e8 02 09 00 00       	call   c000e0ae <Device::Device(char const*)>
c000d7ac:	83 c4 10             	add    esp,0x10
c000d7af:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000d7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7d6:	90                   	nop
c000d7d7:	83 c4 0c             	add    esp,0xc
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <Buzzer::~Buzzer()>:
c000d7dc:	83 ec 0c             	sub    esp,0xc
c000d7df:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000d7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ee:	83 ec 0c             	sub    esp,0xc
c000d7f1:	50                   	push   eax
c000d7f2:	e8 81 05 00 00       	call   c000dd78 <Device::~Device()>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	90                   	nop
c000d7fb:	83 c4 0c             	add    esp,0xc
c000d7fe:	c3                   	ret    
c000d7ff:	90                   	nop

c000d800 <Buzzer::~Buzzer()>:
c000d800:	83 ec 0c             	sub    esp,0xc
c000d803:	83 ec 0c             	sub    esp,0xc
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	e8 cd ff ff ff       	call   c000d7dc <Buzzer::~Buzzer()>
c000d80f:	83 c4 10             	add    esp,0x10
c000d812:	83 ec 08             	sub    esp,0x8
c000d815:	68 5c 01 00 00       	push   0x15c
c000d81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81e:	e8 60 f1 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000d823:	83 c4 10             	add    esp,0x10
c000d826:	83 c4 0c             	add    esp,0xc
c000d829:	c3                   	ret    

c000d82a <Buzzer::stop()>:
c000d82a:	83 ec 14             	sub    esp,0x14
c000d82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d831:	8b 10                	mov    edx,DWORD PTR [eax]
c000d833:	6a 00                	push   0x0
c000d835:	50                   	push   eax
c000d836:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d839:	83 c4 1c             	add    esp,0x1c
c000d83c:	c3                   	ret    

c000d83d <beepThread(void*)>:
c000d83d:	53                   	push   ebx
c000d83e:	83 ec 08             	sub    esp,0x8
c000d841:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000d846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d84a:	48                   	dec    eax
c000d84b:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000d850:	75 02                	jne    c000d854 <beepThread(void*)+0x17>
c000d852:	fb                   	sti    
c000d853:	90                   	nop
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d85e:	50                   	push   eax
c000d85f:	e8 8c a9 00 00       	call   c00181f0 <milliTenthSleep(unsigned int)>
c000d864:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d867:	e8 be ff ff ff       	call   c000d82a <Buzzer::stop()>
c000d86c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d874:	83 c4 18             	add    esp,0x18
c000d877:	5b                   	pop    ebx
c000d878:	e9 73 a8 00 00       	jmp    c00180f0 <blockTask(TaskState)>
c000d87d:	90                   	nop

c000d87e <Buzzer::beep(int, int, bool)>:
c000d87e:	57                   	push   edi
c000d87f:	56                   	push   esi
c000d880:	53                   	push   ebx
c000d881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d885:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d889:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d88d:	50                   	push   eax
c000d88e:	50                   	push   eax
c000d88f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d895:	53                   	push   ebx
c000d896:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d899:	83 c4 10             	add    esp,0x10
c000d89c:	89 f8                	mov    eax,edi
c000d89e:	84 c0                	test   al,al
c000d8a0:	74 1e                	je     c000d8c0 <Buzzer::beep(int, int, bool)+0x42>
c000d8a2:	83 ec 0c             	sub    esp,0xc
c000d8a5:	6b f6 0a             	imul   esi,esi,0xa
c000d8a8:	56                   	push   esi
c000d8a9:	e8 42 a9 00 00       	call   c00181f0 <milliTenthSleep(unsigned int)>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8b5:	5b                   	pop    ebx
c000d8b6:	5e                   	pop    esi
c000d8b7:	5f                   	pop    edi
c000d8b8:	e9 6d ff ff ff       	jmp    c000d82a <Buzzer::stop()>
c000d8bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8c6:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000d8cb:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8d3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8d7:	c7 44 24 14 3d d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d83d
c000d8df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e3:	5b                   	pop    ebx
c000d8e4:	5e                   	pop    esi
c000d8e5:	5f                   	pop    edi
c000d8e6:	e9 f1 a3 00 00       	jmp    c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c000d8eb:	90                   	nop

c000d8ec <User::loadClockSettings(int)>:
c000d8ec:	53                   	push   ebx
c000d8ed:	83 ec 14             	sub    esp,0x14
c000d8f0:	68 14 01 00 00       	push   0x114
c000d8f5:	e8 c9 c0 ff ff       	call   c00099c3 <malloc>
c000d8fa:	83 c4 0c             	add    esp,0xc
c000d8fd:	89 c3                	mov    ebx,eax
c000d8ff:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c000d905:	68 78 32 02 c0       	push   0xc0023278
c000d90a:	50                   	push   eax
c000d90b:	e8 be f6 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c000d910:	58                   	pop    eax
c000d911:	5a                   	pop    edx
c000d912:	6a 01                	push   0x1
c000d914:	53                   	push   ebx
c000d915:	e8 18 f7 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c000d91a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d91d:	e8 6e f7 ff ff       	call   c000d090 <File::close()>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	85 db                	test   ebx,ebx
c000d927:	74 0f                	je     c000d938 <User::loadClockSettings(int)+0x4c>
c000d929:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d92b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d92f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d932:	83 c4 08             	add    esp,0x8
c000d935:	5b                   	pop    ebx
c000d936:	ff e0                	jmp    eax
c000d938:	83 c4 08             	add    esp,0x8
c000d93b:	5b                   	pop    ebx
c000d93c:	c3                   	ret    
c000d93d:	90                   	nop

c000d93e <Clock::Clock(char const*)>:
c000d93e:	83 ec 0c             	sub    esp,0xc
c000d941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d945:	83 ec 08             	sub    esp,0x8
c000d948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94c:	50                   	push   eax
c000d94d:	e8 5c 07 00 00       	call   c000e0ae <Device::Device(char const*)>
c000d952:	83 c4 10             	add    esp,0x10
c000d955:	ba a0 32 02 c0       	mov    edx,0xc00232a0
c000d95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d95e:	89 10                	mov    DWORD PTR [eax],edx
c000d960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d964:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d96e:	90                   	nop
c000d96f:	83 c4 0c             	add    esp,0xc
c000d972:	c3                   	ret    
c000d973:	90                   	nop

c000d974 <Clock::~Clock()>:
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	ba a0 32 02 c0       	mov    edx,0xc00232a0
c000d97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d980:	89 10                	mov    DWORD PTR [eax],edx
c000d982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d986:	83 ec 0c             	sub    esp,0xc
c000d989:	50                   	push   eax
c000d98a:	e8 e9 03 00 00       	call   c000dd78 <Device::~Device()>
c000d98f:	83 c4 10             	add    esp,0x10
c000d992:	90                   	nop
c000d993:	83 c4 0c             	add    esp,0xc
c000d996:	c3                   	ret    
c000d997:	90                   	nop

c000d998 <Clock::~Clock()>:
c000d998:	83 ec 0c             	sub    esp,0xc
c000d99b:	83 ec 0c             	sub    esp,0xc
c000d99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a2:	e8 cd ff ff ff       	call   c000d974 <Clock::~Clock()>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	83 ec 08             	sub    esp,0x8
c000d9ad:	68 58 01 00 00       	push   0x158
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	e8 c8 ef ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	83 c4 0c             	add    esp,0xc
c000d9c1:	c3                   	ret    

c000d9c2 <Clock::timeInSecondsLocal()>:
c000d9c2:	53                   	push   ebx
c000d9c3:	83 ec 14             	sub    esp,0x14
c000d9c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9cc:	50                   	push   eax
c000d9cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9d0:	0f b6 0d 5c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002655c
c000d9d7:	03 0d 60 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026560
c000d9dd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9e3:	89 cb                	mov    ebx,ecx
c000d9e5:	c1 fb 1f             	sar    ebx,0x1f
c000d9e8:	01 c8                	add    eax,ecx
c000d9ea:	11 da                	adc    edx,ebx
c000d9ec:	83 c4 10             	add    esp,0x10
c000d9ef:	31 c9                	xor    ecx,ecx
c000d9f1:	80 3d 5d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002655d,0x0
c000d9f8:	74 05                	je     c000d9ff <Clock::timeInSecondsLocal()+0x3d>
c000d9fa:	b9 08 07 00 00       	mov    ecx,0x708
c000d9ff:	31 db                	xor    ebx,ebx
c000da01:	01 c8                	add    eax,ecx
c000da03:	11 da                	adc    edx,ebx
c000da05:	83 c4 08             	add    esp,0x8
c000da08:	5b                   	pop    ebx
c000da09:	c3                   	ret    

c000da0a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da0a:	57                   	push   edi
c000da0b:	56                   	push   esi
c000da0c:	53                   	push   ebx
c000da0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da15:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da1b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da1e:	0f b6 05 5c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002655c
c000da25:	03 05 60 65 02 c0    	add    eax,DWORD PTR ds:0xc0026560
c000da2b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da31:	99                   	cdq    
c000da32:	29 c6                	sub    esi,eax
c000da34:	19 d7                	sbb    edi,edx
c000da36:	89 f0                	mov    eax,esi
c000da38:	89 fa                	mov    edx,edi
c000da3a:	31 f6                	xor    esi,esi
c000da3c:	80 3d 5d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002655d,0x0
c000da43:	74 05                	je     c000da4a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da45:	be 08 07 00 00       	mov    esi,0x708
c000da4a:	31 ff                	xor    edi,edi
c000da4c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da50:	29 f0                	sub    eax,esi
c000da52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da56:	19 fa                	sbb    edx,edi
c000da58:	89 d8                	mov    eax,ebx
c000da5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da5e:	5b                   	pop    ebx
c000da5f:	5e                   	pop    esi
c000da60:	5f                   	pop    edi
c000da61:	ff e0                	jmp    eax

c000da63 <datetimeToSeconds(datetime_t)>:
c000da63:	55                   	push   ebp
c000da64:	57                   	push   edi
c000da65:	56                   	push   esi
c000da66:	53                   	push   ebx
c000da67:	83 ec 14             	sub    esp,0x14
c000da6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da6e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da72:	89 d3                	mov    ebx,edx
c000da74:	0f b6 c6             	movzx  eax,dh
c000da77:	c1 eb 10             	shr    ebx,0x10
c000da7a:	48                   	dec    eax
c000da7b:	66 81 eb 6c 07       	sub    bx,0x76c
c000da80:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da84:	0f b6 f5             	movzx  esi,ch
c000da87:	89 cf                	mov    edi,ecx
c000da89:	6b f6 3c             	imul   esi,esi,0x3c
c000da8c:	c1 ef 10             	shr    edi,0x10
c000da8f:	0f b6 c9             	movzx  ecx,cl
c000da92:	89 f8                	mov    eax,edi
c000da94:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da9a:	0f b6 f8             	movzx  edi,al
c000da9d:	0f b6 d2             	movzx  edx,dl
c000daa0:	01 fe                	add    esi,edi
c000daa2:	01 f1                	add    ecx,esi
c000daa4:	0f b7 f3             	movzx  esi,bx
c000daa7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000daab:	c1 f9 1f             	sar    ecx,0x1f
c000daae:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dab3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dab7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dabc:	8b 0c 8d e0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd20]
c000dac3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dac7:	76 29                	jbe    c000daf2 <datetimeToSeconds(datetime_t)+0x8f>
c000dac9:	f6 c3 03             	test   bl,0x3
c000dacc:	75 24                	jne    c000daf2 <datetimeToSeconds(datetime_t)+0x8f>
c000dace:	31 d2                	xor    edx,edx
c000dad0:	bf 64 00 00 00       	mov    edi,0x64
c000dad5:	89 d8                	mov    eax,ebx
c000dad7:	66 f7 f7             	div    di
c000dada:	66 85 d2             	test   dx,dx
c000dadd:	75 12                	jne    c000daf1 <datetimeToSeconds(datetime_t)+0x8e>
c000dadf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dae5:	bf 90 01 00 00       	mov    edi,0x190
c000daea:	99                   	cdq    
c000daeb:	f7 ff                	idiv   edi
c000daed:	85 d2                	test   edx,edx
c000daef:	75 01                	jne    c000daf2 <datetimeToSeconds(datetime_t)+0x8f>
c000daf1:	41                   	inc    ecx
c000daf2:	66 83 fb 46          	cmp    bx,0x46
c000daf6:	76 45                	jbe    c000db3d <datetimeToSeconds(datetime_t)+0xda>
c000daf8:	bb 46 00 00 00       	mov    ebx,0x46
c000dafd:	bf 64 00 00 00       	mov    edi,0x64
c000db02:	bd 90 01 00 00       	mov    ebp,0x190
c000db07:	b8 6d 01 00 00       	mov    eax,0x16d
c000db0c:	f6 c3 03             	test   bl,0x3
c000db0f:	75 23                	jne    c000db34 <datetimeToSeconds(datetime_t)+0xd1>
c000db11:	89 d8                	mov    eax,ebx
c000db13:	99                   	cdq    
c000db14:	f7 ff                	idiv   edi
c000db16:	b8 6e 01 00 00       	mov    eax,0x16e
c000db1b:	85 d2                	test   edx,edx
c000db1d:	75 15                	jne    c000db34 <datetimeToSeconds(datetime_t)+0xd1>
c000db1f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db25:	99                   	cdq    
c000db26:	f7 fd                	idiv   ebp
c000db28:	83 fa 01             	cmp    edx,0x1
c000db2b:	19 c0                	sbb    eax,eax
c000db2d:	f7 d0                	not    eax
c000db2f:	05 6e 01 00 00       	add    eax,0x16e
c000db34:	01 c1                	add    ecx,eax
c000db36:	43                   	inc    ebx
c000db37:	39 f3                	cmp    ebx,esi
c000db39:	7c cc                	jl     c000db07 <datetimeToSeconds(datetime_t)+0xa4>
c000db3b:	eb 35                	jmp    c000db72 <datetimeToSeconds(datetime_t)+0x10f>
c000db3d:	74 33                	je     c000db72 <datetimeToSeconds(datetime_t)+0x10f>
c000db3f:	b8 45 00 00 00       	mov    eax,0x45
c000db44:	89 c2                	mov    edx,eax
c000db46:	83 e2 03             	and    edx,0x3
c000db49:	39 f0                	cmp    eax,esi
c000db4b:	7e 0f                	jle    c000db5c <datetimeToSeconds(datetime_t)+0xf9>
c000db4d:	83 fa 01             	cmp    edx,0x1
c000db50:	19 d2                	sbb    edx,edx
c000db52:	48                   	dec    eax
c000db53:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db5a:	eb e8                	jmp    c000db44 <datetimeToSeconds(datetime_t)+0xe1>
c000db5c:	b8 6d 01 00 00       	mov    eax,0x16d
c000db61:	85 d2                	test   edx,edx
c000db63:	75 0b                	jne    c000db70 <datetimeToSeconds(datetime_t)+0x10d>
c000db65:	66 83 fb 01          	cmp    bx,0x1
c000db69:	19 c0                	sbb    eax,eax
c000db6b:	05 6e 01 00 00       	add    eax,0x16e
c000db70:	29 c1                	sub    ecx,eax
c000db72:	b8 80 51 01 00       	mov    eax,0x15180
c000db77:	f7 e9                	imul   ecx
c000db79:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db7d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db81:	83 c4 14             	add    esp,0x14
c000db84:	5b                   	pop    ebx
c000db85:	5e                   	pop    esi
c000db86:	5f                   	pop    edi
c000db87:	5d                   	pop    ebp
c000db88:	c3                   	ret    
c000db89:	90                   	nop

c000db8a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db8a:	57                   	push   edi
c000db8b:	56                   	push   esi
c000db8c:	53                   	push   ebx
c000db8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db91:	8b 06                	mov    eax,DWORD PTR [esi]
c000db93:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9e:	e8 c0 fe ff ff       	call   c000da63 <datetimeToSeconds(datetime_t)>
c000dba3:	59                   	pop    ecx
c000dba4:	0f b6 0d 5c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002655c
c000dbab:	5b                   	pop    ebx
c000dbac:	03 0d 60 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026560
c000dbb2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbb8:	89 cb                	mov    ebx,ecx
c000dbba:	c1 fb 1f             	sar    ebx,0x1f
c000dbbd:	29 c8                	sub    eax,ecx
c000dbbf:	19 da                	sbb    edx,ebx
c000dbc1:	31 c9                	xor    ecx,ecx
c000dbc3:	80 3d 5d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002655d,0x0
c000dbca:	74 05                	je     c000dbd1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbcc:	b9 08 07 00 00       	mov    ecx,0x708
c000dbd1:	31 db                	xor    ebx,ebx
c000dbd3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbd7:	29 c8                	sub    eax,ecx
c000dbd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbdd:	19 da                	sbb    edx,ebx
c000dbdf:	89 f8                	mov    eax,edi
c000dbe1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbe5:	5b                   	pop    ebx
c000dbe6:	5e                   	pop    esi
c000dbe7:	5f                   	pop    edi
c000dbe8:	ff e0                	jmp    eax

c000dbea <secondsToDatetime(unsigned long long)>:
c000dbea:	55                   	push   ebp
c000dbeb:	57                   	push   edi
c000dbec:	56                   	push   esi
c000dbed:	53                   	push   ebx
c000dbee:	83 ec 1c             	sub    esp,0x1c
c000dbf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dbf9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbfd:	6a 00                	push   0x0
c000dbff:	68 80 51 01 00       	push   0x15180
c000dc04:	55                   	push   ebp
c000dc05:	57                   	push   edi
c000dc06:	e8 19 33 01 00       	call   c0020f24 <__udivdi3>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc18:	6a 00                	push   0x0
c000dc1a:	68 80 51 01 00       	push   0x15180
c000dc1f:	55                   	push   ebp
c000dc20:	57                   	push   edi
c000dc21:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc26:	e8 f9 33 01 00       	call   c0021024 <__umoddi3>
c000dc2b:	83 c4 10             	add    esp,0x10
c000dc2e:	99                   	cdq    
c000dc2f:	f7 ff                	idiv   edi
c000dc31:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc36:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc39:	89 d0                	mov    eax,edx
c000dc3b:	99                   	cdq    
c000dc3c:	f7 ff                	idiv   edi
c000dc3e:	85 db                	test   ebx,ebx
c000dc40:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc43:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc46:	79 11                	jns    c000dc59 <secondsToDatetime(unsigned long long)+0x6f>
c000dc48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc4c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc52:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc57:	eb 07                	jmp    c000dc60 <secondsToDatetime(unsigned long long)+0x76>
c000dc59:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc5e:	89 d8                	mov    eax,ebx
c000dc60:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc65:	99                   	cdq    
c000dc66:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc6b:	f7 f9                	idiv   ecx
c000dc6d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc76:	31 d2                	xor    edx,edx
c000dc78:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc80:	01 c3                	add    ebx,eax
c000dc82:	89 d8                	mov    eax,ebx
c000dc84:	f7 f1                	div    ecx
c000dc86:	31 d2                	xor    edx,edx
c000dc88:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc8b:	89 d8                	mov    eax,ebx
c000dc8d:	f7 f7                	div    edi
c000dc8f:	31 d2                	xor    edx,edx
c000dc91:	29 c1                	sub    ecx,eax
c000dc93:	89 d8                	mov    eax,ebx
c000dc95:	f7 f5                	div    ebp
c000dc97:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dc9c:	29 c1                	sub    ecx,eax
c000dc9e:	31 d2                	xor    edx,edx
c000dca0:	89 c8                	mov    eax,ecx
c000dca2:	f7 f5                	div    ebp
c000dca4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcad:	31 d2                	xor    edx,edx
c000dcaf:	89 c8                	mov    eax,ecx
c000dcb1:	f7 f5                	div    ebp
c000dcb3:	31 d2                	xor    edx,edx
c000dcb5:	01 c3                	add    ebx,eax
c000dcb7:	89 c8                	mov    eax,ecx
c000dcb9:	f7 f7                	div    edi
c000dcbb:	bf 99 00 00 00       	mov    edi,0x99
c000dcc0:	29 c3                	sub    ebx,eax
c000dcc2:	31 d2                	xor    edx,edx
c000dcc4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dccc:	29 c3                	sub    ebx,eax
c000dcce:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dcd1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dcd4:	bb 05 00 00 00       	mov    ebx,0x5
c000dcd9:	83 c1 02             	add    ecx,0x2
c000dcdc:	89 c8                	mov    eax,ecx
c000dcde:	f7 f7                	div    edi
c000dce0:	31 d2                	xor    edx,edx
c000dce2:	89 c7                	mov    edi,eax
c000dce4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcea:	83 c0 02             	add    eax,0x2
c000dced:	f7 f3                	div    ebx
c000dcef:	89 eb                	mov    ebx,ebp
c000dcf1:	29 c3                	sub    ebx,eax
c000dcf3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dcf9:	88 1e                	mov    BYTE PTR [esi],bl
c000dcfb:	19 c0                	sbb    eax,eax
c000dcfd:	31 d2                	xor    edx,edx
c000dcff:	83 e0 0c             	and    eax,0xc
c000dd02:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd06:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd12:	83 f9 01             	cmp    ecx,0x1
c000dd15:	0f 96 c2             	setbe  dl
c000dd18:	41                   	inc    ecx
c000dd19:	01 d0                	add    eax,edx
c000dd1b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd1e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd22:	83 c4 1c             	add    esp,0x1c
c000dd25:	89 f0                	mov    eax,esi
c000dd27:	5b                   	pop    ebx
c000dd28:	5e                   	pop    esi
c000dd29:	5f                   	pop    edi
c000dd2a:	5d                   	pop    ebp
c000dd2b:	c2 04 00             	ret    0x4

c000dd2e <Clock::timeInDatetimeLocal()>:
c000dd2e:	53                   	push   ebx
c000dd2f:	83 ec 14             	sub    esp,0x14
c000dd32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd3a:	e8 83 fc ff ff       	call   c000d9c2 <Clock::timeInSecondsLocal()>
c000dd3f:	83 c4 0c             	add    esp,0xc
c000dd42:	52                   	push   edx
c000dd43:	50                   	push   eax
c000dd44:	53                   	push   ebx
c000dd45:	e8 a0 fe ff ff       	call   c000dbea <secondsToDatetime(unsigned long long)>
c000dd4a:	89 d8                	mov    eax,ebx
c000dd4c:	83 c4 14             	add    esp,0x14
c000dd4f:	5b                   	pop    ebx
c000dd50:	c2 04 00             	ret    0x4
c000dd53:	90                   	nop

c000dd54 <Device::hibernate()>:
c000dd54:	c3                   	ret    
c000dd55:	90                   	nop

c000dd56 <Device::wake()>:
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <Device::detect()>:
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <Device::disableLegacy()>:
c000dd5a:	c3                   	ret    
c000dd5b:	90                   	nop

c000dd5c <Device::powerSaving(PowerSavingLevel)>:
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <DriverlessDevice::close(int, int, void*)>:
c000dd5e:	31 c0                	xor    eax,eax
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <DriverlessDevice::detect()>:
c000dd62:	c3                   	ret    
c000dd63:	90                   	nop

c000dd64 <DriverlessDevice::open(int, int, void*)>:
c000dd64:	83 ec 18             	sub    esp,0x18
c000dd67:	68 10 33 02 c0       	push   0xc0023310
c000dd6c:	e8 b4 65 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000dd71:	83 c8 ff             	or     eax,0xffffffff
c000dd74:	83 c4 1c             	add    esp,0x1c
c000dd77:	c3                   	ret    

c000dd78 <Device::~Device()>:
c000dd78:	ba 70 33 02 c0       	mov    edx,0xc0023370
c000dd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd81:	89 10                	mov    DWORD PTR [eax],edx
c000dd83:	90                   	nop
c000dd84:	c3                   	ret    
c000dd85:	90                   	nop

c000dd86 <Device::~Device()>:
c000dd86:	83 ec 0c             	sub    esp,0xc
c000dd89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd8d:	e8 e6 ff ff ff       	call   c000dd78 <Device::~Device()>
c000dd92:	83 c4 04             	add    esp,0x4
c000dd95:	83 ec 08             	sub    esp,0x8
c000dd98:	68 58 01 00 00       	push   0x158
c000dd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda1:	e8 dd eb ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000dda6:	83 c4 10             	add    esp,0x10
c000dda9:	83 c4 0c             	add    esp,0xc
c000ddac:	c3                   	ret    
c000ddad:	90                   	nop

c000ddae <Device::findAndLoadDriver()>:
c000ddae:	c7 44 24 04 2e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002332e
c000ddb6:	e9 a9 ec ff ff       	jmp    c000ca64 <Dbg::kprintf(char const*, ...)>
c000ddbb:	90                   	nop

c000ddbc <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddbc:	57                   	push   edi
c000ddbd:	b9 09 00 00 00       	mov    ecx,0x9
c000ddc2:	56                   	push   esi
c000ddc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddc7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddcb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ddd5:	81 c7 18 01 00 00    	add    edi,0x118
c000dddb:	fc                   	cld    
c000dddc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ddde:	5e                   	pop    esi
c000dddf:	5f                   	pop    edi
c000dde0:	c3                   	ret    
c000dde1:	90                   	nop

c000dde2 <Device::preOpenACPI(void*, char*, char*)>:
c000dde2:	57                   	push   edi
c000dde3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dde8:	56                   	push   esi
c000dde9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dded:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddf1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ddfb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de01:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de0d:	b9 0e 00 00 00       	mov    ecx,0xe
c000de12:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de1e:	5e                   	pop    esi
c000de1f:	5f                   	pop    edi
c000de20:	c3                   	ret    
c000de21:	90                   	nop

c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de26:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de2b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de32:	75 0b                	jne    c000de3f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de34:	8b 00                	mov    eax,DWORD PTR [eax]
c000de36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de3a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de3d:	eb 1e                	jmp    c000de5d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de3f:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000de44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de4a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de50:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de5a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de5d:	ff e0                	jmp    eax
c000de5f:	90                   	nop

c000de60 <Device::getParent()>:
c000de60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de64:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de6a:	c3                   	ret    
c000de6b:	90                   	nop

c000de6c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de70:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de75:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de7c:	75 0b                	jne    c000de89 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000de80:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de84:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de87:	eb 1e                	jmp    c000dea7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de89:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000de8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de94:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de9c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dea4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000dea7:	ff e0                	jmp    eax
c000dea9:	90                   	nop

c000deaa <Device::addChild(Device*)>:
c000deaa:	53                   	push   ebx
c000deab:	83 ec 08             	sub    esp,0x8
c000deae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deb6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000debc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000dec2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dec4:	85 d2                	test   edx,edx
c000dec6:	74 04                	je     c000decc <Device::addChild(Device*)+0x22>
c000dec8:	89 d3                	mov    ebx,edx
c000deca:	eb f6                	jmp    c000dec2 <Device::addChild(Device*)+0x18>
c000decc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000decf:	83 ec 0c             	sub    esp,0xc
c000ded2:	6a 08                	push   0x8
c000ded4:	e8 ea ba ff ff       	call   c00099c3 <malloc>
c000ded9:	89 03                	mov    DWORD PTR [ebx],eax
c000dedb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dee1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dee8:	83 c4 18             	add    esp,0x18
c000deeb:	5b                   	pop    ebx
c000deec:	c3                   	ret    
c000deed:	90                   	nop

c000deee <Device::removeAllChildren()>:
c000deee:	56                   	push   esi
c000deef:	53                   	push   ebx
c000def0:	52                   	push   edx
c000def1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000def5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000defb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000defe:	74 17                	je     c000df17 <Device::removeAllChildren()+0x29>
c000df00:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df03:	85 c0                	test   eax,eax
c000df05:	74 0c                	je     c000df13 <Device::removeAllChildren()+0x25>
c000df07:	83 ec 0c             	sub    esp,0xc
c000df0a:	8b 10                	mov    edx,DWORD PTR [eax]
c000df0c:	50                   	push   eax
c000df0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df10:	83 c4 10             	add    esp,0x10
c000df13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df15:	eb e4                	jmp    c000defb <Device::removeAllChildren()+0xd>
c000df17:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df23:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df30:	58                   	pop    eax
c000df31:	5b                   	pop    ebx
c000df32:	5e                   	pop    esi
c000df33:	c3                   	ret    

c000df34 <Device::hibernateAll()>:
c000df34:	53                   	push   ebx
c000df35:	83 ec 14             	sub    esp,0x14
c000df38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df3e:	53                   	push   ebx
c000df3f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df4e:	74 0f                	je     c000df5f <Device::hibernateAll()+0x2b>
c000df50:	83 ec 0c             	sub    esp,0xc
c000df53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df56:	e8 d9 ff ff ff       	call   c000df34 <Device::hibernateAll()>
c000df5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df5d:	eb e9                	jmp    c000df48 <Device::hibernateAll()+0x14>
c000df5f:	83 c4 08             	add    esp,0x8
c000df62:	5b                   	pop    ebx
c000df63:	c3                   	ret    

c000df64 <Device::wakeAll()>:
c000df64:	53                   	push   ebx
c000df65:	83 ec 14             	sub    esp,0x14
c000df68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df6e:	53                   	push   ebx
c000df6f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df78:	83 c4 10             	add    esp,0x10
c000df7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df7e:	74 0f                	je     c000df8f <Device::wakeAll()+0x2b>
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df86:	e8 d9 ff ff ff       	call   c000df64 <Device::wakeAll()>
c000df8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df8d:	eb e9                	jmp    c000df78 <Device::wakeAll()+0x14>
c000df8f:	83 c4 08             	add    esp,0x8
c000df92:	5b                   	pop    ebx
c000df93:	c3                   	ret    

c000df94 <Device::detectAll()>:
c000df94:	53                   	push   ebx
c000df95:	83 ec 14             	sub    esp,0x14
c000df98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df9e:	53                   	push   ebx
c000df9f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dfa2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfae:	74 0f                	je     c000dfbf <Device::detectAll()+0x2b>
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfb6:	e8 d9 ff ff ff       	call   c000df94 <Device::detectAll()>
c000dfbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfbd:	eb e9                	jmp    c000dfa8 <Device::detectAll()+0x14>
c000dfbf:	83 c4 08             	add    esp,0x8
c000dfc2:	5b                   	pop    ebx
c000dfc3:	c3                   	ret    

c000dfc4 <Device::disableLegacyAll()>:
c000dfc4:	53                   	push   ebx
c000dfc5:	83 ec 14             	sub    esp,0x14
c000dfc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfce:	53                   	push   ebx
c000dfcf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfd2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfde:	74 0f                	je     c000dfef <Device::disableLegacyAll()+0x2b>
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfe6:	e8 d9 ff ff ff       	call   c000dfc4 <Device::disableLegacyAll()>
c000dfeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfed:	eb e9                	jmp    c000dfd8 <Device::disableLegacyAll()+0x14>
c000dfef:	83 c4 08             	add    esp,0x8
c000dff2:	5b                   	pop    ebx
c000dff3:	c3                   	ret    

c000dff4 <Device::loadDriversForAll()>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 08             	sub    esp,0x8
c000dff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dffc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e003:	75 0c                	jne    c000e011 <Device::loadDriversForAll()+0x1d>
c000e005:	83 ec 0c             	sub    esp,0xc
c000e008:	53                   	push   ebx
c000e009:	e8 a0 fd ff ff       	call   c000ddae <Device::findAndLoadDriver()>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e017:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e01a:	74 12                	je     c000e02e <Device::loadDriversForAll()+0x3a>
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e022:	e8 cd ff ff ff       	call   c000dff4 <Device::loadDriversForAll()>
c000e027:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e029:	83 c4 10             	add    esp,0x10
c000e02c:	eb e9                	jmp    c000e017 <Device::loadDriversForAll()+0x23>
c000e02e:	83 c4 08             	add    esp,0x8
c000e031:	5b                   	pop    ebx
c000e032:	c3                   	ret    
c000e033:	90                   	nop

c000e034 <Device::closeAll()>:
c000e034:	53                   	push   ebx
c000e035:	83 ec 08             	sub    esp,0x8
c000e038:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e03c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03e:	6a 00                	push   0x0
c000e040:	6a 00                	push   0x0
c000e042:	6a 00                	push   0x0
c000e044:	53                   	push   ebx
c000e045:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e048:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e04e:	83 c4 10             	add    esp,0x10
c000e051:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e054:	74 0f                	je     c000e065 <Device::closeAll()+0x31>
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e05c:	e8 d3 ff ff ff       	call   c000e034 <Device::closeAll()>
c000e061:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e063:	eb e9                	jmp    c000e04e <Device::closeAll()+0x1a>
c000e065:	83 c4 08             	add    esp,0x8
c000e068:	5b                   	pop    ebx
c000e069:	c3                   	ret    

c000e06a <Device::powerSavingAll(PowerSavingLevel)>:
c000e06a:	56                   	push   esi
c000e06b:	53                   	push   ebx
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e073:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e077:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e079:	56                   	push   esi
c000e07a:	53                   	push   ebx
c000e07b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e07e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e084:	83 c4 10             	add    esp,0x10
c000e087:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e08a:	74 0f                	je     c000e09b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e08c:	52                   	push   edx
c000e08d:	52                   	push   edx
c000e08e:	56                   	push   esi
c000e08f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e092:	e8 d3 ff ff ff       	call   c000e06a <Device::powerSavingAll(PowerSavingLevel)>
c000e097:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e099:	eb e9                	jmp    c000e084 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e09b:	58                   	pop    eax
c000e09c:	5b                   	pop    ebx
c000e09d:	5e                   	pop    esi
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <Device::setName(char const*)>:
c000e0a0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0a8:	e9 93 26 ff ff       	jmp    c0000740 <strcpy>
c000e0ad:	90                   	nop

c000e0ae <Device::Device(char const*)>:
c000e0ae:	83 ec 1c             	sub    esp,0x1c
c000e0b1:	ba 70 33 02 c0       	mov    edx,0xc0023370
c000e0b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ba:	89 10                	mov    DWORD PTR [eax],edx
c000e0bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0f4:	83 ec 08             	sub    esp,0x8
c000e0f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ff:	e8 9c ff ff ff       	call   c000e0a0 <Device::setName(char const*)>
c000e104:	83 c4 10             	add    esp,0x10
c000e107:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e116:	e8 a8 b8 ff ff       	call   c00099c3 <malloc>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e124:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e12b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e12f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e139:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e13f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e149:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e14f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e15a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e165:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e16c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e170:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e188:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e18c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e19a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1a4:	90                   	nop
c000e1a5:	83 c4 1c             	add    esp,0x1c
c000e1a8:	c3                   	ret    
c000e1a9:	90                   	nop

c000e1aa <Device::getName()>:
c000e1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ae:	05 d0 00 00 00       	add    eax,0xd0
c000e1b3:	c3                   	ret    

c000e1b4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1bb:	83 ec 08             	sub    esp,0x8
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	50                   	push   eax
c000e1c3:	e8 e6 fe ff ff       	call   c000e0ae <Device::Device(char const*)>
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c000e1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d4:	89 10                	mov    DWORD PTR [eax],edx
c000e1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1da:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1e4:	90                   	nop
c000e1e5:	83 c4 0c             	add    esp,0xc
c000e1e8:	c3                   	ret    
c000e1e9:	90                   	nop

c000e1ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1ea:	57                   	push   edi
c000e1eb:	56                   	push   esi
c000e1ec:	53                   	push   ebx
c000e1ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1f9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e1ff:	75 0c                	jne    c000e20d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e201:	52                   	push   edx
c000e202:	52                   	push   edx
c000e203:	53                   	push   ebx
c000e204:	56                   	push   esi
c000e205:	e8 cc 31 01 00       	call   c00213d6 <LinkedList<Device>::addElement(Device*)>
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e213:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e216:	74 12                	je     c000e22a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e218:	50                   	push   eax
c000e219:	57                   	push   edi
c000e21a:	56                   	push   esi
c000e21b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e21e:	e8 c7 ff ff ff       	call   c000e1ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e223:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e225:	83 c4 10             	add    esp,0x10
c000e228:	eb e9                	jmp    c000e213 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e22a:	5b                   	pop    ebx
c000e22b:	5e                   	pop    esi
c000e22c:	5f                   	pop    edi
c000e22d:	c3                   	ret    

c000e22e <getDevicesOfType(DeviceType)>:
c000e22e:	53                   	push   ebx
c000e22f:	83 ec 14             	sub    esp,0x14
c000e232:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e236:	53                   	push   ebx
c000e237:	e8 76 32 01 00       	call   c00214b2 <LinkedList<Device>::LinkedList()>
c000e23c:	83 c4 0c             	add    esp,0xc
c000e23f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e243:	53                   	push   ebx
c000e244:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c000e24a:	e8 9b ff ff ff       	call   c000e1ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e24f:	89 d8                	mov    eax,ebx
c000e251:	83 c4 18             	add    esp,0x18
c000e254:	5b                   	pop    ebx
c000e255:	c2 04 00             	ret    0x4

c000e258 <HardDiskController::HardDiskController(char const*)>:
c000e258:	83 ec 0c             	sub    esp,0xc
c000e25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25f:	83 ec 08             	sub    esp,0x8
c000e262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e266:	50                   	push   eax
c000e267:	e8 42 fe ff ff       	call   c000e0ae <Device::Device(char const*)>
c000e26c:	83 c4 10             	add    esp,0x10
c000e26f:	ba c8 33 02 c0       	mov    edx,0xc00233c8
c000e274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e278:	89 10                	mov    DWORD PTR [eax],edx
c000e27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e288:	90                   	nop
c000e289:	83 c4 0c             	add    esp,0xc
c000e28c:	c3                   	ret    
c000e28d:	90                   	nop
c000e28e:	66 90                	xchg   ax,ax

c000e290 <HardDiskController::~HardDiskController()>:
c000e290:	83 ec 0c             	sub    esp,0xc
c000e293:	ba c8 33 02 c0       	mov    edx,0xc00233c8
c000e298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29c:	89 10                	mov    DWORD PTR [eax],edx
c000e29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	50                   	push   eax
c000e2a6:	e8 cd fa ff ff       	call   c000dd78 <Device::~Device()>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	90                   	nop
c000e2af:	83 c4 0c             	add    esp,0xc
c000e2b2:	c3                   	ret    
c000e2b3:	90                   	nop

c000e2b4 <HardDiskController::~HardDiskController()>:
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	83 ec 0c             	sub    esp,0xc
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	e8 cd ff ff ff       	call   c000e290 <HardDiskController::~HardDiskController()>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	83 ec 08             	sub    esp,0x8
c000e2c9:	68 58 01 00 00       	push   0x158
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 ac e6 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <PhysicalDisk::eject()>:
c000e2de:	83 c8 ff             	or     eax,0xffffffff
c000e2e1:	c3                   	ret    

c000e2e2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e9:	83 ec 08             	sub    esp,0x8
c000e2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f0:	50                   	push   eax
c000e2f1:	e8 b8 fd ff ff       	call   c000e0ae <Device::Device(char const*)>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	ba f4 33 02 c0       	mov    edx,0xc00233f4
c000e2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e302:	89 10                	mov    DWORD PTR [eax],edx
c000e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e308:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e30f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e313:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e330:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e344:	90                   	nop
c000e345:	83 c4 0c             	add    esp,0xc
c000e348:	c3                   	ret    
c000e349:	90                   	nop

c000e34a <PhysicalDisk::startCache()>:
c000e34a:	56                   	push   esi
c000e34b:	53                   	push   ebx
c000e34c:	83 ec 10             	sub    esp,0x10
c000e34f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e353:	6a 44                	push   0x44
c000e355:	e8 69 b6 ff ff       	call   c00099c3 <malloc>
c000e35a:	89 c6                	mov    esi,eax
c000e35c:	58                   	pop    eax
c000e35d:	5a                   	pop    edx
c000e35e:	53                   	push   ebx
c000e35f:	56                   	push   esi
c000e360:	e8 2f 26 00 00       	call   c0010994 <VCache::VCache(PhysicalDisk*)>
c000e365:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e36b:	83 c4 14             	add    esp,0x14
c000e36e:	5b                   	pop    ebx
c000e36f:	5e                   	pop    esi
c000e370:	c3                   	ret    
c000e371:	90                   	nop

c000e372 <PhysicalDisk::~PhysicalDisk()>:
c000e372:	83 ec 0c             	sub    esp,0xc
c000e375:	ba f4 33 02 c0       	mov    edx,0xc00233f4
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	89 10                	mov    DWORD PTR [eax],edx
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	83 ec 0c             	sub    esp,0xc
c000e387:	50                   	push   eax
c000e388:	e8 eb f9 ff ff       	call   c000dd78 <Device::~Device()>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	90                   	nop
c000e391:	83 c4 0c             	add    esp,0xc
c000e394:	c3                   	ret    
c000e395:	90                   	nop

c000e396 <PhysicalDisk::~PhysicalDisk()>:
c000e396:	83 ec 0c             	sub    esp,0xc
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a0:	e8 cd ff ff ff       	call   c000e372 <PhysicalDisk::~PhysicalDisk()>
c000e3a5:	83 c4 10             	add    esp,0x10
c000e3a8:	83 ec 08             	sub    esp,0x8
c000e3ab:	68 6c 01 00 00       	push   0x16c
c000e3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b4:	e8 ca e5 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000e3b9:	83 c4 10             	add    esp,0x10
c000e3bc:	83 c4 0c             	add    esp,0xc
c000e3bf:	c3                   	ret    

c000e3c0 <FPU::FPU(char const*)>:
c000e3c0:	83 ec 0c             	sub    esp,0xc
c000e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c7:	83 ec 08             	sub    esp,0x8
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	50                   	push   eax
c000e3cf:	e8 da fc ff ff       	call   c000e0ae <Device::Device(char const*)>
c000e3d4:	83 c4 10             	add    esp,0x10
c000e3d7:	ba 38 34 02 c0       	mov    edx,0xc0023438
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	89 10                	mov    DWORD PTR [eax],edx
c000e3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3f0:	90                   	nop
c000e3f1:	83 c4 0c             	add    esp,0xc
c000e3f4:	c3                   	ret    
c000e3f5:	90                   	nop
c000e3f6:	66 90                	xchg   ax,ax

c000e3f8 <FPU::~FPU()>:
c000e3f8:	83 ec 0c             	sub    esp,0xc
c000e3fb:	ba 38 34 02 c0       	mov    edx,0xc0023438
c000e400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e404:	89 10                	mov    DWORD PTR [eax],edx
c000e406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40a:	83 ec 0c             	sub    esp,0xc
c000e40d:	50                   	push   eax
c000e40e:	e8 65 f9 ff ff       	call   c000dd78 <Device::~Device()>
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	90                   	nop
c000e417:	83 c4 0c             	add    esp,0xc
c000e41a:	c3                   	ret    
c000e41b:	90                   	nop

c000e41c <FPU::~FPU()>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e426:	e8 cd ff ff ff       	call   c000e3f8 <FPU::~FPU()>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	83 ec 08             	sub    esp,0x8
c000e431:	68 58 01 00 00       	push   0x158
c000e436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e43a:	e8 44 e5 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000e43f:	83 c4 10             	add    esp,0x10
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <setupFPU()>:
c000e446:	53                   	push   ebx
c000e447:	83 ec 08             	sub    esp,0x8
c000e44a:	8b 15 e8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e8
c000e450:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e457:	74 1b                	je     c000e474 <setupFPU()+0x2e>
c000e459:	83 ec 0c             	sub    esp,0xc
c000e45c:	68 58 01 00 00       	push   0x158
c000e461:	e8 5d b5 ff ff       	call   c00099c3 <malloc>
c000e466:	89 c3                	mov    ebx,eax
c000e468:	89 04 24             	mov    DWORD PTR [esp],eax
c000e46b:	e8 48 16 01 00       	call   c001fab8 <AVX::AVX()>
c000e470:	eb 62                	jmp    c000e4d4 <setupFPU()+0x8e>
c000e472:	66 90                	xchg   ax,ax
c000e474:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e47a:	84 c0                	test   al,al
c000e47c:	79 1a                	jns    c000e498 <setupFPU()+0x52>
c000e47e:	83 ec 0c             	sub    esp,0xc
c000e481:	68 58 01 00 00       	push   0x158
c000e486:	e8 38 b5 ff ff       	call   c00099c3 <malloc>
c000e48b:	89 c3                	mov    ebx,eax
c000e48d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e490:	e8 53 17 01 00       	call   c001fbe8 <SSE::SSE()>
c000e495:	eb 3d                	jmp    c000e4d4 <setupFPU()+0x8e>
c000e497:	90                   	nop
c000e498:	a8 20                	test   al,0x20
c000e49a:	74 1c                	je     c000e4b8 <setupFPU()+0x72>
c000e49c:	83 ec 0c             	sub    esp,0xc
c000e49f:	68 58 01 00 00       	push   0x158
c000e4a4:	e8 1a b5 ff ff       	call   c00099c3 <malloc>
c000e4a9:	89 c3                	mov    ebx,eax
c000e4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ae:	e8 99 16 01 00       	call   c001fb4c <MMX::MMX()>
c000e4b3:	eb 1f                	jmp    c000e4d4 <setupFPU()+0x8e>
c000e4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4b8:	a8 10                	test   al,0x10
c000e4ba:	74 20                	je     c000e4dc <setupFPU()+0x96>
c000e4bc:	83 ec 0c             	sub    esp,0xc
c000e4bf:	68 58 01 00 00       	push   0x158
c000e4c4:	e8 fa b4 ff ff       	call   c00099c3 <malloc>
c000e4c9:	89 c3                	mov    ebx,eax
c000e4cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ce:	e8 a9 17 01 00       	call   c001fc7c <x87::x87()>
c000e4d3:	90                   	nop
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	eb 27                	jmp    c000e500 <setupFPU()+0xba>
c000e4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4dc:	83 e0 ef             	and    eax,0xffffffef
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4e8:	68 24 34 02 c0       	push   0xc0023424
c000e4ed:	e8 72 e5 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e4f2:	0f 20 c0             	mov    eax,cr0
c000e4f5:	83 c8 04             	or     eax,0x4
c000e4f8:	0f 22 c0             	mov    cr0,eax
c000e4fb:	31 db                	xor    ebx,ebx
c000e4fd:	83 c4 10             	add    esp,0x10
c000e500:	89 d8                	mov    eax,ebx
c000e502:	83 c4 08             	add    esp,0x8
c000e505:	5b                   	pop    ebx
c000e506:	c3                   	ret    
c000e507:	90                   	nop

c000e508 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e50c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e510:	c1 e0 04             	shl    eax,0x4
c000e513:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e517:	8d 50 10             	lea    edx,[eax+0x10]
c000e51a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e520:	74 08                	je     c000e52a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e522:	83 c0 04             	add    eax,0x4
c000e525:	39 d0                	cmp    eax,edx
c000e527:	75 f1                	jne    c000e51a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e529:	c3                   	ret    
c000e52a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e534:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e53e:	eb e2                	jmp    c000e522 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e540 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e540:	57                   	push   edi
c000e541:	31 c0                	xor    eax,eax
c000e543:	56                   	push   esi
c000e544:	53                   	push   ebx
c000e545:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e54d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e551:	89 da                	mov    edx,ebx
c000e553:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e557:	c1 e2 04             	shl    edx,0x4
c000e55a:	01 ca                	add    edx,ecx
c000e55c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e564:	74 16                	je     c000e57c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e566:	40                   	inc    eax
c000e567:	83 f8 04             	cmp    eax,0x4
c000e56a:	75 f0                	jne    c000e55c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e56c:	c7 44 24 10 68 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023468
c000e574:	5b                   	pop    ebx
c000e575:	5e                   	pop    esi
c000e576:	5f                   	pop    edi
c000e577:	e9 a9 5d 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c000e57c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e57f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e582:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e588:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e58e:	5b                   	pop    ebx
c000e58f:	5e                   	pop    esi
c000e590:	5f                   	pop    edi
c000e591:	c3                   	ret    

c000e592 <doubleFault(regs*, void*)>:
c000e592:	55                   	push   ebp
c000e593:	89 e5                	mov    ebp,esp
c000e595:	83 ec 08             	sub    esp,0x8
c000e598:	83 ec 0c             	sub    esp,0xc
c000e59b:	68 75 34 02 c0       	push   0xc0023475
c000e5a0:	e8 80 5d 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000e5a5:	83 c4 10             	add    esp,0x10
c000e5a8:	90                   	nop
c000e5a9:	c9                   	leave  
c000e5aa:	c3                   	ret    
c000e5ab:	90                   	nop

c000e5ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5ac:	56                   	push   esi
c000e5ad:	53                   	push   ebx
c000e5ae:	50                   	push   eax
c000e5af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5b7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5bc:	75 35                	jne    c000e5f3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5be:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5c1:	31 d2                	xor    edx,edx
c000e5c3:	89 c1                	mov    ecx,eax
c000e5c5:	c1 e1 04             	shl    ecx,0x4
c000e5c8:	01 f1                	add    ecx,esi
c000e5ca:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5d2:	74 3e                	je     c000e612 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5d4:	42                   	inc    edx
c000e5d5:	83 fa 04             	cmp    edx,0x4
c000e5d8:	75 f0                	jne    c000e5ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5da:	83 ec 0c             	sub    esp,0xc
c000e5dd:	68 8f 34 02 c0       	push   0xc002348f
c000e5e2:	e8 3e 5d 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5ef:	5a                   	pop    edx
c000e5f0:	5b                   	pop    ebx
c000e5f1:	5e                   	pop    esi
c000e5f2:	c3                   	ret    
c000e5f3:	83 ec 0c             	sub    esp,0xc
c000e5f6:	56                   	push   esi
c000e5f7:	e8 ae fb ff ff       	call   c000e1aa <Device::getName()>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e602:	75 ba                	jne    c000e5be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e604:	83 fb 0f             	cmp    ebx,0xf
c000e607:	7f 29                	jg     c000e632 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e609:	0f b6 9b e0 5a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda520]
c000e610:	eb ac                	jmp    c000e5be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e612:	8d 04 82             	lea    eax,[edx+eax*4]
c000e615:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e619:	8d 04 86             	lea    eax,[esi+eax*4]
c000e61c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e622:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e626:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e62c:	89 d8                	mov    eax,ebx
c000e62e:	5a                   	pop    edx
c000e62f:	5b                   	pop    ebx
c000e630:	5e                   	pop    esi
c000e631:	c3                   	ret    
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	68 82 34 02 c0       	push   0xc0023482
c000e63a:	e8 e6 5c 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000e63f:	83 c4 10             	add    esp,0x10
c000e642:	e9 77 ff ff ff       	jmp    c000e5be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e647:	90                   	nop

c000e648 <InterruptController::clearAllHandlers(int, bool)>:
c000e648:	56                   	push   esi
c000e649:	53                   	push   ebx
c000e64a:	52                   	push   edx
c000e64b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e64f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e653:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e658:	75 61                	jne    c000e6bb <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e65a:	8d 46 20             	lea    eax,[esi+0x20]
c000e65d:	c1 e6 04             	shl    esi,0x4
c000e660:	c1 e0 04             	shl    eax,0x4
c000e663:	01 de                	add    esi,ebx
c000e665:	01 d8                	add    eax,ebx
c000e667:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e671:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e67b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e685:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e68f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e699:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6a3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6ad:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6b7:	58                   	pop    eax
c000e6b8:	5b                   	pop    ebx
c000e6b9:	5e                   	pop    esi
c000e6ba:	c3                   	ret    
c000e6bb:	83 ec 0c             	sub    esp,0xc
c000e6be:	53                   	push   ebx
c000e6bf:	e8 e6 fa ff ff       	call   c000e1aa <Device::getName()>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6ca:	75 8e                	jne    c000e65a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6cc:	83 fe 0f             	cmp    esi,0xf
c000e6cf:	7f 09                	jg     c000e6da <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6d1:	0f b6 b6 e0 5a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda520]
c000e6d8:	eb 80                	jmp    c000e65a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6da:	83 ec 0c             	sub    esp,0xc
c000e6dd:	68 9c 34 02 c0       	push   0xc002349c
c000e6e2:	e8 3e 5c 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000e6e7:	83 c4 10             	add    esp,0x10
c000e6ea:	e9 6b ff ff ff       	jmp    c000e65a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6ef:	90                   	nop

c000e6f0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6f0:	56                   	push   esi
c000e6f1:	53                   	push   ebx
c000e6f2:	52                   	push   edx
c000e6f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6fb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e700:	75 3a                	jne    c000e73c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e702:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e706:	8d 50 20             	lea    edx,[eax+0x20]
c000e709:	c1 e2 04             	shl    edx,0x4
c000e70c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e70f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e713:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e719:	74 0b                	je     c000e726 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e71b:	83 c0 04             	add    eax,0x4
c000e71e:	39 d0                	cmp    eax,edx
c000e720:	75 f1                	jne    c000e713 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e722:	58                   	pop    eax
c000e723:	5b                   	pop    ebx
c000e724:	5e                   	pop    esi
c000e725:	c3                   	ret    
c000e726:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e730:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e73a:	eb df                	jmp    c000e71b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	56                   	push   esi
c000e740:	e8 65 fa ff ff       	call   c000e1aa <Device::getName()>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e74b:	75 b5                	jne    c000e702 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e74d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e752:	7f 11                	jg     c000e765 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e758:	0f b6 80 e0 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda520]
c000e75f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e763:	eb 9d                	jmp    c000e702 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e765:	83 ec 0c             	sub    esp,0xc
c000e768:	68 a9 34 02 c0       	push   0xc00234a9
c000e76d:	e8 b3 5b 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000e772:	83 c4 10             	add    esp,0x10
c000e775:	eb 8b                	jmp    c000e702 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e777 <nmiHandler(regs*, void*)>:
c000e777:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000e77c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e780:	e9 09 aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e785 <int_handler>:
c000e785:	55                   	push   ebp
c000e786:	57                   	push   edi
c000e787:	56                   	push   esi
c000e788:	53                   	push   ebx
c000e789:	83 ec 0c             	sub    esp,0xc
c000e78c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e790:	80 3d 04 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f04,0x0
c000e797:	74 0b                	je     c000e7a4 <int_handler+0x1f>
c000e799:	fa                   	cli    
c000e79a:	f4                   	hlt    
c000e79b:	80 3d 04 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f04,0x0
c000e7a2:	75 f5                	jne    c000e799 <int_handler+0x14>
c000e7a4:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000e7a9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7b2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7b8:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7bb:	83 f8 17             	cmp    eax,0x17
c000e7be:	77 13                	ja     c000e7d3 <int_handler+0x4e>
c000e7c0:	83 ec 08             	sub    esp,0x8
c000e7c3:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7c5:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7c8:	0f b6 c0             	movzx  eax,al
c000e7cb:	50                   	push   eax
c000e7cc:	57                   	push   edi
c000e7cd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	83 c3 15             	add    ebx,0x15
c000e7d6:	c1 e3 04             	shl    ebx,0x4
c000e7d9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7dd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7e4:	31 db                	xor    ebx,ebx
c000e7e6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7ea:	85 c0                	test   eax,eax
c000e7ec:	74 13                	je     c000e801 <int_handler+0x7c>
c000e7ee:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7f1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7f5:	74 1c                	je     c000e813 <int_handler+0x8e>
c000e7f7:	83 ec 08             	sub    esp,0x8
c000e7fa:	52                   	push   edx
c000e7fb:	56                   	push   esi
c000e7fc:	ff d0                	call   eax
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	43                   	inc    ebx
c000e802:	83 fb 04             	cmp    ebx,0x4
c000e805:	75 df                	jne    c000e7e6 <int_handler+0x61>
c000e807:	83 c4 0c             	add    esp,0xc
c000e80a:	31 c0                	xor    eax,eax
c000e80c:	5b                   	pop    ebx
c000e80d:	31 d2                	xor    edx,edx
c000e80f:	5e                   	pop    esi
c000e810:	5f                   	pop    edi
c000e811:	5d                   	pop    ebp
c000e812:	c3                   	ret    
c000e813:	83 ec 08             	sub    esp,0x8
c000e816:	52                   	push   edx
c000e817:	56                   	push   esi
c000e818:	ff d0                	call   eax
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	83 c4 0c             	add    esp,0xc
c000e820:	5b                   	pop    ebx
c000e821:	5e                   	pop    esi
c000e822:	5f                   	pop    edi
c000e823:	5d                   	pop    ebp
c000e824:	c3                   	ret    
c000e825:	90                   	nop

c000e826 <InterruptController::InterruptController(char const*)>:
c000e826:	83 ec 1c             	sub    esp,0x1c
c000e829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82d:	83 ec 08             	sub    esp,0x8
c000e830:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e834:	50                   	push   eax
c000e835:	e8 74 f8 ff ff       	call   c000e0ae <Device::Device(char const*)>
c000e83a:	83 c4 10             	add    esp,0x10
c000e83d:	ba 60 37 02 c0       	mov    edx,0xc0023760
c000e842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e846:	89 10                	mov    DWORD PTR [eax],edx
c000e848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e856:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e85e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e866:	7f 5e                	jg     c000e8c6 <InterruptController::InterruptController(char const*)+0xa0>
c000e868:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e870:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e875:	7f 49                	jg     c000e8c0 <InterruptController::InterruptController(char const*)+0x9a>
c000e877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e87f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e88a:	01 ca                	add    edx,ecx
c000e88c:	83 c2 54             	add    edx,0x54
c000e88f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e89f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8aa:	01 ca                	add    edx,ecx
c000e8ac:	81 c2 54 04 00 00    	add    edx,0x454
c000e8b2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8ba:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8be:	eb b0                	jmp    c000e870 <InterruptController::InterruptController(char const*)+0x4a>
c000e8c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8c4:	eb 98                	jmp    c000e85e <InterruptController::InterruptController(char const*)+0x38>
c000e8c6:	90                   	nop
c000e8c7:	83 c4 1c             	add    esp,0x1c
c000e8ca:	c3                   	ret    
c000e8cb:	90                   	nop

c000e8cc <InterruptController::~InterruptController()>:
c000e8cc:	83 ec 0c             	sub    esp,0xc
c000e8cf:	ba 60 37 02 c0       	mov    edx,0xc0023760
c000e8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d8:	89 10                	mov    DWORD PTR [eax],edx
c000e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	50                   	push   eax
c000e8e2:	e8 91 f4 ff ff       	call   c000dd78 <Device::~Device()>
c000e8e7:	83 c4 10             	add    esp,0x10
c000e8ea:	90                   	nop
c000e8eb:	83 c4 0c             	add    esp,0xc
c000e8ee:	c3                   	ret    
c000e8ef:	90                   	nop

c000e8f0 <InterruptController::~InterruptController()>:
c000e8f0:	83 ec 0c             	sub    esp,0xc
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8fa:	e8 cd ff ff ff       	call   c000e8cc <InterruptController::~InterruptController()>
c000e8ff:	83 c4 10             	add    esp,0x10
c000e902:	83 ec 08             	sub    esp,0x8
c000e905:	68 58 21 00 00       	push   0x2158
c000e90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e90e:	e8 70 e0 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000e913:	83 c4 10             	add    esp,0x10
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	c3                   	ret    

c000e91a <displayDebugInfo(regs*)>:
c000e91a:	55                   	push   ebp
c000e91b:	57                   	push   edi
c000e91c:	56                   	push   esi
c000e91d:	53                   	push   ebx
c000e91e:	83 ec 24             	sub    esp,0x24
c000e921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e925:	0f 20 c2             	mov    edx,cr0
c000e928:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e92c:	0f 20 d7             	mov    edi,cr2
c000e92f:	0f 20 de             	mov    esi,cr3
c000e932:	0f 20 e5             	mov    ebp,cr4
c000e935:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e938:	68 b6 34 02 c0       	push   0xc00234b6
c000e93d:	e8 22 e1 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e942:	59                   	pop    ecx
c000e943:	58                   	pop    eax
c000e944:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e947:	68 c1 34 02 c0       	push   0xc00234c1
c000e94c:	e8 13 e1 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e951:	58                   	pop    eax
c000e952:	5a                   	pop    edx
c000e953:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e956:	68 cc 34 02 c0       	push   0xc00234cc
c000e95b:	e8 04 e1 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e960:	59                   	pop    ecx
c000e961:	58                   	pop    eax
c000e962:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e965:	68 d7 34 02 c0       	push   0xc00234d7
c000e96a:	e8 f5 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e96f:	58                   	pop    eax
c000e970:	5a                   	pop    edx
c000e971:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e974:	68 e2 34 02 c0       	push   0xc00234e2
c000e979:	e8 e6 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e97e:	59                   	pop    ecx
c000e97f:	58                   	pop    eax
c000e980:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e983:	68 ed 34 02 c0       	push   0xc00234ed
c000e988:	e8 d7 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e98d:	58                   	pop    eax
c000e98e:	5a                   	pop    edx
c000e98f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e992:	68 f8 34 02 c0       	push   0xc00234f8
c000e997:	e8 c8 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e99c:	59                   	pop    ecx
c000e99d:	58                   	pop    eax
c000e99e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9a1:	68 03 35 02 c0       	push   0xc0023503
c000e9a6:	e8 b9 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9ab:	58                   	pop    eax
c000e9ac:	5a                   	pop    edx
c000e9ad:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9b0:	68 0e 35 02 c0       	push   0xc002350e
c000e9b5:	e8 aa e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9ba:	59                   	pop    ecx
c000e9bb:	58                   	pop    eax
c000e9bc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9bf:	68 1d 35 02 c0       	push   0xc002351d
c000e9c4:	e8 9b e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9c9:	58                   	pop    eax
c000e9ca:	5a                   	pop    edx
c000e9cb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9ce:	68 28 35 02 c0       	push   0xc0023528
c000e9d3:	e8 8c e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9d8:	59                   	pop    ecx
c000e9d9:	58                   	pop    eax
c000e9da:	57                   	push   edi
c000e9db:	68 33 35 02 c0       	push   0xc0023533
c000e9e0:	e8 7f e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9e5:	58                   	pop    eax
c000e9e6:	5a                   	pop    edx
c000e9e7:	56                   	push   esi
c000e9e8:	68 3e 35 02 c0       	push   0xc002353e
c000e9ed:	e8 72 e0 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000e9f2:	59                   	pop    ecx
c000e9f3:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000e9f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9fe:	e8 b6 bd ff ff       	call   c000a7b9 <setActiveTerminal(VgaText*)>
c000ea03:	58                   	pop    eax
c000ea04:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea07:	5a                   	pop    edx
c000ea08:	c1 e0 05             	shl    eax,0x5
c000ea0b:	05 40 58 02 c0       	add    eax,0xc0025840
c000ea10:	50                   	push   eax
c000ea11:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea1c:	e8 a5 c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ea21:	59                   	pop    ecx
c000ea22:	58                   	pop    eax
c000ea23:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea28:	68 49 35 02 c0       	push   0xc0023549
c000ea2d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea33:	e8 8e c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ea38:	58                   	pop    eax
c000ea39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea3e:	5a                   	pop    edx
c000ea3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea42:	83 c0 0c             	add    eax,0xc
c000ea45:	50                   	push   eax
c000ea46:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea51:	e8 70 c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ea56:	59                   	pop    ecx
c000ea57:	58                   	pop    eax
c000ea58:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea5d:	68 52 35 02 c0       	push   0xc0023552
c000ea62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea68:	e8 59 c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ea6d:	58                   	pop    eax
c000ea6e:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea73:	5a                   	pop    edx
c000ea74:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea7d:	e8 fe c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ea82:	59                   	pop    ecx
c000ea83:	58                   	pop    eax
c000ea84:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea89:	68 5a 35 02 c0       	push   0xc002355a
c000ea8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea94:	e8 2d c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ea99:	58                   	pop    eax
c000ea9a:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ea9f:	5a                   	pop    edx
c000eaa0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaa3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaa9:	e8 d2 c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eaae:	59                   	pop    ecx
c000eaaf:	58                   	pop    eax
c000eab0:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eab5:	68 62 35 02 c0       	push   0xc0023562
c000eaba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac0:	e8 01 c2 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eac5:	58                   	pop    eax
c000eac6:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eacb:	5a                   	pop    edx
c000eacc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eacf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead5:	e8 a6 c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eada:	59                   	pop    ecx
c000eadb:	58                   	pop    eax
c000eadc:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eae1:	68 6a 35 02 c0       	push   0xc002356a
c000eae6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaec:	e8 d5 c1 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eaf1:	58                   	pop    eax
c000eaf2:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eaf7:	5a                   	pop    edx
c000eaf8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eafb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb01:	e8 7a c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eb06:	59                   	pop    ecx
c000eb07:	58                   	pop    eax
c000eb08:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb0d:	68 72 35 02 c0       	push   0xc0023572
c000eb12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb18:	e8 a9 c1 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eb1d:	58                   	pop    eax
c000eb1e:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb23:	5a                   	pop    edx
c000eb24:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb2d:	e8 4e c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eb32:	59                   	pop    ecx
c000eb33:	58                   	pop    eax
c000eb34:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb39:	68 7a 35 02 c0       	push   0xc002357a
c000eb3e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb44:	e8 7d c1 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eb49:	58                   	pop    eax
c000eb4a:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb4f:	5a                   	pop    edx
c000eb50:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb59:	e8 22 c1 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eb5e:	59                   	pop    ecx
c000eb5f:	58                   	pop    eax
c000eb60:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb65:	68 82 35 02 c0       	push   0xc0023582
c000eb6a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb70:	e8 51 c1 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eb75:	58                   	pop    eax
c000eb76:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb7b:	5a                   	pop    edx
c000eb7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb80:	52                   	push   edx
c000eb81:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb87:	e8 f4 c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eb8c:	59                   	pop    ecx
c000eb8d:	58                   	pop    eax
c000eb8e:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eb93:	68 8b 35 02 c0       	push   0xc002358b
c000eb98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb9e:	e8 23 c1 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eba3:	58                   	pop    eax
c000eba4:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000eba9:	5a                   	pop    edx
c000ebaa:	57                   	push   edi
c000ebab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb1:	e8 ca c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ebb6:	59                   	pop    ecx
c000ebb7:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ebbc:	5f                   	pop    edi
c000ebbd:	68 93 35 02 c0       	push   0xc0023593
c000ebc2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc8:	e8 f9 c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ebcd:	58                   	pop    eax
c000ebce:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ebd3:	5a                   	pop    edx
c000ebd4:	56                   	push   esi
c000ebd5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebdb:	e8 a0 c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ebe0:	59                   	pop    ecx
c000ebe1:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ebe6:	5e                   	pop    esi
c000ebe7:	68 9b 35 02 c0       	push   0xc002359b
c000ebec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebf2:	e8 cf c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ebf7:	5f                   	pop    edi
c000ebf8:	58                   	pop    eax
c000ebf9:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ebfe:	55                   	push   ebp
c000ebff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec05:	e8 76 c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ec0a:	58                   	pop    eax
c000ec0b:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec10:	5a                   	pop    edx
c000ec11:	68 a3 35 02 c0       	push   0xc00235a3
c000ec16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec1c:	e8 a5 c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ec21:	0f 21 c0             	mov    eax,db0
c000ec24:	59                   	pop    ecx
c000ec25:	5e                   	pop    esi
c000ec26:	50                   	push   eax
c000ec27:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec2c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec32:	e8 49 c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ec37:	5f                   	pop    edi
c000ec38:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec3d:	5d                   	pop    ebp
c000ec3e:	68 ac 35 02 c0       	push   0xc00235ac
c000ec43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec49:	e8 78 c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ec4e:	0f 21 c8             	mov    eax,db1
c000ec51:	5a                   	pop    edx
c000ec52:	59                   	pop    ecx
c000ec53:	50                   	push   eax
c000ec54:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec59:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec5f:	e8 1c c0 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ec64:	5e                   	pop    esi
c000ec65:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec6a:	5f                   	pop    edi
c000ec6b:	68 b4 35 02 c0       	push   0xc00235b4
c000ec70:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec76:	e8 4b c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ec7b:	0f 21 d0             	mov    eax,db2
c000ec7e:	5d                   	pop    ebp
c000ec7f:	5a                   	pop    edx
c000ec80:	50                   	push   eax
c000ec81:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec86:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec8c:	e8 ef bf ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ec91:	59                   	pop    ecx
c000ec92:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ec97:	5e                   	pop    esi
c000ec98:	68 bc 35 02 c0       	push   0xc00235bc
c000ec9d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca3:	e8 1e c0 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000eca8:	0f 21 d8             	mov    eax,db3
c000ecab:	5f                   	pop    edi
c000ecac:	5d                   	pop    ebp
c000ecad:	50                   	push   eax
c000ecae:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ecb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb9:	e8 c2 bf ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ecbe:	58                   	pop    eax
c000ecbf:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ecc4:	5a                   	pop    edx
c000ecc5:	68 c4 35 02 c0       	push   0xc00235c4
c000ecca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd0:	e8 f1 bf ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ecd5:	0f 21 f0             	mov    eax,db6
c000ecd8:	59                   	pop    ecx
c000ecd9:	5e                   	pop    esi
c000ecda:	50                   	push   eax
c000ecdb:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ece0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece6:	e8 95 bf ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000eceb:	5f                   	pop    edi
c000ecec:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ecf1:	5d                   	pop    ebp
c000ecf2:	68 cc 35 02 c0       	push   0xc00235cc
c000ecf7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecfd:	e8 c4 bf ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ed02:	0f 21 f8             	mov    eax,db7
c000ed05:	5a                   	pop    edx
c000ed06:	59                   	pop    ecx
c000ed07:	50                   	push   eax
c000ed08:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ed0d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed13:	e8 68 bf ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ed18:	5e                   	pop    esi
c000ed19:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed1c:	e8 a0 87 00 00       	call   c00174c1 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed21:	83 c4 10             	add    esp,0x10
c000ed24:	85 c0                	test   eax,eax
c000ed26:	74 7d                	je     c000eda5 <displayDebugInfo(regs*)+0x48b>
c000ed28:	89 c6                	mov    esi,eax
c000ed2a:	50                   	push   eax
c000ed2b:	50                   	push   eax
c000ed2c:	56                   	push   esi
c000ed2d:	68 d4 35 02 c0       	push   0xc00235d4
c000ed32:	e8 2d dd ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000ed37:	5a                   	pop    edx
c000ed38:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ed3d:	59                   	pop    ecx
c000ed3e:	68 e2 35 02 c0       	push   0xc00235e2
c000ed43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed49:	e8 78 bf ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ed4e:	5f                   	pop    edi
c000ed4f:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ed54:	5d                   	pop    ebp
c000ed55:	56                   	push   esi
c000ed56:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed5c:	e8 65 bf ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ed61:	58                   	pop    eax
c000ed62:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ed67:	5a                   	pop    edx
c000ed68:	68 ee 35 02 c0       	push   0xc00235ee
c000ed6d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed73:	e8 4e bf ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c000ed78:	59                   	pop    ecx
c000ed79:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000ed7e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed84:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed87:	e8 6c 87 00 00       	call   c00174f8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed8c:	5b                   	pop    ebx
c000ed8d:	5d                   	pop    ebp
c000ed8e:	50                   	push   eax
c000ed8f:	57                   	push   edi
c000ed90:	e8 eb be ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c000ed95:	58                   	pop    eax
c000ed96:	5a                   	pop    edx
c000ed97:	56                   	push   esi
c000ed98:	68 fa 35 02 c0       	push   0xc00235fa
c000ed9d:	e8 c2 dc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000eda2:	83 c4 10             	add    esp,0x10
c000eda5:	fa                   	cli    
c000eda6:	f4                   	hlt    
c000eda7:	eb fe                	jmp    c000eda7 <displayDebugInfo(regs*)+0x48d>

c000eda9 <x87EmulHandler(regs*, void*)>:
c000eda9:	83 ec 0c             	sub    esp,0xc
c000edac:	0f 20 c2             	mov    edx,cr0
c000edaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edb4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edb8:	75 4b                	jne    c000ee05 <x87EmulHandler(regs*, void*)+0x5c>
c000edba:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000edbf:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edc5:	85 c0                	test   eax,eax
c000edc7:	74 05                	je     c000edce <x87EmulHandler(regs*, void*)+0x25>
c000edc9:	83 e2 08             	and    edx,0x8
c000edcc:	75 17                	jne    c000ede5 <x87EmulHandler(regs*, void*)+0x3c>
c000edce:	83 ec 0c             	sub    esp,0xc
c000edd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edd5:	e8 94 ab 00 00       	call   c001996e <Vm::x87Handler(regs*)>
c000edda:	83 c4 10             	add    esp,0x10
c000eddd:	84 c0                	test   al,al
c000eddf:	74 24                	je     c000ee05 <x87EmulHandler(regs*, void*)+0x5c>
c000ede1:	83 c4 0c             	add    esp,0xc
c000ede4:	c3                   	ret    
c000ede5:	83 ec 0c             	sub    esp,0xc
c000ede8:	68 20 36 02 c0       	push   0xc0023620
c000eded:	e8 72 dc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000edf2:	0f 06                	clts   
c000edf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edf9:	83 c4 10             	add    esp,0x10
c000edfc:	a3 68 65 02 c0       	mov    ds:0xc0026568,eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	c3                   	ret    
c000ee05:	83 ec 0c             	sub    esp,0xc
c000ee08:	68 0a 36 02 c0       	push   0xc002360a
c000ee0d:	e8 52 dc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000ee12:	5a                   	pop    edx
c000ee13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee17:	e8 fe fa ff ff       	call   c000e91a <displayDebugInfo(regs*)>

c000ee1c <gpFault(regs*, void*)>:
c000ee1c:	53                   	push   ebx
c000ee1d:	83 ec 14             	sub    esp,0x14
c000ee20:	c7 05 64 65 02 c0 2a 8e 01 c0 	mov    DWORD PTR ds:0xc0026564,0xc0018e2a
c000ee2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2e:	53                   	push   ebx
c000ee2f:	e8 f6 9f 00 00       	call   c0018e2a <Vm::faultHandler(regs*)>
c000ee34:	83 c4 10             	add    esp,0x10
c000ee37:	84 c0                	test   al,al
c000ee39:	74 05                	je     c000ee40 <gpFault(regs*, void*)+0x24>
c000ee3b:	83 c4 08             	add    esp,0x8
c000ee3e:	5b                   	pop    ebx
c000ee3f:	c3                   	ret    
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 2d 36 02 c0       	push   0xc002362d
c000ee48:	e8 17 dc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000ee4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee50:	e8 c5 fa ff ff       	call   c000e91a <displayDebugInfo(regs*)>

c000ee55 <pgFault(regs*, void*)>:
c000ee55:	53                   	push   ebx
c000ee56:	83 ec 10             	sub    esp,0x10
c000ee59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee5d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee60:	68 48 36 02 c0       	push   0xc0023648
c000ee65:	e8 fa db ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000ee6a:	0f 20 d0             	mov    eax,cr2
c000ee6d:	5a                   	pop    edx
c000ee6e:	59                   	pop    ecx
c000ee6f:	50                   	push   eax
c000ee70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee7e:	e8 df d6 ff ff       	call   c000c562 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee83:	83 c4 10             	add    esp,0x10
c000ee86:	84 c0                	test   al,al
c000ee88:	74 05                	je     c000ee8f <pgFault(regs*, void*)+0x3a>
c000ee8a:	83 c4 08             	add    esp,0x8
c000ee8d:	5b                   	pop    ebx
c000ee8e:	c3                   	ret    
c000ee8f:	83 ec 0c             	sub    esp,0xc
c000ee92:	68 5d 36 02 c0       	push   0xc002365d
c000ee97:	e8 c8 db ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000ee9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee9f:	e8 76 fa ff ff       	call   c000e91a <displayDebugInfo(regs*)>

c000eea4 <otherISRHandler(regs*, void*)>:
c000eea4:	53                   	push   ebx
c000eea5:	83 ec 0c             	sub    esp,0xc
c000eea8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eeac:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eeaf:	50                   	push   eax
c000eeb0:	50                   	push   eax
c000eeb1:	68 6a 36 02 c0       	push   0xc002366a
c000eeb6:	e8 a9 db ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000eebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eebe:	e8 57 fa ff ff       	call   c000e91a <displayDebugInfo(regs*)>

c000eec3 <opcodeFault(regs*, void*)>:
c000eec3:	55                   	push   ebp
c000eec4:	89 e5                	mov    ebp,esp
c000eec6:	56                   	push   esi
c000eec7:	53                   	push   ebx
c000eec8:	83 ec 30             	sub    esp,0x30
c000eecb:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000eed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eed6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eedc:	84 c0                	test   al,al
c000eede:	74 24                	je     c000ef04 <opcodeFault(regs*, void*)+0x41>
c000eee0:	83 ec 0c             	sub    esp,0xc
c000eee3:	68 88 36 02 c0       	push   0xc0023688
c000eee8:	e8 77 db ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eef3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eef6:	8d 50 19             	lea    edx,[eax+0x19]
c000eef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eeff:	e9 7b 03 00 00       	jmp    c000f27f <opcodeFault(regs*, void*)+0x3bc>
c000ef04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef07:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef0d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef1d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef1f:	3c f0                	cmp    al,0xf0
c000ef21:	75 17                	jne    c000ef3a <opcodeFault(regs*, void*)+0x77>
c000ef23:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ef2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef32:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef35:	e9 d6 00 00 00       	jmp    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000ef3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef3d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef3f:	3c f2                	cmp    al,0xf2
c000ef41:	74 09                	je     c000ef4c <opcodeFault(regs*, void*)+0x89>
c000ef43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef46:	8a 00                	mov    al,BYTE PTR [eax]
c000ef48:	3c f3                	cmp    al,0xf3
c000ef4a:	75 1b                	jne    c000ef67 <opcodeFault(regs*, void*)+0xa4>
c000ef4c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef50:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef59:	8d 50 01             	lea    edx,[eax+0x1]
c000ef5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef62:	e9 a9 00 00 00       	jmp    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000ef67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef6a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef6c:	3c 66                	cmp    al,0x66
c000ef6e:	75 1b                	jne    c000ef8b <opcodeFault(regs*, void*)+0xc8>
c000ef70:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef7d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef86:	e9 85 00 00 00       	jmp    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000ef8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef8e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef90:	3c 67                	cmp    al,0x67
c000ef92:	75 18                	jne    c000efac <opcodeFault(regs*, void*)+0xe9>
c000ef94:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef98:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa1:	8d 50 01             	lea    edx,[eax+0x1]
c000efa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efaa:	eb 64                	jmp    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000efac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efaf:	8a 00                	mov    al,BYTE PTR [eax]
c000efb1:	3c 2e                	cmp    al,0x2e
c000efb3:	74 09                	je     c000efbe <opcodeFault(regs*, void*)+0xfb>
c000efb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb8:	8a 00                	mov    al,BYTE PTR [eax]
c000efba:	3c 3e                	cmp    al,0x3e
c000efbc:	75 18                	jne    c000efd6 <opcodeFault(regs*, void*)+0x113>
c000efbe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efc2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efcb:	8d 50 01             	lea    edx,[eax+0x1]
c000efce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efd4:	eb 3a                	jmp    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000efd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efd9:	8a 00                	mov    al,BYTE PTR [eax]
c000efdb:	3c 36                	cmp    al,0x36
c000efdd:	74 1b                	je     c000effa <opcodeFault(regs*, void*)+0x137>
c000efdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe2:	8a 00                	mov    al,BYTE PTR [eax]
c000efe4:	3c 26                	cmp    al,0x26
c000efe6:	74 12                	je     c000effa <opcodeFault(regs*, void*)+0x137>
c000efe8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efeb:	8a 00                	mov    al,BYTE PTR [eax]
c000efed:	3c 64                	cmp    al,0x64
c000efef:	74 09                	je     c000effa <opcodeFault(regs*, void*)+0x137>
c000eff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff4:	8a 00                	mov    al,BYTE PTR [eax]
c000eff6:	3c 65                	cmp    al,0x65
c000eff8:	75 16                	jne    c000f010 <opcodeFault(regs*, void*)+0x14d>
c000effa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000effe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f004:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f007:	8d 50 01             	lea    edx,[eax+0x1]
c000f00a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f00d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f013:	8a 00                	mov    al,BYTE PTR [eax]
c000f015:	3c 0f                	cmp    al,0xf
c000f017:	0f 85 8d 01 00 00    	jne    c000f1aa <opcodeFault(regs*, void*)+0x2e7>
c000f01d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f020:	40                   	inc    eax
c000f021:	8a 00                	mov    al,BYTE PTR [eax]
c000f023:	3c c7                	cmp    al,0xc7
c000f025:	0f 85 7f 01 00 00    	jne    c000f1aa <opcodeFault(regs*, void*)+0x2e7>
c000f02b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f02e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f031:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f034:	8d 50 01             	lea    edx,[eax+0x1]
c000f037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f03a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f03d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f040:	50                   	push   eax
c000f041:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f044:	50                   	push   eax
c000f045:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f048:	50                   	push   eax
c000f049:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f04c:	e8 ed 49 00 00       	call   c0013a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f057:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f05a:	83 f0 01             	xor    eax,0x1
c000f05d:	84 c0                	test   al,al
c000f05f:	0f 84 45 01 00 00    	je     c000f1aa <opcodeFault(regs*, void*)+0x2e7>
c000f065:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f068:	3c 01                	cmp    al,0x1
c000f06a:	0f 85 3a 01 00 00    	jne    c000f1aa <opcodeFault(regs*, void*)+0x2e7>
c000f070:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f073:	83 f0 01             	xor    eax,0x1
c000f076:	84 c0                	test   al,al
c000f078:	0f 84 2c 01 00 00    	je     c000f1aa <opcodeFault(regs*, void*)+0x2e7>
c000f07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f081:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f084:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f087:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f08e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f091:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f094:	89 c2                	mov    edx,eax
c000f096:	b8 00 00 00 00       	mov    eax,0x0
c000f09b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f09e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0a7:	ba 00 00 00 00       	mov    edx,0x0
c000f0ac:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0af:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0b8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0bb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0c8:	89 c2                	mov    edx,eax
c000f0ca:	b8 00 00 00 00       	mov    eax,0x0
c000f0cf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0d2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0db:	ba 00 00 00 00       	mov    edx,0x0
c000f0e0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0e3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0e6:	fa                   	cli    
c000f0e7:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f0ec:	40                   	inc    eax
c000f0ed:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f0f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0f5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	89 c1                	mov    ecx,eax
c000f0fc:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f0ff:	89 cb                	mov    ebx,ecx
c000f101:	89 d0                	mov    eax,edx
c000f103:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f106:	89 c6                	mov    esi,eax
c000f108:	89 f0                	mov    eax,esi
c000f10a:	09 d8                	or     eax,ebx
c000f10c:	85 c0                	test   eax,eax
c000f10e:	75 21                	jne    c000f131 <opcodeFault(regs*, void*)+0x26e>
c000f110:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f113:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f116:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f119:	89 01                	mov    DWORD PTR [ecx],eax
c000f11b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f11e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f121:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f124:	83 c8 40             	or     eax,0x40
c000f127:	89 c2                	mov    edx,eax
c000f129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f12c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f12f:	eb 3e                	jmp    c000f16f <opcodeFault(regs*, void*)+0x2ac>
c000f131:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f137:	8b 00                	mov    eax,DWORD PTR [eax]
c000f139:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f13c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f13f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f145:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f148:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f14b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f14e:	89 d0                	mov    eax,edx
c000f150:	31 d2                	xor    edx,edx
c000f152:	89 c3                	mov    ebx,eax
c000f154:	89 d6                	mov    esi,edx
c000f156:	89 da                	mov    edx,ebx
c000f158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f161:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f164:	83 e0 bf             	and    eax,0xffffffbf
c000f167:	89 c2                	mov    edx,eax
c000f169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f16c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f16f:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f174:	48                   	dec    eax
c000f175:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f17a:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f17f:	85 c0                	test   eax,eax
c000f181:	75 01                	jne    c000f184 <opcodeFault(regs*, void*)+0x2c1>
c000f183:	fb                   	sti    
c000f184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f187:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f18a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f18d:	01 c2                	add    edx,eax
c000f18f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f192:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f195:	83 ec 0c             	sub    esp,0xc
c000f198:	68 ab 36 02 c0       	push   0xc00236ab
c000f19d:	e8 c2 d8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000f1a2:	83 c4 10             	add    esp,0x10
c000f1a5:	e9 d5 00 00 00       	jmp    c000f27f <opcodeFault(regs*, void*)+0x3bc>
c000f1aa:	83 ec 0c             	sub    esp,0xc
c000f1ad:	68 be 36 02 c0       	push   0xc00236be
c000f1b2:	e8 ad d8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000f1b7:	83 c4 10             	add    esp,0x10
c000f1ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1bd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1c6:	c1 e0 04             	shl    eax,0x4
c000f1c9:	01 d0                	add    eax,edx
c000f1cb:	83 c0 03             	add    eax,0x3
c000f1ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d0:	0f b6 d8             	movzx  ebx,al
c000f1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1df:	c1 e0 04             	shl    eax,0x4
c000f1e2:	01 d0                	add    eax,edx
c000f1e4:	83 c0 02             	add    eax,0x2
c000f1e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e9:	0f b6 c8             	movzx  ecx,al
c000f1ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ef:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1f8:	c1 e0 04             	shl    eax,0x4
c000f1fb:	01 d0                	add    eax,edx
c000f1fd:	40                   	inc    eax
c000f1fe:	8a 00                	mov    al,BYTE PTR [eax]
c000f200:	0f b6 d0             	movzx  edx,al
c000f203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f206:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f20f:	c1 e0 04             	shl    eax,0x4
c000f212:	01 f0                	add    eax,esi
c000f214:	8a 00                	mov    al,BYTE PTR [eax]
c000f216:	0f b6 c0             	movzx  eax,al
c000f219:	83 ec 0c             	sub    esp,0xc
c000f21c:	53                   	push   ebx
c000f21d:	51                   	push   ecx
c000f21e:	52                   	push   edx
c000f21f:	50                   	push   eax
c000f220:	68 d0 36 02 c0       	push   0xc00236d0
c000f225:	e8 3a d8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000f22a:	83 c4 20             	add    esp,0x20
c000f22d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f230:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f233:	83 c0 03             	add    eax,0x3
c000f236:	8a 00                	mov    al,BYTE PTR [eax]
c000f238:	0f b6 d8             	movzx  ebx,al
c000f23b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f23e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f241:	83 c0 02             	add    eax,0x2
c000f244:	8a 00                	mov    al,BYTE PTR [eax]
c000f246:	0f b6 c8             	movzx  ecx,al
c000f249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f24c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f24f:	40                   	inc    eax
c000f250:	8a 00                	mov    al,BYTE PTR [eax]
c000f252:	0f b6 d0             	movzx  edx,al
c000f255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f258:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f25b:	8a 00                	mov    al,BYTE PTR [eax]
c000f25d:	0f b6 c0             	movzx  eax,al
c000f260:	83 ec 0c             	sub    esp,0xc
c000f263:	53                   	push   ebx
c000f264:	51                   	push   ecx
c000f265:	52                   	push   edx
c000f266:	50                   	push   eax
c000f267:	68 f8 36 02 c0       	push   0xc00236f8
c000f26c:	e8 f3 d7 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c000f271:	83 c4 20             	add    esp,0x20
c000f274:	83 ec 0c             	sub    esp,0xc
c000f277:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f27a:	e8 9b f6 ff ff       	call   c000e91a <displayDebugInfo(regs*)>
c000f27f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f282:	5b                   	pop    ebx
c000f283:	5e                   	pop    esi
c000f284:	5d                   	pop    ebp
c000f285:	c3                   	ret    

c000f286 <displayProgramFault(char const*)>:
c000f286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f28b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f28e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f294:	85 c0                	test   eax,eax
c000f296:	74 15                	je     c000f2ad <displayProgramFault(char const*)+0x27>
c000f298:	83 ec 0c             	sub    esp,0xc
c000f29b:	6a 04                	push   0x4
c000f29d:	6a 0f                	push   0xf
c000f29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a3:	50                   	push   eax
c000f2a4:	e8 19 b7 ff ff       	call   c000a9c2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2a9:	83 c4 1c             	add    esp,0x1c
c000f2ac:	c3                   	ret    
c000f2ad:	c3                   	ret    

c000f2ae <setupInterruptController()>:
c000f2ae:	55                   	push   ebp
c000f2af:	89 e5                	mov    ebp,esp
c000f2b1:	53                   	push   ebx
c000f2b2:	83 ec 24             	sub    esp,0x24
c000f2b5:	b8 00 00 00 00       	mov    eax,0x0
c000f2ba:	85 c0                	test   eax,eax
c000f2bc:	0f 95 c0             	setne  al
c000f2bf:	84 c0                	test   al,al
c000f2c1:	74 5b                	je     c000f31e <setupInterruptController()+0x70>
c000f2c3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2d0:	e8 ee a6 ff ff       	call   c00099c3 <malloc>
c000f2d5:	83 c4 10             	add    esp,0x10
c000f2d8:	89 c3                	mov    ebx,eax
c000f2da:	83 ec 0c             	sub    esp,0xc
c000f2dd:	53                   	push   ebx
c000f2de:	e8 d7 0b 01 00       	call   c001feba <APIC::APIC()>
c000f2e3:	83 c4 10             	add    esp,0x10
c000f2e6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2e9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f1:	83 c0 08             	add    eax,0x8
c000f2f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f6:	6a 00                	push   0x0
c000f2f8:	6a 00                	push   0x0
c000f2fa:	6a 00                	push   0x0
c000f2fc:	52                   	push   edx
c000f2fd:	ff d0                	call   eax
c000f2ff:	83 c4 10             	add    esp,0x10
c000f302:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000f307:	83 ec 08             	sub    esp,0x8
c000f30a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f30d:	50                   	push   eax
c000f30e:	e8 97 eb ff ff       	call   c000deaa <Device::addChild(Device*)>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f319:	e9 79 03 00 00       	jmp    c000f697 <setupInterruptController()+0x3e9>
c000f31e:	a0 40 6d 02 c0       	mov    al,ds:0xc0026d40
c000f323:	84 c0                	test   al,al
c000f325:	75 14                	jne    c000f33b <setupInterruptController()+0x8d>
c000f327:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000f32c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f332:	83 e2 fe             	and    edx,0xfffffffe
c000f335:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f33b:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000f340:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f346:	83 e0 01             	and    eax,0x1
c000f349:	84 c0                	test   al,al
c000f34b:	0f 95 c0             	setne  al
c000f34e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f351:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f358:	83 ec 0c             	sub    esp,0xc
c000f35b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f35e:	e8 60 a6 ff ff       	call   c00099c3 <malloc>
c000f363:	83 c4 10             	add    esp,0x10
c000f366:	89 c3                	mov    ebx,eax
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	53                   	push   ebx
c000f36c:	e8 a1 10 01 00       	call   c0020412 <PIC::PIC()>
c000f371:	83 c4 10             	add    esp,0x10
c000f374:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f377:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f37a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f37f:	83 c0 08             	add    eax,0x8
c000f382:	8b 00                	mov    eax,DWORD PTR [eax]
c000f384:	6a 00                	push   0x0
c000f386:	6a 00                	push   0x0
c000f388:	6a 00                	push   0x0
c000f38a:	52                   	push   edx
c000f38b:	ff d0                	call   eax
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f394:	74 73                	je     c000f409 <setupInterruptController()+0x15b>
c000f396:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f39c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f39e:	83 c0 0c             	add    eax,0xc
c000f3a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a3:	6a 00                	push   0x0
c000f3a5:	6a 00                	push   0x0
c000f3a7:	6a 00                	push   0x0
c000f3a9:	52                   	push   edx
c000f3aa:	ff d0                	call   eax
c000f3ac:	83 c4 10             	add    esp,0x10
c000f3af:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3b3:	74 15                	je     c000f3ca <setupInterruptController()+0x11c>
c000f3b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ba:	83 c0 04             	add    eax,0x4
c000f3bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3bf:	83 ec 0c             	sub    esp,0xc
c000f3c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3c5:	ff d0                	call   eax
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3d1:	83 ec 0c             	sub    esp,0xc
c000f3d4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3d7:	e8 e7 a5 ff ff       	call   c00099c3 <malloc>
c000f3dc:	83 c4 10             	add    esp,0x10
c000f3df:	89 c3                	mov    ebx,eax
c000f3e1:	83 ec 0c             	sub    esp,0xc
c000f3e4:	53                   	push   ebx
c000f3e5:	e8 d0 0a 01 00       	call   c001feba <APIC::APIC()>
c000f3ea:	83 c4 10             	add    esp,0x10
c000f3ed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f8:	83 c0 08             	add    eax,0x8
c000f3fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fd:	6a 00                	push   0x0
c000f3ff:	6a 00                	push   0x0
c000f401:	6a 00                	push   0x0
c000f403:	52                   	push   edx
c000f404:	ff d0                	call   eax
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000f40e:	83 ec 08             	sub    esp,0x8
c000f411:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f414:	50                   	push   eax
c000f415:	e8 90 ea ff ff       	call   c000deaa <Device::addChild(Device*)>
c000f41a:	83 c4 10             	add    esp,0x10
c000f41d:	c7 05 68 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026568,0x0
c000f427:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f42a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42c:	83 c0 24             	add    eax,0x24
c000f42f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f431:	6a 00                	push   0x0
c000f433:	68 a4 ee 00 c0       	push   0xc000eea4
c000f438:	6a 00                	push   0x0
c000f43a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f43d:	ff d0                	call   eax
c000f43f:	83 c4 10             	add    esp,0x10
c000f442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f445:	8b 00                	mov    eax,DWORD PTR [eax]
c000f447:	83 c0 24             	add    eax,0x24
c000f44a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44c:	6a 00                	push   0x0
c000f44e:	68 a4 ee 00 c0       	push   0xc000eea4
c000f453:	6a 01                	push   0x1
c000f455:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f458:	ff d0                	call   eax
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f460:	8b 00                	mov    eax,DWORD PTR [eax]
c000f462:	83 c0 24             	add    eax,0x24
c000f465:	8b 00                	mov    eax,DWORD PTR [eax]
c000f467:	6a 00                	push   0x0
c000f469:	68 77 e7 00 c0       	push   0xc000e777
c000f46e:	6a 02                	push   0x2
c000f470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f473:	ff d0                	call   eax
c000f475:	83 c4 10             	add    esp,0x10
c000f478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f47b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47d:	83 c0 24             	add    eax,0x24
c000f480:	8b 00                	mov    eax,DWORD PTR [eax]
c000f482:	6a 00                	push   0x0
c000f484:	68 a4 ee 00 c0       	push   0xc000eea4
c000f489:	6a 03                	push   0x3
c000f48b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f48e:	ff d0                	call   eax
c000f490:	83 c4 10             	add    esp,0x10
c000f493:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f496:	8b 00                	mov    eax,DWORD PTR [eax]
c000f498:	83 c0 24             	add    eax,0x24
c000f49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49d:	6a 00                	push   0x0
c000f49f:	68 a4 ee 00 c0       	push   0xc000eea4
c000f4a4:	6a 04                	push   0x4
c000f4a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4a9:	ff d0                	call   eax
c000f4ab:	83 c4 10             	add    esp,0x10
c000f4ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b3:	83 c0 24             	add    eax,0x24
c000f4b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b8:	6a 00                	push   0x0
c000f4ba:	68 a4 ee 00 c0       	push   0xc000eea4
c000f4bf:	6a 05                	push   0x5
c000f4c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4c4:	ff d0                	call   eax
c000f4c6:	83 c4 10             	add    esp,0x10
c000f4c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ce:	83 c0 24             	add    eax,0x24
c000f4d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d3:	6a 00                	push   0x0
c000f4d5:	68 c3 ee 00 c0       	push   0xc000eec3
c000f4da:	6a 06                	push   0x6
c000f4dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4df:	ff d0                	call   eax
c000f4e1:	83 c4 10             	add    esp,0x10
c000f4e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e9:	83 c0 24             	add    eax,0x24
c000f4ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ee:	6a 00                	push   0x0
c000f4f0:	68 a9 ed 00 c0       	push   0xc000eda9
c000f4f5:	6a 07                	push   0x7
c000f4f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4fa:	ff d0                	call   eax
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f502:	8b 00                	mov    eax,DWORD PTR [eax]
c000f504:	83 c0 24             	add    eax,0x24
c000f507:	8b 00                	mov    eax,DWORD PTR [eax]
c000f509:	6a 00                	push   0x0
c000f50b:	68 92 e5 00 c0       	push   0xc000e592
c000f510:	6a 08                	push   0x8
c000f512:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f515:	ff d0                	call   eax
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f51d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51f:	83 c0 24             	add    eax,0x24
c000f522:	8b 00                	mov    eax,DWORD PTR [eax]
c000f524:	6a 00                	push   0x0
c000f526:	68 a4 ee 00 c0       	push   0xc000eea4
c000f52b:	6a 09                	push   0x9
c000f52d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f530:	ff d0                	call   eax
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f538:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53a:	83 c0 24             	add    eax,0x24
c000f53d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53f:	6a 00                	push   0x0
c000f541:	68 a4 ee 00 c0       	push   0xc000eea4
c000f546:	6a 0a                	push   0xa
c000f548:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f54b:	ff d0                	call   eax
c000f54d:	83 c4 10             	add    esp,0x10
c000f550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f553:	8b 00                	mov    eax,DWORD PTR [eax]
c000f555:	83 c0 24             	add    eax,0x24
c000f558:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55a:	6a 00                	push   0x0
c000f55c:	68 a4 ee 00 c0       	push   0xc000eea4
c000f561:	6a 0b                	push   0xb
c000f563:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f566:	ff d0                	call   eax
c000f568:	83 c4 10             	add    esp,0x10
c000f56b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f56e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f570:	83 c0 24             	add    eax,0x24
c000f573:	8b 00                	mov    eax,DWORD PTR [eax]
c000f575:	6a 00                	push   0x0
c000f577:	68 a4 ee 00 c0       	push   0xc000eea4
c000f57c:	6a 0c                	push   0xc
c000f57e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f581:	ff d0                	call   eax
c000f583:	83 c4 10             	add    esp,0x10
c000f586:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f589:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58b:	83 c0 24             	add    eax,0x24
c000f58e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f590:	6a 00                	push   0x0
c000f592:	68 1c ee 00 c0       	push   0xc000ee1c
c000f597:	6a 0d                	push   0xd
c000f599:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f59c:	ff d0                	call   eax
c000f59e:	83 c4 10             	add    esp,0x10
c000f5a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a6:	83 c0 24             	add    eax,0x24
c000f5a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 55 ee 00 c0       	push   0xc000ee55
c000f5b2:	6a 0e                	push   0xe
c000f5b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5b7:	ff d0                	call   eax
c000f5b9:	83 c4 10             	add    esp,0x10
c000f5bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c1:	83 c0 24             	add    eax,0x24
c000f5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c6:	6a 00                	push   0x0
c000f5c8:	68 a4 ee 00 c0       	push   0xc000eea4
c000f5cd:	6a 0f                	push   0xf
c000f5cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5d2:	ff d0                	call   eax
c000f5d4:	83 c4 10             	add    esp,0x10
c000f5d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5dc:	83 c0 24             	add    eax,0x24
c000f5df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e1:	6a 00                	push   0x0
c000f5e3:	68 a4 ee 00 c0       	push   0xc000eea4
c000f5e8:	6a 10                	push   0x10
c000f5ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ed:	ff d0                	call   eax
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f7:	83 c0 24             	add    eax,0x24
c000f5fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5fc:	6a 00                	push   0x0
c000f5fe:	68 a4 ee 00 c0       	push   0xc000eea4
c000f603:	6a 11                	push   0x11
c000f605:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f608:	ff d0                	call   eax
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f610:	8b 00                	mov    eax,DWORD PTR [eax]
c000f612:	83 c0 24             	add    eax,0x24
c000f615:	8b 00                	mov    eax,DWORD PTR [eax]
c000f617:	6a 00                	push   0x0
c000f619:	68 a4 ee 00 c0       	push   0xc000eea4
c000f61e:	6a 12                	push   0x12
c000f620:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f623:	ff d0                	call   eax
c000f625:	83 c4 10             	add    esp,0x10
c000f628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f62b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62d:	83 c0 24             	add    eax,0x24
c000f630:	8b 00                	mov    eax,DWORD PTR [eax]
c000f632:	6a 00                	push   0x0
c000f634:	68 a4 ee 00 c0       	push   0xc000eea4
c000f639:	6a 13                	push   0x13
c000f63b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f63e:	ff d0                	call   eax
c000f640:	83 c4 10             	add    esp,0x10
c000f643:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f646:	8b 00                	mov    eax,DWORD PTR [eax]
c000f648:	83 c0 24             	add    eax,0x24
c000f64b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64d:	6a 00                	push   0x0
c000f64f:	68 a4 ee 00 c0       	push   0xc000eea4
c000f654:	6a 14                	push   0x14
c000f656:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f659:	ff d0                	call   eax
c000f65b:	83 c4 10             	add    esp,0x10
c000f65e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f661:	8b 00                	mov    eax,DWORD PTR [eax]
c000f663:	83 c0 24             	add    eax,0x24
c000f666:	8b 00                	mov    eax,DWORD PTR [eax]
c000f668:	6a 00                	push   0x0
c000f66a:	68 a4 ee 00 c0       	push   0xc000eea4
c000f66f:	6a 1e                	push   0x1e
c000f671:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f674:	ff d0                	call   eax
c000f676:	83 c4 10             	add    esp,0x10
c000f679:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67e:	83 c0 24             	add    eax,0x24
c000f681:	8b 00                	mov    eax,DWORD PTR [eax]
c000f683:	6a 00                	push   0x0
c000f685:	68 37 65 01 c0       	push   0xc0016537
c000f68a:	6a 60                	push   0x60
c000f68c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f68f:	ff d0                	call   eax
c000f691:	83 c4 10             	add    esp,0x10
c000f694:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f697:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f69a:	c9                   	leave  
c000f69b:	c3                   	ret    

c000f69c <InterruptController::convertLegacyIRQNumber(int)>:
c000f69c:	55                   	push   ebp
c000f69d:	89 e5                	mov    ebp,esp
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a5:	83 ec 0c             	sub    esp,0xc
c000f6a8:	50                   	push   eax
c000f6a9:	e8 fc ea ff ff       	call   c000e1aa <Device::getName()>
c000f6ae:	83 c4 10             	add    esp,0x10
c000f6b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f6b3:	3c 41                	cmp    al,0x41
c000f6b5:	0f 94 c0             	sete   al
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 28                	je     c000f6e4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6bc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6c0:	7f 12                	jg     c000f6d4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6c5:	05 e0 5a 02 c0       	add    eax,0xc0025ae0
c000f6ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f6cc:	0f b6 c0             	movzx  eax,al
c000f6cf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6d2:	eb 10                	jmp    c000f6e4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6d4:	83 ec 0c             	sub    esp,0xc
c000f6d7:	68 20 37 02 c0       	push   0xc0023720
c000f6dc:	e8 44 4c 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6e7:	c9                   	leave  
c000f6e8:	c3                   	ret    
c000f6e9:	90                   	nop

c000f6ea <startGUI(void*)>:
c000f6ea:	55                   	push   ebp
c000f6eb:	89 e5                	mov    ebp,esp
c000f6ed:	53                   	push   ebx
c000f6ee:	83 ec 04             	sub    esp,0x4
c000f6f1:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f6f6:	48                   	dec    eax
c000f6f7:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f6fc:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f701:	85 c0                	test   eax,eax
c000f703:	75 01                	jne    c000f706 <startGUI(void*)+0x1c>
c000f705:	fb                   	sti    
c000f706:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c000f70c:	83 ec 08             	sub    esp,0x8
c000f70f:	6a 01                	push   0x1
c000f711:	68 a0 37 02 c0       	push   0xc00237a0
c000f716:	e8 f7 7d 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c000f71b:	83 c4 10             	add    esp,0x10
c000f71e:	83 ec 08             	sub    esp,0x8
c000f721:	53                   	push   ebx
c000f722:	50                   	push   eax
c000f723:	e8 1b 80 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c000f728:	83 c4 10             	add    esp,0x10
c000f72b:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c000f731:	83 ec 08             	sub    esp,0x8
c000f734:	6a 01                	push   0x1
c000f736:	68 ba 37 02 c0       	push   0xc00237ba
c000f73b:	e8 d2 7d 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c000f740:	83 c4 10             	add    esp,0x10
c000f743:	83 ec 08             	sub    esp,0x8
c000f746:	53                   	push   ebx
c000f747:	50                   	push   eax
c000f748:	e8 f6 7f 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c000f74d:	83 c4 10             	add    esp,0x10
c000f750:	90                   	nop
c000f751:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f754:	c9                   	leave  
c000f755:	c3                   	ret    

c000f756 <startGUIVESA(void*)>:
c000f756:	55                   	push   ebp
c000f757:	89 e5                	mov    ebp,esp
c000f759:	53                   	push   ebx
c000f75a:	83 ec 04             	sub    esp,0x4
c000f75d:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f762:	48                   	dec    eax
c000f763:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f768:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f76d:	85 c0                	test   eax,eax
c000f76f:	75 01                	jne    c000f772 <startGUIVESA(void*)+0x1c>
c000f771:	fb                   	sti    
c000f772:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c000f778:	83 ec 08             	sub    esp,0x8
c000f77b:	6a 01                	push   0x1
c000f77d:	68 d4 37 02 c0       	push   0xc00237d4
c000f782:	e8 8b 7d 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	83 ec 08             	sub    esp,0x8
c000f78d:	53                   	push   ebx
c000f78e:	50                   	push   eax
c000f78f:	e8 af 7f 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c000f794:	83 c4 10             	add    esp,0x10
c000f797:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c000f79d:	83 ec 08             	sub    esp,0x8
c000f7a0:	6a 01                	push   0x1
c000f7a2:	68 ba 37 02 c0       	push   0xc00237ba
c000f7a7:	e8 66 7d 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c000f7ac:	83 c4 10             	add    esp,0x10
c000f7af:	83 ec 08             	sub    esp,0x8
c000f7b2:	53                   	push   ebx
c000f7b3:	50                   	push   eax
c000f7b4:	e8 8a 7f 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c000f7b9:	83 c4 10             	add    esp,0x10
c000f7bc:	90                   	nop
c000f7bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7c0:	c9                   	leave  
c000f7c1:	c3                   	ret    

c000f7c2 <sendKeyToTerminal(unsigned char)>:
c000f7c2:	55                   	push   ebp
c000f7c3:	89 e5                	mov    ebp,esp
c000f7c5:	83 ec 28             	sub    esp,0x28
c000f7c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7ce:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000f7d3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7d7:	83 ec 08             	sub    esp,0x8
c000f7da:	52                   	push   edx
c000f7db:	50                   	push   eax
c000f7dc:	e8 89 b6 ff ff       	call   c000ae6a <VgaText::receiveKey(unsigned char)>
c000f7e1:	83 c4 10             	add    esp,0x10
c000f7e4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7e8:	0f 85 8f 00 00 00    	jne    c000f87d <sendKeyToTerminal(unsigned char)+0xbb>
c000f7ee:	fa                   	cli    
c000f7ef:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f7f4:	40                   	inc    eax
c000f7f5:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f7fa:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c000f7ff:	40                   	inc    eax
c000f800:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c000f805:	a1 80 65 02 c0       	mov    eax,ds:0xc0026580
c000f80a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f80d:	c7 05 80 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026580,0x0
c000f817:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f81b:	74 1f                	je     c000f83c <sendKeyToTerminal(unsigned char)+0x7a>
c000f81d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f820:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f823:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f826:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f829:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f82c:	83 ec 0c             	sub    esp,0xc
c000f82f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f832:	e8 7d 8b 00 00       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c000f837:	83 c4 10             	add    esp,0x10
c000f83a:	eb db                	jmp    c000f817 <sendKeyToTerminal(unsigned char)+0x55>
c000f83c:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c000f841:	48                   	dec    eax
c000f842:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c000f847:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c000f84c:	85 c0                	test   eax,eax
c000f84e:	75 18                	jne    c000f868 <sendKeyToTerminal(unsigned char)+0xa6>
c000f850:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c000f855:	85 c0                	test   eax,eax
c000f857:	74 0f                	je     c000f868 <sendKeyToTerminal(unsigned char)+0xa6>
c000f859:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c000f863:	e8 90 86 00 00       	call   c0017ef8 <schedule()>
c000f868:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f86d:	48                   	dec    eax
c000f86e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000f873:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000f878:	85 c0                	test   eax,eax
c000f87a:	75 01                	jne    c000f87d <sendKeyToTerminal(unsigned char)+0xbb>
c000f87c:	fb                   	sti    
c000f87d:	90                   	nop
c000f87e:	c9                   	leave  
c000f87f:	c3                   	ret    

c000f880 <sendKeyboardToken(KeyboardToken)>:
c000f880:	55                   	push   ebp
c000f881:	89 e5                	mov    ebp,esp
c000f883:	83 ec 18             	sub    esp,0x18
c000f886:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f88c:	0f b7 c0             	movzx  eax,ax
c000f88f:	83 f2 01             	xor    edx,0x1
c000f892:	88 90 a0 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a60],dl
c000f898:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000f89d:	85 c0                	test   eax,eax
c000f89f:	74 24                	je     c000f8c5 <sendKeyboardToken(KeyboardToken)+0x45>
c000f8a1:	8b 0d 88 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026588
c000f8a7:	83 ec 04             	sub    esp,0x4
c000f8aa:	68 a0 65 02 c0       	push   0xc00265a0
c000f8af:	83 ec 08             	sub    esp,0x8
c000f8b2:	89 e2                	mov    edx,esp
c000f8b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b7:	89 02                	mov    DWORD PTR [edx],eax
c000f8b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8bc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8c0:	ff d1                	call   ecx
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c8:	66 3d 03 02          	cmp    ax,0x203
c000f8cc:	75 07                	jne    c000f8d5 <sendKeyboardToken(KeyboardToken)+0x55>
c000f8ce:	a0 a0 66 02 c0       	mov    al,ds:0xc00266a0
c000f8d3:	84 c0                	test   al,al
c000f8d5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8d9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8dc:	a0 a8 69 02 c0       	mov    al,ds:0xc00269a8
c000f8e1:	38 c2                	cmp    dl,al
c000f8e3:	74 1c                	je     c000f901 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8e5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8e8:	a2 a8 69 02 c0       	mov    ds:0xc00269a8,al
c000f8ed:	a0 a8 69 02 c0       	mov    al,ds:0xc00269a8
c000f8f2:	0f b6 c0             	movzx  eax,al
c000f8f5:	83 ec 0c             	sub    esp,0xc
c000f8f8:	50                   	push   eax
c000f8f9:	e8 ac ab ff ff       	call   c000a4aa <setTerminalScrollLock(bool)>
c000f8fe:	83 c4 10             	add    esp,0x10
c000f901:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f904:	84 c0                	test   al,al
c000f906:	0f 84 ae 00 00 00    	je     c000f9ba <sendKeyboardToken(KeyboardToken)+0x13a>
c000f90c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f90f:	66 3d 10 03          	cmp    ax,0x310
c000f913:	75 06                	jne    c000f91b <sendKeyboardToken(KeyboardToken)+0x9b>
c000f915:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91e:	66 3d 11 03          	cmp    ax,0x311
c000f922:	75 06                	jne    c000f92a <sendKeyboardToken(KeyboardToken)+0xaa>
c000f924:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92d:	66 3d 12 03          	cmp    ax,0x312
c000f931:	75 06                	jne    c000f939 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f933:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f93c:	66 3d 13 03          	cmp    ax,0x313
c000f940:	75 06                	jne    c000f948 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f942:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94b:	66 3d 14 03          	cmp    ax,0x314
c000f94f:	75 06                	jne    c000f957 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f951:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95a:	66 3d 15 03          	cmp    ax,0x315
c000f95e:	75 06                	jne    c000f966 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f960:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f969:	66 3d 16 03          	cmp    ax,0x316
c000f96d:	75 06                	jne    c000f975 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f96f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f978:	66 3d 17 03          	cmp    ax,0x317
c000f97c:	75 06                	jne    c000f984 <sendKeyboardToken(KeyboardToken)+0x104>
c000f97e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f987:	66 3d 18 03          	cmp    ax,0x318
c000f98b:	75 06                	jne    c000f993 <sendKeyboardToken(KeyboardToken)+0x113>
c000f98d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f996:	66 3d 19 03          	cmp    ax,0x319
c000f99a:	75 06                	jne    c000f9a2 <sendKeyboardToken(KeyboardToken)+0x122>
c000f99c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a5:	66 3d 1a 03          	cmp    ax,0x31a
c000f9a9:	0f 85 c9 00 00 00    	jne    c000fa78 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9af:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9b5:	e9 be 00 00 00       	jmp    c000fa78 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9bd:	66 3d 10 03          	cmp    ax,0x310
c000f9c1:	75 0a                	jne    c000f9cd <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9c3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d0:	66 3d 11 03          	cmp    ax,0x311
c000f9d4:	75 0a                	jne    c000f9e0 <sendKeyboardToken(KeyboardToken)+0x160>
c000f9d6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e3:	66 3d 12 03          	cmp    ax,0x312
c000f9e7:	75 0a                	jne    c000f9f3 <sendKeyboardToken(KeyboardToken)+0x173>
c000f9e9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f6:	66 3d 13 03          	cmp    ax,0x313
c000f9fa:	75 0a                	jne    c000fa06 <sendKeyboardToken(KeyboardToken)+0x186>
c000f9fc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa02:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa09:	66 3d 14 03          	cmp    ax,0x314
c000fa0d:	75 0a                	jne    c000fa19 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa0f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa1c:	66 3d 15 03          	cmp    ax,0x315
c000fa20:	75 0a                	jne    c000fa2c <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa22:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2f:	66 3d 16 03          	cmp    ax,0x316
c000fa33:	75 0a                	jne    c000fa3f <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa35:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa3b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa42:	66 3d 17 03          	cmp    ax,0x317
c000fa46:	75 0a                	jne    c000fa52 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa48:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa4e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa55:	66 3d 18 03          	cmp    ax,0x318
c000fa59:	75 0a                	jne    c000fa65 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa5b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa61:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa68:	66 3d 19 03          	cmp    ax,0x319
c000fa6c:	75 0a                	jne    c000fa78 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa6e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa74:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7b:	66 3d 00 02          	cmp    ax,0x200
c000fa7f:	75 2c                	jne    c000faad <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa81:	a0 a0 69 02 c0       	mov    al,ds:0xc00269a0
c000fa86:	83 f0 01             	xor    eax,0x1
c000fa89:	84 c0                	test   al,al
c000fa8b:	74 20                	je     c000faad <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa8d:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000fa92:	6a 01                	push   0x1
c000fa94:	6a 00                	push   0x0
c000fa96:	68 ea f6 00 c0       	push   0xc000f6ea
c000fa9b:	50                   	push   eax
c000fa9c:	e8 3b 82 00 00       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	c6 05 a0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269a0,0x1
c000faab:	eb 33                	jmp    c000fae0 <sendKeyboardToken(KeyboardToken)+0x260>
c000faad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab0:	66 3d 01 02          	cmp    ax,0x201
c000fab4:	75 2a                	jne    c000fae0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fab6:	a0 a0 69 02 c0       	mov    al,ds:0xc00269a0
c000fabb:	83 f0 01             	xor    eax,0x1
c000fabe:	84 c0                	test   al,al
c000fac0:	74 1e                	je     c000fae0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fac2:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c000fac7:	6a 01                	push   0x1
c000fac9:	6a 00                	push   0x0
c000facb:	68 56 f7 00 c0       	push   0xc000f756
c000fad0:	50                   	push   eax
c000fad1:	e8 06 82 00 00       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c000fad6:	83 c4 10             	add    esp,0x10
c000fad9:	c6 05 a0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269a0,0x1
c000fae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fae3:	66 3d 1d 03          	cmp    ax,0x31d
c000fae7:	75 06                	jne    c000faef <sendKeyboardToken(KeyboardToken)+0x26f>
c000fae9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf2:	66 3d 1c 03          	cmp    ax,0x31c
c000faf6:	75 06                	jne    c000fafe <sendKeyboardToken(KeyboardToken)+0x27e>
c000faf8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fafe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb01:	66 3d 1b 03          	cmp    ax,0x31b
c000fb05:	75 06                	jne    c000fb0d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb07:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb10:	66 3d 1e 03          	cmp    ax,0x31e
c000fb14:	75 06                	jne    c000fb1c <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb16:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb1f:	66 3d 1f 03          	cmp    ax,0x31f
c000fb23:	75 06                	jne    c000fb2b <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb25:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2e:	66 3d 1a 03          	cmp    ax,0x31a
c000fb32:	75 06                	jne    c000fb3a <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb34:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb3a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb3e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb41:	83 f0 01             	xor    eax,0x1
c000fb44:	84 c0                	test   al,al
c000fb46:	74 77                	je     c000fbbf <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb48:	a0 a1 66 02 c0       	mov    al,ds:0xc00266a1
c000fb4d:	84 c0                	test   al,al
c000fb4f:	74 41                	je     c000fb92 <sendKeyboardToken(KeyboardToken)+0x312>
c000fb51:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb55:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb59:	74 2b                	je     c000fb86 <sendKeyboardToken(KeyboardToken)+0x306>
c000fb5b:	8b 15 a4 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269a4
c000fb61:	89 d0                	mov    eax,edx
c000fb63:	c1 e0 02             	shl    eax,0x2
c000fb66:	01 d0                	add    eax,edx
c000fb68:	01 c0                	add    eax,eax
c000fb6a:	a3 a4 69 02 c0       	mov    ds:0xc00269a4,eax
c000fb6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb72:	0f b7 c0             	movzx  eax,ax
c000fb75:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb78:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c000fb7d:	01 d0                	add    eax,edx
c000fb7f:	a3 a4 69 02 c0       	mov    ds:0xc00269a4,eax
c000fb84:	eb 6d                	jmp    c000fbf3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb86:	c7 05 a4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269a4,0x0
c000fb90:	eb 61                	jmp    c000fbf3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb92:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c000fb97:	85 c0                	test   eax,eax
c000fb99:	74 18                	je     c000fbb3 <sendKeyboardToken(KeyboardToken)+0x333>
c000fb9b:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c000fba0:	0f b6 c0             	movzx  eax,al
c000fba3:	83 ec 0c             	sub    esp,0xc
c000fba6:	50                   	push   eax
c000fba7:	e8 16 fc ff ff       	call   c000f7c2 <sendKeyToTerminal(unsigned char)>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbb3:	c7 05 a4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269a4,0x0
c000fbbd:	eb 34                	jmp    c000fbf3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc2:	66 3d 01 01          	cmp    ax,0x101
c000fbc6:	75 2b                	jne    c000fbf3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbc8:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c000fbcd:	85 c0                	test   eax,eax
c000fbcf:	74 18                	je     c000fbe9 <sendKeyboardToken(KeyboardToken)+0x369>
c000fbd1:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c000fbd6:	0f b6 c0             	movzx  eax,al
c000fbd9:	83 ec 0c             	sub    esp,0xc
c000fbdc:	50                   	push   eax
c000fbdd:	e8 e0 fb ff ff       	call   c000f7c2 <sendKeyToTerminal(unsigned char)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbe9:	c7 05 a4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269a4,0x0
c000fbf3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbf6:	83 f0 01             	xor    eax,0x1
c000fbf9:	84 c0                	test   al,al
c000fbfb:	74 4c                	je     c000fc49 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbfd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc00:	83 f0 01             	xor    eax,0x1
c000fc03:	84 c0                	test   al,al
c000fc05:	74 42                	je     c000fc49 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc07:	a0 a0 66 02 c0       	mov    al,ds:0xc00266a0
c000fc0c:	83 f0 01             	xor    eax,0x1
c000fc0f:	84 c0                	test   al,al
c000fc11:	74 36                	je     c000fc49 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc16:	66 83 f8 1f          	cmp    ax,0x1f
c000fc1a:	76 09                	jbe    c000fc25 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1f:	66 83 f8 7e          	cmp    ax,0x7e
c000fc23:	76 12                	jbe    c000fc37 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc28:	66 83 f8 0a          	cmp    ax,0xa
c000fc2c:	74 09                	je     c000fc37 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc31:	66 83 f8 08          	cmp    ax,0x8
c000fc35:	75 12                	jne    c000fc49 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3a:	0f b6 c0             	movzx  eax,al
c000fc3d:	83 ec 0c             	sub    esp,0xc
c000fc40:	50                   	push   eax
c000fc41:	e8 7c fb ff ff       	call   c000f7c2 <sendKeyToTerminal(unsigned char)>
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc4c:	83 f0 01             	xor    eax,0x1
c000fc4f:	84 c0                	test   al,al
c000fc51:	74 4f                	je     c000fca2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc53:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc56:	83 f0 01             	xor    eax,0x1
c000fc59:	84 c0                	test   al,al
c000fc5b:	74 45                	je     c000fca2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc5d:	a0 a0 66 02 c0       	mov    al,ds:0xc00266a0
c000fc62:	84 c0                	test   al,al
c000fc64:	74 3c                	je     c000fca2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc69:	66 83 f8 3f          	cmp    ax,0x3f
c000fc6d:	76 33                	jbe    c000fca2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc72:	66 83 f8 7f          	cmp    ax,0x7f
c000fc76:	77 2a                	ja     c000fca2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7b:	88 c2                	mov    dl,al
c000fc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc80:	66 83 f8 5f          	cmp    ax,0x5f
c000fc84:	76 04                	jbe    c000fc8a <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc86:	b0 20                	mov    al,0x20
c000fc88:	eb 02                	jmp    c000fc8c <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc8a:	b0 00                	mov    al,0x0
c000fc8c:	29 c2                	sub    edx,eax
c000fc8e:	88 d0                	mov    al,dl
c000fc90:	83 e8 40             	sub    eax,0x40
c000fc93:	0f b6 c0             	movzx  eax,al
c000fc96:	83 ec 0c             	sub    esp,0xc
c000fc99:	50                   	push   eax
c000fc9a:	e8 23 fb ff ff       	call   c000f7c2 <sendKeyToTerminal(unsigned char)>
c000fc9f:	83 c4 10             	add    esp,0x10
c000fca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca5:	66 3d 00 03          	cmp    ax,0x300
c000fca9:	75 0f                	jne    c000fcba <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcae:	83 f0 01             	xor    eax,0x1
c000fcb1:	84 c0                	test   al,al
c000fcb3:	74 05                	je     c000fcba <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcb5:	e8 61 ab ff ff       	call   c000a81b <doTerminalCycle()>
c000fcba:	90                   	nop
c000fcbb:	c9                   	leave  
c000fcbc:	c3                   	ret    

c000fcbd <clearInternalKeybuffer(VgaText*)>:
c000fcbd:	55                   	push   ebp
c000fcbe:	89 e5                	mov    ebp,esp
c000fcc0:	83 ec 08             	sub    esp,0x8
c000fcc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc6:	05 98 01 00 00       	add    eax,0x198
c000fccb:	83 ec 0c             	sub    esp,0xc
c000fcce:	50                   	push   eax
c000fccf:	e8 cc 09 ff ff       	call   c00006a0 <strlen>
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fcda:	81 c2 98 01 00 00    	add    edx,0x198
c000fce0:	83 ec 04             	sub    esp,0x4
c000fce3:	50                   	push   eax
c000fce4:	6a 00                	push   0x0
c000fce6:	52                   	push   edx
c000fce7:	e8 98 09 ff ff       	call   c0000684 <memset>
c000fcec:	83 c4 10             	add    esp,0x10
c000fcef:	90                   	nop
c000fcf0:	c9                   	leave  
c000fcf1:	c3                   	ret    

c000fcf2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcf2:	55                   	push   ebp
c000fcf3:	89 e5                	mov    ebp,esp
c000fcf5:	83 ec 18             	sub    esp,0x18
c000fcf8:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000fcfd:	85 c0                	test   eax,eax
c000fcff:	74 2a                	je     c000fd2b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd01:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd07:	8b 0d 88 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026588
c000fd0d:	83 ec 04             	sub    esp,0x4
c000fd10:	68 a0 65 02 c0       	push   0xc00265a0
c000fd15:	83 ec 08             	sub    esp,0x8
c000fd18:	89 e2                	mov    edx,esp
c000fd1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd1d:	89 02                	mov    DWORD PTR [edx],eax
c000fd1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd22:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd26:	ff d1                	call   ecx
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	fb                   	sti    
c000fd2c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd33:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd37:	0f 84 a1 00 00 00    	je     c000fdde <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd40:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd46:	84 c0                	test   al,al
c000fd48:	75 28                	jne    c000fd72 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd4a:	fa                   	cli    
c000fd4b:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000fd50:	40                   	inc    eax
c000fd51:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000fd56:	e8 9d 81 00 00       	call   c0017ef8 <schedule()>
c000fd5b:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000fd60:	48                   	dec    eax
c000fd61:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c000fd66:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c000fd6b:	85 c0                	test   eax,eax
c000fd6d:	75 ce                	jne    c000fd3d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd6f:	fb                   	sti    
c000fd70:	eb cb                	jmp    c000fd3d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd75:	8d 50 01             	lea    edx,[eax+0x1]
c000fd78:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd7e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd84:	88 10                	mov    BYTE PTR [eax],dl
c000fd86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd89:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd8f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd95:	05 98 01 00 00       	add    eax,0x198
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	50                   	push   eax
c000fd9e:	e8 fd 08 ff ff       	call   c00006a0 <strlen>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fda9:	81 c2 98 01 00 00    	add    edx,0x198
c000fdaf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdb2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb5:	81 c2 98 01 00 00    	add    edx,0x198
c000fdbb:	83 ec 04             	sub    esp,0x4
c000fdbe:	50                   	push   eax
c000fdbf:	51                   	push   ecx
c000fdc0:	52                   	push   edx
c000fdc1:	e8 f6 07 ff ff       	call   c00005bc <memmove>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fdcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fdcf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fdd3:	0f 85 5a ff ff ff    	jne    c000fd33 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fdd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fddc:	eb 03                	jmp    c000fde1 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fdde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde1:	c9                   	leave  
c000fde2:	c3                   	ret    
c000fde3:	90                   	nop

c000fde4 <Keyboard::Keyboard(char const*)>:
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdeb:	83 ec 08             	sub    esp,0x8
c000fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf2:	50                   	push   eax
c000fdf3:	e8 b6 e2 ff ff       	call   c000e0ae <Device::Device(char const*)>
c000fdf8:	83 c4 10             	add    esp,0x10
c000fdfb:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c000fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe04:	89 10                	mov    DWORD PTR [eax],edx
c000fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe14:	c6 05 84 65 02 c0 01 	mov    BYTE PTR ds:0xc0026584,0x1
c000fe1b:	90                   	nop
c000fe1c:	83 c4 0c             	add    esp,0xc
c000fe1f:	c3                   	ret    

c000fe20 <Keyboard::~Keyboard()>:
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c000fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2c:	89 10                	mov    DWORD PTR [eax],edx
c000fe2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe32:	83 ec 0c             	sub    esp,0xc
c000fe35:	50                   	push   eax
c000fe36:	e8 3d df ff ff       	call   c000dd78 <Device::~Device()>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	90                   	nop
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Keyboard::~Keyboard()>:
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4e:	e8 cd ff ff ff       	call   c000fe20 <Keyboard::~Keyboard()>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	83 ec 08             	sub    esp,0x8
c000fe59:	68 5c 01 00 00       	push   0x15c
c000fe5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe62:	e8 1c cb ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000fe67:	83 c4 10             	add    esp,0x10
c000fe6a:	83 c4 0c             	add    esp,0xc
c000fe6d:	c3                   	ret    

c000fe6e <LogicalDisk::close(int, int, void*)>:
c000fe6e:	83 c8 ff             	or     eax,0xffffffff
c000fe71:	c3                   	ret    

c000fe72 <LogicalDisk::~LogicalDisk()>:
c000fe72:	83 ec 0c             	sub    esp,0xc
c000fe75:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7e:	89 10                	mov    DWORD PTR [eax],edx
c000fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe84:	83 ec 0c             	sub    esp,0xc
c000fe87:	50                   	push   eax
c000fe88:	e8 eb de ff ff       	call   c000dd78 <Device::~Device()>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	90                   	nop
c000fe91:	83 c4 0c             	add    esp,0xc
c000fe94:	c3                   	ret    
c000fe95:	90                   	nop

c000fe96 <LogicalDisk::~LogicalDisk()>:
c000fe96:	83 ec 0c             	sub    esp,0xc
c000fe99:	83 ec 0c             	sub    esp,0xc
c000fe9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea0:	e8 cd ff ff ff       	call   c000fe72 <LogicalDisk::~LogicalDisk()>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	83 ec 08             	sub    esp,0x8
c000feab:	68 74 01 00 00       	push   0x174
c000feb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb4:	e8 ca ca ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	83 c4 0c             	add    esp,0xc
c000febf:	c3                   	ret    

c000fec0 <LogicalDisk::open(int, int, void*)>:
c000fec0:	83 ec 18             	sub    esp,0x18
c000fec3:	68 24 38 02 c0       	push   0xc0023824
c000fec8:	e8 58 44 00 00       	call   c0014325 <Krnl::panic(char const*)>
c000fecd:	83 c8 ff             	or     eax,0xffffffff
c000fed0:	83 c4 1c             	add    esp,0x1c
c000fed3:	c3                   	ret    

c000fed4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fed4:	53                   	push   ebx
c000fed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fedd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000fee7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000feed:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000fef3:	77 10                	ja     c000ff05 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fef5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000fefb:	89 d3                	mov    ebx,edx
c000fefd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff03:	72 05                	jb     c000ff0a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff05:	83 c8 ff             	or     eax,0xffffffff
c000ff08:	89 c2                	mov    edx,eax
c000ff0a:	5b                   	pop    ebx
c000ff0b:	c3                   	ret    

c000ff0c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff0c:	56                   	push   esi
c000ff0d:	83 c8 ff             	or     eax,0xffffffff
c000ff10:	53                   	push   ebx
c000ff11:	89 c2                	mov    edx,eax
c000ff13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff17:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff1f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff25:	77 27                	ja     c000ff4e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff27:	89 d8                	mov    eax,ebx
c000ff29:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff2f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff3a:	89 c2                	mov    edx,eax
c000ff3c:	73 10                	jae    c000ff4e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff3e:	89 c8                	mov    eax,ecx
c000ff40:	89 da                	mov    edx,ebx
c000ff42:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff48:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff4e:	5b                   	pop    ebx
c000ff4f:	5e                   	pop    esi
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff52:	83 ec 1c             	sub    esp,0x1c
c000ff55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff69:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff78:	83 ec 08             	sub    esp,0x8
c000ff7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff7f:	50                   	push   eax
c000ff80:	e8 29 e1 ff ff       	call   c000e0ae <Device::Device(char const*)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000ff8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff91:	89 10                	mov    DWORD PTR [eax],edx
c000ff93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff97:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffb7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffc3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffc9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffcf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffda:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffe0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffee:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000fff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010002:	90                   	nop
c0010003:	83 c4 1c             	add    esp,0x1c
c0010006:	c3                   	ret    
c0010007:	90                   	nop

c0010008 <LogicalDisk::assignDriveLetter()>:
c0010008:	55                   	push   ebp
c0010009:	57                   	push   edi
c001000a:	56                   	push   esi
c001000b:	53                   	push   ebx
c001000c:	83 ec 14             	sub    esp,0x14
c001000f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010013:	8b 3d c0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269c0
c0010019:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001001f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010023:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010029:	8b 3d c4 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269c4
c001002f:	3c 01                	cmp    al,0x1
c0010031:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010035:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010039:	19 c0                	sbb    eax,eax
c001003b:	83 e0 02             	and    eax,0x2
c001003e:	83 c0 41             	add    eax,0x41
c0010041:	0f be e8             	movsx  ebp,al
c0010044:	3c 43                	cmp    al,0x43
c0010046:	75 10                	jne    c0010058 <LogicalDisk::assignDriveLetter()+0x50>
c0010048:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001004f:	75 5d                	jne    c00100ae <LogicalDisk::assignDriveLetter()+0xa6>
c0010051:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010056:	75 56                	jne    c00100ae <LogicalDisk::assignDriveLetter()+0xa6>
c0010058:	8d 75 bf             	lea    esi,[ebp-0x41]
c001005b:	ba 01 00 00 00       	mov    edx,0x1
c0010060:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010064:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010068:	d3 e2                	shl    edx,cl
c001006a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001006e:	89 d7                	mov    edi,edx
c0010070:	89 d6                	mov    esi,edx
c0010072:	c1 ff 1f             	sar    edi,0x1f
c0010075:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010079:	21 f9                	and    ecx,edi
c001007b:	09 d1                	or     ecx,edx
c001007d:	75 2f                	jne    c00100ae <LogicalDisk::assignDriveLetter()+0xa6>
c001007f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010083:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010087:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001008d:	09 f2                	or     edx,esi
c001008f:	89 15 c0 69 02 c0    	mov    DWORD PTR ds:0xc00269c0,edx
c0010095:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010099:	09 fa                	or     edx,edi
c001009b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001009f:	89 15 c4 69 02 c0    	mov    DWORD PTR ds:0xc00269c4,edx
c00100a5:	89 1c bd e0 69 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9620],ebx
c00100ac:	eb 08                	jmp    c00100b6 <LogicalDisk::assignDriveLetter()+0xae>
c00100ae:	45                   	inc    ebp
c00100af:	40                   	inc    eax
c00100b0:	3c 5b                	cmp    al,0x5b
c00100b2:	75 90                	jne    c0010044 <LogicalDisk::assignDriveLetter()+0x3c>
c00100b4:	31 c0                	xor    eax,eax
c00100b6:	83 c4 14             	add    esp,0x14
c00100b9:	5b                   	pop    ebx
c00100ba:	5e                   	pop    esi
c00100bb:	5f                   	pop    edi
c00100bc:	5d                   	pop    ebp
c00100bd:	c3                   	ret    

c00100be <LogicalDisk::mount()>:
c00100be:	56                   	push   esi
c00100bf:	53                   	push   ebx
c00100c0:	53                   	push   ebx
c00100c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100c5:	8b 1d 54 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026554
c00100cb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100d5:	85 db                	test   ebx,ebx
c00100d7:	74 27                	je     c0010100 <LogicalDisk::mount()+0x42>
c00100d9:	51                   	push   ecx
c00100da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100e3:	83 e8 41             	sub    eax,0x41
c00100e6:	50                   	push   eax
c00100e7:	56                   	push   esi
c00100e8:	53                   	push   ebx
c00100e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	84 c0                	test   al,al
c00100f1:	74 08                	je     c00100fb <LogicalDisk::mount()+0x3d>
c00100f3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00100f9:	eb 07                	jmp    c0010102 <LogicalDisk::mount()+0x44>
c00100fb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100fe:	eb d5                	jmp    c00100d5 <LogicalDisk::mount()+0x17>
c0010100:	31 c0                	xor    eax,eax
c0010102:	5a                   	pop    edx
c0010103:	5b                   	pop    ebx
c0010104:	5e                   	pop    esi
c0010105:	c3                   	ret    

c0010106 <LogicalDisk::unmount()>:
c0010106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010114:	c3                   	ret    
c0010115:	90                   	nop

c0010116 <LogicalDisk::eject()>:
c0010116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010120:	8b 10                	mov    edx,DWORD PTR [eax]
c0010122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010126:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010129:	90                   	nop

c001012a <LogicalDisk::unassignDriveLetter()>:
c001012a:	57                   	push   edi
c001012b:	56                   	push   esi
c001012c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010130:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010137:	84 c9                	test   cl,cl
c0010139:	75 0f                	jne    c001014a <LogicalDisk::unassignDriveLetter()+0x20>
c001013b:	c7 44 24 0c 48 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023848
c0010143:	5e                   	pop    esi
c0010144:	5f                   	pop    edi
c0010145:	e9 db 41 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c001014a:	83 e9 41             	sub    ecx,0x41
c001014d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010154:	b8 01 00 00 00       	mov    eax,0x1
c0010159:	c7 04 8d e0 69 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9620],0x0
c0010164:	d3 e0                	shl    eax,cl
c0010166:	89 c7                	mov    edi,eax
c0010168:	f7 d0                	not    eax
c001016a:	c1 ff 1f             	sar    edi,0x1f
c001016d:	21 05 c0 69 02 c0    	and    DWORD PTR ds:0xc00269c0,eax
c0010173:	89 fe                	mov    esi,edi
c0010175:	f7 d6                	not    esi
c0010177:	21 35 c4 69 02 c0    	and    DWORD PTR ds:0xc00269c4,esi
c001017d:	5e                   	pop    esi
c001017e:	5f                   	pop    edi
c001017f:	c3                   	ret    

c0010180 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010180:	57                   	push   edi
c0010181:	56                   	push   esi
c0010182:	53                   	push   ebx
c0010183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010187:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001018b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001018f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010193:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010199:	77 41                	ja     c00101dc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001019b:	99                   	cdq    
c001019c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101a2:	01 c8                	add    eax,ecx
c00101a4:	11 da                	adc    edx,ebx
c00101a6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101ac:	19 d7                	sbb    edi,edx
c00101ae:	72 33                	jb     c00101e3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101b0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101b6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101c0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101c4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101d4:	5b                   	pop    ebx
c00101d5:	5e                   	pop    esi
c00101d6:	5f                   	pop    edi
c00101d7:	e9 3c 0b 00 00       	jmp    c0010d18 <VCache::read(unsigned long long, int, void*)>
c00101dc:	b8 05 00 00 00       	mov    eax,0x5
c00101e1:	eb 05                	jmp    c00101e8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101e3:	b8 07 00 00 00       	mov    eax,0x7
c00101e8:	5b                   	pop    ebx
c00101e9:	5e                   	pop    esi
c00101ea:	5f                   	pop    edi
c00101eb:	c3                   	ret    

c00101ec <LogicalDisk::write(unsigned long long, int, void*)>:
c00101ec:	57                   	push   edi
c00101ed:	56                   	push   esi
c00101ee:	53                   	push   ebx
c00101ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010205:	77 41                	ja     c0010248 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010207:	99                   	cdq    
c0010208:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001020e:	01 c8                	add    eax,ecx
c0010210:	11 da                	adc    edx,ebx
c0010212:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010218:	19 d7                	sbb    edi,edx
c001021a:	72 33                	jb     c001024f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001021c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010222:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010228:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001022c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010230:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010236:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001023c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010240:	5b                   	pop    ebx
c0010241:	5e                   	pop    esi
c0010242:	5f                   	pop    edi
c0010243:	e9 8c 09 00 00       	jmp    c0010bd4 <VCache::write(unsigned long long, int, void*)>
c0010248:	b8 05 00 00 00       	mov    eax,0x5
c001024d:	eb 05                	jmp    c0010254 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001024f:	b8 07 00 00 00       	mov    eax,0x7
c0010254:	5b                   	pop    ebx
c0010255:	5e                   	pop    esi
c0010256:	5f                   	pop    edi
c0010257:	c3                   	ret    

c0010258 <Mouse::Mouse(char const*)>:
c0010258:	83 ec 0c             	sub    esp,0xc
c001025b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025f:	83 ec 08             	sub    esp,0x8
c0010262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010266:	50                   	push   eax
c0010267:	e8 42 de ff ff       	call   c000e0ae <Device::Device(char const*)>
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	ba 9c 38 02 c0       	mov    edx,0xc002389c
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	89 10                	mov    DWORD PTR [eax],edx
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010288:	90                   	nop
c0010289:	83 c4 0c             	add    esp,0xc
c001028c:	c3                   	ret    
c001028d:	90                   	nop
c001028e:	66 90                	xchg   ax,ax

c0010290 <Mouse::~Mouse()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ba 9c 38 02 c0       	mov    edx,0xc002389c
c0010298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029c:	89 10                	mov    DWORD PTR [eax],edx
c001029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	50                   	push   eax
c00102a6:	e8 cd da ff ff       	call   c000dd78 <Device::~Device()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	90                   	nop
c00102af:	83 c4 0c             	add    esp,0xc
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <Mouse::~Mouse()>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102be:	e8 cd ff ff ff       	call   c0010290 <Mouse::~Mouse()>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	83 ec 08             	sub    esp,0x8
c00102c9:	68 58 01 00 00       	push   0x158
c00102ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d2:	e8 ac c6 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c00102d7:	83 c4 10             	add    esp,0x10
c00102da:	83 c4 0c             	add    esp,0xc
c00102dd:	c3                   	ret    

c00102de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102de:	55                   	push   ebp
c00102df:	57                   	push   edi
c00102e0:	56                   	push   esi
c00102e1:	53                   	push   ebx
c00102e2:	81 ec 28 01 00 00    	sub    esp,0x128
c00102e8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102ef:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102f6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00102fd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010308:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001030c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010313:	e8 92 de ff ff       	call   c000e1aa <Device::getName()>
c0010318:	5a                   	pop    edx
c0010319:	59                   	pop    ecx
c001031a:	50                   	push   eax
c001031b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001031f:	55                   	push   ebp
c0010320:	e8 1b 04 ff ff       	call   c0000740 <strcpy>
c0010325:	5b                   	pop    ebx
c0010326:	58                   	pop    eax
c0010327:	68 c0 38 02 c0       	push   0xc00238c0
c001032c:	55                   	push   ebp
c001032d:	e8 4e 05 ff ff       	call   c0000880 <strcat>
c0010332:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010339:	e8 85 96 ff ff       	call   c00099c3 <malloc>
c001033e:	83 c4 0c             	add    esp,0xc
c0010341:	89 c3                	mov    ebx,eax
c0010343:	57                   	push   edi
c0010344:	56                   	push   esi
c0010345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001034d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010354:	55                   	push   ebp
c0010355:	50                   	push   eax
c0010356:	e8 f7 fb ff ff       	call   c000ff52 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001035b:	83 c4 14             	add    esp,0x14
c001035e:	53                   	push   ebx
c001035f:	e8 a4 fc ff ff       	call   c0010008 <LogicalDisk::assignDriveLetter()>
c0010364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010367:	e8 52 fd ff ff       	call   c00100be <LogicalDisk::mount()>
c001036c:	58                   	pop    eax
c001036d:	5a                   	pop    edx
c001036e:	53                   	push   ebx
c001036f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010376:	e8 2f db ff ff       	call   c000deaa <Device::addChild(Device*)>
c001037b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010381:	5b                   	pop    ebx
c0010382:	5e                   	pop    esi
c0010383:	5f                   	pop    edi
c0010384:	5d                   	pop    ebp
c0010385:	c3                   	ret    

c0010386 <createPartitionsForDisk(PhysicalDisk*)>:
c0010386:	55                   	push   ebp
c0010387:	57                   	push   edi
c0010388:	56                   	push   esi
c0010389:	53                   	push   ebx
c001038a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010390:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010397:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001039d:	3d 00 02 00 00       	cmp    eax,0x200
c00103a2:	74 27                	je     c00103cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103b0:	83 ec 10             	sub    esp,0x10
c00103b3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103b7:	99                   	cdq    
c00103b8:	c1 e6 0a             	shl    esi,0xa
c00103bb:	52                   	push   edx
c00103bc:	89 fd                	mov    ebp,edi
c00103be:	50                   	push   eax
c00103bf:	55                   	push   ebp
c00103c0:	56                   	push   esi
c00103c1:	e8 5e 0b 01 00       	call   c0020f24 <__udivdi3>
c00103c6:	e9 b1 00 00 00       	jmp    c001047c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103cb:	83 ec 0c             	sub    esp,0xc
c00103ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103d4:	56                   	push   esi
c00103d5:	6a 01                	push   0x1
c00103d7:	6a 00                	push   0x0
c00103d9:	6a 00                	push   0x0
c00103db:	53                   	push   ebx
c00103dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103df:	83 c4 20             	add    esp,0x20
c00103e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103ea:	75 0a                	jne    c00103f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103f4:	74 2c                	je     c0010422 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00103fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010402:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010408:	83 ec 10             	sub    esp,0x10
c001040b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001040f:	89 f7                	mov    edi,esi
c0010411:	c1 e0 0a             	shl    eax,0xa
c0010414:	c1 ff 1f             	sar    edi,0x1f
c0010417:	57                   	push   edi
c0010418:	56                   	push   esi
c0010419:	52                   	push   edx
c001041a:	50                   	push   eax
c001041b:	e8 04 0b 01 00       	call   c0020f24 <__udivdi3>
c0010420:	eb 5a                	jmp    c001047c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010422:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010429:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010430:	83 e1 7f             	and    ecx,0x7f
c0010433:	83 e0 7f             	and    eax,0x7f
c0010436:	01 c1                	add    ecx,eax
c0010438:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001043f:	83 e0 7f             	and    eax,0x7f
c0010442:	01 c1                	add    ecx,eax
c0010444:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001044b:	83 e0 7f             	and    eax,0x7f
c001044e:	00 c1                	add    cl,al
c0010450:	74 41                	je     c0010493 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001045e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010464:	83 ec 10             	sub    esp,0x10
c0010467:	0f a4 c2 0a          	shld   edx,eax,0xa
c001046b:	89 f7                	mov    edi,esi
c001046d:	c1 e0 0a             	shl    eax,0xa
c0010470:	c1 ff 1f             	sar    edi,0x1f
c0010473:	57                   	push   edi
c0010474:	56                   	push   esi
c0010475:	52                   	push   edx
c0010476:	50                   	push   eax
c0010477:	e8 a8 0a 01 00       	call   c0020f24 <__udivdi3>
c001047c:	83 c4 14             	add    esp,0x14
c001047f:	52                   	push   edx
c0010480:	50                   	push   eax
c0010481:	6a 00                	push   0x0
c0010483:	6a 00                	push   0x0
c0010485:	53                   	push   ebx
c0010486:	e8 53 fe ff ff       	call   c00102de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001048b:	83 c4 20             	add    esp,0x20
c001048e:	e9 79 01 00 00       	jmp    c001060c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010493:	89 f0                	mov    eax,esi
c0010495:	31 f6                	xor    esi,esi
c0010497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001049e:	75 02                	jne    c00104a2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104a0:	89 f1                	mov    ecx,esi
c00104a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104a9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104b0:	c1 e2 08             	shl    edx,0x8
c00104b3:	c1 e7 10             	shl    edi,0x10
c00104b6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104be:	09 fa                	or     edx,edi
c00104c0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104c8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104cf:	83 c0 10             	add    eax,0x10
c00104d2:	09 fa                	or     edx,edi
c00104d4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104db:	c1 e7 18             	shl    edi,0x18
c00104de:	09 fa                	or     edx,edi
c00104e0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104e7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104eb:	c1 e7 10             	shl    edi,0x10
c00104ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104f5:	c1 e2 08             	shl    edx,0x8
c00104f8:	09 fa                	or     edx,edi
c00104fa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010501:	09 fa                	or     edx,edi
c0010503:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001050a:	c1 e7 18             	shl    edi,0x18
c001050d:	09 fa                	or     edx,edi
c001050f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010513:	46                   	inc    esi
c0010514:	83 fe 04             	cmp    esi,0x4
c0010517:	0f 85 7a ff ff ff    	jne    c0010497 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001051d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010521:	83 f0 01             	xor    eax,0x1
c0010524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010528:	75 57                	jne    c0010581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001052a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001052e:	83 f0 01             	xor    eax,0x1
c0010531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010535:	75 4a                	jne    c0010581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010537:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001053b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010543:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001054b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010551:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010557:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001055d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010561:	89 f7                	mov    edi,esi
c0010563:	c1 e0 0a             	shl    eax,0xa
c0010566:	c1 ff 1f             	sar    edi,0x1f
c0010569:	57                   	push   edi
c001056a:	56                   	push   esi
c001056b:	52                   	push   edx
c001056c:	50                   	push   eax
c001056d:	e8 b2 09 01 00       	call   c0020f24 <__udivdi3>
c0010572:	83 c4 10             	add    esp,0x10
c0010575:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010579:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001057d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010581:	84 c9                	test   cl,cl
c0010583:	74 53                	je     c00105d8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010585:	0f b6 c9             	movzx  ecx,cl
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010590:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010594:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010598:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001059c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105a0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105a4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105b8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105bc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105c0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105c4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105d0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105d4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105d8:	31 ed                	xor    ebp,ebp
c00105da:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105de:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105e2:	89 f8                	mov    eax,edi
c00105e4:	09 f0                	or     eax,esi
c00105e6:	74 1e                	je     c0010606 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105e8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105ec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105f0:	89 d1                	mov    ecx,edx
c00105f2:	09 c1                	or     ecx,eax
c00105f4:	74 10                	je     c0010606 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	57                   	push   edi
c00105fa:	56                   	push   esi
c00105fb:	52                   	push   edx
c00105fc:	50                   	push   eax
c00105fd:	53                   	push   ebx
c00105fe:	e8 db fc ff ff       	call   c00102de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010603:	83 c4 20             	add    esp,0x20
c0010606:	45                   	inc    ebp
c0010607:	83 fd 04             	cmp    ebp,0x4
c001060a:	75 ce                	jne    c00105da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001060c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010612:	5b                   	pop    ebx
c0010613:	5e                   	pop    esi
c0010614:	5f                   	pop    edi
c0010615:	5d                   	pop    ebp
c0010616:	c3                   	ret    
c0010617:	90                   	nop

c0010618 <Serial::Serial(char const*)>:
c0010618:	83 ec 0c             	sub    esp,0xc
c001061b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061f:	83 ec 08             	sub    esp,0x8
c0010622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010626:	50                   	push   eax
c0010627:	e8 82 da ff ff       	call   c000e0ae <Device::Device(char const*)>
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	ba d4 38 02 c0       	mov    edx,0xc00238d4
c0010634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010638:	89 10                	mov    DWORD PTR [eax],edx
c001063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010648:	90                   	nop
c0010649:	83 c4 0c             	add    esp,0xc
c001064c:	c3                   	ret    
c001064d:	90                   	nop
c001064e:	66 90                	xchg   ax,ax

c0010650 <Serial::~Serial()>:
c0010650:	83 ec 0c             	sub    esp,0xc
c0010653:	ba d4 38 02 c0       	mov    edx,0xc00238d4
c0010658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065c:	89 10                	mov    DWORD PTR [eax],edx
c001065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010662:	83 ec 0c             	sub    esp,0xc
c0010665:	50                   	push   eax
c0010666:	e8 0d d7 ff ff       	call   c000dd78 <Device::~Device()>
c001066b:	83 c4 10             	add    esp,0x10
c001066e:	90                   	nop
c001066f:	83 c4 0c             	add    esp,0xc
c0010672:	c3                   	ret    
c0010673:	90                   	nop

c0010674 <Serial::~Serial()>:
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067e:	e8 cd ff ff ff       	call   c0010650 <Serial::~Serial()>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	83 ec 08             	sub    esp,0x8
c0010689:	68 58 01 00 00       	push   0x158
c001068e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010692:	e8 ec c2 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0010697:	83 c4 10             	add    esp,0x10
c001069a:	83 c4 0c             	add    esp,0xc
c001069d:	c3                   	ret    
c001069e:	66 90                	xchg   ax,ax

c00106a0 <Timer::Timer(char const*)>:
c00106a0:	83 ec 0c             	sub    esp,0xc
c00106a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a7:	83 ec 08             	sub    esp,0x8
c00106aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ae:	50                   	push   eax
c00106af:	e8 fa d9 ff ff       	call   c000e0ae <Device::Device(char const*)>
c00106b4:	83 c4 10             	add    esp,0x10
c00106b7:	ba 18 39 02 c0       	mov    edx,0xc0023918
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	89 10                	mov    DWORD PTR [eax],edx
c00106c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106d0:	90                   	nop
c00106d1:	83 c4 0c             	add    esp,0xc
c00106d4:	c3                   	ret    
c00106d5:	90                   	nop
c00106d6:	66 90                	xchg   ax,ax

c00106d8 <Timer::~Timer()>:
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	ba 18 39 02 c0       	mov    edx,0xc0023918
c00106e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e4:	89 10                	mov    DWORD PTR [eax],edx
c00106e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ea:	83 ec 0c             	sub    esp,0xc
c00106ed:	50                   	push   eax
c00106ee:	e8 85 d6 ff ff       	call   c000dd78 <Device::~Device()>
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	90                   	nop
c00106f7:	83 c4 0c             	add    esp,0xc
c00106fa:	c3                   	ret    
c00106fb:	90                   	nop

c00106fc <Timer::~Timer()>:
c00106fc:	83 ec 0c             	sub    esp,0xc
c00106ff:	83 ec 0c             	sub    esp,0xc
c0010702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010706:	e8 cd ff ff ff       	call   c00106d8 <Timer::~Timer()>
c001070b:	83 c4 10             	add    esp,0x10
c001070e:	83 ec 08             	sub    esp,0x8
c0010711:	68 5c 01 00 00       	push   0x15c
c0010716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001071a:	e8 64 c2 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c001071f:	83 c4 10             	add    esp,0x10
c0010722:	83 c4 0c             	add    esp,0xc
c0010725:	c3                   	ret    

c0010726 <Timer::read()>:
c0010726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010730:	c3                   	ret    

c0010731 <timerHandler(unsigned int)>:
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	51                   	push   ecx
c0010734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010738:	01 05 4c 6a 02 c0    	add    DWORD PTR ds:0xc0026a4c,eax
c001073e:	80 3d ed 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263ed,0x0
c0010745:	0f 84 49 01 00 00    	je     c0010894 <timerHandler(unsigned int)+0x163>
c001074b:	fa                   	cli    
c001074c:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0010752:	83 ec 0c             	sub    esp,0xc
c0010755:	ff 05 e4 78 02 c0    	inc    DWORD PTR ds:0xc00278e4
c001075b:	68 f8 78 02 c0       	push   0xc00278f8
c0010760:	e8 8f 0d 01 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010765:	83 c4 10             	add    esp,0x10
c0010768:	84 c0                	test   al,al
c001076a:	0f 85 a0 00 00 00    	jne    c0010810 <timerHandler(unsigned int)+0xdf>
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	68 f8 78 02 c0       	push   0xc00278f8
c0010778:	e8 93 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001077d:	83 c4 10             	add    esp,0x10
c0010780:	89 c6                	mov    esi,eax
c0010782:	66 90                	xchg   ax,ax
c0010784:	83 ec 0c             	sub    esp,0xc
c0010787:	68 f8 78 02 c0       	push   0xc00278f8
c001078c:	e8 7f 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010791:	c7 04 24 f8 78 02 c0 	mov    DWORD PTR [esp],0xc00278f8
c0010798:	89 c3                	mov    ebx,eax
c001079a:	e8 79 0d 01 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001079f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	3b 05 4c 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a4c
c00107ab:	77 23                	ja     c00107d0 <timerHandler(unsigned int)+0x9f>
c00107ad:	83 ec 0c             	sub    esp,0xc
c00107b0:	53                   	push   ebx
c00107b1:	e8 fe 7b 00 00       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c00107b6:	83 c4 10             	add    esp,0x10
c00107b9:	39 de                	cmp    esi,ebx
c00107bb:	75 27                	jne    c00107e4 <timerHandler(unsigned int)+0xb3>
c00107bd:	83 ec 0c             	sub    esp,0xc
c00107c0:	68 f8 78 02 c0       	push   0xc00278f8
c00107c5:	e8 46 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107ca:	89 c6                	mov    esi,eax
c00107cc:	eb 12                	jmp    c00107e0 <timerHandler(unsigned int)+0xaf>
c00107ce:	66 90                	xchg   ax,ax
c00107d0:	52                   	push   edx
c00107d1:	52                   	push   edx
c00107d2:	53                   	push   ebx
c00107d3:	68 f8 78 02 c0       	push   0xc00278f8
c00107d8:	e8 f3 0d 01 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107dd:	8d 76 00             	lea    esi,[esi+0x0]
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	90                   	nop
c00107e4:	83 ec 0c             	sub    esp,0xc
c00107e7:	68 f8 78 02 c0       	push   0xc00278f8
c00107ec:	e8 03 0d 01 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	84 c0                	test   al,al
c00107f6:	75 18                	jne    c0010810 <timerHandler(unsigned int)+0xdf>
c00107f8:	83 ec 0c             	sub    esp,0xc
c00107fb:	68 f8 78 02 c0       	push   0xc00278f8
c0010800:	e8 0b 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010805:	83 c4 10             	add    esp,0x10
c0010808:	39 f0                	cmp    eax,esi
c001080a:	0f 85 74 ff ff ff    	jne    c0010784 <timerHandler(unsigned int)+0x53>
c0010810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010815:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010819:	74 41                	je     c001085c <timerHandler(unsigned int)+0x12b>
c001081b:	80 3d ec 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263ec,0x0
c0010822:	74 38                	je     c001085c <timerHandler(unsigned int)+0x12b>
c0010824:	fa                   	cli    
c0010825:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001082b:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0010830:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010836:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010839:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010842:	72 08                	jb     c001084c <timerHandler(unsigned int)+0x11b>
c0010844:	e8 af 76 00 00       	call   c0017ef8 <schedule()>
c0010849:	8d 76 00             	lea    esi,[esi+0x0]
c001084c:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0010851:	48                   	dec    eax
c0010852:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0010857:	75 03                	jne    c001085c <timerHandler(unsigned int)+0x12b>
c0010859:	fb                   	sti    
c001085a:	66 90                	xchg   ax,ax
c001085c:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c0010861:	48                   	dec    eax
c0010862:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c0010867:	75 1b                	jne    c0010884 <timerHandler(unsigned int)+0x153>
c0010869:	83 3d e0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278e0,0x0
c0010870:	74 12                	je     c0010884 <timerHandler(unsigned int)+0x153>
c0010872:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c001087c:	e8 77 76 00 00       	call   c0017ef8 <schedule()>
c0010881:	8d 76 00             	lea    esi,[esi+0x0]
c0010884:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0010889:	48                   	dec    eax
c001088a:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001088f:	75 03                	jne    c0010894 <timerHandler(unsigned int)+0x163>
c0010891:	fb                   	sti    
c0010892:	66 90                	xchg   ax,ax
c0010894:	58                   	pop    eax
c0010895:	5b                   	pop    ebx
c0010896:	5e                   	pop    esi
c0010897:	c3                   	ret    

c0010898 <setupTimer(int)>:
c0010898:	57                   	push   edi
c0010899:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001089e:	56                   	push   esi
c001089f:	53                   	push   ebx
c00108a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108aa:	83 ec 0c             	sub    esp,0xc
c00108ad:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108b3:	e8 f2 d8 ff ff       	call   c000e1aa <Device::getName()>
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108be:	0f 85 94 00 00 00    	jne    c0010958 <setupTimer(int)+0xc0>
c00108c4:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00108c9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108d0:	0f 84 82 00 00 00    	je     c0010958 <setupTimer(int)+0xc0>
c00108d6:	83 ec 0c             	sub    esp,0xc
c00108d9:	68 5c 01 00 00       	push   0x15c
c00108de:	e8 e0 90 ff ff       	call   c00099c3 <malloc>
c00108e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00108e6:	89 c3                	mov    ebx,eax
c00108e8:	e8 0f 02 01 00       	call   c0020afc <PIT::PIT()>
c00108ed:	59                   	pop    ecx
c00108ee:	5f                   	pop    edi
c00108ef:	53                   	push   ebx
c00108f0:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c00108f6:	e8 af d5 ff ff       	call   c000deaa <Device::addChild(Device*)>
c00108fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108fd:	6a 00                	push   0x0
c00108ff:	6a 00                	push   0x0
c0010901:	56                   	push   esi
c0010902:	53                   	push   ebx
c0010903:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010906:	83 c4 14             	add    esp,0x14
c0010909:	68 60 01 00 00       	push   0x160
c001090e:	e8 b0 90 ff ff       	call   c00099c3 <malloc>
c0010913:	89 04 24             	mov    DWORD PTR [esp],eax
c0010916:	89 c7                	mov    edi,eax
c0010918:	e8 93 00 01 00       	call   c00209b0 <APICTimer::APICTimer()>
c001091d:	6a 00                	push   0x0
c001091f:	6a 00                	push   0x0
c0010921:	56                   	push   esi
c0010922:	57                   	push   edi
c0010923:	e8 88 ff 00 00       	call   c00208b0 <APICTimer::open(int, int, void*)>
c0010928:	83 c4 20             	add    esp,0x20
c001092b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001092d:	6a 00                	push   0x0
c001092f:	6a 00                	push   0x0
c0010931:	6a 00                	push   0x0
c0010933:	53                   	push   ebx
c0010934:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010937:	58                   	pop    eax
c0010938:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001093d:	5a                   	pop    edx
c001093e:	57                   	push   edi
c001093f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010945:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001094b:	e8 5a d5 ff ff       	call   c000deaa <Device::addChild(Device*)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	eb 37                	jmp    c001098c <setupTimer(int)+0xf4>
c0010955:	8d 76 00             	lea    esi,[esi+0x0]
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	68 5c 01 00 00       	push   0x15c
c0010960:	e8 5e 90 ff ff       	call   c00099c3 <malloc>
c0010965:	89 04 24             	mov    DWORD PTR [esp],eax
c0010968:	89 c3                	mov    ebx,eax
c001096a:	e8 8d 01 01 00       	call   c0020afc <PIT::PIT()>
c001096f:	58                   	pop    eax
c0010970:	5a                   	pop    edx
c0010971:	53                   	push   ebx
c0010972:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c0010978:	e8 2d d5 ff ff       	call   c000deaa <Device::addChild(Device*)>
c001097d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001097f:	6a 00                	push   0x0
c0010981:	6a 00                	push   0x0
c0010983:	56                   	push   esi
c0010984:	53                   	push   ebx
c0010985:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010988:	83 c4 20             	add    esp,0x20
c001098b:	90                   	nop
c001098c:	89 d8                	mov    eax,ebx
c001098e:	5b                   	pop    ebx
c001098f:	5e                   	pop    esi
c0010990:	5f                   	pop    edi
c0010991:	c3                   	ret    
c0010992:	66 90                	xchg   ax,ax

c0010994 <VCache::VCache(PhysicalDisk*)>:
c0010994:	53                   	push   ebx
c0010995:	83 ec 18             	sub    esp,0x18
c0010998:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c001099d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a1:	89 10                	mov    DWORD PTR [eax],edx
c00109a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00109fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a06:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a25:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a2d:	83 ec 0c             	sub    esp,0xc
c0010a30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a34:	e8 8a 8f ff ff       	call   c00099c3 <malloc>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	89 c3                	mov    ebx,eax
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	53                   	push   ebx
c0010a42:	e8 81 72 00 00       	call   c0017cc8 <Mutex::Mutex()>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a60:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a6b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a7c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a8c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a8f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aa4:	05 00 01 00 00       	add    eax,0x100
c0010aa9:	c1 e0 04             	shl    eax,0x4
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	50                   	push   eax
c0010ab0:	e8 0e 8f ff ff       	call   c00099c3 <malloc>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	89 c2                	mov    edx,eax
c0010aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010abe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ad8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ade:	c1 e0 06             	shl    eax,0x6
c0010ae1:	83 ec 0c             	sub    esp,0xc
c0010ae4:	50                   	push   eax
c0010ae5:	e8 d9 8e ff ff       	call   c00099c3 <malloc>
c0010aea:	83 c4 10             	add    esp,0x10
c0010aed:	89 c2                	mov    edx,eax
c0010aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010af6:	90                   	nop
c0010af7:	83 c4 18             	add    esp,0x18
c0010afa:	5b                   	pop    ebx
c0010afb:	c3                   	ret    

c0010afc <VCache::invalidateReadBuffer()>:
c0010afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b00:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b06:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b0a:	c3                   	ret    
c0010b0b:	90                   	nop

c0010b0c <VCache::writeWriteBuffer()>:
c0010b0c:	53                   	push   ebx
c0010b0d:	83 ec 0c             	sub    esp,0xc
c0010b10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b14:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b17:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b1a:	68 40 39 02 c0       	push   0xc0023940
c0010b1f:	e8 40 bf ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010b24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b27:	5a                   	pop    edx
c0010b28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b30:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b33:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b36:	50                   	push   eax
c0010b37:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b3a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b41:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b48:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b4c:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b53:	83 c4 28             	add    esp,0x28
c0010b56:	5b                   	pop    ebx
c0010b57:	c3                   	ret    

c0010b58 <VCache::~VCache()>:
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	89 10                	mov    DWORD PTR [eax],edx
c0010b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b6d:	84 c0                	test   al,al
c0010b6f:	74 0f                	je     c0010b80 <VCache::~VCache()+0x28>
c0010b71:	83 ec 0c             	sub    esp,0xc
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 8f ff ff ff       	call   c0010b0c <VCache::writeWriteBuffer()>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b84:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b87:	83 ec 0c             	sub    esp,0xc
c0010b8a:	50                   	push   eax
c0010b8b:	e8 43 8e ff ff       	call   c00099d3 <free>
c0010b90:	83 c4 10             	add    esp,0x10
c0010b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	50                   	push   eax
c0010b9e:	e8 30 8e ff ff       	call   c00099d3 <free>
c0010ba3:	83 c4 10             	add    esp,0x10
c0010ba6:	90                   	nop
c0010ba7:	83 c4 0c             	add    esp,0xc
c0010baa:	c3                   	ret    
c0010bab:	90                   	nop

c0010bac <VCache::~VCache()>:
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	83 ec 0c             	sub    esp,0xc
c0010bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb6:	e8 9d ff ff ff       	call   c0010b58 <VCache::~VCache()>
c0010bbb:	83 c4 10             	add    esp,0x10
c0010bbe:	83 ec 08             	sub    esp,0x8
c0010bc1:	6a 44                	push   0x44
c0010bc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc7:	e8 b7 bd ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	83 c4 0c             	add    esp,0xc
c0010bd2:	c3                   	ret    
c0010bd3:	90                   	nop

c0010bd4 <VCache::write(unsigned long long, int, void*)>:
c0010bd4:	55                   	push   ebp
c0010bd5:	31 c0                	xor    eax,eax
c0010bd7:	57                   	push   edi
c0010bd8:	56                   	push   esi
c0010bd9:	53                   	push   ebx
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010be1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010be5:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010be9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bed:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bf4:	7d 16                	jge    c0010c0c <VCache::write(unsigned long long, int, void*)+0x38>
c0010bf6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010bf9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010bff:	0f af c8             	imul   ecx,eax
c0010c02:	89 ca                	mov    edx,ecx
c0010c04:	01 f2                	add    edx,esi
c0010c06:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c08:	40                   	inc    eax
c0010c09:	eb e5                	jmp    c0010bf0 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c0b:	90                   	nop
c0010c0c:	83 ec 0c             	sub    esp,0xc
c0010c0f:	68 64 39 02 c0       	push   0xc0023964
c0010c14:	e8 4b be ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c20:	74 0e                	je     c0010c30 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c22:	83 ec 0c             	sub    esp,0xc
c0010c25:	53                   	push   ebx
c0010c26:	e8 d1 fe ff ff       	call   c0010afc <VCache::invalidateReadBuffer()>
c0010c2b:	83 c4 10             	add    esp,0x10
c0010c2e:	66 90                	xchg   ax,ax
c0010c30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c34:	74 66                	je     c0010c9c <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c39:	99                   	cdq    
c0010c3a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c3d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c40:	31 f8                	xor    eax,edi
c0010c42:	89 d1                	mov    ecx,edx
c0010c44:	89 ca                	mov    edx,ecx
c0010c46:	31 ea                	xor    edx,ebp
c0010c48:	09 d0                	or     eax,edx
c0010c4a:	75 44                	jne    c0010c90 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c4c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c51:	75 3d                	jne    c0010c90 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c53:	83 ec 0c             	sub    esp,0xc
c0010c56:	68 8b 39 02 c0       	push   0xc002398b
c0010c5b:	e8 04 be ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010c60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c63:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c66:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c6c:	0f af f9             	imul   edi,ecx
c0010c6f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c77:	83 c4 10             	add    esp,0x10
c0010c7a:	40                   	inc    eax
c0010c7b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c7e:	83 f8 40             	cmp    eax,0x40
c0010c81:	75 7d                	jne    c0010d00 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c83:	83 ec 0c             	sub    esp,0xc
c0010c86:	53                   	push   ebx
c0010c87:	e8 80 fe ff ff       	call   c0010b0c <VCache::writeWriteBuffer()>
c0010c8c:	eb 42                	jmp    c0010cd0 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c8e:	66 90                	xchg   ax,ax
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	53                   	push   ebx
c0010c94:	e8 73 fe ff ff       	call   c0010b0c <VCache::writeWriteBuffer()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010ca1:	7f 35                	jg     c0010cd8 <VCache::write(unsigned long long, int, void*)+0x104>
c0010ca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ca7:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010caa:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cad:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010cb0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010cb4:	52                   	push   edx
c0010cb5:	56                   	push   esi
c0010cb6:	6a 01                	push   0x1
c0010cb8:	68 a1 39 02 c0       	push   0xc00239a1
c0010cbd:	e8 a2 bd ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010cc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cc5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cc8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd0:	83 c4 10             	add    esp,0x10
c0010cd3:	eb 2b                	jmp    c0010d00 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cd8:	50                   	push   eax
c0010cd9:	56                   	push   esi
c0010cda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010cde:	68 c2 39 02 c0       	push   0xc00239c2
c0010ce3:	e8 7c bd ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010ce8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ceb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cf4:	55                   	push   ebp
c0010cf5:	57                   	push   edi
c0010cf6:	50                   	push   eax
c0010cf7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cfa:	83 c4 20             	add    esp,0x20
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	68 df 39 02 c0       	push   0xc00239df
c0010d08:	e8 57 bd ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010d0d:	83 c4 1c             	add    esp,0x1c
c0010d10:	31 c0                	xor    eax,eax
c0010d12:	5b                   	pop    ebx
c0010d13:	5e                   	pop    esi
c0010d14:	5f                   	pop    edi
c0010d15:	5d                   	pop    ebp
c0010d16:	c3                   	ret    
c0010d17:	90                   	nop

c0010d18 <VCache::read(unsigned long long, int, void*)>:
c0010d18:	55                   	push   ebp
c0010d19:	57                   	push   edi
c0010d1a:	56                   	push   esi
c0010d1b:	53                   	push   ebx
c0010d1c:	83 ec 1c             	sub    esp,0x1c
c0010d1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d23:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d2a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d32:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d36:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d3a:	31 c0                	xor    eax,eax
c0010d3c:	39 f0                	cmp    eax,esi
c0010d3e:	7d 18                	jge    c0010d58 <VCache::read(unsigned long long, int, void*)+0x40>
c0010d40:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d43:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d49:	0f af f8             	imul   edi,eax
c0010d4c:	89 fa                	mov    edx,edi
c0010d4e:	01 ea                	add    edx,ebp
c0010d50:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d52:	40                   	inc    eax
c0010d53:	eb e7                	jmp    c0010d3c <VCache::read(unsigned long long, int, void*)+0x24>
c0010d55:	8d 76 00             	lea    esi,[esi+0x0]
c0010d58:	83 ec 0c             	sub    esp,0xc
c0010d5b:	68 ff 39 02 c0       	push   0xc00239ff
c0010d60:	e8 ff bc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d6c:	74 0e                	je     c0010d7c <VCache::read(unsigned long long, int, void*)+0x64>
c0010d6e:	83 ec 0c             	sub    esp,0xc
c0010d71:	53                   	push   ebx
c0010d72:	e8 95 fd ff ff       	call   c0010b0c <VCache::writeWriteBuffer()>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	66 90                	xchg   ax,ax
c0010d7c:	83 fe 01             	cmp    esi,0x1
c0010d7f:	75 7b                	jne    c0010dfc <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d84:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d8b:	75 6f                	jne    c0010dfc <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d8d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010d90:	89 d1                	mov    ecx,edx
c0010d92:	f7 d9                	neg    ecx
c0010d94:	89 cf                	mov    edi,ecx
c0010d96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d9a:	c1 ff 1f             	sar    edi,0x1f
c0010d9d:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010da0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010da4:	89 ce                	mov    esi,ecx
c0010da6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010daa:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010dae:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010db2:	89 cf                	mov    edi,ecx
c0010db4:	74 0a                	je     c0010dc0 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010db6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010db9:	75 05                	jne    c0010dc0 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dbb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010dbe:	74 1c                	je     c0010ddc <VCache::read(unsigned long long, int, void*)+0xc4>
c0010dc0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010dc4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010dc7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010dca:	83 ec 0c             	sub    esp,0xc
c0010dcd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010dcf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010dd2:	52                   	push   edx
c0010dd3:	57                   	push   edi
c0010dd4:	56                   	push   esi
c0010dd5:	50                   	push   eax
c0010dd6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010dd9:	83 c4 20             	add    esp,0x20
c0010ddc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ddf:	89 ef                	mov    edi,ebp
c0010de1:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010de7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010dea:	8d 70 ff             	lea    esi,[eax-0x1]
c0010ded:	23 34 24             	and    esi,DWORD PTR [esp]
c0010df0:	0f af f1             	imul   esi,ecx
c0010df3:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010df6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df8:	eb 32                	jmp    c0010e2c <VCache::read(unsigned long long, int, void*)+0x114>
c0010dfa:	66 90                	xchg   ax,ax
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	53                   	push   ebx
c0010e00:	e8 f7 fc ff ff       	call   c0010afc <VCache::invalidateReadBuffer()>
c0010e05:	83 c4 0c             	add    esp,0xc
c0010e08:	55                   	push   ebp
c0010e09:	56                   	push   esi
c0010e0a:	68 25 3a 02 c0       	push   0xc0023a25
c0010e0f:	e8 50 bc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010e14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e1c:	56                   	push   esi
c0010e1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e25:	50                   	push   eax
c0010e26:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e29:	83 c4 20             	add    esp,0x20
c0010e2c:	83 ec 0c             	sub    esp,0xc
c0010e2f:	68 41 3a 02 c0       	push   0xc0023a41
c0010e34:	e8 2b bc ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0010e39:	83 c4 2c             	add    esp,0x2c
c0010e3c:	31 c0                	xor    eax,eax
c0010e3e:	5b                   	pop    ebx
c0010e3f:	5e                   	pop    esi
c0010e40:	5f                   	pop    edi
c0010e41:	5d                   	pop    ebp
c0010e42:	c3                   	ret    
c0010e43:	90                   	nop

c0010e44 <Video::putrect(int, int, int, int, unsigned int)>:
c0010e44:	55                   	push   ebp
c0010e45:	57                   	push   edi
c0010e46:	56                   	push   esi
c0010e47:	53                   	push   ebx
c0010e48:	83 ec 1c             	sub    esp,0x1c
c0010e4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e53:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e57:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e63:	01 df                	add    edi,ebx
c0010e65:	39 fb                	cmp    ebx,edi
c0010e67:	7d 1f                	jge    c0010e88 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e69:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e6d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e71:	7d 12                	jge    c0010e85 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e73:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e79:	53                   	push   ebx
c0010e7a:	55                   	push   ebp
c0010e7b:	45                   	inc    ebp
c0010e7c:	56                   	push   esi
c0010e7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e80:	83 c4 10             	add    esp,0x10
c0010e83:	eb e8                	jmp    c0010e6d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e85:	43                   	inc    ebx
c0010e86:	eb dd                	jmp    c0010e65 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e88:	83 c4 1c             	add    esp,0x1c
c0010e8b:	5b                   	pop    ebx
c0010e8c:	5e                   	pop    esi
c0010e8d:	5f                   	pop    edi
c0010e8e:	5d                   	pop    ebp
c0010e8f:	c3                   	ret    

c0010e90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e90:	55                   	push   ebp
c0010e91:	57                   	push   edi
c0010e92:	31 ff                	xor    edi,edi
c0010e94:	56                   	push   esi
c0010e95:	53                   	push   ebx
c0010e96:	83 ec 1c             	sub    esp,0x1c
c0010e99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ea1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010ea8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010ead:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010eb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010eb9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010ebc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ec0:	01 f9                	add    ecx,edi
c0010ec2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010ec6:	7d 2f                	jge    c0010ef7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010ec8:	31 f6                	xor    esi,esi
c0010eca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010ece:	01 f2                	add    edx,esi
c0010ed0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010ed4:	7d 1a                	jge    c0010ef0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010ed6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ed9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010edc:	46                   	inc    esi
c0010edd:	51                   	push   ecx
c0010ede:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ee2:	52                   	push   edx
c0010ee3:	55                   	push   ebp
c0010ee4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010eee:	eb da                	jmp    c0010eca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010ef0:	47                   	inc    edi
c0010ef1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010ef5:	eb c5                	jmp    c0010ebc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010ef7:	83 c4 1c             	add    esp,0x1c
c0010efa:	5b                   	pop    ebx
c0010efb:	5e                   	pop    esi
c0010efc:	5f                   	pop    edi
c0010efd:	5d                   	pop    ebp
c0010efe:	c3                   	ret    
c0010eff:	90                   	nop

c0010f00 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f00:	55                   	push   ebp
c0010f01:	57                   	push   edi
c0010f02:	56                   	push   esi
c0010f03:	53                   	push   ebx
c0010f04:	83 ec 1c             	sub    esp,0x1c
c0010f07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	79 02                	jns    c0010f15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f13:	31 c0                	xor    eax,eax
c0010f15:	c1 e0 02             	shl    eax,0x2
c0010f18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f28:	39 d8                	cmp    eax,ebx
c0010f2a:	7e 49                	jle    c0010f75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f32:	7c 41                	jl     c0010f75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f44:	39 f9                	cmp    ecx,edi
c0010f46:	7e 22                	jle    c0010f6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f48:	83 c5 04             	add    ebp,0x4
c0010f4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f51:	7c 14                	jl     c0010f67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f60:	56                   	push   esi
c0010f61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	47                   	inc    edi
c0010f68:	eb d2                	jmp    c0010f3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f6e:	43                   	inc    ebx
c0010f6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f73:	eb ab                	jmp    c0010f20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f75:	83 c4 1c             	add    esp,0x1c
c0010f78:	5b                   	pop    ebx
c0010f79:	5e                   	pop    esi
c0010f7a:	5f                   	pop    edi
c0010f7b:	5d                   	pop    ebp
c0010f7c:	c3                   	ret    
c0010f7d:	90                   	nop

c0010f7e <Video::clearScreen(unsigned int)>:
c0010f7e:	57                   	push   edi
c0010f7f:	56                   	push   esi
c0010f80:	53                   	push   ebx
c0010f81:	31 db                	xor    ebx,ebx
c0010f83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f8d:	7e 1f                	jle    c0010fae <Video::clearScreen(unsigned int)+0x30>
c0010f8f:	31 ff                	xor    edi,edi
c0010f91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f97:	7e 12                	jle    c0010fab <Video::clearScreen(unsigned int)+0x2d>
c0010f99:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f9f:	53                   	push   ebx
c0010fa0:	57                   	push   edi
c0010fa1:	47                   	inc    edi
c0010fa2:	56                   	push   esi
c0010fa3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010fa6:	83 c4 10             	add    esp,0x10
c0010fa9:	eb e6                	jmp    c0010f91 <Video::clearScreen(unsigned int)+0x13>
c0010fab:	43                   	inc    ebx
c0010fac:	eb d9                	jmp    c0010f87 <Video::clearScreen(unsigned int)+0x9>
c0010fae:	5b                   	pop    ebx
c0010faf:	5e                   	pop    esi
c0010fb0:	5f                   	pop    edi
c0010fb1:	c3                   	ret    

c0010fb2 <Video::putpixel(int, int, unsigned int)>:
c0010fb2:	c7 44 24 04 70 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a70
c0010fba:	e9 66 33 00 00       	jmp    c0014325 <Krnl::panic(char const*)>
c0010fbf:	90                   	nop

c0010fc0 <Video::Video(char const*)>:
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc7:	83 ec 08             	sub    esp,0x8
c0010fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fce:	50                   	push   eax
c0010fcf:	e8 da d0 ff ff       	call   c000e0ae <Device::Device(char const*)>
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c0010fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe0:	89 10                	mov    DWORD PTR [eax],edx
c0010fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010ff0:	90                   	nop
c0010ff1:	83 c4 0c             	add    esp,0xc
c0010ff4:	c3                   	ret    
c0010ff5:	90                   	nop

c0010ff6 <Video::~Video()>:
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c0010ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011002:	89 10                	mov    DWORD PTR [eax],edx
c0011004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	50                   	push   eax
c001100c:	e8 67 cd ff ff       	call   c000dd78 <Device::~Device()>
c0011011:	83 c4 10             	add    esp,0x10
c0011014:	90                   	nop
c0011015:	83 c4 0c             	add    esp,0xc
c0011018:	c3                   	ret    
c0011019:	90                   	nop

c001101a <Video::~Video()>:
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	83 ec 0c             	sub    esp,0xc
c0011020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011024:	e8 cd ff ff ff       	call   c0010ff6 <Video::~Video()>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	83 ec 08             	sub    esp,0x8
c001102f:	68 64 01 00 00       	push   0x164
c0011034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011038:	e8 46 b9 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	83 c4 0c             	add    esp,0xc
c0011043:	c3                   	ret    

c0011044 <Video::isMonochrome()>:
c0011044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011048:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001104e:	c3                   	ret    
c001104f:	90                   	nop

c0011050 <Video::getWidth()>:
c0011050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011054:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001105a:	c3                   	ret    
c001105b:	90                   	nop

c001105c <Video::getHeight()>:
c001105c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011060:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011066:	c3                   	ret    
c0011067:	90                   	nop

c0011068 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011068:	55                   	push   ebp
c0011069:	57                   	push   edi
c001106a:	56                   	push   esi
c001106b:	53                   	push   ebx
c001106c:	83 ec 2c             	sub    esp,0x2c
c001106f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011073:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011077:	83 f8 01             	cmp    eax,0x1
c001107a:	19 c9                	sbb    ecx,ecx
c001107c:	31 db                	xor    ebx,ebx
c001107e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011082:	89 cd                	mov    ebp,ecx
c0011084:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001108c:	f7 d5                	not    ebp
c001108e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011094:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011098:	01 d8                	add    eax,ebx
c001109a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001109e:	56                   	push   esi
c001109f:	e8 b8 ff ff ff       	call   c001105c <Video::getHeight()>
c00110a4:	59                   	pop    ecx
c00110a5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00110a9:	7e 70                	jle    c001111b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00110ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110b3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00110b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110be:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00110c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110c9:	89 f8                	mov    eax,edi
c00110cb:	83 c0 20             	add    eax,0x20
c00110ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110d2:	56                   	push   esi
c00110d3:	e8 78 ff ff ff       	call   c0011050 <Video::getWidth()>
c00110d8:	5a                   	pop    edx
c00110d9:	39 c7                	cmp    edi,eax
c00110db:	7d 34                	jge    c0011111 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110dd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110e2:	74 05                	je     c00110e9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00110e6:	55                   	push   ebp
c00110e7:	eb 0d                	jmp    c00110f6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110e9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110ee:	74 12                	je     c0011102 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00110f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110fa:	57                   	push   edi
c00110fb:	56                   	push   esi
c00110fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011106:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001110a:	47                   	inc    edi
c001110b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001110f:	75 c1                	jne    c00110d2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011111:	43                   	inc    ebx
c0011112:	83 fb 20             	cmp    ebx,0x20
c0011115:	0f 85 79 ff ff ff    	jne    c0011094 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001111b:	83 c4 2c             	add    esp,0x2c
c001111e:	5b                   	pop    ebx
c001111f:	5e                   	pop    esi
c0011120:	5f                   	pop    edi
c0011121:	5d                   	pop    ebp
c0011122:	c3                   	ret    
c0011123:	90                   	nop

c0011124 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011124:	55                   	push   ebp
c0011125:	57                   	push   edi
c0011126:	56                   	push   esi
c0011127:	53                   	push   ebx
c0011128:	83 ec 28             	sub    esp,0x28
c001112b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001112f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011133:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011137:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001113b:	c1 e6 08             	shl    esi,0x8
c001113e:	01 c6                	add    esi,eax
c0011140:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011144:	c1 e0 08             	shl    eax,0x8
c0011147:	01 d0                	add    eax,edx
c0011149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001114d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011151:	0f af c6             	imul   eax,esi
c0011154:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001115b:	50                   	push   eax
c001115c:	e8 62 88 ff ff       	call   c00099c3 <malloc>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	89 c7                	mov    edi,eax
c0011166:	85 c0                	test   eax,eax
c0011168:	75 10                	jne    c001117a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	68 91 3a 02 c0       	push   0xc0023a91
c0011172:	e8 ae 31 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0011177:	83 c4 10             	add    esp,0x10
c001117a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001117d:	ba 12 00 00 00       	mov    edx,0x12
c0011182:	84 c0                	test   al,al
c0011184:	74 11                	je     c0011197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011186:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001118a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001118e:	c1 fa 03             	sar    edx,0x3
c0011191:	0f af d1             	imul   edx,ecx
c0011194:	83 c2 12             	add    edx,0x12
c0011197:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001119b:	74 04                	je     c00111a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001119d:	85 f6                	test   esi,esi
c001119f:	75 12                	jne    c00111b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00111a1:	83 ec 0c             	sub    esp,0xc
c00111a4:	68 a1 3a 02 c0       	push   0xc0023aa1
c00111a9:	e8 b6 b8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00111ae:	e9 b8 00 00 00       	jmp    c001126b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00111b3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00111b7:	80 f9 02             	cmp    cl,0x2
c00111ba:	0f 85 96 00 00 00    	jne    c0011256 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00111c0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00111c5:	75 0e                	jne    c00111d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111c7:	84 c0                	test   al,al
c00111c9:	75 0a                	jne    c00111d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111cb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00111ce:	83 e8 18             	sub    eax,0x18
c00111d1:	a8 f7                	test   al,0xf7
c00111d3:	74 0a                	je     c00111df <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00111d5:	83 ec 0c             	sub    esp,0xc
c00111d8:	68 b6 3a 02 c0       	push   0xc0023ab6
c00111dd:	eb 7f                	jmp    c001125e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111ef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00111f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111fb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00111ff:	75 0c                	jne    c001120d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011201:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011206:	c1 e0 18             	shl    eax,0x18
c0011209:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001120d:	45                   	inc    ebp
c001120e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011213:	c1 e1 10             	shl    ecx,0x10
c0011216:	89 c8                	mov    eax,ecx
c0011218:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001121d:	c1 e1 08             	shl    ecx,0x8
c0011220:	09 c1                	or     ecx,eax
c0011222:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011226:	09 c1                	or     ecx,eax
c0011228:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001122c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011230:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011234:	c1 f8 03             	sar    eax,0x3
c0011237:	01 c2                	add    edx,eax
c0011239:	89 e8                	mov    eax,ebp
c001123b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001123f:	39 c6                	cmp    esi,eax
c0011241:	7f b0                	jg     c00111f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011243:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011247:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001124b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001124e:	7e 22                	jle    c0011272 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011250:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011254:	eb 99                	jmp    c00111ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011256:	50                   	push   eax
c0011257:	50                   	push   eax
c0011258:	51                   	push   ecx
c0011259:	68 c4 3a 02 c0       	push   0xc0023ac4
c001125e:	e8 01 b8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0011263:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011266:	e8 68 87 ff ff       	call   c00099d3 <free>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	31 ff                	xor    edi,edi
c0011270:	eb 0f                	jmp    c0011281 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011272:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011276:	89 30                	mov    DWORD PTR [eax],esi
c0011278:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001127c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001127f:	89 30                	mov    DWORD PTR [eax],esi
c0011281:	83 c4 1c             	add    esp,0x1c
c0011284:	89 f8                	mov    eax,edi
c0011286:	5b                   	pop    ebx
c0011287:	5e                   	pop    esi
c0011288:	5f                   	pop    edi
c0011289:	5d                   	pop    ebp
c001128a:	c3                   	ret    
c001128b:	90                   	nop

c001128c <Video::putTGA(int, int, unsigned char*, int)>:
c001128c:	55                   	push   ebp
c001128d:	57                   	push   edi
c001128e:	56                   	push   esi
c001128f:	53                   	push   ebx
c0011290:	83 ec 28             	sub    esp,0x28
c0011293:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011297:	8d 44 24 18          	lea    eax,[esp+0x18]
c001129b:	50                   	push   eax
c001129c:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112a0:	50                   	push   eax
c00112a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112a9:	56                   	push   esi
c00112aa:	e8 75 fe ff ff       	call   c0011124 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00112af:	83 c4 20             	add    esp,0x20
c00112b2:	85 c0                	test   eax,eax
c00112b4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00112b8:	74 35                	je     c00112ef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112ba:	89 c7                	mov    edi,eax
c00112bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00112c4:	39 d8                	cmp    eax,ebx
c00112c6:	7e 27                	jle    c00112ef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112c8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112d0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00112d4:	39 e8                	cmp    eax,ebp
c00112d6:	7e 14                	jle    c00112ec <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00112d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00112da:	83 c7 04             	add    edi,0x4
c00112dd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112e0:	53                   	push   ebx
c00112e1:	55                   	push   ebp
c00112e2:	45                   	inc    ebp
c00112e3:	56                   	push   esi
c00112e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	eb e0                	jmp    c00112cc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112ec:	43                   	inc    ebx
c00112ed:	eb cd                	jmp    c00112bc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112ef:	83 c4 1c             	add    esp,0x1c
c00112f2:	5b                   	pop    ebx
c00112f3:	5e                   	pop    esi
c00112f4:	5f                   	pop    edi
c00112f5:	5d                   	pop    ebp
c00112f6:	c3                   	ret    
c00112f7:	90                   	nop

c00112f8 <ACPI::close(int, int, void*)>:
c00112f8:	83 ec 1c             	sub    esp,0x1c
c00112fb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011303:	74 0b                	je     c0011310 <ACPI::close(int, int, void*)+0x18>
c0011305:	b8 00 00 00 00       	mov    eax,0x0
c001130a:	e9 99 00 00 00       	jmp    c00113a8 <ACPI::close(int, int, void*)+0xb0>
c001130f:	90                   	nop
c0011310:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011315:	75 29                	jne    c0011340 <ACPI::close(int, int, void*)+0x48>
c0011317:	a1 68 6a 02 c0       	mov    eax,ds:0xc0026a68
c001131c:	85 c0                	test   eax,eax
c001131e:	74 08                	je     c0011328 <ACPI::close(int, int, void*)+0x30>
c0011320:	a1 68 6a 02 c0       	mov    eax,ds:0xc0026a68
c0011325:	ff d0                	call   eax
c0011327:	90                   	nop
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	68 20 3b 02 c0       	push   0xc0023b20
c0011330:	e8 f0 2f 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001133d:	eb 69                	jmp    c00113a8 <ACPI::close(int, int, void*)+0xb0>
c001133f:	90                   	nop
c0011340:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011345:	75 59                	jne    c00113a0 <ACPI::close(int, int, void*)+0xa8>
c0011347:	a1 64 6a 02 c0       	mov    eax,ds:0xc0026a64
c001134c:	85 c0                	test   eax,eax
c001134e:	74 08                	je     c0011358 <ACPI::close(int, int, void*)+0x60>
c0011350:	a1 64 6a 02 c0       	mov    eax,ds:0xc0026a64
c0011355:	ff d0                	call   eax
c0011357:	90                   	nop
c0011358:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001135d:	8d 76 00             	lea    esi,[esi+0x0]
c0011360:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011365:	83 e0 02             	and    eax,0x2
c0011368:	74 1e                	je     c0011388 <ACPI::close(int, int, void*)+0x90>
c001136a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011371:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011375:	89 c2                	mov    edx,eax
c0011377:	ec                   	in     al,dx
c0011378:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001137c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011380:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011384:	eb da                	jmp    c0011360 <ACPI::close(int, int, void*)+0x68>
c0011386:	66 90                	xchg   ax,ax
c0011388:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001138f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011394:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011398:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001139c:	ee                   	out    dx,al
c001139d:	8d 76 00             	lea    esi,[esi+0x0]
c00113a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113a5:	8d 76 00             	lea    esi,[esi+0x0]
c00113a8:	83 c4 1c             	add    esp,0x1c
c00113ab:	c3                   	ret    

c00113ac <findRSDP()>:
c00113ac:	83 ec 1c             	sub    esp,0x1c
c00113af:	83 ec 0c             	sub    esp,0xc
c00113b2:	68 fb 3b 02 c0       	push   0xc0023bfb
c00113b7:	e8 61 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00113c4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113ca:	83 e0 04             	and    eax,0x4
c00113cd:	84 c0                	test   al,al
c00113cf:	75 0b                	jne    c00113dc <findRSDP()+0x30>
c00113d1:	b8 00 00 00 00       	mov    eax,0x0
c00113d6:	e9 a1 00 00 00       	jmp    c001147c <findRSDP()+0xd0>
c00113db:	90                   	nop
c00113dc:	a1 34 64 02 c0       	mov    eax,ds:0xc0026434
c00113e1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113e6:	7f 1c                	jg     c0011404 <findRSDP()+0x58>
c00113e8:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00113ed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00113f3:	83 e2 fb             	and    edx,0xfffffffb
c00113f6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00113fc:	b8 00 00 00 00       	mov    eax,0x0
c0011401:	eb 79                	jmp    c001147c <findRSDP()+0xd0>
c0011403:	90                   	nop
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	68 0b 3c 02 c0       	push   0xc0023c0b
c001140c:	e8 0c 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001141c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011424:	77 3e                	ja     c0011464 <findRSDP()+0xb8>
c0011426:	83 ec 04             	sub    esp,0x4
c0011429:	6a 08                	push   0x8
c001142b:	68 24 3c 02 c0       	push   0xc0023c24
c0011430:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011434:	e8 47 f1 fe ff       	call   c0000580 <memcmp>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	85 c0                	test   eax,eax
c001143e:	0f 94 c0             	sete   al
c0011441:	84 c0                	test   al,al
c0011443:	74 17                	je     c001145c <findRSDP()+0xb0>
c0011445:	83 ec 0c             	sub    esp,0xc
c0011448:	68 2d 3c 02 c0       	push   0xc0023c2d
c001144d:	e8 cb 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011459:	eb 21                	jmp    c001147c <findRSDP()+0xd0>
c001145b:	90                   	nop
c001145c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011461:	eb b9                	jmp    c001141c <findRSDP()+0x70>
c0011463:	90                   	nop
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	68 3b 3c 02 c0       	push   0xc0023c3b
c001146c:	e8 ac 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	b8 00 00 00 00       	mov    eax,0x0
c0011479:	8d 76 00             	lea    esi,[esi+0x0]
c001147c:	83 c4 1c             	add    esp,0x1c
c001147f:	c3                   	ret    

c0011480 <loadACPITables(unsigned char*)>:
c0011480:	57                   	push   edi
c0011481:	56                   	push   esi
c0011482:	53                   	push   ebx
c0011483:	83 ec 60             	sub    esp,0x60
c0011486:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001148b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011491:	83 e0 04             	and    eax,0x4
c0011494:	84 c0                	test   al,al
c0011496:	0f 84 3c 02 00 00    	je     c00116d8 <loadACPITables(unsigned char*)+0x258>
c001149c:	a0 80 6c 02 c0       	mov    al,ds:0xc0026c80
c00114a1:	84 c0                	test   al,al
c00114a3:	74 77                	je     c001151c <loadACPITables(unsigned char*)+0x9c>
c00114a5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114a9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00114ad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00114b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b4:	83 e8 24             	sub    eax,0x24
c00114b7:	c1 e8 03             	shr    eax,0x3
c00114ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00114be:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00114c6:	66 90                	xchg   ax,ax
c00114c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114cc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00114d0:	0f 8d b6 00 00 00    	jge    c001158c <loadACPITables(unsigned char*)+0x10c>
c00114d6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114da:	83 c0 24             	add    eax,0x24
c00114dd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114e1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114e9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114ed:	c1 e0 03             	shl    eax,0x3
c00114f0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00114f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00114f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00114fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fd:	89 c1                	mov    ecx,eax
c00114ff:	a1 6c 6a 02 c0       	mov    eax,ds:0xc0026a6c
c0011504:	8d 50 01             	lea    edx,[eax+0x1]
c0011507:	89 15 6c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a6c,edx
c001150d:	89 ca                	mov    edx,ecx
c001150f:	89 14 c5 84 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd957c],edx
c0011516:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001151a:	eb ac                	jmp    c00114c8 <loadACPITables(unsigned char*)+0x48>
c001151c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011520:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011524:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	83 e8 24             	sub    eax,0x24
c001152e:	c1 e8 02             	shr    eax,0x2
c0011531:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011535:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001153d:	8d 76 00             	lea    esi,[esi+0x0]
c0011540:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011544:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011548:	7d 42                	jge    c001158c <loadACPITables(unsigned char*)+0x10c>
c001154a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001154e:	83 c0 24             	add    eax,0x24
c0011551:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011555:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011559:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001155d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011561:	c1 e0 02             	shl    eax,0x2
c0011564:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011568:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001156c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001156e:	a1 6c 6a 02 c0       	mov    eax,ds:0xc0026a6c
c0011573:	8d 50 01             	lea    edx,[eax+0x1]
c0011576:	89 15 6c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a6c,edx
c001157c:	89 ca                	mov    edx,ecx
c001157e:	89 14 c5 84 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd957c],edx
c0011585:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011589:	eb b5                	jmp    c0011540 <loadACPITables(unsigned char*)+0xc0>
c001158b:	90                   	nop
c001158c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011594:	a1 6c 6a 02 c0       	mov    eax,ds:0xc0026a6c
c0011599:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001159d:	0f 8d 39 01 00 00    	jge    c00116dc <loadACPITables(unsigned char*)+0x25c>
c00115a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115a7:	8b 04 c5 84 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd957c]
c00115ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00115ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115be:	25 ff 0f 00 00       	and    eax,0xfff
c00115c3:	89 c6                	mov    esi,eax
c00115c5:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c00115cb:	83 ec 0c             	sub    esp,0xc
c00115ce:	6a 01                	push   0x1
c00115d0:	e8 b4 a0 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	6a 01                	push   0x1
c00115e7:	6a 01                	push   0x1
c00115e9:	50                   	push   eax
c00115ea:	52                   	push   edx
c00115eb:	53                   	push   ebx
c00115ec:	e8 35 aa ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115f1:	83 c4 20             	add    esp,0x20
c00115f4:	09 f0                	or     eax,esi
c00115f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115fa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115fe:	c1 e0 03             	shl    eax,0x3
c0011601:	05 80 6a 02 c0       	add    eax,0xc0026a80
c0011606:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001160a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001160e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011612:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001161a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001161e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011622:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011626:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001162a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001162e:	89 c6                	mov    esi,eax
c0011630:	89 d7                	mov    edi,edx
c0011632:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011634:	89 c8                	mov    eax,ecx
c0011636:	89 fa                	mov    edx,edi
c0011638:	89 f3                	mov    ebx,esi
c001163a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001163e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011642:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011646:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001164a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001164d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011655:	05 00 10 00 00       	add    eax,0x1000
c001165a:	c1 e8 0c             	shr    eax,0xc
c001165d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001166d:	25 ff 0f 00 00       	and    eax,0xfff
c0011672:	89 c6                	mov    esi,eax
c0011674:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c001167a:	83 ec 0c             	sub    esp,0xc
c001167d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011681:	e8 03 a0 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001168d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	6a 01                	push   0x1
c0011698:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001169c:	50                   	push   eax
c001169d:	52                   	push   edx
c001169e:	53                   	push   ebx
c001169f:	e8 82 a9 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116a4:	83 c4 20             	add    esp,0x20
c00116a7:	09 f0                	or     eax,esi
c00116a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b1:	83 ec 0c             	sub    esp,0xc
c00116b4:	50                   	push   eax
c00116b5:	e8 ff a2 ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00116ba:	83 c4 10             	add    esp,0x10
c00116bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00116c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116c5:	89 14 c5 84 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd957c],edx
c00116cc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00116d0:	e9 bf fe ff ff       	jmp    c0011594 <loadACPITables(unsigned char*)+0x114>
c00116d5:	8d 76 00             	lea    esi,[esi+0x0]
c00116d8:	90                   	nop
c00116d9:	8d 76 00             	lea    esi,[esi+0x0]
c00116dc:	83 c4 60             	add    esp,0x60
c00116df:	5b                   	pop    ebx
c00116e0:	5e                   	pop    esi
c00116e1:	5f                   	pop    edi
c00116e2:	c3                   	ret    
c00116e3:	90                   	nop

c00116e4 <findRSDT(unsigned char*)>:
c00116e4:	57                   	push   edi
c00116e5:	56                   	push   esi
c00116e6:	53                   	push   ebx
c00116e7:	83 ec 50             	sub    esp,0x50
c00116ea:	83 ec 0c             	sub    esp,0xc
c00116ed:	68 4f 3c 02 c0       	push   0xc0023c4f
c00116f2:	e8 26 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00116ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011705:	83 e0 04             	and    eax,0x4
c0011708:	84 c0                	test   al,al
c001170a:	75 0c                	jne    c0011718 <findRSDT(unsigned char*)+0x34>
c001170c:	b8 00 00 00 00       	mov    eax,0x0
c0011711:	e9 86 01 00 00       	jmp    c001189c <findRSDT(unsigned char*)+0x1b8>
c0011716:	66 90                	xchg   ax,ax
c0011718:	83 ec 0c             	sub    esp,0xc
c001171b:	68 61 3c 02 c0       	push   0xc0023c61
c0011720:	e8 f8 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	89 e0                	mov    eax,esp
c001172a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001172e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011732:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011736:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001173e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011742:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001174a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001174e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011752:	89 c6                	mov    esi,eax
c0011754:	89 d7                	mov    edi,edx
c0011756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011758:	89 c8                	mov    eax,ecx
c001175a:	89 fa                	mov    edx,edi
c001175c:	89 f3                	mov    ebx,esi
c001175e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011762:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011766:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001176a:	83 ec 0c             	sub    esp,0xc
c001176d:	68 73 3c 02 c0       	push   0xc0023c73
c0011772:	e8 a6 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001177e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011782:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001178a:	83 ec 0c             	sub    esp,0xc
c001178d:	68 85 3c 02 c0       	push   0xc0023c85
c0011792:	e8 86 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001179e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117a2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117ae:	83 ec 04             	sub    esp,0x4
c00117b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117b9:	68 44 3b 02 c0       	push   0xc0023b44
c00117be:	e8 a1 b2 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00117c3:	83 c4 10             	add    esp,0x10
c00117c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117ca:	25 ff 0f 00 00       	and    eax,0xfff
c00117cf:	89 c6                	mov    esi,eax
c00117d1:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	6a 02                	push   0x2
c00117dc:	e8 a8 9e ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117ee:	83 ec 0c             	sub    esp,0xc
c00117f1:	6a 01                	push   0x1
c00117f3:	6a 02                	push   0x2
c00117f5:	50                   	push   eax
c00117f6:	52                   	push   edx
c00117f7:	53                   	push   ebx
c00117f8:	e8 29 a8 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117fd:	83 c4 20             	add    esp,0x20
c0011800:	09 f0                	or     eax,esi
c0011802:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011806:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001180a:	25 ff 0f 00 00       	and    eax,0xfff
c001180f:	89 c6                	mov    esi,eax
c0011811:	8b 1d 50 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026550
c0011817:	83 ec 0c             	sub    esp,0xc
c001181a:	6a 02                	push   0x2
c001181c:	e8 68 9e ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c0011821:	83 c4 10             	add    esp,0x10
c0011824:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011828:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001182e:	83 ec 0c             	sub    esp,0xc
c0011831:	6a 01                	push   0x1
c0011833:	6a 02                	push   0x2
c0011835:	50                   	push   eax
c0011836:	52                   	push   edx
c0011837:	53                   	push   ebx
c0011838:	e8 e9 a7 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001183d:	83 c4 20             	add    esp,0x20
c0011840:	09 f0                	or     eax,esi
c0011842:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011846:	83 ec 04             	sub    esp,0x4
c0011849:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001184d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011851:	68 64 3b 02 c0       	push   0xc0023b64
c0011856:	e8 09 b2 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011863:	75 13                	jne    c0011878 <findRSDT(unsigned char*)+0x194>
c0011865:	c6 05 80 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026c80,0x0
c001186c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011870:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011874:	eb 22                	jmp    c0011898 <findRSDT(unsigned char*)+0x1b4>
c0011876:	66 90                	xchg   ax,ax
c0011878:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001187d:	75 11                	jne    c0011890 <findRSDT(unsigned char*)+0x1ac>
c001187f:	c6 05 80 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c80,0x1
c0011886:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001188a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001188e:	eb 08                	jmp    c0011898 <findRSDT(unsigned char*)+0x1b4>
c0011890:	b8 00 00 00 00       	mov    eax,0x0
c0011895:	eb 05                	jmp    c001189c <findRSDT(unsigned char*)+0x1b8>
c0011897:	90                   	nop
c0011898:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001189c:	83 c4 50             	add    esp,0x50
c001189f:	5b                   	pop    ebx
c00118a0:	5e                   	pop    esi
c00118a1:	5f                   	pop    edi
c00118a2:	c3                   	ret    
c00118a3:	90                   	nop

c00118a4 <findDataTable(unsigned char*, char*)>:
c00118a4:	83 ec 1c             	sub    esp,0x1c
c00118a7:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00118ac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118b2:	83 e0 04             	and    eax,0x4
c00118b5:	84 c0                	test   al,al
c00118b7:	75 07                	jne    c00118c0 <findDataTable(unsigned char*, char*)+0x1c>
c00118b9:	b8 00 00 00 00       	mov    eax,0x0
c00118be:	eb 58                	jmp    c0011918 <findDataTable(unsigned char*, char*)+0x74>
c00118c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118c8:	a1 6c 6a 02 c0       	mov    eax,ds:0xc0026a6c
c00118cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00118d1:	7d 3d                	jge    c0011910 <findDataTable(unsigned char*, char*)+0x6c>
c00118d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d7:	c1 e0 03             	shl    eax,0x3
c00118da:	05 80 6a 02 c0       	add    eax,0xc0026a80
c00118df:	83 ec 04             	sub    esp,0x4
c00118e2:	6a 04                	push   0x4
c00118e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e8:	50                   	push   eax
c00118e9:	e8 92 ec fe ff       	call   c0000580 <memcmp>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	85 c0                	test   eax,eax
c00118f3:	0f 94 c0             	sete   al
c00118f6:	84 c0                	test   al,al
c00118f8:	74 0e                	je     c0011908 <findDataTable(unsigned char*, char*)+0x64>
c00118fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118fe:	8b 04 c5 84 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd957c]
c0011905:	eb 11                	jmp    c0011918 <findDataTable(unsigned char*, char*)+0x74>
c0011907:	90                   	nop
c0011908:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001190c:	eb ba                	jmp    c00118c8 <findDataTable(unsigned char*, char*)+0x24>
c001190e:	66 90                	xchg   ax,ax
c0011910:	b8 00 00 00 00       	mov    eax,0x0
c0011915:	8d 76 00             	lea    esi,[esi+0x0]
c0011918:	83 c4 1c             	add    esp,0x1c
c001191b:	c3                   	ret    

c001191c <scanMADT()>:
c001191c:	53                   	push   ebx
c001191d:	83 ec 38             	sub    esp,0x38
c0011920:	83 ec 0c             	sub    esp,0xc
c0011923:	68 97 3c 02 c0       	push   0xc0023c97
c0011928:	e8 f0 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	a1 00 64 02 c0       	mov    eax,ds:0xc0026400
c0011935:	25 00 04 00 00       	and    eax,0x400
c001193a:	74 14                	je     c0011950 <scanMADT()+0x34>
c001193c:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0011941:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011947:	83 e2 fb             	and    edx,0xfffffffb
c001194a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011950:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0011955:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001195b:	83 e0 04             	and    eax,0x4
c001195e:	84 c0                	test   al,al
c0011960:	0f 84 82 04 00 00    	je     c0011de8 <scanMADT()+0x4cc>
c0011966:	83 ec 0c             	sub    esp,0xc
c0011969:	68 a4 3c 02 c0       	push   0xc0023ca4
c001196e:	e8 aa 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011973:	83 c4 10             	add    esp,0x10
c0011976:	e8 31 fa ff ff       	call   c00113ac <findRSDP()>
c001197b:	a3 8c 6c 02 c0       	mov    ds:0xc0026c8c,eax
c0011980:	a1 8c 6c 02 c0       	mov    eax,ds:0xc0026c8c
c0011985:	85 c0                	test   eax,eax
c0011987:	75 1b                	jne    c00119a4 <scanMADT()+0x88>
c0011989:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001198e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011994:	83 e2 fb             	and    edx,0xfffffffb
c0011997:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001199d:	e9 4e 04 00 00       	jmp    c0011df0 <scanMADT()+0x4d4>
c00119a2:	66 90                	xchg   ax,ax
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	68 b6 3c 02 c0       	push   0xc0023cb6
c00119ac:	e8 6c 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	a1 8c 6c 02 c0       	mov    eax,ds:0xc0026c8c
c00119b9:	83 ec 0c             	sub    esp,0xc
c00119bc:	50                   	push   eax
c00119bd:	e8 22 fd ff ff       	call   c00116e4 <findRSDT(unsigned char*)>
c00119c2:	83 c4 10             	add    esp,0x10
c00119c5:	a3 88 6c 02 c0       	mov    ds:0xc0026c88,eax
c00119ca:	a1 88 6c 02 c0       	mov    eax,ds:0xc0026c88
c00119cf:	85 c0                	test   eax,eax
c00119d1:	75 19                	jne    c00119ec <scanMADT()+0xd0>
c00119d3:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00119d8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119de:	83 e2 fb             	and    edx,0xfffffffb
c00119e1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119e7:	e9 04 04 00 00       	jmp    c0011df0 <scanMADT()+0x4d4>
c00119ec:	83 ec 0c             	sub    esp,0xc
c00119ef:	68 c6 3c 02 c0       	push   0xc0023cc6
c00119f4:	e8 24 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	a1 88 6c 02 c0       	mov    eax,ds:0xc0026c88
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	50                   	push   eax
c0011a05:	e8 76 fa ff ff       	call   c0011480 <loadACPITables(unsigned char*)>
c0011a0a:	83 c4 10             	add    esp,0x10
c0011a0d:	a1 88 6c 02 c0       	mov    eax,ds:0xc0026c88
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	68 de 3c 02 c0       	push   0xc0023cde
c0011a1a:	50                   	push   eax
c0011a1b:	e8 84 fe ff ff       	call   c00118a4 <findDataTable(unsigned char*, char*)>
c0011a20:	83 c4 10             	add    esp,0x10
c0011a23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a27:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a2c:	75 1a                	jne    c0011a48 <scanMADT()+0x12c>
c0011a2e:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0011a33:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a39:	83 e2 fe             	and    edx,0xfffffffe
c0011a3c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a42:	e9 a9 03 00 00       	jmp    c0011df0 <scanMADT()+0x4d4>
c0011a47:	90                   	nop
c0011a48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a57:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a5b:	0f 87 8f 03 00 00    	ja     c0011df0 <scanMADT()+0x4d4>
c0011a61:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a69:	0f 87 81 03 00 00    	ja     c0011df0 <scanMADT()+0x4d4>
c0011a6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0011a7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a86:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a8a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a92:	8d 50 01             	lea    edx,[eax+0x1]
c0011a95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a9d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011aa1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011aa5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011aaa:	0f 86 3c 03 00 00    	jbe    c0011dec <scanMADT()+0x4d0>
c0011ab0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011ab5:	75 59                	jne    c0011b10 <scanMADT()+0x1f4>
c0011ab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011abb:	8d 50 01             	lea    edx,[eax+0x1]
c0011abe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ac2:	8a 15 80 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e80
c0011ac8:	0f b6 d2             	movzx  edx,dl
c0011acb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011acf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ad3:	88 82 c0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9140],al
c0011ad9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011add:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ae4:	8a 15 80 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e80
c0011aea:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011aed:	88 0d 80 6e 02 c0    	mov    BYTE PTR ds:0xc0026e80,cl
c0011af3:	0f b6 d2             	movzx  edx,dl
c0011af6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011afa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011afe:	88 82 a0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9160],al
c0011b04:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b09:	e9 c6 02 00 00       	jmp    c0011dd4 <scanMADT()+0x4b8>
c0011b0e:	66 90                	xchg   ax,ax
c0011b10:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b15:	0f 85 15 01 00 00    	jne    c0011c30 <scanMADT()+0x314>
c0011b1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b1f:	8d 50 01             	lea    edx,[eax+0x1]
c0011b22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b26:	8a 15 40 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d40
c0011b2c:	0f b6 d2             	movzx  edx,dl
c0011b2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b33:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b37:	88 82 60 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92a0],al
c0011b3d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b49:	01 d0                	add    eax,edx
c0011b4b:	83 c0 2c             	add    eax,0x2c
c0011b4e:	8a 00                	mov    al,BYTE PTR [eax]
c0011b50:	0f b6 d0             	movzx  edx,al
c0011b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b57:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b5e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b62:	0f b6 c0             	movzx  eax,al
c0011b65:	c1 e0 08             	shl    eax,0x8
c0011b68:	89 d1                	mov    ecx,edx
c0011b6a:	09 c1                	or     ecx,eax
c0011b6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b70:	8d 50 02             	lea    edx,[eax+0x2]
c0011b73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b77:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b7b:	0f b6 c0             	movzx  eax,al
c0011b7e:	c1 e0 10             	shl    eax,0x10
c0011b81:	09 c1                	or     ecx,eax
c0011b83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b87:	8d 50 03             	lea    edx,[eax+0x3]
c0011b8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b8e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b92:	0f b6 c0             	movzx  eax,al
c0011b95:	c1 e0 18             	shl    eax,0x18
c0011b98:	09 c1                	or     ecx,eax
c0011b9a:	89 ca                	mov    edx,ecx
c0011b9c:	a0 40 6d 02 c0       	mov    al,ds:0xc0026d40
c0011ba1:	0f b6 c0             	movzx  eax,al
c0011ba4:	89 14 85 80 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9280],edx
c0011bab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011bb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bb8:	01 d0                	add    eax,edx
c0011bba:	83 c0 2c             	add    eax,0x2c
c0011bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0011bbf:	0f b6 d0             	movzx  edx,al
c0011bc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc6:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bcd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bd1:	0f b6 c0             	movzx  eax,al
c0011bd4:	c1 e0 08             	shl    eax,0x8
c0011bd7:	89 d1                	mov    ecx,edx
c0011bd9:	09 c1                	or     ecx,eax
c0011bdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bdf:	8d 50 02             	lea    edx,[eax+0x2]
c0011be2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011be6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bea:	0f b6 c0             	movzx  eax,al
c0011bed:	c1 e0 10             	shl    eax,0x10
c0011bf0:	09 c1                	or     ecx,eax
c0011bf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bf6:	8d 50 03             	lea    edx,[eax+0x3]
c0011bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bfd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c01:	0f b6 c0             	movzx  eax,al
c0011c04:	c1 e0 18             	shl    eax,0x18
c0011c07:	09 c1                	or     ecx,eax
c0011c09:	89 ca                	mov    edx,ecx
c0011c0b:	a0 40 6d 02 c0       	mov    al,ds:0xc0026d40
c0011c10:	0f b6 c0             	movzx  eax,al
c0011c13:	89 14 85 00 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9200],edx
c0011c1a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c1f:	a0 40 6d 02 c0       	mov    al,ds:0xc0026d40
c0011c24:	40                   	inc    eax
c0011c25:	a2 40 6d 02 c0       	mov    ds:0xc0026d40,al
c0011c2a:	e9 a5 01 00 00       	jmp    c0011dd4 <scanMADT()+0x4b8>
c0011c2f:	90                   	nop
c0011c30:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c35:	0f 85 e9 00 00 00    	jne    c0011d24 <scanMADT()+0x408>
c0011c3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c4a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c4e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c56:	8d 50 01             	lea    edx,[eax+0x1]
c0011c59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c61:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c65:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c71:	01 d0                	add    eax,edx
c0011c73:	83 c0 2c             	add    eax,0x2c
c0011c76:	8a 00                	mov    al,BYTE PTR [eax]
c0011c78:	0f b6 d0             	movzx  edx,al
c0011c7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c86:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c8a:	0f b6 c0             	movzx  eax,al
c0011c8d:	c1 e0 08             	shl    eax,0x8
c0011c90:	89 d1                	mov    ecx,edx
c0011c92:	09 c1                	or     ecx,eax
c0011c94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c98:	8d 50 02             	lea    edx,[eax+0x2]
c0011c9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c9f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ca3:	0f b6 c0             	movzx  eax,al
c0011ca6:	c1 e0 10             	shl    eax,0x10
c0011ca9:	09 c1                	or     ecx,eax
c0011cab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011caf:	8d 50 03             	lea    edx,[eax+0x3]
c0011cb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cb6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cba:	0f b6 c0             	movzx  eax,al
c0011cbd:	c1 e0 18             	shl    eax,0x18
c0011cc0:	09 c8                	or     eax,ecx
c0011cc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cc6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ccb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ccf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd3:	01 d0                	add    eax,edx
c0011cd5:	83 c0 2c             	add    eax,0x2c
c0011cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0011cda:	0f b6 c0             	movzx  eax,al
c0011cdd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ce1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ce4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ce8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cec:	0f b6 d2             	movzx  edx,dl
c0011cef:	c1 e2 08             	shl    edx,0x8
c0011cf2:	09 d0                	or     eax,edx
c0011cf4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011cf9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011cfe:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d07:	88 90 e0 5a 02 c0    	mov    BYTE PTR [eax-0x3ffda520],dl
c0011d0d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d12:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d17:	66 89 84 12 20 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd92e0],ax
c0011d1f:	e9 b0 00 00 00       	jmp    c0011dd4 <scanMADT()+0x4b8>
c0011d24:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d29:	0f 85 99 00 00 00    	jne    c0011dc8 <scanMADT()+0x4ac>
c0011d2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d33:	8d 50 01             	lea    edx,[eax+0x1]
c0011d36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d3e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d42:	0f b6 c0             	movzx  eax,al
c0011d45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d51:	01 d0                	add    eax,edx
c0011d53:	83 c0 2c             	add    eax,0x2c
c0011d56:	8a 00                	mov    al,BYTE PTR [eax]
c0011d58:	0f b6 d0             	movzx  edx,al
c0011d5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d5f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d66:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d6a:	0f b6 c0             	movzx  eax,al
c0011d6d:	c1 e0 08             	shl    eax,0x8
c0011d70:	09 d0                	or     eax,edx
c0011d72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d76:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d8e:	0f b6 c0             	movzx  eax,al
c0011d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d99:	c1 e0 08             	shl    eax,0x8
c0011d9c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011da0:	89 c1                	mov    ecx,eax
c0011da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011da6:	c1 e0 18             	shl    eax,0x18
c0011da9:	89 c3                	mov    ebx,eax
c0011dab:	a1 90 6c 02 c0       	mov    eax,ds:0xc0026c90
c0011db0:	8d 50 01             	lea    edx,[eax+0x1]
c0011db3:	89 15 90 6c 02 c0    	mov    DWORD PTR ds:0xc0026c90,edx
c0011db9:	09 d9                	or     ecx,ebx
c0011dbb:	89 ca                	mov    edx,ecx
c0011dbd:	89 14 85 a0 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9360],edx
c0011dc4:	eb 0e                	jmp    c0011dd4 <scanMADT()+0x4b8>
c0011dc6:	66 90                	xchg   ax,ax
c0011dc8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011dcd:	75 05                	jne    c0011dd4 <scanMADT()+0x4b8>
c0011dcf:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011dd4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011dd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011ddd:	01 d0                	add    eax,edx
c0011ddf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011de3:	e9 68 fc ff ff       	jmp    c0011a50 <scanMADT()+0x134>
c0011de8:	90                   	nop
c0011de9:	eb 05                	jmp    c0011df0 <scanMADT()+0x4d4>
c0011deb:	90                   	nop
c0011dec:	90                   	nop
c0011ded:	8d 76 00             	lea    esi,[esi+0x0]
c0011df0:	83 c4 38             	add    esp,0x38
c0011df3:	5b                   	pop    ebx
c0011df4:	c3                   	ret    
c0011df5:	90                   	nop
c0011df6:	66 90                	xchg   ax,ax

c0011df8 <ACPI::ACPI()>:
c0011df8:	83 ec 0c             	sub    esp,0xc
c0011dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dff:	83 ec 08             	sub    esp,0x8
c0011e02:	68 e3 3c 02 c0       	push   0xc0023ce3
c0011e07:	50                   	push   eax
c0011e08:	e8 a1 c2 ff ff       	call   c000e0ae <Device::Device(char const*)>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	ba 6c 3e 02 c0       	mov    edx,0xc0023e6c
c0011e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e19:	89 10                	mov    DWORD PTR [eax],edx
c0011e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e38:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e42:	83 ec 0c             	sub    esp,0xc
c0011e45:	68 e8 3c 02 c0       	push   0xc0023ce8
c0011e4a:	e8 ce 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	e8 c5 fa ff ff       	call   c001191c <scanMADT()>
c0011e57:	90                   	nop
c0011e58:	83 c4 0c             	add    esp,0xc
c0011e5b:	c3                   	ret    

c0011e5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e5c:	83 ec 2c             	sub    esp,0x2c
c0011e5f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e67:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e6b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e6f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e74:	88 d0                	mov    al,dl
c0011e76:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e7a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e7f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e87:	90                   	nop
c0011e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e92:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e96:	0f 8d 9c 00 00 00    	jge    c0011f38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011e9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ea4:	83 c2 2a             	add    edx,0x2a
c0011ea7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011eab:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011eb0:	75 7a                	jne    c0011f2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011eb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eba:	83 c2 2a             	add    edx,0x2a
c0011ebd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011ec1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011ec5:	75 65                	jne    c0011f2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011ec7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ecc:	74 3a                	je     c0011f08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011ece:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ed6:	83 c2 2a             	add    edx,0x2a
c0011ed9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ee4:	39 c2                	cmp    edx,eax
c0011ee6:	74 10                	je     c0011ef8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011ee8:	83 ec 0c             	sub    esp,0xc
c0011eeb:	68 84 3b 02 c0       	push   0xc0023b84
c0011ef0:	e8 30 24 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0011ef5:	83 c4 10             	add    esp,0x10
c0011ef8:	83 ec 0c             	sub    esp,0xc
c0011efb:	68 f6 3c 02 c0       	push   0xc0023cf6
c0011f00:	e8 20 24 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f14:	83 c2 2a             	add    edx,0x2a
c0011f17:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f1d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f20:	89 01                	mov    DWORD PTR [ecx],eax
c0011f22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f25:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f2a:	66 90                	xchg   ax,ax
c0011f2c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f30:	e9 53 ff ff ff       	jmp    c0011e88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f35:	8d 76 00             	lea    esi,[esi+0x0]
c0011f38:	90                   	nop
c0011f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3d:	83 c4 2c             	add    esp,0x2c
c0011f40:	c2 04 00             	ret    0x4
c0011f43:	90                   	nop

c0011f44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f44:	83 ec 1c             	sub    esp,0x1c
c0011f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f4b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f53:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f58:	88 c8                	mov    al,cl
c0011f5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f5e:	88 d0                	mov    al,dl
c0011f60:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f68:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f72:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f75:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f79:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f81:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f8b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f92:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fa1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011fa5:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fac:	83 c2 2a             	add    edx,0x2a
c0011faf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fb7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fc8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fd6:	8d 50 01             	lea    edx,[eax+0x1]
c0011fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fdd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fed:	3d 00 02 00 00       	cmp    eax,0x200
c0011ff2:	75 10                	jne    c0012004 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011ff4:	83 ec 0c             	sub    esp,0xc
c0011ff7:	68 05 3d 02 c0       	push   0xc0023d05
c0011ffc:	e8 24 23 00 00       	call   c0014325 <Krnl::panic(char const*)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	90                   	nop
c0012005:	83 c4 1c             	add    esp,0x1c
c0012008:	c3                   	ret    
c0012009:	90                   	nop
c001200a:	66 90                	xchg   ax,ax

c001200c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001200c:	b8 00 00 00 00       	mov    eax,0x0
c0012011:	c3                   	ret    
c0012012:	66 90                	xchg   ax,ax

c0012014 <ACPI::detectPCI()>:
c0012014:	53                   	push   ebx
c0012015:	83 ec 28             	sub    esp,0x28
c0012018:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001201d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012022:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0012027:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001202d:	83 e0 04             	and    eax,0x4
c0012030:	84 c0                	test   al,al
c0012032:	74 2c                	je     c0012060 <ACPI::detectPCI()+0x4c>
c0012034:	a1 88 6c 02 c0       	mov    eax,ds:0xc0026c88
c0012039:	83 ec 08             	sub    esp,0x8
c001203c:	68 22 3d 02 c0       	push   0xc0023d22
c0012041:	50                   	push   eax
c0012042:	e8 5d f8 ff ff       	call   c00118a4 <findDataTable(unsigned char*, char*)>
c0012047:	83 c4 10             	add    esp,0x10
c001204a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001204e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012053:	74 0b                	je     c0012060 <ACPI::detectPCI()+0x4c>
c0012055:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001205a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001205f:	90                   	nop
c0012060:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0012068:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001206c:	8a 00                	mov    al,BYTE PTR [eax]
c001206e:	3c 01                	cmp    al,0x1
c0012070:	75 0e                	jne    c0012080 <ACPI::detectPCI()+0x6c>
c0012072:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012077:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001207c:	eb 2a                	jmp    c00120a8 <ACPI::detectPCI()+0x94>
c001207e:	66 90                	xchg   ax,ax
c0012080:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012084:	8a 00                	mov    al,BYTE PTR [eax]
c0012086:	3c 02                	cmp    al,0x2
c0012088:	75 1e                	jne    c00120a8 <ACPI::detectPCI()+0x94>
c001208a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001208f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012094:	74 12                	je     c00120a8 <ACPI::detectPCI()+0x94>
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	68 b4 3b 02 c0       	push   0xc0023bb4
c001209e:	e8 82 22 00 00       	call   c0014325 <Krnl::panic(char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	66 90                	xchg   ax,ax
c00120a8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00120ac:	83 f0 01             	xor    eax,0x1
c00120af:	84 c0                	test   al,al
c00120b1:	74 41                	je     c00120f4 <ACPI::detectPCI()+0xe0>
c00120b3:	e8 98 e0 fe ff       	call   c0000150 <manualPCIProbe>
c00120b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120bc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120c1:	75 0d                	jne    c00120d0 <ACPI::detectPCI()+0xbc>
c00120c3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120c8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120cd:	eb 25                	jmp    c00120f4 <ACPI::detectPCI()+0xe0>
c00120cf:	90                   	nop
c00120d0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00120d5:	75 1d                	jne    c00120f4 <ACPI::detectPCI()+0xe0>
c00120d7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120dc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120e1:	74 11                	je     c00120f4 <ACPI::detectPCI()+0xe0>
c00120e3:	83 ec 0c             	sub    esp,0xc
c00120e6:	68 b4 3b 02 c0       	push   0xc0023bb4
c00120eb:	e8 35 22 00 00       	call   c0014325 <Krnl::panic(char const*)>
c00120f0:	83 c4 10             	add    esp,0x10
c00120f3:	90                   	nop
c00120f4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120f9:	0f 84 85 00 00 00    	je     c0012184 <ACPI::detectPCI()+0x170>
c00120ff:	83 ec 0c             	sub    esp,0xc
c0012102:	68 27 3d 02 c0       	push   0xc0023d27
c0012107:	e8 11 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012117:	83 ec 0c             	sub    esp,0xc
c001211a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001211e:	e8 a0 78 ff ff       	call   c00099c3 <malloc>
c0012123:	83 c4 10             	add    esp,0x10
c0012126:	89 c3                	mov    ebx,eax
c0012128:	83 ec 0c             	sub    esp,0xc
c001212b:	53                   	push   ebx
c001212c:	e8 dd a9 00 00       	call   c001cb0e <PCI::PCI()>
c0012131:	83 c4 10             	add    esp,0x10
c0012134:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213c:	83 ec 08             	sub    esp,0x8
c001213f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012143:	50                   	push   eax
c0012144:	e8 61 bd ff ff       	call   c000deaa <Device::addChild(Device*)>
c0012149:	83 c4 10             	add    esp,0x10
c001214c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	83 c0 08             	add    eax,0x8
c0012155:	8b 00                	mov    eax,DWORD PTR [eax]
c0012157:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001215c:	74 0a                	je     c0012168 <ACPI::detectPCI()+0x154>
c001215e:	ba 01 00 00 00       	mov    edx,0x1
c0012163:	eb 0b                	jmp    c0012170 <ACPI::detectPCI()+0x15c>
c0012165:	8d 76 00             	lea    esi,[esi+0x0]
c0012168:	ba 02 00 00 00       	mov    edx,0x2
c001216d:	8d 76 00             	lea    esi,[esi+0x0]
c0012170:	6a 00                	push   0x0
c0012172:	6a 00                	push   0x0
c0012174:	52                   	push   edx
c0012175:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012179:	ff d0                	call   eax
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	e9 a1 00 00 00       	jmp    c0012224 <ACPI::detectPCI()+0x210>
c0012183:	90                   	nop
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	68 3f 3d 02 c0       	push   0xc0023d3f
c001218c:	e8 d3 a8 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	68 4a 3d 02 c0       	push   0xc0023d4a
c001219c:	e8 7c 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121b2:	e8 0c 78 ff ff       	call   c00099c3 <malloc>
c00121b7:	83 c4 10             	add    esp,0x10
c00121ba:	89 c3                	mov    ebx,eax
c00121bc:	83 ec 0c             	sub    esp,0xc
c00121bf:	53                   	push   ebx
c00121c0:	e8 b3 b4 00 00       	call   c001d678 <IDE::IDE()>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00121cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d0:	83 ec 08             	sub    esp,0x8
c00121d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121d7:	50                   	push   eax
c00121d8:	e8 cd bc ff ff       	call   c000deaa <Device::addChild(Device*)>
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121e4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00121fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121ff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012208:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001220c:	8b 00                	mov    eax,DWORD PTR [eax]
c001220e:	83 c0 08             	add    eax,0x8
c0012211:	8b 00                	mov    eax,DWORD PTR [eax]
c0012213:	6a 00                	push   0x0
c0012215:	6a 00                	push   0x0
c0012217:	6a 00                	push   0x0
c0012219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001221d:	ff d0                	call   eax
c001221f:	83 c4 10             	add    esp,0x10
c0012222:	66 90                	xchg   ax,ax
c0012224:	90                   	nop
c0012225:	83 c4 28             	add    esp,0x28
c0012228:	5b                   	pop    ebx
c0012229:	c3                   	ret    
c001222a:	66 90                	xchg   ax,ax

c001222c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001222c:	83 ec 1c             	sub    esp,0x1c
c001222f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012233:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012236:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001223a:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001223f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012244:	83 ec 08             	sub    esp,0x8
c0012247:	52                   	push   edx
c0012248:	50                   	push   eax
c0012249:	e8 46 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012255:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001225a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001225f:	83 ec 04             	sub    esp,0x4
c0012262:	6a 01                	push   0x1
c0012264:	52                   	push   edx
c0012265:	50                   	push   eax
c0012266:	e8 05 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001226b:	83 c4 10             	add    esp,0x10
c001226e:	90                   	nop
c001226f:	83 c4 1c             	add    esp,0x1c
c0012272:	c3                   	ret    
c0012273:	90                   	nop

c0012274 <ACPI::sleep()>:
c0012274:	83 ec 0c             	sub    esp,0xc
c0012277:	a1 60 6a 02 c0       	mov    eax,ds:0xc0026a60
c001227c:	85 c0                	test   eax,eax
c001227e:	74 08                	je     c0012288 <ACPI::sleep()+0x14>
c0012280:	a1 60 6a 02 c0       	mov    eax,ds:0xc0026a60
c0012285:	ff d0                	call   eax
c0012287:	90                   	nop
c0012288:	90                   	nop
c0012289:	83 c4 0c             	add    esp,0xc
c001228c:	c3                   	ret    
c001228d:	90                   	nop
c001228e:	66 90                	xchg   ax,ax

c0012290 <ACPI::open(int, int, void*)>:
c0012290:	57                   	push   edi
c0012291:	56                   	push   esi
c0012292:	53                   	push   ebx
c0012293:	81 ec 70 01 00 00    	sub    esp,0x170
c0012299:	83 ec 0c             	sub    esp,0xc
c001229c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00122a3:	e8 6c fd ff ff       	call   c0012014 <ACPI::detectPCI()>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	83 ec 0c             	sub    esp,0xc
c00122ae:	68 dc 3b 02 c0       	push   0xc0023bdc
c00122b3:	e8 65 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00122b8:	83 c4 10             	add    esp,0x10
c00122bb:	83 ec 0c             	sub    esp,0xc
c00122be:	68 5f 3d 02 c0       	push   0xc0023d5f
c00122c3:	e8 d3 47 00 00       	call   c0016a9b <Thr::loadKernelSymbolTable(char const*)>
c00122c8:	83 c4 10             	add    esp,0x10
c00122cb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00122d3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122de:	83 ec 0c             	sub    esp,0xc
c00122e1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122e8:	e8 d6 76 ff ff       	call   c00099c3 <malloc>
c00122ed:	83 c4 10             	add    esp,0x10
c00122f0:	89 c3                	mov    ebx,eax
c00122f2:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00122f7:	83 ec 04             	sub    esp,0x4
c00122fa:	50                   	push   eax
c00122fb:	68 7d 3d 02 c0       	push   0xc0023d7d
c0012300:	53                   	push   ebx
c0012301:	e8 c8 ac ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012310:	83 ec 08             	sub    esp,0x8
c0012313:	6a 01                	push   0x1
c0012315:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001231c:	e8 11 ad ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001232b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012333:	75 17                	jne    c001234c <ACPI::open(int, int, void*)+0xbc>
c0012335:	83 ec 0c             	sub    esp,0xc
c0012338:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001233f:	e8 4c ad ff ff       	call   c000d090 <File::close()>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	eb 0b                	jmp    c0012354 <ACPI::open(int, int, void*)+0xc4>
c0012349:	8d 76 00             	lea    esi,[esi+0x0]
c001234c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012354:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001235c:	74 1e                	je     c001237c <ACPI::open(int, int, void*)+0xec>
c001235e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012365:	8b 00                	mov    eax,DWORD PTR [eax]
c0012367:	83 c0 08             	add    eax,0x8
c001236a:	8b 00                	mov    eax,DWORD PTR [eax]
c001236c:	83 ec 0c             	sub    esp,0xc
c001236f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012376:	ff d0                	call   eax
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	90                   	nop
c001237c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012383:	83 f0 01             	xor    eax,0x1
c0012386:	84 c0                	test   al,al
c0012388:	74 42                	je     c00123cc <ACPI::open(int, int, void*)+0x13c>
c001238a:	83 ec 0c             	sub    esp,0xc
c001238d:	68 9b 3d 02 c0       	push   0xc0023d9b
c0012392:	e8 86 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012397:	83 c4 10             	add    esp,0x10
c001239a:	83 ec 04             	sub    esp,0x4
c001239d:	6a 0c                	push   0xc
c001239f:	68 b6 3d 02 c0       	push   0xc0023db6
c00123a4:	68 c7 3d 02 c0       	push   0xc0023dc7
c00123a9:	e8 57 2d 00 00       	call   c0015105 <Reg::readIntWithDefault(char*, char*, int)>
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00123b8:	83 ec 0c             	sub    esp,0xc
c00123bb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00123c2:	e8 cc 94 ff ff       	call   c000b893 <Virt::setupPageSwapping(int)>
c00123c7:	83 c4 10             	add    esp,0x10
c00123ca:	66 90                	xchg   ax,ax
c00123cc:	83 ec 0c             	sub    esp,0xc
c00123cf:	68 06 25 02 c0       	push   0xc0022506
c00123d4:	e8 44 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123d9:	83 c4 10             	add    esp,0x10
c00123dc:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c00123e2:	83 ec 08             	sub    esp,0x8
c00123e5:	6a 01                	push   0x1
c00123e7:	68 ce 3d 02 c0       	push   0xc0023dce
c00123ec:	e8 21 51 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	83 ec 08             	sub    esp,0x8
c00123f7:	53                   	push   ebx
c00123f8:	50                   	push   eax
c00123f9:	e8 45 53 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012408:	83 ec 08             	sub    esp,0x8
c001240b:	6a 12                	push   0x12
c001240d:	50                   	push   eax
c001240e:	e8 1b be ff ff       	call   c000e22e <getDevicesOfType(DeviceType)>
c0012413:	83 c4 0c             	add    esp,0xc
c0012416:	66 90                	xchg   ax,ax
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012422:	50                   	push   eax
c0012423:	e8 d8 f2 00 00       	call   c0021700 <LinkedList<Device>::isEmpty()>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	83 f0 01             	xor    eax,0x1
c001242e:	84 c0                	test   al,al
c0012430:	0f 84 46 01 00 00    	je     c001257c <ACPI::open(int, int, void*)+0x2ec>
c0012436:	83 ec 0c             	sub    esp,0xc
c0012439:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012440:	50                   	push   eax
c0012441:	e8 d6 f2 00 00       	call   c002171c <LinkedList<Device>::getFirstElement()>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001245a:	50                   	push   eax
c001245b:	e8 c4 f2 00 00       	call   c0021724 <LinkedList<Device>::removeFirst()>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001246a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012471:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012478:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001247c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012482:	ba 09 00 00 00       	mov    edx,0x9
c0012487:	fc                   	cld    
c0012488:	89 c7                	mov    edi,eax
c001248a:	89 de                	mov    esi,ebx
c001248c:	89 d1                	mov    ecx,edx
c001248e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012490:	83 ec 08             	sub    esp,0x8
c0012493:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012497:	50                   	push   eax
c0012498:	83 ec 24             	sub    esp,0x24
c001249b:	89 e0                	mov    eax,esp
c001249d:	89 c3                	mov    ebx,eax
c001249f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124a3:	ba 09 00 00 00       	mov    edx,0x9
c00124a8:	89 df                	mov    edi,ebx
c00124aa:	89 c6                	mov    esi,eax
c00124ac:	89 d1                	mov    ecx,edx
c00124ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124b0:	e8 37 ab 00 00       	call   c001cfec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00124b5:	83 c4 30             	add    esp,0x30
c00124b8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00124bf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00124c7:	0f 84 4b ff ff ff    	je     c0012418 <ACPI::open(int, int, void*)+0x188>
c00124cd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00124d8:	83 ec 0c             	sub    esp,0xc
c00124db:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124e2:	e8 dc 74 ff ff       	call   c00099c3 <malloc>
c00124e7:	83 c4 10             	add    esp,0x10
c00124ea:	89 c3                	mov    ebx,eax
c00124ec:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00124f1:	83 ec 04             	sub    esp,0x4
c00124f4:	50                   	push   eax
c00124f5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124fc:	53                   	push   ebx
c00124fd:	e8 cc aa ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0012502:	83 c4 10             	add    esp,0x10
c0012505:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001250c:	83 ec 0c             	sub    esp,0xc
c001250f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012516:	e8 85 ad ff ff       	call   c000d2a0 <File::exists()>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	84 c0                	test   al,al
c0012520:	74 2a                	je     c001254c <ACPI::open(int, int, void*)+0x2bc>
c0012522:	83 ec 08             	sub    esp,0x8
c0012525:	6a 01                	push   0x1
c0012527:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001252e:	e8 df 4f 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	83 ec 08             	sub    esp,0x8
c0012539:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012540:	50                   	push   eax
c0012541:	e8 fd 51 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	8d 76 00             	lea    esi,[esi+0x0]
c001254c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012554:	0f 84 be fe ff ff    	je     c0012418 <ACPI::open(int, int, void*)+0x188>
c001255a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012561:	8b 00                	mov    eax,DWORD PTR [eax]
c0012563:	83 c0 08             	add    eax,0x8
c0012566:	8b 00                	mov    eax,DWORD PTR [eax]
c0012568:	83 ec 0c             	sub    esp,0xc
c001256b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012572:	ff d0                	call   eax
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	e9 9c fe ff ff       	jmp    c0012418 <ACPI::open(int, int, void*)+0x188>
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012586:	50                   	push   eax
c0012587:	e8 70 f1 00 00       	call   c00216fc <LinkedList<Device>::~LinkedList()>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c0012595:	83 ec 08             	sub    esp,0x8
c0012598:	6a 01                	push   0x1
c001259a:	68 e9 3d 02 c0       	push   0xc0023de9
c001259f:	e8 6e 4f 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	83 ec 08             	sub    esp,0x8
c00125aa:	53                   	push   ebx
c00125ab:	50                   	push   eax
c00125ac:	e8 92 51 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	8b 1d e8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263e8
c00125ba:	83 ec 08             	sub    esp,0x8
c00125bd:	6a 01                	push   0x1
c00125bf:	68 06 3e 02 c0       	push   0xc0023e06
c00125c4:	e8 49 4f 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	83 ec 08             	sub    esp,0x8
c00125cf:	53                   	push   ebx
c00125d0:	50                   	push   eax
c00125d1:	e8 6d 51 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c00125d6:	83 c4 10             	add    esp,0x10
c00125d9:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00125de:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125e4:	83 e0 04             	and    eax,0x4
c00125e7:	84 c0                	test   al,al
c00125e9:	0f 84 15 01 00 00    	je     c0012704 <ACPI::open(int, int, void*)+0x474>
c00125ef:	83 ec 0c             	sub    esp,0xc
c00125f2:	68 23 3e 02 c0       	push   0xc0023e23
c00125f7:	e8 21 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001260a:	83 ec 0c             	sub    esp,0xc
c001260d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012614:	e8 aa 73 ff ff       	call   c00099c3 <malloc>
c0012619:	83 c4 10             	add    esp,0x10
c001261c:	89 c3                	mov    ebx,eax
c001261e:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0012623:	83 ec 04             	sub    esp,0x4
c0012626:	50                   	push   eax
c0012627:	68 40 3e 02 c0       	push   0xc0023e40
c001262c:	53                   	push   ebx
c001262d:	e8 9c a9 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001263c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012644:	74 1a                	je     c0012660 <ACPI::open(int, int, void*)+0x3d0>
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012650:	e8 4b ac ff ff       	call   c000d2a0 <File::exists()>
c0012655:	83 c4 10             	add    esp,0x10
c0012658:	84 c0                	test   al,al
c001265a:	74 04                	je     c0012660 <ACPI::open(int, int, void*)+0x3d0>
c001265c:	b0 01                	mov    al,0x1
c001265e:	eb 04                	jmp    c0012664 <ACPI::open(int, int, void*)+0x3d4>
c0012660:	b0 00                	mov    al,0x0
c0012662:	66 90                	xchg   ax,ax
c0012664:	84 c0                	test   al,al
c0012666:	74 28                	je     c0012690 <ACPI::open(int, int, void*)+0x400>
c0012668:	83 ec 08             	sub    esp,0x8
c001266b:	6a 01                	push   0x1
c001266d:	68 40 3e 02 c0       	push   0xc0023e40
c0012672:	e8 9b 4e 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	83 ec 08             	sub    esp,0x8
c001267d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012684:	50                   	push   eax
c0012685:	e8 b9 50 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	8d 76 00             	lea    esi,[esi+0x0]
c0012690:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012698:	74 2a                	je     c00126c4 <ACPI::open(int, int, void*)+0x434>
c001269a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a2:	74 20                	je     c00126c4 <ACPI::open(int, int, void*)+0x434>
c00126a4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00126ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ad:	83 c0 08             	add    eax,0x8
c00126b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b2:	83 ec 0c             	sub    esp,0xc
c00126b5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126bc:	ff d0                	call   eax
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	8d 76 00             	lea    esi,[esi+0x0]
c00126c4:	a1 88 6c 02 c0       	mov    eax,ds:0xc0026c88
c00126c9:	83 ec 08             	sub    esp,0x8
c00126cc:	68 5d 3e 02 c0       	push   0xc0023e5d
c00126d1:	50                   	push   eax
c00126d2:	e8 cd f1 ff ff       	call   c00118a4 <findDataTable(unsigned char*, char*)>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126e1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126e9:	74 19                	je     c0012704 <ACPI::open(int, int, void*)+0x474>
c00126eb:	83 ec 08             	sub    esp,0x8
c00126ee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126f5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00126fc:	e8 2b fb ff ff       	call   c001222c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	b8 00 00 00 00       	mov    eax,0x0
c0012709:	81 c4 70 01 00 00    	add    esp,0x170
c001270f:	5b                   	pop    ebx
c0012710:	5e                   	pop    esi
c0012711:	5f                   	pop    edi
c0012712:	c3                   	ret    
c0012713:	90                   	nop

c0012714 <CPU::close(int, int, void*)>:
c0012714:	31 c0                	xor    eax,eax
c0012716:	c3                   	ret    
c0012717:	90                   	nop

c0012718 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012718:	55                   	push   ebp
c0012719:	57                   	push   edi
c001271a:	56                   	push   esi
c001271b:	53                   	push   ebx
c001271c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012720:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012724:	89 ce                	mov    esi,ecx
c0012726:	89 d5                	mov    ebp,edx
c0012728:	80 f9 04             	cmp    cl,0x4
c001272b:	75 28                	jne    c0012755 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001272d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012730:	3c 03                	cmp    al,0x3
c0012732:	0f 86 63 01 00 00    	jbe    c001289b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012738:	80 fa 03             	cmp    dl,0x3
c001273b:	0f 84 5a 01 00 00    	je     c001289b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012741:	8d 7a f2             	lea    edi,[edx-0xe]
c0012744:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012749:	89 fb                	mov    ebx,edi
c001274b:	80 fb 01             	cmp    bl,0x1
c001274e:	77 4e                	ja     c001279e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012750:	e9 52 01 00 00       	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012755:	80 f9 05             	cmp    cl,0x5
c0012758:	75 4d                	jne    c00127a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001275a:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c001275f:	80 fa 03             	cmp    dl,0x3
c0012762:	0f 86 3f 01 00 00    	jbe    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012768:	8d 7a fa             	lea    edi,[edx-0x6]
c001276b:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012770:	89 fb                	mov    ebx,edi
c0012772:	80 fb 01             	cmp    bl,0x1
c0012775:	0f 86 2c 01 00 00    	jbe    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001277b:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012780:	80 fa 08             	cmp    dl,0x8
c0012783:	0f 84 1e 01 00 00    	je     c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012789:	89 d7                	mov    edi,edx
c001278b:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012790:	83 e7 fb             	and    edi,0xfffffffb
c0012793:	89 fb                	mov    ebx,edi
c0012795:	80 fb 09             	cmp    bl,0x9
c0012798:	0f 84 09 01 00 00    	je     c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001279e:	31 c0                	xor    eax,eax
c00127a0:	89 eb                	mov    ebx,ebp
c00127a2:	0f b6 fb             	movzx  edi,bl
c00127a5:	eb 30                	jmp    c00127d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00127a7:	31 c0                	xor    eax,eax
c00127a9:	80 f9 06             	cmp    cl,0x6
c00127ac:	75 f2                	jne    c00127a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127ae:	80 fa 0a             	cmp    dl,0xa
c00127b1:	77 ed                	ja     c00127a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127b3:	bf de 05 00 00       	mov    edi,0x5de
c00127b8:	0f a3 d7             	bt     edi,edx
c00127bb:	73 e3                	jae    c00127a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127bd:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c00127c2:	e9 e0 00 00 00       	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c7:	39 c7                	cmp    edi,eax
c00127c9:	0f 84 d3 00 00 00    	je     c00128a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127cf:	40                   	inc    eax
c00127d0:	3d d0 00 00 00       	cmp    eax,0xd0
c00127d5:	74 09                	je     c00127e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00127d7:	89 f3                	mov    ebx,esi
c00127d9:	80 fb 0f             	cmp    bl,0xf
c00127dc:	75 f1                	jne    c00127cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127de:	eb e7                	jmp    c00127c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127e0:	80 f9 10             	cmp    cl,0x10
c00127e3:	75 14                	jne    c00127f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127e5:	8d 42 fc             	lea    eax,[edx-0x4]
c00127e8:	83 e0 fb             	and    eax,0xfffffffb
c00127eb:	3c 02                	cmp    al,0x2
c00127ed:	76 34                	jbe    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127ef:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c00127f4:	80 fa 02             	cmp    dl,0x2
c00127f7:	eb 24                	jmp    c001281d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00127f9:	80 f9 11             	cmp    cl,0x11
c00127fc:	75 13                	jne    c0012811 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00127fe:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012803:	80 fa 03             	cmp    dl,0x3
c0012806:	0f 85 9b 00 00 00    	jne    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001280c:	e9 91 00 00 00       	jmp    c00128a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012811:	80 f9 12             	cmp    cl,0x12
c0012814:	75 14                	jne    c001282a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012816:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c001281b:	fe ca                	dec    dl
c001281d:	0f 85 84 00 00 00    	jne    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012823:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c0012828:	eb 7d                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001282a:	80 f9 14             	cmp    cl,0x14
c001282d:	75 12                	jne    c0012841 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001282f:	4a                   	dec    edx
c0012830:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012835:	80 fa 01             	cmp    dl,0x1
c0012838:	77 6d                	ja     c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001283a:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c001283f:	eb 66                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012841:	80 f9 15             	cmp    cl,0x15
c0012844:	75 31                	jne    c0012877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012846:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c001284b:	80 fa 01             	cmp    dl,0x1
c001284e:	74 57                	je     c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012850:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012855:	80 fa 13             	cmp    dl,0x13
c0012858:	76 0c                	jbe    c0012866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001285a:	80 fa 30             	cmp    dl,0x30
c001285d:	75 48                	jne    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001285f:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0012864:	eb 41                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012866:	b9 04 00 09 00       	mov    ecx,0x90004
c001286b:	0f a3 d1             	bt     ecx,edx
c001286e:	73 37                	jae    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012870:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c0012875:	eb 30                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012877:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c001287c:	80 f9 16             	cmp    cl,0x16
c001287f:	75 26                	jne    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012881:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c0012886:	84 d2                	test   dl,dl
c0012888:	74 1d                	je     c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001288a:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c001288f:	80 fa 30             	cmp    dl,0x30
c0012892:	75 13                	jne    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012894:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0012899:	eb 0c                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289b:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c00128a0:	eb 05                	jmp    c00128a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a2:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c00128a7:	5b                   	pop    ebx
c00128a8:	5e                   	pop    esi
c00128a9:	5f                   	pop    edi
c00128aa:	5d                   	pop    ebp
c00128ab:	c3                   	ret    

c00128ac <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00128ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b4:	80 f9 04             	cmp    cl,0x4
c00128b7:	75 6b                	jne    c0012924 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00128b9:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c00128be:	80 fa 01             	cmp    dl,0x1
c00128c1:	0f 86 92 02 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c7:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c00128cc:	80 fa 02             	cmp    dl,0x2
c00128cf:	0f 84 84 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d5:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c00128da:	80 fa 03             	cmp    dl,0x3
c00128dd:	0f 84 76 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e3:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c00128e8:	80 fa 04             	cmp    dl,0x4
c00128eb:	0f 84 68 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f1:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c00128f6:	80 fa 05             	cmp    dl,0x5
c00128f9:	0f 84 5a 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128ff:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c0012904:	80 fa 07             	cmp    dl,0x7
c0012907:	0f 84 4c 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001290d:	83 ea 08             	sub    edx,0x8
c0012910:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012915:	80 fa 01             	cmp    dl,0x1
c0012918:	0f 87 3b 02 00 00    	ja     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001291e:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012923:	c3                   	ret    
c0012924:	80 f9 05             	cmp    cl,0x5
c0012927:	75 45                	jne    c001296e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012929:	8d 4a ff             	lea    ecx,[edx-0x1]
c001292c:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c0012931:	80 f9 02             	cmp    cl,0x2
c0012934:	0f 86 1f 02 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001293a:	80 fa 04             	cmp    dl,0x4
c001293d:	0f 84 f3 01 00 00    	je     c0012b36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012943:	80 fa 07             	cmp    dl,0x7
c0012946:	0f 84 0d 02 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001294c:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012951:	80 fa 08             	cmp    dl,0x8
c0012954:	0f 84 ff 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295a:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c001295f:	80 fa 09             	cmp    dl,0x9
c0012962:	0f 85 f1 01 00 00    	jne    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012968:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c001296d:	c3                   	ret    
c001296e:	80 f9 06             	cmp    cl,0x6
c0012971:	0f 85 85 01 00 00    	jne    c0012afc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012977:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c001297c:	80 fa 01             	cmp    dl,0x1
c001297f:	0f 84 d4 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012985:	8d 42 fb             	lea    eax,[edx-0x5]
c0012988:	3c 01                	cmp    al,0x1
c001298a:	0f 86 ac 01 00 00    	jbe    c0012b3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012990:	80 fa 03             	cmp    dl,0x3
c0012993:	0f 84 a3 01 00 00    	je     c0012b3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012999:	8d 4a f9             	lea    ecx,[edx-0x7]
c001299c:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c00129a1:	80 f9 01             	cmp    cl,0x1
c00129a4:	0f 86 af 01 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129aa:	80 fa 09             	cmp    dl,0x9
c00129ad:	0f 84 8f 01 00 00    	je     c0012b42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00129b3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00129b6:	80 f9 01             	cmp    cl,0x1
c00129b9:	0f 86 9a 01 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129bf:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c00129c4:	80 fa 0d             	cmp    dl,0xd
c00129c7:	0f 84 8c 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129cd:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c00129d2:	80 fa 0e             	cmp    dl,0xe
c00129d5:	0f 84 7e 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129db:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129e0:	80 fa 0f             	cmp    dl,0xf
c00129e3:	0f 84 70 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e9:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c00129ee:	80 fa 15             	cmp    dl,0x15
c00129f1:	0f 84 62 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00129fa:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129ff:	80 f9 01             	cmp    cl,0x1
c0012a02:	0f 86 51 01 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a08:	80 fa 1a             	cmp    dl,0x1a
c0012a0b:	0f 84 37 01 00 00    	je     c0012b48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a11:	80 fa 1c             	cmp    dl,0x1c
c0012a14:	0f 84 34 01 00 00    	je     c0012b4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a1a:	80 fa 1d             	cmp    dl,0x1d
c0012a1d:	0f 84 36 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a23:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012a28:	80 fa 25             	cmp    dl,0x25
c0012a2b:	0f 84 28 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a31:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a34:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a39:	80 f9 01             	cmp    cl,0x1
c0012a3c:	0f 86 17 01 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a42:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012a47:	80 fa 2a             	cmp    dl,0x2a
c0012a4a:	0f 84 09 01 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a50:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012a55:	80 fa 2c             	cmp    dl,0x2c
c0012a58:	0f 84 fb 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a5e:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012a63:	80 fa 2d             	cmp    dl,0x2d
c0012a66:	0f 84 ed 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a6c:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a71:	80 fa 2e             	cmp    dl,0x2e
c0012a74:	0f 84 df 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7a:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012a7f:	80 fa 2f             	cmp    dl,0x2f
c0012a82:	0f 84 d1 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a88:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a8b:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a90:	80 f9 01             	cmp    cl,0x1
c0012a93:	0f 86 c0 00 00 00    	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a99:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a9e:	80 fa 37             	cmp    dl,0x37
c0012aa1:	0f 84 b2 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa7:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012aac:	80 fa 3a             	cmp    dl,0x3a
c0012aaf:	0f 84 a4 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab5:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012aba:	80 fa 3c             	cmp    dl,0x3c
c0012abd:	0f 84 96 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac3:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012ac8:	80 fa 3d             	cmp    dl,0x3d
c0012acb:	0f 84 88 00 00 00    	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad1:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012ad6:	80 fa 3e             	cmp    dl,0x3e
c0012ad9:	74 7e                	je     c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012adb:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ade:	3c 01                	cmp    al,0x1
c0012ae0:	76 72                	jbe    c0012b54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ae2:	80 fa 3f             	cmp    dl,0x3f
c0012ae5:	74 6d                	je     c0012b54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ae7:	80 fa 4a             	cmp    dl,0x4a
c0012aea:	74 0a                	je     c0012af6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012aec:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012af1:	80 fa 4d             	cmp    dl,0x4d
c0012af4:	75 63                	jne    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af6:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012afb:	c3                   	ret    
c0012afc:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012b01:	80 f9 0b             	cmp    cl,0xb
c0012b04:	75 0a                	jne    c0012b10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b06:	fe ca                	dec    dl
c0012b08:	75 4f                	jne    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b0a:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012b0f:	c3                   	ret    
c0012b10:	80 f9 0f             	cmp    cl,0xf
c0012b13:	75 44                	jne    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b15:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012b1a:	80 fa 02             	cmp    dl,0x2
c0012b1d:	76 3a                	jbe    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b1f:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b22:	3c 01                	cmp    al,0x1
c0012b24:	76 0a                	jbe    c0012b30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b26:	b8 e5 3f 02 c0       	mov    eax,0xc0023fe5
c0012b2b:	80 fa 06             	cmp    dl,0x6
c0012b2e:	75 29                	jne    c0012b59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b30:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012b35:	c3                   	ret    
c0012b36:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012b3b:	c3                   	ret    
c0012b3c:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012b41:	c3                   	ret    
c0012b42:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012b47:	c3                   	ret    
c0012b48:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012b4d:	c3                   	ret    
c0012b4e:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012b53:	c3                   	ret    
c0012b54:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012b59:	c3                   	ret    

c0012b5a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b5a:	60                   	pusha  
c0012b5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b67:	9c                   	pushf  
c0012b68:	fa                   	cli    
c0012b69:	0f 09                	wbinvd 
c0012b6b:	0f 30                	wrmsr  
c0012b6d:	9d                   	popf   
c0012b6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b72:	89 02                	mov    DWORD PTR [edx],eax
c0012b74:	61                   	popa   
c0012b75:	c3                   	ret    

c0012b76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b76:	60                   	pusha  
c0012b77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b7b:	9c                   	pushf  
c0012b7c:	fa                   	cli    
c0012b7d:	0f 09                	wbinvd 
c0012b7f:	31 c0                	xor    eax,eax
c0012b81:	31 d2                	xor    edx,edx
c0012b83:	0f 32                	rdmsr  
c0012b85:	9d                   	popf   
c0012b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b8a:	89 02                	mov    DWORD PTR [edx],eax
c0012b8c:	61                   	popa   
c0012b8d:	c3                   	ret    

c0012b8e <CPU::AMD_K6_writeback(int, int, int)>:
c0012b8e:	56                   	push   esi
c0012b8f:	53                   	push   ebx
c0012b90:	83 ec 10             	sub    esp,0x10
c0012b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b97:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012b9c:	75 5d                	jne    c0012bfb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b9e:	83 f8 08             	cmp    eax,0x8
c0012ba1:	75 09                	jne    c0012bac <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012ba3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012ba8:	7e 13                	jle    c0012bbd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012baa:	eb 30                	jmp    c0012bdc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bac:	83 f8 06             	cmp    eax,0x6
c0012baf:	7c 4a                	jl     c0012bfb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bb1:	83 f8 07             	cmp    eax,0x7
c0012bb4:	7e 07                	jle    c0012bbd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bb6:	83 f8 09             	cmp    eax,0x9
c0012bb9:	74 21                	je     c0012bdc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bbb:	eb 3e                	jmp    c0012bfb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bbd:	89 e6                	mov    esi,esp
c0012bbf:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c0012bc5:	56                   	push   esi
c0012bc6:	c1 eb 15             	shr    ebx,0x15
c0012bc9:	68 82 00 00 c0       	push   0xc0000082
c0012bce:	83 e3 7e             	and    ebx,0x7e
c0012bd1:	e8 a0 ff ff ff       	call   c0012b76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bd6:	56                   	push   esi
c0012bd7:	6a 00                	push   0x0
c0012bd9:	53                   	push   ebx
c0012bda:	eb 12                	jmp    c0012bee <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012bdc:	89 e3                	mov    ebx,esp
c0012bde:	53                   	push   ebx
c0012bdf:	68 82 00 00 c0       	push   0xc0000082
c0012be4:	e8 8d ff ff ff       	call   c0012b76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012be9:	53                   	push   ebx
c0012bea:	6a 00                	push   0x0
c0012bec:	6a 00                	push   0x0
c0012bee:	68 82 00 00 c0       	push   0xc0000082
c0012bf3:	e8 62 ff ff ff       	call   c0012b5a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012bf8:	83 c4 18             	add    esp,0x18
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	5b                   	pop    ebx
c0012bff:	5e                   	pop    esi
c0012c00:	c3                   	ret    
c0012c01:	90                   	nop

c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c02:	55                   	push   ebp
c0012c03:	57                   	push   edi
c0012c04:	56                   	push   esi
c0012c05:	53                   	push   ebx
c0012c06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c12:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c16:	39 05 a0 5d 02 c0    	cmp    DWORD PTR ds:0xc0025da0,eax
c0012c1c:	75 23                	jne    c0012c41 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c1e:	a1 ec 6e 02 c0       	mov    eax,ds:0xc0026eec
c0012c23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c27:	89 06                	mov    DWORD PTR [esi],eax
c0012c29:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0012c2e:	89 07                	mov    DWORD PTR [edi],eax
c0012c30:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0012c35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c38:	a1 e0 6e 02 c0       	mov    eax,ds:0xc0026ee0
c0012c3d:	89 02                	mov    DWORD PTR [edx],eax
c0012c3f:	eb 3f                	jmp    c0012c80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c41:	31 c9                	xor    ecx,ecx
c0012c43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c47:	0f a2                	cpuid  
c0012c49:	89 06                	mov    DWORD PTR [esi],eax
c0012c4b:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c51:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c54:	89 10                	mov    DWORD PTR [eax],edx
c0012c56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c5a:	a3 a0 5d 02 c0       	mov    ds:0xc0025da0,eax
c0012c5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c61:	a3 ec 6e 02 c0       	mov    ds:0xc0026eec,eax
c0012c66:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c68:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0012c6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c70:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0012c75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c7b:	a3 e0 6e 02 c0       	mov    ds:0xc0026ee0,eax
c0012c80:	5b                   	pop    ebx
c0012c81:	5e                   	pop    esi
c0012c82:	5f                   	pop    edi
c0012c83:	5d                   	pop    ebp
c0012c84:	c3                   	ret    
c0012c85:	90                   	nop

c0012c86 <CPU::cpuidCheckEDX(unsigned int)>:
c0012c86:	83 ec 10             	sub    esp,0x10
c0012c89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c8d:	50                   	push   eax
c0012c8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c92:	50                   	push   eax
c0012c93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c97:	50                   	push   eax
c0012c98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9c:	50                   	push   eax
c0012c9d:	6a 01                	push   0x1
c0012c9f:	e8 5e ff ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ca4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ca8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012cac:	0f 95 c0             	setne  al
c0012caf:	83 c4 24             	add    esp,0x24
c0012cb2:	c3                   	ret    
c0012cb3:	90                   	nop

c0012cb4 <CPU::cpuidCheckECX(unsigned int)>:
c0012cb4:	83 ec 10             	sub    esp,0x10
c0012cb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cbb:	50                   	push   eax
c0012cbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc0:	50                   	push   eax
c0012cc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc5:	50                   	push   eax
c0012cc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cca:	50                   	push   eax
c0012ccb:	6a 01                	push   0x1
c0012ccd:	e8 30 ff ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cd6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cda:	0f 95 c0             	setne  al
c0012cdd:	83 c4 24             	add    esp,0x24
c0012ce0:	c3                   	ret    
c0012ce1:	90                   	nop

c0012ce2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012ce2:	83 ec 10             	sub    esp,0x10
c0012ce5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ce9:	50                   	push   eax
c0012cea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cee:	50                   	push   eax
c0012cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf3:	50                   	push   eax
c0012cf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf8:	50                   	push   eax
c0012cf9:	6a 07                	push   0x7
c0012cfb:	e8 02 ff ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d04:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d08:	0f 95 c0             	setne  al
c0012d0b:	83 c4 24             	add    esp,0x24
c0012d0e:	c3                   	ret    
c0012d0f:	90                   	nop

c0012d10 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d10:	83 ec 10             	sub    esp,0x10
c0012d13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d17:	50                   	push   eax
c0012d18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d1c:	50                   	push   eax
c0012d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d21:	50                   	push   eax
c0012d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d26:	50                   	push   eax
c0012d27:	6a 07                	push   0x7
c0012d29:	e8 d4 fe ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d32:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d36:	0f 95 c0             	setne  al
c0012d39:	83 c4 24             	add    esp,0x24
c0012d3c:	c3                   	ret    
c0012d3d:	90                   	nop

c0012d3e <CPU::CPU()>:
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d45:	83 ec 08             	sub    esp,0x8
c0012d48:	68 e5 3f 02 c0       	push   0xc0023fe5
c0012d4d:	50                   	push   eax
c0012d4e:	e8 5b b3 ff ff       	call   c000e0ae <Device::Device(char const*)>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	ba 08 42 02 c0       	mov    edx,0xc0024208
c0012d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5f:	89 10                	mov    DWORD PTR [eax],edx
c0012d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d65:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d73:	05 78 01 00 00       	add    eax,0x178
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	50                   	push   eax
c0012d7c:	e8 d9 64 ff ff       	call   c000925a <GDT::GDT()>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d88:	05 7c 09 00 00       	add    eax,0x97c
c0012d8d:	83 ec 0c             	sub    esp,0xc
c0012d90:	50                   	push   eax
c0012d91:	e8 1a 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d9d:	05 7c 11 00 00       	add    eax,0x117c
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	50                   	push   eax
c0012da6:	e8 21 82 ff ff       	call   c000afcc <TSS::TSS()>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dbd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012dc7:	90                   	nop
c0012dc8:	83 c4 0c             	add    esp,0xc
c0012dcb:	c3                   	ret    

c0012dcc <CPU::displayFeatures()>:
c0012dcc:	c3                   	ret    
c0012dcd:	90                   	nop

c0012dce <CPU::detectFeatures()>:
c0012dce:	55                   	push   ebp
c0012dcf:	57                   	push   edi
c0012dd0:	56                   	push   esi
c0012dd1:	53                   	push   ebx
c0012dd2:	83 ec 50             	sub    esp,0x50
c0012dd5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012dd9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012de3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012dea:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012df0:	6a 0d                	push   0xd
c0012df2:	6a 00                	push   0x0
c0012df4:	55                   	push   ebp
c0012df5:	e8 8a d8 fe ff       	call   c0000684 <memset>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0012e02:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e09:	0f 84 22 09 00 00    	je     c0013731 <CPU::detectFeatures()+0x963>
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	89 ef                	mov    edi,ebp
c0012e14:	6a 10                	push   0x10
c0012e16:	e8 6b fe ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012e1b:	83 e0 01             	and    eax,0x1
c0012e1e:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e21:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e27:	83 e0 fd             	and    eax,0xfffffffd
c0012e2a:	09 d0                	or     eax,edx
c0012e2c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e32:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e39:	e8 48 fe ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012e3e:	83 e0 01             	and    eax,0x1
c0012e41:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e48:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e4e:	83 e0 fb             	and    eax,0xfffffffb
c0012e51:	09 d0                	or     eax,edx
c0012e53:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e59:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e60:	e8 21 fe ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012e65:	83 e0 01             	and    eax,0x1
c0012e68:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e6f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e75:	83 e0 f7             	and    eax,0xfffffff7
c0012e78:	09 d0                	or     eax,edx
c0012e7a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e80:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e87:	e8 fa fd ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012e8c:	83 e0 01             	and    eax,0x1
c0012e8f:	c1 e0 04             	shl    eax,0x4
c0012e92:	88 c2                	mov    dl,al
c0012e94:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e9a:	83 e0 ef             	and    eax,0xffffffef
c0012e9d:	09 d0                	or     eax,edx
c0012e9f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ea5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012eac:	e8 d5 fd ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012eb1:	83 e0 01             	and    eax,0x1
c0012eb4:	c1 e0 05             	shl    eax,0x5
c0012eb7:	88 c2                	mov    dl,al
c0012eb9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ebf:	83 e0 df             	and    eax,0xffffffdf
c0012ec2:	09 d0                	or     eax,edx
c0012ec4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012ed1:	e8 b0 fd ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012ed6:	83 e0 01             	and    eax,0x1
c0012ed9:	8d 14 00             	lea    edx,[eax+eax*1]
c0012edc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012ee2:	83 e0 fd             	and    eax,0xfffffffd
c0012ee5:	09 d0                	or     eax,edx
c0012ee7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012eed:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012ef4:	e8 8d fd ff ff       	call   c0012c86 <CPU::cpuidCheckEDX(unsigned int)>
c0012ef9:	83 e0 01             	and    eax,0x1
c0012efc:	c1 e0 06             	shl    eax,0x6
c0012eff:	88 c2                	mov    dl,al
c0012f01:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f07:	83 e0 bf             	and    eax,0xffffffbf
c0012f0a:	09 d0                	or     eax,edx
c0012f0c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f12:	58                   	pop    eax
c0012f13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f17:	50                   	push   eax
c0012f18:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f1c:	50                   	push   eax
c0012f1d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f21:	56                   	push   esi
c0012f22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f26:	50                   	push   eax
c0012f27:	6a 00                	push   0x0
c0012f29:	e8 d4 fc ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f2e:	b8 04 00 00 00       	mov    eax,0x4
c0012f33:	89 c1                	mov    ecx,eax
c0012f35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f37:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f3d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f41:	89 c1                	mov    ecx,eax
c0012f43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f45:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f4b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f4f:	89 c1                	mov    ecx,eax
c0012f51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f53:	83 c4 18             	add    esp,0x18
c0012f56:	68 90 3e 02 c0       	push   0xc0023e90
c0012f5b:	55                   	push   ebp
c0012f5c:	e8 6b d8 fe ff       	call   c00007cc <strcmp>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	85 c0                	test   eax,eax
c0012f66:	75 0f                	jne    c0012f77 <CPU::detectFeatures()+0x1a9>
c0012f68:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f72:	e9 22 02 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0012f77:	50                   	push   eax
c0012f78:	50                   	push   eax
c0012f79:	68 9d 3e 02 c0       	push   0xc0023e9d
c0012f7e:	55                   	push   ebp
c0012f7f:	e8 48 d8 fe ff       	call   c00007cc <strcmp>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	85 c0                	test   eax,eax
c0012f89:	74 dd                	je     c0012f68 <CPU::detectFeatures()+0x19a>
c0012f8b:	50                   	push   eax
c0012f8c:	50                   	push   eax
c0012f8d:	68 aa 3e 02 c0       	push   0xc0023eaa
c0012f92:	55                   	push   ebp
c0012f93:	e8 34 d8 fe ff       	call   c00007cc <strcmp>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	85 c0                	test   eax,eax
c0012f9d:	74 2a                	je     c0012fc9 <CPU::detectFeatures()+0x1fb>
c0012f9f:	50                   	push   eax
c0012fa0:	50                   	push   eax
c0012fa1:	68 b7 3e 02 c0       	push   0xc0023eb7
c0012fa6:	55                   	push   ebp
c0012fa7:	e8 20 d8 fe ff       	call   c00007cc <strcmp>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	85 c0                	test   eax,eax
c0012fb1:	74 16                	je     c0012fc9 <CPU::detectFeatures()+0x1fb>
c0012fb3:	50                   	push   eax
c0012fb4:	50                   	push   eax
c0012fb5:	68 c4 3e 02 c0       	push   0xc0023ec4
c0012fba:	55                   	push   ebp
c0012fbb:	e8 0c d8 fe ff       	call   c00007cc <strcmp>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	85 c0                	test   eax,eax
c0012fc5:	74 48                	je     c001300f <CPU::detectFeatures()+0x241>
c0012fc7:	eb 0f                	jmp    c0012fd8 <CPU::detectFeatures()+0x20a>
c0012fc9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012fd3:	e9 c1 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0012fd8:	50                   	push   eax
c0012fd9:	50                   	push   eax
c0012fda:	68 d1 3e 02 c0       	push   0xc0023ed1
c0012fdf:	55                   	push   ebp
c0012fe0:	e8 e7 d7 fe ff       	call   c00007cc <strcmp>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	85 c0                	test   eax,eax
c0012fea:	74 23                	je     c001300f <CPU::detectFeatures()+0x241>
c0012fec:	57                   	push   edi
c0012fed:	57                   	push   edi
c0012fee:	68 de 3e 02 c0       	push   0xc0023ede
c0012ff3:	55                   	push   ebp
c0012ff4:	e8 d3 d7 fe ff       	call   c00007cc <strcmp>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	85 c0                	test   eax,eax
c0012ffe:	75 1e                	jne    c001301e <CPU::detectFeatures()+0x250>
c0013000:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001300a:	e9 8a 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c001300f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013019:	e9 7b 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c001301e:	56                   	push   esi
c001301f:	56                   	push   esi
c0013020:	68 eb 3e 02 c0       	push   0xc0023eeb
c0013025:	55                   	push   ebp
c0013026:	e8 a1 d7 fe ff       	call   c00007cc <strcmp>
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	85 c0                	test   eax,eax
c0013030:	75 0f                	jne    c0013041 <CPU::detectFeatures()+0x273>
c0013032:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001303c:	e9 58 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013041:	51                   	push   ecx
c0013042:	51                   	push   ecx
c0013043:	68 aa 3e 02 c0       	push   0xc0023eaa
c0013048:	55                   	push   ebp
c0013049:	e8 7e d7 fe ff       	call   c00007cc <strcmp>
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	85 c0                	test   eax,eax
c0013053:	75 0f                	jne    c0013064 <CPU::detectFeatures()+0x296>
c0013055:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001305f:	e9 35 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013064:	52                   	push   edx
c0013065:	52                   	push   edx
c0013066:	68 f8 3e 02 c0       	push   0xc0023ef8
c001306b:	55                   	push   ebp
c001306c:	e8 5b d7 fe ff       	call   c00007cc <strcmp>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	85 c0                	test   eax,eax
c0013076:	75 0f                	jne    c0013087 <CPU::detectFeatures()+0x2b9>
c0013078:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013082:	e9 12 01 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013087:	50                   	push   eax
c0013088:	50                   	push   eax
c0013089:	68 05 3f 02 c0       	push   0xc0023f05
c001308e:	55                   	push   ebp
c001308f:	e8 38 d7 fe ff       	call   c00007cc <strcmp>
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	85 c0                	test   eax,eax
c0013099:	75 0f                	jne    c00130aa <CPU::detectFeatures()+0x2dc>
c001309b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00130a5:	e9 ef 00 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c00130aa:	50                   	push   eax
c00130ab:	50                   	push   eax
c00130ac:	68 12 3f 02 c0       	push   0xc0023f12
c00130b1:	55                   	push   ebp
c00130b2:	e8 15 d7 fe ff       	call   c00007cc <strcmp>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	85 c0                	test   eax,eax
c00130bc:	75 0f                	jne    c00130cd <CPU::detectFeatures()+0x2ff>
c00130be:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00130c8:	e9 cc 00 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c00130cd:	50                   	push   eax
c00130ce:	50                   	push   eax
c00130cf:	68 1f 3f 02 c0       	push   0xc0023f1f
c00130d4:	55                   	push   ebp
c00130d5:	e8 f2 d6 fe ff       	call   c00007cc <strcmp>
c00130da:	83 c4 10             	add    esp,0x10
c00130dd:	85 c0                	test   eax,eax
c00130df:	75 0f                	jne    c00130f0 <CPU::detectFeatures()+0x322>
c00130e1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130eb:	e9 a9 00 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c00130f0:	50                   	push   eax
c00130f1:	50                   	push   eax
c00130f2:	68 2c 3f 02 c0       	push   0xc0023f2c
c00130f7:	55                   	push   ebp
c00130f8:	e8 cf d6 fe ff       	call   c00007cc <strcmp>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	85 c0                	test   eax,eax
c0013102:	75 0f                	jne    c0013113 <CPU::detectFeatures()+0x345>
c0013104:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001310e:	e9 86 00 00 00       	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013113:	50                   	push   eax
c0013114:	50                   	push   eax
c0013115:	68 39 3f 02 c0       	push   0xc0023f39
c001311a:	55                   	push   ebp
c001311b:	e8 ac d6 fe ff       	call   c00007cc <strcmp>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	85 c0                	test   eax,eax
c0013125:	75 0c                	jne    c0013133 <CPU::detectFeatures()+0x365>
c0013127:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013131:	eb 66                	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013133:	50                   	push   eax
c0013134:	50                   	push   eax
c0013135:	68 46 3f 02 c0       	push   0xc0023f46
c001313a:	55                   	push   ebp
c001313b:	e8 8c d6 fe ff       	call   c00007cc <strcmp>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	85 c0                	test   eax,eax
c0013145:	75 0c                	jne    c0013153 <CPU::detectFeatures()+0x385>
c0013147:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013151:	eb 46                	jmp    c0013199 <CPU::detectFeatures()+0x3cb>
c0013153:	57                   	push   edi
c0013154:	57                   	push   edi
c0013155:	68 53 3f 02 c0       	push   0xc0023f53
c001315a:	55                   	push   ebp
c001315b:	e8 6c d6 fe ff       	call   c00007cc <strcmp>
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	85 c0                	test   eax,eax
c0013165:	74 e0                	je     c0013147 <CPU::detectFeatures()+0x379>
c0013167:	56                   	push   esi
c0013168:	56                   	push   esi
c0013169:	68 60 3f 02 c0       	push   0xc0023f60
c001316e:	55                   	push   ebp
c001316f:	e8 58 d6 fe ff       	call   c00007cc <strcmp>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	85 c0                	test   eax,eax
c0013179:	74 cc                	je     c0013147 <CPU::detectFeatures()+0x379>
c001317b:	51                   	push   ecx
c001317c:	51                   	push   ecx
c001317d:	68 6d 3f 02 c0       	push   0xc0023f6d
c0013182:	55                   	push   ebp
c0013183:	e8 44 d6 fe ff       	call   c00007cc <strcmp>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	85 c0                	test   eax,eax
c001318d:	74 b8                	je     c0013147 <CPU::detectFeatures()+0x379>
c001318f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013199:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001319e:	0f 86 be 00 00 00    	jbe    c0013262 <CPU::detectFeatures()+0x494>
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	68 80 00 00 00       	push   0x80
c00131ac:	e8 31 fb ff ff       	call   c0012ce2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131b1:	83 e0 01             	and    eax,0x1
c00131b4:	c1 e0 06             	shl    eax,0x6
c00131b7:	88 c2                	mov    dl,al
c00131b9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131bf:	83 e0 bf             	and    eax,0xffffffbf
c00131c2:	09 d0                	or     eax,edx
c00131c4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131ca:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00131d1:	e8 0c fb ff ff       	call   c0012ce2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131d6:	83 e0 01             	and    eax,0x1
c00131d9:	c1 e0 04             	shl    eax,0x4
c00131dc:	88 c2                	mov    dl,al
c00131de:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131e4:	83 e0 ef             	and    eax,0xffffffef
c00131e7:	09 d0                	or     eax,edx
c00131e9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131ef:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00131f6:	e8 e7 fa ff ff       	call   c0012ce2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131fb:	c1 e0 07             	shl    eax,0x7
c00131fe:	88 c2                	mov    dl,al
c0013200:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013206:	83 e0 7f             	and    eax,0x7f
c0013209:	09 d0                	or     eax,edx
c001320b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013211:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013218:	e8 f3 fa ff ff       	call   c0012d10 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001321d:	83 e0 01             	and    eax,0x1
c0013220:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013227:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001322d:	83 e0 f7             	and    eax,0xfffffff7
c0013230:	09 d0                	or     eax,edx
c0013232:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013238:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001323f:	e8 cc fa ff ff       	call   c0012d10 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	83 e0 01             	and    eax,0x1
c001324a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013251:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013257:	83 e0 fb             	and    eax,0xfffffffb
c001325a:	09 d0                	or     eax,edx
c001325c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013262:	83 ec 0c             	sub    esp,0xc
c0013265:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013269:	50                   	push   eax
c001326a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001326e:	50                   	push   eax
c001326f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013273:	56                   	push   esi
c0013274:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013278:	50                   	push   eax
c0013279:	6a 01                	push   0x1
c001327b:	e8 82 f9 ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013280:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013284:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001328a:	88 ca                	mov    dl,cl
c001328c:	83 e0 f0             	and    eax,0xfffffff0
c001328f:	83 e2 0f             	and    edx,0xf
c0013292:	09 d0                	or     eax,edx
c0013294:	88 ca                	mov    dl,cl
c0013296:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001329c:	c0 ea 04             	shr    dl,0x4
c001329f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00132a3:	0f b6 c2             	movzx  eax,dl
c00132a6:	83 c4 20             	add    esp,0x20
c00132a9:	c1 e0 06             	shl    eax,0x6
c00132ac:	89 c7                	mov    edi,eax
c00132ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00132b4:	66 25 3f c0          	and    ax,0xc03f
c00132b8:	09 f8                	or     eax,edi
c00132ba:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00132c1:	89 c8                	mov    eax,ecx
c00132c3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00132ca:	c1 e8 08             	shr    eax,0x8
c00132cd:	83 e5 3f             	and    ebp,0x3f
c00132d0:	83 e0 0f             	and    eax,0xf
c00132d3:	89 c7                	mov    edi,eax
c00132d5:	c1 e7 06             	shl    edi,0x6
c00132d8:	09 ef                	or     edi,ebp
c00132da:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132e1:	89 fa                	mov    edx,edi
c00132e3:	83 e5 c0             	and    ebp,0xffffffc0
c00132e6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132ec:	88 c2                	mov    dl,al
c00132ee:	c0 ea 02             	shr    dl,0x2
c00132f1:	89 d7                	mov    edi,edx
c00132f3:	09 ef                	or     edi,ebp
c00132f5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00132fb:	89 fa                	mov    edx,edi
c00132fd:	83 e5 cf             	and    ebp,0xffffffcf
c0013300:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013306:	89 cf                	mov    edi,ecx
c0013308:	c1 ef 0c             	shr    edi,0xc
c001330b:	83 e7 03             	and    edi,0x3
c001330e:	c1 e7 04             	shl    edi,0x4
c0013311:	09 ef                	or     edi,ebp
c0013313:	3c 06                	cmp    al,0x6
c0013315:	89 fa                	mov    edx,edi
c0013317:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001331d:	74 04                	je     c0013323 <CPU::detectFeatures()+0x555>
c001331f:	3c 0f                	cmp    al,0xf
c0013321:	75 5c                	jne    c001337f <CPU::detectFeatures()+0x5b1>
c0013323:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013327:	89 cf                	mov    edi,ecx
c0013329:	c1 ef 10             	shr    edi,0x10
c001332c:	c1 e7 04             	shl    edi,0x4
c001332f:	09 fa                	or     edx,edi
c0013331:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013337:	0f b6 d2             	movzx  edx,dl
c001333a:	66 81 e7 3f c0       	and    di,0xc03f
c001333f:	c1 e2 06             	shl    edx,0x6
c0013342:	09 fa                	or     edx,edi
c0013344:	3c 0f                	cmp    al,0xf
c0013346:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001334d:	75 30                	jne    c001337f <CPU::detectFeatures()+0x5b1>
c001334f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013355:	c1 e9 14             	shr    ecx,0x14
c0013358:	83 e0 3f             	and    eax,0x3f
c001335b:	83 c1 0f             	add    ecx,0xf
c001335e:	88 ca                	mov    dl,cl
c0013360:	c0 e9 02             	shr    cl,0x2
c0013363:	c1 e2 06             	shl    edx,0x6
c0013366:	09 d0                	or     eax,edx
c0013368:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001336e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013374:	83 e0 c0             	and    eax,0xffffffc0
c0013377:	09 c1                	or     ecx,eax
c0013379:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001337f:	83 ec 0c             	sub    esp,0xc
c0013382:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013389:	8d 44 24 28          	lea    eax,[esp+0x28]
c001338d:	50                   	push   eax
c001338e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013392:	55                   	push   ebp
c0013393:	56                   	push   esi
c0013394:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013398:	57                   	push   edi
c0013399:	68 00 00 00 80       	push   0x80000000
c001339e:	e8 5f f8 ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133a3:	83 c4 20             	add    esp,0x20
c00133a6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00133ae:	76 22                	jbe    c00133d2 <CPU::detectFeatures()+0x604>
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133b7:	50                   	push   eax
c00133b8:	55                   	push   ebp
c00133b9:	56                   	push   esi
c00133ba:	57                   	push   edi
c00133bb:	68 01 00 00 80       	push   0x80000001
c00133c0:	e8 3d f8 ff ff       	call   c0012c02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133c5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00133cf:	83 c4 20             	add    esp,0x20
c00133d2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00133d8:	83 f8 01             	cmp    eax,0x1
c00133db:	75 6f                	jne    c001344c <CPU::detectFeatures()+0x67e>
c00133dd:	51                   	push   ecx
c00133de:	51                   	push   ecx
c00133df:	68 79 3f 02 c0       	push   0xc0023f79
c00133e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133e8:	56                   	push   esi
c00133e9:	e8 52 d3 fe ff       	call   c0000740 <strcpy>
c00133ee:	5f                   	pop    edi
c00133ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133f5:	5d                   	pop    ebp
c00133f6:	66 c1 e8 06          	shr    ax,0x6
c00133fa:	0f b6 c0             	movzx  eax,al
c00133fd:	50                   	push   eax
c00133fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013404:	c1 e8 0e             	shr    eax,0xe
c0013407:	0f b6 c0             	movzx  eax,al
c001340a:	50                   	push   eax
c001340b:	e8 9c f4 ff ff       	call   c00128ac <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013410:	5a                   	pop    edx
c0013411:	59                   	pop    ecx
c0013412:	50                   	push   eax
c0013413:	56                   	push   esi
c0013414:	e8 67 d4 fe ff       	call   c0000880 <strcat>
c0013419:	5f                   	pop    edi
c001341a:	5d                   	pop    ebp
c001341b:	56                   	push   esi
c001341c:	53                   	push   ebx
c001341d:	e8 7e ac ff ff       	call   c000e0a0 <Device::setName(char const*)>
c0013422:	58                   	pop    eax
c0013423:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013429:	5a                   	pop    edx
c001342a:	68 80 3f 02 c0       	push   0xc0023f80
c001342f:	50                   	push   eax
c0013430:	e8 97 d3 fe ff       	call   c00007cc <strcmp>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	85 c0                	test   eax,eax
c001343a:	0f 85 71 03 00 00    	jne    c00137b1 <CPU::detectFeatures()+0x9e3>
c0013440:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013447:	e9 65 03 00 00       	jmp    c00137b1 <CPU::detectFeatures()+0x9e3>
c001344c:	83 f8 02             	cmp    eax,0x2
c001344f:	0f 85 b5 00 00 00    	jne    c001350a <CPU::detectFeatures()+0x73c>
c0013455:	57                   	push   edi
c0013456:	57                   	push   edi
c0013457:	68 92 3f 02 c0       	push   0xc0023f92
c001345c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013460:	56                   	push   esi
c0013461:	e8 da d2 fe ff       	call   c0000740 <strcpy>
c0013466:	5d                   	pop    ebp
c0013467:	58                   	pop    eax
c0013468:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001346e:	66 c1 e8 06          	shr    ax,0x6
c0013472:	0f b6 c0             	movzx  eax,al
c0013475:	50                   	push   eax
c0013476:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001347c:	c1 e8 0e             	shr    eax,0xe
c001347f:	0f b6 c0             	movzx  eax,al
c0013482:	50                   	push   eax
c0013483:	e8 90 f2 ff ff       	call   c0012718 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013488:	5a                   	pop    edx
c0013489:	59                   	pop    ecx
c001348a:	50                   	push   eax
c001348b:	56                   	push   esi
c001348c:	e8 ef d3 fe ff       	call   c0000880 <strcat>
c0013491:	5f                   	pop    edi
c0013492:	5d                   	pop    ebp
c0013493:	56                   	push   esi
c0013494:	53                   	push   ebx
c0013495:	e8 06 ac ff ff       	call   c000e0a0 <Device::setName(char const*)>
c001349a:	58                   	pop    eax
c001349b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134a1:	5a                   	pop    edx
c00134a2:	68 97 3f 02 c0       	push   0xc0023f97
c00134a7:	50                   	push   eax
c00134a8:	e8 1f d3 fe ff       	call   c00007cc <strcmp>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	85 c0                	test   eax,eax
c00134b2:	75 20                	jne    c00134d4 <CPU::detectFeatures()+0x706>
c00134b4:	8b 15 e8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e8
c00134ba:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00134c0:	a8 01                	test   al,0x1
c00134c2:	74 10                	je     c00134d4 <CPU::detectFeatures()+0x706>
c00134c4:	83 e0 fe             	and    eax,0xfffffffe
c00134c7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00134cd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00134d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134da:	c1 e8 0e             	shr    eax,0xe
c00134dd:	3c 05                	cmp    al,0x5
c00134df:	0f 85 cc 02 00 00    	jne    c00137b1 <CPU::detectFeatures()+0x9e3>
c00134e5:	56                   	push   esi
c00134e6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134ec:	83 e0 0f             	and    eax,0xf
c00134ef:	50                   	push   eax
c00134f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134f6:	66 c1 e8 06          	shr    ax,0x6
c00134fa:	0f b6 c0             	movzx  eax,al
c00134fd:	50                   	push   eax
c00134fe:	6a 05                	push   0x5
c0013500:	e8 89 f6 ff ff       	call   c0012b8e <CPU::AMD_K6_writeback(int, int, int)>
c0013505:	e9 1f 02 00 00       	jmp    c0013729 <CPU::detectFeatures()+0x95b>
c001350a:	8d 50 fd             	lea    edx,[eax-0x3]
c001350d:	83 fa 01             	cmp    edx,0x1
c0013510:	76 09                	jbe    c001351b <CPU::detectFeatures()+0x74d>
c0013512:	83 f8 06             	cmp    eax,0x6
c0013515:	0f 85 91 01 00 00    	jne    c00136ac <CPU::detectFeatures()+0x8de>
c001351b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013521:	c1 ea 0e             	shr    edx,0xe
c0013524:	80 fa 05             	cmp    dl,0x5
c0013527:	75 7b                	jne    c00135a4 <CPU::detectFeatures()+0x7d6>
c0013529:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001352f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013534:	66 81 fa 00 01       	cmp    dx,0x100
c0013539:	75 0c                	jne    c0013547 <CPU::detectFeatures()+0x779>
c001353b:	51                   	push   ecx
c001353c:	51                   	push   ecx
c001353d:	68 9e 3f 02 c0       	push   0xc0023f9e
c0013542:	e9 dc 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c0013547:	66 81 fa 00 02       	cmp    dx,0x200
c001354c:	75 0c                	jne    c001355a <CPU::detectFeatures()+0x78c>
c001354e:	52                   	push   edx
c001354f:	52                   	push   edx
c0013550:	68 b1 3f 02 c0       	push   0xc0023fb1
c0013555:	e9 c9 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001355a:	66 81 fa 40 02       	cmp    dx,0x240
c001355f:	75 0c                	jne    c001356d <CPU::detectFeatures()+0x79f>
c0013561:	50                   	push   eax
c0013562:	50                   	push   eax
c0013563:	68 c3 3f 02 c0       	push   0xc0023fc3
c0013568:	e9 b6 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001356d:	83 f8 06             	cmp    eax,0x6
c0013570:	75 0c                	jne    c001357e <CPU::detectFeatures()+0x7b0>
c0013572:	50                   	push   eax
c0013573:	50                   	push   eax
c0013574:	68 d5 3f 02 c0       	push   0xc0023fd5
c0013579:	e9 a5 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001357e:	83 f8 04             	cmp    eax,0x4
c0013581:	75 0c                	jne    c001358f <CPU::detectFeatures()+0x7c1>
c0013583:	50                   	push   eax
c0013584:	50                   	push   eax
c0013585:	68 e1 3f 02 c0       	push   0xc0023fe1
c001358a:	e9 94 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001358f:	83 f8 03             	cmp    eax,0x3
c0013592:	0f 85 19 02 00 00    	jne    c00137b1 <CPU::detectFeatures()+0x9e3>
c0013598:	50                   	push   eax
c0013599:	50                   	push   eax
c001359a:	68 e9 3f 02 c0       	push   0xc0023fe9
c001359f:	e9 7f 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00135a4:	80 fa 06             	cmp    dl,0x6
c00135a7:	0f 85 db 00 00 00    	jne    c0013688 <CPU::detectFeatures()+0x8ba>
c00135ad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135b3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135b8:	66 81 fa 80 01       	cmp    dx,0x180
c00135bd:	75 0c                	jne    c00135cb <CPU::detectFeatures()+0x7fd>
c00135bf:	50                   	push   eax
c00135c0:	50                   	push   eax
c00135c1:	68 f4 3f 02 c0       	push   0xc0023ff4
c00135c6:	e9 58 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00135cb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00135d1:	66 f7 c1 80 ff       	test   cx,0xff80
c00135d6:	75 0c                	jne    c00135e4 <CPU::detectFeatures()+0x816>
c00135d8:	50                   	push   eax
c00135d9:	50                   	push   eax
c00135da:	68 04 40 02 c0       	push   0xc0024004
c00135df:	e9 3f 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00135e4:	66 81 fa 40 02       	cmp    dx,0x240
c00135e9:	75 0c                	jne    c00135f7 <CPU::detectFeatures()+0x829>
c00135eb:	55                   	push   ebp
c00135ec:	55                   	push   ebp
c00135ed:	68 0b 40 02 c0       	push   0xc002400b
c00135f2:	e9 2c 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00135f7:	66 81 fa 80 02       	cmp    dx,0x280
c00135fc:	75 0c                	jne    c001360a <CPU::detectFeatures()+0x83c>
c00135fe:	57                   	push   edi
c00135ff:	57                   	push   edi
c0013600:	68 14 40 02 c0       	push   0xc0024014
c0013605:	e9 19 01 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001360a:	66 81 fa 40 03       	cmp    dx,0x340
c001360f:	74 ed                	je     c00135fe <CPU::detectFeatures()+0x830>
c0013611:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013616:	75 0c                	jne    c0013624 <CPU::detectFeatures()+0x856>
c0013618:	56                   	push   esi
c0013619:	56                   	push   esi
c001361a:	68 1b 40 02 c0       	push   0xc002401b
c001361f:	e9 ff 00 00 00       	jmp    c0013723 <CPU::detectFeatures()+0x955>
c0013624:	83 f8 06             	cmp    eax,0x6
c0013627:	0f 84 45 ff ff ff    	je     c0013572 <CPU::detectFeatures()+0x7a4>
c001362d:	83 f8 04             	cmp    eax,0x4
c0013630:	0f 84 4d ff ff ff    	je     c0013583 <CPU::detectFeatures()+0x7b5>
c0013636:	83 f8 03             	cmp    eax,0x3
c0013639:	0f 85 72 01 00 00    	jne    c00137b1 <CPU::detectFeatures()+0x9e3>
c001363f:	51                   	push   ecx
c0013640:	51                   	push   ecx
c0013641:	68 24 40 02 c0       	push   0xc0024024
c0013646:	53                   	push   ebx
c0013647:	e8 54 aa ff ff       	call   c000e0a0 <Device::setName(char const*)>
c001364c:	b1 c1                	mov    cl,0xc1
c001364e:	88 c8                	mov    al,cl
c0013650:	e6 22                	out    0x22,al
c0013652:	e4 23                	in     al,0x23
c0013654:	88 c2                	mov    dl,al
c0013656:	88 c8                	mov    al,cl
c0013658:	e6 22                	out    0x22,al
c001365a:	88 d0                	mov    al,dl
c001365c:	83 c8 10             	or     eax,0x10
c001365f:	e6 23                	out    0x23,al
c0013661:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013668:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001366b:	89 d0                	mov    eax,edx
c001366d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013673:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013677:	40                   	inc    eax
c0013678:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001367e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013683:	e9 a1 00 00 00       	jmp    c0013729 <CPU::detectFeatures()+0x95b>
c0013688:	83 f8 06             	cmp    eax,0x6
c001368b:	0f 84 e1 fe ff ff    	je     c0013572 <CPU::detectFeatures()+0x7a4>
c0013691:	83 f8 04             	cmp    eax,0x4
c0013694:	0f 84 e9 fe ff ff    	je     c0013583 <CPU::detectFeatures()+0x7b5>
c001369a:	83 f8 03             	cmp    eax,0x3
c001369d:	0f 85 0e 01 00 00    	jne    c00137b1 <CPU::detectFeatures()+0x9e3>
c00136a3:	52                   	push   edx
c00136a4:	52                   	push   edx
c00136a5:	68 2f 40 02 c0       	push   0xc002402f
c00136aa:	eb 77                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136ac:	83 f8 07             	cmp    eax,0x7
c00136af:	75 09                	jne    c00136ba <CPU::detectFeatures()+0x8ec>
c00136b1:	50                   	push   eax
c00136b2:	50                   	push   eax
c00136b3:	68 39 40 02 c0       	push   0xc0024039
c00136b8:	eb 69                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136ba:	83 f8 0a             	cmp    eax,0xa
c00136bd:	75 09                	jne    c00136c8 <CPU::detectFeatures()+0x8fa>
c00136bf:	50                   	push   eax
c00136c0:	50                   	push   eax
c00136c1:	68 44 40 02 c0       	push   0xc0024044
c00136c6:	eb 5b                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136c8:	83 f8 0b             	cmp    eax,0xb
c00136cb:	75 09                	jne    c00136d6 <CPU::detectFeatures()+0x908>
c00136cd:	50                   	push   eax
c00136ce:	50                   	push   eax
c00136cf:	68 4c 40 02 c0       	push   0xc002404c
c00136d4:	eb 4d                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136d6:	83 f8 08             	cmp    eax,0x8
c00136d9:	75 09                	jne    c00136e4 <CPU::detectFeatures()+0x916>
c00136db:	50                   	push   eax
c00136dc:	50                   	push   eax
c00136dd:	68 55 40 02 c0       	push   0xc0024055
c00136e2:	eb 3f                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136e4:	83 f8 09             	cmp    eax,0x9
c00136e7:	75 09                	jne    c00136f2 <CPU::detectFeatures()+0x924>
c00136e9:	50                   	push   eax
c00136ea:	50                   	push   eax
c00136eb:	68 5d 40 02 c0       	push   0xc002405d
c00136f0:	eb 31                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c00136f2:	83 f8 05             	cmp    eax,0x5
c00136f5:	75 09                	jne    c0013700 <CPU::detectFeatures()+0x932>
c00136f7:	50                   	push   eax
c00136f8:	50                   	push   eax
c00136f9:	68 65 40 02 c0       	push   0xc0024065
c00136fe:	eb 23                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c0013700:	83 f8 0c             	cmp    eax,0xc
c0013703:	75 09                	jne    c001370e <CPU::detectFeatures()+0x940>
c0013705:	55                   	push   ebp
c0013706:	55                   	push   ebp
c0013707:	68 73 40 02 c0       	push   0xc0024073
c001370c:	eb 15                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001370e:	83 f8 0d             	cmp    eax,0xd
c0013711:	75 09                	jne    c001371c <CPU::detectFeatures()+0x94e>
c0013713:	57                   	push   edi
c0013714:	57                   	push   edi
c0013715:	68 7e 40 02 c0       	push   0xc002407e
c001371a:	eb 07                	jmp    c0013723 <CPU::detectFeatures()+0x955>
c001371c:	56                   	push   esi
c001371d:	56                   	push   esi
c001371e:	68 92 40 02 c0       	push   0xc0024092
c0013723:	53                   	push   ebx
c0013724:	e8 77 a9 ff ff       	call   c000e0a0 <Device::setName(char const*)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	e9 80 00 00 00       	jmp    c00137b1 <CPU::detectFeatures()+0x9e3>
c0013731:	51                   	push   ecx
c0013732:	51                   	push   ecx
c0013733:	68 de 3e 02 c0       	push   0xc0023ede
c0013738:	55                   	push   ebp
c0013739:	e8 02 d0 fe ff       	call   c0000740 <strcpy>
c001373e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013748:	e8 96 ca fe ff       	call   c00001e3 <is486>
c001374d:	83 c4 10             	add    esp,0x10
c0013750:	85 c0                	test   eax,eax
c0013752:	74 2b                	je     c001377f <CPU::detectFeatures()+0x9b1>
c0013754:	52                   	push   edx
c0013755:	52                   	push   edx
c0013756:	68 9e 40 02 c0       	push   0xc002409e
c001375b:	53                   	push   ebx
c001375c:	e8 3f a9 ff ff       	call   c000e0a0 <Device::setName(char const*)>
c0013761:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013768:	0f 20 c0             	mov    eax,cr0
c001376b:	83 e0 14             	and    eax,0x14
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	83 f8 04             	cmp    eax,0x4
c0013774:	75 1f                	jne    c0013795 <CPU::detectFeatures()+0x9c7>
c0013776:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001377d:	eb 32                	jmp    c00137b1 <CPU::detectFeatures()+0x9e3>
c001377f:	50                   	push   eax
c0013780:	50                   	push   eax
c0013781:	68 a9 40 02 c0       	push   0xc00240a9
c0013786:	53                   	push   ebx
c0013787:	e8 14 a9 ff ff       	call   c000e0a0 <Device::setName(char const*)>
c001378c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013793:	eb d3                	jmp    c0013768 <CPU::detectFeatures()+0x99a>
c0013795:	e8 24 ca fe ff       	call   c00001be <hasLegacyFPU>
c001379a:	83 e0 01             	and    eax,0x1
c001379d:	8d 14 00             	lea    edx,[eax+eax*1]
c00137a0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00137a6:	83 e0 fd             	and    eax,0xfffffffd
c00137a9:	09 d0                	or     eax,edx
c00137ab:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00137b1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00137b8:	83 c4 4c             	add    esp,0x4c
c00137bb:	5b                   	pop    ebx
c00137bc:	5e                   	pop    esi
c00137bd:	5f                   	pop    edi
c00137be:	5d                   	pop    ebp
c00137bf:	c3                   	ret    

c00137c0 <CPU::setupSMEP()>:
c00137c0:	0f 20 e0             	mov    eax,cr4
c00137c3:	0d 00 00 10 00       	or     eax,0x100000
c00137c8:	0f 22 e0             	mov    cr4,eax
c00137cb:	c3                   	ret    

c00137cc <CPU::setupUMIP()>:
c00137cc:	0f 20 e0             	mov    eax,cr4
c00137cf:	80 cc 08             	or     ah,0x8
c00137d2:	0f 22 e0             	mov    cr4,eax
c00137d5:	c3                   	ret    

c00137d6 <CPU::setupTSC()>:
c00137d6:	0f 20 e0             	mov    eax,cr4
c00137d9:	83 c8 04             	or     eax,0x4
c00137dc:	0f 22 e0             	mov    cr4,eax
c00137df:	c3                   	ret    

c00137e0 <CPU::setupLargePages()>:
c00137e0:	0f 20 e0             	mov    eax,cr4
c00137e3:	83 c8 10             	or     eax,0x10
c00137e6:	0f 22 e0             	mov    cr4,eax
c00137e9:	c3                   	ret    

c00137ea <CPU::setupPAT()>:
c00137ea:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00137ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00137f6:	74 2c                	je     c0013824 <CPU::setupPAT()+0x3a>
c00137f8:	53                   	push   ebx
c00137f9:	83 ec 10             	sub    esp,0x10
c00137fc:	68 77 02 00 00       	push   0x277
c0013801:	50                   	push   eax
c0013802:	e8 1d 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013807:	83 e2 f8             	and    edx,0xfffffff8
c001380a:	83 ca 01             	or     edx,0x1
c001380d:	52                   	push   edx
c001380e:	50                   	push   eax
c001380f:	68 77 02 00 00       	push   0x277
c0013814:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c001381a:	e8 31 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001381f:	83 c4 28             	add    esp,0x28
c0013822:	5b                   	pop    ebx
c0013823:	c3                   	ret    
c0013824:	c3                   	ret    
c0013825:	90                   	nop

c0013826 <CPU::setupMTRR()>:
c0013826:	c3                   	ret    
c0013827:	90                   	nop

c0013828 <CPU::setupGlobalPages()>:
c0013828:	0f 20 e0             	mov    eax,cr4
c001382b:	0c 80                	or     al,0x80
c001382d:	0f 22 e0             	mov    cr4,eax
c0013830:	c3                   	ret    
c0013831:	90                   	nop

c0013832 <CPU::allowUsermodeDataAccess()>:
c0013832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013836:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001383d:	74 03                	je     c0013842 <CPU::allowUsermodeDataAccess()+0x10>
c001383f:	0f 01 cb             	stac   
c0013842:	c3                   	ret    
c0013843:	90                   	nop

c0013844 <CPU::prohibitUsermodeDataAccess()>:
c0013844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013848:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001384f:	74 03                	je     c0013854 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013851:	0f 01 ca             	clac   
c0013854:	c3                   	ret    
c0013855:	90                   	nop

c0013856 <CPU::setupSMAP()>:
c0013856:	0f 20 e0             	mov    eax,cr4
c0013859:	0d 00 00 20 00       	or     eax,0x200000
c001385e:	0f 22 e0             	mov    cr4,eax
c0013861:	eb e1                	jmp    c0013844 <CPU::prohibitUsermodeDataAccess()>
c0013863:	90                   	nop

c0013864 <CPU::setupFeatures()>:
c0013864:	83 ec 0c             	sub    esp,0xc
c0013867:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001386b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013872:	74 07                	je     c001387b <CPU::setupFeatures()+0x17>
c0013874:	52                   	push   edx
c0013875:	e8 46 ff ff ff       	call   c00137c0 <CPU::setupSMEP()>
c001387a:	58                   	pop    eax
c001387b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0013882:	74 07                	je     c001388b <CPU::setupFeatures()+0x27>
c0013884:	52                   	push   edx
c0013885:	e8 cc ff ff ff       	call   c0013856 <CPU::setupSMAP()>
c001388a:	58                   	pop    eax
c001388b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0013892:	74 07                	je     c001389b <CPU::setupFeatures()+0x37>
c0013894:	52                   	push   edx
c0013895:	e8 32 ff ff ff       	call   c00137cc <CPU::setupUMIP()>
c001389a:	58                   	pop    eax
c001389b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00138a2:	74 07                	je     c00138ab <CPU::setupFeatures()+0x47>
c00138a4:	52                   	push   edx
c00138a5:	e8 2c ff ff ff       	call   c00137d6 <CPU::setupTSC()>
c00138aa:	58                   	pop    eax
c00138ab:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00138b2:	74 07                	je     c00138bb <CPU::setupFeatures()+0x57>
c00138b4:	52                   	push   edx
c00138b5:	e8 26 ff ff ff       	call   c00137e0 <CPU::setupLargePages()>
c00138ba:	59                   	pop    ecx
c00138bb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00138c2:	74 07                	je     c00138cb <CPU::setupFeatures()+0x67>
c00138c4:	52                   	push   edx
c00138c5:	e8 5e ff ff ff       	call   c0013828 <CPU::setupGlobalPages()>
c00138ca:	58                   	pop    eax
c00138cb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00138d2:	74 0c                	je     c00138e0 <CPU::setupFeatures()+0x7c>
c00138d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138d8:	83 c4 0c             	add    esp,0xc
c00138db:	e9 0a ff ff ff       	jmp    c00137ea <CPU::setupPAT()>
c00138e0:	83 c4 0c             	add    esp,0xc
c00138e3:	c3                   	ret    

c00138e4 <CPU::open(int, int, void*)>:
c00138e4:	57                   	push   edi
c00138e5:	56                   	push   esi
c00138e6:	53                   	push   ebx
c00138e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138ef:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138f5:	83 ec 0c             	sub    esp,0xc
c00138f8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00138fe:	68 b4 40 02 c0       	push   0xc00240b4
c0013903:	e8 15 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013908:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001390e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013911:	e8 a6 59 ff ff       	call   c00092bc <GDT::setup()>
c0013916:	c7 04 24 c6 40 02 c0 	mov    DWORD PTR [esp],0xc00240c6
c001391d:	e8 fb 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013922:	83 c4 0c             	add    esp,0xc
c0013925:	6a 00                	push   0x0
c0013927:	68 ef be ad de       	push   0xdeadbeef
c001392c:	57                   	push   edi
c001392d:	e8 de 76 ff ff       	call   c000b010 <TSS::setup(unsigned long, unsigned long)>
c0013932:	c7 04 24 d8 40 02 c0 	mov    DWORD PTR [esp],0xc00240d8
c0013939:	e8 df 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001393e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013941:	e8 aa 76 ff ff       	call   c000aff0 <TSS::flush()>
c0013946:	c7 04 24 ec 40 02 c0 	mov    DWORD PTR [esp],0xc00240ec
c001394d:	e8 cb 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013952:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013958:	89 04 24             	mov    DWORD PTR [esp],eax
c001395b:	e8 c6 5b ff ff       	call   c0009526 <IDT::setup()>
c0013960:	c7 04 24 fe 40 02 c0 	mov    DWORD PTR [esp],0xc00240fe
c0013967:	e8 b1 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001396c:	b8 00 04 00 00       	mov    eax,0x400
c0013971:	0f 23 f8             	mov    db7,eax
c0013974:	c7 04 24 1c 41 02 c0 	mov    DWORD PTR [esp],0xc002411c
c001397b:	e8 9d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013980:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001398a:	e8 3c 64 ff ff       	call   c0009dcb <Phys::allocatePage()>
c001398f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013995:	89 30                	mov    DWORD PTR [eax],esi
c0013997:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001399d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00139a0:	c7 04 24 3e 41 02 c0 	mov    DWORD PTR [esp],0xc002413e
c00139a7:	e8 71 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ac:	58                   	pop    eax
c00139ad:	5a                   	pop    edx
c00139ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00139b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00139b8:	e8 4d 86 ff ff       	call   c000c00a <VAS::setCPUSpecific(unsigned long)>
c00139bd:	c7 04 24 66 41 02 c0 	mov    DWORD PTR [esp],0xc0024166
c00139c4:	e8 54 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139cc:	e8 fd f3 ff ff       	call   c0012dce <CPU::detectFeatures()>
c00139d1:	c7 04 24 89 41 02 c0 	mov    DWORD PTR [esp],0xc0024189
c00139d8:	e8 40 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139dd:	e8 cc b8 ff ff       	call   c000f2ae <setupInterruptController()>
c00139e2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139e8:	c7 04 24 ad 41 02 c0 	mov    DWORD PTR [esp],0xc00241ad
c00139ef:	e8 29 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139f4:	a1 00 64 02 c0       	mov    eax,ds:0xc0026400
c00139f9:	83 e0 10             	and    eax,0x10
c00139fc:	83 f8 01             	cmp    eax,0x1
c00139ff:	19 c0                	sbb    eax,eax
c0013a01:	83 e0 46             	and    eax,0x46
c0013a04:	83 c0 1e             	add    eax,0x1e
c0013a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a0a:	e8 89 ce ff ff       	call   c0010898 <setupTimer(int)>
c0013a0f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a15:	c7 04 24 c8 41 02 c0 	mov    DWORD PTR [esp],0xc00241c8
c0013a1c:	e8 fc 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a24:	e8 3b fe ff ff       	call   c0013864 <CPU::setupFeatures()>
c0013a29:	c7 04 24 e3 41 02 c0 	mov    DWORD PTR [esp],0xc00241e3
c0013a30:	e8 e8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	31 c0                	xor    eax,eax
c0013a3a:	5b                   	pop    ebx
c0013a3b:	5e                   	pop    esi
c0013a3c:	5f                   	pop    edi
c0013a3d:	c3                   	ret    

c0013a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a3e:	57                   	push   edi
c0013a3f:	56                   	push   esi
c0013a40:	53                   	push   ebx
c0013a41:	51                   	push   ecx
c0013a42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a46:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a49:	0f 02 c0             	lar    eax,ax
c0013a4c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a4f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a53:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a56:	88 ca                	mov    dl,cl
c0013a58:	c0 ea 06             	shr    dl,0x6
c0013a5b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a5f:	89 ca                	mov    edx,ecx
c0013a61:	66 c1 ea 03          	shr    dx,0x3
c0013a65:	83 e2 07             	and    edx,0x7
c0013a68:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a6d:	88 17                	mov    BYTE PTR [edi],dl
c0013a6f:	0f 84 a6 01 00 00    	je     c0013c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a75:	83 e1 07             	and    ecx,0x7
c0013a78:	80 f9 04             	cmp    cl,0x4
c0013a7b:	0f 84 98 00 00 00    	je     c0013b19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a81:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a86:	0f 95 c0             	setne  al
c0013a89:	80 f9 05             	cmp    cl,0x5
c0013a8c:	0f 95 c2             	setne  dl
c0013a8f:	08 c2                	or     dl,al
c0013a91:	74 79                	je     c0013b0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a93:	84 c9                	test   cl,cl
c0013a95:	75 05                	jne    c0013a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a97:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a9a:	eb 3c                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a9c:	80 f9 01             	cmp    cl,0x1
c0013a9f:	75 05                	jne    c0013aa6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013aa1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013aa4:	eb 32                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa6:	80 f9 02             	cmp    cl,0x2
c0013aa9:	75 05                	jne    c0013ab0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013aab:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013aae:	eb 28                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab0:	31 c0                	xor    eax,eax
c0013ab2:	80 f9 03             	cmp    cl,0x3
c0013ab5:	75 05                	jne    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013ab7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013aba:	eb 1c                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013abc:	80 f9 05             	cmp    cl,0x5
c0013abf:	75 05                	jne    c0013ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013ac1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ac4:	eb 12                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ac6:	80 f9 06             	cmp    cl,0x6
c0013ac9:	75 05                	jne    c0013ad0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013acb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ace:	eb 08                	jmp    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad0:	80 f9 07             	cmp    cl,0x7
c0013ad3:	75 03                	jne    c0013ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ad8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013add:	75 10                	jne    c0013aef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013adf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013ae3:	b9 03 00 00 00       	mov    ecx,0x3
c0013ae8:	01 d0                	add    eax,edx
c0013aea:	e9 37 01 00 00       	jmp    c0013c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013aef:	b9 02 00 00 00       	mov    ecx,0x2
c0013af4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013af9:	0f 85 27 01 00 00    	jne    c0013c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013aff:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b02:	b9 06 00 00 00       	mov    ecx,0x6
c0013b07:	e9 1a 01 00 00       	jmp    c0013c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b0c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b0f:	b9 06 00 00 00       	mov    ecx,0x6
c0013b14:	e9 0f 01 00 00       	jmp    c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b19:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b1c:	88 ca                	mov    dl,cl
c0013b1e:	c0 ea 06             	shr    dl,0x6
c0013b21:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b25:	89 ca                	mov    edx,ecx
c0013b27:	66 c1 ea 03          	shr    dx,0x3
c0013b2b:	83 e2 07             	and    edx,0x7
c0013b2e:	80 e1 07             	and    cl,0x7
c0013b31:	75 05                	jne    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b33:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b36:	eb 4c                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b38:	80 f9 01             	cmp    cl,0x1
c0013b3b:	75 05                	jne    c0013b42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b3d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b40:	eb 42                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b42:	80 f9 02             	cmp    cl,0x2
c0013b45:	75 05                	jne    c0013b4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b47:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b4a:	eb 38                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b4c:	80 f9 03             	cmp    cl,0x3
c0013b4f:	75 05                	jne    c0013b56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b51:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b54:	eb 2e                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b56:	80 f9 04             	cmp    cl,0x4
c0013b59:	75 12                	jne    c0013b6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b5b:	f6 c4 60             	test   ah,0x60
c0013b5e:	75 08                	jne    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b60:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b63:	8d 78 14             	lea    edi,[eax+0x14]
c0013b66:	eb 1c                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b68:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b6b:	eb 17                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b6d:	80 f9 05             	cmp    cl,0x5
c0013b70:	75 05                	jne    c0013b77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b72:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b75:	eb 0d                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b77:	80 f9 06             	cmp    cl,0x6
c0013b7a:	75 05                	jne    c0013b81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b7f:	eb 03                	jmp    c0013b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b81:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b84:	84 d2                	test   dl,dl
c0013b86:	75 05                	jne    c0013b8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b88:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b8b:	eb 3c                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b8d:	80 fa 01             	cmp    dl,0x1
c0013b90:	75 05                	jne    c0013b97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b92:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b95:	eb 32                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b97:	80 fa 02             	cmp    dl,0x2
c0013b9a:	75 05                	jne    c0013ba1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013b9c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b9f:	eb 28                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba1:	80 fa 03             	cmp    dl,0x3
c0013ba4:	75 05                	jne    c0013bab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013ba6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ba9:	eb 1e                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bab:	31 c0                	xor    eax,eax
c0013bad:	80 fa 04             	cmp    dl,0x4
c0013bb0:	74 17                	je     c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bb2:	80 fa 05             	cmp    dl,0x5
c0013bb5:	75 05                	jne    c0013bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013bb7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013bba:	eb 0d                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bbc:	80 fa 06             	cmp    dl,0x6
c0013bbf:	75 05                	jne    c0013bc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013bc1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bc4:	eb 03                	jmp    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bc6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bc9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bce:	0f 94 c2             	sete   dl
c0013bd1:	80 f9 05             	cmp    cl,0x5
c0013bd4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013bd8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013bdd:	d3 e0                	shl    eax,cl
c0013bdf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013be3:	74 0a                	je     c0013bef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013be5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013be8:	b9 07 00 00 00       	mov    ecx,0x7
c0013bed:	eb 37                	jmp    c0013c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bef:	01 f8                	add    eax,edi
c0013bf1:	b9 03 00 00 00       	mov    ecx,0x3
c0013bf6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bfb:	74 2b                	je     c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bfd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c02:	75 0d                	jne    c0013c11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c04:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c08:	01 c8                	add    eax,ecx
c0013c0a:	b9 04 00 00 00       	mov    ecx,0x4
c0013c0f:	eb 17                	jmp    c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c11:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c14:	b9 07 00 00 00       	mov    ecx,0x7
c0013c19:	eb 0d                	jmp    c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c1b:	b9 02 00 00 00       	mov    ecx,0x2
c0013c20:	b2 01                	mov    dl,0x1
c0013c22:	31 c0                	xor    eax,eax
c0013c24:	eb 02                	jmp    c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c26:	31 d2                	xor    edx,edx
c0013c28:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c2c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c32:	88 11                	mov    BYTE PTR [ecx],dl
c0013c34:	5a                   	pop    edx
c0013c35:	5b                   	pop    ebx
c0013c36:	5e                   	pop    esi
c0013c37:	5f                   	pop    edi
c0013c38:	c3                   	ret    

c0013c39 <Krnl::smpEntry()>:
c0013c39:	eb fe                	jmp    c0013c39 <Krnl::smpEntry()>

c0013c3b <Krnl::startCPU(int)>:
c0013c3b:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0013c40:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c47:	0f 84 36 01 00 00    	je     c0013d83 <Krnl::startCPU(int)+0x148>
c0013c4d:	53                   	push   ebx
c0013c4e:	83 ec 10             	sub    esp,0x10
c0013c51:	fa                   	cli    
c0013c52:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0013c58:	6a 1b                	push   0x1b
c0013c5a:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c0013c60:	e8 bf 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c6a:	89 c3                	mov    ebx,eax
c0013c6c:	58                   	pop    eax
c0013c6d:	5a                   	pop    edx
c0013c6e:	53                   	push   ebx
c0013c6f:	68 2c 42 02 c0       	push   0xc002422c
c0013c74:	e8 eb 8d ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0013c79:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c91:	c1 e0 18             	shl    eax,0x18
c0013c94:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013ca3:	09 c2                	or     edx,eax
c0013ca5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013cab:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013cb1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cb7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cbd:	80 cd c5             	or     ch,0xc5
c0013cc0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cc6:	f3 90                	pause  
c0013cc8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cca:	0f ba e1 0c          	bt     ecx,0xc
c0013cce:	72 f6                	jb     c0013cc6 <Krnl::startCPU(int)+0x8b>
c0013cd0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cd6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cdc:	09 c1                	or     ecx,eax
c0013cde:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013ce4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cea:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cf0:	80 cd 85             	or     ch,0x85
c0013cf3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cf9:	f3 90                	pause  
c0013cfb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cfd:	0f ba e1 0c          	bt     ecx,0xc
c0013d01:	72 f6                	jb     c0013cf9 <Krnl::startCPU(int)+0xbe>
c0013d03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d0d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d13:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d19:	09 c1                	or     ecx,eax
c0013d1b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d21:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d27:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d2d:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d33:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d39:	f3 90                	pause  
c0013d3b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d3d:	0f ba e1 0c          	bt     ecx,0xc
c0013d41:	72 f6                	jb     c0013d39 <Krnl::startCPU(int)+0xfe>
c0013d43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d4d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d53:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d59:	09 c8                	or     eax,ecx
c0013d5b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d61:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d67:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d6c:	0d 02 06 00 00       	or     eax,0x602
c0013d71:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d77:	f3 90                	pause  
c0013d79:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d7b:	0f ba e0 0c          	bt     eax,0xc
c0013d7f:	72 f6                	jb     c0013d77 <Krnl::startCPU(int)+0x13c>
c0013d81:	eb fe                	jmp    c0013d81 <Krnl::startCPU(int)+0x146>
c0013d83:	c3                   	ret    

c0013d84 <Krnl::startCPUs()>:
c0013d84:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0013d89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d8f:	88 c2                	mov    dl,al
c0013d91:	83 e2 0a             	and    edx,0xa
c0013d94:	80 fa 0a             	cmp    dl,0xa
c0013d97:	75 09                	jne    c0013da2 <Krnl::startCPUs()+0x1e>
c0013d99:	a8 01                	test   al,0x1
c0013d9b:	74 05                	je     c0013da2 <Krnl::startCPUs()+0x1e>
c0013d9d:	e9 f9 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013da2:	c3                   	ret    
c0013da3:	90                   	nop

c0013da4 <EnvVarContainer::getEnv(char const*)>:
c0013da4:	57                   	push   edi
c0013da5:	56                   	push   esi
c0013da6:	53                   	push   ebx
c0013da7:	31 db                	xor    ebx,ebx
c0013da9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dad:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013daf:	7e 2b                	jle    c0013ddc <EnvVarContainer::getEnv(char const*)+0x38>
c0013db1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013db8:	50                   	push   eax
c0013db9:	50                   	push   eax
c0013dba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dbd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013dc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dc4:	e8 03 ca fe ff       	call   c00007cc <strcmp>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	85 c0                	test   eax,eax
c0013dce:	75 09                	jne    c0013dd9 <EnvVarContainer::getEnv(char const*)+0x35>
c0013dd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dd3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013dd7:	eb 05                	jmp    c0013dde <EnvVarContainer::getEnv(char const*)+0x3a>
c0013dd9:	43                   	inc    ebx
c0013dda:	eb d1                	jmp    c0013dad <EnvVarContainer::getEnv(char const*)+0x9>
c0013ddc:	31 c0                	xor    eax,eax
c0013dde:	5b                   	pop    ebx
c0013ddf:	5e                   	pop    esi
c0013de0:	5f                   	pop    edi
c0013de1:	c3                   	ret    

c0013de2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013de2:	55                   	push   ebp
c0013de3:	57                   	push   edi
c0013de4:	56                   	push   esi
c0013de5:	53                   	push   ebx
c0013de6:	83 ec 28             	sub    esp,0x28
c0013de9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013ded:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013df1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013df5:	56                   	push   esi
c0013df6:	e8 a5 c8 fe ff       	call   c00006a0 <strlen>
c0013dfb:	40                   	inc    eax
c0013dfc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dff:	e8 bf 5b ff ff       	call   c00099c3 <malloc>
c0013e04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e0b:	e8 90 c8 fe ff       	call   c00006a0 <strlen>
c0013e10:	40                   	inc    eax
c0013e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e14:	e8 aa 5b ff ff       	call   c00099c3 <malloc>
c0013e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e20:	e8 7b c8 fe ff       	call   c00006a0 <strlen>
c0013e25:	83 c4 0c             	add    esp,0xc
c0013e28:	40                   	inc    eax
c0013e29:	50                   	push   eax
c0013e2a:	6a 00                	push   0x0
c0013e2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e30:	e8 4f c8 fe ff       	call   c0000684 <memset>
c0013e35:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e38:	e8 63 c8 fe ff       	call   c00006a0 <strlen>
c0013e3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e41:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e49:	89 de                	mov    esi,ebx
c0013e4b:	e8 50 c8 fe ff       	call   c00006a0 <strlen>
c0013e50:	83 c4 0c             	add    esp,0xc
c0013e53:	40                   	inc    eax
c0013e54:	50                   	push   eax
c0013e55:	6a 00                	push   0x0
c0013e57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e5b:	e8 24 c8 fe ff       	call   c0000684 <memset>
c0013e60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e63:	e8 38 c8 fe ff       	call   c00006a0 <strlen>
c0013e68:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e6c:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e74:	40                   	inc    eax
c0013e75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e78:	c1 e0 03             	shl    eax,0x3
c0013e7b:	5a                   	pop    edx
c0013e7c:	59                   	pop    ecx
c0013e7d:	50                   	push   eax
c0013e7e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e81:	e8 29 5b ff ff       	call   c00099af <realloc>
c0013e86:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e8d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e90:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e94:	b9 08 00 00 00       	mov    ecx,0x8
c0013e99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e9b:	83 c4 2c             	add    esp,0x2c
c0013e9e:	5b                   	pop    ebx
c0013e9f:	5e                   	pop    esi
c0013ea0:	5f                   	pop    edi
c0013ea1:	5d                   	pop    ebp
c0013ea2:	c3                   	ret    
c0013ea3:	90                   	nop

c0013ea4 <EnvVarContainer::deleteEnv(char const*)>:
c0013ea4:	c3                   	ret    
c0013ea5:	90                   	nop

c0013ea6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013ea6:	55                   	push   ebp
c0013ea7:	57                   	push   edi
c0013ea8:	56                   	push   esi
c0013ea9:	53                   	push   ebx
c0013eaa:	81 ec 38 01 00 00    	sub    esp,0x138
c0013eb0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013eb7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ebe:	68 14 01 00 00       	push   0x114
c0013ec3:	e8 fb 5a ff ff       	call   c00099c3 <malloc>
c0013ec8:	83 c4 0c             	add    esp,0xc
c0013ecb:	89 c3                	mov    ebx,eax
c0013ecd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013ed0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013ed7:	50                   	push   eax
c0013ed8:	e8 f1 90 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0013edd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee0:	e8 bb 93 ff ff       	call   c000d2a0 <File::exists()>
c0013ee5:	83 c4 10             	add    esp,0x10
c0013ee8:	84 c0                	test   al,al
c0013eea:	75 31                	jne    c0013f1d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013eec:	50                   	push   eax
c0013eed:	50                   	push   eax
c0013eee:	6a 12                	push   0x12
c0013ef0:	53                   	push   ebx
c0013ef1:	e8 3c 91 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0013ef6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ef8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013efb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013efe:	e8 9d c7 fe ff       	call   c00006a0 <strlen>
c0013f03:	5a                   	pop    edx
c0013f04:	31 d2                	xor    edx,edx
c0013f06:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f0a:	51                   	push   ecx
c0013f0b:	56                   	push   esi
c0013f0c:	52                   	push   edx
c0013f0d:	50                   	push   eax
c0013f0e:	53                   	push   ebx
c0013f0f:	ff d7                	call   edi
c0013f11:	83 c4 14             	add    esp,0x14
c0013f14:	53                   	push   ebx
c0013f15:	e8 76 91 ff ff       	call   c000d090 <File::close()>
c0013f1a:	83 c4 10             	add    esp,0x10
c0013f1d:	56                   	push   esi
c0013f1e:	31 f6                	xor    esi,esi
c0013f20:	68 00 01 00 00       	push   0x100
c0013f25:	6a 00                	push   0x0
c0013f27:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f2b:	50                   	push   eax
c0013f2c:	e8 53 c7 fe ff       	call   c0000684 <memset>
c0013f31:	5f                   	pop    edi
c0013f32:	58                   	pop    eax
c0013f33:	6a 01                	push   0x1
c0013f35:	53                   	push   ebx
c0013f36:	e8 f7 90 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f4b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f4f:	51                   	push   ecx
c0013f50:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f54:	52                   	push   edx
c0013f55:	6a 00                	push   0x0
c0013f57:	6a 01                	push   0x1
c0013f59:	53                   	push   ebx
c0013f5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f5d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f61:	83 c4 20             	add    esp,0x20
c0013f64:	3c 0d                	cmp    al,0xd
c0013f66:	0f 84 09 01 00 00    	je     c0014075 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f71:	0f 84 ef 00 00 00    	je     c0014066 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f77:	3c 0a                	cmp    al,0xa
c0013f79:	74 13                	je     c0013f8e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f80:	74 0c                	je     c0013f8e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f82:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f88:	0f 8e d8 00 00 00    	jle    c0014066 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f92:	83 ec 0c             	sub    esp,0xc
c0013f95:	8d 78 01             	lea    edi,[eax+0x1]
c0013f98:	57                   	push   edi
c0013f99:	e8 25 5a ff ff       	call   c00099c3 <malloc>
c0013f9e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013fa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013fa6:	8d 56 04             	lea    edx,[esi+0x4]
c0013fa9:	89 14 24             	mov    DWORD PTR [esp],edx
c0013fac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013fb0:	e8 0e 5a ff ff       	call   c00099c3 <malloc>
c0013fb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013fb9:	83 c4 0c             	add    esp,0xc
c0013fbc:	57                   	push   edi
c0013fbd:	6a 00                	push   0x0
c0013fbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fc3:	e8 bc c6 fe ff       	call   c0000684 <memset>
c0013fc8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fcc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fd0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fd6:	83 c4 0c             	add    esp,0xc
c0013fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fdd:	52                   	push   edx
c0013fde:	6a 00                	push   0x0
c0013fe0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fe4:	e8 9b c6 fe ff       	call   c0000684 <memset>
c0013fe9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fed:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ff1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ff4:	e8 a7 c6 fe ff       	call   c00006a0 <strlen>
c0013ff9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013ffd:	89 c1                	mov    ecx,eax
c0013fff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014004:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014007:	40                   	inc    eax
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001400e:	85 d2                	test   edx,edx
c0014010:	75 0c                	jne    c001401e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	6a 08                	push   0x8
c0014017:	e8 a7 59 ff ff       	call   c00099c3 <malloc>
c001401c:	eb 0c                	jmp    c001402a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001401e:	c1 e0 03             	shl    eax,0x3
c0014021:	51                   	push   ecx
c0014022:	51                   	push   ecx
c0014023:	50                   	push   eax
c0014024:	52                   	push   edx
c0014025:	e8 85 59 ff ff       	call   c00099af <realloc>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014030:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014033:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014036:	8d 74 24 18          	lea    esi,[esp+0x18]
c001403a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001403e:	b9 08 00 00 00       	mov    ecx,0x8
c0014043:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014045:	31 f6                	xor    esi,esi
c0014047:	50                   	push   eax
c0014048:	68 00 01 00 00       	push   0x100
c001404d:	6a 00                	push   0x0
c001404f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014053:	50                   	push   eax
c0014054:	e8 2b c6 fe ff       	call   c0000684 <memset>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014064:	eb 0f                	jmp    c0014075 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014066:	3c 3d                	cmp    al,0x3d
c0014068:	74 07                	je     c0014071 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001406a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001406e:	46                   	inc    esi
c001406f:	eb 04                	jmp    c0014075 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014071:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014075:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001407a:	0f 85 c6 fe ff ff    	jne    c0013f46 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014080:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014086:	5b                   	pop    ebx
c0014087:	5e                   	pop    esi
c0014088:	5f                   	pop    edi
c0014089:	5d                   	pop    ebp
c001408a:	c3                   	ret    
c001408b:	90                   	nop

c001408c <EnvVarContainer::__loadSystem()>:
c001408c:	83 ec 10             	sub    esp,0x10
c001408f:	68 c0 5d 02 c0       	push   0xc0025dc0
c0014094:	68 3d 42 02 c0       	push   0xc002423d
c0014099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001409d:	e8 04 fe ff ff       	call   c0013ea6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00140a2:	83 c4 1c             	add    esp,0x1c
c00140a5:	c3                   	ret    

c00140a6 <EnvVarContainer::__loadUser()>:
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00140a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140c8:	90                   	nop
c00140c9:	c3                   	ret    

c00140ca <EnvVarContainer::~EnvVarContainer()>:
c00140ca:	83 ec 0c             	sub    esp,0xc
c00140cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140d4:	85 c0                	test   eax,eax
c00140d6:	74 1d                	je     c00140f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00140de:	85 c0                	test   eax,eax
c00140e0:	74 13                	je     c00140f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140e9:	83 ec 0c             	sub    esp,0xc
c00140ec:	50                   	push   eax
c00140ed:	e8 e1 58 ff ff       	call   c00099d3 <free>
c00140f2:	83 c4 10             	add    esp,0x10
c00140f5:	90                   	nop
c00140f6:	83 c4 0c             	add    esp,0xc
c00140f9:	c3                   	ret    

c00140fa <Krnl::getEnv(Process*, char const*)>:
c00140fa:	53                   	push   ebx
c00140fb:	83 ec 08             	sub    esp,0x8
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014106:	39 05 10 79 02 c0    	cmp    DWORD PTR ds:0xc0027910,eax
c001410c:	74 04                	je     c0014112 <Krnl::getEnv(Process*, char const*)+0x18>
c001410e:	85 c0                	test   eax,eax
c0014110:	75 0b                	jne    c001411d <Krnl::getEnv(Process*, char const*)+0x23>
c0014112:	a1 f4 6e 02 c0       	mov    eax,ds:0xc0026ef4
c0014117:	85 c0                	test   eax,eax
c0014119:	75 19                	jne    c0014134 <Krnl::getEnv(Process*, char const*)+0x3a>
c001411b:	eb 27                	jmp    c0014144 <Krnl::getEnv(Process*, char const*)+0x4a>
c001411d:	52                   	push   edx
c001411e:	52                   	push   edx
c001411f:	53                   	push   ebx
c0014120:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014126:	e8 79 fc ff ff       	call   c0013da4 <EnvVarContainer::getEnv(char const*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	85 c0                	test   eax,eax
c0014130:	75 28                	jne    c001415a <Krnl::getEnv(Process*, char const*)+0x60>
c0014132:	eb de                	jmp    c0014112 <Krnl::getEnv(Process*, char const*)+0x18>
c0014134:	52                   	push   edx
c0014135:	52                   	push   edx
c0014136:	53                   	push   ebx
c0014137:	50                   	push   eax
c0014138:	e8 67 fc ff ff       	call   c0013da4 <EnvVarContainer::getEnv(char const*)>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	85 c0                	test   eax,eax
c0014142:	75 16                	jne    c001415a <Krnl::getEnv(Process*, char const*)+0x60>
c0014144:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014148:	a1 f8 6e 02 c0       	mov    eax,ds:0xc0026ef8
c001414d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014151:	83 c4 08             	add    esp,0x8
c0014154:	5b                   	pop    ebx
c0014155:	e9 4a fc ff ff       	jmp    c0013da4 <EnvVarContainer::getEnv(char const*)>
c001415a:	83 c4 08             	add    esp,0x8
c001415d:	5b                   	pop    ebx
c001415e:	c3                   	ret    

c001415f <Krnl::setEnvSystem(char const*, char const*)>:
c001415f:	83 ec 10             	sub    esp,0x10
c0014162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416a:	ff 35 f8 6e 02 c0    	push   DWORD PTR ds:0xc0026ef8
c0014170:	e8 6d fc ff ff       	call   c0013de2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014175:	83 c4 1c             	add    esp,0x1c
c0014178:	c3                   	ret    

c0014179 <Krnl::setEnvUser(char const*, char const*)>:
c0014179:	a1 f4 6e 02 c0       	mov    eax,ds:0xc0026ef4
c001417e:	85 c0                	test   eax,eax
c0014180:	74 15                	je     c0014197 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014182:	83 ec 10             	sub    esp,0x10
c0014185:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001418d:	50                   	push   eax
c001418e:	e8 4f fc ff ff       	call   c0013de2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014193:	83 c4 1c             	add    esp,0x1c
c0014196:	c3                   	ret    
c0014197:	c3                   	ret    

c0014198 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001419c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00141a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141a6:	e9 37 fc ff ff       	jmp    c0013de2 <EnvVarContainer::setEnv(char const*, char const*)>

c00141ab <Krnl::deleteEnvSystem(char const*)>:
c00141ab:	c3                   	ret    

c00141ac <Krnl::deleteEnvUser(char const*)>:
c00141ac:	c3                   	ret    

c00141ad <Krnl::deleteEnvProcess(Process*, char const*)>:
c00141ad:	c3                   	ret    

c00141ae <Krnl::newProcessEnv(Process*)>:
c00141ae:	83 ec 28             	sub    esp,0x28
c00141b1:	6a 0c                	push   0xc
c00141b3:	e8 0b 58 ff ff       	call   c00099c3 <malloc>
c00141b8:	5a                   	pop    edx
c00141b9:	59                   	pop    ecx
c00141ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141be:	50                   	push   eax
c00141bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141c3:	e8 e0 fe ff ff       	call   c00140a8 <EnvVarContainer::EnvVarContainer(Process*)>
c00141c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141cc:	83 c4 2c             	add    esp,0x2c
c00141cf:	c3                   	ret    

c00141d0 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141d0:	57                   	push   edi
c00141d1:	56                   	push   esi
c00141d2:	53                   	push   ebx
c00141d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d7:	83 ec 0c             	sub    esp,0xc
c00141da:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141e0:	6a 0c                	push   0xc
c00141e2:	e8 dc 57 ff ff       	call   c00099c3 <malloc>
c00141e7:	89 c3                	mov    ebx,eax
c00141e9:	58                   	pop    eax
c00141ea:	5a                   	pop    edx
c00141eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ef:	53                   	push   ebx
c00141f0:	e8 b3 fe ff ff       	call   c00140a8 <EnvVarContainer::EnvVarContainer(Process*)>
c00141f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00141f7:	89 03                	mov    DWORD PTR [ebx],eax
c00141f9:	c1 e0 03             	shl    eax,0x3
c00141fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00141ff:	e8 bf 57 ff ff       	call   c00099c3 <malloc>
c0014204:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014207:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014209:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001420c:	c1 e1 03             	shl    ecx,0x3
c001420f:	89 c7                	mov    edi,eax
c0014211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	89 d8                	mov    eax,ebx
c0014218:	5b                   	pop    ebx
c0014219:	5e                   	pop    esi
c001421a:	5f                   	pop    edi
c001421b:	c3                   	ret    

c001421c <Krnl::loadSystemEnv()>:
c001421c:	53                   	push   ebx
c001421d:	83 ec 14             	sub    esp,0x14
c0014220:	6a 0c                	push   0xc
c0014222:	e8 9c 57 ff ff       	call   c00099c3 <malloc>
c0014227:	89 c3                	mov    ebx,eax
c0014229:	58                   	pop    eax
c001422a:	5a                   	pop    edx
c001422b:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0014231:	53                   	push   ebx
c0014232:	e8 71 fe ff ff       	call   c00140a8 <EnvVarContainer::EnvVarContainer(Process*)>
c0014237:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001423a:	89 1d f8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ef8,ebx
c0014240:	e8 47 fe ff ff       	call   c001408c <EnvVarContainer::__loadSystem()>
c0014245:	83 c4 18             	add    esp,0x18
c0014248:	5b                   	pop    ebx
c0014249:	c3                   	ret    

c001424a <Krnl::loadUserEnv()>:
c001424a:	53                   	push   ebx
c001424b:	83 ec 14             	sub    esp,0x14
c001424e:	6a 0c                	push   0xc
c0014250:	e8 6e 57 ff ff       	call   c00099c3 <malloc>
c0014255:	89 c3                	mov    ebx,eax
c0014257:	58                   	pop    eax
c0014258:	5a                   	pop    edx
c0014259:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c001425f:	53                   	push   ebx
c0014260:	e8 43 fe ff ff       	call   c00140a8 <EnvVarContainer::EnvVarContainer(Process*)>
c0014265:	89 1d f4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ef4,ebx
c001426b:	83 c4 18             	add    esp,0x18
c001426e:	5b                   	pop    ebx
c001426f:	c3                   	ret    

c0014270 <Krnl::flushEnv()>:
c0014270:	c3                   	ret    

c0014271 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014275:	8b 15 f4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ef4
c001427b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014281:	a1 f8 6e 02 c0       	mov    eax,ds:0xc0026ef8
c0014286:	8b 00                	mov    eax,DWORD PTR [eax]
c0014288:	03 01                	add    eax,DWORD PTR [ecx]
c001428a:	85 d2                	test   edx,edx
c001428c:	74 02                	je     c0014290 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001428e:	03 02                	add    eax,DWORD PTR [edx]
c0014290:	c3                   	ret    

c0014291 <Krnl::getProcessEnvPair(Process*, int)>:
c0014291:	57                   	push   edi
c0014292:	56                   	push   esi
c0014293:	8b 35 f4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ef4
c0014299:	53                   	push   ebx
c001429a:	85 f6                	test   esi,esi
c001429c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142a4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142b0:	75 16                	jne    c00142c8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00142b2:	39 c2                	cmp    edx,eax
c00142b4:	7c 16                	jl     c00142cc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142b6:	8b 0d f8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ef8
c00142bc:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142be:	01 c6                	add    esi,eax
c00142c0:	39 d6                	cmp    esi,edx
c00142c2:	7e 3c                	jle    c0014300 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142c4:	29 c2                	sub    edx,eax
c00142c6:	eb 04                	jmp    c00142cc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142c8:	39 c2                	cmp    edx,eax
c00142ca:	7d 05                	jge    c00142d1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142cf:	eb 20                	jmp    c00142f1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142d1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142d3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142d6:	39 d1                	cmp    ecx,edx
c00142d8:	7e 04                	jle    c00142de <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142da:	29 c2                	sub    edx,eax
c00142dc:	eb 10                	jmp    c00142ee <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142de:	8b 35 f8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ef8
c00142e4:	03 0e                	add    ecx,DWORD PTR [esi]
c00142e6:	39 d1                	cmp    ecx,edx
c00142e8:	7e 16                	jle    c0014300 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142ea:	29 c2                	sub    edx,eax
c00142ec:	29 fa                	sub    edx,edi
c00142ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142f1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00142f6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142f9:	89 03                	mov    DWORD PTR [ebx],eax
c00142fb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00142fe:	eb 1d                	jmp    c001431d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014300:	83 ec 0c             	sub    esp,0xc
c0014303:	68 5f 42 02 c0       	push   0xc002425f
c0014308:	e8 18 00 00 00       	call   c0014325 <Krnl::panic(char const*)>
c001430d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014313:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	89 d8                	mov    eax,ebx
c001431f:	5b                   	pop    ebx
c0014320:	5e                   	pop    esi
c0014321:	5f                   	pop    edi
c0014322:	c2 04 00             	ret    0x4

c0014325 <Krnl::panic(char const*)>:
c0014325:	55                   	push   ebp
c0014326:	89 e5                	mov    ebp,esp
c0014328:	53                   	push   ebx
c0014329:	83 ec 10             	sub    esp,0x10
c001432c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001432f:	fa                   	cli    
c0014330:	c6 05 04 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f04,0x1
c0014337:	53                   	push   ebx
c0014338:	e8 e0 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001433d:	58                   	pop    eax
c001433e:	c6 05 c0 57 02 c0 00 	mov    BYTE PTR ds:0xc00257c0,0x0
c0014345:	5a                   	pop    edx
c0014346:	53                   	push   ebx
c0014347:	68 79 42 02 c0       	push   0xc0024279
c001434c:	e8 13 87 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0014351:	59                   	pop    ecx
c0014352:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014357:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001435d:	e8 57 64 ff ff       	call   c000a7b9 <setActiveTerminal(VgaText*)>
c0014362:	83 c4 0c             	add    esp,0xc
c0014365:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001436a:	6a 01                	push   0x1
c001436c:	6a 0f                	push   0xf
c001436e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014374:	e8 9f 62 ff ff       	call   c000a618 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014379:	58                   	pop    eax
c001437a:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001437f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014385:	e8 b0 67 ff ff       	call   c000ab3a <VgaText::clearScreen()>
c001438a:	58                   	pop    eax
c001438b:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014390:	5a                   	pop    edx
c0014391:	68 92 42 02 c0       	push   0xc0024292
c0014396:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001439c:	e8 25 69 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00143a1:	59                   	pop    ecx
c00143a2:	58                   	pop    eax
c00143a3:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00143a8:	68 38 43 02 c0       	push   0xc0024338
c00143ad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b3:	e8 0e 69 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00143b8:	58                   	pop    eax
c00143b9:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00143be:	5a                   	pop    edx
c00143bf:	68 ae 42 02 c0       	push   0xc00242ae
c00143c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ca:	e8 f7 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00143cf:	59                   	pop    ecx
c00143d0:	58                   	pop    eax
c00143d1:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00143d6:	53                   	push   ebx
c00143d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143dd:	e8 e4 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00143e2:	58                   	pop    eax
c00143e3:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00143e8:	5a                   	pop    edx
c00143e9:	68 ce 42 02 c0       	push   0xc00242ce
c00143ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f4:	e8 cd 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00143f9:	a1 00 6f 02 c0       	mov    eax,ds:0xc0026f00
c00143fe:	83 c4 10             	add    esp,0x10
c0014401:	85 c0                	test   eax,eax
c0014403:	74 02                	je     c0014407 <Krnl::panic(char const*)+0xe2>
c0014405:	ff d0                	call   eax
c0014407:	83 ec 0c             	sub    esp,0xc
c001440a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001440d:	e8 af 30 00 00       	call   c00174c1 <Thr::getDriverNameFromAddress(unsigned long)>
c0014412:	83 c4 10             	add    esp,0x10
c0014415:	89 c3                	mov    ebx,eax
c0014417:	85 c0                	test   eax,eax
c0014419:	0f 84 4e 02 00 00    	je     c001466d <Krnl::panic(char const*)+0x348>
c001441f:	83 ec 08             	sub    esp,0x8
c0014422:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014427:	68 74 43 02 c0       	push   0xc0024374
c001442c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014432:	e8 8f 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014437:	58                   	pop    eax
c0014438:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001443d:	5a                   	pop    edx
c001443e:	68 ae 42 02 c0       	push   0xc00242ae
c0014443:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014449:	e8 78 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c001444e:	59                   	pop    ecx
c001444f:	58                   	pop    eax
c0014450:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014455:	53                   	push   ebx
c0014456:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001445c:	e8 65 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014461:	83 c4 10             	add    esp,0x10
c0014464:	83 ec 08             	sub    esp,0x8
c0014467:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001446c:	68 cd 42 02 c0       	push   0xc00242cd
c0014471:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014477:	e8 4a 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c001447c:	58                   	pop    eax
c001447d:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014482:	5a                   	pop    edx
c0014483:	68 cc 43 02 c0       	push   0xc00243cc
c0014488:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001448e:	e8 33 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014493:	59                   	pop    ecx
c0014494:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014499:	5b                   	pop    ebx
c001449a:	68 0c 44 02 c0       	push   0xc002440c
c001449f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144a5:	e8 1c 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00144aa:	58                   	pop    eax
c00144ab:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00144b0:	5a                   	pop    edx
c00144b1:	68 b9 42 02 c0       	push   0xc00242b9
c00144b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144bc:	e8 05 68 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00144c1:	59                   	pop    ecx
c00144c2:	5b                   	pop    ebx
c00144c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144c6:	68 d1 42 02 c0       	push   0xc00242d1
c00144cb:	e8 94 85 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00144d0:	58                   	pop    eax
c00144d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144d4:	5a                   	pop    edx
c00144d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144d8:	68 da 42 02 c0       	push   0xc00242da
c00144dd:	e8 82 85 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00144e2:	59                   	pop    ecx
c00144e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144e6:	5b                   	pop    ebx
c00144e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00144e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144ec:	68 e3 42 02 c0       	push   0xc00242e3
c00144f1:	e8 6e 85 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00144f6:	58                   	pop    eax
c00144f7:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00144fc:	5a                   	pop    edx
c00144fd:	68 50 44 02 c0       	push   0xc0024450
c0014502:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014508:	e8 b9 67 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c001450d:	59                   	pop    ecx
c001450e:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014513:	5b                   	pop    ebx
c0014514:	68 ec 42 02 c0       	push   0xc00242ec
c0014519:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001451f:	e8 a2 67 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014524:	0f 20 c0             	mov    eax,cr0
c0014527:	5a                   	pop    edx
c0014528:	59                   	pop    ecx
c0014529:	50                   	push   eax
c001452a:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001452f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014535:	e8 46 67 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c001453a:	5b                   	pop    ebx
c001453b:	58                   	pop    eax
c001453c:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014541:	68 f6 42 02 c0       	push   0xc00242f6
c0014546:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001454c:	e8 75 67 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014551:	0f 20 d0             	mov    eax,cr2
c0014554:	5a                   	pop    edx
c0014555:	59                   	pop    ecx
c0014556:	50                   	push   eax
c0014557:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001455c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014562:	e8 19 67 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c0014567:	5b                   	pop    ebx
c0014568:	58                   	pop    eax
c0014569:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001456e:	68 00 43 02 c0       	push   0xc0024300
c0014573:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014579:	e8 48 67 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c001457e:	0f 20 d8             	mov    eax,cr3
c0014581:	5a                   	pop    edx
c0014582:	59                   	pop    ecx
c0014583:	50                   	push   eax
c0014584:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014589:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001458f:	e8 ec 66 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c0014594:	5b                   	pop    ebx
c0014595:	58                   	pop    eax
c0014596:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001459b:	68 13 43 02 c0       	push   0xc0024313
c00145a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145a6:	e8 1b 67 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00145ab:	0f 20 e0             	mov    eax,cr4
c00145ae:	5a                   	pop    edx
c00145af:	59                   	pop    ecx
c00145b0:	50                   	push   eax
c00145b1:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00145b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145bc:	e8 bf 66 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c00145c1:	5b                   	pop    ebx
c00145c2:	58                   	pop    eax
c00145c3:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00145c8:	68 1d 43 02 c0       	push   0xc002431d
c00145cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145d3:	e8 ee 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00145d8:	5a                   	pop    edx
c00145d9:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00145de:	59                   	pop    ecx
c00145df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145e8:	50                   	push   eax
c00145e9:	e8 92 66 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c00145ee:	5b                   	pop    ebx
c00145ef:	58                   	pop    eax
c00145f0:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00145f5:	68 34 43 02 c0       	push   0xc0024334
c00145fa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014600:	e8 c1 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014605:	5a                   	pop    edx
c0014606:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001460b:	59                   	pop    ecx
c001460c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014612:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014615:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014618:	50                   	push   eax
c0014619:	e8 62 66 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c001461e:	5b                   	pop    ebx
c001461f:	58                   	pop    eax
c0014620:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014625:	68 34 43 02 c0       	push   0xc0024334
c001462a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014630:	e8 91 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014635:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001463a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001463d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014643:	8b 12                	mov    edx,DWORD PTR [edx]
c0014645:	59                   	pop    ecx
c0014646:	5b                   	pop    ebx
c0014647:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001464a:	50                   	push   eax
c001464b:	e8 30 66 ff ff       	call   c000ac80 <VgaText::putx(unsigned int)>
c0014650:	83 c4 10             	add    esp,0x10
c0014653:	b2 fe                	mov    dl,0xfe
c0014655:	e4 60                	in     al,0x60
c0014657:	3c 1c                	cmp    al,0x1c
c0014659:	74 04                	je     c001465f <Krnl::panic(char const*)+0x33a>
c001465b:	3c 5a                	cmp    al,0x5a
c001465d:	75 f6                	jne    c0014655 <Krnl::panic(char const*)+0x330>
c001465f:	e4 64                	in     al,0x64
c0014661:	a8 02                	test   al,0x2
c0014663:	75 fa                	jne    c001465f <Krnl::panic(char const*)+0x33a>
c0014665:	88 d0                	mov    al,dl
c0014667:	e6 64                	out    0x64,al
c0014669:	fa                   	cli    
c001466a:	f4                   	hlt    
c001466b:	eb e8                	jmp    c0014655 <Krnl::panic(char const*)+0x330>
c001466d:	50                   	push   eax
c001466e:	50                   	push   eax
c001466f:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0014674:	68 a0 43 02 c0       	push   0xc00243a0
c0014679:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001467f:	e8 42 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c0014684:	58                   	pop    eax
c0014685:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001468a:	5a                   	pop    edx
c001468b:	68 ae 42 02 c0       	push   0xc00242ae
c0014690:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014696:	e8 2b 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c001469b:	59                   	pop    ecx
c001469c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a1:	5b                   	pop    ebx
c00146a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146a5:	83 c0 0c             	add    eax,0xc
c00146a8:	50                   	push   eax
c00146a9:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00146ae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146b4:	e8 0d 66 ff ff       	call   c000acc6 <VgaText::puts(char const*)>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	e9 a3 fd ff ff       	jmp    c0014464 <Krnl::panic(char const*)+0x13f>
c00146c1:	66 90                	xchg   ax,ax
c00146c3:	90                   	nop

c00146c4 <Net::switchEndian16(unsigned short)>:
c00146c4:	83 ec 04             	sub    esp,0x4
c00146c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146cb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146cf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146d3:	c1 f8 08             	sar    eax,0x8
c00146d6:	89 c2                	mov    edx,eax
c00146d8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146dc:	c1 e0 08             	shl    eax,0x8
c00146df:	09 d0                	or     eax,edx
c00146e1:	83 c4 04             	add    esp,0x4
c00146e4:	c3                   	ret    
c00146e5:	8d 76 00             	lea    esi,[esi+0x0]

c00146e8 <Net::switchEndian32(unsigned int)>:
c00146e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146ec:	c1 e8 18             	shr    eax,0x18
c00146ef:	89 c2                	mov    edx,eax
c00146f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f5:	c1 e0 08             	shl    eax,0x8
c00146f8:	25 00 00 ff 00       	and    eax,0xff0000
c00146fd:	09 c2                	or     edx,eax
c00146ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014703:	c1 e8 08             	shr    eax,0x8
c0014706:	25 00 ff 00 00       	and    eax,0xff00
c001470b:	09 c2                	or     edx,eax
c001470d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014711:	c1 e0 18             	shl    eax,0x18
c0014714:	09 d0                	or     eax,edx
c0014716:	c3                   	ret    
c0014717:	90                   	nop

c0014718 <Net::crc32Calc(unsigned char*, int)>:
c0014718:	83 ec 10             	sub    esp,0x10
c001471b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014720:	75 0a                	jne    c001472c <Net::crc32Calc(unsigned char*, int)+0x14>
c0014722:	b8 00 00 00 00       	mov    eax,0x0
c0014727:	e9 8c 00 00 00       	jmp    c00147b8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001472c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014731:	7f 09                	jg     c001473c <Net::crc32Calc(unsigned char*, int)+0x24>
c0014733:	b8 00 00 00 00       	mov    eax,0x0
c0014738:	eb 7e                	jmp    c00147b8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001473a:	66 90                	xchg   ax,ax
c001473c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014744:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001474c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014750:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014754:	7d 5a                	jge    c00147b0 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014756:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001475a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001475e:	01 d0                	add    eax,edx
c0014760:	8a 00                	mov    al,BYTE PTR [eax]
c0014762:	0f b6 c0             	movzx  eax,al
c0014765:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014769:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014771:	8d 76 00             	lea    esi,[esi+0x0]
c0014774:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014779:	7f 2d                	jg     c00147a8 <Net::crc32Calc(unsigned char*, int)+0x90>
c001477b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001477f:	83 e0 01             	and    eax,0x1
c0014782:	74 10                	je     c0014794 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014788:	d1 e8                	shr    eax,1
c001478a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001478f:	eb 0b                	jmp    c001479c <Net::crc32Calc(unsigned char*, int)+0x84>
c0014791:	8d 76 00             	lea    esi,[esi+0x0]
c0014794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014798:	d1 e8                	shr    eax,1
c001479a:	66 90                	xchg   ax,ax
c001479c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147a4:	eb ce                	jmp    c0014774 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00147a6:	66 90                	xchg   ax,ax
c00147a8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147ac:	eb 9e                	jmp    c001474c <Net::crc32Calc(unsigned char*, int)+0x34>
c00147ae:	66 90                	xchg   ax,ax
c00147b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147b4:	f7 d0                	not    eax
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	83 c4 10             	add    esp,0x10
c00147bb:	c3                   	ret    

c00147bc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147bc:	57                   	push   edi
c00147bd:	56                   	push   esi
c00147be:	53                   	push   ebx
c00147bf:	83 ec 60             	sub    esp,0x60
c00147c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147c9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147cd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147d5:	8d 76 00             	lea    esi,[esi+0x0]
c00147d8:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147dd:	7f 1d                	jg     c00147fc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147df:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147e6:	8d 50 01             	lea    edx,[eax+0x1]
c00147e9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147f0:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147f3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147f7:	eb df                	jmp    c00147d8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014803:	8d 50 01             	lea    edx,[eax+0x1]
c0014806:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001480d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014810:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014817:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001481b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001481f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014823:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001482b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001482f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001483b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001483f:	89 c6                	mov    esi,eax
c0014841:	89 d7                	mov    edi,edx
c0014843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014845:	89 c8                	mov    eax,ecx
c0014847:	89 fa                	mov    edx,edi
c0014849:	89 f3                	mov    ebx,esi
c001484b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001484f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014853:	89 04 24             	mov    DWORD PTR [esp],eax
c0014856:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001485e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014865:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014869:	8d 44 24 78          	lea    eax,[esp+0x78]
c001486d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014871:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001487d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014889:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001488d:	89 c6                	mov    esi,eax
c001488f:	89 d7                	mov    edi,edx
c0014891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014893:	89 c8                	mov    eax,ecx
c0014895:	89 fa                	mov    edx,edi
c0014897:	89 f3                	mov    ebx,esi
c0014899:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001489d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00148a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00148b4:	0f b7 c0             	movzx  eax,ax
c00148b7:	c1 f8 08             	sar    eax,0x8
c00148ba:	89 c1                	mov    ecx,eax
c00148bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c3:	8d 50 01             	lea    edx,[eax+0x1]
c00148c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148cd:	88 ca                	mov    dl,cl
c00148cf:	88 10                	mov    BYTE PTR [eax],dl
c00148d1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148df:	8d 48 01             	lea    ecx,[eax+0x1]
c00148e2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148e9:	88 10                	mov    BYTE PTR [eax],dl
c00148eb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148ef:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148f3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148fa:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00148fe:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014902:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014906:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001490a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001490e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014912:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014916:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001491a:	89 c6                	mov    esi,eax
c001491c:	89 d7                	mov    edi,edx
c001491e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014920:	89 c8                	mov    eax,ecx
c0014922:	89 fa                	mov    edx,edi
c0014924:	89 f3                	mov    ebx,esi
c0014926:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001492a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001492e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014932:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014936:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001493d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014944:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014948:	50                   	push   eax
c0014949:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001494d:	e8 c6 fd ff ff       	call   c0014718 <Net::crc32Calc(unsigned char*, int)>
c0014952:	83 c4 08             	add    esp,0x8
c0014955:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014959:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001495d:	c1 e8 18             	shr    eax,0x18
c0014960:	89 c1                	mov    ecx,eax
c0014962:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014969:	8d 50 01             	lea    edx,[eax+0x1]
c001496c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014973:	88 ca                	mov    dl,cl
c0014975:	88 10                	mov    BYTE PTR [eax],dl
c0014977:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001497b:	c1 e8 10             	shr    eax,0x10
c001497e:	89 c1                	mov    ecx,eax
c0014980:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014987:	8d 50 01             	lea    edx,[eax+0x1]
c001498a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014991:	88 ca                	mov    dl,cl
c0014993:	88 10                	mov    BYTE PTR [eax],dl
c0014995:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014999:	c1 e8 08             	shr    eax,0x8
c001499c:	89 c1                	mov    ecx,eax
c001499e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149a5:	8d 50 01             	lea    edx,[eax+0x1]
c00149a8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149af:	88 ca                	mov    dl,cl
c00149b1:	88 10                	mov    BYTE PTR [eax],dl
c00149b3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149ba:	8d 50 01             	lea    edx,[eax+0x1]
c00149bd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149c4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149c8:	88 10                	mov    BYTE PTR [eax],dl
c00149ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149ce:	83 c4 60             	add    esp,0x60
c00149d1:	5b                   	pop    ebx
c00149d2:	5e                   	pop    esi
c00149d3:	5f                   	pop    edi
c00149d4:	c3                   	ret    
c00149d5:	8d 76 00             	lea    esi,[esi+0x0]

c00149d8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149d8:	57                   	push   edi
c00149d9:	56                   	push   esi
c00149da:	53                   	push   ebx
c00149db:	83 ec 70             	sub    esp,0x70
c00149de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149e5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149e9:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149f1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149f8:	83 c0 0e             	add    eax,0xe
c00149fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149ff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a0a:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a1e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a22:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a26:	89 c6                	mov    esi,eax
c0014a28:	89 d7                	mov    edi,edx
c0014a2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a2c:	89 c8                	mov    eax,ecx
c0014a2e:	89 fa                	mov    edx,edi
c0014a30:	89 f3                	mov    ebx,esi
c0014a32:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a36:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a3e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a46:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a4d:	83 c0 08             	add    eax,0x8
c0014a50:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a5b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a5f:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a6f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a73:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a77:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a7b:	89 c6                	mov    esi,eax
c0014a7d:	89 d7                	mov    edi,edx
c0014a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a81:	89 c8                	mov    eax,ecx
c0014a83:	89 fa                	mov    edx,edi
c0014a85:	89 f3                	mov    ebx,esi
c0014a87:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a8b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a93:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a9b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aa2:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014aac:	8a 00                	mov    al,BYTE PTR [eax]
c0014aae:	0f b6 c0             	movzx  eax,al
c0014ab1:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014ab6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014abd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac9:	0f b6 c0             	movzx  eax,al
c0014acc:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ad1:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014ad6:	c1 e0 08             	shl    eax,0x8
c0014ad9:	89 c2                	mov    edx,eax
c0014adb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014adf:	09 d0                	or     eax,edx
c0014ae1:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014ae8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014aec:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014af4:	75 46                	jne    c0014b3c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014af6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014afd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b00:	66 3d dc 05          	cmp    ax,0x5dc
c0014b04:	77 16                	ja     c0014b1c <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b06:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b0d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b10:	0f b7 c0             	movzx  eax,ax
c0014b13:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b1a:	eb 20                	jmp    c0014b3c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b1c:	83 ec 0c             	sub    esp,0xc
c0014b1f:	68 78 44 02 c0       	push   0xc0024478
c0014b24:	e8 3b 7f ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0014b29:	83 c4 10             	add    esp,0x10
c0014b2c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b33:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b37:	e9 18 01 00 00       	jmp    c0014c54 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b3c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b43:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b4a:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b73:	89 c6                	mov    esi,eax
c0014b75:	89 d7                	mov    edi,edx
c0014b77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b79:	89 c8                	mov    eax,ecx
c0014b7b:	89 fa                	mov    edx,edi
c0014b7d:	89 f3                	mov    ebx,esi
c0014b7f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b87:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b8a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b91:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b98:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ba9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bab:	0f b6 c0             	movzx  eax,al
c0014bae:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014bb2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bb9:	8d 50 01             	lea    edx,[eax+0x1]
c0014bbc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc5:	0f b6 c0             	movzx  eax,al
c0014bc8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bcc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdf:	0f b6 c0             	movzx  eax,al
c0014be2:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014be6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bed:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bf7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf9:	0f b6 c0             	movzx  eax,al
c0014bfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c00:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c04:	c1 e0 18             	shl    eax,0x18
c0014c07:	89 c2                	mov    edx,eax
c0014c09:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c0d:	c1 e0 10             	shl    eax,0x10
c0014c10:	09 c2                	or     edx,eax
c0014c12:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c16:	c1 e0 08             	shl    eax,0x8
c0014c19:	09 d0                	or     eax,edx
c0014c1b:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c1f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c23:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c2a:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c2e:	83 e8 04             	sub    eax,0x4
c0014c31:	83 ec 08             	sub    esp,0x8
c0014c34:	50                   	push   eax
c0014c35:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c39:	e8 da fa ff ff       	call   c0014718 <Net::crc32Calc(unsigned char*, int)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c45:	0f 94 c2             	sete   dl
c0014c48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c4f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c52:	90                   	nop
c0014c53:	90                   	nop
c0014c54:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c5b:	83 c4 70             	add    esp,0x70
c0014c5e:	5b                   	pop    ebx
c0014c5f:	5e                   	pop    esi
c0014c60:	5f                   	pop    edi
c0014c61:	c2 04 00             	ret    0x4

c0014c64 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c64:	55                   	push   ebp
c0014c65:	57                   	push   edi
c0014c66:	56                   	push   esi
c0014c67:	53                   	push   ebx
c0014c68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c6e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c75:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c77:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c7a:	80 fb 40             	cmp    bl,0x40
c0014c7d:	75 1b                	jne    c0014c9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c7f:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c81:	84 d2                	test   dl,dl
c0014c83:	0f 84 f1 00 00 00    	je     c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c89:	8d 46 01             	lea    eax,[esi+0x1]
c0014c8c:	80 fa 3a             	cmp    dl,0x3a
c0014c8f:	74 04                	je     c0014c95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c91:	89 c6                	mov    esi,eax
c0014c93:	eb ea                	jmp    c0014c7f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c95:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c98:	89 c6                	mov    esi,eax
c0014c9a:	50                   	push   eax
c0014c9b:	6a 40                	push   0x40
c0014c9d:	6a 00                	push   0x0
c0014c9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014ca3:	50                   	push   eax
c0014ca4:	e8 db b9 fe ff       	call   c0000684 <memset>
c0014ca9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cb0:	31 c0                	xor    eax,eax
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cb7:	84 c9                	test   cl,cl
c0014cb9:	0f 84 bb 00 00 00    	je     c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cbf:	3d c7 00 00 00       	cmp    eax,0xc7
c0014cc4:	0f 8f b0 00 00 00    	jg     c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cca:	80 f9 0a             	cmp    cl,0xa
c0014ccd:	0f 85 98 00 00 00    	jne    c0014d6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cd3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cd8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cdc:	a8 df                	test   al,0xdf
c0014cde:	0f 94 c1             	sete   cl
c0014ce1:	3c 23                	cmp    al,0x23
c0014ce3:	0f 94 c2             	sete   dl
c0014ce6:	08 d1                	or     cl,dl
c0014ce8:	75 4a                	jne    c0014d34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cea:	8d 50 f7             	lea    edx,[eax-0x9]
c0014ced:	80 fa 01             	cmp    dl,0x1
c0014cf0:	76 42                	jbe    c0014d34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cf2:	3c 5b                	cmp    al,0x5b
c0014cf4:	75 42                	jne    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cf6:	80 fb 40             	cmp    bl,0x40
c0014cf9:	75 39                	jne    c0014d34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cfb:	83 ec 0c             	sub    esp,0xc
c0014cfe:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d02:	52                   	push   edx
c0014d03:	e8 98 b9 fe ff       	call   c00006a0 <strlen>
c0014d08:	83 c4 10             	add    esp,0x10
c0014d0b:	83 f8 3f             	cmp    eax,0x3f
c0014d0e:	77 6a                	ja     c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d10:	50                   	push   eax
c0014d11:	50                   	push   eax
c0014d12:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d16:	52                   	push   edx
c0014d17:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d1b:	52                   	push   edx
c0014d1c:	e8 1f ba fe ff       	call   c0000740 <strcpy>
c0014d21:	58                   	pop    eax
c0014d22:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d26:	52                   	push   edx
c0014d27:	e8 74 b9 fe ff       	call   c00006a0 <strlen>
c0014d2c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	eb 3a                	jmp    c0014d72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d38:	80 fb 40             	cmp    bl,0x40
c0014d3b:	74 06                	je     c0014d43 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d3d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d41:	eb 20                	jmp    c0014d63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d43:	50                   	push   eax
c0014d44:	50                   	push   eax
c0014d45:	55                   	push   ebp
c0014d46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d4a:	50                   	push   eax
c0014d4b:	e8 7c ba fe ff       	call   c00007cc <strcmp>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	85 c0                	test   eax,eax
c0014d55:	75 dd                	jne    c0014d34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d57:	eb e4                	jmp    c0014d3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d59:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5c:	80 f9 3d             	cmp    cl,0x3d
c0014d5f:	74 1d                	je     c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d61:	89 d0                	mov    eax,edx
c0014d63:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d65:	84 c9                	test   cl,cl
c0014d67:	75 f0                	jne    c0014d59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d69:	eb 0f                	jmp    c0014d7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d72:	47                   	inc    edi
c0014d73:	89 d0                	mov    eax,edx
c0014d75:	e9 3b ff ff ff       	jmp    c0014cb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d7a:	31 c0                	xor    eax,eax
c0014d7c:	eb 33                	jmp    c0014db1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d82:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d85:	50                   	push   eax
c0014d86:	50                   	push   eax
c0014d87:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d8b:	50                   	push   eax
c0014d8c:	56                   	push   esi
c0014d8d:	e8 3a ba fe ff       	call   c00007cc <strcmp>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	85 c0                	test   eax,eax
c0014d97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d9b:	75 97                	jne    c0014d34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d9d:	51                   	push   ecx
c0014d9e:	51                   	push   ecx
c0014d9f:	52                   	push   edx
c0014da0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014da7:	e8 94 b9 fe ff       	call   c0000740 <strcpy>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	b0 01                	mov    al,0x1
c0014db1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014db7:	5b                   	pop    ebx
c0014db8:	5e                   	pop    esi
c0014db9:	5f                   	pop    edi
c0014dba:	5d                   	pop    ebp
c0014dbb:	c3                   	ret    

c0014dbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dbc:	57                   	push   edi
c0014dbd:	56                   	push   esi
c0014dbe:	53                   	push   ebx
c0014dbf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014dc5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014dcc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014dd3:	53                   	push   ebx
c0014dd4:	e8 c7 b8 fe ff       	call   c00006a0 <strlen>
c0014dd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ddc:	89 c7                	mov    edi,eax
c0014dde:	e8 bd b8 fe ff       	call   c00006a0 <strlen>
c0014de3:	83 c4 10             	add    esp,0x10
c0014de6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dea:	3d ff 00 00 00       	cmp    eax,0xff
c0014def:	0f 87 d3 00 00 00    	ja     c0014ec8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014df5:	57                   	push   edi
c0014df6:	57                   	push   edi
c0014df7:	56                   	push   esi
c0014df8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014dfc:	56                   	push   esi
c0014dfd:	e8 3e b9 fe ff       	call   c0000740 <strcpy>
c0014e02:	58                   	pop    eax
c0014e03:	5a                   	pop    edx
c0014e04:	68 1a 48 02 c0       	push   0xc002481a
c0014e09:	56                   	push   esi
c0014e0a:	e8 71 ba fe ff       	call   c0000880 <strcat>
c0014e0f:	59                   	pop    ecx
c0014e10:	5f                   	pop    edi
c0014e11:	53                   	push   ebx
c0014e12:	56                   	push   esi
c0014e13:	e8 68 ba fe ff       	call   c0000880 <strcat>
c0014e18:	58                   	pop    eax
c0014e19:	5a                   	pop    edx
c0014e1a:	68 c4 44 02 c0       	push   0xc00244c4
c0014e1f:	56                   	push   esi
c0014e20:	e8 5b ba fe ff       	call   c0000880 <strcat>
c0014e25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e2c:	e8 92 4b ff ff       	call   c00099c3 <malloc>
c0014e31:	83 c4 0c             	add    esp,0xc
c0014e34:	89 c3                	mov    ebx,eax
c0014e36:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0014e3c:	56                   	push   esi
c0014e3d:	50                   	push   eax
c0014e3e:	e8 8b 81 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0014e43:	83 c4 10             	add    esp,0x10
c0014e46:	85 db                	test   ebx,ebx
c0014e48:	74 7e                	je     c0014ec8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e4a:	51                   	push   ecx
c0014e4b:	51                   	push   ecx
c0014e4c:	6a 01                	push   0x1
c0014e4e:	53                   	push   ebx
c0014e4f:	e8 de 81 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	85 c0                	test   eax,eax
c0014e59:	74 08                	je     c0014e63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e5b:	83 ec 0c             	sub    esp,0xc
c0014e5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e60:	53                   	push   ebx
c0014e61:	eb 5f                	jmp    c0014ec2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e63:	52                   	push   edx
c0014e64:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e68:	50                   	push   eax
c0014e69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e6d:	50                   	push   eax
c0014e6e:	53                   	push   ebx
c0014e6f:	e8 6a 84 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c0014e74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	89 c1                	mov    ecx,eax
c0014e7d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e81:	74 31                	je     c0014eb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e83:	83 ec 0c             	sub    esp,0xc
c0014e86:	50                   	push   eax
c0014e87:	e8 37 4b ff ff       	call   c00099c3 <malloc>
c0014e8c:	89 c6                	mov    esi,eax
c0014e8e:	58                   	pop    eax
c0014e8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e91:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e95:	52                   	push   edx
c0014e96:	56                   	push   esi
c0014e97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e9f:	53                   	push   ebx
c0014ea0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ea3:	83 c4 20             	add    esp,0x20
c0014ea6:	85 c0                	test   eax,eax
c0014ea8:	75 0a                	jne    c0014eb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eae:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014eb2:	74 18                	je     c0014ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014eb4:	83 ec 0c             	sub    esp,0xc
c0014eb7:	53                   	push   ebx
c0014eb8:	e8 d3 81 ff ff       	call   c000d090 <File::close()>
c0014ebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ebf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ec2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	31 c0                	xor    eax,eax
c0014eca:	eb 3b                	jmp    c0014f07 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	53                   	push   ebx
c0014ed0:	e8 bb 81 ff ff       	call   c000d090 <File::close()>
c0014ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ed7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014edd:	83 c4 0c             	add    esp,0xc
c0014ee0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ee7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014eee:	56                   	push   esi
c0014eef:	e8 70 fd ff ff       	call   c0014c64 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014ef4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ef7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014efb:	e8 d3 4a ff ff       	call   c00099d3 <free>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f07:	81 c4 20 01 00 00    	add    esp,0x120
c0014f0d:	5b                   	pop    ebx
c0014f0e:	5e                   	pop    esi
c0014f0f:	5f                   	pop    edi
c0014f10:	c3                   	ret    

c0014f11 <Reg::getLine(char*, char*, char*)>:
c0014f11:	57                   	push   edi
c0014f12:	56                   	push   esi
c0014f13:	53                   	push   ebx
c0014f14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f18:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f1c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f20:	57                   	push   edi
c0014f21:	56                   	push   esi
c0014f22:	53                   	push   ebx
c0014f23:	68 c9 44 02 c0       	push   0xc00244c9
c0014f28:	e8 8f fe ff ff       	call   c0014dbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f2d:	83 c4 10             	add    esp,0x10
c0014f30:	84 c0                	test   al,al
c0014f32:	75 10                	jne    c0014f44 <Reg::getLine(char*, char*, char*)+0x33>
c0014f34:	57                   	push   edi
c0014f35:	56                   	push   esi
c0014f36:	53                   	push   ebx
c0014f37:	68 ee 44 02 c0       	push   0xc00244ee
c0014f3c:	e8 7b fe ff ff       	call   c0014dbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	5b                   	pop    ebx
c0014f45:	5e                   	pop    esi
c0014f46:	5f                   	pop    edi
c0014f47:	c3                   	ret    

c0014f48 <Reg::readInt(char*, char*, int*)>:
c0014f48:	55                   	push   ebp
c0014f49:	57                   	push   edi
c0014f4a:	56                   	push   esi
c0014f4b:	53                   	push   ebx
c0014f4c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f52:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f56:	57                   	push   edi
c0014f57:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f5e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f65:	e8 a7 ff ff ff       	call   c0014f11 <Reg::getLine(char*, char*, char*)>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	84 c0                	test   al,al
c0014f6f:	0f 84 b3 00 00 00    	je     c0015028 <Reg::readInt(char*, char*, int*)+0xe0>
c0014f75:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f79:	80 fa 2b             	cmp    dl,0x2b
c0014f7c:	74 0c                	je     c0014f8a <Reg::readInt(char*, char*, int*)+0x42>
c0014f7e:	80 fa 2d             	cmp    dl,0x2d
c0014f81:	75 0e                	jne    c0014f91 <Reg::readInt(char*, char*, int*)+0x49>
c0014f83:	ba 01 00 00 00       	mov    edx,0x1
c0014f88:	eb 0b                	jmp    c0014f95 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f8a:	ba 01 00 00 00       	mov    edx,0x1
c0014f8f:	eb 02                	jmp    c0014f93 <Reg::readInt(char*, char*, int*)+0x4b>
c0014f91:	31 d2                	xor    edx,edx
c0014f93:	31 c0                	xor    eax,eax
c0014f95:	be 0a 00 00 00       	mov    esi,0xa
c0014f9a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014f9f:	75 20                	jne    c0014fc1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fa1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fa5:	80 f9 78             	cmp    cl,0x78
c0014fa8:	75 0a                	jne    c0014fb4 <Reg::readInt(char*, char*, int*)+0x6c>
c0014faa:	83 c2 02             	add    edx,0x2
c0014fad:	be 10 00 00 00       	mov    esi,0x10
c0014fb2:	eb 0d                	jmp    c0014fc1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fb4:	80 f9 62             	cmp    cl,0x62
c0014fb7:	75 08                	jne    c0014fc1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fb9:	83 c2 02             	add    edx,0x2
c0014fbc:	be 02 00 00 00       	mov    esi,0x2
c0014fc1:	01 d7                	add    edi,edx
c0014fc3:	31 d2                	xor    edx,edx
c0014fc5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fc7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fcb:	80 fb 0d             	cmp    bl,0xd
c0014fce:	0f 94 c3             	sete   bl
c0014fd1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fd6:	0f 94 c1             	sete   cl
c0014fd9:	08 cb                	or     bl,cl
c0014fdb:	75 3a                	jne    c0015017 <Reg::readInt(char*, char*, int*)+0xcf>
c0014fdd:	0f af d6             	imul   edx,esi
c0014fe0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fe5:	83 fe 10             	cmp    esi,0x10
c0014fe8:	75 26                	jne    c0015010 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fee:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014ff1:	89 e9                	mov    ecx,ebp
c0014ff3:	80 f9 05             	cmp    cl,0x5
c0014ff6:	77 06                	ja     c0014ffe <Reg::readInt(char*, char*, int*)+0xb6>
c0014ff8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014ffc:	eb 16                	jmp    c0015014 <Reg::readInt(char*, char*, int*)+0xcc>
c0014ffe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015002:	83 e9 61             	sub    ecx,0x61
c0015005:	80 f9 05             	cmp    cl,0x5
c0015008:	77 06                	ja     c0015010 <Reg::readInt(char*, char*, int*)+0xc8>
c001500a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001500e:	eb 04                	jmp    c0015014 <Reg::readInt(char*, char*, int*)+0xcc>
c0015010:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015014:	47                   	inc    edi
c0015015:	eb ae                	jmp    c0014fc5 <Reg::readInt(char*, char*, int*)+0x7d>
c0015017:	84 c0                	test   al,al
c0015019:	74 02                	je     c001501d <Reg::readInt(char*, char*, int*)+0xd5>
c001501b:	f7 da                	neg    edx
c001501d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015024:	89 10                	mov    DWORD PTR [eax],edx
c0015026:	88 d8                	mov    al,bl
c0015028:	81 c4 ec 00 00 00    	add    esp,0xec
c001502e:	5b                   	pop    ebx
c001502f:	5e                   	pop    esi
c0015030:	5f                   	pop    edi
c0015031:	5d                   	pop    ebp
c0015032:	c3                   	ret    

c0015033 <Reg::readString(char*, char*, char*, int)>:
c0015033:	57                   	push   edi
c0015034:	56                   	push   esi
c0015035:	53                   	push   ebx
c0015036:	81 ec d4 00 00 00    	sub    esp,0xd4
c001503c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015043:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015047:	57                   	push   edi
c0015048:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001504f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015056:	e8 b6 fe ff ff       	call   c0014f11 <Reg::getLine(char*, char*, char*)>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	89 c6                	mov    esi,eax
c0015060:	84 c0                	test   al,al
c0015062:	74 44                	je     c00150a8 <Reg::readString(char*, char*, char*, int)+0x75>
c0015064:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001506b:	31 c0                	xor    eax,eax
c001506d:	4a                   	dec    edx
c001506e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015071:	84 c9                	test   cl,cl
c0015073:	74 0f                	je     c0015084 <Reg::readString(char*, char*, char*, int)+0x51>
c0015075:	39 c2                	cmp    edx,eax
c0015077:	7e 0b                	jle    c0015084 <Reg::readString(char*, char*, char*, int)+0x51>
c0015079:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001507c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015081:	40                   	inc    eax
c0015082:	eb ea                	jmp    c001506e <Reg::readString(char*, char*, char*, int)+0x3b>
c0015084:	83 ec 0c             	sub    esp,0xc
c0015087:	53                   	push   ebx
c0015088:	e8 13 b6 fe ff       	call   c00006a0 <strlen>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015095:	75 11                	jne    c00150a8 <Reg::readString(char*, char*, char*, int)+0x75>
c0015097:	83 ec 0c             	sub    esp,0xc
c001509a:	53                   	push   ebx
c001509b:	e8 00 b6 fe ff       	call   c00006a0 <strlen>
c00150a0:	83 c4 10             	add    esp,0x10
c00150a3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150a8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150ae:	89 f0                	mov    eax,esi
c00150b0:	5b                   	pop    ebx
c00150b1:	5e                   	pop    esi
c00150b2:	5f                   	pop    edi
c00150b3:	c3                   	ret    

c00150b4 <Reg::readBool(char*, char*, bool*)>:
c00150b4:	83 ec 20             	sub    esp,0x20
c00150b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150bb:	50                   	push   eax
c00150bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c4:	e8 7f fe ff ff       	call   c0014f48 <Reg::readInt(char*, char*, int*)>
c00150c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150ce:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150d2:	0f 95 02             	setne  BYTE PTR [edx]
c00150d5:	83 c4 2c             	add    esp,0x2c
c00150d8:	c3                   	ret    

c00150d9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150d9:	53                   	push   ebx
c00150da:	83 ec 1c             	sub    esp,0x1c
c00150dd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150e1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150e5:	50                   	push   eax
c00150e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ee:	e8 c1 ff ff ff       	call   c00150b4 <Reg::readBool(char*, char*, bool*)>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	84 c0                	test   al,al
c00150f8:	74 04                	je     c00150fe <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150fa:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00150fe:	88 d8                	mov    al,bl
c0015100:	83 c4 18             	add    esp,0x18
c0015103:	5b                   	pop    ebx
c0015104:	c3                   	ret    

c0015105 <Reg::readIntWithDefault(char*, char*, int)>:
c0015105:	53                   	push   ebx
c0015106:	83 ec 1c             	sub    esp,0x1c
c0015109:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001510d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015111:	50                   	push   eax
c0015112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511a:	e8 29 fe ff ff       	call   c0014f48 <Reg::readInt(char*, char*, int*)>
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	84 c0                	test   al,al
c0015124:	74 04                	je     c001512a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015126:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001512a:	89 d8                	mov    eax,ebx
c001512c:	83 c4 18             	add    esp,0x18
c001512f:	5b                   	pop    ebx
c0015130:	c3                   	ret    

c0015131 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015131:	57                   	push   edi
c0015132:	56                   	push   esi
c0015133:	56                   	push   esi
c0015134:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015138:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001513c:	56                   	push   esi
c001513d:	57                   	push   edi
c001513e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015146:	e8 e8 fe ff ff       	call   c0015033 <Reg::readString(char*, char*, char*, int)>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	84 c0                	test   al,al
c0015150:	75 1a                	jne    c001516c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015152:	51                   	push   ecx
c0015153:	56                   	push   esi
c0015154:	6a 00                	push   0x0
c0015156:	57                   	push   edi
c0015157:	e8 28 b5 fe ff       	call   c0000684 <memset>
c001515c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001515f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015165:	83 c4 10             	add    esp,0x10
c0015168:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001516c:	89 f8                	mov    eax,edi
c001516e:	5a                   	pop    edx
c001516f:	5e                   	pop    esi
c0015170:	5f                   	pop    edi
c0015171:	c3                   	ret    

c0015172 <Sys::eject(regs*)>:
c0015172:	83 ec 0c             	sub    esp,0xc
c0015175:	83 ca ff             	or     edx,0xffffffff
c0015178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001517c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001517f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015184:	83 e9 41             	sub    ecx,0x41
c0015187:	83 f9 19             	cmp    ecx,0x19
c001518a:	77 18                	ja     c00151a4 <Sys::eject(regs*)+0x32>
c001518c:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c0015193:	85 c9                	test   ecx,ecx
c0015195:	74 0d                	je     c00151a4 <Sys::eject(regs*)+0x32>
c0015197:	83 ec 0c             	sub    esp,0xc
c001519a:	51                   	push   ecx
c001519b:	e8 76 af ff ff       	call   c0010116 <LogicalDisk::eject()>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	99                   	cdq    
c00151a4:	83 c4 0c             	add    esp,0xc
c00151a7:	c3                   	ret    

c00151a8 <Sys::exit(regs*)>:
c00151a8:	83 ec 18             	sub    esp,0x18
c00151ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151af:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151b2:	e8 59 36 00 00       	call   c0018810 <terminateTask(int)>
c00151b7:	83 c8 ff             	or     eax,0xffffffff
c00151ba:	83 c4 1c             	add    esp,0x1c
c00151bd:	89 c2                	mov    edx,eax
c00151bf:	c3                   	ret    

c00151c0 <Sys::getCwd(regs*)>:
c00151c0:	83 ec 10             	sub    esp,0x10
c00151c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151c7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151d5:	e8 f6 7b ff ff       	call   c000cdd0 <Fs::getcwd(Process*, char*, int)>
c00151da:	83 c4 1c             	add    esp,0x1c
c00151dd:	99                   	cdq    
c00151de:	c3                   	ret    

c00151df <Sys::getPID(regs*)>:
c00151df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e9:	99                   	cdq    
c00151ea:	c3                   	ret    

c00151eb <Sys::getRAMData(regs*)>:
c00151eb:	8b 0d 34 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026434
c00151f1:	69 05 30 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026430,0xc8
c00151fb:	99                   	cdq    
c00151fc:	f7 f9                	idiv   ecx
c00151fe:	c1 e0 18             	shl    eax,0x18
c0015201:	09 c8                	or     eax,ecx
c0015203:	99                   	cdq    
c0015204:	c3                   	ret    

c0015205 <Sys::getVGAPtr(regs*)>:
c0015205:	55                   	push   ebp
c0015206:	57                   	push   edi
c0015207:	56                   	push   esi
c0015208:	53                   	push   ebx
c0015209:	83 ec 18             	sub    esp,0x18
c001520c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015210:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015213:	e8 fc 30 00 00       	call   c0018314 <Thr::processFromPID(int)>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	89 c1                	mov    ecx,eax
c001521d:	b8 01 00 00 00       	mov    eax,0x1
c0015222:	85 c9                	test   ecx,ecx
c0015224:	74 59                	je     c001527f <Sys::getVGAPtr(regs*)+0x7a>
c0015226:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001522c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015230:	74 0c                	je     c001523e <Sys::getVGAPtr(regs*)+0x39>
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	53                   	push   ebx
c0015236:	e8 7e 55 ff ff       	call   c000a7b9 <setActiveTerminal(VgaText*)>
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015241:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015244:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015249:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001524b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001524e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015251:	81 c3 82 00 00 00    	add    ebx,0x82
c0015257:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001525d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015260:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015263:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015269:	50                   	push   eax
c001526a:	50                   	push   eax
c001526b:	53                   	push   ebx
c001526c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001526f:	05 a8 0f 00 00       	add    eax,0xfa8
c0015274:	50                   	push   eax
c0015275:	e8 c6 b4 fe ff       	call   c0000740 <strcpy>
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	31 c0                	xor    eax,eax
c001527f:	83 c4 0c             	add    esp,0xc
c0015282:	31 d2                	xor    edx,edx
c0015284:	5b                   	pop    ebx
c0015285:	5e                   	pop    esi
c0015286:	5f                   	pop    edi
c0015287:	5d                   	pop    ebp
c0015288:	c3                   	ret    

c0015289 <Sys::loadDLL(regs*)>:
c0015289:	56                   	push   esi
c001528a:	53                   	push   ebx
c001528b:	31 d2                	xor    edx,edx
c001528d:	51                   	push   ecx
c001528e:	b8 01 00 00 00       	mov    eax,0x1
c0015293:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015297:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001529b:	0f 84 8c 00 00 00    	je     c001532d <Sys::loadDLL(regs*)+0xa4>
c00152a1:	83 ec 0c             	sub    esp,0xc
c00152a4:	68 14 01 00 00       	push   0x114
c00152a9:	e8 15 47 ff ff       	call   c00099c3 <malloc>
c00152ae:	83 c4 0c             	add    esp,0xc
c00152b1:	89 c3                	mov    ebx,eax
c00152b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00152bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152be:	53                   	push   ebx
c00152bf:	e8 0a 7d ff ff       	call   c000cfce <File::File(char const*, Process*)>
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	31 d2                	xor    edx,edx
c00152c9:	b8 02 00 00 00       	mov    eax,0x2
c00152ce:	85 db                	test   ebx,ebx
c00152d0:	74 5b                	je     c001532d <Sys::loadDLL(regs*)+0xa4>
c00152d2:	83 ec 0c             	sub    esp,0xc
c00152d5:	53                   	push   ebx
c00152d6:	e8 c5 7f ff ff       	call   c000d2a0 <File::exists()>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	84 c0                	test   al,al
c00152e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152e2:	75 11                	jne    c00152f5 <Sys::loadDLL(regs*)+0x6c>
c00152e4:	83 ec 0c             	sub    esp,0xc
c00152e7:	53                   	push   ebx
c00152e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	b8 03 00 00 00       	mov    eax,0x3
c00152f3:	eb 36                	jmp    c001532b <Sys::loadDLL(regs*)+0xa2>
c00152f5:	83 ec 0c             	sub    esp,0xc
c00152f8:	53                   	push   ebx
c00152f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152fc:	58                   	pop    eax
c00152fd:	5a                   	pop    edx
c00152fe:	6a 00                	push   0x0
c0015300:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015303:	e8 0a 22 00 00       	call   c0017512 <Thr::loadDLL(char const*, bool)>
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	89 c1                	mov    ecx,eax
c001530d:	31 d2                	xor    edx,edx
c001530f:	b8 04 00 00 00       	mov    eax,0x4
c0015314:	85 c9                	test   ecx,ecx
c0015316:	74 15                	je     c001532d <Sys::loadDLL(regs*)+0xa4>
c0015318:	53                   	push   ebx
c0015319:	53                   	push   ebx
c001531a:	ff 35 e8 63 02 c0    	push   DWORD PTR ds:0xc00263e8
c0015320:	51                   	push   ecx
c0015321:	e8 1d 24 00 00       	call   c0017743 <Thr::executeDLL(unsigned long, void*)>
c0015326:	83 c4 10             	add    esp,0x10
c0015329:	31 c0                	xor    eax,eax
c001532b:	31 d2                	xor    edx,edx
c001532d:	59                   	pop    ecx
c001532e:	5b                   	pop    ebx
c001532f:	5e                   	pop    esi
c0015330:	c3                   	ret    

c0015331 <Sys::read(regs*)>:
c0015331:	57                   	push   edi
c0015332:	56                   	push   esi
c0015333:	53                   	push   ebx
c0015334:	83 ec 10             	sub    esp,0x10
c0015337:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001533b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001533e:	83 f8 02             	cmp    eax,0x2
c0015341:	77 10                	ja     c0015353 <Sys::read(regs*)+0x22>
c0015343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015348:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001534b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015351:	eb 0e                	jmp    c0015361 <Sys::read(regs*)+0x30>
c0015353:	83 ec 0c             	sub    esp,0xc
c0015356:	50                   	push   eax
c0015357:	e8 d7 61 ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	89 c1                	mov    ecx,eax
c0015361:	83 c8 ff             	or     eax,0xffffffff
c0015364:	85 c9                	test   ecx,ecx
c0015366:	89 c2                	mov    edx,eax
c0015368:	74 28                	je     c0015392 <Sys::read(regs*)+0x61>
c001536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015372:	31 ff                	xor    edi,edi
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015379:	8d 54 24 18          	lea    edx,[esp+0x18]
c001537d:	52                   	push   edx
c001537e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015381:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015384:	57                   	push   edi
c0015385:	56                   	push   esi
c0015386:	51                   	push   ecx
c0015387:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001538a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001538e:	83 c4 20             	add    esp,0x20
c0015391:	99                   	cdq    
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	5b                   	pop    ebx
c0015396:	5e                   	pop    esi
c0015397:	5f                   	pop    edi
c0015398:	c3                   	ret    

c0015399 <Sys::sbrk(regs*)>:
c0015399:	56                   	push   esi
c001539a:	53                   	push   ebx
c001539b:	50                   	push   eax
c001539c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153a8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00153ab:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00153b1:	85 db                	test   ebx,ebx
c00153b3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00153b6:	74 02                	je     c00153ba <Sys::sbrk(regs*)+0x21>
c00153b8:	79 06                	jns    c00153c0 <Sys::sbrk(regs*)+0x27>
c00153ba:	89 f0                	mov    eax,esi
c00153bc:	31 d2                	xor    edx,edx
c00153be:	eb 2a                	jmp    c00153ea <Sys::sbrk(regs*)+0x51>
c00153c0:	83 c8 ff             	or     eax,0xffffffff
c00153c3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153c9:	89 c2                	mov    edx,eax
c00153cb:	77 1d                	ja     c00153ea <Sys::sbrk(regs*)+0x51>
c00153cd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153d3:	50                   	push   eax
c00153d4:	c1 ea 0c             	shr    edx,0xc
c00153d7:	68 07 0c 00 00       	push   0xc07
c00153dc:	52                   	push   edx
c00153dd:	51                   	push   ecx
c00153de:	e8 4f 6a ff ff       	call   c000be32 <VAS::allocatePages(int, int)>
c00153e3:	89 f0                	mov    eax,esi
c00153e5:	31 d2                	xor    edx,edx
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	59                   	pop    ecx
c00153eb:	5b                   	pop    ebx
c00153ec:	5e                   	pop    esi
c00153ed:	c3                   	ret    

c00153ee <Sys::setCwd(regs*)>:
c00153ee:	83 ec 14             	sub    esp,0x14
c00153f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153fd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015400:	e8 3a 7f ff ff       	call   c000d33f <Fs::setcwd(Process*, char*)>
c0015405:	83 c4 1c             	add    esp,0x1c
c0015408:	99                   	cdq    
c0015409:	c3                   	ret    

c001540a <Sys::setTime(regs*)>:
c001540a:	55                   	push   ebp
c001540b:	31 c9                	xor    ecx,ecx
c001540d:	57                   	push   edi
c001540e:	bd 0c 00 00 00       	mov    ebp,0xc
c0015413:	56                   	push   esi
c0015414:	53                   	push   ebx
c0015415:	31 db                	xor    ebx,ebx
c0015417:	83 ec 10             	sub    esp,0x10
c001541a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001541e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015421:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015424:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015427:	89 c2                	mov    edx,eax
c0015429:	66 81 ef 6c 07       	sub    di,0x76c
c001542e:	83 e2 1f             	and    edx,0x1f
c0015431:	c1 e7 10             	shl    edi,0x10
c0015434:	42                   	inc    edx
c0015435:	c1 e8 05             	shr    eax,0x5
c0015438:	88 d1                	mov    cl,dl
c001543a:	31 d2                	xor    edx,edx
c001543c:	f7 f5                	div    ebp
c001543e:	89 dd                	mov    ebp,ebx
c0015440:	88 d5                	mov    ch,dl
c0015442:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015448:	0f b7 c1             	movzx  eax,cx
c001544b:	31 d2                	xor    edx,edx
c001544d:	09 f8                	or     eax,edi
c001544f:	bf 3c 00 00 00       	mov    edi,0x3c
c0015454:	89 c1                	mov    ecx,eax
c0015456:	89 f0                	mov    eax,esi
c0015458:	f7 f7                	div    edi
c001545a:	c1 e2 10             	shl    edx,0x10
c001545d:	09 d5                	or     ebp,edx
c001545f:	31 d2                	xor    edx,edx
c0015461:	89 eb                	mov    ebx,ebp
c0015463:	f7 f7                	div    edi
c0015465:	bf 10 0e 00 00       	mov    edi,0xe10
c001546a:	88 d7                	mov    bh,dl
c001546c:	89 f0                	mov    eax,esi
c001546e:	31 d2                	xor    edx,edx
c0015470:	f7 f7                	div    edi
c0015472:	bf 18 00 00 00       	mov    edi,0x18
c0015477:	31 d2                	xor    edx,edx
c0015479:	f7 f7                	div    edi
c001547b:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0015480:	88 d3                	mov    bl,dl
c0015482:	53                   	push   ebx
c0015483:	51                   	push   ecx
c0015484:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001548a:	e8 fb 86 ff ff       	call   c000db8a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001548f:	83 c4 1c             	add    esp,0x1c
c0015492:	83 f0 01             	xor    eax,0x1
c0015495:	5b                   	pop    ebx
c0015496:	0f b6 c0             	movzx  eax,al
c0015499:	5e                   	pop    esi
c001549a:	31 d2                	xor    edx,edx
c001549c:	5f                   	pop    edi
c001549d:	5d                   	pop    ebp
c001549e:	c3                   	ret    

c001549f <Sys::timezone(regs*)>:
c001549f:	53                   	push   ebx
c00154a0:	83 ec 08             	sub    esp,0x8
c00154a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154a7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00154ab:	75 17                	jne    c00154c4 <Sys::timezone(regs*)+0x25>
c00154ad:	83 ec 0c             	sub    esp,0xc
c00154b0:	68 09 45 02 c0       	push   0xc0024509
c00154b5:	e8 aa 75 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00154ba:	83 c8 ff             	or     eax,0xffffffff
c00154bd:	83 c4 10             	add    esp,0x10
c00154c0:	89 c2                	mov    edx,eax
c00154c2:	eb 20                	jmp    c00154e4 <Sys::timezone(regs*)+0x45>
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 1e 45 02 c0       	push   0xc002451e
c00154cc:	e8 93 75 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00154d1:	58                   	pop    eax
c00154d2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154d5:	e8 12 84 ff ff       	call   c000d8ec <User::loadClockSettings(int)>
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	b8 01 00 00 00       	mov    eax,0x1
c00154e2:	31 d2                	xor    edx,edx
c00154e4:	83 c4 08             	add    esp,0x8
c00154e7:	5b                   	pop    ebx
c00154e8:	c3                   	ret    

c00154e9 <Sys::write(regs*)>:
c00154e9:	57                   	push   edi
c00154ea:	56                   	push   esi
c00154eb:	53                   	push   ebx
c00154ec:	83 ec 10             	sub    esp,0x10
c00154ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154f6:	83 f8 02             	cmp    eax,0x2
c00154f9:	77 10                	ja     c001550b <Sys::write(regs*)+0x22>
c00154fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015500:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015503:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015509:	eb 0e                	jmp    c0015519 <Sys::write(regs*)+0x30>
c001550b:	83 ec 0c             	sub    esp,0xc
c001550e:	50                   	push   eax
c001550f:	e8 1f 60 ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	89 c1                	mov    ecx,eax
c0015519:	83 c8 ff             	or     eax,0xffffffff
c001551c:	85 c9                	test   ecx,ecx
c001551e:	89 c2                	mov    edx,eax
c0015520:	74 28                	je     c001554a <Sys::write(regs*)+0x61>
c0015522:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001552a:	31 ff                	xor    edi,edi
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015531:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015535:	52                   	push   edx
c0015536:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015539:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001553c:	57                   	push   edi
c001553d:	56                   	push   esi
c001553e:	51                   	push   ecx
c001553f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015542:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015546:	83 c4 20             	add    esp,0x20
c0015549:	99                   	cdq    
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	5b                   	pop    ebx
c001554e:	5e                   	pop    esi
c001554f:	5f                   	pop    edi
c0015550:	c3                   	ret    

c0015551 <Sys::wsbe(regs*)>:
c0015551:	57                   	push   edi
c0015552:	b9 0b 00 00 00       	mov    ecx,0xb
c0015557:	56                   	push   esi
c0015558:	be 5d 45 02 c0       	mov    esi,0xc002455d
c001555d:	53                   	push   ebx
c001555e:	83 ec 30             	sub    esp,0x30
c0015561:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015565:	fc                   	cld    
c0015566:	83 ec 0c             	sub    esp,0xc
c0015569:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001556b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001556f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015574:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015577:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001557d:	8b 06                	mov    eax,DWORD PTR [esi]
c001557f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015582:	57                   	push   edi
c0015583:	e8 18 b1 fe ff       	call   c00006a0 <strlen>
c0015588:	5a                   	pop    edx
c0015589:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001558d:	52                   	push   edx
c001558e:	31 d2                	xor    edx,edx
c0015590:	57                   	push   edi
c0015591:	52                   	push   edx
c0015592:	50                   	push   eax
c0015593:	56                   	push   esi
c0015594:	ff d3                	call   ebx
c0015596:	83 c4 14             	add    esp,0x14
c0015599:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001559d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155a0:	e8 6b 32 00 00       	call   c0018810 <terminateTask(int)>
c00155a5:	83 c4 40             	add    esp,0x40
c00155a8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00155ad:	5b                   	pop    ebx
c00155ae:	31 d2                	xor    edx,edx
c00155b0:	5e                   	pop    esi
c00155b1:	5f                   	pop    edi
c00155b2:	c3                   	ret    

c00155b3 <Sys::yield(regs*)>:
c00155b3:	83 ec 0c             	sub    esp,0xc
c00155b6:	fa                   	cli    
c00155b7:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00155bd:	e8 36 29 00 00       	call   c0017ef8 <schedule()>
c00155c2:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00155c7:	48                   	dec    eax
c00155c8:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00155cd:	75 01                	jne    c00155d0 <Sys::yield(regs*)+0x1d>
c00155cf:	fb                   	sti    
c00155d0:	8b 15 4c 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a4c
c00155d6:	83 c4 0c             	add    esp,0xc
c00155d9:	89 d0                	mov    eax,edx
c00155db:	c1 ea 11             	shr    edx,0x11
c00155de:	c1 e0 07             	shl    eax,0x7
c00155e1:	25 80 30 0f 00       	and    eax,0xf3080
c00155e6:	31 d0                	xor    eax,edx
c00155e8:	31 d2                	xor    edx,edx
c00155ea:	c3                   	ret    

c00155eb <sysCallSeekDir(regs*)>:
c00155eb:	31 c0                	xor    eax,eax
c00155ed:	31 d2                	xor    edx,edx
c00155ef:	c3                   	ret    

c00155f0 <sysCallTellDir(regs*)>:
c00155f0:	31 c0                	xor    eax,eax
c00155f2:	31 d2                	xor    edx,edx
c00155f4:	c3                   	ret    

c00155f5 <sysCallVerify(regs*)>:
c00155f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155f9:	31 d2                	xor    edx,edx
c00155fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155fe:	c3                   	ret    

c00155ff <sysCallGetArgc(regs*)>:
c00155ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015604:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015607:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001560d:	99                   	cdq    
c001560e:	c3                   	ret    

c001560f <sysFormatDisk(regs*)>:
c001560f:	56                   	push   esi
c0015610:	53                   	push   ebx
c0015611:	53                   	push   ebx
c0015612:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015616:	8b 1d 54 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026554
c001561c:	eb 25                	jmp    c0015643 <sysFormatDisk(regs*)+0x34>
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015624:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015626:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015629:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001562c:	50                   	push   eax
c001562d:	ff 34 85 e0 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd9620]
c0015634:	53                   	push   ebx
c0015635:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015638:	83 c4 20             	add    esp,0x20
c001563b:	83 f8 08             	cmp    eax,0x8
c001563e:	75 12                	jne    c0015652 <sysFormatDisk(regs*)+0x43>
c0015640:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015643:	85 db                	test   ebx,ebx
c0015645:	75 d7                	jne    c001561e <sysFormatDisk(regs*)+0xf>
c0015647:	59                   	pop    ecx
c0015648:	b8 03 00 00 00       	mov    eax,0x3
c001564d:	31 d2                	xor    edx,edx
c001564f:	5b                   	pop    ebx
c0015650:	5e                   	pop    esi
c0015651:	c3                   	ret    
c0015652:	85 c0                	test   eax,eax
c0015654:	74 1b                	je     c0015671 <sysFormatDisk(regs*)+0x62>
c0015656:	83 f8 09             	cmp    eax,0x9
c0015659:	74 0b                	je     c0015666 <sysFormatDisk(regs*)+0x57>
c001565b:	59                   	pop    ecx
c001565c:	b8 02 00 00 00       	mov    eax,0x2
c0015661:	31 d2                	xor    edx,edx
c0015663:	5b                   	pop    ebx
c0015664:	5e                   	pop    esi
c0015665:	c3                   	ret    
c0015666:	59                   	pop    ecx
c0015667:	b8 01 00 00 00       	mov    eax,0x1
c001566c:	31 d2                	xor    edx,edx
c001566e:	5b                   	pop    ebx
c001566f:	5e                   	pop    esi
c0015670:	c3                   	ret    
c0015671:	59                   	pop    ecx
c0015672:	31 c0                	xor    eax,eax
c0015674:	31 d2                	xor    edx,edx
c0015676:	5b                   	pop    ebx
c0015677:	5e                   	pop    esi
c0015678:	c3                   	ret    

c0015679 <sysSetDiskVolumeLabel(regs*)>:
c0015679:	56                   	push   esi
c001567a:	53                   	push   ebx
c001567b:	53                   	push   ebx
c001567c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015680:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015683:	83 f8 19             	cmp    eax,0x19
c0015686:	77 2d                	ja     c00156b5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015688:	8b 0c 85 e0 69 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9620]
c001568f:	85 c9                	test   ecx,ecx
c0015691:	74 22                	je     c00156b5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015693:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015696:	85 db                	test   ebx,ebx
c0015698:	74 1b                	je     c00156b5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001569a:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00156a0:	85 d2                	test   edx,edx
c00156a2:	74 11                	je     c00156b5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156a4:	8b 32                	mov    esi,DWORD PTR [edx]
c00156a6:	53                   	push   ebx
c00156a7:	50                   	push   eax
c00156a8:	51                   	push   ecx
c00156a9:	52                   	push   edx
c00156aa:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	99                   	cdq    
c00156b1:	59                   	pop    ecx
c00156b2:	5b                   	pop    ebx
c00156b3:	5e                   	pop    esi
c00156b4:	c3                   	ret    
c00156b5:	59                   	pop    ecx
c00156b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156c0:	5b                   	pop    ebx
c00156c1:	5e                   	pop    esi
c00156c2:	c3                   	ret    

c00156c3 <sysGetDiskVolumeLabel(regs*)>:
c00156c3:	57                   	push   edi
c00156c4:	56                   	push   esi
c00156c5:	53                   	push   ebx
c00156c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156cd:	83 fa 19             	cmp    edx,0x19
c00156d0:	77 38                	ja     c001570a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156d2:	8b 0c 95 e0 69 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9620]
c00156d9:	85 c9                	test   ecx,ecx
c00156db:	74 2d                	je     c001570a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156dd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156e0:	85 db                	test   ebx,ebx
c00156e2:	74 26                	je     c001570a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156e7:	85 f6                	test   esi,esi
c00156e9:	74 1f                	je     c001570a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156eb:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156f1:	85 c0                	test   eax,eax
c00156f3:	74 15                	je     c001570a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156f5:	83 ec 0c             	sub    esp,0xc
c00156f8:	8b 38                	mov    edi,DWORD PTR [eax]
c00156fa:	56                   	push   esi
c00156fb:	53                   	push   ebx
c00156fc:	52                   	push   edx
c00156fd:	51                   	push   ecx
c00156fe:	50                   	push   eax
c00156ff:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015702:	83 c4 20             	add    esp,0x20
c0015705:	99                   	cdq    
c0015706:	5b                   	pop    ebx
c0015707:	5e                   	pop    esi
c0015708:	5f                   	pop    edi
c0015709:	c3                   	ret    
c001570a:	5b                   	pop    ebx
c001570b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015710:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015715:	5e                   	pop    esi
c0015716:	5f                   	pop    edi
c0015717:	c3                   	ret    

c0015718 <sysShutdown(regs*)>:
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015722:	85 c0                	test   eax,eax
c0015724:	74 18                	je     c001573e <sysShutdown(regs*)+0x26>
c0015726:	83 f8 01             	cmp    eax,0x1
c0015729:	74 38                	je     c0015763 <sysShutdown(regs*)+0x4b>
c001572b:	83 f8 02             	cmp    eax,0x2
c001572e:	74 24                	je     c0015754 <sysShutdown(regs*)+0x3c>
c0015730:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015735:	ba ff ff ff ff       	mov    edx,0xffffffff
c001573a:	83 c4 0c             	add    esp,0xc
c001573d:	c3                   	ret    
c001573e:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0015743:	8b 10                	mov    edx,DWORD PTR [eax]
c0015745:	6a 00                	push   0x0
c0015747:	6a 00                	push   0x0
c0015749:	6a 00                	push   0x0
c001574b:	50                   	push   eax
c001574c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	eb dc                	jmp    c0015730 <sysShutdown(regs*)+0x18>
c0015754:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0015759:	8b 10                	mov    edx,DWORD PTR [eax]
c001575b:	6a 00                	push   0x0
c001575d:	6a 00                	push   0x0
c001575f:	6a 01                	push   0x1
c0015761:	eb e8                	jmp    c001574b <sysShutdown(regs*)+0x33>
c0015763:	a1 60 6a 02 c0       	mov    eax,ds:0xc0026a60
c0015768:	85 c0                	test   eax,eax
c001576a:	74 02                	je     c001576e <sysShutdown(regs*)+0x56>
c001576c:	ff d0                	call   eax
c001576e:	31 c0                	xor    eax,eax
c0015770:	31 d2                	xor    edx,edx
c0015772:	83 c4 0c             	add    esp,0xc
c0015775:	c3                   	ret    

c0015776 <sysCallRealpath(regs*)>:
c0015776:	83 ec 0c             	sub    esp,0xc
c0015779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015780:	85 d2                	test   edx,edx
c0015782:	74 07                	je     c001578b <sysCallRealpath(regs*)+0x15>
c0015784:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015787:	85 c0                	test   eax,eax
c0015789:	75 0b                	jne    c0015796 <sysCallRealpath(regs*)+0x20>
c001578b:	b8 01 00 00 00       	mov    eax,0x1
c0015790:	31 d2                	xor    edx,edx
c0015792:	83 c4 0c             	add    esp,0xc
c0015795:	c3                   	ret    
c0015796:	51                   	push   ecx
c0015797:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001579d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00157a0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00157a6:	51                   	push   ecx
c00157a7:	52                   	push   edx
c00157a8:	50                   	push   eax
c00157a9:	e8 76 76 ff ff       	call   c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>
c00157ae:	83 c4 10             	add    esp,0x10
c00157b1:	31 c0                	xor    eax,eax
c00157b3:	31 d2                	xor    edx,edx
c00157b5:	83 c4 0c             	add    esp,0xc
c00157b8:	c3                   	ret    

c00157b9 <sysCallReadDir(regs*)>:
c00157b9:	53                   	push   ebx
c00157ba:	83 ec 18             	sub    esp,0x18
c00157bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157c4:	83 f8 02             	cmp    eax,0x2
c00157c7:	76 60                	jbe    c0015829 <sysCallReadDir(regs*)+0x70>
c00157c9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157d0:	77 48                	ja     c001581a <sysCallReadDir(regs*)+0x61>
c00157d2:	83 ec 0c             	sub    esp,0xc
c00157d5:	50                   	push   eax
c00157d6:	e8 58 5d ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c00157db:	83 c4 10             	add    esp,0x10
c00157de:	85 c0                	test   eax,eax
c00157e0:	74 38                	je     c001581a <sysCallReadDir(regs*)+0x61>
c00157e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ea:	83 ec 0c             	sub    esp,0xc
c00157ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00157ef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157f3:	51                   	push   ecx
c00157f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157f7:	6a 00                	push   0x0
c00157f9:	68 10 01 00 00       	push   0x110
c00157fe:	50                   	push   eax
c00157ff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015802:	83 c4 20             	add    esp,0x20
c0015805:	85 c0                	test   eax,eax
c0015807:	74 29                	je     c0015832 <sysCallReadDir(regs*)+0x79>
c0015809:	83 f8 07             	cmp    eax,0x7
c001580c:	74 1b                	je     c0015829 <sysCallReadDir(regs*)+0x70>
c001580e:	b8 02 00 00 00       	mov    eax,0x2
c0015813:	31 d2                	xor    edx,edx
c0015815:	83 c4 18             	add    esp,0x18
c0015818:	5b                   	pop    ebx
c0015819:	c3                   	ret    
c001581a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001581f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015824:	83 c4 18             	add    esp,0x18
c0015827:	5b                   	pop    ebx
c0015828:	c3                   	ret    
c0015829:	b8 01 00 00 00       	mov    eax,0x1
c001582e:	31 d2                	xor    edx,edx
c0015830:	eb e3                	jmp    c0015815 <sysCallReadDir(regs*)+0x5c>
c0015832:	31 c0                	xor    eax,eax
c0015834:	31 d2                	xor    edx,edx
c0015836:	eb dd                	jmp    c0015815 <sysCallReadDir(regs*)+0x5c>

c0015838 <sysCallIsATTY(regs*)>:
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001583f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015842:	83 f8 02             	cmp    eax,0x2
c0015845:	76 07                	jbe    c001584e <sysCallIsATTY(regs*)+0x16>
c0015847:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001584c:	75 26                	jne    c0015874 <sysCallIsATTY(regs*)+0x3c>
c001584e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015853:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015856:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001585c:	85 c0                	test   eax,eax
c001585e:	74 24                	je     c0015884 <sysCallIsATTY(regs*)+0x4c>
c0015860:	83 ec 0c             	sub    esp,0xc
c0015863:	8b 10                	mov    edx,DWORD PTR [eax]
c0015865:	50                   	push   eax
c0015866:	ff 12                	call   DWORD PTR [edx]
c0015868:	31 d2                	xor    edx,edx
c001586a:	0f b6 c0             	movzx  eax,al
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	83 c4 0c             	add    esp,0xc
c0015873:	c3                   	ret    
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	50                   	push   eax
c0015878:	e8 b6 5c ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	85 c0                	test   eax,eax
c0015882:	75 dc                	jne    c0015860 <sysCallIsATTY(regs*)+0x28>
c0015884:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015889:	ba ff ff ff ff       	mov    edx,0xffffffff
c001588e:	83 c4 0c             	add    esp,0xc
c0015891:	c3                   	ret    

c0015892 <sysCallSeek(regs*)>:
c0015892:	53                   	push   ebx
c0015893:	83 ec 08             	sub    esp,0x8
c0015896:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001589a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001589d:	8d 50 fd             	lea    edx,[eax-0x3]
c00158a0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00158a6:	77 32                	ja     c00158da <sysCallSeek(regs*)+0x48>
c00158a8:	83 ec 0c             	sub    esp,0xc
c00158ab:	50                   	push   eax
c00158ac:	e8 82 5c ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c00158b1:	83 c4 0c             	add    esp,0xc
c00158b4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158b7:	31 db                	xor    ebx,ebx
c00158b9:	53                   	push   ebx
c00158ba:	51                   	push   ecx
c00158bb:	50                   	push   eax
c00158bc:	e8 2f 78 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	85 c0                	test   eax,eax
c00158c6:	0f 95 c0             	setne  al
c00158c9:	31 d2                	xor    edx,edx
c00158cb:	0f b6 c0             	movzx  eax,al
c00158ce:	f7 d8                	neg    eax
c00158d0:	83 d2 00             	adc    edx,0x0
c00158d3:	83 c4 08             	add    esp,0x8
c00158d6:	f7 da                	neg    edx
c00158d8:	5b                   	pop    ebx
c00158d9:	c3                   	ret    
c00158da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158e4:	83 c4 08             	add    esp,0x8
c00158e7:	5b                   	pop    ebx
c00158e8:	c3                   	ret    

c00158e9 <sysCallTell(regs*)>:
c00158e9:	53                   	push   ebx
c00158ea:	83 ec 08             	sub    esp,0x8
c00158ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158f4:	83 f8 02             	cmp    eax,0x2
c00158f7:	76 4d                	jbe    c0015946 <sysCallTell(regs*)+0x5d>
c00158f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158fe:	76 19                	jbe    c0015919 <sysCallTell(regs*)+0x30>
c0015900:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015903:	31 d2                	xor    edx,edx
c0015905:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001590b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015912:	31 c0                	xor    eax,eax
c0015914:	83 c4 08             	add    esp,0x8
c0015917:	5b                   	pop    ebx
c0015918:	c3                   	ret    
c0015919:	83 ec 0c             	sub    esp,0xc
c001591c:	50                   	push   eax
c001591d:	e8 11 5c ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c0015922:	5a                   	pop    edx
c0015923:	59                   	pop    ecx
c0015924:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015927:	50                   	push   eax
c0015928:	e8 19 78 ff ff       	call   c000d146 <File::tell(unsigned long long*)>
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	85 c0                	test   eax,eax
c0015932:	0f 95 c0             	setne  al
c0015935:	31 d2                	xor    edx,edx
c0015937:	0f b6 c0             	movzx  eax,al
c001593a:	f7 d8                	neg    eax
c001593c:	83 d2 00             	adc    edx,0x0
c001593f:	83 c4 08             	add    esp,0x8
c0015942:	f7 da                	neg    edx
c0015944:	5b                   	pop    ebx
c0015945:	c3                   	ret    
c0015946:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001594b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015950:	83 c4 08             	add    esp,0x8
c0015953:	5b                   	pop    ebx
c0015954:	c3                   	ret    

c0015955 <sysCallSize(regs*)>:
c0015955:	53                   	push   ebx
c0015956:	83 ec 18             	sub    esp,0x18
c0015959:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001595d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015960:	83 f8 02             	cmp    eax,0x2
c0015963:	76 53                	jbe    c00159b8 <sysCallSize(regs*)+0x63>
c0015965:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001596a:	76 19                	jbe    c0015985 <sysCallSize(regs*)+0x30>
c001596c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001596f:	31 d2                	xor    edx,edx
c0015971:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001597e:	31 c0                	xor    eax,eax
c0015980:	83 c4 18             	add    esp,0x18
c0015983:	5b                   	pop    ebx
c0015984:	c3                   	ret    
c0015985:	83 ec 0c             	sub    esp,0xc
c0015988:	50                   	push   eax
c0015989:	e8 a5 5b ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c001598e:	83 c4 0c             	add    esp,0xc
c0015991:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015995:	52                   	push   edx
c0015996:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015999:	50                   	push   eax
c001599a:	e8 3f 79 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	85 c0                	test   eax,eax
c00159a4:	0f 95 c0             	setne  al
c00159a7:	31 d2                	xor    edx,edx
c00159a9:	0f b6 c0             	movzx  eax,al
c00159ac:	f7 d8                	neg    eax
c00159ae:	83 d2 00             	adc    edx,0x0
c00159b1:	83 c4 18             	add    esp,0x18
c00159b4:	f7 da                	neg    edx
c00159b6:	5b                   	pop    ebx
c00159b7:	c3                   	ret    
c00159b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159c2:	83 c4 18             	add    esp,0x18
c00159c5:	5b                   	pop    ebx
c00159c6:	c3                   	ret    

c00159c7 <sysCallSizeFromFilename(regs*)>:
c00159c7:	57                   	push   edi
c00159c8:	56                   	push   esi
c00159c9:	53                   	push   ebx
c00159ca:	83 ec 20             	sub    esp,0x20
c00159cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159d1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159d4:	83 fb 02             	cmp    ebx,0x2
c00159d7:	0f 86 88 00 00 00    	jbe    c0015a65 <sysCallSizeFromFilename(regs*)+0x9e>
c00159dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159e3:	76 1b                	jbe    c0015a00 <sysCallSizeFromFilename(regs*)+0x39>
c00159e5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159e8:	31 d2                	xor    edx,edx
c00159ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159f7:	83 c4 20             	add    esp,0x20
c00159fa:	31 c0                	xor    eax,eax
c00159fc:	5b                   	pop    ebx
c00159fd:	5e                   	pop    esi
c00159fe:	5f                   	pop    edi
c00159ff:	c3                   	ret    
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	68 14 01 00 00       	push   0x114
c0015a08:	e8 b6 3f ff ff       	call   c00099c3 <malloc>
c0015a0d:	83 c4 0c             	add    esp,0xc
c0015a10:	89 c7                	mov    edi,eax
c0015a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a17:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a1a:	53                   	push   ebx
c0015a1b:	57                   	push   edi
c0015a1c:	e8 ad 75 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0015a21:	83 c4 0c             	add    esp,0xc
c0015a24:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a28:	50                   	push   eax
c0015a29:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a2c:	57                   	push   edi
c0015a2d:	e8 ac 78 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	85 ff                	test   edi,edi
c0015a37:	74 14                	je     c0015a4d <sysCallSizeFromFilename(regs*)+0x86>
c0015a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a3d:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a3f:	83 ec 0c             	sub    esp,0xc
c0015a42:	57                   	push   edi
c0015a43:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a4d:	85 c0                	test   eax,eax
c0015a4f:	0f 95 c0             	setne  al
c0015a52:	31 d2                	xor    edx,edx
c0015a54:	0f b6 c0             	movzx  eax,al
c0015a57:	f7 d8                	neg    eax
c0015a59:	83 d2 00             	adc    edx,0x0
c0015a5c:	83 c4 20             	add    esp,0x20
c0015a5f:	f7 da                	neg    edx
c0015a61:	5b                   	pop    ebx
c0015a62:	5e                   	pop    esi
c0015a63:	5f                   	pop    edi
c0015a64:	c3                   	ret    
c0015a65:	83 c4 20             	add    esp,0x20
c0015a68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a6d:	5b                   	pop    ebx
c0015a6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a73:	5e                   	pop    esi
c0015a74:	5f                   	pop    edi
c0015a75:	c3                   	ret    

c0015a76 <sysCallClose(regs*)>:
c0015a76:	53                   	push   ebx
c0015a77:	83 ec 08             	sub    esp,0x8
c0015a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a81:	83 f8 02             	cmp    eax,0x2
c0015a84:	76 41                	jbe    c0015ac7 <sysCallClose(regs*)+0x51>
c0015a86:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a8c:	83 fa 01             	cmp    edx,0x1
c0015a8f:	76 2d                	jbe    c0015abe <sysCallClose(regs*)+0x48>
c0015a91:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a96:	77 2f                	ja     c0015ac7 <sysCallClose(regs*)+0x51>
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	50                   	push   eax
c0015a9c:	e8 92 5a ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c0015aa1:	89 c3                	mov    ebx,eax
c0015aa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aa6:	e8 e5 75 ff ff       	call   c000d090 <File::close()>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	85 db                	test   ebx,ebx
c0015ab0:	74 0c                	je     c0015abe <sysCallClose(regs*)+0x48>
c0015ab2:	83 ec 0c             	sub    esp,0xc
c0015ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ab7:	53                   	push   ebx
c0015ab8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	31 c0                	xor    eax,eax
c0015ac0:	31 d2                	xor    edx,edx
c0015ac2:	83 c4 08             	add    esp,0x8
c0015ac5:	5b                   	pop    ebx
c0015ac6:	c3                   	ret    
c0015ac7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015acc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ad1:	83 c4 08             	add    esp,0x8
c0015ad4:	5b                   	pop    ebx
c0015ad5:	c3                   	ret    

c0015ad6 <sysCallOpenDir(regs*)>:
c0015ad6:	56                   	push   esi
c0015ad7:	53                   	push   ebx
c0015ad8:	53                   	push   ebx
c0015ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015add:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ae0:	85 f6                	test   esi,esi
c0015ae2:	74 59                	je     c0015b3d <sysCallOpenDir(regs*)+0x67>
c0015ae4:	83 ec 0c             	sub    esp,0xc
c0015ae7:	68 14 01 00 00       	push   0x114
c0015aec:	e8 d2 3e ff ff       	call   c00099c3 <malloc>
c0015af1:	83 c4 0c             	add    esp,0xc
c0015af4:	89 c6                	mov    esi,eax
c0015af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015afe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b01:	56                   	push   esi
c0015b02:	e8 73 79 ff ff       	call   c000d47a <Directory::Directory(char const*, Process*)>
c0015b07:	83 c4 10             	add    esp,0x10
c0015b0a:	85 f6                	test   esi,esi
c0015b0c:	74 2f                	je     c0015b3d <sysCallOpenDir(regs*)+0x67>
c0015b0e:	83 ec 0c             	sub    esp,0xc
c0015b11:	56                   	push   esi
c0015b12:	e8 c7 79 ff ff       	call   c000d4de <Directory::open()>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	85 c0                	test   eax,eax
c0015b1c:	75 1f                	jne    c0015b3d <sysCallOpenDir(regs*)+0x67>
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	56                   	push   esi
c0015b22:	e8 17 57 ff ff       	call   c000b23e <UnixFile::getFileDescriptor()>
c0015b27:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	89 02                	mov    DWORD PTR [edx],eax
c0015b2f:	c1 f8 1f             	sar    eax,0x1f
c0015b32:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b35:	31 c0                	xor    eax,eax
c0015b37:	59                   	pop    ecx
c0015b38:	31 d2                	xor    edx,edx
c0015b3a:	5b                   	pop    ebx
c0015b3b:	5e                   	pop    esi
c0015b3c:	c3                   	ret    
c0015b3d:	59                   	pop    ecx
c0015b3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b48:	5b                   	pop    ebx
c0015b49:	5e                   	pop    esi
c0015b4a:	c3                   	ret    

c0015b4b <sysCallCloseDir(regs*)>:
c0015b4b:	53                   	push   ebx
c0015b4c:	83 ec 08             	sub    esp,0x8
c0015b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b53:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b56:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b59:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b5f:	77 2f                	ja     c0015b90 <sysCallCloseDir(regs*)+0x45>
c0015b61:	83 ec 0c             	sub    esp,0xc
c0015b64:	50                   	push   eax
c0015b65:	e8 c9 59 ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c0015b6a:	89 c3                	mov    ebx,eax
c0015b6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b6f:	e8 c6 79 ff ff       	call   c000d53a <Directory::close()>
c0015b74:	83 c4 10             	add    esp,0x10
c0015b77:	85 db                	test   ebx,ebx
c0015b79:	74 0c                	je     c0015b87 <sysCallCloseDir(regs*)+0x3c>
c0015b7b:	83 ec 0c             	sub    esp,0xc
c0015b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b80:	53                   	push   ebx
c0015b81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	31 c0                	xor    eax,eax
c0015b89:	31 d2                	xor    edx,edx
c0015b8b:	83 c4 08             	add    esp,0x8
c0015b8e:	5b                   	pop    ebx
c0015b8f:	c3                   	ret    
c0015b90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b95:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b9a:	83 c4 08             	add    esp,0x8
c0015b9d:	5b                   	pop    ebx
c0015b9e:	c3                   	ret    

c0015b9f <sysCallMakeDir(regs*)>:
c0015b9f:	56                   	push   esi
c0015ba0:	53                   	push   ebx
c0015ba1:	83 ec 10             	sub    esp,0x10
c0015ba4:	68 14 01 00 00       	push   0x114
c0015ba9:	e8 15 3e ff ff       	call   c00099c3 <malloc>
c0015bae:	83 c4 0c             	add    esp,0xc
c0015bb1:	89 c3                	mov    ebx,eax
c0015bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015bbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bbf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bc2:	53                   	push   ebx
c0015bc3:	e8 b2 78 ff ff       	call   c000d47a <Directory::Directory(char const*, Process*)>
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	85 db                	test   ebx,ebx
c0015bcd:	74 32                	je     c0015c01 <sysCallMakeDir(regs*)+0x62>
c0015bcf:	83 ec 0c             	sub    esp,0xc
c0015bd2:	53                   	push   ebx
c0015bd3:	e8 e6 7a ff ff       	call   c000d6be <Directory::create()>
c0015bd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bdb:	89 c6                	mov    esi,eax
c0015bdd:	e8 58 79 ff ff       	call   c000d53a <Directory::close()>
c0015be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015be4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015be7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	31 c0                	xor    eax,eax
c0015bef:	59                   	pop    ecx
c0015bf0:	85 f6                	test   esi,esi
c0015bf2:	5b                   	pop    ebx
c0015bf3:	0f 95 c0             	setne  al
c0015bf6:	5e                   	pop    esi
c0015bf7:	31 d2                	xor    edx,edx
c0015bf9:	f7 d8                	neg    eax
c0015bfb:	83 d2 00             	adc    edx,0x0
c0015bfe:	f7 da                	neg    edx
c0015c00:	c3                   	ret    
c0015c01:	59                   	pop    ecx
c0015c02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c0c:	5b                   	pop    ebx
c0015c0d:	5e                   	pop    esi
c0015c0e:	c3                   	ret    

c0015c0f <sysCallWait(regs*)>:
c0015c0f:	83 ec 10             	sub    esp,0x10
c0015c12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c16:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c19:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c1c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c1f:	e8 fc 24 00 00       	call   c0018120 <waitTask(int, int*, int)>
c0015c24:	83 c4 1c             	add    esp,0x1c
c0015c27:	99                   	cdq    
c0015c28:	c3                   	ret    

c0015c29 <sysCallNotImpl(regs*)>:
c0015c29:	83 ec 18             	sub    esp,0x18
c0015c2c:	68 89 45 02 c0       	push   0xc0024589
c0015c31:	e8 ef e6 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0015c36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c40:	83 c4 1c             	add    esp,0x1c
c0015c43:	c3                   	ret    

c0015c44 <sysPanic(regs*)>:
c0015c44:	83 ec 18             	sub    esp,0x18
c0015c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c4b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c4e:	e8 d2 e6 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0015c53:	b8 01 00 00 00       	mov    eax,0x1
c0015c58:	31 d2                	xor    edx,edx
c0015c5a:	83 c4 1c             	add    esp,0x1c
c0015c5d:	c3                   	ret    

c0015c5e <sysCallRmdir(regs*)>:
c0015c5e:	56                   	push   esi
c0015c5f:	53                   	push   ebx
c0015c60:	83 ec 20             	sub    esp,0x20
c0015c63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c67:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c6a:	68 14 01 00 00       	push   0x114
c0015c6f:	e8 4f 3d ff ff       	call   c00099c3 <malloc>
c0015c74:	83 c4 0c             	add    esp,0xc
c0015c77:	89 c3                	mov    ebx,eax
c0015c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c81:	56                   	push   esi
c0015c82:	53                   	push   ebx
c0015c83:	e8 46 73 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0015c88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c8b:	e8 1a 75 ff ff       	call   c000d1aa <File::unlink()>
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	85 db                	test   ebx,ebx
c0015c95:	74 14                	je     c0015cab <sysCallRmdir(regs*)+0x4d>
c0015c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c9b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	53                   	push   ebx
c0015ca1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cab:	85 c0                	test   eax,eax
c0015cad:	0f 95 c0             	setne  al
c0015cb0:	31 d2                	xor    edx,edx
c0015cb2:	0f b6 c0             	movzx  eax,al
c0015cb5:	f7 d8                	neg    eax
c0015cb7:	83 d2 00             	adc    edx,0x0
c0015cba:	83 c4 14             	add    esp,0x14
c0015cbd:	f7 da                	neg    edx
c0015cbf:	5b                   	pop    ebx
c0015cc0:	5e                   	pop    esi
c0015cc1:	c3                   	ret    

c0015cc2 <sysCallUnlink(regs*)>:
c0015cc2:	56                   	push   esi
c0015cc3:	53                   	push   ebx
c0015cc4:	83 ec 20             	sub    esp,0x20
c0015cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ccb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cce:	68 14 01 00 00       	push   0x114
c0015cd3:	e8 eb 3c ff ff       	call   c00099c3 <malloc>
c0015cd8:	83 c4 0c             	add    esp,0xc
c0015cdb:	89 c3                	mov    ebx,eax
c0015cdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ce5:	56                   	push   esi
c0015ce6:	53                   	push   ebx
c0015ce7:	e8 e2 72 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0015cec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cef:	e8 b6 74 ff ff       	call   c000d1aa <File::unlink()>
c0015cf4:	83 c4 10             	add    esp,0x10
c0015cf7:	85 db                	test   ebx,ebx
c0015cf9:	74 14                	je     c0015d0f <sysCallUnlink(regs*)+0x4d>
c0015cfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d01:	83 ec 0c             	sub    esp,0xc
c0015d04:	53                   	push   ebx
c0015d05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d08:	83 c4 10             	add    esp,0x10
c0015d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d0f:	85 c0                	test   eax,eax
c0015d11:	0f 95 c0             	setne  al
c0015d14:	31 d2                	xor    edx,edx
c0015d16:	0f b6 c0             	movzx  eax,al
c0015d19:	f7 d8                	neg    eax
c0015d1b:	83 d2 00             	adc    edx,0x0
c0015d1e:	83 c4 14             	add    esp,0x14
c0015d21:	f7 da                	neg    edx
c0015d23:	5b                   	pop    ebx
c0015d24:	5e                   	pop    esi
c0015d25:	c3                   	ret    

c0015d26 <sysCallGetArgv(regs*)>:
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d2d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d30:	85 c0                	test   eax,eax
c0015d32:	78 2b                	js     c0015d5f <sysCallGetArgv(regs*)+0x39>
c0015d34:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d3a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d3d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d43:	7d 1a                	jge    c0015d5f <sysCallGetArgv(regs*)+0x39>
c0015d45:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d4c:	85 c0                	test   eax,eax
c0015d4e:	74 17                	je     c0015d67 <sysCallGetArgv(regs*)+0x41>
c0015d50:	83 ec 08             	sub    esp,0x8
c0015d53:	50                   	push   eax
c0015d54:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d57:	e8 e4 a9 fe ff       	call   c0000740 <strcpy>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	31 c0                	xor    eax,eax
c0015d61:	31 d2                	xor    edx,edx
c0015d63:	83 c4 0c             	add    esp,0xc
c0015d66:	c3                   	ret    
c0015d67:	b8 01 00 00 00       	mov    eax,0x1
c0015d6c:	31 d2                	xor    edx,edx
c0015d6e:	83 c4 0c             	add    esp,0xc
c0015d71:	c3                   	ret    

c0015d72 <sysCallTTYName(regs*)>:
c0015d72:	56                   	push   esi
c0015d73:	53                   	push   ebx
c0015d74:	53                   	push   ebx
c0015d75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d79:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d7c:	85 c0                	test   eax,eax
c0015d7e:	74 5f                	je     c0015ddf <sysCallTTYName(regs*)+0x6d>
c0015d80:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d83:	83 f8 02             	cmp    eax,0x2
c0015d86:	77 3e                	ja     c0015dc6 <sysCallTTYName(regs*)+0x54>
c0015d88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d90:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d96:	85 db                	test   ebx,ebx
c0015d98:	74 45                	je     c0015ddf <sysCallTTYName(regs*)+0x6d>
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d9f:	53                   	push   ebx
c0015da0:	ff 10                	call   DWORD PTR [eax]
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	84 c0                	test   al,al
c0015da7:	74 41                	je     c0015dea <sysCallTTYName(regs*)+0x78>
c0015da9:	83 ec 08             	sub    esp,0x8
c0015dac:	81 c3 82 00 00 00    	add    ebx,0x82
c0015db2:	53                   	push   ebx
c0015db3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015db6:	e8 85 a9 fe ff       	call   c0000740 <strcpy>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	31 c0                	xor    eax,eax
c0015dc0:	59                   	pop    ecx
c0015dc1:	31 d2                	xor    edx,edx
c0015dc3:	5b                   	pop    ebx
c0015dc4:	5e                   	pop    esi
c0015dc5:	c3                   	ret    
c0015dc6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015dcb:	74 bb                	je     c0015d88 <sysCallTTYName(regs*)+0x16>
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	50                   	push   eax
c0015dd1:	e8 5d 57 ff ff       	call   c000b533 <getFromFileDescriptor(int)>
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	89 c3                	mov    ebx,eax
c0015ddb:	85 db                	test   ebx,ebx
c0015ddd:	75 bb                	jne    c0015d9a <sysCallTTYName(regs*)+0x28>
c0015ddf:	59                   	pop    ecx
c0015de0:	b8 01 00 00 00       	mov    eax,0x1
c0015de5:	31 d2                	xor    edx,edx
c0015de7:	5b                   	pop    ebx
c0015de8:	5e                   	pop    esi
c0015de9:	c3                   	ret    
c0015dea:	59                   	pop    ecx
c0015deb:	b8 02 00 00 00       	mov    eax,0x2
c0015df0:	31 d2                	xor    edx,edx
c0015df2:	5b                   	pop    ebx
c0015df3:	5e                   	pop    esi
c0015df4:	c3                   	ret    

c0015df5 <sysCallUSleep(regs*)>:
c0015df5:	83 ec 1c             	sub    esp,0x1c
c0015df8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dfc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015dff:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e02:	6a 00                	push   0x0
c0015e04:	6a 64                	push   0x64
c0015e06:	52                   	push   edx
c0015e07:	50                   	push   eax
c0015e08:	e8 17 b1 00 00       	call   c0020f24 <__udivdi3>
c0015e0d:	83 c4 14             	add    esp,0x14
c0015e10:	50                   	push   eax
c0015e11:	e8 da 23 00 00       	call   c00181f0 <milliTenthSleep(unsigned int)>
c0015e16:	31 c0                	xor    eax,eax
c0015e18:	31 d2                	xor    edx,edx
c0015e1a:	83 c4 1c             	add    esp,0x1c
c0015e1d:	c3                   	ret    

c0015e1e <sysCallSpawn(regs*)>:
c0015e1e:	56                   	push   esi
c0015e1f:	53                   	push   ebx
c0015e20:	50                   	push   eax
c0015e21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e25:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e28:	85 c0                	test   eax,eax
c0015e2a:	75 08                	jne    c0015e34 <sysCallSpawn(regs*)+0x16>
c0015e2c:	59                   	pop    ecx
c0015e2d:	31 c0                	xor    eax,eax
c0015e2f:	31 d2                	xor    edx,edx
c0015e31:	5b                   	pop    ebx
c0015e32:	5e                   	pop    esi
c0015e33:	c3                   	ret    
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	68 1f 07 00 00       	push   0x71f
c0015e3c:	e8 82 3b ff ff       	call   c00099c3 <malloc>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	89 c6                	mov    esi,eax
c0015e46:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e4c:	85 c0                	test   eax,eax
c0015e4e:	75 32                	jne    c0015e82 <sysCallSpawn(regs*)+0x64>
c0015e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e58:	52                   	push   edx
c0015e59:	50                   	push   eax
c0015e5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e5d:	56                   	push   esi
c0015e5e:	e8 85 1a 00 00       	call   c00178e8 <Process::Process(char const*, Process*, char**)>
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e6d:	75 bd                	jne    c0015e2c <sysCallSpawn(regs*)+0xe>
c0015e6f:	83 ec 0c             	sub    esp,0xc
c0015e72:	56                   	push   esi
c0015e73:	e8 5c 1f 00 00       	call   c0017dd4 <Process::createUserThread()>
c0015e78:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e7a:	83 c4 10             	add    esp,0x10
c0015e7d:	99                   	cdq    
c0015e7e:	59                   	pop    ecx
c0015e7f:	5b                   	pop    ebx
c0015e80:	5e                   	pop    esi
c0015e81:	c3                   	ret    
c0015e82:	31 c0                	xor    eax,eax
c0015e84:	eb d2                	jmp    c0015e58 <sysCallSpawn(regs*)+0x3a>

c0015e86 <sysCallGetEnv(regs*)>:
c0015e86:	57                   	push   edi
c0015e87:	56                   	push   esi
c0015e88:	53                   	push   ebx
c0015e89:	83 ec 1c             	sub    esp,0x1c
c0015e8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e95:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e98:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e9b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015e9e:	e8 ce e3 ff ff       	call   c0014271 <Krnl::getProcessTotalEnvCount(Process*)>
c0015ea3:	83 c4 10             	add    esp,0x10
c0015ea6:	39 c7                	cmp    edi,eax
c0015ea8:	7c 14                	jl     c0015ebe <sysCallGetEnv(regs*)+0x38>
c0015eaa:	85 f6                	test   esi,esi
c0015eac:	75 0b                	jne    c0015eb9 <sysCallGetEnv(regs*)+0x33>
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	31 c0                	xor    eax,eax
c0015eb3:	5b                   	pop    ebx
c0015eb4:	31 d2                	xor    edx,edx
c0015eb6:	5e                   	pop    esi
c0015eb7:	5f                   	pop    edi
c0015eb8:	c3                   	ret    
c0015eb9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ebc:	eb f0                	jmp    c0015eae <sysCallGetEnv(regs*)+0x28>
c0015ebe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ec2:	52                   	push   edx
c0015ec3:	57                   	push   edi
c0015ec4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015eca:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015ecd:	50                   	push   eax
c0015ece:	e8 be e3 ff ff       	call   c0014291 <Krnl::getProcessEnvPair(Process*, int)>
c0015ed3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eda:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ede:	83 c4 0c             	add    esp,0xc
c0015ee1:	85 c9                	test   ecx,ecx
c0015ee3:	75 23                	jne    c0015f08 <sysCallGetEnv(regs*)+0x82>
c0015ee5:	83 ec 0c             	sub    esp,0xc
c0015ee8:	50                   	push   eax
c0015ee9:	e8 b2 a7 fe ff       	call   c00006a0 <strlen>
c0015eee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ef1:	89 c3                	mov    ebx,eax
c0015ef3:	e8 a8 a7 fe ff       	call   c00006a0 <strlen>
c0015ef8:	83 c4 10             	add    esp,0x10
c0015efb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	31 d2                	xor    edx,edx
c0015f04:	5b                   	pop    ebx
c0015f05:	5e                   	pop    esi
c0015f06:	5f                   	pop    edi
c0015f07:	c3                   	ret    
c0015f08:	83 ec 08             	sub    esp,0x8
c0015f0b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f0e:	50                   	push   eax
c0015f0f:	56                   	push   esi
c0015f10:	e8 2b a8 fe ff       	call   c0000740 <strcpy>
c0015f15:	58                   	pop    eax
c0015f16:	5a                   	pop    edx
c0015f17:	68 a3 45 02 c0       	push   0xc00245a3
c0015f1c:	56                   	push   esi
c0015f1d:	e8 5e a9 fe ff       	call   c0000880 <strcat>
c0015f22:	59                   	pop    ecx
c0015f23:	5b                   	pop    ebx
c0015f24:	57                   	push   edi
c0015f25:	56                   	push   esi
c0015f26:	e8 55 a9 fe ff       	call   c0000880 <strcat>
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	e9 7b ff ff ff       	jmp    c0015eae <sysCallGetEnv(regs*)+0x28>

c0015f33 <sysAppSettings(regs*)>:
c0015f33:	57                   	push   edi
c0015f34:	56                   	push   esi
c0015f35:	56                   	push   esi
c0015f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f3d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f43:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f48:	66 3d c0 09          	cmp    ax,0x9c0
c0015f4c:	75 2e                	jne    c0015f7c <sysAppSettings(regs*)+0x49>
c0015f4e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f54:	83 e0 1f             	and    eax,0x1f
c0015f57:	3c 01                	cmp    al,0x1
c0015f59:	74 2c                	je     c0015f87 <sysAppSettings(regs*)+0x54>
c0015f5b:	3c 07                	cmp    al,0x7
c0015f5d:	0f 84 b3 00 00 00    	je     c0016016 <sysAppSettings(regs*)+0xe3>
c0015f63:	84 c0                	test   al,al
c0015f65:	0f 84 d2 00 00 00    	je     c001603d <sysAppSettings(regs*)+0x10a>
c0015f6b:	3c 08                	cmp    al,0x8
c0015f6d:	74 63                	je     c0015fd2 <sysAppSettings(regs*)+0x9f>
c0015f6f:	59                   	pop    ecx
c0015f70:	0f b6 c0             	movzx  eax,al
c0015f73:	5e                   	pop    esi
c0015f74:	05 e8 03 00 00       	add    eax,0x3e8
c0015f79:	5f                   	pop    edi
c0015f7a:	99                   	cdq    
c0015f7b:	c3                   	ret    
c0015f7c:	b8 01 00 00 00       	mov    eax,0x1
c0015f81:	59                   	pop    ecx
c0015f82:	31 d2                	xor    edx,edx
c0015f84:	5e                   	pop    esi
c0015f85:	5f                   	pop    edi
c0015f86:	c3                   	ret    
c0015f87:	50                   	push   eax
c0015f88:	68 00 01 00 00       	push   0x100
c0015f8d:	6a 00                	push   0x0
c0015f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f97:	83 c0 0c             	add    eax,0xc
c0015f9a:	50                   	push   eax
c0015f9b:	e8 e4 a6 fe ff       	call   c0000684 <memset>
c0015fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa5:	b9 ff 00 00 00       	mov    ecx,0xff
c0015faa:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015fad:	83 c7 0c             	add    edi,0xc
c0015fb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb7:	5a                   	pop    edx
c0015fb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fbb:	59                   	pop    ecx
c0015fbc:	8d 50 0c             	lea    edx,[eax+0xc]
c0015fbf:	52                   	push   edx
c0015fc0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fc6:	e8 8d 46 ff ff       	call   c000a658 <VgaText::setTitle(char*)>
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	31 c0                	xor    eax,eax
c0015fd0:	eb af                	jmp    c0015f81 <sysAppSettings(regs*)+0x4e>
c0015fd2:	83 ec 08             	sub    esp,0x8
c0015fd5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fdb:	83 e0 0f             	and    eax,0xf
c0015fde:	50                   	push   eax
c0015fdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fe7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fed:	e8 56 46 ff ff       	call   c000a648 <VgaText::setTitleColour(VgaColour)>
c0015ff2:	5f                   	pop    edi
c0015ff3:	58                   	pop    eax
c0015ff4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015ffa:	c1 e8 04             	shr    eax,0x4
c0015ffd:	83 e0 0f             	and    eax,0xf
c0016000:	50                   	push   eax
c0016001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016006:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016009:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001600f:	e8 24 46 ff ff       	call   c000a638 <VgaText::setTitleTextColour(VgaColour)>
c0016014:	eb b5                	jmp    c0015fcb <sysAppSettings(regs*)+0x98>
c0016016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001601b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001601e:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016024:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001602a:	c0 e8 06             	shr    al,0x6
c001602d:	83 e0 01             	and    eax,0x1
c0016030:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016036:	31 c0                	xor    eax,eax
c0016038:	e9 44 ff ff ff       	jmp    c0015f81 <sysAppSettings(regs*)+0x4e>
c001603d:	b8 02 00 00 00       	mov    eax,0x2
c0016042:	e9 3a ff ff ff       	jmp    c0015f81 <sysAppSettings(regs*)+0x4e>

c0016047 <sysSetFatAttrib(regs*)>:
c0016047:	57                   	push   edi
c0016048:	56                   	push   esi
c0016049:	53                   	push   ebx
c001604a:	83 ec 1c             	sub    esp,0x1c
c001604d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016051:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016054:	68 14 01 00 00       	push   0x114
c0016059:	e8 65 39 ff ff       	call   c00099c3 <malloc>
c001605e:	83 c4 0c             	add    esp,0xc
c0016061:	89 c3                	mov    ebx,eax
c0016063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016068:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001606b:	57                   	push   edi
c001606c:	53                   	push   ebx
c001606d:	e8 5c 6f ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0016072:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016075:	83 c4 0c             	add    esp,0xc
c0016078:	0f b6 d4             	movzx  edx,ah
c001607b:	0f b6 c0             	movzx  eax,al
c001607e:	52                   	push   edx
c001607f:	50                   	push   eax
c0016080:	53                   	push   ebx
c0016081:	e8 be 71 ff ff       	call   c000d244 <File::chfatattr(unsigned char, unsigned char)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	85 db                	test   ebx,ebx
c001608b:	74 14                	je     c00160a1 <sysSetFatAttrib(regs*)+0x5a>
c001608d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016091:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016093:	83 ec 0c             	sub    esp,0xc
c0016096:	53                   	push   ebx
c0016097:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001609a:	83 c4 10             	add    esp,0x10
c001609d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a1:	85 c0                	test   eax,eax
c00160a3:	0f 95 c0             	setne  al
c00160a6:	31 d2                	xor    edx,edx
c00160a8:	0f b6 c0             	movzx  eax,al
c00160ab:	f7 d8                	neg    eax
c00160ad:	83 d2 00             	adc    edx,0x0
c00160b0:	83 c4 10             	add    esp,0x10
c00160b3:	f7 da                	neg    edx
c00160b5:	5b                   	pop    ebx
c00160b6:	5e                   	pop    esi
c00160b7:	5f                   	pop    edi
c00160b8:	c3                   	ret    

c00160b9 <sysPipe(regs*)>:
c00160b9:	57                   	push   edi
c00160ba:	56                   	push   esi
c00160bb:	53                   	push   ebx
c00160bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c0:	83 ec 0c             	sub    esp,0xc
c00160c3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160c6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160c9:	6a 20                	push   0x20
c00160cb:	e8 f3 38 ff ff       	call   c00099c3 <malloc>
c00160d0:	89 c3                	mov    ebx,eax
c00160d2:	58                   	pop    eax
c00160d3:	5a                   	pop    edx
c00160d4:	68 00 50 00 00       	push   0x5000
c00160d9:	53                   	push   ebx
c00160da:	e8 f1 42 ff ff       	call   c000a3d0 <Pipe::Pipe(int)>
c00160df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160e2:	e8 57 51 ff ff       	call   c000b23e <UnixFile::getFileDescriptor()>
c00160e7:	89 07                	mov    DWORD PTR [edi],eax
c00160e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160ec:	e8 4d 51 ff ff       	call   c000b23e <UnixFile::getFileDescriptor()>
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	89 06                	mov    DWORD PTR [esi],eax
c00160f6:	31 d2                	xor    edx,edx
c00160f8:	5b                   	pop    ebx
c00160f9:	31 c0                	xor    eax,eax
c00160fb:	5e                   	pop    esi
c00160fc:	5f                   	pop    edi
c00160fd:	c3                   	ret    

c00160fe <sysGetUnixTime(regs*)>:
c00160fe:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0016103:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016109:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001610d:	e9 b0 78 ff ff       	jmp    c000d9c2 <Clock::timeInSecondsLocal()>

c0016112 <string_ends_with(char const*, char const*)>:
c0016112:	57                   	push   edi
c0016113:	56                   	push   esi
c0016114:	53                   	push   ebx
c0016115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016119:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001611d:	83 ec 0c             	sub    esp,0xc
c0016120:	53                   	push   ebx
c0016121:	e8 7a a5 fe ff       	call   c00006a0 <strlen>
c0016126:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016129:	89 c6                	mov    esi,eax
c001612b:	e8 70 a5 fe ff       	call   c00006a0 <strlen>
c0016130:	83 c4 10             	add    esp,0x10
c0016133:	39 c6                	cmp    esi,eax
c0016135:	7d 06                	jge    c001613d <string_ends_with(char const*, char const*)+0x2b>
c0016137:	5b                   	pop    ebx
c0016138:	31 c0                	xor    eax,eax
c001613a:	5e                   	pop    esi
c001613b:	5f                   	pop    edi
c001613c:	c3                   	ret    
c001613d:	83 ec 08             	sub    esp,0x8
c0016140:	29 c6                	sub    esi,eax
c0016142:	57                   	push   edi
c0016143:	01 f3                	add    ebx,esi
c0016145:	53                   	push   ebx
c0016146:	e8 81 a6 fe ff       	call   c00007cc <strcmp>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	85 c0                	test   eax,eax
c0016150:	5b                   	pop    ebx
c0016151:	0f 94 c0             	sete   al
c0016154:	5e                   	pop    esi
c0016155:	0f b6 c0             	movzx  eax,al
c0016158:	5f                   	pop    edi
c0016159:	c3                   	ret    

c001615a <sysCallOpen(regs*)>:
c001615a:	56                   	push   esi
c001615b:	53                   	push   ebx
c001615c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016162:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016169:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001616c:	85 c9                	test   ecx,ecx
c001616e:	0f 84 ad 01 00 00    	je     c0016321 <sysCallOpen(regs*)+0x1c7>
c0016174:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016177:	85 c0                	test   eax,eax
c0016179:	0f 84 a2 01 00 00    	je     c0016321 <sysCallOpen(regs*)+0x1c7>
c001617f:	52                   	push   edx
c0016180:	68 a5 45 02 c0       	push   0xc00245a5
c0016185:	50                   	push   eax
c0016186:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001618a:	56                   	push   esi
c001618b:	e8 94 6c ff ff       	call   c000ce24 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016190:	89 34 24             	mov    DWORD PTR [esp],esi
c0016193:	e8 08 a5 fe ff       	call   c00006a0 <strlen>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	48                   	dec    eax
c001619c:	74 1d                	je     c00161bb <sysCallOpen(regs*)+0x61>
c001619e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00161a1:	eb 0f                	jmp    c00161b2 <sysCallOpen(regs*)+0x58>
c00161a3:	80 fa 3a             	cmp    dl,0x3a
c00161a6:	74 0f                	je     c00161b7 <sysCallOpen(regs*)+0x5d>
c00161a8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00161ac:	48                   	dec    eax
c00161ad:	74 0c                	je     c00161bb <sysCallOpen(regs*)+0x61>
c00161af:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00161b2:	80 fa 2e             	cmp    dl,0x2e
c00161b5:	75 ec                	jne    c00161a3 <sysCallOpen(regs*)+0x49>
c00161b7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00161bb:	83 ec 08             	sub    esp,0x8
c00161be:	68 a9 45 02 c0       	push   0xc00245a9
c00161c3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161c6:	e8 47 ff ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c00161cb:	83 c4 10             	add    esp,0x10
c00161ce:	85 c0                	test   eax,eax
c00161d0:	74 1d                	je     c00161ef <sysCallOpen(regs*)+0x95>
c00161d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161d5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161e2:	81 c4 04 01 00 00    	add    esp,0x104
c00161e8:	31 c0                	xor    eax,eax
c00161ea:	31 d2                	xor    edx,edx
c00161ec:	5b                   	pop    ebx
c00161ed:	5e                   	pop    esi
c00161ee:	c3                   	ret    
c00161ef:	83 ec 08             	sub    esp,0x8
c00161f2:	68 ae 45 02 c0       	push   0xc00245ae
c00161f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161fa:	e8 13 ff ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	85 c0                	test   eax,eax
c0016204:	75 cc                	jne    c00161d2 <sysCallOpen(regs*)+0x78>
c0016206:	83 ec 08             	sub    esp,0x8
c0016209:	68 aa 45 02 c0       	push   0xc00245aa
c001620e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016211:	e8 b6 a5 fe ff       	call   c00007cc <strcmp>
c0016216:	83 c4 10             	add    esp,0x10
c0016219:	85 c0                	test   eax,eax
c001621b:	74 b5                	je     c00161d2 <sysCallOpen(regs*)+0x78>
c001621d:	83 ec 08             	sub    esp,0x8
c0016220:	68 a9 45 02 c0       	push   0xc00245a9
c0016225:	56                   	push   esi
c0016226:	e8 e7 fe ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c001622b:	83 c4 10             	add    esp,0x10
c001622e:	85 c0                	test   eax,eax
c0016230:	75 a0                	jne    c00161d2 <sysCallOpen(regs*)+0x78>
c0016232:	83 ec 08             	sub    esp,0x8
c0016235:	68 b3 45 02 c0       	push   0xc00245b3
c001623a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001623d:	e8 d0 fe ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	85 c0                	test   eax,eax
c0016247:	0f 85 e7 00 00 00    	jne    c0016334 <sysCallOpen(regs*)+0x1da>
c001624d:	83 ec 08             	sub    esp,0x8
c0016250:	68 b8 45 02 c0       	push   0xc00245b8
c0016255:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016258:	e8 b5 fe ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	85 c0                	test   eax,eax
c0016262:	0f 85 cc 00 00 00    	jne    c0016334 <sysCallOpen(regs*)+0x1da>
c0016268:	83 ec 08             	sub    esp,0x8
c001626b:	68 b4 45 02 c0       	push   0xc00245b4
c0016270:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016273:	e8 54 a5 fe ff       	call   c00007cc <strcmp>
c0016278:	83 c4 10             	add    esp,0x10
c001627b:	85 c0                	test   eax,eax
c001627d:	0f 84 b1 00 00 00    	je     c0016334 <sysCallOpen(regs*)+0x1da>
c0016283:	83 ec 08             	sub    esp,0x8
c0016286:	68 b3 45 02 c0       	push   0xc00245b3
c001628b:	56                   	push   esi
c001628c:	e8 81 fe ff ff       	call   c0016112 <string_ends_with(char const*, char const*)>
c0016291:	83 c4 10             	add    esp,0x10
c0016294:	85 c0                	test   eax,eax
c0016296:	0f 85 98 00 00 00    	jne    c0016334 <sysCallOpen(regs*)+0x1da>
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	68 14 01 00 00       	push   0x114
c00162a4:	e8 1a 37 ff ff       	call   c00099c3 <malloc>
c00162a9:	83 c4 0c             	add    esp,0xc
c00162ac:	89 c6                	mov    esi,eax
c00162ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162b9:	56                   	push   esi
c00162ba:	e8 0f 6d ff ff       	call   c000cfce <File::File(char const*, Process*)>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	85 f6                	test   esi,esi
c00162c4:	74 5b                	je     c0016321 <sysCallOpen(regs*)+0x1c7>
c00162c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162c9:	0f b6 c2             	movzx  eax,dl
c00162cc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162cf:	89 d0                	mov    eax,edx
c00162d1:	83 e0 01             	and    eax,0x1
c00162d4:	f6 c2 02             	test   dl,0x2
c00162d7:	74 03                	je     c00162dc <sysCallOpen(regs*)+0x182>
c00162d9:	83 c8 02             	or     eax,0x2
c00162dc:	f6 c2 04             	test   dl,0x4
c00162df:	74 03                	je     c00162e4 <sysCallOpen(regs*)+0x18a>
c00162e1:	83 c8 04             	or     eax,0x4
c00162e4:	f6 c2 08             	test   dl,0x8
c00162e7:	74 03                	je     c00162ec <sysCallOpen(regs*)+0x192>
c00162e9:	83 c8 0a             	or     eax,0xa
c00162ec:	83 e2 10             	and    edx,0x10
c00162ef:	74 03                	je     c00162f4 <sysCallOpen(regs*)+0x19a>
c00162f1:	83 c8 12             	or     eax,0x12
c00162f4:	83 ec 08             	sub    esp,0x8
c00162f7:	50                   	push   eax
c00162f8:	56                   	push   esi
c00162f9:	e8 34 6d ff ff       	call   c000d032 <File::open(FileOpenMode)>
c00162fe:	83 c4 10             	add    esp,0x10
c0016301:	85 c0                	test   eax,eax
c0016303:	75 1c                	jne    c0016321 <sysCallOpen(regs*)+0x1c7>
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	56                   	push   esi
c0016309:	e8 30 4f ff ff       	call   c000b23e <UnixFile::getFileDescriptor()>
c001630e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	89 02                	mov    DWORD PTR [edx],eax
c0016316:	c1 f8 1f             	sar    eax,0x1f
c0016319:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001631c:	e9 c1 fe ff ff       	jmp    c00161e2 <sysCallOpen(regs*)+0x88>
c0016321:	81 c4 04 01 00 00    	add    esp,0x104
c0016327:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001632c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016331:	5b                   	pop    ebx
c0016332:	5e                   	pop    esi
c0016333:	c3                   	ret    
c0016334:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016337:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001633d:	e9 99 fe ff ff       	jmp    c00161db <sysCallOpen(regs*)+0x81>

c0016342 <Sys::loadSyscalls()>:
c0016342:	c7 05 20 6f 02 c0 b3 55 01 c0 	mov    DWORD PTR ds:0xc0026f20,0xc00155b3
c001634c:	c7 05 24 6f 02 c0 a8 51 01 c0 	mov    DWORD PTR ds:0xc0026f24,0xc00151a8
c0016356:	c7 05 28 6f 02 c0 99 53 01 c0 	mov    DWORD PTR ds:0xc0026f28,0xc0015399
c0016360:	c7 05 2c 6f 02 c0 e9 54 01 c0 	mov    DWORD PTR ds:0xc0026f2c,0xc00154e9
c001636a:	c7 05 30 6f 02 c0 31 53 01 c0 	mov    DWORD PTR ds:0xc0026f30,0xc0015331
c0016374:	c7 05 34 6f 02 c0 df 51 01 c0 	mov    DWORD PTR ds:0xc0026f34,0xc00151df
c001637e:	c7 05 38 6f 02 c0 c0 51 01 c0 	mov    DWORD PTR ds:0xc0026f38,0xc00151c0
c0016388:	c7 05 3c 6f 02 c0 ee 53 01 c0 	mov    DWORD PTR ds:0xc0026f3c,0xc00153ee
c0016392:	c7 05 44 6f 02 c0 76 5a 01 c0 	mov    DWORD PTR ds:0xc0026f44,0xc0015a76
c001639c:	c7 05 40 6f 02 c0 5a 61 01 c0 	mov    DWORD PTR ds:0xc0026f40,0xc001615a
c00163a6:	c7 05 48 6f 02 c0 d6 5a 01 c0 	mov    DWORD PTR ds:0xc0026f48,0xc0015ad6
c00163b0:	c7 05 4c 6f 02 c0 b9 57 01 c0 	mov    DWORD PTR ds:0xc0026f4c,0xc00157b9
c00163ba:	c7 05 50 6f 02 c0 eb 55 01 c0 	mov    DWORD PTR ds:0xc0026f50,0xc00155eb
c00163c4:	c7 05 54 6f 02 c0 f0 55 01 c0 	mov    DWORD PTR ds:0xc0026f54,0xc00155f0
c00163ce:	c7 05 58 6f 02 c0 9f 5b 01 c0 	mov    DWORD PTR ds:0xc0026f58,0xc0015b9f
c00163d8:	c7 05 5c 6f 02 c0 4b 5b 01 c0 	mov    DWORD PTR ds:0xc0026f5c,0xc0015b4b
c00163e2:	c7 05 60 6f 02 c0 92 58 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc0015892
c00163ec:	c7 05 64 6f 02 c0 e9 58 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc00158e9
c00163f6:	c7 05 68 6f 02 c0 55 59 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc0015955
c0016400:	c7 05 6c 6f 02 c0 f5 55 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc00155f5
c001640a:	c7 05 70 6f 02 c0 0f 5c 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc0015c0f
c0016414:	c7 05 74 6f 02 c0 29 5c 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc0015c29
c001641e:	c7 05 78 6f 02 c0 29 5c 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc0015c29
c0016428:	c7 05 7c 6f 02 c0 5e 5c 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc0015c5e
c0016432:	c7 05 80 6f 02 c0 c2 5c 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc0015cc2
c001643c:	c7 05 84 6f 02 c0 ff 55 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc00155ff
c0016446:	c7 05 88 6f 02 c0 26 5d 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015d26
c0016450:	c7 05 8c 6f 02 c0 76 57 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015776
c001645a:	c7 05 90 6f 02 c0 72 5d 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc0015d72
c0016464:	c7 05 94 6f 02 c0 38 58 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc0015838
c001646e:	c7 05 98 6f 02 c0 f5 5d 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc0015df5
c0016478:	c7 05 9c 6f 02 c0 c7 59 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc00159c7
c0016482:	c7 05 a0 6f 02 c0 1e 5e 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc0015e1e
c001648c:	c7 05 a4 6f 02 c0 86 5e 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc0015e86
c0016496:	c7 05 a8 6f 02 c0 33 5f 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0015f33
c00164a0:	c7 05 ac 6f 02 c0 0f 56 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc001560f
c00164aa:	c7 05 b0 6f 02 c0 79 56 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc0015679
c00164b4:	c7 05 b4 6f 02 c0 c3 56 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc00156c3
c00164be:	c7 05 b8 6f 02 c0 47 60 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0016047
c00164c8:	c7 05 bc 6f 02 c0 44 5c 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015c44
c00164d2:	c7 05 c0 6f 02 c0 18 57 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc0015718
c00164dc:	c7 05 c4 6f 02 c0 b9 60 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc00160b9
c00164e6:	c7 05 c8 6f 02 c0 fe 60 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc00160fe
c00164f0:	c7 05 cc 6f 02 c0 89 52 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc0015289
c00164fa:	c7 05 d0 6f 02 c0 0a 54 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc001540a
c0016504:	c7 05 d4 6f 02 c0 9f 54 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc001549f
c001650e:	c7 05 d8 6f 02 c0 72 51 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015172
c0016518:	c7 05 dc 6f 02 c0 51 55 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc0015551
c0016522:	c7 05 e0 6f 02 c0 eb 51 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc00151eb
c001652c:	c7 05 e4 6f 02 c0 05 52 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc0015205
c0016536:	c3                   	ret    

c0016537 <Sys::systemCall(regs*, void*)>:
c0016537:	53                   	push   ebx
c0016538:	83 ec 08             	sub    esp,0x8
c001653b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001653f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016542:	83 f8 7f             	cmp    eax,0x7f
c0016545:	77 16                	ja     c001655d <Sys::systemCall(regs*, void*)+0x26>
c0016547:	8b 14 85 20 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd90e0]
c001654e:	85 d2                	test   edx,edx
c0016550:	74 0b                	je     c001655d <Sys::systemCall(regs*, void*)+0x26>
c0016552:	83 ec 0c             	sub    esp,0xc
c0016555:	53                   	push   ebx
c0016556:	ff d2                	call   edx
c0016558:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001655b:	eb 0d                	jmp    c001656a <Sys::systemCall(regs*, void*)+0x33>
c001655d:	52                   	push   edx
c001655e:	52                   	push   edx
c001655f:	50                   	push   eax
c0016560:	68 bd 45 02 c0       	push   0xc00245bd
c0016565:	e8 fa 64 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001656a:	83 c4 10             	add    esp,0x10
c001656d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016572:	31 d2                	xor    edx,edx
c0016574:	83 c4 08             	add    esp,0x8
c0016577:	5b                   	pop    ebx
c0016578:	c3                   	ret    

c0016579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016579:	55                   	push   ebp
c001657a:	57                   	push   edi
c001657b:	56                   	push   esi
c001657c:	53                   	push   ebx
c001657d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016583:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001658a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016591:	85 c0                	test   eax,eax
c0016593:	0f 95 c1             	setne  cl
c0016596:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001659e:	0f 94 c2             	sete   dl
c00165a1:	84 d1                	test   cl,dl
c00165a3:	74 23                	je     c00165c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165a5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00165ab:	74 1b                	je     c00165c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165b3:	89 da                	mov    edx,ebx
c00165b5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00165bb:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165c1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165c8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165cf:	05 ff 0f 00 00       	add    eax,0xfff
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165db:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165e1:	c1 e8 0c             	shr    eax,0xc
c00165e4:	89 fe                	mov    esi,edi
c00165e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165ea:	c1 ee 0c             	shr    esi,0xc
c00165ed:	6a 01                	push   0x1
c00165ef:	e8 95 50 ff ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c00165f4:	89 c5                	mov    ebp,eax
c00165f6:	58                   	pop    eax
c00165f7:	5a                   	pop    edx
c00165f8:	56                   	push   esi
c00165f9:	68 d1 45 02 c0       	push   0xc00245d1
c00165fe:	e8 61 64 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0016603:	59                   	pop    ecx
c0016604:	58                   	pop    eax
c0016605:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016609:	68 e3 45 02 c0       	push   0xc00245e3
c001660e:	e8 51 64 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001661c:	0f 86 31 01 00 00    	jbe    c0016753 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016622:	c1 e6 0c             	shl    esi,0xc
c0016625:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016628:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001662b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001662f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016636:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016639:	01 df                	add    edi,ebx
c001663b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001663e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016642:	0f 84 08 01 00 00    	je     c0016750 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016648:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001664e:	76 05                	jbe    c0016655 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016650:	bf 00 10 00 00       	mov    edi,0x1000
c0016655:	83 ec 0c             	sub    esp,0xc
c0016658:	31 d2                	xor    edx,edx
c001665a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016661:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016663:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016667:	50                   	push   eax
c0016668:	8d 74 24 30          	lea    esi,[esp+0x30]
c001666c:	56                   	push   esi
c001666d:	52                   	push   edx
c001666e:	57                   	push   edi
c001666f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016676:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016679:	83 c4 20             	add    esp,0x20
c001667c:	85 c0                	test   eax,eax
c001667e:	74 0a                	je     c001668a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016680:	53                   	push   ebx
c0016681:	53                   	push   ebx
c0016682:	50                   	push   eax
c0016683:	68 f5 45 02 c0       	push   0xc00245f5
c0016688:	eb 0f                	jmp    c0016699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001668a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001668e:	74 20                	je     c00166b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016690:	51                   	push   ecx
c0016691:	51                   	push   ecx
c0016692:	6a 00                	push   0x0
c0016694:	68 20 46 02 c0       	push   0xc0024620
c0016699:	e8 c6 63 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001669e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166a1:	e8 13 53 ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00166a6:	83 c4 10             	add    esp,0x10
c00166a9:	31 c0                	xor    eax,eax
c00166ab:	e9 68 01 00 00       	jmp    c0016818 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00166b0:	fa                   	cli    
c00166b1:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00166b7:	e8 0f 37 ff ff       	call   c0009dcb <Phys::allocatePage()>
c00166bc:	6a 07                	push   0x7
c00166be:	89 c7                	mov    edi,eax
c00166c0:	55                   	push   ebp
c00166c1:	50                   	push   eax
c00166c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d0:	e8 5b 56 ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166d5:	83 c4 0c             	add    esp,0xc
c00166d8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166e5:	6a 00                	push   0x0
c00166e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166f5:	e8 90 54 ff ff       	call   c000bb8a <VAS::mapOtherVASIn(bool, VAS*)>
c00166fa:	58                   	pop    eax
c00166fb:	5a                   	pop    edx
c00166fc:	68 07 0c 00 00       	push   0xc07
c0016701:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016705:	57                   	push   edi
c0016706:	89 ef                	mov    edi,ebp
c0016708:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001670f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016715:	6a 00                	push   0x0
c0016717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001671c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001671f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016725:	e8 c2 59 ff ff       	call   c000c0ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001672a:	b9 00 10 00 00       	mov    ecx,0x1000
c001672f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016731:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0016736:	83 c4 20             	add    esp,0x20
c0016739:	48                   	dec    eax
c001673a:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001673f:	85 c0                	test   eax,eax
c0016741:	75 01                	jne    c0016744 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016743:	fb                   	sti    
c0016744:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001674b:	e9 df fe ff ff       	jmp    c001662f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016750:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016753:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001675b:	0f 86 a9 00 00 00    	jbe    c001680a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016761:	fa                   	cli    
c0016762:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0016768:	51                   	push   ecx
c0016769:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016770:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016776:	6a 00                	push   0x0
c0016778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016780:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016786:	e8 ff 53 ff ff       	call   c000bb8a <VAS::mapOtherVASIn(bool, VAS*)>
c001678b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001678f:	c1 e6 0c             	shl    esi,0xc
c0016792:	01 de                	add    esi,ebx
c0016794:	83 c4 10             	add    esp,0x10
c0016797:	39 de                	cmp    esi,ebx
c0016799:	74 61                	je     c00167fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001679b:	e8 2b 36 ff ff       	call   c0009dcb <Phys::allocatePage()>
c00167a0:	6a 07                	push   0x7
c00167a2:	89 c7                	mov    edi,eax
c00167a4:	55                   	push   ebp
c00167a5:	50                   	push   eax
c00167a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167b4:	e8 77 55 ff ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167b9:	58                   	pop    eax
c00167ba:	5a                   	pop    edx
c00167bb:	68 07 0c 00 00       	push   0xc07
c00167c0:	53                   	push   ebx
c00167c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167c7:	57                   	push   edi
c00167c8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167d5:	6a 00                	push   0x0
c00167d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167e5:	e8 02 59 ff ff       	call   c000c0ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167ea:	83 c4 1c             	add    esp,0x1c
c00167ed:	68 00 10 00 00       	push   0x1000
c00167f2:	6a 00                	push   0x0
c00167f4:	55                   	push   ebp
c00167f5:	e8 8a 9e fe ff       	call   c0000684 <memset>
c00167fa:	eb 98                	jmp    c0016794 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00167fc:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0016801:	48                   	dec    eax
c0016802:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0016807:	75 01                	jne    c001680a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016809:	fb                   	sti    
c001680a:	83 ec 0c             	sub    esp,0xc
c001680d:	55                   	push   ebp
c001680e:	e8 a6 51 ff ff       	call   c000b9b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	b0 01                	mov    al,0x1
c0016818:	81 c4 2c 10 00 00    	add    esp,0x102c
c001681e:	5b                   	pop    ebx
c001681f:	5e                   	pop    esi
c0016820:	5f                   	pop    edi
c0016821:	5d                   	pop    ebp
c0016822:	c3                   	ret    

c0016823 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016823:	55                   	push   ebp
c0016824:	57                   	push   edi
c0016825:	56                   	push   esi
c0016826:	53                   	push   ebx
c0016827:	83 ec 48             	sub    esp,0x48
c001682a:	68 14 01 00 00       	push   0x114
c001682f:	e8 8f 31 ff ff       	call   c00099c3 <malloc>
c0016834:	83 c4 0c             	add    esp,0xc
c0016837:	89 c6                	mov    esi,eax
c0016839:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001683d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016841:	50                   	push   eax
c0016842:	e8 87 67 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0016847:	58                   	pop    eax
c0016848:	5a                   	pop    edx
c0016849:	6a 01                	push   0x1
c001684b:	56                   	push   esi
c001684c:	e8 e1 67 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	85 c0                	test   eax,eax
c0016856:	0f 85 47 01 00 00    	jne    c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001685c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	6a 34                	push   0x34
c0016869:	e8 55 31 ff ff       	call   c00099c3 <malloc>
c001686e:	89 c3                	mov    ebx,eax
c0016870:	58                   	pop    eax
c0016871:	8b 06                	mov    eax,DWORD PTR [esi]
c0016873:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016877:	57                   	push   edi
c0016878:	53                   	push   ebx
c0016879:	6a 00                	push   0x0
c001687b:	6a 34                	push   0x34
c001687d:	56                   	push   esi
c001687e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016881:	83 c4 20             	add    esp,0x20
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 85 17 01 00 00    	jne    c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001688c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016892:	0f 85 0b 01 00 00    	jne    c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016898:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001689b:	85 c0                	test   eax,eax
c001689d:	0f 84 00 01 00 00    	je     c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168a3:	31 d2                	xor    edx,edx
c00168a5:	55                   	push   ebp
c00168a6:	52                   	push   edx
c00168a7:	50                   	push   eax
c00168a8:	56                   	push   esi
c00168a9:	e8 42 68 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	85 c0                	test   eax,eax
c00168b3:	0f 85 ea 00 00 00    	jne    c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168b9:	83 ec 0c             	sub    esp,0xc
c00168bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168bf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168c7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168cb:	0f af c2             	imul   eax,edx
c00168ce:	50                   	push   eax
c00168cf:	e8 ef 30 ff ff       	call   c00099c3 <malloc>
c00168d4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168e1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168e5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168e9:	0f af c2             	imul   eax,edx
c00168ec:	99                   	cdq    
c00168ed:	52                   	push   edx
c00168ee:	50                   	push   eax
c00168ef:	56                   	push   esi
c00168f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168f3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168f6:	83 c4 20             	add    esp,0x20
c00168f9:	85 c0                	test   eax,eax
c00168fb:	0f 84 a2 00 00 00    	je     c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016901:	31 d2                	xor    edx,edx
c0016903:	51                   	push   ecx
c0016904:	52                   	push   edx
c0016905:	50                   	push   eax
c0016906:	56                   	push   esi
c0016907:	e8 e4 67 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c001690c:	83 c4 10             	add    esp,0x10
c001690f:	85 c0                	test   eax,eax
c0016911:	0f 85 8c 00 00 00    	jne    c00169a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016917:	83 ec 0c             	sub    esp,0xc
c001691a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001691e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016922:	31 ed                	xor    ebp,ebp
c0016924:	0f af c2             	imul   eax,edx
c0016927:	50                   	push   eax
c0016928:	e8 96 30 ff ff       	call   c00099c3 <malloc>
c001692d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001692f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016933:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001693e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016942:	0f af c2             	imul   eax,edx
c0016945:	99                   	cdq    
c0016946:	52                   	push   edx
c0016947:	50                   	push   eax
c0016948:	56                   	push   esi
c0016949:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001694c:	83 c4 20             	add    esp,0x20
c001694f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016957:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001695b:	0f 86 80 00 00 00    	jbe    c00169e1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016961:	0f b7 fd             	movzx  edi,bp
c0016964:	c1 e7 05             	shl    edi,0x5
c0016967:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001696b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001696e:	75 6b                	jne    c00169db <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016970:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016973:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016977:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001697a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001697e:	52                   	push   edx
c001697f:	31 d2                	xor    edx,edx
c0016981:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016984:	52                   	push   edx
c0016985:	50                   	push   eax
c0016986:	56                   	push   esi
c0016987:	e8 64 67 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c001698c:	83 c4 10             	add    esp,0x10
c001698f:	85 c0                	test   eax,eax
c0016991:	74 17                	je     c00169aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	68 4c 46 02 c0       	push   0xc002464c
c001699b:	e8 c4 60 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	31 c0                	xor    eax,eax
c00169a5:	e9 87 00 00 00       	jmp    c0016a31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00169aa:	83 ec 0c             	sub    esp,0xc
c00169ad:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00169b0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00169b3:	50                   	push   eax
c00169b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169bc:	56                   	push   esi
c00169bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169c1:	e8 b3 fb ff ff       	call   c0016579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169ca:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169ce:	83 c4 20             	add    esp,0x20
c00169d1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169d5:	73 04                	jae    c00169db <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169db:	45                   	inc    ebp
c00169dc:	e9 76 ff ff ff       	jmp    c0016957 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169e1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169ed:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169f3:	83 ec 0c             	sub    esp,0xc
c00169f6:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00169fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a01:	05 00 10 00 00       	add    eax,0x1000
c0016a06:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a0d:	e8 c1 2f ff ff       	call   c00099d3 <free>
c0016a12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a15:	e8 b9 2f ff ff       	call   c00099d3 <free>
c0016a1a:	58                   	pop    eax
c0016a1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a1f:	e8 af 2f ff ff       	call   c00099d3 <free>
c0016a24:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a27:	e8 64 66 ff ff       	call   c000d090 <File::close()>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	b0 01                	mov    al,0x1
c0016a31:	83 c4 3c             	add    esp,0x3c
c0016a34:	5b                   	pop    ebx
c0016a35:	5e                   	pop    esi
c0016a36:	5f                   	pop    edi
c0016a37:	5d                   	pop    ebp
c0016a38:	c3                   	ret    

c0016a39 <Thr::runtimeReferenceHelper()>:
c0016a39:	83 ec 18             	sub    esp,0x18
c0016a3c:	68 54 46 02 c0       	push   0xc0024654
c0016a41:	e8 1e 60 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0016a46:	fa                   	cli    
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	eb fe                	jmp    c0016a4a <Thr::runtimeReferenceHelper()+0x11>

c0016a4c <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a4c:	57                   	push   edi
c0016a4d:	56                   	push   esi
c0016a4e:	53                   	push   ebx
c0016a4f:	31 db                	xor    ebx,ebx
c0016a51:	39 1d c0 78 02 c0    	cmp    DWORD PTR ds:0xc00278c0,ebx
c0016a57:	7e 3c                	jle    c0016a95 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a59:	8b 34 9d 40 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd87c0]
c0016a60:	31 ff                	xor    edi,edi
c0016a62:	39 3c 9d 40 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd88c0],edi
c0016a69:	7e 27                	jle    c0016a92 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a6b:	50                   	push   eax
c0016a6c:	50                   	push   eax
c0016a6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a71:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a73:	03 04 9d c0 77 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8840]
c0016a7a:	50                   	push   eax
c0016a7b:	e8 4c 9d fe ff       	call   c00007cc <strcmp>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	85 c0                	test   eax,eax
c0016a85:	75 05                	jne    c0016a8c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a87:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a8a:	eb 0b                	jmp    c0016a97 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a8c:	83 c6 10             	add    esi,0x10
c0016a8f:	47                   	inc    edi
c0016a90:	eb d0                	jmp    c0016a62 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a92:	43                   	inc    ebx
c0016a93:	eb bc                	jmp    c0016a51 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a95:	31 c0                	xor    eax,eax
c0016a97:	5b                   	pop    ebx
c0016a98:	5e                   	pop    esi
c0016a99:	5f                   	pop    edi
c0016a9a:	c3                   	ret    

c0016a9b <Thr::loadKernelSymbolTable(char const*)>:
c0016a9b:	55                   	push   ebp
c0016a9c:	57                   	push   edi
c0016a9d:	56                   	push   esi
c0016a9e:	53                   	push   ebx
c0016a9f:	83 ec 68             	sub    esp,0x68
c0016aa2:	8b 35 10 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027910
c0016aa8:	68 14 01 00 00       	push   0x114
c0016aad:	e8 11 2f ff ff       	call   c00099c3 <malloc>
c0016ab2:	83 c4 0c             	add    esp,0xc
c0016ab5:	89 c3                	mov    ebx,eax
c0016ab7:	56                   	push   esi
c0016ab8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016abc:	50                   	push   eax
c0016abd:	e8 0c 65 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0016ac2:	5e                   	pop    esi
c0016ac3:	5f                   	pop    edi
c0016ac4:	6a 01                	push   0x1
c0016ac6:	53                   	push   ebx
c0016ac7:	e8 66 65 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	85 c0                	test   eax,eax
c0016ad1:	74 0a                	je     c0016add <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016ad3:	83 ec 0c             	sub    esp,0xc
c0016ad6:	68 76 46 02 c0       	push   0xc0024676
c0016adb:	eb 34                	jmp    c0016b11 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016add:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	6a 34                	push   0x34
c0016aea:	e8 d4 2e ff ff       	call   c00099c3 <malloc>
c0016aef:	59                   	pop    ecx
c0016af0:	89 c7                	mov    edi,eax
c0016af2:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016af6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016af8:	56                   	push   esi
c0016af9:	57                   	push   edi
c0016afa:	6a 00                	push   0x0
c0016afc:	6a 34                	push   0x34
c0016afe:	53                   	push   ebx
c0016aff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b02:	83 c4 20             	add    esp,0x20
c0016b05:	85 c0                	test   eax,eax
c0016b07:	74 17                	je     c0016b20 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b09:	83 ec 0c             	sub    esp,0xc
c0016b0c:	68 8d 46 02 c0       	push   0xc002468d
c0016b11:	e8 0f d8 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0016b16:	83 c4 10             	add    esp,0x10
c0016b19:	31 c0                	xor    eax,eax
c0016b1b:	e9 31 02 00 00       	jmp    c0016d51 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b20:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b26:	75 e1                	jne    c0016b09 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b28:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b2b:	85 c0                	test   eax,eax
c0016b2d:	74 da                	je     c0016b09 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b2f:	52                   	push   edx
c0016b30:	31 d2                	xor    edx,edx
c0016b32:	52                   	push   edx
c0016b33:	50                   	push   eax
c0016b34:	53                   	push   ebx
c0016b35:	e8 b6 65 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	85 c0                	test   eax,eax
c0016b3f:	75 c8                	jne    c0016b09 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b41:	83 ec 0c             	sub    esp,0xc
c0016b44:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b4c:	31 ed                	xor    ebp,ebp
c0016b4e:	0f af c2             	imul   eax,edx
c0016b51:	50                   	push   eax
c0016b52:	e8 6c 2e ff ff       	call   c00099c3 <malloc>
c0016b57:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b64:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b68:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b6c:	0f af c2             	imul   eax,edx
c0016b6f:	99                   	cdq    
c0016b70:	52                   	push   edx
c0016b71:	50                   	push   eax
c0016b72:	53                   	push   ebx
c0016b73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b76:	83 c4 20             	add    esp,0x20
c0016b79:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b89:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b99:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b9d:	0f 86 aa 00 00 00    	jbe    c0016c4d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016ba3:	0f b7 f5             	movzx  esi,bp
c0016ba6:	6b f6 28             	imul   esi,esi,0x28
c0016ba9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016bad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016bb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bb4:	50                   	push   eax
c0016bb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bb9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016bbd:	8b 16                	mov    edx,DWORD PTR [esi]
c0016bbf:	6b c0 28             	imul   eax,eax,0x28
c0016bc2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016bc6:	89 d0                	mov    eax,edx
c0016bc8:	31 d2                	xor    edx,edx
c0016bca:	52                   	push   edx
c0016bcb:	50                   	push   eax
c0016bcc:	53                   	push   ebx
c0016bcd:	e8 1e 65 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016bd2:	83 c4 0c             	add    esp,0xc
c0016bd5:	6a 20                	push   0x20
c0016bd7:	6a 00                	push   0x0
c0016bd9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bdd:	52                   	push   edx
c0016bde:	e8 a1 9a fe ff       	call   c0000684 <memset>
c0016be3:	58                   	pop    eax
c0016be4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016be6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bea:	51                   	push   ecx
c0016beb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bef:	52                   	push   edx
c0016bf0:	6a 00                	push   0x0
c0016bf2:	6a 1f                	push   0x1f
c0016bf4:	53                   	push   ebx
c0016bf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bf8:	83 c4 18             	add    esp,0x18
c0016bfb:	68 a4 46 02 c0       	push   0xc00246a4
c0016c00:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c04:	52                   	push   edx
c0016c05:	e8 c2 9b fe ff       	call   c00007cc <strcmp>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	85 c0                	test   eax,eax
c0016c0f:	75 0f                	jne    c0016c20 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c20:	50                   	push   eax
c0016c21:	50                   	push   eax
c0016c22:	68 ac 46 02 c0       	push   0xc00246ac
c0016c27:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c2b:	50                   	push   eax
c0016c2c:	e8 9b 9b fe ff       	call   c00007cc <strcmp>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	85 c0                	test   eax,eax
c0016c36:	75 0f                	jne    c0016c47 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c38:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c47:	45                   	inc    ebp
c0016c48:	e9 4c ff ff ff       	jmp    c0016b99 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c52:	75 10                	jne    c0016c64 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	68 b4 46 02 c0       	push   0xc00246b4
c0016c5c:	e8 c4 d6 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c69:	75 10                	jne    c0016c7b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	68 b4 46 02 c0       	push   0xc00246b4
c0016c73:	e8 ad d6 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	31 d2                	xor    edx,edx
c0016c7d:	50                   	push   eax
c0016c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c82:	52                   	push   edx
c0016c83:	50                   	push   eax
c0016c84:	53                   	push   ebx
c0016c85:	e8 66 64 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016c8a:	5a                   	pop    edx
c0016c8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c8f:	e8 2f 2d ff ff       	call   c00099c3 <malloc>
c0016c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c9c:	31 c9                	xor    ecx,ecx
c0016c9e:	5e                   	pop    esi
c0016c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ca1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016ca5:	55                   	push   ebp
c0016ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016caa:	51                   	push   ecx
c0016cab:	52                   	push   edx
c0016cac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016cb4:	53                   	push   ebx
c0016cb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cb8:	83 c4 14             	add    esp,0x14
c0016cbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cbf:	e8 ff 2c ff ff       	call   c00099c3 <malloc>
c0016cc4:	89 c6                	mov    esi,eax
c0016cc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cc8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ccb:	56                   	push   esi
c0016ccc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cd0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cd4:	51                   	push   ecx
c0016cd5:	52                   	push   edx
c0016cd6:	53                   	push   ebx
c0016cd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cde:	8b 15 c0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c0
c0016ce4:	83 c4 1c             	add    esp,0x1c
c0016ce7:	c1 e8 04             	shr    eax,0x4
c0016cea:	89 04 95 40 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88c0],eax
c0016cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cf5:	31 d2                	xor    edx,edx
c0016cf7:	52                   	push   edx
c0016cf8:	50                   	push   eax
c0016cf9:	53                   	push   ebx
c0016cfa:	e8 f1 63 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016cff:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d01:	31 d2                	xor    edx,edx
c0016d03:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d06:	56                   	push   esi
c0016d07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d0b:	52                   	push   edx
c0016d0c:	50                   	push   eax
c0016d0d:	53                   	push   ebx
c0016d0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d11:	83 c4 14             	add    esp,0x14
c0016d14:	53                   	push   ebx
c0016d15:	e8 76 63 ff ff       	call   c000d090 <File::close()>
c0016d1a:	5d                   	pop    ebp
c0016d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d1f:	e8 af 2c ff ff       	call   c00099d3 <free>
c0016d24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d27:	e8 a7 2c ff ff       	call   c00099d3 <free>
c0016d2c:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0016d31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d35:	8d 50 01             	lea    edx,[eax+0x1]
c0016d38:	89 0c 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],ecx
c0016d3f:	89 34 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],esi
c0016d46:	89 15 c0 78 02 c0    	mov    DWORD PTR ds:0xc00278c0,edx
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	b0 01                	mov    al,0x1
c0016d51:	83 c4 5c             	add    esp,0x5c
c0016d54:	5b                   	pop    ebx
c0016d55:	5e                   	pop    esi
c0016d56:	5f                   	pop    edi
c0016d57:	5d                   	pop    ebp
c0016d58:	c3                   	ret    

c0016d59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d59:	55                   	push   ebp
c0016d5a:	57                   	push   edi
c0016d5b:	56                   	push   esi
c0016d5c:	53                   	push   ebx
c0016d5d:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d63:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d6a:	8b 1d 10 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027910
c0016d70:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d74:	68 14 01 00 00       	push   0x114
c0016d79:	e8 45 2c ff ff       	call   c00099c3 <malloc>
c0016d7e:	83 c4 0c             	add    esp,0xc
c0016d81:	89 c5                	mov    ebp,eax
c0016d83:	53                   	push   ebx
c0016d84:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d8b:	50                   	push   eax
c0016d8c:	e8 3d 62 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0016d91:	5e                   	pop    esi
c0016d92:	5f                   	pop    edi
c0016d93:	6a 01                	push   0x1
c0016d95:	55                   	push   ebp
c0016d96:	e8 97 62 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	85 c0                	test   eax,eax
c0016da0:	0f 85 a7 06 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016da6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	6a 34                	push   0x34
c0016db3:	e8 0b 2c ff ff       	call   c00099c3 <malloc>
c0016db8:	5b                   	pop    ebx
c0016db9:	89 c7                	mov    edi,eax
c0016dbb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016dbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dc2:	53                   	push   ebx
c0016dc3:	57                   	push   edi
c0016dc4:	6a 00                	push   0x0
c0016dc6:	6a 34                	push   0x34
c0016dc8:	55                   	push   ebp
c0016dc9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dcc:	83 c4 20             	add    esp,0x20
c0016dcf:	85 c0                	test   eax,eax
c0016dd1:	0f 85 76 06 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dd7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ddd:	0f 85 6a 06 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016de3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016de6:	85 c0                	test   eax,eax
c0016de8:	0f 84 5f 06 00 00    	je     c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dee:	31 d2                	xor    edx,edx
c0016df0:	51                   	push   ecx
c0016df1:	52                   	push   edx
c0016df2:	50                   	push   eax
c0016df3:	55                   	push   ebp
c0016df4:	e8 f7 62 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	85 c0                	test   eax,eax
c0016dfe:	0f 85 49 06 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e0a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e0e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e16:	0f af c2             	imul   eax,edx
c0016e19:	50                   	push   eax
c0016e1a:	e8 a4 2b ff ff       	call   c00099c3 <malloc>
c0016e1f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e2d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e31:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e35:	0f af c2             	imul   eax,edx
c0016e38:	99                   	cdq    
c0016e39:	52                   	push   edx
c0016e3a:	50                   	push   eax
c0016e3b:	55                   	push   ebp
c0016e3c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e3f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e42:	83 c4 20             	add    esp,0x20
c0016e45:	85 c0                	test   eax,eax
c0016e47:	0f 84 00 06 00 00    	je     c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e4d:	52                   	push   edx
c0016e4e:	31 d2                	xor    edx,edx
c0016e50:	52                   	push   edx
c0016e51:	50                   	push   eax
c0016e52:	55                   	push   ebp
c0016e53:	e8 98 62 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016e58:	83 c4 10             	add    esp,0x10
c0016e5b:	85 c0                	test   eax,eax
c0016e5d:	0f 85 ea 05 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e63:	83 ec 0c             	sub    esp,0xc
c0016e66:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e6a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e6e:	31 f6                	xor    esi,esi
c0016e70:	0f af c2             	imul   eax,edx
c0016e73:	50                   	push   eax
c0016e74:	e8 4a 2b ff ff       	call   c00099c3 <malloc>
c0016e79:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e87:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e8b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e8f:	0f af c2             	imul   eax,edx
c0016e92:	99                   	cdq    
c0016e93:	52                   	push   edx
c0016e94:	50                   	push   eax
c0016e95:	55                   	push   ebp
c0016e96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e99:	83 c4 20             	add    esp,0x20
c0016e9c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016ea0:	0f 86 8a 00 00 00    	jbe    c0016f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016ea6:	0f b7 de             	movzx  ebx,si
c0016ea9:	c1 e3 05             	shl    ebx,0x5
c0016eac:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016eb0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016eb3:	75 75                	jne    c0016f2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016eb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eb8:	31 d2                	xor    edx,edx
c0016eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ebe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec5:	50                   	push   eax
c0016ec6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ec9:	52                   	push   edx
c0016eca:	50                   	push   eax
c0016ecb:	55                   	push   ebp
c0016ecc:	e8 1f 62 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016ed1:	83 c4 10             	add    esp,0x10
c0016ed4:	85 c0                	test   eax,eax
c0016ed6:	0f 85 71 05 00 00    	jne    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016edc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ee3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ee6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016eea:	31 d2                	xor    edx,edx
c0016eec:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ef7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016efe:	50                   	push   eax
c0016eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f07:	52                   	push   edx
c0016f08:	50                   	push   eax
c0016f09:	55                   	push   ebp
c0016f0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f0d:	83 c4 1c             	add    esp,0x1c
c0016f10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f13:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f16:	50                   	push   eax
c0016f17:	6a 00                	push   0x0
c0016f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f1d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f21:	50                   	push   eax
c0016f22:	e8 5d 97 fe ff       	call   c0000684 <memset>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	46                   	inc    esi
c0016f2b:	e9 6c ff ff ff       	jmp    c0016e9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f30:	53                   	push   ebx
c0016f31:	31 db                	xor    ebx,ebx
c0016f33:	68 00 01 00 00       	push   0x100
c0016f38:	6a 00                	push   0x0
c0016f3a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f3e:	50                   	push   eax
c0016f3f:	e8 40 97 fe ff       	call   c0000684 <memset>
c0016f44:	83 c4 0c             	add    esp,0xc
c0016f47:	68 00 01 00 00       	push   0x100
c0016f4c:	6a 00                	push   0x0
c0016f4e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f55:	50                   	push   eax
c0016f56:	e8 29 97 fe ff       	call   c0000684 <memset>
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f66:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f6e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f76:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f7e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f86:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f8a:	0f 86 30 01 00 00    	jbe    c00170c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f90:	0f b7 f3             	movzx  esi,bx
c0016f93:	6b f6 28             	imul   esi,esi,0x28
c0016f96:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f9a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fa1:	52                   	push   edx
c0016fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fa6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016faa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fac:	6b d2 28             	imul   edx,edx,0x28
c0016faf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016fb3:	31 d2                	xor    edx,edx
c0016fb5:	52                   	push   edx
c0016fb6:	50                   	push   eax
c0016fb7:	55                   	push   ebp
c0016fb8:	e8 33 61 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0016fbd:	83 c4 0c             	add    esp,0xc
c0016fc0:	6a 20                	push   0x20
c0016fc2:	6a 00                	push   0x0
c0016fc4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fcb:	51                   	push   ecx
c0016fcc:	e8 b3 96 fe ff       	call   c0000684 <memset>
c0016fd1:	59                   	pop    ecx
c0016fd2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fd5:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fd9:	52                   	push   edx
c0016fda:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fe1:	51                   	push   ecx
c0016fe2:	6a 00                	push   0x0
c0016fe4:	6a 1f                	push   0x1f
c0016fe6:	55                   	push   ebp
c0016fe7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fea:	83 c4 1c             	add    esp,0x1c
c0016fed:	6a 09                	push   0x9
c0016fef:	68 ce 46 02 c0       	push   0xc00246ce
c0016ff4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016ffb:	51                   	push   ecx
c0016ffc:	e8 7f 95 fe ff       	call   c0000580 <memcmp>
c0017001:	83 c4 10             	add    esp,0x10
c0017004:	85 c0                	test   eax,eax
c0017006:	75 21                	jne    c0017029 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001700c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017010:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017014:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017018:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001701b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017022:	89 d0                	mov    eax,edx
c0017024:	40                   	inc    eax
c0017025:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017029:	50                   	push   eax
c001702a:	6a 09                	push   0x9
c001702c:	68 d8 46 02 c0       	push   0xc00246d8
c0017031:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017038:	50                   	push   eax
c0017039:	e8 42 95 fe ff       	call   c0000580 <memcmp>
c001703e:	83 c4 10             	add    esp,0x10
c0017041:	85 c0                	test   eax,eax
c0017043:	75 21                	jne    c0017066 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017045:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017049:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001704d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017051:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017055:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017058:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001705f:	89 d0                	mov    eax,edx
c0017061:	40                   	inc    eax
c0017062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017066:	50                   	push   eax
c0017067:	50                   	push   eax
c0017068:	68 a4 46 02 c0       	push   0xc00246a4
c001706d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017074:	50                   	push   eax
c0017075:	e8 52 97 fe ff       	call   c00007cc <strcmp>
c001707a:	83 c4 10             	add    esp,0x10
c001707d:	85 c0                	test   eax,eax
c001707f:	75 0f                	jne    c0017090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017081:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017084:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001708c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017090:	50                   	push   eax
c0017091:	50                   	push   eax
c0017092:	68 ac 46 02 c0       	push   0xc00246ac
c0017097:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001709e:	50                   	push   eax
c001709f:	e8 28 97 fe ff       	call   c00007cc <strcmp>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	85 c0                	test   eax,eax
c00170a9:	75 0f                	jne    c00170ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00170ab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170ba:	43                   	inc    ebx
c00170bb:	e9 c6 fe ff ff       	jmp    c0016f86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170c0:	31 d2                	xor    edx,edx
c00170c2:	50                   	push   eax
c00170c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170c7:	52                   	push   edx
c00170c8:	50                   	push   eax
c00170c9:	55                   	push   ebp
c00170ca:	e8 21 60 ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c00170cf:	58                   	pop    eax
c00170d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170d4:	e8 ea 28 ff ff       	call   c00099c3 <malloc>
c00170d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170dc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170e0:	31 d2                	xor    edx,edx
c00170e2:	58                   	pop    eax
c00170e3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170e7:	53                   	push   ebx
c00170e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170f0:	52                   	push   edx
c00170f1:	50                   	push   eax
c00170f2:	55                   	push   ebp
c00170f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170f6:	83 c4 14             	add    esp,0x14
c00170f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170fd:	e8 c1 28 ff ff       	call   c00099c3 <malloc>
c0017102:	31 d2                	xor    edx,edx
c0017104:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017108:	83 c4 0c             	add    esp,0xc
c001710b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710f:	52                   	push   edx
c0017110:	50                   	push   eax
c0017111:	55                   	push   ebp
c0017112:	e8 d9 5f ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c0017117:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001711a:	31 d2                	xor    edx,edx
c001711c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001711f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017123:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017127:	52                   	push   edx
c0017128:	50                   	push   eax
c0017129:	55                   	push   ebp
c001712a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001712d:	83 c4 20             	add    esp,0x20
c0017130:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017138:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001713c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017140:	0f 84 0b 03 00 00    	je     c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017146:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001714d:	31 d2                	xor    edx,edx
c001714f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017153:	c1 e8 03             	shr    eax,0x3
c0017156:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001715a:	51                   	push   ecx
c001715b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001715f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017163:	52                   	push   edx
c0017164:	50                   	push   eax
c0017165:	55                   	push   ebp
c0017166:	e8 85 5f ff ff       	call   c000d0f0 <File::seek(unsigned long long)>
c001716b:	5b                   	pop    ebx
c001716c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017170:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017177:	e8 47 28 ff ff       	call   c00099c3 <malloc>
c001717c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001717f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017183:	31 d2                	xor    edx,edx
c0017185:	5e                   	pop    esi
c0017186:	8d 44 24 58          	lea    eax,[esp+0x58]
c001718a:	50                   	push   eax
c001718b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017193:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001719a:	52                   	push   edx
c001719b:	50                   	push   eax
c001719c:	55                   	push   ebp
c001719d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a0:	83 c4 20             	add    esp,0x20
c00171a3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00171af:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00171b3:	0f 8d 7c 02 00 00    	jge    c0017435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00171b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171c6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171d1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171d5:	89 d8                	mov    eax,ebx
c00171d7:	c1 e8 08             	shr    eax,0x8
c00171da:	89 c6                	mov    esi,eax
c00171dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171e0:	c1 e6 04             	shl    esi,0x4
c00171e3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171e7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171ea:	85 d2                	test   edx,edx
c00171ec:	0f 85 bf 00 00 00    	jne    c00172b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171f2:	83 ec 0c             	sub    esp,0xc
c00171f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171f9:	03 06                	add    eax,DWORD PTR [esi]
c00171fb:	50                   	push   eax
c00171fc:	e8 4b f8 ff ff       	call   c0016a4c <Thr::getAddressOfKernelSymbol(char const*)>
c0017201:	83 c4 10             	add    esp,0x10
c0017204:	89 c2                	mov    edx,eax
c0017206:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001720b:	85 c0                	test   eax,eax
c001720d:	0f 85 9e 00 00 00    	jne    c00172b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017213:	83 ec 0c             	sub    esp,0xc
c0017216:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001721a:	03 06                	add    eax,DWORD PTR [esi]
c001721c:	50                   	push   eax
c001721d:	e8 ee 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017222:	83 c4 10             	add    esp,0x10
c0017225:	89 c2                	mov    edx,eax
c0017227:	85 c0                	test   eax,eax
c0017229:	0f 85 82 00 00 00    	jne    c00172b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001722f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017233:	50                   	push   eax
c0017234:	50                   	push   eax
c0017235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017239:	03 06                	add    eax,DWORD PTR [esi]
c001723b:	50                   	push   eax
c001723c:	68 e2 46 02 c0       	push   0xc00246e2
c0017241:	e8 1e 58 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0017246:	58                   	pop    eax
c0017247:	5a                   	pop    edx
c0017248:	68 fc 46 02 c0       	push   0xc00246fc
c001724d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017254:	50                   	push   eax
c0017255:	e8 e6 94 fe ff       	call   c0000740 <strcpy>
c001725a:	59                   	pop    ecx
c001725b:	58                   	pop    eax
c001725c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017260:	03 06                	add    eax,DWORD PTR [esi]
c0017262:	50                   	push   eax
c0017263:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001726a:	50                   	push   eax
c001726b:	e8 10 96 fe ff       	call   c0000880 <strcat>
c0017270:	58                   	pop    eax
c0017271:	5a                   	pop    edx
c0017272:	68 92 47 02 c0       	push   0xc0024792
c0017277:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001727e:	50                   	push   eax
c001727f:	e8 fc 95 fe ff       	call   c0000880 <strcat>
c0017284:	83 c4 10             	add    esp,0x10
c0017287:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001728c:	0f 84 5d 01 00 00    	je     c00173ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001729c:	50                   	push   eax
c001729d:	e8 83 d0 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00172a9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172ad:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00172b1:	80 fb 01             	cmp    bl,0x1
c00172b4:	0f 85 88 00 00 00    	jne    c0017342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00172ba:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172c9:	01 ce                	add    esi,ecx
c00172cb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172d1:	0f 94 c0             	sete   al
c00172d4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172da:	0f 94 c3             	sete   bl
c00172dd:	09 c3                	or     ebx,eax
c00172df:	8b 06                	mov    eax,DWORD PTR [esi]
c00172e1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172e6:	74 41                	je     c0017329 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172e8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172eb:	84 db                	test   bl,bl
c00172ed:	75 15                	jne    c0017304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172f3:	66 83 f8 0c          	cmp    ax,0xc
c00172f7:	76 05                	jbe    c00172fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172f9:	b8 0c 00 00 00       	mov    eax,0xc
c00172fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017302:	76 37                	jbe    c001733b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017304:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017308:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001730d:	0f 84 dc 00 00 00    	je     c00173ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017313:	83 ec 0c             	sub    esp,0xc
c0017316:	68 13 47 02 c0       	push   0xc0024713
c001731b:	e8 05 d0 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017327:	eb 12                	jmp    c001733b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017329:	01 c1                	add    ecx,eax
c001732b:	84 db                	test   bl,bl
c001732d:	75 0c                	jne    c001733b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001732f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017333:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017337:	77 02                	ja     c001733b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017339:	01 d1                	add    ecx,edx
c001733b:	89 0e                	mov    DWORD PTR [esi],ecx
c001733d:	e9 ea 00 00 00       	jmp    c001742c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017342:	80 fb 02             	cmp    bl,0x2
c0017345:	75 7c                	jne    c00173c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017347:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001734e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017352:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017356:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001735c:	74 20                	je     c001737e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001735e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017364:	74 18                	je     c001737e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017366:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001736a:	b9 0a 00 00 00       	mov    ecx,0xa
c001736f:	66 83 f8 0e          	cmp    ax,0xe
c0017373:	77 03                	ja     c0017378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017375:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017378:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001737c:	76 1f                	jbe    c001739d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001737e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017382:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017387:	74 66                	je     c00173ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017389:	83 ec 0c             	sub    esp,0xc
c001738c:	68 2f 47 02 c0       	push   0xc002472f
c0017391:	e8 8f cf ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0017396:	83 c4 10             	add    esp,0x10
c0017399:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001739d:	8b 06                	mov    eax,DWORD PTR [esi]
c001739f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00173a4:	74 13                	je     c00173b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00173a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173aa:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00173b1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173b5:	01 c8                	add    eax,ecx
c00173b7:	eb 04                	jmp    c00173bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00173b9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173bd:	01 c2                	add    edx,eax
c00173bf:	89 16                	mov    DWORD PTR [esi],edx
c00173c1:	eb 69                	jmp    c001742c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173c3:	0f b6 db             	movzx  ebx,bl
c00173c6:	50                   	push   eax
c00173c7:	50                   	push   eax
c00173c8:	53                   	push   ebx
c00173c9:	68 4b 47 02 c0       	push   0xc002474b
c00173ce:	e8 91 56 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00173d3:	83 c4 10             	add    esp,0x10
c00173d6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173db:	74 12                	je     c00173ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173dd:	83 ec 0c             	sub    esp,0xc
c00173e0:	68 56 47 02 c0       	push   0xc0024756
c00173e5:	e8 3b cf ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00173ea:	83 c4 10             	add    esp,0x10
c00173ed:	eb 3d                	jmp    c001742c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173ef:	83 ec 0c             	sub    esp,0xc
c00173f2:	55                   	push   ebp
c00173f3:	e8 98 5c ff ff       	call   c000d090 <File::close()>
c00173f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017401:	59                   	pop    ecx
c0017402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017406:	e8 c8 25 ff ff       	call   c00099d3 <free>
c001740b:	5b                   	pop    ebx
c001740c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017410:	e8 be 25 ff ff       	call   c00099d3 <free>
c0017415:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017418:	e8 b6 25 ff ff       	call   c00099d3 <free>
c001741d:	5e                   	pop    esi
c001741e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017422:	e8 ac 25 ff ff       	call   c00099d3 <free>
c0017427:	83 c4 10             	add    esp,0x10
c001742a:	eb 21                	jmp    c001744d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001742c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017430:	e9 76 fd ff ff       	jmp    c00171ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017435:	83 ec 0c             	sub    esp,0xc
c0017438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001743c:	e8 92 25 ff ff       	call   c00099d3 <free>
c0017441:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	e9 eb fc ff ff       	jmp    c0017138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001744d:	31 c0                	xor    eax,eax
c001744f:	eb 33                	jmp    c0017484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017451:	83 ec 0c             	sub    esp,0xc
c0017454:	55                   	push   ebp
c0017455:	e8 36 5c ff ff       	call   c000d090 <File::close()>
c001745a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001745d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017460:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017463:	58                   	pop    eax
c0017464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017468:	e8 66 25 ff ff       	call   c00099d3 <free>
c001746d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017470:	e8 5e 25 ff ff       	call   c00099d3 <free>
c0017475:	5a                   	pop    edx
c0017476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747a:	e8 54 25 ff ff       	call   c00099d3 <free>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	b0 01                	mov    al,0x1
c0017484:	81 c4 5c 03 00 00    	add    esp,0x35c
c001748a:	5b                   	pop    ebx
c001748b:	5e                   	pop    esi
c001748c:	5f                   	pop    edi
c001748d:	5d                   	pop    ebp
c001748e:	c3                   	ret    

c001748f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001748f:	56                   	push   esi
c0017490:	31 d2                	xor    edx,edx
c0017492:	53                   	push   ebx
c0017493:	8b 1d 20 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027120
c0017499:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001749d:	39 d3                	cmp    ebx,edx
c001749f:	7e 1b                	jle    c00174bc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00174a1:	8b 04 95 40 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8cc0]
c00174a8:	39 c8                	cmp    eax,ecx
c00174aa:	77 0d                	ja     c00174b9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00174ac:	8b 34 95 40 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8ec0]
c00174b3:	01 c6                	add    esi,eax
c00174b5:	39 ce                	cmp    esi,ecx
c00174b7:	77 05                	ja     c00174be <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00174b9:	42                   	inc    edx
c00174ba:	eb e1                	jmp    c001749d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174bc:	31 c0                	xor    eax,eax
c00174be:	5b                   	pop    ebx
c00174bf:	5e                   	pop    esi
c00174c0:	c3                   	ret    

c00174c1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174c1:	53                   	push   ebx
c00174c2:	31 c0                	xor    eax,eax
c00174c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174c8:	8b 1d 20 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027120
c00174ce:	39 c3                	cmp    ebx,eax
c00174d0:	7e 22                	jle    c00174f4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174d2:	8b 14 85 40 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8cc0]
c00174d9:	39 ca                	cmp    edx,ecx
c00174db:	77 14                	ja     c00174f1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174dd:	03 14 85 40 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8ec0]
c00174e4:	39 ca                	cmp    edx,ecx
c00174e6:	76 09                	jbe    c00174f1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174e8:	8b 04 85 40 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ac0]
c00174ef:	eb 05                	jmp    c00174f6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174f1:	40                   	inc    eax
c00174f2:	eb da                	jmp    c00174ce <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174f4:	31 c0                	xor    eax,eax
c00174f6:	5b                   	pop    ebx
c00174f7:	c3                   	ret    

c00174f8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174f8:	53                   	push   ebx
c00174f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174fd:	53                   	push   ebx
c00174fe:	e8 8c ff ff ff       	call   c001748f <Thr::getDriverBaseFromAddress(unsigned long)>
c0017503:	5a                   	pop    edx
c0017504:	31 d2                	xor    edx,edx
c0017506:	85 c0                	test   eax,eax
c0017508:	74 04                	je     c001750e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001750a:	89 da                	mov    edx,ebx
c001750c:	29 c2                	sub    edx,eax
c001750e:	89 d0                	mov    eax,edx
c0017510:	5b                   	pop    ebx
c0017511:	c3                   	ret    

c0017512 <Thr::loadDLL(char const*, bool)>:
c0017512:	55                   	push   ebp
c0017513:	57                   	push   edi
c0017514:	56                   	push   esi
c0017515:	53                   	push   ebx
c0017516:	81 ec 34 01 00 00    	sub    esp,0x134
c001751c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017523:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001752a:	56                   	push   esi
c001752b:	68 6e 47 02 c0       	push   0xc002476e
c0017530:	e8 2f 55 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0017535:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001753c:	e8 82 24 ff ff       	call   c00099c3 <malloc>
c0017541:	83 c4 0c             	add    esp,0xc
c0017544:	89 c3                	mov    ebx,eax
c0017546:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c001754c:	56                   	push   esi
c001754d:	50                   	push   eax
c001754e:	e8 7b 5a ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	85 db                	test   ebx,ebx
c0017558:	75 3c                	jne    c0017596 <Thr::loadDLL(char const*, bool)+0x84>
c001755a:	89 f8                	mov    eax,edi
c001755c:	84 c0                	test   al,al
c001755e:	0f 84 d2 01 00 00    	je     c0017736 <Thr::loadDLL(char const*, bool)+0x224>
c0017564:	55                   	push   ebp
c0017565:	55                   	push   ebp
c0017566:	68 7f 47 02 c0       	push   0xc002477f
c001756b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001756f:	55                   	push   ebp
c0017570:	e8 cb 91 fe ff       	call   c0000740 <strcpy>
c0017575:	58                   	pop    eax
c0017576:	5a                   	pop    edx
c0017577:	56                   	push   esi
c0017578:	55                   	push   ebp
c0017579:	e8 02 93 fe ff       	call   c0000880 <strcat>
c001757e:	59                   	pop    ecx
c001757f:	58                   	pop    eax
c0017580:	68 92 47 02 c0       	push   0xc0024792
c0017585:	55                   	push   ebp
c0017586:	e8 f5 92 fe ff       	call   c0000880 <strcat>
c001758b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001758e:	e8 92 cd ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	51                   	push   ecx
c0017597:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001759b:	50                   	push   eax
c001759c:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175a0:	50                   	push   eax
c00175a1:	53                   	push   ebx
c00175a2:	e8 37 5d ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	85 db                	test   ebx,ebx
c00175ac:	74 0c                	je     c00175ba <Thr::loadDLL(char const*, bool)+0xa8>
c00175ae:	83 ec 0c             	sub    esp,0xc
c00175b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175b3:	53                   	push   ebx
c00175b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175bf:	75 0a                	jne    c00175cb <Thr::loadDLL(char const*, bool)+0xb9>
c00175c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175c5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175c9:	75 3c                	jne    c0017607 <Thr::loadDLL(char const*, bool)+0xf5>
c00175cb:	89 f8                	mov    eax,edi
c00175cd:	84 c0                	test   al,al
c00175cf:	0f 84 49 01 00 00    	je     c001771e <Thr::loadDLL(char const*, bool)+0x20c>
c00175d5:	51                   	push   ecx
c00175d6:	51                   	push   ecx
c00175d7:	68 7f 47 02 c0       	push   0xc002477f
c00175dc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175e0:	53                   	push   ebx
c00175e1:	e8 5a 91 fe ff       	call   c0000740 <strcpy>
c00175e6:	5d                   	pop    ebp
c00175e7:	58                   	pop    eax
c00175e8:	56                   	push   esi
c00175e9:	53                   	push   ebx
c00175ea:	e8 91 92 fe ff       	call   c0000880 <strcat>
c00175ef:	58                   	pop    eax
c00175f0:	5a                   	pop    edx
c00175f1:	68 92 47 02 c0       	push   0xc0024792
c00175f6:	53                   	push   ebx
c00175f7:	e8 84 92 fe ff       	call   c0000880 <strcat>
c00175fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175ff:	e8 21 cd ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	52                   	push   edx
c0017608:	6a 03                	push   0x3
c001760a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001760e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017612:	05 ff 0f 00 00       	add    eax,0xfff
c0017617:	83 d2 00             	adc    edx,0x0
c001761a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001761e:	50                   	push   eax
c001761f:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c0017625:	e8 08 48 ff ff       	call   c000be32 <VAS::allocatePages(int, int)>
c001762a:	59                   	pop    ecx
c001762b:	89 c3                	mov    ebx,eax
c001762d:	5d                   	pop    ebp
c001762e:	50                   	push   eax
c001762f:	68 d1 28 02 c0       	push   0xc00228d1
c0017634:	e8 2b 54 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0017639:	89 34 24             	mov    DWORD PTR [esp],esi
c001763c:	e8 5f 90 fe ff       	call   c00006a0 <strlen>
c0017641:	8b 2d 20 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027120
c0017647:	40                   	inc    eax
c0017648:	89 04 24             	mov    DWORD PTR [esp],eax
c001764b:	e8 73 23 ff ff       	call   c00099c3 <malloc>
c0017650:	89 04 ad 40 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8ac0],eax
c0017657:	58                   	pop    eax
c0017658:	a1 20 71 02 c0       	mov    eax,ds:0xc0027120
c001765d:	5a                   	pop    edx
c001765e:	56                   	push   esi
c001765f:	ff 34 85 40 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ac0]
c0017666:	e8 d5 90 fe ff       	call   c0000740 <strcpy>
c001766b:	a1 20 71 02 c0       	mov    eax,ds:0xc0027120
c0017670:	8d 50 01             	lea    edx,[eax+0x1]
c0017673:	89 1c 85 40 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8cc0],ebx
c001767a:	89 15 20 71 02 c0    	mov    DWORD PTR ds:0xc0027120,edx
c0017680:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017684:	83 c4 0c             	add    esp,0xc
c0017687:	89 14 85 40 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ec0],edx
c001768e:	6a 01                	push   0x1
c0017690:	53                   	push   ebx
c0017691:	56                   	push   esi
c0017692:	e8 c2 f6 ff ff       	call   c0016d59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017697:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001769b:	83 c4 10             	add    esp,0x10
c001769e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176a3:	0f 85 89 00 00 00    	jne    c0017732 <Thr::loadDLL(char const*, bool)+0x220>
c00176a9:	89 f8                	mov    eax,edi
c00176ab:	84 c0                	test   al,al
c00176ad:	74 73                	je     c0017722 <Thr::loadDLL(char const*, bool)+0x210>
c00176af:	83 ec 0c             	sub    esp,0xc
c00176b2:	68 94 47 02 c0       	push   0xc0024794
c00176b7:	e8 69 cc ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00176bc:	83 c4 10             	add    esp,0x10
c00176bf:	eb 61                	jmp    c0017722 <Thr::loadDLL(char const*, bool)+0x210>
c00176c1:	50                   	push   eax
c00176c2:	50                   	push   eax
c00176c3:	89 e8                	mov    eax,ebp
c00176c5:	c1 e0 0c             	shl    eax,0xc
c00176c8:	01 d8                	add    eax,ebx
c00176ca:	50                   	push   eax
c00176cb:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c00176d1:	e8 c4 42 ff ff       	call   c000b99a <VAS::getPageTableEntry(unsigned long)>
c00176d6:	83 c4 10             	add    esp,0x10
c00176d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00176db:	a8 60                	test   al,0x60
c00176dd:	75 11                	jne    c00176f0 <Thr::loadDLL(char const*, bool)+0x1de>
c00176df:	83 ec 0c             	sub    esp,0xc
c00176e2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176e7:	50                   	push   eax
c00176e8:	e8 6d 26 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	45                   	inc    ebp
c00176f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176f9:	05 ff 0f 00 00       	add    eax,0xfff
c00176fe:	bf 00 00 00 00       	mov    edi,0x0
c0017703:	83 d2 00             	adc    edx,0x0
c0017706:	0f ac d0 0c          	shrd   eax,edx,0xc
c001770a:	c1 ea 0c             	shr    edx,0xc
c001770d:	39 c5                	cmp    ebp,eax
c001770f:	89 d1                	mov    ecx,edx
c0017711:	89 f8                	mov    eax,edi
c0017713:	19 c8                	sbb    eax,ecx
c0017715:	72 aa                	jb     c00176c1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017717:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001771c:	75 18                	jne    c0017736 <Thr::loadDLL(char const*, bool)+0x224>
c001771e:	31 db                	xor    ebx,ebx
c0017720:	eb 14                	jmp    c0017736 <Thr::loadDLL(char const*, bool)+0x224>
c0017722:	83 ec 0c             	sub    esp,0xc
c0017725:	68 b3 47 02 c0       	push   0xc00247b3
c001772a:	e8 f6 cb ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	31 ed                	xor    ebp,ebp
c0017734:	eb bb                	jmp    c00176f1 <Thr::loadDLL(char const*, bool)+0x1df>
c0017736:	81 c4 2c 01 00 00    	add    esp,0x12c
c001773c:	89 d8                	mov    eax,ebx
c001773e:	5b                   	pop    ebx
c001773f:	5e                   	pop    esi
c0017740:	5f                   	pop    edi
c0017741:	5d                   	pop    ebp
c0017742:	c3                   	ret    

c0017743 <Thr::executeDLL(unsigned long, void*)>:
c0017743:	56                   	push   esi
c0017744:	53                   	push   ebx
c0017745:	52                   	push   edx
c0017746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001774a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001774e:	85 db                	test   ebx,ebx
c0017750:	75 10                	jne    c0017762 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017752:	83 ec 0c             	sub    esp,0xc
c0017755:	68 cf 47 02 c0       	push   0xc00247cf
c001775a:	e8 c6 cb ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	50                   	push   eax
c0017763:	50                   	push   eax
c0017764:	53                   	push   ebx
c0017765:	68 f9 47 02 c0       	push   0xc00247f9
c001776a:	e8 f5 52 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001776f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017773:	89 d8                	mov    eax,ebx
c0017775:	83 c4 14             	add    esp,0x14
c0017778:	5b                   	pop    ebx
c0017779:	5e                   	pop    esi
c001777a:	ff e0                	jmp    eax

c001777c <userModeEntryPoint(void*)>:
c001777c:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0017781:	48                   	dec    eax
c0017782:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0017787:	75 03                	jne    c001778c <userModeEntryPoint(void*)+0x10>
c0017789:	fb                   	sti    
c001778a:	66 90                	xchg   ax,ax
c001778c:	fb                   	sti    
c001778d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017792:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017795:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001779b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001779f:	e9 bb 8a fe ff       	jmp    c000025f <goToUsermode>

c00177a4 <changeTSS>:
c00177a4:	83 ec 14             	sub    esp,0x14
c00177a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177af:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00177b4:	c1 e2 15             	shl    edx,0x15
c00177b7:	29 d0                	sub    eax,edx
c00177b9:	50                   	push   eax
c00177ba:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00177bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177c5:	05 7c 11 00 00       	add    eax,0x117c
c00177ca:	50                   	push   eax
c00177cb:	e8 0c 38 ff ff       	call   c000afdc <TSS::setESP(unsigned long)>
c00177d0:	83 c4 1c             	add    esp,0x1c
c00177d3:	c3                   	ret    

c00177d4 <switchToThread(ThreadControlBlock*)>:
c00177d4:	57                   	push   edi
c00177d5:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00177da:	56                   	push   esi
c00177db:	85 c0                	test   eax,eax
c00177dd:	53                   	push   ebx
c00177de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177e2:	0f 85 90 00 00 00    	jne    c0017878 <switchToThread(ThreadControlBlock*)+0xa4>
c00177e8:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177eb:	3c ff                	cmp    al,0xff
c00177ed:	0f 84 81 00 00 00    	je     c0017874 <switchToThread(ThreadControlBlock*)+0xa0>
c00177f3:	0f b6 d0             	movzx  edx,al
c00177f6:	b8 00 04 00 00       	mov    eax,0x400
c00177fb:	29 d0                	sub    eax,edx
c00177fd:	d1 f8                	sar    eax,1
c00177ff:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017802:	66 90                	xchg   ax,ax
c0017804:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017807:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001780c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017812:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017819:	74 4d                	je     c0017868 <switchToThread(ThreadControlBlock*)+0x94>
c001781b:	0f 31                	rdtsc  
c001781d:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0017822:	89 c6                	mov    esi,eax
c0017824:	89 d7                	mov    edi,edx
c0017826:	2b 35 18 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027918
c001782c:	89 15 2c 79 02 c0    	mov    DWORD PTR ds:0xc002792c,edx
c0017832:	1b 3d 1c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002791c
c0017838:	89 35 20 79 02 c0    	mov    DWORD PTR ds:0xc0027920,esi
c001783e:	a3 18 79 02 c0       	mov    ds:0xc0027918,eax
c0017843:	89 3d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,edi
c0017849:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001784f:	89 15 1c 79 02 c0    	mov    DWORD PTR ds:0xc002791c,edx
c0017855:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017858:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001785b:	01 c6                	add    esi,eax
c001785d:	11 d7                	adc    edi,edx
c001785f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017862:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001786c:	5b                   	pop    ebx
c001786d:	5e                   	pop    esi
c001786e:	5f                   	pop    edi
c001786f:	e9 23 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017874:	31 c0                	xor    eax,eax
c0017876:	eb 8c                	jmp    c0017804 <switchToThread(ThreadControlBlock*)+0x30>
c0017878:	5b                   	pop    ebx
c0017879:	c7 05 e0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x1
c0017883:	5e                   	pop    esi
c0017884:	5f                   	pop    edi
c0017885:	c3                   	ret    
c0017886:	66 90                	xchg   ax,ax

c0017888 <Process::addArgs(char**)>:
c0017888:	57                   	push   edi
c0017889:	56                   	push   esi
c001788a:	53                   	push   ebx
c001788b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001788f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017893:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001789d:	85 ff                	test   edi,edi
c001789f:	74 43                	je     c00178e4 <Process::addArgs(char**)+0x5c>
c00178a1:	8b 07                	mov    eax,DWORD PTR [edi]
c00178a3:	85 c0                	test   eax,eax
c00178a5:	74 3d                	je     c00178e4 <Process::addArgs(char**)+0x5c>
c00178a7:	31 db                	xor    ebx,ebx
c00178a9:	8d 76 00             	lea    esi,[esi+0x0]
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	50                   	push   eax
c00178b0:	e8 eb 8d fe ff       	call   c00006a0 <strlen>
c00178b5:	40                   	inc    eax
c00178b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00178b9:	e8 05 21 ff ff       	call   c00099c3 <malloc>
c00178be:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00178c5:	5a                   	pop    edx
c00178c6:	59                   	pop    ecx
c00178c7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178ca:	43                   	inc    ebx
c00178cb:	50                   	push   eax
c00178cc:	e8 6f 8e fe ff       	call   c0000740 <strcpy>
c00178d1:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178dd:	85 c0                	test   eax,eax
c00178df:	75 cb                	jne    c00178ac <Process::addArgs(char**)+0x24>
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	5b                   	pop    ebx
c00178e5:	5e                   	pop    esi
c00178e6:	5f                   	pop    edi
c00178e7:	c3                   	ret    

c00178e8 <Process::Process(char const*, Process*, char**)>:
c00178e8:	56                   	push   esi
c00178e9:	53                   	push   ebx
c00178ea:	83 ec 14             	sub    esp,0x14
c00178ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f1:	05 0c 02 00 00       	add    eax,0x20c
c00178f6:	bb 07 00 00 00       	mov    ebx,0x7
c00178fb:	89 c6                	mov    esi,eax
c00178fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017900:	85 db                	test   ebx,ebx
c0017902:	78 14                	js     c0017918 <Process::Process(char const*, Process*, char**)+0x30>
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	56                   	push   esi
c0017908:	e8 23 9f 00 00       	call   c0021830 <ThreadControlBlock::ThreadControlBlock()>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	83 c6 5f             	add    esi,0x5f
c0017913:	4b                   	dec    ebx
c0017914:	eb ea                	jmp    c0017900 <Process::Process(char const*, Process*, char**)+0x18>
c0017916:	66 90                	xchg   ax,ax
c0017918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017923:	83 ec 0c             	sub    esp,0xc
c0017926:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792a:	e8 7f c8 ff ff       	call   c00141ae <Krnl::newProcessEnv(Process*)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	89 c2                	mov    edx,eax
c0017934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017938:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001793e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017942:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001794b:	a1 10 5e 02 c0       	mov    eax,ds:0xc0025e10
c0017950:	8d 50 01             	lea    edx,[eax+0x1]
c0017953:	89 15 10 5e 02 c0    	mov    DWORD PTR ds:0xc0025e10,edx
c0017959:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001795d:	89 02                	mov    DWORD PTR [edx],eax
c001795f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017967:	83 ec 0c             	sub    esp,0xc
c001796a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001796e:	e8 50 20 ff ff       	call   c00099c3 <malloc>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	89 c3                	mov    ebx,eax
c0017978:	83 ec 08             	sub    esp,0x8
c001797b:	6a 00                	push   0x0
c001797d:	53                   	push   ebx
c001797e:	e8 57 48 ff ff       	call   c000c1da <VAS::VAS(bool)>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017994:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001799e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179a6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00179ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179b6:	85 c0                	test   eax,eax
c00179b8:	74 42                	je     c00179fc <Process::Process(char const*, Process*, char**)+0x114>
c00179ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179be:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179c4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ce:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179de:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	05 0c 01 00 00       	add    eax,0x10c
c00179ed:	83 ec 08             	sub    esp,0x8
c00179f0:	52                   	push   edx
c00179f1:	50                   	push   eax
c00179f2:	e8 49 8d fe ff       	call   c0000740 <strcpy>
c00179f7:	83 c4 10             	add    esp,0x10
c00179fa:	eb 64                	jmp    c0017a60 <Process::Process(char const*, Process*, char**)+0x178>
c00179fc:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a04:	83 ec 0c             	sub    esp,0xc
c0017a07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a0b:	e8 b3 1f ff ff       	call   c00099c3 <malloc>
c0017a10:	83 c4 10             	add    esp,0x10
c0017a13:	89 c3                	mov    ebx,eax
c0017a15:	83 ec 08             	sub    esp,0x8
c0017a18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a1c:	53                   	push   ebx
c0017a1d:	e8 ca 32 ff ff       	call   c000acec <VgaText::VgaText(char const*)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a29:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a39:	83 ec 0c             	sub    esp,0xc
c0017a3c:	50                   	push   eax
c0017a3d:	e8 69 2a ff ff       	call   c000a4ab <addToTerminalCycle(VgaText*)>
c0017a42:	83 c4 10             	add    esp,0x10
c0017a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a49:	05 0c 01 00 00       	add    eax,0x10c
c0017a4e:	83 ec 08             	sub    esp,0x8
c0017a51:	68 18 48 02 c0       	push   0xc0024818
c0017a56:	50                   	push   eax
c0017a57:	e8 e4 8c fe ff       	call   c0000740 <strcpy>
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	90                   	nop
c0017a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a64:	83 c0 0c             	add    eax,0xc
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a6e:	50                   	push   eax
c0017a6f:	e8 cc 8c fe ff       	call   c0000740 <strcpy>
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	83 ec 08             	sub    esp,0x8
c0017a7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a82:	e8 01 fe ff ff       	call   c0017888 <Process::addArgs(char**)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	83 ec 08             	sub    esp,0x8
c0017a8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a95:	e8 89 ed ff ff       	call   c0016823 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a9a:	83 c4 10             	add    esp,0x10
c0017a9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017aa1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017aa5:	83 f0 01             	xor    eax,0x1
c0017aa8:	88 c2                	mov    dl,al
c0017aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aae:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017ab4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ab9:	83 ec 08             	sub    esp,0x8
c0017abc:	50                   	push   eax
c0017abd:	68 70 48 02 c0       	push   0xc0024870
c0017ac2:	e8 9d 4f ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	90                   	nop
c0017acb:	83 c4 14             	add    esp,0x14
c0017ace:	5b                   	pop    ebx
c0017acf:	5e                   	pop    esi
c0017ad0:	c3                   	ret    
c0017ad1:	90                   	nop
c0017ad2:	66 90                	xchg   ax,ax

c0017ad4 <Process::Process(bool, char const*, Process*, char**)>:
c0017ad4:	56                   	push   esi
c0017ad5:	53                   	push   ebx
c0017ad6:	83 ec 24             	sub    esp,0x24
c0017ad9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017add:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae5:	05 0c 02 00 00       	add    eax,0x20c
c0017aea:	bb 07 00 00 00       	mov    ebx,0x7
c0017aef:	89 c6                	mov    esi,eax
c0017af1:	8d 76 00             	lea    esi,[esi+0x0]
c0017af4:	85 db                	test   ebx,ebx
c0017af6:	78 14                	js     c0017b0c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017af8:	83 ec 0c             	sub    esp,0xc
c0017afb:	56                   	push   esi
c0017afc:	e8 2f 9d 00 00       	call   c0021830 <ThreadControlBlock::ThreadControlBlock()>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	83 c6 5f             	add    esi,0x5f
c0017b07:	4b                   	dec    ebx
c0017b08:	eb ea                	jmp    c0017af4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b0a:	66 90                	xchg   ax,ax
c0017b0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b10:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b17:	83 ec 0c             	sub    esp,0xc
c0017b1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b1e:	e8 8b c6 ff ff       	call   c00141ae <Krnl::newProcessEnv(Process*)>
c0017b23:	83 c4 10             	add    esp,0x10
c0017b26:	89 c2                	mov    edx,eax
c0017b28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b3f:	a1 10 5e 02 c0       	mov    eax,ds:0xc0025e10
c0017b44:	8d 50 01             	lea    edx,[eax+0x1]
c0017b47:	89 15 10 5e 02 c0    	mov    DWORD PTR ds:0xc0025e10,edx
c0017b4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b51:	89 02                	mov    DWORD PTR [edx],eax
c0017b53:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b62:	e8 5c 1e ff ff       	call   c00099c3 <malloc>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	89 c3                	mov    ebx,eax
c0017b6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b71:	83 ec 08             	sub    esp,0x8
c0017b74:	50                   	push   eax
c0017b75:	53                   	push   ebx
c0017b76:	e8 5f 46 ff ff       	call   c000c1da <VAS::VAS(bool)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b82:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017b9e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bae:	85 c0                	test   eax,eax
c0017bb0:	74 42                	je     c0017bf4 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bbc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017bc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017bcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bd6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017bdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be0:	05 0c 01 00 00       	add    eax,0x10c
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	52                   	push   edx
c0017be9:	50                   	push   eax
c0017bea:	e8 51 8b fe ff       	call   c0000740 <strcpy>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	eb 64                	jmp    c0017c58 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bf4:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017bfc:	83 ec 0c             	sub    esp,0xc
c0017bff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c03:	e8 bb 1d ff ff       	call   c00099c3 <malloc>
c0017c08:	83 c4 10             	add    esp,0x10
c0017c0b:	89 c3                	mov    ebx,eax
c0017c0d:	83 ec 08             	sub    esp,0x8
c0017c10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c14:	53                   	push   ebx
c0017c15:	e8 d2 30 ff ff       	call   c000acec <VgaText::VgaText(char const*)>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	50                   	push   eax
c0017c35:	e8 71 28 ff ff       	call   c000a4ab <addToTerminalCycle(VgaText*)>
c0017c3a:	83 c4 10             	add    esp,0x10
c0017c3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c41:	05 0c 01 00 00       	add    eax,0x10c
c0017c46:	83 ec 08             	sub    esp,0x8
c0017c49:	68 18 48 02 c0       	push   0xc0024818
c0017c4e:	50                   	push   eax
c0017c4f:	e8 ec 8a fe ff       	call   c0000740 <strcpy>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	90                   	nop
c0017c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5c:	83 c0 0c             	add    eax,0xc
c0017c5f:	83 ec 08             	sub    esp,0x8
c0017c62:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c66:	50                   	push   eax
c0017c67:	e8 d4 8a fe ff       	call   c0000740 <strcpy>
c0017c6c:	83 c4 10             	add    esp,0x10
c0017c6f:	83 ec 08             	sub    esp,0x8
c0017c72:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c7a:	e8 09 fc ff ff       	call   c0017888 <Process::addArgs(char**)>
c0017c7f:	83 c4 10             	add    esp,0x10
c0017c82:	90                   	nop
c0017c83:	83 c4 24             	add    esp,0x24
c0017c86:	5b                   	pop    ebx
c0017c87:	5e                   	pop    esi
c0017c88:	c3                   	ret    
c0017c89:	8d 76 00             	lea    esi,[esi+0x0]

c0017c8c <taskStartupFunction>:
c0017c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c91:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c94:	c3                   	ret    
c0017c95:	90                   	nop
c0017c96:	66 90                	xchg   ax,ax

c0017c98 <Semaphore::Semaphore(int)>:
c0017c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca0:	89 10                	mov    DWORD PTR [eax],edx
c0017ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cc3:	90                   	nop
c0017cc4:	c3                   	ret    
c0017cc5:	90                   	nop
c0017cc6:	66 90                	xchg   ax,ax

c0017cc8 <Mutex::Mutex()>:
c0017cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ccc:	6a 01                	push   0x1
c0017cce:	50                   	push   eax
c0017ccf:	e8 c4 ff ff ff       	call   c0017c98 <Semaphore::Semaphore(int)>
c0017cd4:	83 c4 08             	add    esp,0x8
c0017cd7:	90                   	nop
c0017cd8:	c3                   	ret    
c0017cd9:	90                   	nop
c0017cda:	66 90                	xchg   ax,ax

c0017cdc <Process::createThread(void (*)(void*), void*, int)>:
c0017cdc:	57                   	push   edi
c0017cdd:	31 c9                	xor    ecx,ecx
c0017cdf:	56                   	push   esi
c0017ce0:	53                   	push   ebx
c0017ce1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ce5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cec:	89 f2                	mov    edx,esi
c0017cee:	66 90                	xchg   ax,ax
c0017cf0:	0f b7 c2             	movzx  eax,dx
c0017cf3:	83 e2 01             	and    edx,0x1
c0017cf6:	74 14                	je     c0017d0c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017cf8:	d1 f8                	sar    eax,1
c0017cfa:	41                   	inc    ecx
c0017cfb:	89 c2                	mov    edx,eax
c0017cfd:	83 f9 10             	cmp    ecx,0x10
c0017d00:	75 ee                	jne    c0017cf0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d02:	31 db                	xor    ebx,ebx
c0017d04:	89 d8                	mov    eax,ebx
c0017d06:	5b                   	pop    ebx
c0017d07:	5e                   	pop    esi
c0017d08:	5f                   	pop    edi
c0017d09:	c3                   	ret    
c0017d0a:	66 90                	xchg   ax,ax
c0017d0c:	b8 01 00 00 00       	mov    eax,0x1
c0017d11:	d3 e0                	shl    eax,cl
c0017d13:	09 c6                	or     esi,eax
c0017d15:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d18:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d1f:	01 c0                	add    eax,eax
c0017d21:	01 c8                	add    eax,ecx
c0017d23:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d26:	01 d8                	add    eax,ebx
c0017d28:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d2f:	75 0b                	jne    c0017d3c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d31:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d3b:	90                   	nop
c0017d3c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d42:	83 ec 08             	sub    esp,0x8
c0017d45:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d48:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d4b:	01 c0                	add    eax,eax
c0017d4d:	01 c8                	add    eax,ecx
c0017d4f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d52:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d55:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d5b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d65:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d6b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d71:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d78:	89 ca                	mov    edx,ecx
c0017d7a:	f7 da                	neg    edx
c0017d7c:	c1 e2 15             	shl    edx,0x15
c0017d7f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d85:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d8f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d99:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017d9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017da3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017da9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017db3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dbd:	53                   	push   ebx
c0017dbe:	68 04 79 02 c0       	push   0xc0027904
c0017dc3:	e8 08 98 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	89 d8                	mov    eax,ebx
c0017dcd:	5b                   	pop    ebx
c0017dce:	5e                   	pop    esi
c0017dcf:	5f                   	pop    edi
c0017dd0:	c3                   	ret    
c0017dd1:	90                   	nop
c0017dd2:	66 90                	xchg   ax,ax

c0017dd4 <Process::createUserThread()>:
c0017dd4:	83 ec 0c             	sub    esp,0xc
c0017dd7:	68 80 00 00 00       	push   0x80
c0017ddc:	6a 00                	push   0x0
c0017dde:	68 7c 77 01 c0       	push   0xc001777c
c0017de3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017de7:	e8 f0 fe ff ff       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c0017dec:	83 c4 1c             	add    esp,0x1c
c0017def:	c3                   	ret    

c0017df0 <setupMultitasking(void (*)())>:
c0017df0:	56                   	push   esi
c0017df1:	53                   	push   ebx
c0017df2:	51                   	push   ecx
c0017df3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017df7:	eb 13                	jmp    c0017e0c <setupMultitasking(void (*)())+0x1c>
c0017df9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	68 04 79 02 c0       	push   0xc0027904
c0017e04:	e8 0f 97 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e09:	83 c4 10             	add    esp,0x10
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	68 04 79 02 c0       	push   0xc0027904
c0017e14:	e8 db 96 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	84 c0                	test   al,al
c0017e1e:	74 dc                	je     c0017dfc <setupMultitasking(void (*)())+0xc>
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	68 1f 07 00 00       	push   0x71f
c0017e28:	e8 96 1b ff ff       	call   c00099c3 <malloc>
c0017e2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e34:	89 c3                	mov    ebx,eax
c0017e36:	6a 00                	push   0x0
c0017e38:	68 1c 48 02 c0       	push   0xc002481c
c0017e3d:	6a 01                	push   0x1
c0017e3f:	50                   	push   eax
c0017e40:	e8 8f fc ff ff       	call   c0017ad4 <Process::Process(bool, char const*, Process*, char**)>
c0017e45:	83 c4 14             	add    esp,0x14
c0017e48:	89 1d 10 79 02 c0    	mov    DWORD PTR ds:0xc0027910,ebx
c0017e4e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e54:	e8 60 29 ff ff       	call   c000a7b9 <setActiveTerminal(VgaText*)>
c0017e59:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e61:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e6b:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e71:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e74:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e7e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e84:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e8a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e94:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017e9e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017ea8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017eae:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017eb8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ebe:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ec8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ece:	58                   	pop    eax
c0017ecf:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ed5:	5a                   	pop    edx
c0017ed6:	68 18 48 02 c0       	push   0xc0024818
c0017edb:	50                   	push   eax
c0017edc:	e8 5f 88 fe ff       	call   c0000740 <strcpy>
c0017ee1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017ee8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017eec:	83 c4 14             	add    esp,0x14
c0017eef:	5b                   	pop    ebx
c0017ef0:	5e                   	pop    esi
c0017ef1:	e9 93 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017ef6:	66 90                	xchg   ax,ax

c0017ef8 <schedule()>:
c0017ef8:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c0017efd:	85 c0                	test   eax,eax
c0017eff:	74 0b                	je     c0017f0c <schedule()+0x14>
c0017f01:	c7 05 e0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x1
c0017f0b:	c3                   	ret    
c0017f0c:	53                   	push   ebx
c0017f0d:	83 ec 14             	sub    esp,0x14
c0017f10:	68 04 79 02 c0       	push   0xc0027904
c0017f15:	e8 da 95 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	84 c0                	test   al,al
c0017f1f:	75 3b                	jne    c0017f5c <schedule()+0x64>
c0017f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f29:	4a                   	dec    edx
c0017f2a:	74 38                	je     c0017f64 <schedule()+0x6c>
c0017f2c:	83 ec 0c             	sub    esp,0xc
c0017f2f:	68 04 79 02 c0       	push   0xc0027904
c0017f34:	e8 d7 95 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f39:	c7 04 24 04 79 02 c0 	mov    DWORD PTR [esp],0xc0027904
c0017f40:	89 c3                	mov    ebx,eax
c0017f42:	e8 d1 95 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f47:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f51:	e8 7e f8 ff ff       	call   c00177d4 <switchToThread(ThreadControlBlock*)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	8d 76 00             	lea    esi,[esi+0x0]
c0017f5c:	83 c4 08             	add    esp,0x8
c0017f5f:	5b                   	pop    ebx
c0017f60:	c3                   	ret    
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	83 ec 08             	sub    esp,0x8
c0017f67:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f6e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f74:	68 04 79 02 c0       	push   0xc0027904
c0017f79:	e8 52 96 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	eb a9                	jmp    c0017f2c <schedule()+0x34>
c0017f83:	90                   	nop

c0017f84 <Semaphore::tryAcquire()>:
c0017f84:	53                   	push   ebx
c0017f85:	83 ec 08             	sub    esp,0x8
c0017f88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f8c:	fa                   	cli    
c0017f8d:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0017f92:	8d 50 01             	lea    edx,[eax+0x1]
c0017f95:	89 15 e8 78 02 c0    	mov    DWORD PTR ds:0xc00278e8,edx
c0017f9b:	8b 15 e4 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278e4
c0017fa1:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017fa4:	89 1d e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,ebx
c0017faa:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017fad:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017faf:	7c 33                	jl     c0017fe4 <Semaphore::tryAcquire()+0x60>
c0017fb1:	89 15 e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,edx
c0017fb7:	85 d2                	test   edx,edx
c0017fb9:	75 0d                	jne    c0017fc8 <Semaphore::tryAcquire()+0x44>
c0017fbb:	8b 15 e0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278e0
c0017fc1:	85 d2                	test   edx,edx
c0017fc3:	75 6b                	jne    c0018030 <Semaphore::tryAcquire()+0xac>
c0017fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc8:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0017fcd:	85 c0                	test   eax,eax
c0017fcf:	74 0b                	je     c0017fdc <Semaphore::tryAcquire()+0x58>
c0017fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd4:	31 c0                	xor    eax,eax
c0017fd6:	83 c4 08             	add    esp,0x8
c0017fd9:	5b                   	pop    ebx
c0017fda:	c3                   	ret    
c0017fdb:	90                   	nop
c0017fdc:	fb                   	sti    
c0017fdd:	83 c4 08             	add    esp,0x8
c0017fe0:	5b                   	pop    ebx
c0017fe1:	c3                   	ret    
c0017fe2:	66 90                	xchg   ax,ax
c0017fe4:	43                   	inc    ebx
c0017fe5:	89 15 e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,edx
c0017feb:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017fee:	85 d2                	test   edx,edx
c0017ff0:	75 22                	jne    c0018014 <Semaphore::tryAcquire()+0x90>
c0017ff2:	8b 0d e0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278e0
c0017ff8:	85 c9                	test   ecx,ecx
c0017ffa:	74 18                	je     c0018014 <Semaphore::tryAcquire()+0x90>
c0017ffc:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c0018006:	e8 ed fe ff ff       	call   c0017ef8 <schedule()>
c001800b:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018010:	48                   	dec    eax
c0018011:	8d 76 00             	lea    esi,[esi+0x0]
c0018014:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018019:	85 c0                	test   eax,eax
c001801b:	75 0b                	jne    c0018028 <Semaphore::tryAcquire()+0xa4>
c001801d:	fb                   	sti    
c001801e:	b0 01                	mov    al,0x1
c0018020:	83 c4 08             	add    esp,0x8
c0018023:	5b                   	pop    ebx
c0018024:	c3                   	ret    
c0018025:	8d 76 00             	lea    esi,[esi+0x0]
c0018028:	b0 01                	mov    al,0x1
c001802a:	83 c4 08             	add    esp,0x8
c001802d:	5b                   	pop    ebx
c001802e:	c3                   	ret    
c001802f:	90                   	nop
c0018030:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c001803a:	e8 b9 fe ff ff       	call   c0017ef8 <schedule()>
c001803f:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018044:	48                   	dec    eax
c0018045:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001804a:	85 c0                	test   eax,eax
c001804c:	75 86                	jne    c0017fd4 <Semaphore::tryAcquire()+0x50>
c001804e:	eb 8c                	jmp    c0017fdc <Semaphore::tryAcquire()+0x58>

c0018050 <Semaphore::assertLocked(char const*)>:
c0018050:	83 ec 0c             	sub    esp,0xc
c0018053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018057:	fa                   	cli    
c0018058:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001805e:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c0018063:	8d 48 01             	lea    ecx,[eax+0x1]
c0018066:	89 0d e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,ecx
c001806c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001806e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018071:	7c 29                	jl     c001809c <Semaphore::assertLocked(char const*)+0x4c>
c0018073:	90                   	nop
c0018074:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c0018079:	85 c0                	test   eax,eax
c001807b:	75 0b                	jne    c0018088 <Semaphore::assertLocked(char const*)+0x38>
c001807d:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c0018082:	85 c0                	test   eax,eax
c0018084:	75 2e                	jne    c00180b4 <Semaphore::assertLocked(char const*)+0x64>
c0018086:	66 90                	xchg   ax,ax
c0018088:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001808d:	48                   	dec    eax
c001808e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018093:	75 03                	jne    c0018098 <Semaphore::assertLocked(char const*)+0x48>
c0018095:	fb                   	sti    
c0018096:	66 90                	xchg   ax,ax
c0018098:	83 c4 0c             	add    esp,0xc
c001809b:	c3                   	ret    
c001809c:	83 ec 0c             	sub    esp,0xc
c001809f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180a3:	e8 7d c2 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00180a8:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	48                   	dec    eax
c00180b1:	eb c1                	jmp    c0018074 <Semaphore::assertLocked(char const*)+0x24>
c00180b3:	90                   	nop
c00180b4:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00180be:	e8 35 fe ff ff       	call   c0017ef8 <schedule()>
c00180c3:	eb c3                	jmp    c0018088 <Semaphore::assertLocked(char const*)+0x38>
c00180c5:	8d 76 00             	lea    esi,[esi+0x0]

c00180c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180d7:	e8 1c fe ff ff       	call   c0017ef8 <schedule()>
c00180dc:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00180e1:	48                   	dec    eax
c00180e2:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00180e7:	75 03                	jne    c00180ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180e9:	fb                   	sti    
c00180ea:	66 90                	xchg   ax,ax
c00180ec:	83 c4 0c             	add    esp,0xc
c00180ef:	c3                   	ret    

c00180f0 <blockTask(TaskState)>:
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	fa                   	cli    
c00180f4:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00180fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018103:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018106:	e8 ed fd ff ff       	call   c0017ef8 <schedule()>
c001810b:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018110:	48                   	dec    eax
c0018111:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018116:	75 04                	jne    c001811c <blockTask(TaskState)+0x2c>
c0018118:	fb                   	sti    
c0018119:	8d 76 00             	lea    esi,[esi+0x0]
c001811c:	83 c4 0c             	add    esp,0xc
c001811f:	c3                   	ret    

c0018120 <waitTask(int, int*, int)>:
c0018120:	83 ec 18             	sub    esp,0x18
c0018123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018128:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001812c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001812f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018138:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001813b:	6a 07                	push   0x7
c001813d:	e8 ae ff ff ff       	call   c00180f0 <blockTask(TaskState)>
c0018142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001814d:	85 d2                	test   edx,edx
c001814f:	74 0b                	je     c001815c <waitTask(int, int*, int)+0x3c>
c0018151:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018154:	89 02                	mov    DWORD PTR [edx],eax
c0018156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001815b:	90                   	nop
c001815c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001815f:	83 c4 0c             	add    esp,0xc
c0018162:	c3                   	ret    
c0018163:	90                   	nop

c0018164 <milliTenthSleepUntil(unsigned int)>:
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816b:	39 05 4c 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a4c,eax
c0018171:	76 05                	jbe    c0018178 <milliTenthSleepUntil(unsigned int)+0x14>
c0018173:	90                   	nop
c0018174:	83 c4 0c             	add    esp,0xc
c0018177:	c3                   	ret    
c0018178:	fa                   	cli    
c0018179:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001817f:	83 ec 08             	sub    esp,0x8
c0018182:	ff 05 e4 78 02 c0    	inc    DWORD PTR ds:0xc00278e4
c0018188:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001818e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018191:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018197:	68 f8 78 02 c0       	push   0xc00278f8
c001819c:	e8 2f 94 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181a1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00181a8:	e8 43 ff ff ff       	call   c00180f0 <blockTask(TaskState)>
c00181ad:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	48                   	dec    eax
c00181b6:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c00181bb:	85 c0                	test   eax,eax
c00181bd:	75 09                	jne    c00181c8 <milliTenthSleepUntil(unsigned int)+0x64>
c00181bf:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c00181c4:	85 c0                	test   eax,eax
c00181c6:	75 14                	jne    c00181dc <milliTenthSleepUntil(unsigned int)+0x78>
c00181c8:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00181cd:	48                   	dec    eax
c00181ce:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00181d3:	75 9f                	jne    c0018174 <milliTenthSleepUntil(unsigned int)+0x10>
c00181d5:	fb                   	sti    
c00181d6:	83 c4 0c             	add    esp,0xc
c00181d9:	c3                   	ret    
c00181da:	66 90                	xchg   ax,ax
c00181dc:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00181e6:	e8 0d fd ff ff       	call   c0017ef8 <schedule()>
c00181eb:	eb db                	jmp    c00181c8 <milliTenthSleepUntil(unsigned int)+0x64>
c00181ed:	8d 76 00             	lea    esi,[esi+0x0]

c00181f0 <milliTenthSleep(unsigned int)>:
c00181f0:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00181f5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00181f9:	e9 66 ff ff ff       	jmp    c0018164 <milliTenthSleepUntil(unsigned int)>
c00181fe:	66 90                	xchg   ax,ax

c0018200 <sleep(unsigned int)>:
c0018200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018204:	8d 04 80             	lea    eax,[eax+eax*4]
c0018207:	8d 04 80             	lea    eax,[eax+eax*4]
c001820a:	8d 04 80             	lea    eax,[eax+eax*4]
c001820d:	8d 04 80             	lea    eax,[eax+eax*4]
c0018210:	c1 e0 04             	shl    eax,0x4
c0018213:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018217:	eb d7                	jmp    c00181f0 <milliTenthSleep(unsigned int)>
c0018219:	90                   	nop
c001821a:	66 90                	xchg   ax,ax

c001821c <Semaphore::acquire()>:
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018223:	fa                   	cli    
c0018224:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c0018229:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001822f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018232:	89 0d e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,ecx
c0018238:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001823b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001823d:	7d 2d                	jge    c001826c <Semaphore::acquire()+0x50>
c001823f:	41                   	inc    ecx
c0018240:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018243:	90                   	nop
c0018244:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c0018249:	85 c0                	test   eax,eax
c001824b:	75 0b                	jne    c0018258 <Semaphore::acquire()+0x3c>
c001824d:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c0018252:	85 c0                	test   eax,eax
c0018254:	75 62                	jne    c00182b8 <Semaphore::acquire()+0x9c>
c0018256:	66 90                	xchg   ax,ax
c0018258:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001825d:	48                   	dec    eax
c001825e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018263:	75 03                	jne    c0018268 <Semaphore::acquire()+0x4c>
c0018265:	fb                   	sti    
c0018266:	66 90                	xchg   ax,ax
c0018268:	83 c4 0c             	add    esp,0xc
c001826b:	c3                   	ret    
c001826c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018271:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018278:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001827b:	85 c9                	test   ecx,ecx
c001827d:	74 4d                	je     c00182cc <Semaphore::acquire()+0xb0>
c001827f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018282:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018288:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001828b:	90                   	nop
c001828c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018291:	83 ec 0c             	sub    esp,0xc
c0018294:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018297:	68 98 48 02 c0       	push   0xc0024898
c001829c:	e8 c3 47 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00182a1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00182a8:	e8 43 fe ff ff       	call   c00180f0 <blockTask(TaskState)>
c00182ad:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00182b2:	83 c4 10             	add    esp,0x10
c00182b5:	48                   	dec    eax
c00182b6:	eb 8c                	jmp    c0018244 <Semaphore::acquire()+0x28>
c00182b8:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00182c2:	e8 31 fc ff ff       	call   c0017ef8 <schedule()>
c00182c7:	eb 8f                	jmp    c0018258 <Semaphore::acquire()+0x3c>
c00182c9:	8d 76 00             	lea    esi,[esi+0x0]
c00182cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182d4:	eb b6                	jmp    c001828c <Semaphore::acquire()+0x70>
c00182d6:	66 90                	xchg   ax,ax

c00182d8 <taskReturned>:
c00182d8:	83 ec 18             	sub    esp,0x18
c00182db:	68 b8 48 02 c0       	push   0xc00248b8
c00182e0:	e8 40 c0 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	83 ec 0c             	sub    esp,0xc
c00182eb:	6a 02                	push   0x2
c00182ed:	e8 fe fd ff ff       	call   c00180f0 <blockTask(TaskState)>
c00182f2:	fa                   	cli    
c00182f3:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00182f9:	e8 fa fb ff ff       	call   c0017ef8 <schedule()>
c00182fe:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	48                   	dec    eax
c0018307:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001830c:	85 c0                	test   eax,eax
c001830e:	75 d8                	jne    c00182e8 <taskReturned+0x10>
c0018310:	fb                   	sti    
c0018311:	eb d5                	jmp    c00182e8 <taskReturned+0x10>
c0018313:	90                   	nop

c0018314 <Thr::processFromPID(int)>:
c0018314:	57                   	push   edi
c0018315:	56                   	push   esi
c0018316:	53                   	push   ebx
c0018317:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001831b:	fa                   	cli    
c001831c:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	68 04 79 02 c0       	push   0xc0027904
c001832a:	e8 e1 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	89 c7                	mov    edi,eax
c0018334:	eb 16                	jmp    c001834c <Thr::processFromPID(int)+0x38>
c0018336:	66 90                	xchg   ax,ax
c0018338:	83 ec 0c             	sub    esp,0xc
c001833b:	68 04 79 02 c0       	push   0xc0027904
c0018340:	e8 cb 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	39 f8                	cmp    eax,edi
c001834a:	74 4c                	je     c0018398 <Thr::processFromPID(int)+0x84>
c001834c:	83 ec 0c             	sub    esp,0xc
c001834f:	68 04 79 02 c0       	push   0xc0027904
c0018354:	e8 b7 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018359:	c7 04 24 04 79 02 c0 	mov    DWORD PTR [esp],0xc0027904
c0018360:	89 c3                	mov    ebx,eax
c0018362:	e8 b1 91 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018367:	58                   	pop    eax
c0018368:	5a                   	pop    edx
c0018369:	53                   	push   ebx
c001836a:	68 04 79 02 c0       	push   0xc0027904
c001836f:	e8 5c 92 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018374:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018377:	83 c4 10             	add    esp,0x10
c001837a:	39 30                	cmp    DWORD PTR [eax],esi
c001837c:	75 ba                	jne    c0018338 <Thr::processFromPID(int)+0x24>
c001837e:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018383:	48                   	dec    eax
c0018384:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018389:	74 09                	je     c0018394 <Thr::processFromPID(int)+0x80>
c001838b:	90                   	nop
c001838c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001838f:	5b                   	pop    ebx
c0018390:	5e                   	pop    esi
c0018391:	5f                   	pop    edi
c0018392:	c3                   	ret    
c0018393:	90                   	nop
c0018394:	fb                   	sti    
c0018395:	eb f5                	jmp    c001838c <Thr::processFromPID(int)+0x78>
c0018397:	90                   	nop
c0018398:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001839d:	48                   	dec    eax
c001839e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00183a3:	75 07                	jne    c00183ac <Thr::processFromPID(int)+0x98>
c00183a5:	fb                   	sti    
c00183a6:	5b                   	pop    ebx
c00183a7:	5e                   	pop    esi
c00183a8:	5f                   	pop    edi
c00183a9:	c3                   	ret    
c00183aa:	66 90                	xchg   ax,ax
c00183ac:	5b                   	pop    ebx
c00183ad:	31 c0                	xor    eax,eax
c00183af:	5e                   	pop    esi
c00183b0:	5f                   	pop    edi
c00183b1:	c3                   	ret    
c00183b2:	66 90                	xchg   ax,ax

c00183b4 <unblockTask(ThreadControlBlock*)>:
c00183b4:	53                   	push   ebx
c00183b5:	83 ec 08             	sub    esp,0x8
c00183b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183bc:	fa                   	cli    
c00183bd:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00183c3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183c6:	85 c0                	test   eax,eax
c00183c8:	74 66                	je     c0018430 <unblockTask(ThreadControlBlock*)+0x7c>
c00183ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183cd:	48                   	dec    eax
c00183ce:	74 38                	je     c0018408 <unblockTask(ThreadControlBlock*)+0x54>
c00183d0:	83 ec 0c             	sub    esp,0xc
c00183d3:	68 04 79 02 c0       	push   0xc0027904
c00183d8:	e8 33 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183dd:	83 c4 10             	add    esp,0x10
c00183e0:	85 c0                	test   eax,eax
c00183e2:	75 1c                	jne    c0018400 <unblockTask(ThreadControlBlock*)+0x4c>
c00183e4:	eb 5e                	jmp    c0018444 <unblockTask(ThreadControlBlock*)+0x90>
c00183e6:	66 90                	xchg   ax,ax
c00183e8:	83 ec 08             	sub    esp,0x8
c00183eb:	50                   	push   eax
c00183ec:	68 04 79 02 c0       	push   0xc0027904
c00183f1:	e8 ca 94 00 00       	call   c00218c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183f6:	83 c4 10             	add    esp,0x10
c00183f9:	85 c0                	test   eax,eax
c00183fb:	74 47                	je     c0018444 <unblockTask(ThreadControlBlock*)+0x90>
c00183fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018400:	39 c3                	cmp    ebx,eax
c0018402:	75 e4                	jne    c00183e8 <unblockTask(ThreadControlBlock*)+0x34>
c0018404:	eb 12                	jmp    c0018418 <unblockTask(ThreadControlBlock*)+0x64>
c0018406:	66 90                	xchg   ax,ax
c0018408:	83 ec 0c             	sub    esp,0xc
c001840b:	68 3a 48 02 c0       	push   0xc002483a
c0018410:	e8 4f 46 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0018415:	83 c4 10             	add    esp,0x10
c0018418:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001841d:	48                   	dec    eax
c001841e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018423:	75 03                	jne    c0018428 <unblockTask(ThreadControlBlock*)+0x74>
c0018425:	fb                   	sti    
c0018426:	66 90                	xchg   ax,ax
c0018428:	83 c4 08             	add    esp,0x8
c001842b:	5b                   	pop    ebx
c001842c:	c3                   	ret    
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	83 ec 0c             	sub    esp,0xc
c0018433:	68 23 48 02 c0       	push   0xc0024823
c0018438:	e8 27 46 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	eb d6                	jmp    c0018418 <unblockTask(ThreadControlBlock*)+0x64>
c0018442:	66 90                	xchg   ax,ax
c0018444:	83 ec 08             	sub    esp,0x8
c0018447:	53                   	push   ebx
c0018448:	68 04 79 02 c0       	push   0xc0027904
c001844d:	e8 7e 91 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	eb c1                	jmp    c0018418 <unblockTask(ThreadControlBlock*)+0x64>
c0018457:	90                   	nop

c0018458 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018458:	55                   	push   ebp
c0018459:	57                   	push   edi
c001845a:	56                   	push   esi
c001845b:	53                   	push   ebx
c001845c:	83 ec 1c             	sub    esp,0x1c
c001845f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018463:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018466:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c001846c:	85 ff                	test   edi,edi
c001846e:	7e 24                	jle    c0018494 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018470:	31 f6                	xor    esi,esi
c0018472:	66 90                	xchg   ax,ax
c0018474:	83 ec 0c             	sub    esp,0xc
c0018477:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001847e:	46                   	inc    esi
c001847f:	e8 4f 15 ff ff       	call   c00099d3 <free>
c0018484:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018487:	83 c4 10             	add    esp,0x10
c001848a:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018490:	7f e2                	jg     c0018474 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018492:	66 90                	xchg   ax,ax
c0018494:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001849e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184a3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00184a9:	d3 c0                	rol    eax,cl
c00184ab:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00184b2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184b5:	89 f7                	mov    edi,esi
c00184b7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00184bf:	0f 85 73 01 00 00    	jne    c0018638 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00184c5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184cb:	85 ed                	test   ebp,ebp
c00184cd:	74 1d                	je     c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	55                   	push   ebp
c00184d3:	e8 f2 bb ff ff       	call   c00140ca <EnvVarContainer::~EnvVarContainer()>
c00184d8:	59                   	pop    ecx
c00184d9:	5e                   	pop    esi
c00184da:	6a 0c                	push   0xc
c00184dc:	55                   	push   ebp
c00184dd:	e8 a1 44 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c00184e2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184e5:	83 c4 10             	add    esp,0x10
c00184e8:	89 f7                	mov    edi,esi
c00184ea:	66 90                	xchg   ax,ax
c00184ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184f2:	85 c0                	test   eax,eax
c00184f4:	0f 84 b2 00 00 00    	je     c00185ac <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184fa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00184fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018501:	31 c9                	xor    ecx,ecx
c0018503:	eb 17                	jmp    c001851c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018505:	8d 76 00             	lea    esi,[esi+0x0]
c0018508:	41                   	inc    ecx
c0018509:	83 f9 10             	cmp    ecx,0x10
c001850c:	0f 84 9a 00 00 00    	je     c00185ac <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018512:	66 90                	xchg   ax,ax
c0018514:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001851a:	66 90                	xchg   ax,ax
c001851c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018523:	d3 fa                	sar    edx,cl
c0018525:	83 e2 01             	and    edx,0x1
c0018528:	74 de                	je     c0018508 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001852a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001852d:	01 d2                	add    edx,edx
c001852f:	01 ca                	add    edx,ecx
c0018531:	8d 14 92             	lea    edx,[edx+edx*4]
c0018534:	01 d0                	add    eax,edx
c0018536:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001853c:	83 fd 07             	cmp    ebp,0x7
c001853f:	75 c7                	jne    c0018508 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018541:	05 40 02 00 00       	add    eax,0x240
c0018546:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018549:	83 fd ff             	cmp    ebp,0xffffffff
c001854c:	0f 8c ee 00 00 00    	jl     c0018640 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018552:	0f 84 ac 01 00 00    	je     c0018704 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018558:	85 ed                	test   ebp,ebp
c001855a:	0f 84 90 01 00 00    	je     c00186f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018560:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018562:	75 a4                	jne    c0018508 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018564:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001856a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001856e:	01 d0                	add    eax,edx
c0018570:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018574:	83 ec 0c             	sub    esp,0xc
c0018577:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001857d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018580:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018586:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001858d:	50                   	push   eax
c001858e:	e8 21 fe ff ff       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c0018593:	83 c4 10             	add    esp,0x10
c0018596:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018599:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001859d:	89 f7                	mov    edi,esi
c001859f:	41                   	inc    ecx
c00185a0:	83 f9 10             	cmp    ecx,0x10
c00185a3:	0f 85 6b ff ff ff    	jne    c0018514 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00185b2:	85 c0                	test   eax,eax
c00185b4:	74 62                	je     c0018618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185b6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00185bc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00185c2:	74 54                	je     c0018618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185c4:	83 ec 0c             	sub    esp,0xc
c00185c7:	68 04 79 02 c0       	push   0xc0027904
c00185cc:	e8 3f 8f 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185d1:	c7 04 24 04 79 02 c0 	mov    DWORD PTR [esp],0xc0027904
c00185d8:	89 c7                	mov    edi,eax
c00185da:	e8 15 8f 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	84 c0                	test   al,al
c00185e4:	0f 84 ce 00 00 00    	je     c00186b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185ea:	66 90                	xchg   ax,ax
c00185ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185ef:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185f5:	85 d2                	test   edx,edx
c00185f7:	74 0f                	je     c0018608 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00185f9:	83 ec 0c             	sub    esp,0xc
c00185fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00185fe:	52                   	push   edx
c00185ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018602:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018612:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018615:	8d 76 00             	lea    esi,[esi+0x0]
c0018618:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001861e:	85 db                	test   ebx,ebx
c0018620:	74 16                	je     c0018638 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018622:	83 ec 0c             	sub    esp,0xc
c0018625:	53                   	push   ebx
c0018626:	e8 89 35 ff ff       	call   c000bbb4 <VAS::~VAS()>
c001862b:	58                   	pop    eax
c001862c:	5a                   	pop    edx
c001862d:	6a 14                	push   0x14
c001862f:	53                   	push   ebx
c0018630:	e8 4e 43 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	83 c4 1c             	add    esp,0x1c
c001863b:	5b                   	pop    ebx
c001863c:	5e                   	pop    esi
c001863d:	5f                   	pop    edi
c001863e:	5d                   	pop    ebp
c001863f:	c3                   	ret    
c0018640:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	68 ec 48 02 c0       	push   0xc00248ec
c001864c:	e8 d4 bc ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0018651:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	89 f7                	mov    edi,esi
c0018659:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001865d:	e9 a6 fe ff ff       	jmp    c0018508 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018662:	66 90                	xchg   ax,ax
c0018664:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001866a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018670:	75 1e                	jne    c0018690 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018672:	83 ec 0c             	sub    esp,0xc
c0018675:	68 54 49 02 c0       	push   0xc0024954
c001867a:	e8 e5 43 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001867f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018686:	e8 65 fa ff ff       	call   c00180f0 <blockTask(TaskState)>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	66 90                	xchg   ax,ax
c0018690:	83 ec 08             	sub    esp,0x8
c0018693:	56                   	push   esi
c0018694:	68 04 79 02 c0       	push   0xc0027904
c0018699:	e8 32 8f 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001869e:	c7 04 24 04 79 02 c0 	mov    DWORD PTR [esp],0xc0027904
c00186a5:	e8 66 8e 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	39 f8                	cmp    eax,edi
c00186af:	0f 84 37 ff ff ff    	je     c00185ec <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	83 ec 0c             	sub    esp,0xc
c00186bb:	68 04 79 02 c0       	push   0xc0027904
c00186c0:	e8 4b 8e 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186c5:	c7 04 24 04 79 02 c0 	mov    DWORD PTR [esp],0xc0027904
c00186cc:	89 c6                	mov    esi,eax
c00186ce:	e8 45 8e 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	39 f3                	cmp    ebx,esi
c00186d8:	74 b6                	je     c0018690 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186da:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186e0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186e6:	75 a8                	jne    c0018690 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186e8:	e9 77 ff ff ff       	jmp    c0018664 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186ed:	8d 76 00             	lea    esi,[esi+0x0]
c00186f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186f4:	83 ec 0c             	sub    esp,0xc
c00186f7:	68 20 49 02 c0       	push   0xc0024920
c00186fc:	e9 4b ff ff ff       	jmp    c001864c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018701:	8d 76 00             	lea    esi,[esi+0x0]
c0018704:	8b 36                	mov    esi,DWORD PTR [esi]
c0018706:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001870a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001870d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018710:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018716:	01 d7                	add    edi,edx
c0018718:	89 f8                	mov    eax,edi
c001871a:	e9 51 fe ff ff       	jmp    c0018570 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001871f:	90                   	nop

c0018720 <cleanerTaskFunction(void*)>:
c0018720:	53                   	push   ebx
c0018721:	83 ec 08             	sub    esp,0x8
c0018724:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018729:	48                   	dec    eax
c001872a:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001872f:	75 03                	jne    c0018734 <cleanerTaskFunction(void*)+0x14>
c0018731:	fb                   	sti    
c0018732:	66 90                	xchg   ax,ax
c0018734:	fa                   	cli    
c0018735:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001873a:	80 3d cc 78 02 c0 00 	cmp    BYTE PTR ds:0xc00278cc,0x0
c0018741:	8d 50 01             	lea    edx,[eax+0x1]
c0018744:	89 15 e8 78 02 c0    	mov    DWORD PTR ds:0xc00278e8,edx
c001874a:	0f 84 ac 00 00 00    	je     c00187fc <cleanerTaskFunction(void*)+0xdc>
c0018750:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018755:	85 c0                	test   eax,eax
c0018757:	75 03                	jne    c001875c <cleanerTaskFunction(void*)+0x3c>
c0018759:	fb                   	sti    
c001875a:	66 90                	xchg   ax,ax
c001875c:	c6 05 cc 78 02 c0 00 	mov    BYTE PTR ds:0xc00278cc,0x0
c0018763:	fa                   	cli    
c0018764:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001876a:	ff 05 e4 78 02 c0    	inc    DWORD PTR ds:0xc00278e4
c0018770:	fa                   	cli    
c0018771:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018777:	eb 2b                	jmp    c00187a4 <cleanerTaskFunction(void*)+0x84>
c0018779:	8d 76 00             	lea    esi,[esi+0x0]
c001877c:	83 ec 0c             	sub    esp,0xc
c001877f:	68 ec 78 02 c0       	push   0xc00278ec
c0018784:	e8 87 8d 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018789:	c7 04 24 ec 78 02 c0 	mov    DWORD PTR [esp],0xc00278ec
c0018790:	89 c3                	mov    ebx,eax
c0018792:	e8 81 8d 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018797:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001879a:	e8 b9 fc ff ff       	call   c0018458 <cleanupTerminatedTask(ThreadControlBlock*)>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	66 90                	xchg   ax,ax
c00187a4:	83 ec 0c             	sub    esp,0xc
c00187a7:	68 ec 78 02 c0       	push   0xc00278ec
c00187ac:	e8 43 8d 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	84 c0                	test   al,al
c00187b6:	74 c4                	je     c001877c <cleanerTaskFunction(void*)+0x5c>
c00187b8:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00187bd:	48                   	dec    eax
c00187be:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00187c3:	75 03                	jne    c00187c8 <cleanerTaskFunction(void*)+0xa8>
c00187c5:	fb                   	sti    
c00187c6:	66 90                	xchg   ax,ax
c00187c8:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00187cd:	48                   	dec    eax
c00187ce:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c00187d3:	0f 85 4b ff ff ff    	jne    c0018724 <cleanerTaskFunction(void*)+0x4>
c00187d9:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c00187de:	85 c0                	test   eax,eax
c00187e0:	0f 84 3e ff ff ff    	je     c0018724 <cleanerTaskFunction(void*)+0x4>
c00187e6:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00187f0:	e8 03 f7 ff ff       	call   c0017ef8 <schedule()>
c00187f5:	e9 2a ff ff ff       	jmp    c0018724 <cleanerTaskFunction(void*)+0x4>
c00187fa:	66 90                	xchg   ax,ax
c00187fc:	83 ec 0c             	sub    esp,0xc
c00187ff:	6a 02                	push   0x2
c0018801:	e8 c2 f8 ff ff       	call   c00180c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	e9 4e ff ff ff       	jmp    c001875c <cleanerTaskFunction(void*)+0x3c>
c001880e:	66 90                	xchg   ax,ax

c0018810 <terminateTask(int)>:
c0018810:	83 ec 14             	sub    esp,0x14
c0018813:	fa                   	cli    
c0018814:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c001881a:	ff 05 e4 78 02 c0    	inc    DWORD PTR ds:0xc00278e4
c0018820:	fa                   	cli    
c0018821:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018827:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001882b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018830:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018838:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001883b:	50                   	push   eax
c001883c:	68 ec 78 02 c0       	push   0xc00278ec
c0018841:	e8 8a 8d 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018855:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001885a:	85 c0                	test   eax,eax
c001885c:	74 5e                	je     c00188bc <terminateTask(int)+0xac>
c001885e:	83 ec 0c             	sub    esp,0xc
c0018861:	c6 05 cc 78 02 c0 01 	mov    BYTE PTR ds:0xc00278cc,0x1
c0018868:	50                   	push   eax
c0018869:	e8 46 fb ff ff       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018879:	48                   	dec    eax
c001887a:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c001887f:	75 03                	jne    c0018884 <terminateTask(int)+0x74>
c0018881:	fb                   	sti    
c0018882:	66 90                	xchg   ax,ax
c0018884:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c0018889:	48                   	dec    eax
c001888a:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c001888f:	75 0b                	jne    c001889c <terminateTask(int)+0x8c>
c0018891:	83 3d e0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278e0,0x0
c0018898:	75 36                	jne    c00188d0 <terminateTask(int)+0xc0>
c001889a:	66 90                	xchg   ax,ax
c001889c:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00188a1:	48                   	dec    eax
c00188a2:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00188a7:	75 03                	jne    c00188ac <terminateTask(int)+0x9c>
c00188a9:	fb                   	sti    
c00188aa:	66 90                	xchg   ax,ax
c00188ac:	fa                   	cli    
c00188ad:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00188b3:	90                   	nop
c00188b4:	e8 3f f6 ff ff       	call   c0017ef8 <schedule()>
c00188b9:	eb e1                	jmp    c001889c <terminateTask(int)+0x8c>
c00188bb:	90                   	nop
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	68 51 48 02 c0       	push   0xc0024851
c00188c4:	e8 9b 41 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00188c9:	83 c4 10             	add    esp,0x10
c00188cc:	eb a6                	jmp    c0018874 <terminateTask(int)+0x64>
c00188ce:	66 90                	xchg   ax,ax
c00188d0:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c00188da:	eb d8                	jmp    c00188b4 <terminateTask(int)+0xa4>

c00188dc <Thr::terminateFromIRQ(int)>:
c00188dc:	83 ec 18             	sub    esp,0x18
c00188df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188e3:	e8 28 ff ff ff       	call   c0018810 <terminateTask(int)>

c00188e8 <Semaphore::release()>:
c00188e8:	83 ec 0c             	sub    esp,0xc
c00188eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188ef:	fa                   	cli    
c00188f0:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c00188f5:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00188fb:	8d 48 01             	lea    ecx,[eax+0x1]
c00188fe:	89 0d e4 78 02 c0    	mov    DWORD PTR ds:0xc00278e4,ecx
c0018904:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018907:	85 c9                	test   ecx,ecx
c0018909:	74 41                	je     c001894c <Semaphore::release()+0x64>
c001890b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001890e:	83 ec 0c             	sub    esp,0xc
c0018911:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018914:	51                   	push   ecx
c0018915:	e8 9a fa ff ff       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c001891a:	a1 e4 78 02 c0       	mov    eax,ds:0xc00278e4
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	48                   	dec    eax
c0018923:	90                   	nop
c0018924:	a3 e4 78 02 c0       	mov    ds:0xc00278e4,eax
c0018929:	85 c0                	test   eax,eax
c001892b:	75 0b                	jne    c0018938 <Semaphore::release()+0x50>
c001892d:	a1 e0 78 02 c0       	mov    eax,ds:0xc00278e0
c0018932:	85 c0                	test   eax,eax
c0018934:	75 1e                	jne    c0018954 <Semaphore::release()+0x6c>
c0018936:	66 90                	xchg   ax,ax
c0018938:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c001893d:	48                   	dec    eax
c001893e:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018943:	75 03                	jne    c0018948 <Semaphore::release()+0x60>
c0018945:	fb                   	sti    
c0018946:	66 90                	xchg   ax,ax
c0018948:	83 c4 0c             	add    esp,0xc
c001894b:	c3                   	ret    
c001894c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001894f:	eb d3                	jmp    c0018924 <Semaphore::release()+0x3c>
c0018951:	8d 76 00             	lea    esi,[esi+0x0]
c0018954:	c7 05 e0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278e0,0x0
c001895e:	e8 95 f5 ff ff       	call   c0017ef8 <schedule()>
c0018963:	eb d3                	jmp    c0018938 <Semaphore::release()+0x50>
c0018965:	8d 76 00             	lea    esi,[esi+0x0]

c0018968 <__static_initialization_and_destruction_0(int, int)>:
c0018968:	83 ec 0c             	sub    esp,0xc
c001896b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018970:	0f 85 8e 00 00 00    	jne    c0018a04 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018976:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001897e:	0f 85 80 00 00 00    	jne    c0018a04 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	68 04 79 02 c0       	push   0xc0027904
c001898c:	e8 eb 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018991:	83 c4 10             	add    esp,0x10
c0018994:	83 ec 04             	sub    esp,0x4
c0018997:	68 48 56 02 c0       	push   0xc0025648
c001899c:	68 04 79 02 c0       	push   0xc0027904
c00189a1:	68 2c 18 02 c0       	push   0xc002182c
c00189a6:	e8 52 3f ff ff       	call   c000c8fd <__cxa_atexit>
c00189ab:	83 c4 10             	add    esp,0x10
c00189ae:	83 ec 0c             	sub    esp,0xc
c00189b1:	68 f8 78 02 c0       	push   0xc00278f8
c00189b6:	e8 c1 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	83 ec 04             	sub    esp,0x4
c00189c1:	68 48 56 02 c0       	push   0xc0025648
c00189c6:	68 f8 78 02 c0       	push   0xc00278f8
c00189cb:	68 2c 18 02 c0       	push   0xc002182c
c00189d0:	e8 28 3f ff ff       	call   c000c8fd <__cxa_atexit>
c00189d5:	83 c4 10             	add    esp,0x10
c00189d8:	83 ec 0c             	sub    esp,0xc
c00189db:	68 ec 78 02 c0       	push   0xc00278ec
c00189e0:	e8 97 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	83 ec 04             	sub    esp,0x4
c00189eb:	68 48 56 02 c0       	push   0xc0025648
c00189f0:	68 ec 78 02 c0       	push   0xc00278ec
c00189f5:	68 2c 18 02 c0       	push   0xc002182c
c00189fa:	e8 fe 3e ff ff       	call   c000c8fd <__cxa_atexit>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	66 90                	xchg   ax,ax
c0018a04:	90                   	nop
c0018a05:	83 c4 0c             	add    esp,0xc
c0018a08:	c3                   	ret    
c0018a09:	8d 76 00             	lea    esi,[esi+0x0]

c0018a0c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a0c:	83 ec 0c             	sub    esp,0xc
c0018a0f:	83 ec 08             	sub    esp,0x8
c0018a12:	68 ff ff 00 00       	push   0xffff
c0018a17:	6a 01                	push   0x1
c0018a19:	e8 4a ff ff ff       	call   c0018968 <__static_initialization_and_destruction_0(int, int)>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	83 c4 0c             	add    esp,0xc
c0018a24:	c3                   	ret    

c0018a25 <Vm::inbv(unsigned short)>:
c0018a25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a29:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a2e:	75 06                	jne    c0018a36 <Vm::inbv(unsigned short)+0x11>
c0018a30:	a0 4c 79 02 c0       	mov    al,ds:0xc002794c
c0018a35:	c3                   	ret    
c0018a36:	ec                   	in     al,dx
c0018a37:	c3                   	ret    

c0018a38 <Vm::outbv(unsigned short, unsigned char)>:
c0018a38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a40:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a45:	75 25                	jne    c0018a6c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a47:	8b 0d 4c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002794c
c0018a4d:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a50:	88 81 60 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd86a0],al
c0018a56:	89 15 4c 79 02 c0    	mov    DWORD PTR ds:0xc002794c,edx
c0018a5c:	83 fa 20             	cmp    edx,0x20
c0018a5f:	75 0c                	jne    c0018a6d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a61:	c7 05 4c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002794c,0x1f
c0018a6b:	c3                   	ret    
c0018a6c:	ee                   	out    dx,al
c0018a6d:	c3                   	ret    

c0018a6e <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a6e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a73:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a78:	c1 e0 04             	shl    eax,0x4
c0018a7b:	01 d0                	add    eax,edx
c0018a7d:	c3                   	ret    

c0018a7e <Vm::getSegment(unsigned int)>:
c0018a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a82:	c1 e8 10             	shr    eax,0x10
c0018a85:	c3                   	ret    

c0018a86 <Vm::getOffset(unsigned int)>:
c0018a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8a:	c3                   	ret    

c0018a8b <Vm::mainloop2()>:
c0018a8b:	83 ec 18             	sub    esp,0x18
c0018a8e:	fa                   	cli    
c0018a8f:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018a95:	6a 02                	push   0x2
c0018a97:	c6 05 45 79 02 c0 01 	mov    BYTE PTR ds:0xc0027945,0x1
c0018a9e:	e8 25 f6 ff ff       	call   c00180c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018aa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aa8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018aac:	52                   	push   edx
c0018aad:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018ab1:	52                   	push   edx
c0018ab2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018ab6:	52                   	push   edx
c0018ab7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018abb:	50                   	push   eax
c0018abc:	e8 6e 77 fe ff       	call   c000022f <goToVM86>
c0018ac1:	83 c4 2c             	add    esp,0x2c
c0018ac4:	c3                   	ret    

c0018ac5 <Vm::mainVm8086Loop(void*)>:
c0018ac5:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018aca:	48                   	dec    eax
c0018acb:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018ad0:	75 01                	jne    c0018ad3 <Vm::mainVm8086Loop(void*)+0xe>
c0018ad2:	fb                   	sti    
c0018ad3:	eb b6                	jmp    c0018a8b <Vm::mainloop2()>

c0018ad5 <Vm::mainloop3(unsigned long)>:
c0018ad5:	83 ec 18             	sub    esp,0x18
c0018ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018adc:	fa                   	cli    
c0018add:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018ae3:	6a 02                	push   0x2
c0018ae5:	c6 05 44 79 02 c0 01 	mov    BYTE PTR ds:0xc0027944,0x1
c0018aec:	a3 40 79 02 c0       	mov    ds:0xc0027940,eax
c0018af1:	e8 d2 f5 ff ff       	call   c00180c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018af6:	83 c4 1c             	add    esp,0x1c
c0018af9:	eb 90                	jmp    c0018a8b <Vm::mainloop2()>

c0018afb <Vm::initialise8086()>:
c0018afb:	83 ec 0c             	sub    esp,0xc
c0018afe:	68 80 00 00 00       	push   0x80
c0018b03:	6a 00                	push   0x0
c0018b05:	68 c5 8a 01 c0       	push   0xc0018ac5
c0018b0a:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0018b10:	e8 c7 f1 ff ff       	call   c0017cdc <Process::createThread(void (*)(void*), void*, int)>
c0018b15:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b1c:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018b21:	68 00 01 00 00       	push   0x100
c0018b26:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c0018b2b:	6a 00                	push   0x0
c0018b2d:	6a 00                	push   0x0
c0018b2f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b35:	e8 ec 34 ff ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b3a:	83 c4 2c             	add    esp,0x2c
c0018b3d:	c3                   	ret    

c0018b3e <Vm::finish8086()>:
c0018b3e:	53                   	push   ebx
c0018b3f:	83 ec 08             	sub    esp,0x8
c0018b42:	fa                   	cli    
c0018b43:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018b49:	80 3d 44 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027944,0x0
c0018b50:	75 15                	jne    c0018b67 <Vm::finish8086()+0x29>
c0018b52:	e8 a1 f3 ff ff       	call   c0017ef8 <schedule()>
c0018b57:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018b5c:	48                   	dec    eax
c0018b5d:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018b62:	75 de                	jne    c0018b42 <Vm::finish8086()+0x4>
c0018b64:	fb                   	sti    
c0018b65:	eb db                	jmp    c0018b42 <Vm::finish8086()+0x4>
c0018b67:	83 ec 0c             	sub    esp,0xc
c0018b6a:	8b 1d 40 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027940
c0018b70:	ff 35 48 79 02 c0    	push   DWORD PTR ds:0xc0027948
c0018b76:	c6 05 44 79 02 c0 00 	mov    BYTE PTR ds:0xc0027944,0x0
c0018b7d:	e8 32 f8 ff ff       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c0018b82:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018b87:	83 c4 10             	add    esp,0x10
c0018b8a:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b8d:	89 15 e8 78 02 c0    	mov    DWORD PTR ds:0xc00278e8,edx
c0018b93:	85 d2                	test   edx,edx
c0018b95:	75 01                	jne    c0018b98 <Vm::finish8086()+0x5a>
c0018b97:	fb                   	sti    
c0018b98:	89 d8                	mov    eax,ebx
c0018b9a:	83 c4 08             	add    esp,0x8
c0018b9d:	5b                   	pop    ebx
c0018b9e:	c3                   	ret    

c0018b9f <Vm::getOutput8086(unsigned char*)>:
c0018b9f:	57                   	push   edi
c0018ba0:	8b 0d 4c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002794c
c0018ba6:	56                   	push   esi
c0018ba7:	be 60 79 02 c0       	mov    esi,0xc0027960
c0018bac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018bb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bb2:	a1 4c 79 02 c0       	mov    eax,ds:0xc002794c
c0018bb7:	5e                   	pop    esi
c0018bb8:	c7 05 4c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002794c,0x0
c0018bc2:	5f                   	pop    edi
c0018bc3:	c3                   	ret    

c0018bc4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018bc4:	55                   	push   ebp
c0018bc5:	57                   	push   edi
c0018bc6:	56                   	push   esi
c0018bc7:	53                   	push   ebx
c0018bc8:	83 ec 2c             	sub    esp,0x2c
c0018bcb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bcf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bd3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018bd7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018bdb:	fa                   	cli    
c0018bdc:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c0018be2:	0f b6 35 45 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027945
c0018be9:	89 f0                	mov    eax,esi
c0018beb:	84 c0                	test   al,al
c0018bed:	75 1d                	jne    c0018c0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bf3:	e8 00 f3 ff ff       	call   c0017ef8 <schedule()>
c0018bf8:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018bfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c01:	48                   	dec    eax
c0018c02:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018c07:	75 d2                	jne    c0018bdb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c09:	fb                   	sti    
c0018c0a:	eb cf                	jmp    c0018bdb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c0c:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018c11:	c7 05 4c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002794c,0x0
c0018c1b:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c1f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c23:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c27:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c2b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c2f:	50                   	push   eax
c0018c30:	6a 20                	push   0x20
c0018c32:	6a 00                	push   0x0
c0018c34:	68 60 79 02 c0       	push   0xc0027960
c0018c39:	e8 46 7a fe ff       	call   c0000684 <memset>
c0018c3e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c45:	e8 79 0d ff ff       	call   c00099c3 <malloc>
c0018c4a:	83 c4 0c             	add    esp,0xc
c0018c4d:	89 c3                	mov    ebx,eax
c0018c4f:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c0018c55:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c59:	50                   	push   eax
c0018c5a:	e8 6f 43 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	85 db                	test   ebx,ebx
c0018c64:	75 0a                	jne    c0018c70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c66:	83 ec 0c             	sub    esp,0xc
c0018c69:	68 7c 49 02 c0       	push   0xc002497c
c0018c6e:	eb 3e                	jmp    c0018cae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c70:	50                   	push   eax
c0018c71:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c75:	50                   	push   eax
c0018c76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c7a:	50                   	push   eax
c0018c7b:	53                   	push   ebx
c0018c7c:	e8 5d 46 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c89:	74 0a                	je     c0018c95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c8b:	83 ec 0c             	sub    esp,0xc
c0018c8e:	68 90 49 02 c0       	push   0xc0024990
c0018c93:	eb 19                	jmp    c0018cae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c95:	51                   	push   ecx
c0018c96:	51                   	push   ecx
c0018c97:	6a 01                	push   0x1
c0018c99:	53                   	push   ebx
c0018c9a:	e8 93 43 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	85 c0                	test   eax,eax
c0018ca4:	74 24                	je     c0018cca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018ca6:	83 ec 0c             	sub    esp,0xc
c0018ca9:	68 a9 49 02 c0       	push   0xc00249a9
c0018cae:	e8 72 b6 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0018cb3:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018cb8:	83 c4 10             	add    esp,0x10
c0018cbb:	48                   	dec    eax
c0018cbc:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018cc1:	85 c0                	test   eax,eax
c0018cc3:	75 01                	jne    c0018cc6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018cc5:	fb                   	sti    
c0018cc6:	31 f6                	xor    esi,esi
c0018cc8:	eb 58                	jmp    c0018d22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cca:	0f b7 ed             	movzx  ebp,bp
c0018ccd:	50                   	push   eax
c0018cce:	0f b7 ff             	movzx  edi,di
c0018cd1:	50                   	push   eax
c0018cd2:	55                   	push   ebp
c0018cd3:	57                   	push   edi
c0018cd4:	e8 95 fd ff ff       	call   c0018a6e <Vm::realToLinear(unsigned short, unsigned short)>
c0018cd9:	5a                   	pop    edx
c0018cda:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018cdc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018ce0:	51                   	push   ecx
c0018ce1:	50                   	push   eax
c0018ce2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ce6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cea:	53                   	push   ebx
c0018ceb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cee:	83 c4 14             	add    esp,0x14
c0018cf1:	53                   	push   ebx
c0018cf2:	e8 99 43 ff ff       	call   c000d090 <File::close()>
c0018cf7:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c0018cfc:	83 c4 10             	add    esp,0x10
c0018cff:	48                   	dec    eax
c0018d00:	c6 05 45 79 02 c0 00 	mov    BYTE PTR ds:0xc0027945,0x0
c0018d07:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c0018d0c:	85 c0                	test   eax,eax
c0018d0e:	75 01                	jne    c0018d11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d10:	fb                   	sti    
c0018d11:	83 ec 0c             	sub    esp,0xc
c0018d14:	ff 35 48 79 02 c0    	push   DWORD PTR ds:0xc0027948
c0018d1a:	e8 95 f6 ff ff       	call   c00183b4 <unblockTask(ThreadControlBlock*)>
c0018d1f:	83 c4 10             	add    esp,0x10
c0018d22:	83 c4 2c             	add    esp,0x2c
c0018d25:	89 f0                	mov    eax,esi
c0018d27:	5b                   	pop    ebx
c0018d28:	5e                   	pop    esi
c0018d29:	5f                   	pop    edi
c0018d2a:	5d                   	pop    ebp
c0018d2b:	c3                   	ret    

c0018d2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d2c:	57                   	push   edi
c0018d2d:	56                   	push   esi
c0018d2e:	53                   	push   ebx
c0018d2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d3b:	83 e8 06             	sub    eax,0x6
c0018d3e:	0f b7 c0             	movzx  eax,ax
c0018d41:	50                   	push   eax
c0018d42:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d47:	50                   	push   eax
c0018d48:	e8 21 fd ff ff       	call   c0018a6e <Vm::realToLinear(unsigned short, unsigned short)>
c0018d4d:	5a                   	pop    edx
c0018d4e:	5e                   	pop    esi
c0018d4f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d52:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d55:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d5b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d5e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d61:	83 c2 02             	add    edx,0x2
c0018d64:	66 89 10             	mov    WORD PTR [eax],dx
c0018d67:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d6a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d6e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d71:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d75:	89 d6                	mov    esi,edx
c0018d77:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d7d:	66 81 e6 ff fd       	and    si,0xfdff
c0018d82:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d86:	74 07                	je     c0018d8f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d88:	89 d6                	mov    esi,edx
c0018d8a:	66 81 ce 00 02       	or     si,0x200
c0018d8f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d98:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018d9c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018da4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018da7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018daf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018db2:	5b                   	pop    ebx
c0018db3:	5e                   	pop    esi
c0018db4:	5f                   	pop    edi
c0018db5:	c3                   	ret    

c0018db6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018db6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dc0:	c1 e0 04             	shl    eax,0x4
c0018dc3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018dc6:	c3                   	ret    

c0018dc7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018dc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dcc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dd1:	c1 e0 04             	shl    eax,0x4
c0018dd4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018dd8:	c3                   	ret    

c0018dd9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018dd9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dde:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de3:	c1 e0 04             	shl    eax,0x4
c0018de6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018de9:	c3                   	ret    

c0018dea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018def:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018df4:	c1 e0 04             	shl    eax,0x4
c0018df7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dfb:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018dfe:	c3                   	ret    

c0018dff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018dff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e04:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e09:	c1 e0 04             	shl    eax,0x4
c0018e0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e10:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e14:	c3                   	ret    

c0018e15 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e1f:	c1 e0 04             	shl    eax,0x4
c0018e22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e26:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e29:	c3                   	ret    

c0018e2a <Vm::faultHandler(regs*)>:
c0018e2a:	55                   	push   ebp
c0018e2b:	57                   	push   edi
c0018e2c:	56                   	push   esi
c0018e2d:	53                   	push   ebx
c0018e2e:	83 ec 1c             	sub    esp,0x1c
c0018e31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e38:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e3c:	0f b7 f8             	movzx  edi,ax
c0018e3f:	52                   	push   edx
c0018e40:	0f b7 c0             	movzx  eax,ax
c0018e43:	50                   	push   eax
c0018e44:	e8 25 fc ff ff       	call   c0018a6e <Vm::realToLinear(unsigned short, unsigned short)>
c0018e49:	5a                   	pop    edx
c0018e4a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e4d:	59                   	pop    ecx
c0018e4e:	89 c1                	mov    ecx,eax
c0018e50:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e60:	0f b7 c5             	movzx  eax,bp
c0018e63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e67:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e6f:	e8 fa fb ff ff       	call   c0018a6e <Vm::realToLinear(unsigned short, unsigned short)>
c0018e74:	5e                   	pop    esi
c0018e75:	be 06 00 00 00       	mov    esi,0x6
c0018e7a:	5a                   	pop    edx
c0018e7b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e80:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e85:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e88:	80 fa 9d             	cmp    dl,0x9d
c0018e8b:	0f 84 2c 02 00 00    	je     c00190bd <Vm::faultHandler(regs*)+0x293>
c0018e91:	0f 87 91 00 00 00    	ja     c0018f28 <Vm::faultHandler(regs*)+0xfe>
c0018e97:	80 fa 66             	cmp    dl,0x66
c0018e9a:	0f 84 98 01 00 00    	je     c0019038 <Vm::faultHandler(regs*)+0x20e>
c0018ea0:	77 47                	ja     c0018ee9 <Vm::faultHandler(regs*)+0xbf>
c0018ea2:	80 fa 36             	cmp    dl,0x36
c0018ea5:	0f 84 80 01 00 00    	je     c001902b <Vm::faultHandler(regs*)+0x201>
c0018eab:	77 1a                	ja     c0018ec7 <Vm::faultHandler(regs*)+0x9d>
c0018ead:	80 fa 26             	cmp    dl,0x26
c0018eb0:	0f 84 4e 01 00 00    	je     c0019004 <Vm::faultHandler(regs*)+0x1da>
c0018eb6:	80 fa 2e             	cmp    dl,0x2e
c0018eb9:	0f 85 e2 05 00 00    	jne    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018ebf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ec2:	31 f6                	xor    esi,esi
c0018ec4:	41                   	inc    ecx
c0018ec5:	eb be                	jmp    c0018e85 <Vm::faultHandler(regs*)+0x5b>
c0018ec7:	80 fa 64             	cmp    dl,0x64
c0018eca:	0f 84 41 01 00 00    	je     c0019011 <Vm::faultHandler(regs*)+0x1e7>
c0018ed0:	0f 87 48 01 00 00    	ja     c001901e <Vm::faultHandler(regs*)+0x1f4>
c0018ed6:	80 fa 3e             	cmp    dl,0x3e
c0018ed9:	0f 85 c2 05 00 00    	jne    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018edf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ee2:	be 01 00 00 00       	mov    esi,0x1
c0018ee7:	eb db                	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0018ee9:	80 fa 6d             	cmp    dl,0x6d
c0018eec:	0f 84 ec 02 00 00    	je     c00191de <Vm::faultHandler(regs*)+0x3b4>
c0018ef2:	77 17                	ja     c0018f0b <Vm::faultHandler(regs*)+0xe1>
c0018ef4:	80 fa 67             	cmp    dl,0x67
c0018ef7:	0f 84 48 01 00 00    	je     c0019045 <Vm::faultHandler(regs*)+0x21b>
c0018efd:	80 fa 6c             	cmp    dl,0x6c
c0018f00:	0f 84 69 02 00 00    	je     c001916f <Vm::faultHandler(regs*)+0x345>
c0018f06:	e9 96 05 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018f0b:	80 fa 6f             	cmp    dl,0x6f
c0018f0e:	0f 84 f4 03 00 00    	je     c0019308 <Vm::faultHandler(regs*)+0x4de>
c0018f14:	0f 82 59 03 00 00    	jb     c0019273 <Vm::faultHandler(regs*)+0x449>
c0018f1a:	80 fa 9c             	cmp    dl,0x9c
c0018f1d:	0f 84 2f 01 00 00    	je     c0019052 <Vm::faultHandler(regs*)+0x228>
c0018f23:	e9 79 05 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018f28:	80 fa ec             	cmp    dl,0xec
c0018f2b:	0f 84 14 05 00 00    	je     c0019445 <Vm::faultHandler(regs*)+0x61b>
c0018f31:	77 7b                	ja     c0018fae <Vm::faultHandler(regs*)+0x184>
c0018f33:	80 fa e4             	cmp    dl,0xe4
c0018f36:	0f 84 93 04 00 00    	je     c00193cf <Vm::faultHandler(regs*)+0x5a5>
c0018f3c:	77 53                	ja     c0018f91 <Vm::faultHandler(regs*)+0x167>
c0018f3e:	80 fa cd             	cmp    dl,0xcd
c0018f41:	0f 84 d9 01 00 00    	je     c0019120 <Vm::faultHandler(regs*)+0x2f6>
c0018f47:	80 fa cf             	cmp    dl,0xcf
c0018f4a:	0f 85 51 05 00 00    	jne    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018f50:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f53:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f56:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f5a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f5d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f61:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f67:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f6a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f74:	66 c1 e8 09          	shr    ax,0x9
c0018f78:	83 e0 01             	and    eax,0x1
c0018f7b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f81:	83 c0 06             	add    eax,0x6
c0018f84:	25 ff ff 00 00       	and    eax,0xffff
c0018f89:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f8c:	e9 0c 05 00 00       	jmp    c001949d <Vm::faultHandler(regs*)+0x673>
c0018f91:	80 fa e6             	cmp    dl,0xe6
c0018f94:	0f 84 7f 04 00 00    	je     c0019419 <Vm::faultHandler(regs*)+0x5ef>
c0018f9a:	0f 82 4b 04 00 00    	jb     c00193eb <Vm::faultHandler(regs*)+0x5c1>
c0018fa0:	80 fa e7             	cmp    dl,0xe7
c0018fa3:	0f 84 87 04 00 00    	je     c0019430 <Vm::faultHandler(regs*)+0x606>
c0018fa9:	e9 f3 04 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018fae:	80 fa ef             	cmp    dl,0xef
c0018fb1:	0f 84 d1 04 00 00    	je     c0019488 <Vm::faultHandler(regs*)+0x65e>
c0018fb7:	77 28                	ja     c0018fe1 <Vm::faultHandler(regs*)+0x1b7>
c0018fb9:	80 fa ed             	cmp    dl,0xed
c0018fbc:	0f 84 9f 04 00 00    	je     c0019461 <Vm::faultHandler(regs*)+0x637>
c0018fc2:	80 fa ee             	cmp    dl,0xee
c0018fc5:	0f 85 d6 04 00 00    	jne    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018fcb:	50                   	push   eax
c0018fcc:	50                   	push   eax
c0018fcd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fd1:	50                   	push   eax
c0018fd2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fd6:	50                   	push   eax
c0018fd7:	e8 5c fa ff ff       	call   c0018a38 <Vm::outbv(unsigned short, unsigned char)>
c0018fdc:	e9 9f 04 00 00       	jmp    c0019480 <Vm::faultHandler(regs*)+0x656>
c0018fe1:	80 fa fa             	cmp    dl,0xfa
c0018fe4:	0f 84 69 01 00 00    	je     c0019153 <Vm::faultHandler(regs*)+0x329>
c0018fea:	80 fa fb             	cmp    dl,0xfb
c0018fed:	0f 84 6e 01 00 00    	je     c0019161 <Vm::faultHandler(regs*)+0x337>
c0018ff3:	80 fa f3             	cmp    dl,0xf3
c0018ff6:	0f 85 a5 04 00 00    	jne    c00194a1 <Vm::faultHandler(regs*)+0x677>
c0018ffc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fff:	e9 c0 fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0019004:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019007:	be 02 00 00 00       	mov    esi,0x2
c001900c:	e9 b3 fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0019011:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019014:	be 03 00 00 00       	mov    esi,0x3
c0019019:	e9 a6 fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c001901e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019021:	be 04 00 00 00       	mov    esi,0x4
c0019026:	e9 99 fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c001902b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001902e:	be 05 00 00 00       	mov    esi,0x5
c0019033:	e9 8c fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0019038:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001903b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019040:	e9 7f fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0019045:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019048:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001904d:	e9 72 fe ff ff       	jmp    c0018ec4 <Vm::faultHandler(regs*)+0x9a>
c0019052:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019055:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019059:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001905e:	74 30                	je     c0019090 <Vm::faultHandler(regs*)+0x266>
c0019060:	83 e9 04             	sub    ecx,0x4
c0019063:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019069:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001906f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019072:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019075:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001907b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001907f:	0f 84 15 04 00 00    	je     c001949a <Vm::faultHandler(regs*)+0x670>
c0019085:	80 ce 02             	or     dh,0x2
c0019088:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001908b:	e9 0a 04 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019090:	83 e9 02             	sub    ecx,0x2
c0019093:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019099:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001909c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190a6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190aa:	74 05                	je     c00190b1 <Vm::faultHandler(regs*)+0x287>
c00190ac:	80 ce 02             	or     dh,0x2
c00190af:	eb 03                	jmp    c00190b4 <Vm::faultHandler(regs*)+0x28a>
c00190b1:	80 e6 fd             	and    dh,0xfd
c00190b4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190b8:	e9 dd 03 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c00190bd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190c2:	74 2a                	je     c00190ee <Vm::faultHandler(regs*)+0x2c4>
c00190c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00190c6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00190d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00190d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190dd:	c1 e8 09             	shr    eax,0x9
c00190e0:	83 e0 01             	and    eax,0x1
c00190e3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190e9:	83 c0 04             	add    eax,0x4
c00190ec:	eb 25                	jmp    c0019113 <Vm::faultHandler(regs*)+0x2e9>
c00190ee:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190f1:	81 ca 00 02 02 00    	or     edx,0x20200
c00190f7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190fa:	66 8b 00             	mov    ax,WORD PTR [eax]
c00190fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019103:	66 c1 e8 09          	shr    ax,0x9
c0019107:	83 e0 01             	and    eax,0x1
c001910a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001910d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019110:	83 c0 02             	add    eax,0x2
c0019113:	25 ff ff 00 00       	and    eax,0xffff
c0019118:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001911b:	e9 7a 03 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019120:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019124:	3c ee                	cmp    al,0xee
c0019126:	75 10                	jne    c0019138 <Vm::faultHandler(regs*)+0x30e>
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001912e:	e8 a2 f9 ff ff       	call   c0018ad5 <Vm::mainloop3(unsigned long)>
c0019133:	e9 4b 03 00 00       	jmp    c0019483 <Vm::faultHandler(regs*)+0x659>
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001913f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019143:	51                   	push   ecx
c0019144:	50                   	push   eax
c0019145:	53                   	push   ebx
c0019146:	e8 e1 fb ff ff       	call   c0018d2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001914b:	83 c4 20             	add    esp,0x20
c001914e:	e9 4a 03 00 00       	jmp    c001949d <Vm::faultHandler(regs*)+0x673>
c0019153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019158:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001915c:	e9 39 03 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019166:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001916a:	e9 2b 03 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c001916f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019172:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019177:	74 2b                	je     c00191a4 <Vm::faultHandler(regs*)+0x37a>
c0019179:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019180:	76 22                	jbe    c00191a4 <Vm::faultHandler(regs*)+0x37a>
c0019182:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019186:	50                   	push   eax
c0019187:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001918b:	50                   	push   eax
c001918c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019190:	50                   	push   eax
c0019191:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019195:	50                   	push   eax
c0019196:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001919a:	50                   	push   eax
c001919b:	6a 6c                	push   0x6c
c001919d:	6a 6c                	push   0x6c
c001919f:	e9 b9 01 00 00       	jmp    c001935d <Vm::faultHandler(regs*)+0x533>
c00191a4:	83 ec 0c             	sub    esp,0xc
c00191a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191ab:	0f b7 f6             	movzx  esi,si
c00191ae:	50                   	push   eax
c00191af:	e8 71 f8 ff ff       	call   c0018a25 <Vm::inbv(unsigned short)>
c00191b4:	83 c4 0c             	add    esp,0xc
c00191b7:	0f b6 c0             	movzx  eax,al
c00191ba:	50                   	push   eax
c00191bb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191bf:	50                   	push   eax
c00191c0:	56                   	push   esi
c00191c1:	e8 24 fc ff ff       	call   c0018dea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191cc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191d0:	74 03                	je     c00191d5 <Vm::faultHandler(regs*)+0x3ab>
c00191d2:	48                   	dec    eax
c00191d3:	eb 01                	jmp    c00191d6 <Vm::faultHandler(regs*)+0x3ac>
c00191d5:	40                   	inc    eax
c00191d6:	0f b7 c0             	movzx  eax,ax
c00191d9:	e9 8d 00 00 00       	jmp    c001926b <Vm::faultHandler(regs*)+0x441>
c00191de:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191e4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191e9:	74 29                	je     c0019214 <Vm::faultHandler(regs*)+0x3ea>
c00191eb:	3d ff ff 00 00       	cmp    eax,0xffff
c00191f0:	76 22                	jbe    c0019214 <Vm::faultHandler(regs*)+0x3ea>
c00191f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191f6:	50                   	push   eax
c00191f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191fb:	50                   	push   eax
c00191fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019200:	50                   	push   eax
c0019201:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019205:	50                   	push   eax
c0019206:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001920a:	50                   	push   eax
c001920b:	6a 6d                	push   0x6d
c001920d:	6a 6d                	push   0x6d
c001920f:	e9 49 01 00 00       	jmp    c001935d <Vm::faultHandler(regs*)+0x533>
c0019214:	0f b7 c8             	movzx  ecx,ax
c0019217:	0f b7 f6             	movzx  esi,si
c001921a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001921d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019222:	74 20                	je     c0019244 <Vm::faultHandler(regs*)+0x41a>
c0019224:	ed                   	in     eax,dx
c0019225:	55                   	push   ebp
c0019226:	50                   	push   eax
c0019227:	51                   	push   ecx
c0019228:	56                   	push   esi
c0019229:	e8 e7 fb ff ff       	call   c0018e15 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001922e:	83 c4 10             	add    esp,0x10
c0019231:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019234:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019238:	74 05                	je     c001923f <Vm::faultHandler(regs*)+0x415>
c001923a:	83 e8 04             	sub    eax,0x4
c001923d:	eb 27                	jmp    c0019266 <Vm::faultHandler(regs*)+0x43c>
c001923f:	83 c0 04             	add    eax,0x4
c0019242:	eb 22                	jmp    c0019266 <Vm::faultHandler(regs*)+0x43c>
c0019244:	66 ed                	in     ax,dx
c0019246:	0f b7 c0             	movzx  eax,ax
c0019249:	57                   	push   edi
c001924a:	50                   	push   eax
c001924b:	51                   	push   ecx
c001924c:	56                   	push   esi
c001924d:	e8 ad fb ff ff       	call   c0018dff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019258:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001925c:	74 05                	je     c0019263 <Vm::faultHandler(regs*)+0x439>
c001925e:	83 e8 02             	sub    eax,0x2
c0019261:	eb 03                	jmp    c0019266 <Vm::faultHandler(regs*)+0x43c>
c0019263:	83 c0 02             	add    eax,0x2
c0019266:	25 ff ff 00 00       	and    eax,0xffff
c001926b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001926e:	e9 27 02 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019273:	8d 46 ff             	lea    eax,[esi-0x1]
c0019276:	3c 05                	cmp    al,0x5
c0019278:	77 24                	ja     c001929e <Vm::faultHandler(regs*)+0x474>
c001927a:	0f b6 c0             	movzx  eax,al
c001927d:	ff 24 85 1c 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5e4]
c0019284:	0f b7 fd             	movzx  edi,bp
c0019287:	eb 15                	jmp    c001929e <Vm::faultHandler(regs*)+0x474>
c0019289:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001928d:	eb 0f                	jmp    c001929e <Vm::faultHandler(regs*)+0x474>
c001928f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019293:	eb 09                	jmp    c001929e <Vm::faultHandler(regs*)+0x474>
c0019295:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019299:	eb 03                	jmp    c001929e <Vm::faultHandler(regs*)+0x474>
c001929b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001929e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192a6:	74 29                	je     c00192d1 <Vm::faultHandler(regs*)+0x4a7>
c00192a8:	3d ff ff 00 00       	cmp    eax,0xffff
c00192ad:	76 22                	jbe    c00192d1 <Vm::faultHandler(regs*)+0x4a7>
c00192af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192b3:	50                   	push   eax
c00192b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00192b8:	50                   	push   eax
c00192b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192bd:	50                   	push   eax
c00192be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192c2:	50                   	push   eax
c00192c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192c7:	50                   	push   eax
c00192c8:	6a 6e                	push   0x6e
c00192ca:	6a 6e                	push   0x6e
c00192cc:	e9 8c 00 00 00       	jmp    c001935d <Vm::faultHandler(regs*)+0x533>
c00192d1:	0f b7 c0             	movzx  eax,ax
c00192d4:	52                   	push   edx
c00192d5:	52                   	push   edx
c00192d6:	50                   	push   eax
c00192d7:	57                   	push   edi
c00192d8:	e8 d9 fa ff ff       	call   c0018db6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192dd:	59                   	pop    ecx
c00192de:	0f b6 c0             	movzx  eax,al
c00192e1:	5e                   	pop    esi
c00192e2:	50                   	push   eax
c00192e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192e7:	50                   	push   eax
c00192e8:	e8 4b f7 ff ff       	call   c0018a38 <Vm::outbv(unsigned short, unsigned char)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192f7:	74 03                	je     c00192fc <Vm::faultHandler(regs*)+0x4d2>
c00192f9:	48                   	dec    eax
c00192fa:	eb 01                	jmp    c00192fd <Vm::faultHandler(regs*)+0x4d3>
c00192fc:	40                   	inc    eax
c00192fd:	0f b7 c0             	movzx  eax,ax
c0019300:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019303:	e9 92 01 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019308:	8d 46 ff             	lea    eax,[esi-0x1]
c001930b:	3c 05                	cmp    al,0x5
c001930d:	77 1f                	ja     c001932e <Vm::faultHandler(regs*)+0x504>
c001930f:	0f b6 c0             	movzx  eax,al
c0019312:	ff 24 85 34 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5cc]
c0019319:	89 ef                	mov    edi,ebp
c001931b:	eb 11                	jmp    c001932e <Vm::faultHandler(regs*)+0x504>
c001931d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019320:	eb 0c                	jmp    c001932e <Vm::faultHandler(regs*)+0x504>
c0019322:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019325:	eb 07                	jmp    c001932e <Vm::faultHandler(regs*)+0x504>
c0019327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001932a:	eb 02                	jmp    c001932e <Vm::faultHandler(regs*)+0x504>
c001932c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001932e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019331:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019336:	74 37                	je     c001936f <Vm::faultHandler(regs*)+0x545>
c0019338:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001933e:	76 2f                	jbe    c001936f <Vm::faultHandler(regs*)+0x545>
c0019340:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019344:	50                   	push   eax
c0019345:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019349:	50                   	push   eax
c001934a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001934e:	50                   	push   eax
c001934f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019353:	50                   	push   eax
c0019354:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019358:	50                   	push   eax
c0019359:	6a 6f                	push   0x6f
c001935b:	6a 6f                	push   0x6f
c001935d:	68 c2 49 02 c0       	push   0xc00249c2
c0019362:	e8 fd 36 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0019367:	83 c4 20             	add    esp,0x20
c001936a:	e9 86 01 00 00       	jmp    c00194f5 <Vm::faultHandler(regs*)+0x6cb>
c001936f:	0f b7 d7             	movzx  edx,di
c0019372:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019375:	0f b7 c6             	movzx  eax,si
c0019378:	81 e1 00 04 00 00    	and    ecx,0x400
c001937e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019381:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019386:	74 1d                	je     c00193a5 <Vm::faultHandler(regs*)+0x57b>
c0019388:	55                   	push   ebp
c0019389:	55                   	push   ebp
c001938a:	50                   	push   eax
c001938b:	52                   	push   edx
c001938c:	e8 48 fa ff ff       	call   c0018dd9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	89 fa                	mov    edx,edi
c0019396:	ef                   	out    dx,eax
c0019397:	85 c9                	test   ecx,ecx
c0019399:	74 05                	je     c00193a0 <Vm::faultHandler(regs*)+0x576>
c001939b:	83 ee 04             	sub    esi,0x4
c001939e:	eb 21                	jmp    c00193c1 <Vm::faultHandler(regs*)+0x597>
c00193a0:	83 c6 04             	add    esi,0x4
c00193a3:	eb 1c                	jmp    c00193c1 <Vm::faultHandler(regs*)+0x597>
c00193a5:	55                   	push   ebp
c00193a6:	55                   	push   ebp
c00193a7:	50                   	push   eax
c00193a8:	52                   	push   edx
c00193a9:	e8 19 fa ff ff       	call   c0018dc7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00193ae:	83 c4 10             	add    esp,0x10
c00193b1:	89 fa                	mov    edx,edi
c00193b3:	66 ef                	out    dx,ax
c00193b5:	85 c9                	test   ecx,ecx
c00193b7:	74 05                	je     c00193be <Vm::faultHandler(regs*)+0x594>
c00193b9:	83 ee 02             	sub    esi,0x2
c00193bc:	eb 03                	jmp    c00193c1 <Vm::faultHandler(regs*)+0x597>
c00193be:	83 c6 02             	add    esi,0x2
c00193c1:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193c7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193ca:	e9 cb 00 00 00       	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c00193cf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193d6:	83 ec 0c             	sub    esp,0xc
c00193d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193dd:	50                   	push   eax
c00193de:	e8 42 f6 ff ff       	call   c0018a25 <Vm::inbv(unsigned short)>
c00193e3:	0f b6 c0             	movzx  eax,al
c00193e6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193e9:	eb 3f                	jmp    c001942a <Vm::faultHandler(regs*)+0x600>
c00193eb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193f0:	74 07                	je     c00193f9 <Vm::faultHandler(regs*)+0x5cf>
c00193f2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193f6:	ed                   	in     eax,dx
c00193f7:	eb 14                	jmp    c001940d <Vm::faultHandler(regs*)+0x5e3>
c00193f9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00193fc:	66 31 f6             	xor    si,si
c00193ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019402:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019406:	66 ed                	in     ax,dx
c0019408:	0f b7 c0             	movzx  eax,ax
c001940b:	09 f0                	or     eax,esi
c001940d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019410:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019414:	e9 84 00 00 00       	jmp    c001949d <Vm::faultHandler(regs*)+0x673>
c0019419:	52                   	push   edx
c001941a:	52                   	push   edx
c001941b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001941f:	50                   	push   eax
c0019420:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019424:	50                   	push   eax
c0019425:	e8 0e f6 ff ff       	call   c0018a38 <Vm::outbv(unsigned short, unsigned char)>
c001942a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001942e:	eb 53                	jmp    c0019483 <Vm::faultHandler(regs*)+0x659>
c0019430:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019433:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019437:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001943c:	74 03                	je     c0019441 <Vm::faultHandler(regs*)+0x617>
c001943e:	ef                   	out    dx,eax
c001943f:	eb cf                	jmp    c0019410 <Vm::faultHandler(regs*)+0x5e6>
c0019441:	66 ef                	out    dx,ax
c0019443:	eb cb                	jmp    c0019410 <Vm::faultHandler(regs*)+0x5e6>
c0019445:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019453:	50                   	push   eax
c0019454:	e8 cc f5 ff ff       	call   c0018a25 <Vm::inbv(unsigned short)>
c0019459:	0f b6 c0             	movzx  eax,al
c001945c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001945f:	eb 1f                	jmp    c0019480 <Vm::faultHandler(regs*)+0x656>
c0019461:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019464:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019469:	74 03                	je     c001946e <Vm::faultHandler(regs*)+0x644>
c001946b:	ed                   	in     eax,dx
c001946c:	eb 0d                	jmp    c001947b <Vm::faultHandler(regs*)+0x651>
c001946e:	66 ed                	in     ax,dx
c0019470:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019473:	0f b7 c0             	movzx  eax,ax
c0019476:	66 31 d2             	xor    dx,dx
c0019479:	09 d0                	or     eax,edx
c001947b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001947e:	eb 1a                	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019480:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019483:	83 c4 10             	add    esp,0x10
c0019486:	eb 15                	jmp    c001949d <Vm::faultHandler(regs*)+0x673>
c0019488:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001948b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001948e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019493:	74 03                	je     c0019498 <Vm::faultHandler(regs*)+0x66e>
c0019495:	ef                   	out    dx,eax
c0019496:	eb 02                	jmp    c001949a <Vm::faultHandler(regs*)+0x670>
c0019498:	66 ef                	out    dx,ax
c001949a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001949d:	b0 01                	mov    al,0x1
c001949f:	eb 56                	jmp    c00194f7 <Vm::faultHandler(regs*)+0x6cd>
c00194a1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00194a5:	50                   	push   eax
c00194a6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00194aa:	50                   	push   eax
c00194ab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00194af:	50                   	push   eax
c00194b0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00194b4:	50                   	push   eax
c00194b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194b9:	50                   	push   eax
c00194ba:	52                   	push   edx
c00194bb:	52                   	push   edx
c00194bc:	68 ef 49 02 c0       	push   0xc00249ef
c00194c1:	e8 9e 35 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c00194c6:	83 c4 20             	add    esp,0x20
c00194c9:	83 ec 0c             	sub    esp,0xc
c00194cc:	6a 60                	push   0x60
c00194ce:	e8 52 f5 ff ff       	call   c0018a25 <Vm::inbv(unsigned short)>
c00194d3:	83 c4 10             	add    esp,0x10
c00194d6:	3c 1c                	cmp    al,0x1c
c00194d8:	74 04                	je     c00194de <Vm::faultHandler(regs*)+0x6b4>
c00194da:	3c 5a                	cmp    al,0x5a
c00194dc:	75 eb                	jne    c00194c9 <Vm::faultHandler(regs*)+0x69f>
c00194de:	3c 5a                	cmp    al,0x5a
c00194e0:	74 04                	je     c00194e6 <Vm::faultHandler(regs*)+0x6bc>
c00194e2:	3c 1c                	cmp    al,0x1c
c00194e4:	75 0f                	jne    c00194f5 <Vm::faultHandler(regs*)+0x6cb>
c00194e6:	83 ec 0c             	sub    esp,0xc
c00194e9:	6a 60                	push   0x60
c00194eb:	e8 35 f5 ff ff       	call   c0018a25 <Vm::inbv(unsigned short)>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	eb e9                	jmp    c00194de <Vm::faultHandler(regs*)+0x6b4>
c00194f5:	31 c0                	xor    eax,eax
c00194f7:	83 c4 1c             	add    esp,0x1c
c00194fa:	5b                   	pop    ebx
c00194fb:	5e                   	pop    esi
c00194fc:	5f                   	pop    edi
c00194fd:	5d                   	pop    ebp
c00194fe:	c3                   	ret    
c00194ff:	90                   	nop

c0019500 <Vm::fpuInternalTo32(unsigned long long)>:
c0019500:	57                   	push   edi
c0019501:	56                   	push   esi
c0019502:	53                   	push   ebx
c0019503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001950b:	89 d6                	mov    esi,edx
c001950d:	89 d7                	mov    edi,edx
c001950f:	89 c1                	mov    ecx,eax
c0019511:	c1 ef 14             	shr    edi,0x14
c0019514:	89 d3                	mov    ebx,edx
c0019516:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001951c:	31 d2                	xor    edx,edx
c001951e:	89 f8                	mov    eax,edi
c0019520:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019526:	bf ff 00 00 00       	mov    edi,0xff
c001952b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019530:	83 d2 ff             	adc    edx,0xffffffff
c0019533:	39 c7                	cmp    edi,eax
c0019535:	bf 00 00 00 00       	mov    edi,0x0
c001953a:	19 d7                	sbb    edi,edx
c001953c:	72 16                	jb     c0019554 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001953e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019542:	c1 e0 17             	shl    eax,0x17
c0019545:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001954b:	09 f1                	or     ecx,esi
c001954d:	09 c1                	or     ecx,eax
c001954f:	89 cf                	mov    edi,ecx
c0019551:	eb 05                	jmp    c0019558 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019553:	90                   	nop
c0019554:	31 ff                	xor    edi,edi
c0019556:	66 90                	xchg   ax,ax
c0019558:	89 f8                	mov    eax,edi
c001955a:	5b                   	pop    ebx
c001955b:	5e                   	pop    esi
c001955c:	5f                   	pop    edi
c001955d:	c3                   	ret    

c001955e <Vm::fpuInternalTo64(unsigned long long)>:
c001955e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019566:	c3                   	ret    

c0019567 <Vm::fpu32ToInternal(unsigned int)>:
c0019567:	57                   	push   edi
c0019568:	31 ff                	xor    edi,edi
c001956a:	56                   	push   esi
c001956b:	53                   	push   ebx
c001956c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019570:	89 cb                	mov    ebx,ecx
c0019572:	89 ce                	mov    esi,ecx
c0019574:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001957a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019580:	c1 e9 17             	shr    ecx,0x17
c0019583:	89 f0                	mov    eax,esi
c0019585:	0f b6 d1             	movzx  edx,cl
c0019588:	81 c2 80 03 00 00    	add    edx,0x380
c001958e:	89 d1                	mov    ecx,edx
c0019590:	89 fa                	mov    edx,edi
c0019592:	c1 e1 14             	shl    ecx,0x14
c0019595:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019599:	c1 e0 1d             	shl    eax,0x1d
c001959c:	89 d7                	mov    edi,edx
c001959e:	89 c6                	mov    esi,eax
c00195a0:	89 ca                	mov    edx,ecx
c00195a2:	89 f0                	mov    eax,esi
c00195a4:	09 fa                	or     edx,edi
c00195a6:	09 da                	or     edx,ebx
c00195a8:	5b                   	pop    ebx
c00195a9:	5e                   	pop    esi
c00195aa:	5f                   	pop    edi
c00195ab:	c3                   	ret    

c00195ac <Vm::fpu64ToInternal(unsigned long long)>:
c00195ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195b4:	c3                   	ret    

c00195b5 <Vm::fpuFloatToLong(unsigned long long)>:
c00195b5:	57                   	push   edi
c00195b6:	31 c0                	xor    eax,eax
c00195b8:	56                   	push   esi
c00195b9:	31 d2                	xor    edx,edx
c00195bb:	53                   	push   ebx
c00195bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195c4:	89 d9                	mov    ecx,ebx
c00195c6:	c1 e9 14             	shr    ecx,0x14
c00195c9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195cf:	89 cf                	mov    edi,ecx
c00195d1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195d7:	78 37                	js     c0019610 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195d9:	89 d9                	mov    ecx,ebx
c00195db:	89 f0                	mov    eax,esi
c00195dd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195e3:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195e9:	89 ca                	mov    edx,ecx
c00195eb:	b9 34 00 00 00       	mov    ecx,0x34
c00195f0:	29 f9                	sub    ecx,edi
c00195f2:	0f ad d0             	shrd   eax,edx,cl
c00195f5:	d3 fa                	sar    edx,cl
c00195f7:	f6 c1 20             	test   cl,0x20
c00195fa:	74 08                	je     c0019604 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00195fc:	89 d0                	mov    eax,edx
c00195fe:	c1 fa 1f             	sar    edx,0x1f
c0019601:	8d 76 00             	lea    esi,[esi+0x0]
c0019604:	85 db                	test   ebx,ebx
c0019606:	79 08                	jns    c0019610 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019608:	f7 d8                	neg    eax
c001960a:	83 d2 00             	adc    edx,0x0
c001960d:	f7 da                	neg    edx
c001960f:	90                   	nop
c0019610:	5b                   	pop    ebx
c0019611:	5e                   	pop    esi
c0019612:	5f                   	pop    edi
c0019613:	c3                   	ret    

c0019614 <Vm::fpuULongToFloat(unsigned long long)>:
c0019614:	57                   	push   edi
c0019615:	31 c9                	xor    ecx,ecx
c0019617:	56                   	push   esi
c0019618:	53                   	push   ebx
c0019619:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001961d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019621:	8d 76 00             	lea    esi,[esi+0x0]
c0019624:	0f ba e7 14          	bt     edi,0x14
c0019628:	72 0a                	jb     c0019634 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001962a:	01 f6                	add    esi,esi
c001962c:	11 ff                	adc    edi,edi
c001962e:	41                   	inc    ecx
c001962f:	eb f3                	jmp    c0019624 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019631:	8d 76 00             	lea    esi,[esi+0x0]
c0019634:	89 fa                	mov    edx,edi
c0019636:	89 f0                	mov    eax,esi
c0019638:	bb 33 04 00 00       	mov    ebx,0x433
c001963d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019643:	29 cb                	sub    ebx,ecx
c0019645:	89 d9                	mov    ecx,ebx
c0019647:	5b                   	pop    ebx
c0019648:	c1 e1 14             	shl    ecx,0x14
c001964b:	5e                   	pop    esi
c001964c:	09 ca                	or     edx,ecx
c001964e:	5f                   	pop    edi
c001964f:	c3                   	ret    

c0019650 <Vm::fpuLongToFloat(long long)>:
c0019650:	56                   	push   esi
c0019651:	31 c0                	xor    eax,eax
c0019653:	53                   	push   ebx
c0019654:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019658:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001965c:	39 c8                	cmp    eax,ecx
c001965e:	19 d8                	sbb    eax,ebx
c0019660:	7d 06                	jge    c0019668 <Vm::fpuLongToFloat(long long)+0x18>
c0019662:	31 f6                	xor    esi,esi
c0019664:	eb 0e                	jmp    c0019674 <Vm::fpuLongToFloat(long long)+0x24>
c0019666:	66 90                	xchg   ax,ax
c0019668:	f7 d9                	neg    ecx
c001966a:	be 01 00 00 00       	mov    esi,0x1
c001966f:	83 d3 00             	adc    ebx,0x0
c0019672:	f7 db                	neg    ebx
c0019674:	31 c0                	xor    eax,eax
c0019676:	66 90                	xchg   ax,ax
c0019678:	0f ba e3 14          	bt     ebx,0x14
c001967c:	72 0a                	jb     c0019688 <Vm::fpuLongToFloat(long long)+0x38>
c001967e:	01 c9                	add    ecx,ecx
c0019680:	11 db                	adc    ebx,ebx
c0019682:	40                   	inc    eax
c0019683:	eb f3                	jmp    c0019678 <Vm::fpuLongToFloat(long long)+0x28>
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	ba 33 04 00 00       	mov    edx,0x433
c001968d:	29 c2                	sub    edx,eax
c001968f:	89 c8                	mov    eax,ecx
c0019691:	c1 e2 14             	shl    edx,0x14
c0019694:	89 d9                	mov    ecx,ebx
c0019696:	89 f3                	mov    ebx,esi
c0019698:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001969e:	09 ca                	or     edx,ecx
c00196a0:	84 db                	test   bl,bl
c00196a2:	74 08                	je     c00196ac <Vm::fpuLongToFloat(long long)+0x5c>
c00196a4:	81 ca 00 00 00 80    	or     edx,0x80000000
c00196aa:	66 90                	xchg   ax,ax
c00196ac:	5b                   	pop    ebx
c00196ad:	5e                   	pop    esi
c00196ae:	c3                   	ret    

c00196af <Vm::fpuGet0()>:
c00196af:	31 c0                	xor    eax,eax
c00196b1:	31 d2                	xor    edx,edx
c00196b3:	c3                   	ret    

c00196b4 <Vm::fpuGet1()>:
c00196b4:	b8 01 00 00 00       	mov    eax,0x1
c00196b9:	31 d2                	xor    edx,edx
c00196bb:	c3                   	ret    

c00196bc <Vm::fpuGetPi()>:
c00196bc:	b8 03 00 00 00       	mov    eax,0x3
c00196c1:	31 d2                	xor    edx,edx
c00196c3:	c3                   	ret    

c00196c4 <Vm::fpuGetLog2E()>:
c00196c4:	83 ec 18             	sub    esp,0x18
c00196c7:	68 4c 4a 02 c0       	push   0xc0024a4c
c00196cc:	e8 54 ac ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00196d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196d6:	31 d2                	xor    edx,edx
c00196d8:	83 c4 1c             	add    esp,0x1c
c00196db:	c3                   	ret    

c00196dc <Vm::fpuGetLogE2()>:
c00196dc:	83 ec 18             	sub    esp,0x18
c00196df:	68 58 4a 02 c0       	push   0xc0024a58
c00196e4:	e8 3c ac ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00196e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196ee:	31 d2                	xor    edx,edx
c00196f0:	83 c4 1c             	add    esp,0x1c
c00196f3:	c3                   	ret    

c00196f4 <Vm::fpuGetLog210()>:
c00196f4:	83 ec 18             	sub    esp,0x18
c00196f7:	68 64 4a 02 c0       	push   0xc0024a64
c00196fc:	e8 24 ac ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0019701:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019706:	31 d2                	xor    edx,edx
c0019708:	83 c4 1c             	add    esp,0x1c
c001970b:	c3                   	ret    

c001970c <Vm::fpuGetLog102()>:
c001970c:	83 ec 18             	sub    esp,0x18
c001970f:	68 71 4a 02 c0       	push   0xc0024a71
c0019714:	e8 0c ac ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0019719:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001971e:	31 d2                	xor    edx,edx
c0019720:	83 c4 1c             	add    esp,0x1c
c0019723:	c3                   	ret    

c0019724 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019728:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001972c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019730:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019734:	0f 92 c0             	setb   al
c0019737:	c3                   	ret    

c0019738 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019738:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019740:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019744:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019748:	09 c2                	or     edx,eax
c001974a:	0f 94 c0             	sete   al
c001974d:	c3                   	ret    

c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001974e:	57                   	push   edi
c001974f:	56                   	push   esi
c0019750:	53                   	push   ebx
c0019751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019755:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019759:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001975d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019761:	57                   	push   edi
c0019762:	56                   	push   esi
c0019763:	53                   	push   ebx
c0019764:	51                   	push   ecx
c0019765:	e8 ce ff ff ff       	call   c0019738 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	88 c2                	mov    dl,al
c001976f:	31 c0                	xor    eax,eax
c0019771:	84 d2                	test   dl,dl
c0019773:	75 0f                	jne    c0019784 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019775:	57                   	push   edi
c0019776:	56                   	push   esi
c0019777:	53                   	push   ebx
c0019778:	51                   	push   ecx
c0019779:	e8 a6 ff ff ff       	call   c0019724 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001977e:	83 c4 10             	add    esp,0x10
c0019781:	8d 76 00             	lea    esi,[esi+0x0]
c0019784:	83 e0 01             	and    eax,0x1
c0019787:	5b                   	pop    ebx
c0019788:	88 c1                	mov    cl,al
c001978a:	83 e2 01             	and    edx,0x1
c001978d:	a0 81 79 02 c0       	mov    al,ds:0xc0027981
c0019792:	c1 e2 06             	shl    edx,0x6
c0019795:	83 e0 ba             	and    eax,0xffffffba
c0019798:	5e                   	pop    esi
c0019799:	09 c8                	or     eax,ecx
c001979b:	5f                   	pop    edi
c001979c:	09 d0                	or     eax,edx
c001979e:	a2 81 79 02 c0       	mov    ds:0xc0027981,al
c00197a3:	c3                   	ret    

c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00197a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197ac:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00197b0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00197b4:	c3                   	ret    

c00197b5 <Vm::fpuAbs(unsigned long long)>:
c00197b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197bd:	c3                   	ret    

c00197be <Vm::fpuChs(unsigned long long)>:
c00197be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197c6:	f7 d8                	neg    eax
c00197c8:	83 d2 00             	adc    edx,0x0
c00197cb:	f7 da                	neg    edx
c00197cd:	c3                   	ret    

c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197ce:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197d2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197d7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197db:	eb c7                	jmp    c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197dd:	53                   	push   ebx
c00197de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197ee:	0f af ca             	imul   ecx,edx
c00197f1:	0f af d8             	imul   ebx,eax
c00197f4:	f7 e2                	mul    edx
c00197f6:	01 d9                	add    ecx,ebx
c00197f8:	5b                   	pop    ebx
c00197f9:	01 ca                	add    edx,ecx
c00197fb:	c3                   	ret    

c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00197fc:	83 ec 0c             	sub    esp,0xc
c00197ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980f:	e8 10 77 00 00       	call   c0020f24 <__udivdi3>
c0019814:	83 c4 1c             	add    esp,0x1c
c0019817:	c3                   	ret    

c0019818 <Vm::fpuSquare(unsigned long long)>:
c0019818:	50                   	push   eax
c0019819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001981d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019821:	52                   	push   edx
c0019822:	50                   	push   eax
c0019823:	52                   	push   edx
c0019824:	50                   	push   eax
c0019825:	e8 b3 ff ff ff       	call   c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001982a:	83 c4 14             	add    esp,0x14
c001982d:	c3                   	ret    

c001982e <Vm::fpuGetReg(int)>:
c001982e:	83 ec 0c             	sub    esp,0xc
c0019831:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019836:	76 10                	jbe    c0019848 <Vm::fpuGetReg(int)+0x1a>
c0019838:	83 ec 0c             	sub    esp,0xc
c001983b:	68 7e 4a 02 c0       	push   0xc0024a7e
c0019840:	e8 e0 aa ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	a0 81 79 02 c0       	mov    al,ds:0xc0027981
c001984d:	b9 08 00 00 00       	mov    ecx,0x8
c0019852:	c0 e8 03             	shr    al,0x3
c0019855:	83 e0 07             	and    eax,0x7
c0019858:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001985c:	99                   	cdq    
c001985d:	f7 f9                	idiv   ecx
c001985f:	8b 04 d5 84 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd867c]
c0019866:	8b 14 d5 88 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8678]
c001986d:	83 c4 0c             	add    esp,0xc
c0019870:	c3                   	ret    

c0019871 <Vm::fpuSetReg(int, unsigned long long)>:
c0019871:	57                   	push   edi
c0019872:	56                   	push   esi
c0019873:	52                   	push   edx
c0019874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001987c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019881:	76 11                	jbe    c0019894 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019883:	83 ec 0c             	sub    esp,0xc
c0019886:	68 91 4a 02 c0       	push   0xc0024a91
c001988b:	e8 95 aa ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	90                   	nop
c0019894:	a0 81 79 02 c0       	mov    al,ds:0xc0027981
c0019899:	b9 08 00 00 00       	mov    ecx,0x8
c001989e:	c0 e8 03             	shr    al,0x3
c00198a1:	83 e0 07             	and    eax,0x7
c00198a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198a8:	99                   	cdq    
c00198a9:	f7 f9                	idiv   ecx
c00198ab:	89 34 d5 84 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd867c],esi
c00198b2:	89 3c d5 88 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8678],edi
c00198b9:	58                   	pop    eax
c00198ba:	5e                   	pop    esi
c00198bb:	5f                   	pop    edi
c00198bc:	c3                   	ret    

c00198bd <Vm::fpuPush(unsigned long long)>:
c00198bd:	a0 81 79 02 c0       	mov    al,ds:0xc0027981
c00198c2:	c0 e8 03             	shr    al,0x3
c00198c5:	83 e0 07             	and    eax,0x7
c00198c8:	83 c0 07             	add    eax,0x7
c00198cb:	88 c2                	mov    dl,al
c00198cd:	83 e0 07             	and    eax,0x7
c00198d0:	83 e2 07             	and    edx,0x7
c00198d3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198da:	8a 15 81 79 02 c0    	mov    dl,BYTE PTR ds:0xc0027981
c00198e0:	83 e2 c7             	and    edx,0xffffffc7
c00198e3:	09 ca                	or     edx,ecx
c00198e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198e9:	88 15 81 79 02 c0    	mov    BYTE PTR ds:0xc0027981,dl
c00198ef:	89 0c c5 88 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8678],ecx
c00198f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198fa:	89 14 c5 84 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd867c],edx
c0019901:	a1 c4 79 02 c0       	mov    eax,ds:0xc00279c4
c0019906:	83 f8 08             	cmp    eax,0x8
c0019909:	75 09                	jne    c0019914 <Vm::fpuPush(unsigned long long)+0x57>
c001990b:	80 0d 80 79 02 c0 40 	or     BYTE PTR ds:0xc0027980,0x40
c0019912:	c3                   	ret    
c0019913:	90                   	nop
c0019914:	40                   	inc    eax
c0019915:	a3 c4 79 02 c0       	mov    ds:0xc00279c4,eax
c001991a:	c3                   	ret    

c001991b <Vm::fpuPop()>:
c001991b:	8a 0d 81 79 02 c0    	mov    cl,BYTE PTR ds:0xc0027981
c0019921:	53                   	push   ebx
c0019922:	c0 e9 03             	shr    cl,0x3
c0019925:	8a 1d 81 79 02 c0    	mov    bl,BYTE PTR ds:0xc0027981
c001992b:	83 e1 07             	and    ecx,0x7
c001992e:	83 e3 c7             	and    ebx,0xffffffc7
c0019931:	8b 04 cd 84 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd867c]
c0019938:	8b 14 cd 88 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8678]
c001993f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019946:	83 e1 38             	and    ecx,0x38
c0019949:	09 d9                	or     ecx,ebx
c001994b:	88 0d 81 79 02 c0    	mov    BYTE PTR ds:0xc0027981,cl
c0019951:	8b 0d c4 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279c4
c0019957:	85 c9                	test   ecx,ecx
c0019959:	74 09                	je     c0019964 <Vm::fpuPop()+0x49>
c001995b:	49                   	dec    ecx
c001995c:	89 0d c4 79 02 c0    	mov    DWORD PTR ds:0xc00279c4,ecx
c0019962:	eb 08                	jmp    c001996c <Vm::fpuPop()+0x51>
c0019964:	80 0d 80 79 02 c0 40 	or     BYTE PTR ds:0xc0027980,0x40
c001996b:	90                   	nop
c001996c:	5b                   	pop    ebx
c001996d:	c3                   	ret    

c001996e <Vm::x87Handler(regs*)>:
c001996e:	55                   	push   ebp
c001996f:	57                   	push   edi
c0019970:	56                   	push   esi
c0019971:	53                   	push   ebx
c0019972:	83 ec 1c             	sub    esp,0x1c
c0019975:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019979:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001997e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019981:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019989:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001998d:	50                   	push   eax
c001998e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019992:	50                   	push   eax
c0019993:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019997:	50                   	push   eax
c0019998:	53                   	push   ebx
c0019999:	e8 a0 a0 ff ff       	call   c0013a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001999e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199a1:	83 c4 10             	add    esp,0x10
c00199a4:	89 c6                	mov    esi,eax
c00199a6:	80 fa d9             	cmp    dl,0xd9
c00199a9:	0f 85 79 01 00 00    	jne    c0019b28 <Vm::x87Handler(regs*)+0x1ba>
c00199af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00199b3:	8d 50 20             	lea    edx,[eax+0x20]
c00199b6:	80 fa 0e             	cmp    dl,0xe
c00199b9:	0f 87 a5 00 00 00    	ja     c0019a64 <Vm::x87Handler(regs*)+0xf6>
c00199bf:	0f b6 d2             	movzx  edx,dl
c00199c2:	ff 24 95 a4 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb55c]
c00199c9:	8d 76 00             	lea    esi,[esi+0x0]
c00199cc:	e8 de fc ff ff       	call   c00196af <Vm::fpuGet0()>
c00199d1:	eb 09                	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c00199d3:	90                   	nop
c00199d4:	e8 db fc ff ff       	call   c00196b4 <Vm::fpuGet1()>
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	57                   	push   edi
c00199dd:	57                   	push   edi
c00199de:	66 90                	xchg   ax,ax
c00199e0:	52                   	push   edx
c00199e1:	50                   	push   eax
c00199e2:	e8 d6 fe ff ff       	call   c00198bd <Vm::fpuPush(unsigned long long)>
c00199e7:	90                   	nop
c00199e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	90                   	nop
c00199f0:	b0 01                	mov    al,0x1
c00199f2:	e9 89 0a 00 00       	jmp    c001a480 <Vm::x87Handler(regs*)+0xb12>
c00199f7:	90                   	nop
c00199f8:	83 ec 0c             	sub    esp,0xc
c00199fb:	6a 00                	push   0x0
c00199fd:	e8 2c fe ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019a02:	59                   	pop    ecx
c0019a03:	5e                   	pop    esi
c0019a04:	52                   	push   edx
c0019a05:	50                   	push   eax
c0019a06:	e8 b3 fd ff ff       	call   c00197be <Vm::fpuChs(unsigned long long)>
c0019a0b:	eb 17                	jmp    c0019a24 <Vm::x87Handler(regs*)+0xb6>
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	6a 00                	push   0x0
c0019a15:	e8 14 fe ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019a1a:	5f                   	pop    edi
c0019a1b:	5d                   	pop    ebp
c0019a1c:	52                   	push   edx
c0019a1d:	50                   	push   eax
c0019a1e:	e8 92 fd ff ff       	call   c00197b5 <Vm::fpuAbs(unsigned long long)>
c0019a23:	90                   	nop
c0019a24:	83 c4 0c             	add    esp,0xc
c0019a27:	90                   	nop
c0019a28:	52                   	push   edx
c0019a29:	50                   	push   eax
c0019a2a:	66 90                	xchg   ax,ax
c0019a2c:	6a 00                	push   0x0
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	e8 3c fe ff ff       	call   c0019871 <Vm::fpuSetReg(int, unsigned long long)>
c0019a35:	eb b1                	jmp    c00199e8 <Vm::x87Handler(regs*)+0x7a>
c0019a37:	90                   	nop
c0019a38:	e8 b7 fc ff ff       	call   c00196f4 <Vm::fpuGetLog210()>
c0019a3d:	eb 9d                	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c0019a3f:	90                   	nop
c0019a40:	e8 7f fc ff ff       	call   c00196c4 <Vm::fpuGetLog2E()>
c0019a45:	eb 95                	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c0019a47:	90                   	nop
c0019a48:	e8 6f fc ff ff       	call   c00196bc <Vm::fpuGetPi()>
c0019a4d:	eb 8d                	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c0019a4f:	90                   	nop
c0019a50:	e8 b7 fc ff ff       	call   c001970c <Vm::fpuGetLog102()>
c0019a55:	eb 85                	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c0019a57:	90                   	nop
c0019a58:	e8 7f fc ff ff       	call   c00196dc <Vm::fpuGetLogE2()>
c0019a5d:	e9 7a ff ff ff       	jmp    c00199dc <Vm::x87Handler(regs*)+0x6e>
c0019a62:	66 90                	xchg   ax,ax
c0019a64:	8d 50 40             	lea    edx,[eax+0x40]
c0019a67:	80 fa 07             	cmp    dl,0x7
c0019a6a:	77 18                	ja     c0019a84 <Vm::x87Handler(regs*)+0x116>
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	2d c0 00 00 00       	sub    eax,0xc0
c0019a74:	50                   	push   eax
c0019a75:	e8 b4 fd ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019a7a:	59                   	pop    ecx
c0019a7b:	5e                   	pop    esi
c0019a7c:	e9 5f ff ff ff       	jmp    c00199e0 <Vm::x87Handler(regs*)+0x72>
c0019a81:	8d 76 00             	lea    esi,[esi+0x0]
c0019a84:	8d 50 38             	lea    edx,[eax+0x38]
c0019a87:	80 fa 07             	cmp    dl,0x7
c0019a8a:	77 3c                	ja     c0019ac8 <Vm::x87Handler(regs*)+0x15a>
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	2d c8 00 00 00       	sub    eax,0xc8
c0019a94:	50                   	push   eax
c0019a95:	e8 94 fd ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019a9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019aa1:	89 c6                	mov    esi,eax
c0019aa3:	89 d7                	mov    edi,edx
c0019aa5:	e8 84 fd ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019aaa:	83 c4 0c             	add    esp,0xc
c0019aad:	52                   	push   edx
c0019aae:	50                   	push   eax
c0019aaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ab3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ab8:	50                   	push   eax
c0019ab9:	e8 b3 fd ff ff       	call   c0019871 <Vm::fpuSetReg(int, unsigned long long)>
c0019abe:	83 c4 0c             	add    esp,0xc
c0019ac1:	57                   	push   edi
c0019ac2:	56                   	push   esi
c0019ac3:	e9 64 ff ff ff       	jmp    c0019a2c <Vm::x87Handler(regs*)+0xbe>
c0019ac8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019acc:	84 d2                	test   dl,dl
c0019ace:	75 10                	jne    c0019ae0 <Vm::x87Handler(regs*)+0x172>
c0019ad0:	83 ec 0c             	sub    esp,0xc
c0019ad3:	ff 36                	push   DWORD PTR [esi]
c0019ad5:	e8 8d fa ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c0019ada:	e9 c9 00 00 00       	jmp    c0019ba8 <Vm::x87Handler(regs*)+0x23a>
c0019adf:	90                   	nop
c0019ae0:	80 fa 03             	cmp    dl,0x3
c0019ae3:	75 13                	jne    c0019af8 <Vm::x87Handler(regs*)+0x18a>
c0019ae5:	e8 31 fe ff ff       	call   c001991b <Vm::fpuPop()>
c0019aea:	55                   	push   ebp
c0019aeb:	55                   	push   ebp
c0019aec:	52                   	push   edx
c0019aed:	50                   	push   eax
c0019aee:	e8 0d fa ff ff       	call   c0019500 <Vm::fpuInternalTo32(unsigned long long)>
c0019af3:	e9 90 00 00 00       	jmp    c0019b88 <Vm::x87Handler(regs*)+0x21a>
c0019af8:	80 fa 05             	cmp    dl,0x5
c0019afb:	75 0f                	jne    c0019b0c <Vm::x87Handler(regs*)+0x19e>
c0019afd:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b00:	66 a3 82 79 02 c0    	mov    ds:0xc0027982,ax
c0019b06:	e9 ed 00 00 00       	jmp    c0019bf8 <Vm::x87Handler(regs*)+0x28a>
c0019b0b:	90                   	nop
c0019b0c:	31 c0                	xor    eax,eax
c0019b0e:	80 fa 07             	cmp    dl,0x7
c0019b11:	0f 85 69 09 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c0019b17:	66 a1 82 79 02 c0    	mov    ax,ds:0xc0027982
c0019b1d:	66 89 06             	mov    WORD PTR [esi],ax
c0019b20:	e9 d3 00 00 00       	jmp    c0019bf8 <Vm::x87Handler(regs*)+0x28a>
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	80 fa d8             	cmp    dl,0xd8
c0019b2b:	0f 84 d3 00 00 00    	je     c0019c04 <Vm::x87Handler(regs*)+0x296>
c0019b31:	80 fa dc             	cmp    dl,0xdc
c0019b34:	0f 84 2a 02 00 00    	je     c0019d64 <Vm::x87Handler(regs*)+0x3f6>
c0019b3a:	80 fa de             	cmp    dl,0xde
c0019b3d:	0f 84 f1 02 00 00    	je     c0019e34 <Vm::x87Handler(regs*)+0x4c6>
c0019b43:	80 fa dd             	cmp    dl,0xdd
c0019b46:	0f 84 94 04 00 00    	je     c0019fe0 <Vm::x87Handler(regs*)+0x672>
c0019b4c:	80 fa da             	cmp    dl,0xda
c0019b4f:	0f 84 5f 05 00 00    	je     c001a0b4 <Vm::x87Handler(regs*)+0x746>
c0019b55:	80 fa df             	cmp    dl,0xdf
c0019b58:	0f 84 aa 05 00 00    	je     c001a108 <Vm::x87Handler(regs*)+0x79a>
c0019b5e:	31 c0                	xor    eax,eax
c0019b60:	80 fa db             	cmp    dl,0xdb
c0019b63:	0f 85 17 09 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c0019b69:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b6d:	80 fa 03             	cmp    dl,0x3
c0019b70:	0f 85 c2 06 00 00    	jne    c001a238 <Vm::x87Handler(regs*)+0x8ca>
c0019b76:	e8 a0 fd ff ff       	call   c001991b <Vm::fpuPop()>
c0019b7b:	55                   	push   ebp
c0019b7c:	55                   	push   ebp
c0019b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b80:	52                   	push   edx
c0019b81:	50                   	push   eax
c0019b82:	e8 2e fa ff ff       	call   c00195b5 <Vm::fpuFloatToLong(unsigned long long)>
c0019b87:	90                   	nop
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	89 06                	mov    DWORD PTR [esi],eax
c0019b8d:	eb 69                	jmp    c0019bf8 <Vm::x87Handler(regs*)+0x28a>
c0019b8f:	90                   	nop
c0019b90:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b94:	84 d2                	test   dl,dl
c0019b96:	0f 85 2c 06 00 00    	jne    c001a1c8 <Vm::x87Handler(regs*)+0x85a>
c0019b9c:	57                   	push   edi
c0019b9d:	57                   	push   edi
c0019b9e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ba1:	ff 36                	push   DWORD PTR [esi]
c0019ba3:	e8 04 fa ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c0019ba8:	5e                   	pop    esi
c0019ba9:	5f                   	pop    edi
c0019baa:	52                   	push   edx
c0019bab:	50                   	push   eax
c0019bac:	e8 0c fd ff ff       	call   c00198bd <Vm::fpuPush(unsigned long long)>
c0019bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bb8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bbb:	e9 2c fe ff ff       	jmp    c00199ec <Vm::x87Handler(regs*)+0x7e>
c0019bc0:	80 fa 03             	cmp    dl,0x3
c0019bc3:	0f 85 2b 07 00 00    	jne    c001a2f4 <Vm::x87Handler(regs*)+0x986>
c0019bc9:	57                   	push   edi
c0019bca:	57                   	push   edi
c0019bcb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bce:	ff 36                	push   DWORD PTR [esi]
c0019bd0:	e8 d7 f9 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c0019bd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019bdc:	89 c6                	mov    esi,eax
c0019bde:	89 d7                	mov    edi,edx
c0019be0:	e8 49 fc ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019be5:	57                   	push   edi
c0019be6:	56                   	push   esi
c0019be7:	52                   	push   edx
c0019be8:	50                   	push   eax
c0019be9:	e8 60 fb ff ff       	call   c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bee:	83 c4 20             	add    esp,0x20
c0019bf1:	e8 25 fd ff ff       	call   c001991b <Vm::fpuPop()>
c0019bf6:	66 90                	xchg   ax,ax
c0019bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bfc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bff:	e9 ec fd ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x82>
c0019c04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c08:	8d 50 40             	lea    edx,[eax+0x40]
c0019c0b:	80 fa 07             	cmp    dl,0x7
c0019c0e:	77 2c                	ja     c0019c3c <Vm::x87Handler(regs*)+0x2ce>
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	2d c0 00 00 00       	sub    eax,0xc0
c0019c18:	50                   	push   eax
c0019c19:	e8 10 fc ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019c1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c25:	89 c6                	mov    esi,eax
c0019c27:	89 d7                	mov    edi,edx
c0019c29:	e8 00 fc ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019c2e:	57                   	push   edi
c0019c2f:	56                   	push   esi
c0019c30:	52                   	push   edx
c0019c31:	50                   	push   eax
c0019c32:	e8 6d fb ff ff       	call   c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c37:	eb 33                	jmp    c0019c6c <Vm::x87Handler(regs*)+0x2fe>
c0019c39:	8d 76 00             	lea    esi,[esi+0x0]
c0019c3c:	8d 50 38             	lea    edx,[eax+0x38]
c0019c3f:	80 fa 07             	cmp    dl,0x7
c0019c42:	77 30                	ja     c0019c74 <Vm::x87Handler(regs*)+0x306>
c0019c44:	83 ec 0c             	sub    esp,0xc
c0019c47:	2d c8 00 00 00       	sub    eax,0xc8
c0019c4c:	50                   	push   eax
c0019c4d:	e8 dc fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019c52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c59:	89 c6                	mov    esi,eax
c0019c5b:	89 d7                	mov    edi,edx
c0019c5d:	e8 cc fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019c62:	57                   	push   edi
c0019c63:	56                   	push   esi
c0019c64:	52                   	push   edx
c0019c65:	50                   	push   eax
c0019c66:	e8 72 fb ff ff       	call   c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c6b:	90                   	nop
c0019c6c:	83 c4 1c             	add    esp,0x1c
c0019c6f:	e9 b4 fd ff ff       	jmp    c0019a28 <Vm::x87Handler(regs*)+0xba>
c0019c74:	8d 50 30             	lea    edx,[eax+0x30]
c0019c77:	80 fa 07             	cmp    dl,0x7
c0019c7a:	77 10                	ja     c0019c8c <Vm::x87Handler(regs*)+0x31e>
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	2d d0 00 00 00       	sub    eax,0xd0
c0019c84:	e9 c3 03 00 00       	jmp    c001a04c <Vm::x87Handler(regs*)+0x6de>
c0019c89:	8d 76 00             	lea    esi,[esi+0x0]
c0019c8c:	8d 50 28             	lea    edx,[eax+0x28]
c0019c8f:	80 fa 07             	cmp    dl,0x7
c0019c92:	77 10                	ja     c0019ca4 <Vm::x87Handler(regs*)+0x336>
c0019c94:	83 ec 0c             	sub    esp,0xc
c0019c97:	2d d8 00 00 00       	sub    eax,0xd8
c0019c9c:	e9 e7 03 00 00       	jmp    c001a088 <Vm::x87Handler(regs*)+0x71a>
c0019ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca4:	8d 50 20             	lea    edx,[eax+0x20]
c0019ca7:	80 fa 07             	cmp    dl,0x7
c0019caa:	77 1c                	ja     c0019cc8 <Vm::x87Handler(regs*)+0x35a>
c0019cac:	83 ec 0c             	sub    esp,0xc
c0019caf:	2d e0 00 00 00       	sub    eax,0xe0
c0019cb4:	50                   	push   eax
c0019cb5:	e8 74 fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019cba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cc1:	89 c6                	mov    esi,eax
c0019cc3:	89 d7                	mov    edi,edx
c0019cc5:	eb 25                	jmp    c0019cec <Vm::x87Handler(regs*)+0x37e>
c0019cc7:	90                   	nop
c0019cc8:	8d 50 18             	lea    edx,[eax+0x18]
c0019ccb:	80 fa 07             	cmp    dl,0x7
c0019cce:	77 30                	ja     c0019d00 <Vm::x87Handler(regs*)+0x392>
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	6a 00                	push   0x0
c0019cd5:	e8 54 fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019cda:	89 c6                	mov    esi,eax
c0019cdc:	89 d7                	mov    edi,edx
c0019cde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ce2:	2d e8 00 00 00       	sub    eax,0xe8
c0019ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cea:	66 90                	xchg   ax,ax
c0019cec:	e8 3d fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019cf1:	57                   	push   edi
c0019cf2:	56                   	push   esi
c0019cf3:	52                   	push   edx
c0019cf4:	50                   	push   eax
c0019cf5:	e8 d4 fa ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cfa:	e9 6d ff ff ff       	jmp    c0019c6c <Vm::x87Handler(regs*)+0x2fe>
c0019cff:	90                   	nop
c0019d00:	8d 50 10             	lea    edx,[eax+0x10]
c0019d03:	80 fa 07             	cmp    dl,0x7
c0019d06:	77 1c                	ja     c0019d24 <Vm::x87Handler(regs*)+0x3b6>
c0019d08:	83 ec 0c             	sub    esp,0xc
c0019d0b:	2d f0 00 00 00       	sub    eax,0xf0
c0019d10:	50                   	push   eax
c0019d11:	e8 18 fb ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019d16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d1d:	89 c6                	mov    esi,eax
c0019d1f:	89 d7                	mov    edi,edx
c0019d21:	eb 25                	jmp    c0019d48 <Vm::x87Handler(regs*)+0x3da>
c0019d23:	90                   	nop
c0019d24:	3c f7                	cmp    al,0xf7
c0019d26:	0f 86 00 04 00 00    	jbe    c001a12c <Vm::x87Handler(regs*)+0x7be>
c0019d2c:	83 ec 0c             	sub    esp,0xc
c0019d2f:	6a 00                	push   0x0
c0019d31:	e8 f8 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019d36:	89 c6                	mov    esi,eax
c0019d38:	89 d7                	mov    edi,edx
c0019d3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d3e:	2d f8 00 00 00       	sub    eax,0xf8
c0019d43:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d46:	66 90                	xchg   ax,ax
c0019d48:	e8 e1 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019d4d:	57                   	push   edi
c0019d4e:	56                   	push   esi
c0019d4f:	52                   	push   edx
c0019d50:	50                   	push   eax
c0019d51:	e8 a6 fa ff ff       	call   c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d56:	83 c4 1c             	add    esp,0x1c
c0019d59:	52                   	push   edx
c0019d5a:	50                   	push   eax
c0019d5b:	6a 00                	push   0x0
c0019d5d:	e9 6a 02 00 00       	jmp    c0019fcc <Vm::x87Handler(regs*)+0x65e>
c0019d62:	66 90                	xchg   ax,ax
c0019d64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d68:	8d 50 40             	lea    edx,[eax+0x40]
c0019d6b:	80 fa 07             	cmp    dl,0x7
c0019d6e:	77 38                	ja     c0019da8 <Vm::x87Handler(regs*)+0x43a>
c0019d70:	83 ec 0c             	sub    esp,0xc
c0019d73:	2d c0 00 00 00       	sub    eax,0xc0
c0019d78:	50                   	push   eax
c0019d79:	e8 b0 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019d7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d85:	89 c6                	mov    esi,eax
c0019d87:	89 d7                	mov    edi,edx
c0019d89:	e8 a0 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019d8e:	57                   	push   edi
c0019d8f:	56                   	push   esi
c0019d90:	52                   	push   edx
c0019d91:	50                   	push   eax
c0019d92:	e8 0d fa ff ff       	call   c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d97:	83 c4 1c             	add    esp,0x1c
c0019d9a:	52                   	push   edx
c0019d9b:	50                   	push   eax
c0019d9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019da0:	2d c0 00 00 00       	sub    eax,0xc0
c0019da5:	eb 41                	jmp    c0019de8 <Vm::x87Handler(regs*)+0x47a>
c0019da7:	90                   	nop
c0019da8:	8d 50 38             	lea    edx,[eax+0x38]
c0019dab:	80 fa 07             	cmp    dl,0x7
c0019dae:	77 40                	ja     c0019df0 <Vm::x87Handler(regs*)+0x482>
c0019db0:	83 ec 0c             	sub    esp,0xc
c0019db3:	2d c8 00 00 00       	sub    eax,0xc8
c0019db8:	50                   	push   eax
c0019db9:	e8 70 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019dbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019dc5:	89 c6                	mov    esi,eax
c0019dc7:	89 d7                	mov    edi,edx
c0019dc9:	e8 60 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019dce:	57                   	push   edi
c0019dcf:	56                   	push   esi
c0019dd0:	52                   	push   edx
c0019dd1:	50                   	push   eax
c0019dd2:	e8 06 fa ff ff       	call   c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019dd7:	83 c4 1c             	add    esp,0x1c
c0019dda:	52                   	push   edx
c0019ddb:	50                   	push   eax
c0019ddc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019de0:	2d c8 00 00 00       	sub    eax,0xc8
c0019de5:	8d 76 00             	lea    esi,[esi+0x0]
c0019de8:	50                   	push   eax
c0019de9:	e9 42 fc ff ff       	jmp    c0019a30 <Vm::x87Handler(regs*)+0xc2>
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	83 c0 18             	add    eax,0x18
c0019df3:	3c 07                	cmp    al,0x7
c0019df5:	0f 87 6d 04 00 00    	ja     c001a268 <Vm::x87Handler(regs*)+0x8fa>
c0019dfb:	83 ec 0c             	sub    esp,0xc
c0019dfe:	6a 00                	push   0x0
c0019e00:	e8 29 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019e05:	89 c6                	mov    esi,eax
c0019e07:	89 d7                	mov    edi,edx
c0019e09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e0d:	2d e8 00 00 00       	sub    eax,0xe8
c0019e12:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e15:	e8 14 fa ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019e1a:	57                   	push   edi
c0019e1b:	56                   	push   esi
c0019e1c:	52                   	push   edx
c0019e1d:	50                   	push   eax
c0019e1e:	e8 ab f9 ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e23:	83 c4 1c             	add    esp,0x1c
c0019e26:	52                   	push   edx
c0019e27:	50                   	push   eax
c0019e28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e2c:	2d e8 00 00 00       	sub    eax,0xe8
c0019e31:	eb b5                	jmp    c0019de8 <Vm::x87Handler(regs*)+0x47a>
c0019e33:	90                   	nop
c0019e34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e38:	8d 50 40             	lea    edx,[eax+0x40]
c0019e3b:	80 fa 07             	cmp    dl,0x7
c0019e3e:	77 3c                	ja     c0019e7c <Vm::x87Handler(regs*)+0x50e>
c0019e40:	83 ec 0c             	sub    esp,0xc
c0019e43:	2d c0 00 00 00       	sub    eax,0xc0
c0019e48:	50                   	push   eax
c0019e49:	e8 e0 f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019e4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e55:	89 c6                	mov    esi,eax
c0019e57:	89 d7                	mov    edi,edx
c0019e59:	e8 d0 f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019e5e:	57                   	push   edi
c0019e5f:	56                   	push   esi
c0019e60:	52                   	push   edx
c0019e61:	50                   	push   eax
c0019e62:	e8 3d f9 ff ff       	call   c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e67:	83 c4 1c             	add    esp,0x1c
c0019e6a:	52                   	push   edx
c0019e6b:	50                   	push   eax
c0019e6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e70:	2d c0 00 00 00       	sub    eax,0xc0
c0019e75:	e9 b2 01 00 00       	jmp    c001a02c <Vm::x87Handler(regs*)+0x6be>
c0019e7a:	66 90                	xchg   ax,ax
c0019e7c:	8d 50 20             	lea    edx,[eax+0x20]
c0019e7f:	80 fa 07             	cmp    dl,0x7
c0019e82:	77 3c                	ja     c0019ec0 <Vm::x87Handler(regs*)+0x552>
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	2d e0 00 00 00       	sub    eax,0xe0
c0019e8c:	50                   	push   eax
c0019e8d:	e8 9c f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019e92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e99:	89 c6                	mov    esi,eax
c0019e9b:	89 d7                	mov    edi,edx
c0019e9d:	e8 8c f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019ea2:	57                   	push   edi
c0019ea3:	56                   	push   esi
c0019ea4:	52                   	push   edx
c0019ea5:	50                   	push   eax
c0019ea6:	e8 23 f9 ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019eab:	83 c4 1c             	add    esp,0x1c
c0019eae:	52                   	push   edx
c0019eaf:	50                   	push   eax
c0019eb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eb4:	2d e0 00 00 00       	sub    eax,0xe0
c0019eb9:	e9 6e 01 00 00       	jmp    c001a02c <Vm::x87Handler(regs*)+0x6be>
c0019ebe:	66 90                	xchg   ax,ax
c0019ec0:	8d 50 18             	lea    edx,[eax+0x18]
c0019ec3:	80 fa 07             	cmp    dl,0x7
c0019ec6:	77 3c                	ja     c0019f04 <Vm::x87Handler(regs*)+0x596>
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	6a 00                	push   0x0
c0019ecd:	e8 5c f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019ed2:	89 c6                	mov    esi,eax
c0019ed4:	89 d7                	mov    edi,edx
c0019ed6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eda:	2d e8 00 00 00       	sub    eax,0xe8
c0019edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee2:	e8 47 f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019ee7:	57                   	push   edi
c0019ee8:	56                   	push   esi
c0019ee9:	52                   	push   edx
c0019eea:	50                   	push   eax
c0019eeb:	e8 de f8 ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ef0:	83 c4 1c             	add    esp,0x1c
c0019ef3:	52                   	push   edx
c0019ef4:	50                   	push   eax
c0019ef5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ef9:	2d e8 00 00 00       	sub    eax,0xe8
c0019efe:	e9 29 01 00 00       	jmp    c001a02c <Vm::x87Handler(regs*)+0x6be>
c0019f03:	90                   	nop
c0019f04:	8d 50 38             	lea    edx,[eax+0x38]
c0019f07:	80 fa 07             	cmp    dl,0x7
c0019f0a:	77 3c                	ja     c0019f48 <Vm::x87Handler(regs*)+0x5da>
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	2d c8 00 00 00       	sub    eax,0xc8
c0019f14:	50                   	push   eax
c0019f15:	e8 14 f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f21:	89 c6                	mov    esi,eax
c0019f23:	89 d7                	mov    edi,edx
c0019f25:	e8 04 f9 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019f2a:	57                   	push   edi
c0019f2b:	56                   	push   esi
c0019f2c:	52                   	push   edx
c0019f2d:	50                   	push   eax
c0019f2e:	e8 aa f8 ff ff       	call   c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f33:	83 c4 1c             	add    esp,0x1c
c0019f36:	52                   	push   edx
c0019f37:	50                   	push   eax
c0019f38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f3c:	2d c8 00 00 00       	sub    eax,0xc8
c0019f41:	e9 82 00 00 00       	jmp    c0019fc8 <Vm::x87Handler(regs*)+0x65a>
c0019f46:	66 90                	xchg   ax,ax
c0019f48:	3c f7                	cmp    al,0xf7
c0019f4a:	76 38                	jbe    c0019f84 <Vm::x87Handler(regs*)+0x616>
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	6a 00                	push   0x0
c0019f51:	e8 d8 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019f56:	89 c6                	mov    esi,eax
c0019f58:	89 d7                	mov    edi,edx
c0019f5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f5e:	2d f8 00 00 00       	sub    eax,0xf8
c0019f63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f66:	e8 c3 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019f6b:	57                   	push   edi
c0019f6c:	56                   	push   esi
c0019f6d:	52                   	push   edx
c0019f6e:	50                   	push   eax
c0019f6f:	e8 88 f8 ff ff       	call   c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f74:	83 c4 1c             	add    esp,0x1c
c0019f77:	52                   	push   edx
c0019f78:	50                   	push   eax
c0019f79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f7d:	2d f8 00 00 00       	sub    eax,0xf8
c0019f82:	eb 44                	jmp    c0019fc8 <Vm::x87Handler(regs*)+0x65a>
c0019f84:	8d 50 10             	lea    edx,[eax+0x10]
c0019f87:	80 fa 07             	cmp    dl,0x7
c0019f8a:	0f 87 6c 01 00 00    	ja     c001a0fc <Vm::x87Handler(regs*)+0x78e>
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	2d f0 00 00 00       	sub    eax,0xf0
c0019f98:	50                   	push   eax
c0019f99:	e8 90 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019f9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fa5:	89 c6                	mov    esi,eax
c0019fa7:	89 d7                	mov    edi,edx
c0019fa9:	e8 80 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019fae:	57                   	push   edi
c0019faf:	56                   	push   esi
c0019fb0:	52                   	push   edx
c0019fb1:	50                   	push   eax
c0019fb2:	e8 45 f8 ff ff       	call   c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fb7:	83 c4 1c             	add    esp,0x1c
c0019fba:	52                   	push   edx
c0019fbb:	50                   	push   eax
c0019fbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fc0:	2d f0 00 00 00       	sub    eax,0xf0
c0019fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc8:	50                   	push   eax
c0019fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fcc:	e8 a0 f8 ff ff       	call   c0019871 <Vm::fpuSetReg(int, unsigned long long)>
c0019fd1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fd5:	e8 41 f9 ff ff       	call   c001991b <Vm::fpuPop()>
c0019fda:	e9 0d fa ff ff       	jmp    c00199ec <Vm::x87Handler(regs*)+0x7e>
c0019fdf:	90                   	nop
c0019fe0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fe4:	8d 50 30             	lea    edx,[eax+0x30]
c0019fe7:	80 fa 07             	cmp    dl,0x7
c0019fea:	77 20                	ja     c001a00c <Vm::x87Handler(regs*)+0x69e>
c0019fec:	83 ec 0c             	sub    esp,0xc
c0019fef:	6a 00                	push   0x0
c0019ff1:	e8 38 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c0019ff6:	83 c4 0c             	add    esp,0xc
c0019ff9:	52                   	push   edx
c0019ffa:	50                   	push   eax
c0019ffb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fff:	2d d0 00 00 00       	sub    eax,0xd0
c001a004:	e9 df fd ff ff       	jmp    c0019de8 <Vm::x87Handler(regs*)+0x47a>
c001a009:	8d 76 00             	lea    esi,[esi+0x0]
c001a00c:	8d 50 28             	lea    edx,[eax+0x28]
c001a00f:	80 fa 07             	cmp    dl,0x7
c001a012:	77 28                	ja     c001a03c <Vm::x87Handler(regs*)+0x6ce>
c001a014:	83 ec 0c             	sub    esp,0xc
c001a017:	6a 00                	push   0x0
c001a019:	e8 10 f8 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a01e:	83 c4 0c             	add    esp,0xc
c001a021:	52                   	push   edx
c001a022:	50                   	push   eax
c001a023:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a027:	2d d8 00 00 00       	sub    eax,0xd8
c001a02c:	50                   	push   eax
c001a02d:	e8 3f f8 ff ff       	call   c0019871 <Vm::fpuSetReg(int, unsigned long long)>
c001a032:	e8 e4 f8 ff ff       	call   c001991b <Vm::fpuPop()>
c001a037:	e9 ac f9 ff ff       	jmp    c00199e8 <Vm::x87Handler(regs*)+0x7a>
c001a03c:	8d 50 20             	lea    edx,[eax+0x20]
c001a03f:	80 fa 07             	cmp    dl,0x7
c001a042:	77 30                	ja     c001a074 <Vm::x87Handler(regs*)+0x706>
c001a044:	83 ec 0c             	sub    esp,0xc
c001a047:	2d e0 00 00 00       	sub    eax,0xe0
c001a04c:	50                   	push   eax
c001a04d:	e8 dc f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a052:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a059:	89 c6                	mov    esi,eax
c001a05b:	89 d7                	mov    edi,edx
c001a05d:	e8 cc f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a062:	57                   	push   edi
c001a063:	56                   	push   esi
c001a064:	52                   	push   edx
c001a065:	50                   	push   eax
c001a066:	e8 e3 f6 ff ff       	call   c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a06b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a06f:	e9 78 02 00 00       	jmp    c001a2ec <Vm::x87Handler(regs*)+0x97e>
c001a074:	8d 50 18             	lea    edx,[eax+0x18]
c001a077:	80 fa 07             	cmp    dl,0x7
c001a07a:	0f 87 10 fb ff ff    	ja     c0019b90 <Vm::x87Handler(regs*)+0x222>
c001a080:	83 ec 0c             	sub    esp,0xc
c001a083:	2d e8 00 00 00       	sub    eax,0xe8
c001a088:	50                   	push   eax
c001a089:	e8 a0 f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a08e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a095:	89 c6                	mov    esi,eax
c001a097:	89 d7                	mov    edi,edx
c001a099:	e8 90 f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a09e:	57                   	push   edi
c001a09f:	56                   	push   esi
c001a0a0:	52                   	push   edx
c001a0a1:	50                   	push   eax
c001a0a2:	e8 a7 f6 ff ff       	call   c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0a7:	83 c4 20             	add    esp,0x20
c001a0aa:	e8 6c f8 ff ff       	call   c001991b <Vm::fpuPop()>
c001a0af:	eb 6f                	jmp    c001a120 <Vm::x87Handler(regs*)+0x7b2>
c001a0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0b8:	0f 85 22 01 00 00    	jne    c001a1e0 <Vm::x87Handler(regs*)+0x872>
c001a0be:	66 90                	xchg   ax,ax
c001a0c0:	83 ec 0c             	sub    esp,0xc
c001a0c3:	6a 01                	push   0x1
c001a0c5:	e8 64 f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a0ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0d1:	89 c6                	mov    esi,eax
c001a0d3:	89 d7                	mov    edi,edx
c001a0d5:	e8 54 f7 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a0da:	57                   	push   edi
c001a0db:	56                   	push   esi
c001a0dc:	52                   	push   edx
c001a0dd:	50                   	push   eax
c001a0de:	e8 6b f6 ff ff       	call   c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0e3:	83 c4 20             	add    esp,0x20
c001a0e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0ea:	e8 2c f8 ff ff       	call   c001991b <Vm::fpuPop()>
c001a0ef:	e8 27 f8 ff ff       	call   c001991b <Vm::fpuPop()>
c001a0f4:	e9 f7 f8 ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x82>
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	3c d9                	cmp    al,0xd9
c001a0fe:	0f 85 e8 02 00 00    	jne    c001a3ec <Vm::x87Handler(regs*)+0xa7e>
c001a104:	eb ba                	jmp    c001a0c0 <Vm::x87Handler(regs*)+0x752>
c001a106:	66 90                	xchg   ax,ax
c001a108:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a10c:	0f 85 2a 03 00 00    	jne    c001a43c <Vm::x87Handler(regs*)+0xace>
c001a112:	0f b7 05 80 79 02 c0 	movzx  eax,WORD PTR ds:0xc0027980
c001a119:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a11d:	8d 76 00             	lea    esi,[esi+0x0]
c001a120:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a124:	e9 c7 f8 ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x82>
c001a129:	8d 76 00             	lea    esi,[esi+0x0]
c001a12c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a130:	84 d2                	test   dl,dl
c001a132:	75 10                	jne    c001a144 <Vm::x87Handler(regs*)+0x7d6>
c001a134:	83 ec 0c             	sub    esp,0xc
c001a137:	ff 36                	push   DWORD PTR [esi]
c001a139:	e8 29 f4 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a13e:	e9 39 01 00 00       	jmp    c001a27c <Vm::x87Handler(regs*)+0x90e>
c001a143:	90                   	nop
c001a144:	80 fa 01             	cmp    dl,0x1
c001a147:	75 0f                	jne    c001a158 <Vm::x87Handler(regs*)+0x7ea>
c001a149:	83 ec 0c             	sub    esp,0xc
c001a14c:	ff 36                	push   DWORD PTR [esi]
c001a14e:	e8 14 f4 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a153:	e9 b4 02 00 00       	jmp    c001a40c <Vm::x87Handler(regs*)+0xa9e>
c001a158:	80 fa 04             	cmp    dl,0x4
c001a15b:	75 0f                	jne    c001a16c <Vm::x87Handler(regs*)+0x7fe>
c001a15d:	83 ec 0c             	sub    esp,0xc
c001a160:	ff 36                	push   DWORD PTR [esi]
c001a162:	e8 00 f4 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a167:	e9 9c 01 00 00       	jmp    c001a308 <Vm::x87Handler(regs*)+0x99a>
c001a16c:	80 fa 05             	cmp    dl,0x5
c001a16f:	75 1b                	jne    c001a18c <Vm::x87Handler(regs*)+0x81e>
c001a171:	83 ec 0c             	sub    esp,0xc
c001a174:	6a 00                	push   0x0
c001a176:	e8 b3 f6 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a17b:	89 c7                	mov    edi,eax
c001a17d:	89 d5                	mov    ebp,edx
c001a17f:	58                   	pop    eax
c001a180:	ff 36                	push   DWORD PTR [esi]
c001a182:	e8 e0 f3 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a187:	e9 bc 01 00 00       	jmp    c001a348 <Vm::x87Handler(regs*)+0x9da>
c001a18c:	80 fa 06             	cmp    dl,0x6
c001a18f:	75 0f                	jne    c001a1a0 <Vm::x87Handler(regs*)+0x832>
c001a191:	83 ec 0c             	sub    esp,0xc
c001a194:	ff 36                	push   DWORD PTR [esi]
c001a196:	e8 cc f3 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a19b:	e9 cc 01 00 00       	jmp    c001a36c <Vm::x87Handler(regs*)+0x9fe>
c001a1a0:	31 c0                	xor    eax,eax
c001a1a2:	80 fa 07             	cmp    dl,0x7
c001a1a5:	0f 85 d5 02 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a1ab:	83 ec 0c             	sub    esp,0xc
c001a1ae:	6a 00                	push   0x0
c001a1b0:	e8 79 f6 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a1b5:	89 c7                	mov    edi,eax
c001a1b7:	89 d5                	mov    ebp,edx
c001a1b9:	58                   	pop    eax
c001a1ba:	ff 36                	push   DWORD PTR [esi]
c001a1bc:	e8 a6 f3 ff ff       	call   c0019567 <Vm::fpu32ToInternal(unsigned int)>
c001a1c1:	e9 ee 01 00 00       	jmp    c001a3b4 <Vm::x87Handler(regs*)+0xa46>
c001a1c6:	66 90                	xchg   ax,ax
c001a1c8:	80 fa 03             	cmp    dl,0x3
c001a1cb:	0f 85 f7 01 00 00    	jne    c001a3c8 <Vm::x87Handler(regs*)+0xa5a>
c001a1d1:	e8 45 f7 ff ff       	call   c001991b <Vm::fpuPop()>
c001a1d6:	51                   	push   ecx
c001a1d7:	51                   	push   ecx
c001a1d8:	e9 03 02 00 00       	jmp    c001a3e0 <Vm::x87Handler(regs*)+0xa72>
c001a1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1e4:	80 fa 01             	cmp    dl,0x1
c001a1e7:	75 0b                	jne    c001a1f4 <Vm::x87Handler(regs*)+0x886>
c001a1e9:	57                   	push   edi
c001a1ea:	57                   	push   edi
c001a1eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1ed:	e9 0e 02 00 00       	jmp    c001a400 <Vm::x87Handler(regs*)+0xa92>
c001a1f2:	66 90                	xchg   ax,ax
c001a1f4:	80 fa 04             	cmp    dl,0x4
c001a1f7:	75 13                	jne    c001a20c <Vm::x87Handler(regs*)+0x89e>
c001a1f9:	31 d2                	xor    edx,edx
c001a1fb:	51                   	push   ecx
c001a1fc:	51                   	push   ecx
c001a1fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1ff:	52                   	push   edx
c001a200:	50                   	push   eax
c001a201:	e8 4a f4 ff ff       	call   c0019650 <Vm::fpuLongToFloat(long long)>
c001a206:	e9 fd 00 00 00       	jmp    c001a308 <Vm::x87Handler(regs*)+0x99a>
c001a20b:	90                   	nop
c001a20c:	31 c0                	xor    eax,eax
c001a20e:	80 fa 07             	cmp    dl,0x7
c001a211:	0f 85 69 02 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a217:	83 ec 0c             	sub    esp,0xc
c001a21a:	6a 00                	push   0x0
c001a21c:	e8 0d f6 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a221:	89 c7                	mov    edi,eax
c001a223:	89 d5                	mov    ebp,edx
c001a225:	58                   	pop    eax
c001a226:	8b 06                	mov    eax,DWORD PTR [esi]
c001a228:	5a                   	pop    edx
c001a229:	31 d2                	xor    edx,edx
c001a22b:	52                   	push   edx
c001a22c:	50                   	push   eax
c001a22d:	e8 1e f4 ff ff       	call   c0019650 <Vm::fpuLongToFloat(long long)>
c001a232:	e9 7d 01 00 00       	jmp    c001a3b4 <Vm::x87Handler(regs*)+0xa46>
c001a237:	90                   	nop
c001a238:	84 d2                	test   dl,dl
c001a23a:	75 10                	jne    c001a24c <Vm::x87Handler(regs*)+0x8de>
c001a23c:	31 d2                	xor    edx,edx
c001a23e:	55                   	push   ebp
c001a23f:	55                   	push   ebp
c001a240:	8b 06                	mov    eax,DWORD PTR [esi]
c001a242:	52                   	push   edx
c001a243:	50                   	push   eax
c001a244:	e9 03 02 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xade>
c001a249:	8d 76 00             	lea    esi,[esi+0x0]
c001a24c:	31 c0                	xor    eax,eax
c001a24e:	80 fa 02             	cmp    dl,0x2
c001a251:	0f 85 29 02 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a257:	83 ec 0c             	sub    esp,0xc
c001a25a:	6a 00                	push   0x0
c001a25c:	e8 cd f5 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a261:	59                   	pop    ecx
c001a262:	5f                   	pop    edi
c001a263:	e9 18 f9 ff ff       	jmp    c0019b80 <Vm::x87Handler(regs*)+0x212>
c001a268:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a26c:	84 d2                	test   dl,dl
c001a26e:	75 2c                	jne    c001a29c <Vm::x87Handler(regs*)+0x92e>
c001a270:	50                   	push   eax
c001a271:	50                   	push   eax
c001a272:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a275:	ff 36                	push   DWORD PTR [esi]
c001a277:	e8 30 f3 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a27c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a283:	89 c6                	mov    esi,eax
c001a285:	89 d7                	mov    edi,edx
c001a287:	e8 a2 f5 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a28c:	57                   	push   edi
c001a28d:	56                   	push   esi
c001a28e:	52                   	push   edx
c001a28f:	50                   	push   eax
c001a290:	e8 0f f5 ff ff       	call   c00197a4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a295:	e9 8e 01 00 00       	jmp    c001a428 <Vm::x87Handler(regs*)+0xaba>
c001a29a:	66 90                	xchg   ax,ax
c001a29c:	80 fa 01             	cmp    dl,0x1
c001a29f:	75 13                	jne    c001a2b4 <Vm::x87Handler(regs*)+0x946>
c001a2a1:	50                   	push   eax
c001a2a2:	50                   	push   eax
c001a2a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2a6:	ff 36                	push   DWORD PTR [esi]
c001a2a8:	e8 ff f2 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a2ad:	e9 5a 01 00 00       	jmp    c001a40c <Vm::x87Handler(regs*)+0xa9e>
c001a2b2:	66 90                	xchg   ax,ax
c001a2b4:	80 fa 02             	cmp    dl,0x2
c001a2b7:	0f 85 03 f9 ff ff    	jne    c0019bc0 <Vm::x87Handler(regs*)+0x252>
c001a2bd:	55                   	push   ebp
c001a2be:	55                   	push   ebp
c001a2bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2c2:	ff 36                	push   DWORD PTR [esi]
c001a2c4:	e8 e3 f2 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a2c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d0:	89 c6                	mov    esi,eax
c001a2d2:	89 d7                	mov    edi,edx
c001a2d4:	e8 55 f5 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a2d9:	57                   	push   edi
c001a2da:	56                   	push   esi
c001a2db:	52                   	push   edx
c001a2dc:	50                   	push   eax
c001a2dd:	e8 6c f4 ff ff       	call   c001974e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2e6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ec:	83 c4 20             	add    esp,0x20
c001a2ef:	e9 fc f6 ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x82>
c001a2f4:	80 fa 04             	cmp    dl,0x4
c001a2f7:	75 2f                	jne    c001a328 <Vm::x87Handler(regs*)+0x9ba>
c001a2f9:	51                   	push   ecx
c001a2fa:	51                   	push   ecx
c001a2fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2fe:	ff 36                	push   DWORD PTR [esi]
c001a300:	e8 a7 f2 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a305:	8d 76 00             	lea    esi,[esi+0x0]
c001a308:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a30f:	89 c6                	mov    esi,eax
c001a311:	89 d7                	mov    edi,edx
c001a313:	e8 16 f5 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a318:	57                   	push   edi
c001a319:	56                   	push   esi
c001a31a:	52                   	push   edx
c001a31b:	50                   	push   eax
c001a31c:	e8 ad f4 ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a321:	e9 02 01 00 00       	jmp    c001a428 <Vm::x87Handler(regs*)+0xaba>
c001a326:	66 90                	xchg   ax,ax
c001a328:	80 fa 05             	cmp    dl,0x5
c001a32b:	75 2b                	jne    c001a358 <Vm::x87Handler(regs*)+0x9ea>
c001a32d:	83 ec 0c             	sub    esp,0xc
c001a330:	6a 00                	push   0x0
c001a332:	e8 f7 f4 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a337:	89 c7                	mov    edi,eax
c001a339:	89 d5                	mov    ebp,edx
c001a33b:	58                   	pop    eax
c001a33c:	5a                   	pop    edx
c001a33d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a340:	ff 36                	push   DWORD PTR [esi]
c001a342:	e8 65 f2 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a347:	90                   	nop
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	55                   	push   ebp
c001a34c:	57                   	push   edi
c001a34d:	52                   	push   edx
c001a34e:	50                   	push   eax
c001a34f:	e8 7a f4 ff ff       	call   c00197ce <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a354:	eb 6a                	jmp    c001a3c0 <Vm::x87Handler(regs*)+0xa52>
c001a356:	66 90                	xchg   ax,ax
c001a358:	80 fa 06             	cmp    dl,0x6
c001a35b:	75 2f                	jne    c001a38c <Vm::x87Handler(regs*)+0xa1e>
c001a35d:	51                   	push   ecx
c001a35e:	51                   	push   ecx
c001a35f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a362:	ff 36                	push   DWORD PTR [esi]
c001a364:	e8 43 f2 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a369:	8d 76 00             	lea    esi,[esi+0x0]
c001a36c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a373:	89 c6                	mov    esi,eax
c001a375:	89 d7                	mov    edi,edx
c001a377:	e8 b2 f4 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a37c:	57                   	push   edi
c001a37d:	56                   	push   esi
c001a37e:	52                   	push   edx
c001a37f:	50                   	push   eax
c001a380:	e8 77 f4 ff ff       	call   c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a385:	e9 9e 00 00 00       	jmp    c001a428 <Vm::x87Handler(regs*)+0xaba>
c001a38a:	66 90                	xchg   ax,ax
c001a38c:	31 c0                	xor    eax,eax
c001a38e:	80 fa 07             	cmp    dl,0x7
c001a391:	0f 85 e9 00 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	6a 00                	push   0x0
c001a39c:	e8 8d f4 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a3a1:	89 c7                	mov    edi,eax
c001a3a3:	89 d5                	mov    ebp,edx
c001a3a5:	58                   	pop    eax
c001a3a6:	5a                   	pop    edx
c001a3a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3aa:	ff 36                	push   DWORD PTR [esi]
c001a3ac:	e8 fb f1 ff ff       	call   c00195ac <Vm::fpu64ToInternal(unsigned long long)>
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	55                   	push   ebp
c001a3b8:	57                   	push   edi
c001a3b9:	52                   	push   edx
c001a3ba:	50                   	push   eax
c001a3bb:	e8 3c f4 ff ff       	call   c00197fc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3c0:	83 c4 0c             	add    esp,0xc
c001a3c3:	eb 67                	jmp    c001a42c <Vm::x87Handler(regs*)+0xabe>
c001a3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c8:	31 c0                	xor    eax,eax
c001a3ca:	80 fa 02             	cmp    dl,0x2
c001a3cd:	0f 85 ad 00 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a3d3:	83 ec 0c             	sub    esp,0xc
c001a3d6:	6a 00                	push   0x0
c001a3d8:	e8 51 f4 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a3dd:	59                   	pop    ecx
c001a3de:	5f                   	pop    edi
c001a3df:	90                   	nop
c001a3e0:	52                   	push   edx
c001a3e1:	50                   	push   eax
c001a3e2:	e8 77 f1 ff ff       	call   c001955e <Vm::fpuInternalTo64(unsigned long long)>
c001a3e7:	e9 84 00 00 00       	jmp    c001a470 <Vm::x87Handler(regs*)+0xb02>
c001a3ec:	31 c0                	xor    eax,eax
c001a3ee:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3f3:	0f 85 87 00 00 00    	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a3f9:	50                   	push   eax
c001a3fa:	50                   	push   eax
c001a3fb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a3fe:	66 90                	xchg   ax,ax
c001a400:	31 d2                	xor    edx,edx
c001a402:	52                   	push   edx
c001a403:	50                   	push   eax
c001a404:	e8 47 f2 ff ff       	call   c0019650 <Vm::fpuLongToFloat(long long)>
c001a409:	8d 76 00             	lea    esi,[esi+0x0]
c001a40c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a413:	89 c6                	mov    esi,eax
c001a415:	89 d7                	mov    edi,edx
c001a417:	e8 12 f4 ff ff       	call   c001982e <Vm::fpuGetReg(int)>
c001a41c:	57                   	push   edi
c001a41d:	56                   	push   esi
c001a41e:	52                   	push   edx
c001a41f:	50                   	push   eax
c001a420:	e8 b8 f3 ff ff       	call   c00197dd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a425:	8d 76 00             	lea    esi,[esi+0x0]
c001a428:	83 c4 1c             	add    esp,0x1c
c001a42b:	90                   	nop
c001a42c:	52                   	push   edx
c001a42d:	50                   	push   eax
c001a42e:	6a 00                	push   0x0
c001a430:	e8 3c f4 ff ff       	call   c0019871 <Vm::fpuSetReg(int, unsigned long long)>
c001a435:	e9 7a f7 ff ff       	jmp    c0019bb4 <Vm::x87Handler(regs*)+0x246>
c001a43a:	66 90                	xchg   ax,ax
c001a43c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a440:	80 fa 05             	cmp    dl,0x5
c001a443:	75 13                	jne    c001a458 <Vm::x87Handler(regs*)+0xaea>
c001a445:	55                   	push   ebp
c001a446:	55                   	push   ebp
c001a447:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a44a:	ff 36                	push   DWORD PTR [esi]
c001a44c:	e8 c3 f1 ff ff       	call   c0019614 <Vm::fpuULongToFloat(unsigned long long)>
c001a451:	e9 52 f7 ff ff       	jmp    c0019ba8 <Vm::x87Handler(regs*)+0x23a>
c001a456:	66 90                	xchg   ax,ax
c001a458:	31 c0                	xor    eax,eax
c001a45a:	80 fa 07             	cmp    dl,0x7
c001a45d:	75 21                	jne    c001a480 <Vm::x87Handler(regs*)+0xb12>
c001a45f:	e8 b7 f4 ff ff       	call   c001991b <Vm::fpuPop()>
c001a464:	51                   	push   ecx
c001a465:	51                   	push   ecx
c001a466:	52                   	push   edx
c001a467:	50                   	push   eax
c001a468:	e8 48 f1 ff ff       	call   c00195b5 <Vm::fpuFloatToLong(unsigned long long)>
c001a46d:	8d 76 00             	lea    esi,[esi+0x0]
c001a470:	83 c4 10             	add    esp,0x10
c001a473:	89 06                	mov    DWORD PTR [esi],eax
c001a475:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a478:	e9 7b f7 ff ff       	jmp    c0019bf8 <Vm::x87Handler(regs*)+0x28a>
c001a47d:	8d 76 00             	lea    esi,[esi+0x0]
c001a480:	83 c4 1c             	add    esp,0x1c
c001a483:	5b                   	pop    ebx
c001a484:	5e                   	pop    esi
c001a485:	5f                   	pop    edi
c001a486:	5d                   	pop    ebp
c001a487:	c3                   	ret    

c001a488 <__static_initialization_and_destruction_0(int, int)>:
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a490:	75 1a                	jne    c001a4ac <__static_initialization_and_destruction_0(int, int)+0x24>
c001a492:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a49a:	75 10                	jne    c001a4ac <__static_initialization_and_destruction_0(int, int)+0x24>
c001a49c:	83 ec 0c             	sub    esp,0xc
c001a49f:	68 80 79 02 c0       	push   0xc0027980
c001a4a4:	e8 1f 74 00 00       	call   c00218c8 <Vm::_FPUState::_FPUState()>
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	90                   	nop
c001a4ad:	83 c4 0c             	add    esp,0xc
c001a4b0:	c3                   	ret    
c001a4b1:	8d 76 00             	lea    esi,[esi+0x0]

c001a4b4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a4b4:	83 ec 0c             	sub    esp,0xc
c001a4b7:	83 ec 08             	sub    esp,0x8
c001a4ba:	68 ff ff 00 00       	push   0xffff
c001a4bf:	6a 01                	push   0x1
c001a4c1:	e8 c2 ff ff ff       	call   c001a488 <__static_initialization_and_destruction_0(int, int)>
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	83 c4 0c             	add    esp,0xc
c001a4cc:	c3                   	ret    
c001a4cd:	66 90                	xchg   ax,ax
c001a4cf:	90                   	nop

c001a4d0 <FAT::getName()>:
c001a4d0:	b8 e0 4a 02 c0       	mov    eax,0xc0024ae0
c001a4d5:	c3                   	ret    
c001a4d6:	66 90                	xchg   ax,ax

c001a4d8 <FAT::tell(void*, unsigned long long*)>:
c001a4d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4dd:	75 09                	jne    c001a4e8 <FAT::tell(void*, unsigned long long*)+0x10>
c001a4df:	b8 04 00 00 00       	mov    eax,0x4
c001a4e4:	c3                   	ret    
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4ed:	75 09                	jne    c001a4f8 <FAT::tell(void*, unsigned long long*)+0x20>
c001a4ef:	b8 04 00 00 00       	mov    eax,0x4
c001a4f4:	c3                   	ret    
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4fc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4ff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a506:	89 01                	mov    DWORD PTR [ecx],eax
c001a508:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a50b:	b8 00 00 00 00       	mov    eax,0x0
c001a510:	c3                   	ret    
c001a511:	90                   	nop
c001a512:	66 90                	xchg   ax,ax

c001a514 <FAT::stat(void*, unsigned long long*)>:
c001a514:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a519:	75 09                	jne    c001a524 <FAT::stat(void*, unsigned long long*)+0x10>
c001a51b:	b8 04 00 00 00       	mov    eax,0x4
c001a520:	c3                   	ret    
c001a521:	8d 76 00             	lea    esi,[esi+0x0]
c001a524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a529:	75 09                	jne    c001a534 <FAT::stat(void*, unsigned long long*)+0x20>
c001a52b:	b8 04 00 00 00       	mov    eax,0x4
c001a530:	c3                   	ret    
c001a531:	8d 76 00             	lea    esi,[esi+0x0]
c001a534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a538:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a53b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a53e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a542:	89 01                	mov    DWORD PTR [ecx],eax
c001a544:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a547:	b8 00 00 00 00       	mov    eax,0x0
c001a54c:	c3                   	ret    
c001a54d:	90                   	nop
c001a54e:	66 90                	xchg   ax,ax

c001a550 <FAT::~FAT()>:
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	ba 2c 4b 02 c0       	mov    edx,0xc0024b2c
c001a558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55c:	89 10                	mov    DWORD PTR [eax],edx
c001a55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a562:	83 ec 0c             	sub    esp,0xc
c001a565:	50                   	push   eax
c001a566:	e8 33 28 ff ff       	call   c000cd9e <Filesystem::~Filesystem()>
c001a56b:	83 c4 10             	add    esp,0x10
c001a56e:	90                   	nop
c001a56f:	83 c4 0c             	add    esp,0xc
c001a572:	c3                   	ret    
c001a573:	90                   	nop

c001a574 <FAT::~FAT()>:
c001a574:	83 ec 0c             	sub    esp,0xc
c001a577:	83 ec 0c             	sub    esp,0xc
c001a57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a57e:	e8 cd ff ff ff       	call   c001a550 <FAT::~FAT()>
c001a583:	83 c4 10             	add    esp,0x10
c001a586:	83 ec 08             	sub    esp,0x8
c001a589:	6a 08                	push   0x8
c001a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a58f:	e8 ef 23 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	83 c4 0c             	add    esp,0xc
c001a59a:	c3                   	ret    
c001a59b:	90                   	nop

c001a59c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a59c:	83 ec 1c             	sub    esp,0x1c
c001a59f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a5a6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a5ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5af:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a5b6:	83 f8 ff             	cmp    eax,0xffffffff
c001a5b9:	75 35                	jne    c001a5f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a5bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5bf:	88 c2                	mov    dl,al
c001a5c1:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a5c6:	01 d0                	add    eax,edx
c001a5c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5cc:	8b 15 e0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279e0
c001a5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5d6:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a5dd:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a5e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5e6:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a5ed:	eb 19                	jmp    c001a608 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5ef:	90                   	nop
c001a5f0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5f4:	88 c2                	mov    dl,al
c001a5f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5fa:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a601:	01 d0                	add    eax,edx
c001a603:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a607:	90                   	nop
c001a608:	83 ec 04             	sub    esp,0x4
c001a60b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a60f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a613:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a617:	50                   	push   eax
c001a618:	e8 15 c6 fe ff       	call   c0006c32 <f_getlabel>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a624:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a629:	75 09                	jne    c001a634 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a62b:	b8 00 00 00 00       	mov    eax,0x0
c001a630:	eb 0a                	jmp    c001a63c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a632:	66 90                	xchg   ax,ax
c001a634:	b8 01 00 00 00       	mov    eax,0x1
c001a639:	8d 76 00             	lea    esi,[esi+0x0]
c001a63c:	83 c4 1c             	add    esp,0x1c
c001a63f:	c3                   	ret    

c001a640 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a640:	57                   	push   edi
c001a641:	83 ec 58             	sub    esp,0x58
c001a644:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a64c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a650:	b9 0f 00 00 00       	mov    ecx,0xf
c001a655:	b8 00 00 00 00       	mov    eax,0x0
c001a65a:	fc                   	cld    
c001a65b:	89 d7                	mov    edi,edx
c001a65d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a65f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a663:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a66a:	83 f8 ff             	cmp    eax,0xffffffff
c001a66d:	75 35                	jne    c001a6a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a66f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a673:	88 c2                	mov    dl,al
c001a675:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a67a:	01 d0                	add    eax,edx
c001a67c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a680:	8b 15 e0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279e0
c001a686:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a68a:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a691:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a696:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a69a:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a6a1:	eb 19                	jmp    c001a6bc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6a3:	90                   	nop
c001a6a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6a8:	88 c2                	mov    dl,al
c001a6aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6ae:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a6b5:	01 d0                	add    eax,edx
c001a6b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6bb:	90                   	nop
c001a6bc:	83 ec 08             	sub    esp,0x8
c001a6bf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6c7:	50                   	push   eax
c001a6c8:	e8 b3 61 fe ff       	call   c0000880 <strcat>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	83 ec 0c             	sub    esp,0xc
c001a6d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6d7:	50                   	push   eax
c001a6d8:	e8 43 c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6e4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6e9:	75 09                	jne    c001a6f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6eb:	b8 00 00 00 00       	mov    eax,0x0
c001a6f0:	eb 0a                	jmp    c001a6fc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6f2:	66 90                	xchg   ax,ax
c001a6f4:	b8 01 00 00 00       	mov    eax,0x1
c001a6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6fc:	83 c4 58             	add    esp,0x58
c001a6ff:	5f                   	pop    edi
c001a700:	c3                   	ret    
c001a701:	90                   	nop
c001a702:	66 90                	xchg   ax,ax

c001a704 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a704:	83 ec 2c             	sub    esp,0x2c
c001a707:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a70f:	83 ec 08             	sub    esp,0x8
c001a712:	68 04 4b 02 c0       	push   0xc0024b04
c001a717:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a71b:	e8 ac 60 fe ff       	call   c00007cc <strcmp>
c001a720:	83 c4 10             	add    esp,0x10
c001a723:	85 c0                	test   eax,eax
c001a725:	0f 94 c0             	sete   al
c001a728:	84 c0                	test   al,al
c001a72a:	74 10                	je     c001a73c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a72c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a734:	e9 b3 00 00 00       	jmp    c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a739:	8d 76 00             	lea    esi,[esi+0x0]
c001a73c:	83 ec 08             	sub    esp,0x8
c001a73f:	68 f6 4a 02 c0       	push   0xc0024af6
c001a744:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a748:	e8 7f 60 fe ff       	call   c00007cc <strcmp>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	85 c0                	test   eax,eax
c001a752:	0f 94 c0             	sete   al
c001a755:	84 c0                	test   al,al
c001a757:	74 0f                	je     c001a768 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a759:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a761:	e9 86 00 00 00       	jmp    c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a766:	66 90                	xchg   ax,ax
c001a768:	83 ec 08             	sub    esp,0x8
c001a76b:	68 fc 4a 02 c0       	push   0xc0024afc
c001a770:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a774:	e8 53 60 fe ff       	call   c00007cc <strcmp>
c001a779:	83 c4 10             	add    esp,0x10
c001a77c:	85 c0                	test   eax,eax
c001a77e:	0f 94 c0             	sete   al
c001a781:	84 c0                	test   al,al
c001a783:	74 0b                	je     c001a790 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a785:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a78d:	eb 5d                	jmp    c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a78f:	90                   	nop
c001a790:	83 ec 08             	sub    esp,0x8
c001a793:	68 2c 20 02 c0       	push   0xc002202c
c001a798:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a79c:	e8 2b 60 fe ff       	call   c00007cc <strcmp>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	85 c0                	test   eax,eax
c001a7a6:	0f 94 c0             	sete   al
c001a7a9:	84 c0                	test   al,al
c001a7ab:	74 0b                	je     c001a7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a7ad:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a7b5:	eb 35                	jmp    c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7b7:	90                   	nop
c001a7b8:	83 ec 08             	sub    esp,0x8
c001a7bb:	68 02 4b 02 c0       	push   0xc0024b02
c001a7c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7c4:	e8 03 60 fe ff       	call   c00007cc <strcmp>
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	85 c0                	test   eax,eax
c001a7ce:	0f 94 c0             	sete   al
c001a7d1:	84 c0                	test   al,al
c001a7d3:	74 0b                	je     c001a7e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7dd:	eb 0d                	jmp    c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7df:	90                   	nop
c001a7e0:	b8 08 00 00 00       	mov    eax,0x8
c001a7e5:	e9 ea 00 00 00       	jmp    c001a8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7ea:	66 90                	xchg   ax,ax
c001a7ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a7f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7fc:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a803:	83 f8 ff             	cmp    eax,0xffffffff
c001a806:	75 34                	jne    c001a83c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a808:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a80c:	88 c2                	mov    dl,al
c001a80e:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a813:	01 d0                	add    eax,edx
c001a815:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a819:	8b 15 e0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279e0
c001a81f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a823:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a82a:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a82f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a833:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a83a:	eb 18                	jmp    c001a854 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a83c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a840:	88 c2                	mov    dl,al
c001a842:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a846:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a84d:	01 d0                	add    eax,edx
c001a84f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a853:	90                   	nop
c001a854:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a858:	88 04 24             	mov    BYTE PTR [esp],al
c001a85b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a85f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a863:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a86b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a870:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	68 00 20 00 00       	push   0x2000
c001a880:	e8 3e f1 fe ff       	call   c00099c3 <malloc>
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a88c:	68 00 20 00 00       	push   0x2000
c001a891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a895:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a899:	50                   	push   eax
c001a89a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a89e:	50                   	push   eax
c001a89f:	e8 fd cb fe ff       	call   c00074a1 <f_mkfs>
c001a8a4:	83 c4 10             	add    esp,0x10
c001a8a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8b0:	75 0a                	jne    c001a8bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a8b2:	b8 00 00 00 00       	mov    eax,0x0
c001a8b7:	eb 1b                	jmp    c001a8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8c1:	75 09                	jne    c001a8cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8c3:	b8 09 00 00 00       	mov    eax,0x9
c001a8c8:	eb 0a                	jmp    c001a8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8ca:	66 90                	xchg   ax,ax
c001a8cc:	b8 01 00 00 00       	mov    eax,0x1
c001a8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d4:	83 c4 2c             	add    esp,0x2c
c001a8d7:	c3                   	ret    

c001a8d8 <FAT::tryMount(LogicalDisk*, int)>:
c001a8d8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8de:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a8e3:	83 f8 14             	cmp    eax,0x14
c001a8e6:	75 18                	jne    c001a900 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8e8:	83 ec 0c             	sub    esp,0xc
c001a8eb:	68 08 4b 02 c0       	push   0xc0024b08
c001a8f0:	e8 30 9a ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001a8f5:	83 c4 10             	add    esp,0x10
c001a8f8:	b0 00                	mov    al,0x0
c001a8fa:	e9 e9 01 00 00       	jmp    c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8ff:	90                   	nop
c001a900:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a907:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a90d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a913:	3d 00 02 00 00       	cmp    eax,0x200
c001a918:	74 0a                	je     c001a924 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a91a:	b0 00                	mov    al,0x0
c001a91c:	e9 c7 01 00 00       	jmp    c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a921:	8d 76 00             	lea    esi,[esi+0x0]
c001a924:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a92c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a933:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001a93a:	83 f8 ff             	cmp    eax,0xffffffff
c001a93d:	74 09                	je     c001a948 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a93f:	b0 01                	mov    al,0x1
c001a941:	e9 a2 01 00 00       	jmp    c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a946:	66 90                	xchg   ax,ax
c001a948:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a952:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a95a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a961:	88 c2                	mov    dl,al
c001a963:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a968:	01 d0                	add    eax,edx
c001a96a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a971:	8b 15 e0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279e0
c001a977:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a97e:	89 14 85 00 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8600],edx
c001a985:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001a98a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a991:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a998:	83 ec 0c             	sub    esp,0xc
c001a99b:	68 54 02 00 00       	push   0x254
c001a9a0:	e8 1e f0 fe ff       	call   c00099c3 <malloc>
c001a9a5:	83 c4 10             	add    esp,0x10
c001a9a8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a9af:	83 ec 04             	sub    esp,0x4
c001a9b2:	6a 00                	push   0x0
c001a9b4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9bb:	50                   	push   eax
c001a9bc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9c3:	e8 61 a4 fe ff       	call   c0004e29 <f_mount>
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9d2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9da:	74 1c                	je     c001a9f8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9dc:	83 ec 0c             	sub    esp,0xc
c001a9df:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9e6:	e8 f8 ef fe ff       	call   c00099e3 <rfree>
c001a9eb:	83 c4 10             	add    esp,0x10
c001a9ee:	b0 00                	mov    al,0x0
c001a9f0:	e9 f3 00 00 00       	jmp    c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f8:	83 ec 04             	sub    esp,0x4
c001a9fb:	68 00 01 00 00       	push   0x100
c001aa00:	6a 00                	push   0x0
c001aa02:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa09:	50                   	push   eax
c001aa0a:	e8 75 5c fe ff       	call   c0000684 <memset>
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	83 ec 08             	sub    esp,0x8
c001aa15:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa1c:	50                   	push   eax
c001aa1d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa24:	50                   	push   eax
c001aa25:	e8 56 5e fe ff       	call   c0000880 <strcat>
c001aa2a:	83 c4 10             	add    esp,0x10
c001aa2d:	83 ec 08             	sub    esp,0x8
c001aa30:	68 16 4b 02 c0       	push   0xc0024b16
c001aa35:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa3c:	50                   	push   eax
c001aa3d:	e8 3e 5e fe ff       	call   c0000880 <strcat>
c001aa42:	83 c4 10             	add    esp,0x10
c001aa45:	83 ec 04             	sub    esp,0x4
c001aa48:	6a 01                	push   0x1
c001aa4a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa51:	50                   	push   eax
c001aa52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa56:	50                   	push   eax
c001aa57:	e8 2f a4 fe ff       	call   c0004e8b <f_open>
c001aa5c:	83 c4 10             	add    esp,0x10
c001aa5f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa66:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa6d:	85 c0                	test   eax,eax
c001aa6f:	74 0b                	je     c001aa7c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa71:	78 31                	js     c001aaa4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa73:	83 e8 04             	sub    eax,0x4
c001aa76:	83 f8 01             	cmp    eax,0x1
c001aa79:	77 29                	ja     c001aaa4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa7b:	90                   	nop
c001aa7c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa84:	83 ec 0c             	sub    esp,0xc
c001aa87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa8b:	50                   	push   eax
c001aa8c:	e8 4c af fe ff       	call   c00059dd <f_close>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	90                   	nop
c001aa95:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aa9d:	74 41                	je     c001aae0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aa9f:	eb 33                	jmp    c001aad4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aaae:	e8 30 ef fe ff       	call   c00099e3 <rfree>
c001aab3:	83 c4 10             	add    esp,0x10
c001aab6:	83 ec 04             	sub    esp,0x4
c001aab9:	6a 00                	push   0x0
c001aabb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aac2:	50                   	push   eax
c001aac3:	6a 00                	push   0x0
c001aac5:	e8 5f a3 fe ff       	call   c0004e29 <f_mount>
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	b0 00                	mov    al,0x0
c001aacf:	eb 17                	jmp    c001aae8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aad1:	8d 76 00             	lea    esi,[esi+0x0]
c001aad4:	a1 e0 79 02 c0       	mov    eax,ds:0xc00279e0
c001aad9:	40                   	inc    eax
c001aada:	a3 e0 79 02 c0       	mov    ds:0xc00279e0,eax
c001aadf:	90                   	nop
c001aae0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aae7:	90                   	nop
c001aae8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aaee:	c3                   	ret    
c001aaef:	90                   	nop

c001aaf0 <FAT::allocateSwapfile(char const*, int)>:
c001aaf0:	55                   	push   ebp
c001aaf1:	57                   	push   edi
c001aaf2:	56                   	push   esi
c001aaf3:	53                   	push   ebx
c001aaf4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aafa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab05:	83 ec 0c             	sub    esp,0xc
c001ab08:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab0f:	e8 af ee fe ff       	call   c00099c3 <malloc>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	89 c7                	mov    edi,eax
c001ab19:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c001ab1e:	83 ec 04             	sub    esp,0x4
c001ab21:	50                   	push   eax
c001ab22:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab29:	57                   	push   edi
c001ab2a:	e8 9f 24 ff ff       	call   c000cfce <File::File(char const*, Process*)>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab39:	83 ec 04             	sub    esp,0x4
c001ab3c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab40:	50                   	push   eax
c001ab41:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab45:	50                   	push   eax
c001ab46:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab4d:	e8 8c 27 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c001ab52:	83 c4 10             	add    esp,0x10
c001ab55:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab5c:	c1 e0 14             	shl    eax,0x14
c001ab5f:	89 c7                	mov    edi,eax
c001ab61:	89 c5                	mov    ebp,eax
c001ab63:	c1 fd 1f             	sar    ebp,0x1f
c001ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab6e:	89 f9                	mov    ecx,edi
c001ab70:	31 c1                	xor    ecx,eax
c001ab72:	89 cb                	mov    ebx,ecx
c001ab74:	89 e9                	mov    ecx,ebp
c001ab76:	31 d1                	xor    ecx,edx
c001ab78:	89 ce                	mov    esi,ecx
c001ab7a:	89 f0                	mov    eax,esi
c001ab7c:	09 d8                	or     eax,ebx
c001ab7e:	0f 84 98 00 00 00    	je     c001ac1c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab8e:	e8 17 26 ff ff       	call   c000d1aa <File::unlink()>
c001ab93:	83 c4 10             	add    esp,0x10
c001ab96:	83 ec 08             	sub    esp,0x8
c001ab99:	6a 12                	push   0x12
c001ab9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aba2:	e8 8b 24 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abb1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abb7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abbe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abc5:	c1 e0 14             	shl    eax,0x14
c001abc8:	99                   	cdq    
c001abc9:	6a 01                	push   0x1
c001abcb:	52                   	push   edx
c001abcc:	50                   	push   eax
c001abcd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abd4:	e8 b4 c4 fe ff       	call   c000708d <f_expand>
c001abd9:	83 c4 10             	add    esp,0x10
c001abdc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abe3:	8b 00                	mov    eax,DWORD PTR [eax]
c001abe5:	83 c0 10             	add    eax,0x10
c001abe8:	8b 00                	mov    eax,DWORD PTR [eax]
c001abea:	83 ec 0c             	sub    esp,0xc
c001abed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abf1:	52                   	push   edx
c001abf2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abf6:	52                   	push   edx
c001abf7:	6a 00                	push   0x0
c001abf9:	68 00 04 00 00       	push   0x400
c001abfe:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac05:	ff d0                	call   eax
c001ac07:	83 c4 20             	add    esp,0x20
c001ac0a:	83 ec 0c             	sub    esp,0xc
c001ac0d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac14:	e8 77 24 ff ff       	call   c000d090 <File::close()>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	83 ec 08             	sub    esp,0x8
c001ac1f:	6a 01                	push   0x1
c001ac21:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac28:	e8 05 24 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac39:	83 c0 0c             	add    eax,0xc
c001ac3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac45:	52                   	push   edx
c001ac46:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac4a:	52                   	push   edx
c001ac4b:	6a 00                	push   0x0
c001ac4d:	6a 04                	push   0x4
c001ac4f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac56:	ff d0                	call   eax
c001ac58:	83 c4 20             	add    esp,0x20
c001ac5b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac62:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac68:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac6f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac76:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac7c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac83:	83 ec 0c             	sub    esp,0xc
c001ac86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac8d:	e8 fe 23 ff ff       	call   c000d090 <File::close()>
c001ac92:	83 c4 10             	add    esp,0x10
c001ac95:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ac9c:	ba 00 00 00 00       	mov    edx,0x0
c001aca1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001aca7:	5b                   	pop    ebx
c001aca8:	5e                   	pop    esi
c001aca9:	5f                   	pop    edi
c001acaa:	5d                   	pop    ebp
c001acab:	c3                   	ret    

c001acac <FAT::readDir(void*, unsigned long, void*, int*)>:
c001acac:	57                   	push   edi
c001acad:	56                   	push   esi
c001acae:	53                   	push   ebx
c001acaf:	81 ec 50 02 00 00    	sub    esp,0x250
c001acb5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001acbd:	74 0d                	je     c001accc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001acbf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001acc7:	75 0f                	jne    c001acd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001acc9:	8d 76 00             	lea    esi,[esi+0x0]
c001accc:	b8 04 00 00 00       	mov    eax,0x4
c001acd1:	e9 36 01 00 00       	jmp    c001ae0c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acd6:	66 90                	xchg   ax,ax
c001acd8:	83 ec 08             	sub    esp,0x8
c001acdb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ace2:	50                   	push   eax
c001ace3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acea:	e8 f8 b2 fe ff       	call   c0005fe7 <f_readdir>
c001acef:	83 c4 10             	add    esp,0x10
c001acf2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001acf9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad00:	83 ec 0c             	sub    esp,0xc
c001ad03:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad0a:	83 c0 1a             	add    eax,0x1a
c001ad0d:	50                   	push   eax
c001ad0e:	e8 8d 59 fe ff       	call   c00006a0 <strlen>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	ba 00 00 00 00       	mov    edx,0x0
c001ad1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad23:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad2a:	0f b6 c0             	movzx  eax,al
c001ad2d:	83 e0 10             	and    eax,0x10
c001ad30:	74 0a                	je     c001ad3c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad32:	b8 02 00 00 00       	mov    eax,0x2
c001ad37:	eb 0b                	jmp    c001ad44 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad39:	8d 76 00             	lea    esi,[esi+0x0]
c001ad3c:	b8 01 00 00 00       	mov    eax,0x1
c001ad41:	8d 76 00             	lea    esi,[esi+0x0]
c001ad44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad48:	83 ec 08             	sub    esp,0x8
c001ad4b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad52:	83 c0 1a             	add    eax,0x1a
c001ad55:	50                   	push   eax
c001ad56:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad5a:	83 c0 10             	add    eax,0x10
c001ad5d:	50                   	push   eax
c001ad5e:	e8 dd 59 fe ff       	call   c0000740 <strcpy>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad6d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad74:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad78:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad7f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad86:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad8d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad94:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad9b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ada2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ada9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001adb0:	89 c6                	mov    esi,eax
c001adb2:	89 d7                	mov    edi,edx
c001adb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adb6:	89 c8                	mov    eax,ecx
c001adb8:	89 fa                	mov    edx,edi
c001adba:	89 f3                	mov    ebx,esi
c001adbc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001adc3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001adca:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001add1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001add8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001adde:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ade5:	84 c0                	test   al,al
c001ade7:	75 07                	jne    c001adf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ade9:	b8 07 00 00 00       	mov    eax,0x7
c001adee:	eb 1c                	jmp    c001ae0c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adf0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001adf7:	85 c0                	test   eax,eax
c001adf9:	75 09                	jne    c001ae04 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001adfb:	b8 00 00 00 00       	mov    eax,0x0
c001ae00:	eb 0a                	jmp    c001ae0c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae02:	66 90                	xchg   ax,ax
c001ae04:	b8 01 00 00 00       	mov    eax,0x1
c001ae09:	8d 76 00             	lea    esi,[esi+0x0]
c001ae0c:	81 c4 50 02 00 00    	add    esp,0x250
c001ae12:	5b                   	pop    ebx
c001ae13:	5e                   	pop    esi
c001ae14:	5f                   	pop    edi
c001ae15:	c3                   	ret    
c001ae16:	66 90                	xchg   ax,ax

c001ae18 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae18:	83 ec 1c             	sub    esp,0x1c
c001ae1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae20:	74 0a                	je     c001ae2c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae27:	75 0b                	jne    c001ae34 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae29:	8d 76 00             	lea    esi,[esi+0x0]
c001ae2c:	b8 04 00 00 00       	mov    eax,0x4
c001ae31:	eb 41                	jmp    c001ae74 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae33:	90                   	nop
c001ae34:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae38:	50                   	push   eax
c001ae39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae45:	e8 7d a4 fe ff       	call   c00052c7 <f_read>
c001ae4a:	83 c4 10             	add    esp,0x10
c001ae4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae55:	89 c2                	mov    edx,eax
c001ae57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae5b:	89 10                	mov    DWORD PTR [eax],edx
c001ae5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae61:	85 c0                	test   eax,eax
c001ae63:	75 07                	jne    c001ae6c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae65:	b8 00 00 00 00       	mov    eax,0x0
c001ae6a:	eb 08                	jmp    c001ae74 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae6c:	b8 01 00 00 00       	mov    eax,0x1
c001ae71:	8d 76 00             	lea    esi,[esi+0x0]
c001ae74:	83 c4 1c             	add    esp,0x1c
c001ae77:	c3                   	ret    

c001ae78 <FAT::write(void*, unsigned long, void*, int*)>:
c001ae78:	83 ec 1c             	sub    esp,0x1c
c001ae7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae80:	74 0a                	je     c001ae8c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae87:	75 0b                	jne    c001ae94 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae89:	8d 76 00             	lea    esi,[esi+0x0]
c001ae8c:	b8 04 00 00 00       	mov    eax,0x4
c001ae91:	eb 41                	jmp    c001aed4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae93:	90                   	nop
c001ae94:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae98:	50                   	push   eax
c001ae99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aea1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea5:	e8 9d a6 fe ff       	call   c0005547 <f_write>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeb5:	89 c2                	mov    edx,eax
c001aeb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aebb:	89 10                	mov    DWORD PTR [eax],edx
c001aebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec1:	85 c0                	test   eax,eax
c001aec3:	75 07                	jne    c001aecc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aec5:	b8 00 00 00 00       	mov    eax,0x0
c001aeca:	eb 08                	jmp    c001aed4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aecc:	b8 01 00 00 00       	mov    eax,0x1
c001aed1:	8d 76 00             	lea    esi,[esi+0x0]
c001aed4:	83 c4 1c             	add    esp,0x1c
c001aed7:	c3                   	ret    

c001aed8 <FAT::close(void*)>:
c001aed8:	83 ec 1c             	sub    esp,0x1c
c001aedb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aee0:	75 0a                	jne    c001aeec <FAT::close(void*)+0x14>
c001aee2:	b8 04 00 00 00       	mov    eax,0x4
c001aee7:	eb 3f                	jmp    c001af28 <FAT::close(void*)+0x50>
c001aee9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef3:	e8 e5 aa fe ff       	call   c00059dd <f_close>
c001aef8:	83 c4 10             	add    esp,0x10
c001aefb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeff:	83 ec 0c             	sub    esp,0xc
c001af02:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af06:	e8 c8 ea fe ff       	call   c00099d3 <free>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af12:	85 c0                	test   eax,eax
c001af14:	75 0a                	jne    c001af20 <FAT::close(void*)+0x48>
c001af16:	b8 00 00 00 00       	mov    eax,0x0
c001af1b:	eb 0b                	jmp    c001af28 <FAT::close(void*)+0x50>
c001af1d:	8d 76 00             	lea    esi,[esi+0x0]
c001af20:	b8 01 00 00 00       	mov    eax,0x1
c001af25:	8d 76 00             	lea    esi,[esi+0x0]
c001af28:	83 c4 1c             	add    esp,0x1c
c001af2b:	c3                   	ret    

c001af2c <FAT::closeDir(void*)>:
c001af2c:	83 ec 1c             	sub    esp,0x1c
c001af2f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af34:	75 0a                	jne    c001af40 <FAT::closeDir(void*)+0x14>
c001af36:	b8 04 00 00 00       	mov    eax,0x4
c001af3b:	eb 3f                	jmp    c001af7c <FAT::closeDir(void*)+0x50>
c001af3d:	8d 76 00             	lea    esi,[esi+0x0]
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af47:	e8 79 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af4c:	83 c4 10             	add    esp,0x10
c001af4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af53:	83 ec 0c             	sub    esp,0xc
c001af56:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af5a:	e8 74 ea fe ff       	call   c00099d3 <free>
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af66:	85 c0                	test   eax,eax
c001af68:	75 0a                	jne    c001af74 <FAT::closeDir(void*)+0x48>
c001af6a:	b8 00 00 00 00       	mov    eax,0x0
c001af6f:	eb 0b                	jmp    c001af7c <FAT::closeDir(void*)+0x50>
c001af71:	8d 76 00             	lea    esi,[esi+0x0]
c001af74:	b8 01 00 00 00       	mov    eax,0x1
c001af79:	8d 76 00             	lea    esi,[esi+0x0]
c001af7c:	83 c4 1c             	add    esp,0x1c
c001af7f:	c3                   	ret    

c001af80 <FAT::seek(void*, unsigned long long)>:
c001af80:	83 ec 2c             	sub    esp,0x2c
c001af83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af93:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af98:	75 0a                	jne    c001afa4 <FAT::seek(void*, unsigned long long)+0x24>
c001af9a:	b8 04 00 00 00       	mov    eax,0x4
c001af9f:	eb 37                	jmp    c001afd8 <FAT::seek(void*, unsigned long long)+0x58>
c001afa1:	8d 76 00             	lea    esi,[esi+0x0]
c001afa4:	83 ec 04             	sub    esp,0x4
c001afa7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afaf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001afb3:	e8 54 aa fe ff       	call   c0005a0c <f_lseek>
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afc3:	85 c0                	test   eax,eax
c001afc5:	75 09                	jne    c001afd0 <FAT::seek(void*, unsigned long long)+0x50>
c001afc7:	b8 00 00 00 00       	mov    eax,0x0
c001afcc:	eb 0a                	jmp    c001afd8 <FAT::seek(void*, unsigned long long)+0x58>
c001afce:	66 90                	xchg   ax,ax
c001afd0:	b8 01 00 00 00       	mov    eax,0x1
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	83 c4 2c             	add    esp,0x2c
c001afdb:	c3                   	ret    

c001afdc <fatWrapperReadDisk>:
c001afdc:	83 ec 1c             	sub    esp,0x1c
c001afdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afe3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001afee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aff6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001affb:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001b002:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b006:	83 ec 0c             	sub    esp,0xc
c001b009:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b00d:	52                   	push   edx
c001b00e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b016:	50                   	push   eax
c001b017:	e8 64 51 ff ff       	call   c0010180 <LogicalDisk::read(unsigned long long, int, void*)>
c001b01c:	83 c4 20             	add    esp,0x20
c001b01f:	83 c4 1c             	add    esp,0x1c
c001b022:	c3                   	ret    
c001b023:	90                   	nop

c001b024 <fatWrapperWriteDisk>:
c001b024:	83 ec 1c             	sub    esp,0x1c
c001b027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b02f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b033:	89 04 24             	mov    DWORD PTR [esp],eax
c001b036:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b03a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b03e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b043:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001b04a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b04e:	83 ec 0c             	sub    esp,0xc
c001b051:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b055:	52                   	push   edx
c001b056:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b05a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b05e:	50                   	push   eax
c001b05f:	e8 88 51 ff ff       	call   c00101ec <LogicalDisk::write(unsigned long long, int, void*)>
c001b064:	83 c4 20             	add    esp,0x20
c001b067:	83 c4 1c             	add    esp,0x1c
c001b06a:	c3                   	ret    
c001b06b:	90                   	nop

c001b06c <fatWrapperIoctl>:
c001b06c:	53                   	push   ebx
c001b06d:	83 ec 28             	sub    esp,0x28
c001b070:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b078:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b07c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b080:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b085:	75 31                	jne    c001b0b8 <fatWrapperIoctl+0x4c>
c001b087:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b08b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b08f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b094:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001b09b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0ab:	66 89 02             	mov    WORD PTR [edx],ax
c001b0ae:	b8 00 00 00 00       	mov    eax,0x0
c001b0b3:	e9 bc 00 00 00       	jmp    c001b174 <fatWrapperIoctl+0x108>
c001b0b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0bd:	75 6d                	jne    c001b12c <fatWrapperIoctl+0xc0>
c001b0bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0cc:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001b0d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0df:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0e5:	89 c8                	mov    eax,ecx
c001b0e7:	89 da                	mov    edx,ebx
c001b0e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0ed:	c1 e0 0a             	shl    eax,0xa
c001b0f0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0f5:	8b 0c 8d e0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9620]
c001b0fc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b102:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b108:	89 cb                	mov    ebx,ecx
c001b10a:	c1 fb 1f             	sar    ebx,0x1f
c001b10d:	53                   	push   ebx
c001b10e:	51                   	push   ecx
c001b10f:	52                   	push   edx
c001b110:	50                   	push   eax
c001b111:	e8 0e 5e 00 00       	call   c0020f24 <__udivdi3>
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b11d:	89 01                	mov    DWORD PTR [ecx],eax
c001b11f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b122:	b8 00 00 00 00       	mov    eax,0x0
c001b127:	eb 4b                	jmp    c001b174 <fatWrapperIoctl+0x108>
c001b129:	8d 76 00             	lea    esi,[esi+0x0]
c001b12c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b131:	75 09                	jne    c001b13c <fatWrapperIoctl+0xd0>
c001b133:	b8 00 00 00 00       	mov    eax,0x0
c001b138:	eb 3a                	jmp    c001b174 <fatWrapperIoctl+0x108>
c001b13a:	66 90                	xchg   ax,ax
c001b13c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b141:	75 19                	jne    c001b15c <fatWrapperIoctl+0xf0>
c001b143:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b147:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b14f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b155:	b8 00 00 00 00       	mov    eax,0x0
c001b15a:	eb 18                	jmp    c001b174 <fatWrapperIoctl+0x108>
c001b15c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b161:	75 09                	jne    c001b16c <fatWrapperIoctl+0x100>
c001b163:	b8 00 00 00 00       	mov    eax,0x0
c001b168:	eb 0a                	jmp    c001b174 <fatWrapperIoctl+0x108>
c001b16a:	66 90                	xchg   ax,ax
c001b16c:	b8 04 00 00 00       	mov    eax,0x4
c001b171:	8d 76 00             	lea    esi,[esi+0x0]
c001b174:	83 c4 28             	add    esp,0x28
c001b177:	5b                   	pop    ebx
c001b178:	c3                   	ret    
c001b179:	90                   	nop
c001b17a:	66 90                	xchg   ax,ax

c001b17c <FAT::FAT()>:
c001b17c:	83 ec 1c             	sub    esp,0x1c
c001b17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b183:	83 ec 0c             	sub    esp,0xc
c001b186:	50                   	push   eax
c001b187:	e8 ee 1b ff ff       	call   c000cd7a <Filesystem::Filesystem()>
c001b18c:	83 c4 10             	add    esp,0x10
c001b18f:	ba 2c 4b 02 c0       	mov    edx,0xc0024b2c
c001b194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b198:	89 10                	mov    DWORD PTR [eax],edx
c001b19a:	c7 05 e0 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279e0,0x0
c001b1a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1ac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b1b1:	7f 15                	jg     c001b1c8 <FAT::FAT()+0x4c>
c001b1b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1b7:	c7 04 85 00 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8600],0xffffffff
c001b1c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1c6:	eb e4                	jmp    c001b1ac <FAT::FAT()+0x30>
c001b1c8:	90                   	nop
c001b1c9:	83 c4 1c             	add    esp,0x1c
c001b1cc:	c3                   	ret    
c001b1cd:	90                   	nop
c001b1ce:	66 90                	xchg   ax,ax

c001b1d0 <FAT::fixFilepath(char*)>:
c001b1d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1d4:	8a 00                	mov    al,BYTE PTR [eax]
c001b1d6:	3c 40                	cmp    al,0x40
c001b1d8:	7e 2e                	jle    c001b208 <FAT::fixFilepath(char*)+0x38>
c001b1da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1de:	8a 00                	mov    al,BYTE PTR [eax]
c001b1e0:	83 e8 41             	sub    eax,0x41
c001b1e3:	88 c2                	mov    dl,al
c001b1e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1e9:	88 10                	mov    BYTE PTR [eax],dl
c001b1eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ef:	8a 00                	mov    al,BYTE PTR [eax]
c001b1f1:	0f be c0             	movsx  eax,al
c001b1f4:	8b 04 85 00 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8600]
c001b1fb:	83 c0 30             	add    eax,0x30
c001b1fe:	88 c2                	mov    dl,al
c001b200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b204:	88 10                	mov    BYTE PTR [eax],dl
c001b206:	66 90                	xchg   ax,ax
c001b208:	90                   	nop
c001b209:	c3                   	ret    
c001b20a:	66 90                	xchg   ax,ax

c001b20c <FAT::open(char const*, void**, FileOpenMode)>:
c001b20c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b212:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b21a:	74 0c                	je     c001b228 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b21c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b224:	75 0e                	jne    c001b234 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b226:	66 90                	xchg   ax,ax
c001b228:	b8 04 00 00 00       	mov    eax,0x4
c001b22d:	e9 06 01 00 00       	jmp    c001b338 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b232:	66 90                	xchg   ax,ax
c001b234:	83 ec 08             	sub    esp,0x8
c001b237:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b23e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b242:	50                   	push   eax
c001b243:	e8 f8 54 fe ff       	call   c0000740 <strcpy>
c001b248:	83 c4 10             	add    esp,0x10
c001b24b:	83 ec 08             	sub    esp,0x8
c001b24e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b252:	50                   	push   eax
c001b253:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b25a:	e8 71 ff ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b25f:	83 c4 10             	add    esp,0x10
c001b262:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b26a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b271:	83 e0 01             	and    eax,0x1
c001b274:	74 0a                	je     c001b280 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b276:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b27e:	66 90                	xchg   ax,ax
c001b280:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b287:	83 e0 04             	and    eax,0x4
c001b28a:	74 10                	je     c001b29c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b28c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b294:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b29c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2a3:	83 e0 02             	and    eax,0x2
c001b2a6:	74 08                	je     c001b2b0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b2a8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2b7:	83 e0 08             	and    eax,0x8
c001b2ba:	74 08                	je     c001b2c4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2bc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2cb:	83 e0 10             	and    eax,0x10
c001b2ce:	74 08                	je     c001b2d8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2d0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2d8:	83 ec 0c             	sub    esp,0xc
c001b2db:	68 50 02 00 00       	push   0x250
c001b2e0:	e8 de e6 fe ff       	call   c00099c3 <malloc>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	89 c2                	mov    edx,eax
c001b2ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2f1:	89 10                	mov    DWORD PTR [eax],edx
c001b2f3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2fb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b302:	8b 00                	mov    eax,DWORD PTR [eax]
c001b304:	83 ec 04             	sub    esp,0x4
c001b307:	52                   	push   edx
c001b308:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b30c:	52                   	push   edx
c001b30d:	50                   	push   eax
c001b30e:	e8 78 9b fe ff       	call   c0004e8b <f_open>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b31d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b325:	74 09                	je     c001b330 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b327:	b8 01 00 00 00       	mov    eax,0x1
c001b32c:	eb 0a                	jmp    c001b338 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b32e:	66 90                	xchg   ax,ax
c001b330:	b8 00 00 00 00       	mov    eax,0x0
c001b335:	8d 76 00             	lea    esi,[esi+0x0]
c001b338:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b33e:	c3                   	ret    
c001b33f:	90                   	nop

c001b340 <FAT::openDir(char const*, void**)>:
c001b340:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b346:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b34e:	74 0c                	je     c001b35c <FAT::openDir(char const*, void**)+0x1c>
c001b350:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b358:	75 0e                	jne    c001b368 <FAT::openDir(char const*, void**)+0x28>
c001b35a:	66 90                	xchg   ax,ax
c001b35c:	b8 04 00 00 00       	mov    eax,0x4
c001b361:	e9 82 00 00 00       	jmp    c001b3e8 <FAT::openDir(char const*, void**)+0xa8>
c001b366:	66 90                	xchg   ax,ax
c001b368:	83 ec 08             	sub    esp,0x8
c001b36b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b372:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b376:	50                   	push   eax
c001b377:	e8 c4 53 fe ff       	call   c0000740 <strcpy>
c001b37c:	83 c4 10             	add    esp,0x10
c001b37f:	83 ec 08             	sub    esp,0x8
c001b382:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b386:	50                   	push   eax
c001b387:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b38e:	e8 3d fe ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	6a 4c                	push   0x4c
c001b39b:	e8 23 e6 fe ff       	call   c00099c3 <malloc>
c001b3a0:	83 c4 10             	add    esp,0x10
c001b3a3:	89 c2                	mov    edx,eax
c001b3a5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3ac:	89 10                	mov    DWORD PTR [eax],edx
c001b3ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3b7:	83 ec 08             	sub    esp,0x8
c001b3ba:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3be:	52                   	push   edx
c001b3bf:	50                   	push   eax
c001b3c0:	e8 fe aa fe ff       	call   c0005ec3 <f_opendir>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3cf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3d7:	74 07                	je     c001b3e0 <FAT::openDir(char const*, void**)+0xa0>
c001b3d9:	b8 01 00 00 00       	mov    eax,0x1
c001b3de:	eb 08                	jmp    c001b3e8 <FAT::openDir(char const*, void**)+0xa8>
c001b3e0:	b8 00 00 00 00       	mov    eax,0x0
c001b3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3f6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b3fe:	75 0c                	jne    c001b40c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b400:	b8 04 00 00 00       	mov    eax,0x4
c001b405:	e9 d2 00 00 00       	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b40a:	66 90                	xchg   ax,ax
c001b40c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b414:	75 0a                	jne    c001b420 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b416:	b8 04 00 00 00       	mov    eax,0x4
c001b41b:	e9 bc 00 00 00       	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b420:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b428:	75 0a                	jne    c001b434 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b42a:	b8 04 00 00 00       	mov    eax,0x4
c001b42f:	e9 a8 00 00 00       	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b434:	83 ec 08             	sub    esp,0x8
c001b437:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b43e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b445:	50                   	push   eax
c001b446:	e8 f5 52 fe ff       	call   c0000740 <strcpy>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	83 ec 08             	sub    esp,0x8
c001b451:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b458:	50                   	push   eax
c001b459:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b460:	e8 6b fd ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	83 ec 08             	sub    esp,0x8
c001b46b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b46f:	50                   	push   eax
c001b470:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b477:	50                   	push   eax
c001b478:	e8 05 ac fe ff       	call   c0006082 <f_stat>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b487:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b48e:	85 c0                	test   eax,eax
c001b490:	74 0a                	je     c001b49c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b492:	83 f8 04             	cmp    eax,0x4
c001b495:	74 35                	je     c001b4cc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b497:	eb 3b                	jmp    c001b4d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b499:	8d 76 00             	lea    esi,[esi+0x0]
c001b49c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4a0:	0f b6 c0             	movzx  eax,al
c001b4a3:	83 e0 10             	and    eax,0x10
c001b4a6:	0f 95 c2             	setne  dl
c001b4a9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b4b0:	88 10                	mov    BYTE PTR [eax],dl
c001b4b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4b9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4c0:	89 01                	mov    DWORD PTR [ecx],eax
c001b4c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4c5:	b8 00 00 00 00       	mov    eax,0x0
c001b4ca:	eb 10                	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4cc:	b8 02 00 00 00       	mov    eax,0x2
c001b4d1:	eb 09                	jmp    c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4d3:	90                   	nop
c001b4d4:	b8 01 00 00 00       	mov    eax,0x1
c001b4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4dc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4e2:	c3                   	ret    
c001b4e3:	90                   	nop

c001b4e4 <FAT::unlink(char const*)>:
c001b4e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4f2:	75 08                	jne    c001b4fc <FAT::unlink(char const*)+0x18>
c001b4f4:	b8 04 00 00 00       	mov    eax,0x4
c001b4f9:	eb 61                	jmp    c001b55c <FAT::unlink(char const*)+0x78>
c001b4fb:	90                   	nop
c001b4fc:	83 ec 08             	sub    esp,0x8
c001b4ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b506:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b50a:	50                   	push   eax
c001b50b:	e8 30 52 fe ff       	call   c0000740 <strcpy>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	83 ec 08             	sub    esp,0x8
c001b516:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b51a:	50                   	push   eax
c001b51b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b522:	e8 a9 fc ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b527:	83 c4 10             	add    esp,0x10
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b531:	50                   	push   eax
c001b532:	e8 9d ae fe ff       	call   c00063d4 <f_unlink>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b541:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b548:	85 c0                	test   eax,eax
c001b54a:	75 08                	jne    c001b554 <FAT::unlink(char const*)+0x70>
c001b54c:	b8 00 00 00 00       	mov    eax,0x0
c001b551:	eb 09                	jmp    c001b55c <FAT::unlink(char const*)+0x78>
c001b553:	90                   	nop
c001b554:	b8 01 00 00 00       	mov    eax,0x1
c001b559:	8d 76 00             	lea    esi,[esi+0x0]
c001b55c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b562:	c3                   	ret    
c001b563:	90                   	nop

c001b564 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b564:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b56a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b571:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b578:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b57c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b580:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b588:	75 0a                	jne    c001b594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b58a:	b8 04 00 00 00       	mov    eax,0x4
c001b58f:	e9 30 01 00 00       	jmp    c001b6c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b594:	83 ec 08             	sub    esp,0x8
c001b597:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b59e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5a2:	50                   	push   eax
c001b5a3:	e8 98 51 fe ff       	call   c0000740 <strcpy>
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	83 ec 08             	sub    esp,0x8
c001b5ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b5b2:	50                   	push   eax
c001b5b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5ba:	e8 11 fc ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5ca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5d7:	83 e0 01             	and    eax,0x1
c001b5da:	74 08                	je     c001b5e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5dc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5e9:	83 e0 02             	and    eax,0x2
c001b5ec:	74 0a                	je     c001b5f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5ee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5f6:	66 90                	xchg   ax,ax
c001b5f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5fd:	83 e0 04             	and    eax,0x4
c001b600:	74 0a                	je     c001b60c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b602:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b60a:	66 90                	xchg   ax,ax
c001b60c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b611:	83 e0 08             	and    eax,0x8
c001b614:	74 0a                	je     c001b620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b616:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b61e:	66 90                	xchg   ax,ax
c001b620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b625:	83 e0 01             	and    eax,0x1
c001b628:	74 0a                	je     c001b634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b62a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b632:	66 90                	xchg   ax,ax
c001b634:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b639:	83 e0 02             	and    eax,0x2
c001b63c:	74 0a                	je     c001b648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b63e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b646:	66 90                	xchg   ax,ax
c001b648:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b64d:	83 e0 04             	and    eax,0x4
c001b650:	74 0a                	je     c001b65c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b652:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b65a:	66 90                	xchg   ax,ax
c001b65c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b661:	83 e0 08             	and    eax,0x8
c001b664:	74 0a                	je     c001b670 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b666:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b66e:	66 90                	xchg   ax,ax
c001b670:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b677:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b67e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b686:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b68e:	83 ec 04             	sub    esp,0x4
c001b691:	52                   	push   edx
c001b692:	50                   	push   eax
c001b693:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b697:	50                   	push   eax
c001b698:	e8 d9 b3 fe ff       	call   c0006a76 <f_chmod>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6a7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6ae:	85 c0                	test   eax,eax
c001b6b0:	75 0a                	jne    c001b6bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b6b2:	b8 00 00 00 00       	mov    eax,0x0
c001b6b7:	eb 0b                	jmp    c001b6c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	b8 01 00 00 00       	mov    eax,0x1
c001b6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6ca:	c3                   	ret    
c001b6cb:	90                   	nop

c001b6cc <FAT::rename(char const*, char const*)>:
c001b6cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6d2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6da:	74 0c                	je     c001b6e8 <FAT::rename(char const*, char const*)+0x1c>
c001b6dc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6e4:	75 0e                	jne    c001b6f4 <FAT::rename(char const*, char const*)+0x28>
c001b6e6:	66 90                	xchg   ax,ax
c001b6e8:	b8 04 00 00 00       	mov    eax,0x4
c001b6ed:	e9 9e 00 00 00       	jmp    c001b790 <FAT::rename(char const*, char const*)+0xc4>
c001b6f2:	66 90                	xchg   ax,ax
c001b6f4:	83 ec 08             	sub    esp,0x8
c001b6f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b705:	50                   	push   eax
c001b706:	e8 35 50 fe ff       	call   c0000740 <strcpy>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	83 ec 08             	sub    esp,0x8
c001b711:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b718:	50                   	push   eax
c001b719:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b720:	e8 ab fa ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	83 ec 08             	sub    esp,0x8
c001b72b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b732:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b736:	50                   	push   eax
c001b737:	e8 04 50 fe ff       	call   c0000740 <strcpy>
c001b73c:	83 c4 10             	add    esp,0x10
c001b73f:	83 ec 08             	sub    esp,0x8
c001b742:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b746:	50                   	push   eax
c001b747:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b74e:	e8 7d fa ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	83 ec 08             	sub    esp,0x8
c001b759:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b75d:	50                   	push   eax
c001b75e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b765:	50                   	push   eax
c001b766:	e8 18 b0 fe ff       	call   c0006783 <f_rename>
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b775:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b77c:	85 c0                	test   eax,eax
c001b77e:	75 08                	jne    c001b788 <FAT::rename(char const*, char const*)+0xbc>
c001b780:	b8 00 00 00 00       	mov    eax,0x0
c001b785:	eb 09                	jmp    c001b790 <FAT::rename(char const*, char const*)+0xc4>
c001b787:	90                   	nop
c001b788:	b8 01 00 00 00       	mov    eax,0x1
c001b78d:	8d 76 00             	lea    esi,[esi+0x0]
c001b790:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b796:	c3                   	ret    
c001b797:	90                   	nop

c001b798 <FAT::mkdir(char const*)>:
c001b798:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b79e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7a6:	75 08                	jne    c001b7b0 <FAT::mkdir(char const*)+0x18>
c001b7a8:	b8 04 00 00 00       	mov    eax,0x4
c001b7ad:	eb 61                	jmp    c001b810 <FAT::mkdir(char const*)+0x78>
c001b7af:	90                   	nop
c001b7b0:	83 ec 08             	sub    esp,0x8
c001b7b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7be:	50                   	push   eax
c001b7bf:	e8 7c 4f fe ff       	call   c0000740 <strcpy>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	83 ec 08             	sub    esp,0x8
c001b7ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7ce:	50                   	push   eax
c001b7cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7d6:	e8 f5 f9 ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	83 ec 0c             	sub    esp,0xc
c001b7e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7e5:	50                   	push   eax
c001b7e6:	e8 6c ad fe ff       	call   c0006557 <f_mkdir>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b7fc:	85 c0                	test   eax,eax
c001b7fe:	75 08                	jne    c001b808 <FAT::mkdir(char const*)+0x70>
c001b800:	b8 00 00 00 00       	mov    eax,0x0
c001b805:	eb 09                	jmp    c001b810 <FAT::mkdir(char const*)+0x78>
c001b807:	90                   	nop
c001b808:	b8 01 00 00 00       	mov    eax,0x1
c001b80d:	8d 76 00             	lea    esi,[esi+0x0]
c001b810:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b816:	c3                   	ret    
c001b817:	90                   	nop

c001b818 <FAT::exists(char const*)>:
c001b818:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b81e:	83 ec 08             	sub    esp,0x8
c001b821:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b828:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b82c:	50                   	push   eax
c001b82d:	e8 0e 4f fe ff       	call   c0000740 <strcpy>
c001b832:	83 c4 10             	add    esp,0x10
c001b835:	83 ec 08             	sub    esp,0x8
c001b838:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b83c:	50                   	push   eax
c001b83d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b844:	e8 87 f9 ff ff       	call   c001b1d0 <FAT::fixFilepath(char*)>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	83 ec 08             	sub    esp,0x8
c001b84f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b856:	50                   	push   eax
c001b857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b85b:	50                   	push   eax
c001b85c:	e8 21 a8 fe ff       	call   c0006082 <f_stat>
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b86b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b872:	85 c0                	test   eax,eax
c001b874:	75 06                	jne    c001b87c <FAT::exists(char const*)+0x64>
c001b876:	b0 01                	mov    al,0x1
c001b878:	eb 06                	jmp    c001b880 <FAT::exists(char const*)+0x68>
c001b87a:	66 90                	xchg   ax,ax
c001b87c:	b0 00                	mov    al,0x0
c001b87e:	66 90                	xchg   ax,ax
c001b880:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b886:	c3                   	ret    
c001b887:	90                   	nop

c001b888 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b888:	b8 08 00 00 00       	mov    eax,0x8
c001b88d:	c3                   	ret    

c001b88e <ISO9660::seek(void*, unsigned long long)>:
c001b88e:	53                   	push   ebx
c001b88f:	b8 04 00 00 00       	mov    eax,0x4
c001b894:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b89c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8a0:	85 d2                	test   edx,edx
c001b8a2:	74 17                	je     c001b8bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8a4:	89 c8                	mov    eax,ecx
c001b8a6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b8a9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b8ac:	b8 01 00 00 00       	mov    eax,0x1
c001b8b1:	73 08                	jae    c001b8bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8b3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b8b6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b8b9:	31 c0                	xor    eax,eax
c001b8bb:	5b                   	pop    ebx
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop

c001b8be <ISO9660::tell(void*, unsigned long long*)>:
c001b8be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8c6:	85 d2                	test   edx,edx
c001b8c8:	74 12                	je     c001b8dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8ca:	85 c0                	test   eax,eax
c001b8cc:	74 0e                	je     c001b8dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8ce:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8d7:	89 10                	mov    DWORD PTR [eax],edx
c001b8d9:	31 c0                	xor    eax,eax
c001b8db:	c3                   	ret    
c001b8dc:	b8 04 00 00 00       	mov    eax,0x4
c001b8e1:	c3                   	ret    

c001b8e2 <ISO9660::getName()>:
c001b8e2:	b8 8c 4b 02 c0       	mov    eax,0xc0024b8c
c001b8e7:	c3                   	ret    

c001b8e8 <ISO9660::stat(void*, unsigned long long*)>:
c001b8e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f0:	85 d2                	test   edx,edx
c001b8f2:	74 12                	je     c001b906 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8f4:	85 c0                	test   eax,eax
c001b8f6:	74 0e                	je     c001b906 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b8fb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b8fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b901:	89 10                	mov    DWORD PTR [eax],edx
c001b903:	31 c0                	xor    eax,eax
c001b905:	c3                   	ret    
c001b906:	b8 04 00 00 00       	mov    eax,0x4
c001b90b:	c3                   	ret    

c001b90c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b90c:	b8 01 00 00 00       	mov    eax,0x1
c001b911:	c3                   	ret    

c001b912 <ISO9660::unlink(char const*)>:
c001b912:	b8 01 00 00 00       	mov    eax,0x1
c001b917:	c3                   	ret    

c001b918 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b918:	b8 01 00 00 00       	mov    eax,0x1
c001b91d:	c3                   	ret    

c001b91e <ISO9660::rename(char const*, char const*)>:
c001b91e:	b8 01 00 00 00       	mov    eax,0x1
c001b923:	c3                   	ret    

c001b924 <ISO9660::mkdir(char const*)>:
c001b924:	b8 01 00 00 00       	mov    eax,0x1
c001b929:	c3                   	ret    

c001b92a <ISO9660::close(void*)>:
c001b92a:	83 ec 0c             	sub    esp,0xc
c001b92d:	b8 04 00 00 00       	mov    eax,0x4
c001b932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b936:	85 d2                	test   edx,edx
c001b938:	74 0e                	je     c001b948 <ISO9660::close(void*)+0x1e>
c001b93a:	83 ec 0c             	sub    esp,0xc
c001b93d:	52                   	push   edx
c001b93e:	e8 90 e0 fe ff       	call   c00099d3 <free>
c001b943:	83 c4 10             	add    esp,0x10
c001b946:	31 c0                	xor    eax,eax
c001b948:	83 c4 0c             	add    esp,0xc
c001b94b:	c3                   	ret    

c001b94c <ISO9660::closeDir(void*)>:
c001b94c:	83 ec 0c             	sub    esp,0xc
c001b94f:	b8 04 00 00 00       	mov    eax,0x4
c001b954:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b958:	85 d2                	test   edx,edx
c001b95a:	74 0e                	je     c001b96a <ISO9660::closeDir(void*)+0x1e>
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	52                   	push   edx
c001b960:	e8 6e e0 fe ff       	call   c00099d3 <free>
c001b965:	83 c4 10             	add    esp,0x10
c001b968:	31 c0                	xor    eax,eax
c001b96a:	83 c4 0c             	add    esp,0xc
c001b96d:	c3                   	ret    

c001b96e <ISO9660::~ISO9660()>:
c001b96e:	83 ec 0c             	sub    esp,0xc
c001b971:	ba b0 4b 02 c0       	mov    edx,0xc0024bb0
c001b976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97a:	89 10                	mov    DWORD PTR [eax],edx
c001b97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	50                   	push   eax
c001b984:	e8 15 14 ff ff       	call   c000cd9e <Filesystem::~Filesystem()>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	90                   	nop
c001b98d:	83 c4 0c             	add    esp,0xc
c001b990:	c3                   	ret    
c001b991:	90                   	nop

c001b992 <ISO9660::~ISO9660()>:
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	83 ec 0c             	sub    esp,0xc
c001b998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99c:	e8 cd ff ff ff       	call   c001b96e <ISO9660::~ISO9660()>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	83 ec 08             	sub    esp,0x8
c001b9a7:	6a 08                	push   0x8
c001b9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ad:	e8 d1 0f ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	83 c4 0c             	add    esp,0xc
c001b9b8:	c3                   	ret    

c001b9b9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b9b9:	55                   	push   ebp
c001b9ba:	31 c9                	xor    ecx,ecx
c001b9bc:	57                   	push   edi
c001b9bd:	56                   	push   esi
c001b9be:	53                   	push   ebx
c001b9bf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9c7:	89 eb                	mov    ebx,ebp
c001b9c9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9cd:	39 ce                	cmp    esi,ecx
c001b9cf:	7e 17                	jle    c001b9e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9d1:	31 d2                	xor    edx,edx
c001b9d3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9d7:	7d 13                	jge    c001b9ec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9dd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9e0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9e3:	75 0d                	jne    c001b9f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9e5:	42                   	inc    edx
c001b9e6:	eb eb                	jmp    c001b9d3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9e8:	31 c0                	xor    eax,eax
c001b9ea:	eb 0a                	jmp    c001b9f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9ec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9f0:	eb 04                	jmp    c001b9f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9f2:	41                   	inc    ecx
c001b9f3:	43                   	inc    ebx
c001b9f4:	eb d7                	jmp    c001b9cd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9f6:	5b                   	pop    ebx
c001b9f7:	5e                   	pop    esi
c001b9f8:	5f                   	pop    edi
c001b9f9:	5d                   	pop    ebp
c001b9fa:	c3                   	ret    

c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b9fb:	57                   	push   edi
c001b9fc:	56                   	push   esi
c001b9fd:	53                   	push   ebx
c001b9fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba06:	39 0d e0 7a 02 c0    	cmp    DWORD PTR ds:0xc0027ae0,ecx
c001ba0c:	75 08                	jne    c001ba16 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba0e:	38 05 14 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e14,al
c001ba14:	74 2b                	je     c001ba41 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba16:	83 ec 0c             	sub    esp,0xc
c001ba19:	a2 14 5e 02 c0       	mov    ds:0xc0025e14,al
c001ba1e:	68 00 7b 02 c0       	push   0xc0027b00
c001ba23:	0f be c0             	movsx  eax,al
c001ba26:	6a 01                	push   0x1
c001ba28:	89 0d e0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ae0,ecx
c001ba2e:	31 db                	xor    ebx,ebx
c001ba30:	53                   	push   ebx
c001ba31:	51                   	push   ecx
c001ba32:	ff 34 85 dc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9724]
c001ba39:	e8 42 47 ff ff       	call   c0010180 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba3e:	83 c4 20             	add    esp,0x20
c001ba41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba45:	be 00 7b 02 c0       	mov    esi,0xc0027b00
c001ba4a:	b9 00 08 00 00       	mov    ecx,0x800
c001ba4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba51:	5b                   	pop    ebx
c001ba52:	5e                   	pop    esi
c001ba53:	5f                   	pop    edi
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba56:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba5c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba63:	83 c0 41             	add    eax,0x41
c001ba66:	0f be c0             	movsx  eax,al
c001ba69:	50                   	push   eax
c001ba6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba6e:	50                   	push   eax
c001ba6f:	6a 10                	push   0x10
c001ba71:	e8 85 ff ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	31 c0                	xor    eax,eax
c001ba7b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba80:	75 1d                	jne    c001ba9f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba82:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba87:	75 16                	jne    c001ba9f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba89:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba8e:	75 0f                	jne    c001ba9f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba90:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba95:	75 08                	jne    c001ba9f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba97:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ba9c:	0f 94 c0             	sete   al
c001ba9f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001baa5:	c3                   	ret    

c001baa6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001baa6:	55                   	push   ebp
c001baa7:	57                   	push   edi
c001baa8:	56                   	push   esi
c001baa9:	53                   	push   ebx
c001baaa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bab0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bab7:	85 ed                	test   ebp,ebp
c001bab9:	0f 84 da 01 00 00    	je     c001bc99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001babf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bac7:	0f 84 cc 01 00 00    	je     c001bc99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bacd:	b8 01 00 00 00       	mov    eax,0x1
c001bad2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bad6:	0f 85 c2 01 00 00    	jne    c001bc9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001badc:	31 d2                	xor    edx,edx
c001bade:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bae5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bae8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001baeb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001baee:	89 04 24             	mov    DWORD PTR [esp],eax
c001baf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001baf5:	01 c8                	add    eax,ecx
c001baf7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bafa:	11 da                	adc    edx,ebx
c001bafc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb00:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb04:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb08:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb0c:	19 d7                	sbb    edi,edx
c001bb0e:	72 11                	jb     c001bb21 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb10:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb1f:	eb 0c                	jmp    c001bb2d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb21:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb29:	29 ce                	sub    esi,ecx
c001bb2b:	19 df                	sbb    edi,ebx
c001bb2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb30:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb33:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb37:	c1 e0 0b             	shl    eax,0xb
c001bb3a:	01 c8                	add    eax,ecx
c001bb3c:	11 da                	adc    edx,ebx
c001bb3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb45:	51                   	push   ecx
c001bb46:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb4a:	50                   	push   eax
c001bb4b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb4f:	53                   	push   ebx
c001bb50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb58:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb5c:	50                   	push   eax
c001bb5d:	e8 99 fe ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb62:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb65:	b8 00 08 00 00       	mov    eax,0x800
c001bb6a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb70:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb74:	29 d0                	sub    eax,edx
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	89 f9                	mov    ecx,edi
c001bb7b:	39 c6                	cmp    esi,eax
c001bb7d:	83 d9 00             	sbb    ecx,0x0
c001bb80:	7d 1b                	jge    c001bb9d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb87:	75 12                	jne    c001bb9b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb89:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb96:	e9 fa 00 00 00       	jmp    c001bc95 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb9b:	89 f0                	mov    eax,esi
c001bb9d:	01 d3                	add    ebx,edx
c001bb9f:	31 d2                	xor    edx,edx
c001bba1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bba5:	39 c2                	cmp    edx,eax
c001bba7:	7d 14                	jge    c001bbbd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bba9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bbb0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bbb4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bbb7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bbba:	42                   	inc    edx
c001bbbb:	eb e8                	jmp    c001bba5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bbbd:	89 c2                	mov    edx,eax
c001bbbf:	85 c0                	test   eax,eax
c001bbc1:	79 02                	jns    c001bbc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bbc3:	31 d2                	xor    edx,edx
c001bbc5:	01 c2                	add    edx,eax
c001bbc7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbca:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbd1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbd5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbd9:	99                   	cdq    
c001bbda:	01 c1                	add    ecx,eax
c001bbdc:	11 d3                	adc    ebx,edx
c001bbde:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbe2:	29 c6                	sub    esi,eax
c001bbe4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbe8:	19 d7                	sbb    edi,edx
c001bbea:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbf1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbf6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bbf9:	b8 00 00 00 00       	mov    eax,0x0
c001bbfe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc02:	7d 43                	jge    c001bc47 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc04:	52                   	push   edx
c001bc05:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc09:	50                   	push   eax
c001bc0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc16:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc1a:	50                   	push   eax
c001bc1b:	e8 db fd ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc20:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc28:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc2d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc35:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc3d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc42:	83 c4 10             	add    esp,0x10
c001bc45:	eb aa                	jmp    c001bbf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc4b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc4e:	74 2a                	je     c001bc7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc50:	50                   	push   eax
c001bc51:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc55:	50                   	push   eax
c001bc56:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc5a:	56                   	push   esi
c001bc5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc63:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc67:	51                   	push   ecx
c001bc68:	e8 8e fd ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc6d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc81:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc89:	89 18                	mov    DWORD PTR [eax],ebx
c001bc8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc8f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc92:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc95:	31 c0                	xor    eax,eax
c001bc97:	eb 05                	jmp    c001bc9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc99:	b8 04 00 00 00       	mov    eax,0x4
c001bc9e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bca4:	5b                   	pop    ebx
c001bca5:	5e                   	pop    esi
c001bca6:	5f                   	pop    edi
c001bca7:	5d                   	pop    ebp
c001bca8:	c3                   	ret    
c001bca9:	90                   	nop

c001bcaa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bcaa:	55                   	push   ebp
c001bcab:	57                   	push   edi
c001bcac:	56                   	push   esi
c001bcad:	53                   	push   ebx
c001bcae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bcb4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bcbb:	85 ed                	test   ebp,ebp
c001bcbd:	0f 84 51 02 00 00    	je     c001bf14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcc3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bccb:	0f 84 43 02 00 00    	je     c001bf14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcd4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcd7:	75 0a                	jne    c001bce3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bcd9:	b8 07 00 00 00       	mov    eax,0x7
c001bcde:	e9 36 02 00 00       	jmp    c001bf19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bce3:	50                   	push   eax
c001bce4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bce8:	50                   	push   eax
c001bce9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcf0:	53                   	push   ebx
c001bcf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcf4:	c1 e0 0b             	shl    eax,0xb
c001bcf7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bcfa:	c1 e8 0b             	shr    eax,0xb
c001bcfd:	50                   	push   eax
c001bcfe:	e8 f8 fc ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd06:	83 c4 10             	add    esp,0x10
c001bd09:	89 c1                	mov    ecx,eax
c001bd0b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd0e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd14:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd17:	84 db                	test   bl,bl
c001bd19:	0f 85 8b 00 00 00    	jne    c001bdaa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd1f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd25:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd28:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd2e:	29 c6                	sub    esi,eax
c001bd30:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd34:	89 f3                	mov    ebx,esi
c001bd36:	89 f1                	mov    ecx,esi
c001bd38:	c1 fb 1f             	sar    ebx,0x1f
c001bd3b:	01 f0                	add    eax,esi
c001bd3d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd40:	11 da                	adc    edx,ebx
c001bd42:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd49:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd4c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd4f:	89 d8                	mov    eax,ebx
c001bd51:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd55:	ba 00 00 00 00       	mov    edx,0x0
c001bd5a:	19 f8                	sbb    eax,edi
c001bd5c:	b8 00 00 00 00       	mov    eax,0x0
c001bd61:	73 08                	jae    c001bd6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd63:	89 f0                	mov    eax,esi
c001bd65:	89 fa                	mov    edx,edi
c001bd67:	29 c8                	sub    eax,ecx
c001bd69:	19 da                	sbb    edx,ebx
c001bd6b:	89 d7                	mov    edi,edx
c001bd6d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd70:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd73:	09 c7                	or     edi,eax
c001bd75:	0f 84 5e ff ff ff    	je     c001bcd9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd7b:	57                   	push   edi
c001bd7c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd80:	50                   	push   eax
c001bd81:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd88:	53                   	push   ebx
c001bd89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd8c:	c1 e0 0b             	shl    eax,0xb
c001bd8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd93:	c1 e8 0b             	shr    eax,0xb
c001bd96:	50                   	push   eax
c001bd97:	e8 5f fc ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	25 ff 07 00 00       	and    eax,0x7ff
c001bda7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bdaa:	31 ff                	xor    edi,edi
c001bdac:	56                   	push   esi
c001bdad:	6a 28                	push   0x28
c001bdaf:	6a 00                	push   0x0
c001bdb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdb5:	50                   	push   eax
c001bdb6:	e8 c9 48 fe ff       	call   c0000684 <memset>
c001bdbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdbe:	25 ff 07 00 00       	and    eax,0x7ff
c001bdc3:	89 c6                	mov    esi,eax
c001bdc5:	83 c6 21             	add    esi,0x21
c001bdc8:	83 d7 00             	adc    edi,0x0
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	31 c9                	xor    ecx,ecx
c001bdd0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bdd7:	83 f9 28             	cmp    ecx,0x28
c001bdda:	88 04 24             	mov    BYTE PTR [esp],al
c001bddd:	0f 94 c2             	sete   dl
c001bde0:	88 d0                	mov    al,dl
c001bde2:	ba ff 07 00 00       	mov    edx,0x7ff
c001bde7:	39 f2                	cmp    edx,esi
c001bde9:	ba 00 00 00 00       	mov    edx,0x0
c001bdee:	19 fa                	sbb    edx,edi
c001bdf0:	0f 92 c2             	setb   dl
c001bdf3:	09 c2                	or     edx,eax
c001bdf5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bdf9:	0f 94 c0             	sete   al
c001bdfc:	08 d0                	or     al,dl
c001bdfe:	75 16                	jne    c001be16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be00:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be04:	74 10                	je     c001be16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be06:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be09:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be0d:	41                   	inc    ecx
c001be0e:	83 c6 01             	add    esi,0x1
c001be11:	83 d7 00             	adc    edi,0x0
c001be14:	eb ba                	jmp    c001bdd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be16:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be1d:	83 ec 0c             	sub    esp,0xc
c001be20:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be24:	56                   	push   esi
c001be25:	e8 76 48 fe ff       	call   c00006a0 <strlen>
c001be2a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be31:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be40:	5a                   	pop    edx
c001be41:	25 ff 07 00 00       	and    eax,0x7ff
c001be46:	59                   	pop    ecx
c001be47:	01 f8                	add    eax,edi
c001be49:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be4f:	83 e0 02             	and    eax,0x2
c001be52:	3c 01                	cmp    al,0x1
c001be54:	19 c0                	sbb    eax,eax
c001be56:	83 c0 02             	add    eax,0x2
c001be59:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be5d:	56                   	push   esi
c001be5e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be62:	50                   	push   eax
c001be63:	e8 d8 48 fe ff       	call   c0000740 <strcpy>
c001be68:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	84 c0                	test   al,al
c001be71:	75 21                	jne    c001be94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be73:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be7b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be83:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be8b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be92:	eb 28                	jmp    c001bebc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be94:	fe c8                	dec    al
c001be96:	75 24                	jne    c001bebc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be98:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bea0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bea8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001beb0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001beb7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bebc:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bec0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bec7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bece:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bed0:	0f b6 f3             	movzx  esi,bl
c001bed3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001beda:	31 db                	xor    ebx,ebx
c001bedc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bee2:	89 df                	mov    edi,ebx
c001bee4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beea:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001beed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bef0:	39 c6                	cmp    esi,eax
c001bef2:	19 d7                	sbb    edi,edx
c001bef4:	72 10                	jb     c001bf06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bef6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001befd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf04:	eb 0a                	jmp    c001bf10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf06:	29 f0                	sub    eax,esi
c001bf08:	19 da                	sbb    edx,ebx
c001bf0a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf0d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf10:	31 c0                	xor    eax,eax
c001bf12:	eb 05                	jmp    c001bf19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf14:	b8 04 00 00 00       	mov    eax,0x4
c001bf19:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf1f:	5b                   	pop    ebx
c001bf20:	5e                   	pop    esi
c001bf21:	5f                   	pop    edi
c001bf22:	5d                   	pop    ebp
c001bf23:	c3                   	ret    

c001bf24 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf24:	57                   	push   edi
c001bf25:	56                   	push   esi
c001bf26:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf2c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf34:	50                   	push   eax
c001bf35:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf39:	50                   	push   eax
c001bf3a:	6a 10                	push   0x10
c001bf3c:	e8 ba fa ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf41:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf48:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf4c:	b9 22 00 00 00       	mov    ecx,0x22
c001bf51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf53:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf5e:	89 10                	mov    DWORD PTR [eax],edx
c001bf60:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf6b:	89 10                	mov    DWORD PTR [eax],edx
c001bf6d:	81 c4 44 08 00 00    	add    esp,0x844
c001bf73:	b0 01                	mov    al,0x1
c001bf75:	5e                   	pop    esi
c001bf76:	5f                   	pop    edi
c001bf77:	c3                   	ret    

c001bf78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf78:	55                   	push   ebp
c001bf79:	57                   	push   edi
c001bf7a:	56                   	push   esi
c001bf7b:	53                   	push   ebx
c001bf7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf82:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf89:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf94:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfa0:	75 03                	jne    c001bfa5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfa2:	83 c3 02             	add    ebx,0x2
c001bfa5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bfa8:	75 03                	jne    c001bfad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bfaa:	43                   	inc    ebx
c001bfab:	eb f8                	jmp    c001bfa5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfad:	51                   	push   ecx
c001bfae:	68 00 01 00 00       	push   0x100
c001bfb3:	6a 00                	push   0x0
c001bfb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bfb9:	50                   	push   eax
c001bfba:	e8 c5 46 fe ff       	call   c0000684 <memset>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	31 d2                	xor    edx,edx
c001bfc4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfc7:	84 c0                	test   al,al
c001bfc9:	74 21                	je     c001bfec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfcb:	3c 2f                	cmp    al,0x2f
c001bfcd:	75 0b                	jne    c001bfda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfcf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfd3:	bd 01 00 00 00       	mov    ebp,0x1
c001bfd8:	eb 14                	jmp    c001bfee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfda:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfdd:	80 f9 19             	cmp    cl,0x19
c001bfe0:	77 03                	ja     c001bfe5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfe2:	83 e8 20             	sub    eax,0x20
c001bfe5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bfe9:	42                   	inc    edx
c001bfea:	eb d8                	jmp    c001bfc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bfec:	31 ed                	xor    ebp,ebp
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bff8:	e8 c6 d9 fe ff       	call   c00099c3 <malloc>
c001bffd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c004:	89 c6                	mov    esi,eax
c001c006:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c00c:	c1 ef 0b             	shr    edi,0xb
c001c00f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c016:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c01a:	83 c4 10             	add    esp,0x10
c001c01d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c022:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c026:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c02d:	74 28                	je     c001c057 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c02f:	52                   	push   edx
c001c030:	57                   	push   edi
c001c031:	50                   	push   eax
c001c032:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c036:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c03d:	e8 b9 f9 ff ff       	call   c001b9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c046:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c04d:	05 00 08 00 00       	add    eax,0x800
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	eb cb                	jmp    c001c022 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c057:	83 ec 0c             	sub    esp,0xc
c001c05a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c05e:	57                   	push   edi
c001c05f:	e8 3c 46 fe ff       	call   c00006a0 <strlen>
c001c064:	50                   	push   eax
c001c065:	57                   	push   edi
c001c066:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c06d:	56                   	push   esi
c001c06e:	e8 46 f9 ff ff       	call   c001b9b9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c073:	83 c4 20             	add    esp,0x20
c001c076:	85 c0                	test   eax,eax
c001c078:	75 13                	jne    c001c08d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c07a:	83 ec 0c             	sub    esp,0xc
c001c07d:	56                   	push   esi
c001c07e:	e8 50 d9 fe ff       	call   c00099d3 <free>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	31 c0                	xor    eax,eax
c001c088:	e9 b3 00 00 00       	jmp    c001c140 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c08d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c091:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c095:	c1 e7 08             	shl    edi,0x8
c001c098:	c1 e2 10             	shl    edx,0x10
c001c09b:	09 d7                	or     edi,edx
c001c09d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0a1:	09 d7                	or     edi,edx
c001c0a3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c0a7:	c1 e2 18             	shl    edx,0x18
c001c0aa:	09 d7                	or     edi,edx
c001c0ac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c0b0:	89 d1                	mov    ecx,edx
c001c0b2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c0b6:	c1 e1 08             	shl    ecx,0x8
c001c0b9:	c1 e2 10             	shl    edx,0x10
c001c0bc:	09 ca                	or     edx,ecx
c001c0be:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0c2:	09 ca                	or     edx,ecx
c001c0c4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0c8:	c1 e1 18             	shl    ecx,0x18
c001c0cb:	09 ca                	or     edx,ecx
c001c0cd:	89 e9                	mov    ecx,ebp
c001c0cf:	84 c9                	test   cl,cl
c001c0d1:	74 3c                	je     c001c10f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0d7:	83 ec 0c             	sub    esp,0xc
c001c0da:	56                   	push   esi
c001c0db:	e8 f3 d8 fe ff       	call   c00099d3 <free>
c001c0e0:	83 c4 0c             	add    esp,0xc
c001c0e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0ea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0ef:	50                   	push   eax
c001c0f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0f7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c102:	52                   	push   edx
c001c103:	57                   	push   edi
c001c104:	53                   	push   ebx
c001c105:	e8 6e fe ff ff       	call   c001bf78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c10a:	83 c4 20             	add    esp,0x20
c001c10d:	eb 31                	jmp    c001c140 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c10f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c112:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c119:	d0 e8                	shr    al,1
c001c11b:	89 3b                	mov    DWORD PTR [ebx],edi
c001c11d:	83 e0 01             	and    eax,0x1
c001c120:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c127:	83 ec 0c             	sub    esp,0xc
c001c12a:	89 13                	mov    DWORD PTR [ebx],edx
c001c12c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c133:	89 03                	mov    DWORD PTR [ebx],eax
c001c135:	56                   	push   esi
c001c136:	e8 98 d8 fe ff       	call   c00099d3 <free>
c001c13b:	83 c4 10             	add    esp,0x10
c001c13e:	b0 01                	mov    al,0x1
c001c140:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c146:	5b                   	pop    ebx
c001c147:	5e                   	pop    esi
c001c148:	5f                   	pop    edi
c001c149:	5d                   	pop    ebp
c001c14a:	c3                   	ret    

c001c14b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c14b:	55                   	push   ebp
c001c14c:	57                   	push   edi
c001c14d:	56                   	push   esi
c001c14e:	53                   	push   ebx
c001c14f:	83 ec 20             	sub    esp,0x20
c001c152:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c156:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c15a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c15e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c166:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c16e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c173:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c179:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c17f:	57                   	push   edi
c001c180:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c184:	50                   	push   eax
c001c185:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c189:	50                   	push   eax
c001c18a:	e8 95 fd ff ff       	call   c001bf24 <readRoot(unsigned int*, unsigned int*, char)>
c001c18f:	5a                   	pop    edx
c001c190:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c194:	e8 07 45 fe ff       	call   c00006a0 <strlen>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	83 f8 03             	cmp    eax,0x3
c001c19f:	77 17                	ja     c001c1b8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1a5:	89 03                	mov    DWORD PTR [ebx],eax
c001c1a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1ab:	89 06                	mov    DWORD PTR [esi],eax
c001c1ad:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c1b4:	b0 01                	mov    al,0x1
c001c1b6:	eb 19                	jmp    c001c1d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c1b8:	50                   	push   eax
c001c1b9:	55                   	push   ebp
c001c1ba:	57                   	push   edi
c001c1bb:	56                   	push   esi
c001c1bc:	53                   	push   ebx
c001c1bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1c9:	e8 aa fd ff ff       	call   c001bf78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1ce:	83 c4 20             	add    esp,0x20
c001c1d1:	83 c4 1c             	add    esp,0x1c
c001c1d4:	5b                   	pop    ebx
c001c1d5:	5e                   	pop    esi
c001c1d6:	5f                   	pop    edi
c001c1d7:	5d                   	pop    ebp
c001c1d8:	c3                   	ret    
c001c1d9:	90                   	nop

c001c1da <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1da:	57                   	push   edi
c001c1db:	56                   	push   esi
c001c1dc:	53                   	push   ebx
c001c1dd:	83 ec 10             	sub    esp,0x10
c001c1e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1e8:	85 ff                	test   edi,edi
c001c1ea:	0f 84 8b 00 00 00    	je     c001c27b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1f0:	85 f6                	test   esi,esi
c001c1f2:	0f 84 83 00 00 00    	je     c001c27b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1f8:	b8 03 00 00 00       	mov    eax,0x3
c001c1fd:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c202:	75 7c                	jne    c001c280 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	6a 1c                	push   0x1c
c001c209:	e8 b5 d7 fe ff       	call   c00099c3 <malloc>
c001c20e:	89 07                	mov    DWORD PTR [edi],eax
c001c210:	89 c3                	mov    ebx,eax
c001c212:	58                   	pop    eax
c001c213:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c217:	50                   	push   eax
c001c218:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c21b:	50                   	push   eax
c001c21c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c220:	50                   	push   eax
c001c221:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c225:	50                   	push   eax
c001c226:	56                   	push   esi
c001c227:	e8 1f ff ff ff       	call   c001c14b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c22c:	83 c4 20             	add    esp,0x20
c001c22f:	84 c0                	test   al,al
c001c231:	74 07                	je     c001c23a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c233:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c238:	74 0b                	je     c001c245 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c23a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c23e:	b8 01 00 00 00       	mov    eax,0x1
c001c243:	eb 3b                	jmp    c001c280 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c245:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c249:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c24d:	89 03                	mov    DWORD PTR [ebx],eax
c001c24f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c25a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c261:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c268:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c26b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c272:	8a 06                	mov    al,BYTE PTR [esi]
c001c274:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c277:	31 c0                	xor    eax,eax
c001c279:	eb 05                	jmp    c001c280 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c27b:	b8 04 00 00 00       	mov    eax,0x4
c001c280:	83 c4 10             	add    esp,0x10
c001c283:	5b                   	pop    ebx
c001c284:	5e                   	pop    esi
c001c285:	5f                   	pop    edi
c001c286:	c3                   	ret    
c001c287:	90                   	nop

c001c288 <ISO9660::exists(char const*)>:
c001c288:	83 ec 28             	sub    esp,0x28
c001c28b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c28f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c293:	52                   	push   edx
c001c294:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c297:	52                   	push   edx
c001c298:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c29c:	52                   	push   edx
c001c29d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2a1:	52                   	push   edx
c001c2a2:	50                   	push   eax
c001c2a3:	e8 a3 fe ff ff       	call   c001c14b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2a8:	83 c4 3c             	add    esp,0x3c
c001c2ab:	c3                   	ret    

c001c2ac <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	83 ec 14             	sub    esp,0x14
c001c2b1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c2b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2b9:	85 db                	test   ebx,ebx
c001c2bb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2bf:	0f 94 c2             	sete   dl
c001c2c2:	85 f6                	test   esi,esi
c001c2c4:	0f 94 c0             	sete   al
c001c2c7:	08 c2                	or     dl,al
c001c2c9:	75 68                	jne    c001c333 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2cb:	85 c9                	test   ecx,ecx
c001c2cd:	74 64                	je     c001c333 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2cf:	83 ec 0c             	sub    esp,0xc
c001c2d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2d9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2e6:	50                   	push   eax
c001c2e7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2ea:	50                   	push   eax
c001c2eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2ef:	50                   	push   eax
c001c2f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2f4:	50                   	push   eax
c001c2f5:	51                   	push   ecx
c001c2f6:	e8 50 fe ff ff       	call   c001c14b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2fb:	83 c4 20             	add    esp,0x20
c001c2fe:	ba 01 00 00 00       	mov    edx,0x1
c001c303:	84 c0                	test   al,al
c001c305:	74 31                	je     c001c338 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c307:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c30b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c312:	89 03                	mov    DWORD PTR [ebx],eax
c001c314:	ba 00 00 00 00       	mov    edx,0x0
c001c319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c31d:	85 c0                	test   eax,eax
c001c31f:	0f 95 06             	setne  BYTE PTR [esi]
c001c322:	74 14                	je     c001c338 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c324:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c32a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c331:	eb 05                	jmp    c001c338 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c333:	ba 04 00 00 00       	mov    edx,0x4
c001c338:	83 c4 14             	add    esp,0x14
c001c33b:	89 d0                	mov    eax,edx
c001c33d:	5b                   	pop    ebx
c001c33e:	5e                   	pop    esi
c001c33f:	c3                   	ret    

c001c340 <ISO9660::openDir(char const*, void**)>:
c001c340:	57                   	push   edi
c001c341:	56                   	push   esi
c001c342:	53                   	push   ebx
c001c343:	83 ec 10             	sub    esp,0x10
c001c346:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c34a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c34e:	85 ff                	test   edi,edi
c001c350:	74 7b                	je     c001c3cd <ISO9660::openDir(char const*, void**)+0x8d>
c001c352:	85 f6                	test   esi,esi
c001c354:	74 77                	je     c001c3cd <ISO9660::openDir(char const*, void**)+0x8d>
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	6a 1c                	push   0x1c
c001c35b:	e8 63 d6 fe ff       	call   c00099c3 <malloc>
c001c360:	89 07                	mov    DWORD PTR [edi],eax
c001c362:	89 c3                	mov    ebx,eax
c001c364:	58                   	pop    eax
c001c365:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c369:	50                   	push   eax
c001c36a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c36d:	50                   	push   eax
c001c36e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c372:	50                   	push   eax
c001c373:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c377:	50                   	push   eax
c001c378:	56                   	push   esi
c001c379:	e8 cd fd ff ff       	call   c001c14b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c37e:	83 c4 20             	add    esp,0x20
c001c381:	84 c0                	test   al,al
c001c383:	74 07                	je     c001c38c <ISO9660::openDir(char const*, void**)+0x4c>
c001c385:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c38a:	75 0b                	jne    c001c397 <ISO9660::openDir(char const*, void**)+0x57>
c001c38c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c390:	b8 01 00 00 00       	mov    eax,0x1
c001c395:	eb 3b                	jmp    c001c3d2 <ISO9660::openDir(char const*, void**)+0x92>
c001c397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c39f:	89 03                	mov    DWORD PTR [ebx],eax
c001c3a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c3a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c3b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3c4:	8a 06                	mov    al,BYTE PTR [esi]
c001c3c6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3c9:	31 c0                	xor    eax,eax
c001c3cb:	eb 05                	jmp    c001c3d2 <ISO9660::openDir(char const*, void**)+0x92>
c001c3cd:	b8 04 00 00 00       	mov    eax,0x4
c001c3d2:	83 c4 10             	add    esp,0x10
c001c3d5:	5b                   	pop    ebx
c001c3d6:	5e                   	pop    esi
c001c3d7:	5f                   	pop    edi
c001c3d8:	c3                   	ret    
c001c3d9:	90                   	nop

c001c3da <ISO9660::ISO9660()>:
c001c3da:	83 ec 0c             	sub    esp,0xc
c001c3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	50                   	push   eax
c001c3e5:	e8 90 09 ff ff       	call   c000cd7a <Filesystem::Filesystem()>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	ba b0 4b 02 c0       	mov    edx,0xc0024bb0
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	89 10                	mov    DWORD PTR [eax],edx
c001c3f8:	90                   	nop
c001c3f9:	83 c4 0c             	add    esp,0xc
c001c3fc:	c3                   	ret    
c001c3fd:	90                   	nop

c001c3fe <SoundCard::beginPlayback()>:
c001c3fe:	c7 44 24 04 10 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c10
c001c406:	e9 1a 7f ff ff       	jmp    c0014325 <Krnl::panic(char const*)>
c001c40b:	90                   	nop

c001c40c <SoundCard::stopPlayback()>:
c001c40c:	c7 44 24 04 44 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c44
c001c414:	e9 0c 7f ff ff       	jmp    c0014325 <Krnl::panic(char const*)>
c001c419:	90                   	nop

c001c41a <SoundCard::SoundCard(char const*)>:
c001c41a:	83 ec 1c             	sub    esp,0x1c
c001c41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c421:	83 ec 08             	sub    esp,0x8
c001c424:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c428:	50                   	push   eax
c001c429:	e8 80 1c ff ff       	call   c000e0ae <Device::Device(char const*)>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c001c436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c43a:	89 10                	mov    DWORD PTR [eax],edx
c001c43c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c440:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c44b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c459:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c467:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c475:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c47f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c487:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c48c:	7f 19                	jg     c001c4a7 <SoundCard::SoundCard(char const*)+0x8d>
c001c48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c496:	83 c2 54             	add    edx,0x54
c001c499:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c4a5:	eb e0                	jmp    c001c487 <SoundCard::SoundCard(char const*)+0x6d>
c001c4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ab:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4b2:	90                   	nop
c001c4b3:	83 c4 1c             	add    esp,0x1c
c001c4b6:	c3                   	ret    
c001c4b7:	90                   	nop

c001c4b8 <SoundCard::~SoundCard()>:
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c001c4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c4:	89 10                	mov    DWORD PTR [eax],edx
c001c4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	50                   	push   eax
c001c4ce:	e8 a5 18 ff ff       	call   c000dd78 <Device::~Device()>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	90                   	nop
c001c4d7:	83 c4 0c             	add    esp,0xc
c001c4da:	c3                   	ret    
c001c4db:	90                   	nop

c001c4dc <SoundCard::~SoundCard()>:
c001c4dc:	83 ec 0c             	sub    esp,0xc
c001c4df:	83 ec 0c             	sub    esp,0xc
c001c4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4e6:	e8 cd ff ff ff       	call   c001c4b8 <SoundCard::~SoundCard()>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	68 e8 01 00 00       	push   0x1e8
c001c4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4fa:	e8 84 04 ff ff       	call   c000c983 <operator delete(void*, unsigned long)>
c001c4ff:	83 c4 10             	add    esp,0x10
c001c502:	83 c4 0c             	add    esp,0xc
c001c505:	c3                   	ret    

c001c506 <SoundCard::configureRates(int, int, int)>:
c001c506:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c50a:	31 c0                	xor    eax,eax
c001c50c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c513:	75 20                	jne    c001c535 <SoundCard::configureRates(int, int, int)+0x2f>
c001c515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c519:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c51f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c523:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c533:	b0 01                	mov    al,0x1
c001c535:	c3                   	ret    

c001c536 <SoundCard::getSamples16(int, short*)>:
c001c536:	55                   	push   ebp
c001c537:	57                   	push   edi
c001c538:	31 ff                	xor    edi,edi
c001c53a:	56                   	push   esi
c001c53b:	53                   	push   ebx
c001c53c:	83 ec 28             	sub    esp,0x28
c001c53f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c543:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c547:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c54b:	68 77 4c 02 c0       	push   0xc0024c77
c001c550:	e8 0f 05 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c555:	83 c4 0c             	add    esp,0xc
c001c558:	53                   	push   ebx
c001c559:	6a 00                	push   0x0
c001c55b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c55f:	e8 20 41 fe ff       	call   c0000684 <memset>
c001c564:	58                   	pop    eax
c001c565:	5a                   	pop    edx
c001c566:	53                   	push   ebx
c001c567:	31 db                	xor    ebx,ebx
c001c569:	68 96 4c 02 c0       	push   0xc0024c96
c001c56e:	e8 f1 04 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	52                   	push   edx
c001c577:	52                   	push   edx
c001c578:	53                   	push   ebx
c001c579:	68 a9 4c 02 c0       	push   0xc0024ca9
c001c57e:	e8 e1 04 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c583:	59                   	pop    ecx
c001c584:	58                   	pop    eax
c001c585:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c58c:	68 c1 4c 02 c0       	push   0xc0024cc1
c001c591:	e8 ce 04 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c596:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c59d:	83 c4 10             	add    esp,0x10
c001c5a0:	85 c0                	test   eax,eax
c001c5a2:	74 44                	je     c001c5e8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5a4:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5a8:	75 3e                	jne    c001c5e8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5aa:	50                   	push   eax
c001c5ab:	50                   	push   eax
c001c5ac:	53                   	push   ebx
c001c5ad:	68 d3 4c 02 c0       	push   0xc0024cd3
c001c5b2:	e8 ad 04 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c5b7:	56                   	push   esi
c001c5b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5bc:	55                   	push   ebp
c001c5bd:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5c4:	e8 6f 03 00 00       	call   c001c938 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c5c9:	83 c4 18             	add    esp,0x18
c001c5cc:	50                   	push   eax
c001c5cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5d1:	68 ea 4c 02 c0       	push   0xc0024cea
c001c5d6:	e8 89 04 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5e2:	39 c7                	cmp    edi,eax
c001c5e4:	7d 02                	jge    c001c5e8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5e6:	89 c7                	mov    edi,eax
c001c5e8:	43                   	inc    ebx
c001c5e9:	83 fb 20             	cmp    ebx,0x20
c001c5ec:	75 88                	jne    c001c576 <SoundCard::getSamples16(int, short*)+0x40>
c001c5ee:	83 c4 1c             	add    esp,0x1c
c001c5f1:	89 f8                	mov    eax,edi
c001c5f3:	5b                   	pop    ebx
c001c5f4:	5e                   	pop    esi
c001c5f5:	5f                   	pop    edi
c001c5f6:	5d                   	pop    ebp
c001c5f7:	c3                   	ret    

c001c5f8 <SoundCard::getSamples32(int, int*)>:
c001c5f8:	55                   	push   ebp
c001c5f9:	57                   	push   edi
c001c5fa:	31 ff                	xor    edi,edi
c001c5fc:	56                   	push   esi
c001c5fd:	31 f6                	xor    esi,esi
c001c5ff:	53                   	push   ebx
c001c600:	83 ec 10             	sub    esp,0x10
c001c603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c607:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c60b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c60f:	c1 e0 02             	shl    eax,0x2
c001c612:	50                   	push   eax
c001c613:	6a 00                	push   0x0
c001c615:	55                   	push   ebp
c001c616:	e8 69 40 fe ff       	call   c0000684 <memset>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c625:	85 c0                	test   eax,eax
c001c627:	74 1b                	je     c001c644 <SoundCard::getSamples32(int, int*)+0x4c>
c001c629:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c62d:	75 15                	jne    c001c644 <SoundCard::getSamples32(int, int*)+0x4c>
c001c62f:	53                   	push   ebx
c001c630:	55                   	push   ebp
c001c631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c635:	50                   	push   eax
c001c636:	e8 f9 03 00 00       	call   c001ca34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	39 c6                	cmp    esi,eax
c001c640:	7d 02                	jge    c001c644 <SoundCard::getSamples32(int, int*)+0x4c>
c001c642:	89 c6                	mov    esi,eax
c001c644:	47                   	inc    edi
c001c645:	83 ff 20             	cmp    edi,0x20
c001c648:	75 d4                	jne    c001c61e <SoundCard::getSamples32(int, int*)+0x26>
c001c64a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c650:	85 f6                	test   esi,esi
c001c652:	75 0f                	jne    c001c663 <SoundCard::getSamples32(int, int*)+0x6b>
c001c654:	84 c0                	test   al,al
c001c656:	74 1b                	je     c001c673 <SoundCard::getSamples32(int, int*)+0x7b>
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c65d:	53                   	push   ebx
c001c65e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c661:	eb 0d                	jmp    c001c670 <SoundCard::getSamples32(int, int*)+0x78>
c001c663:	84 c0                	test   al,al
c001c665:	75 0c                	jne    c001c673 <SoundCard::getSamples32(int, int*)+0x7b>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c66c:	53                   	push   ebx
c001c66d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	83 c4 0c             	add    esp,0xc
c001c676:	89 f0                	mov    eax,esi
c001c678:	5b                   	pop    ebx
c001c679:	5e                   	pop    esi
c001c67a:	5f                   	pop    edi
c001c67b:	5d                   	pop    ebp
c001c67c:	c3                   	ret    
c001c67d:	90                   	nop

c001c67e <SoundCard::addChannel(SoundPort*)>:
c001c67e:	56                   	push   esi
c001c67f:	53                   	push   ebx
c001c680:	53                   	push   ebx
c001c681:	31 db                	xor    ebx,ebx
c001c683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c687:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c68f:	74 27                	je     c001c6b8 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c691:	43                   	inc    ebx
c001c692:	83 fb 20             	cmp    ebx,0x20
c001c695:	75 f0                	jne    c001c687 <SoundCard::addChannel(SoundPort*)+0x9>
c001c697:	83 ec 0c             	sub    esp,0xc
c001c69a:	83 cb ff             	or     ebx,0xffffffff
c001c69d:	68 0f 4d 02 c0       	push   0xc0024d0f
c001c6a2:	e8 bd 03 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c6a7:	c7 04 24 08 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d08
c001c6ae:	e8 72 7c ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	eb 1b                	jmp    c001c6d3 <SoundCard::addChannel(SoundPort*)+0x55>
c001c6b8:	51                   	push   ecx
c001c6b9:	51                   	push   ecx
c001c6ba:	53                   	push   ebx
c001c6bb:	68 27 4d 02 c0       	push   0xc0024d27
c001c6c0:	e8 9f 03 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c6c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c6d3:	89 d8                	mov    eax,ebx
c001c6d5:	5a                   	pop    edx
c001c6d6:	5b                   	pop    ebx
c001c6d7:	5e                   	pop    esi
c001c6d8:	c3                   	ret    
c001c6d9:	90                   	nop

c001c6da <SoundCard::removeChannel(int)>:
c001c6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6e2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c6ed:	c3                   	ret    
c001c6ee:	66 90                	xchg   ax,ax

c001c6f0 <SoundPort::SoundPort(int, int, int, int)>:
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c702:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70e:	89 10                	mov    DWORD PTR [eax],edx
c001c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c714:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c718:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c723:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c726:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c72b:	75 13                	jne    c001c740 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c731:	8b 00                	mov    eax,DWORD PTR [eax]
c001c733:	05 a0 0f 00 00       	add    eax,0xfa0
c001c738:	01 c0                	add    eax,eax
c001c73a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c73e:	66 90                	xchg   ax,ax
c001c740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c744:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c748:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c75d:	c1 e0 02             	shl    eax,0x2
c001c760:	83 ec 0c             	sub    esp,0xc
c001c763:	50                   	push   eax
c001c764:	e8 5a d2 fe ff       	call   c00099c3 <malloc>
c001c769:	83 c4 10             	add    esp,0x10
c001c76c:	89 c2                	mov    edx,eax
c001c76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c772:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c775:	90                   	nop
c001c776:	83 c4 0c             	add    esp,0xc
c001c779:	c3                   	ret    
c001c77a:	66 90                	xchg   ax,ax

c001c77c <SoundPort::~SoundPort()>:
c001c77c:	83 ec 0c             	sub    esp,0xc
c001c77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c783:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c786:	85 c0                	test   eax,eax
c001c788:	74 1e                	je     c001c7a8 <SoundPort::~SoundPort()+0x2c>
c001c78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c791:	83 ec 0c             	sub    esp,0xc
c001c794:	50                   	push   eax
c001c795:	e8 39 d2 fe ff       	call   c00099d3 <free>
c001c79a:	83 c4 10             	add    esp,0x10
c001c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c7a8:	90                   	nop
c001c7a9:	83 c4 0c             	add    esp,0xc
c001c7ac:	c3                   	ret    
c001c7ad:	90                   	nop
c001c7ae:	66 90                	xchg   ax,ax

c001c7b0 <SoundPort::unpause()>:
c001c7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c7b8:	c3                   	ret    
c001c7b9:	90                   	nop
c001c7ba:	66 90                	xchg   ax,ax

c001c7bc <SoundPort::pause()>:
c001c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c7c4:	c3                   	ret    
c001c7c5:	90                   	nop
c001c7c6:	66 90                	xchg   ax,ax

c001c7c8 <SoundPort::getBufferUsed()>:
c001c7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c7cf:	c3                   	ret    

c001c7d0 <SoundPort::getBufferSize()>:
c001c7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7d7:	c3                   	ret    

c001c7d8 <SoundPort::buffer16(short*, int)>:
c001c7d8:	55                   	push   ebp
c001c7d9:	57                   	push   edi
c001c7da:	56                   	push   esi
c001c7db:	53                   	push   ebx
c001c7dc:	83 ec 1c             	sub    esp,0x1c
c001c7df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7e3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c7e7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7ea:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7ed:	0f 84 85 00 00 00    	je     c001c878 <SoundPort::buffer16(short*, int)+0xa0>
c001c7f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c7f7:	85 c9                	test   ecx,ecx
c001c7f9:	7e 7d                	jle    c001c878 <SoundPort::buffer16(short*, int)+0xa0>
c001c7fb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c7ff:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c802:	c1 e1 0f             	shl    ecx,0xf
c001c805:	8d 70 01             	lea    esi,[eax+0x1]
c001c808:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c80b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c80e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c811:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c814:	74 6e                	je     c001c884 <SoundPort::buffer16(short*, int)+0xac>
c001c816:	31 f6                	xor    esi,esi
c001c818:	eb 22                	jmp    c001c83c <SoundPort::buffer16(short*, int)+0x64>
c001c81a:	66 90                	xchg   ax,ax
c001c81c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c821:	8d 79 01             	lea    edi,[ecx+0x1]
c001c824:	c1 e3 0f             	shl    ebx,0xf
c001c827:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c82a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c82d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c830:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c833:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c836:	74 1c                	je     c001c854 <SoundPort::buffer16(short*, int)+0x7c>
c001c838:	89 c6                	mov    esi,eax
c001c83a:	66 90                	xchg   ax,ax
c001c83c:	8d 46 01             	lea    eax,[esi+0x1]
c001c83f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c843:	75 d7                	jne    c001c81c <SoundPort::buffer16(short*, int)+0x44>
c001c845:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c849:	83 c4 1c             	add    esp,0x1c
c001c84c:	5b                   	pop    ebx
c001c84d:	5e                   	pop    esi
c001c84e:	5f                   	pop    edi
c001c84f:	5d                   	pop    ebp
c001c850:	c3                   	ret    
c001c851:	8d 76 00             	lea    esi,[esi+0x0]
c001c854:	8d 46 02             	lea    eax,[esi+0x2]
c001c857:	90                   	nop
c001c858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	68 7c 4d 02 c0       	push   0xc0024d7c
c001c864:	e8 fb 01 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c869:	83 c4 10             	add    esp,0x10
c001c86c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c870:	83 c4 1c             	add    esp,0x1c
c001c873:	5b                   	pop    ebx
c001c874:	5e                   	pop    esi
c001c875:	5f                   	pop    edi
c001c876:	5d                   	pop    ebp
c001c877:	c3                   	ret    
c001c878:	83 c4 1c             	add    esp,0x1c
c001c87b:	31 c0                	xor    eax,eax
c001c87d:	5b                   	pop    ebx
c001c87e:	5e                   	pop    esi
c001c87f:	5f                   	pop    edi
c001c880:	5d                   	pop    ebp
c001c881:	c3                   	ret    
c001c882:	66 90                	xchg   ax,ax
c001c884:	b8 01 00 00 00       	mov    eax,0x1
c001c889:	eb cd                	jmp    c001c858 <SoundPort::buffer16(short*, int)+0x80>
c001c88b:	90                   	nop

c001c88c <SoundPort::buffer32(int*, int)>:
c001c88c:	55                   	push   ebp
c001c88d:	57                   	push   edi
c001c88e:	56                   	push   esi
c001c88f:	53                   	push   ebx
c001c890:	83 ec 1c             	sub    esp,0x1c
c001c893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c897:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c89b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c89e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8a6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8a9:	74 79                	je     c001c924 <SoundPort::buffer32(int*, int)+0x98>
c001c8ab:	85 c0                	test   eax,eax
c001c8ad:	7e 75                	jle    c001c924 <SoundPort::buffer32(int*, int)+0x98>
c001c8af:	8d 71 01             	lea    esi,[ecx+0x1]
c001c8b2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c8b5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8b8:	8b 37                	mov    esi,DWORD PTR [edi]
c001c8ba:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c8bd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8c0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8c3:	74 6b                	je     c001c930 <SoundPort::buffer32(int*, int)+0xa4>
c001c8c5:	31 f6                	xor    esi,esi
c001c8c7:	eb 1f                	jmp    c001c8e8 <SoundPort::buffer32(int*, int)+0x5c>
c001c8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8cc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c8cf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c8d2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c8d5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8d8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c8dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8df:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8e2:	74 1c                	je     c001c900 <SoundPort::buffer32(int*, int)+0x74>
c001c8e4:	89 de                	mov    esi,ebx
c001c8e6:	66 90                	xchg   ax,ax
c001c8e8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c8eb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c8ef:	75 db                	jne    c001c8cc <SoundPort::buffer32(int*, int)+0x40>
c001c8f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8f5:	83 c4 1c             	add    esp,0x1c
c001c8f8:	5b                   	pop    ebx
c001c8f9:	5e                   	pop    esi
c001c8fa:	5f                   	pop    edi
c001c8fb:	5d                   	pop    ebp
c001c8fc:	c3                   	ret    
c001c8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c900:	8d 46 02             	lea    eax,[esi+0x2]
c001c903:	90                   	nop
c001c904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c908:	83 ec 0c             	sub    esp,0xc
c001c90b:	68 97 4d 02 c0       	push   0xc0024d97
c001c910:	e8 4f 01 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c91c:	83 c4 1c             	add    esp,0x1c
c001c91f:	5b                   	pop    ebx
c001c920:	5e                   	pop    esi
c001c921:	5f                   	pop    edi
c001c922:	5d                   	pop    ebp
c001c923:	c3                   	ret    
c001c924:	83 c4 1c             	add    esp,0x1c
c001c927:	31 c0                	xor    eax,eax
c001c929:	5b                   	pop    ebx
c001c92a:	5e                   	pop    esi
c001c92b:	5f                   	pop    edi
c001c92c:	5d                   	pop    ebp
c001c92d:	c3                   	ret    
c001c92e:	66 90                	xchg   ax,ax
c001c930:	b8 01 00 00 00       	mov    eax,0x1
c001c935:	eb cd                	jmp    c001c904 <SoundPort::buffer32(int*, int)+0x78>
c001c937:	90                   	nop

c001c938 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c938:	57                   	push   edi
c001c939:	56                   	push   esi
c001c93a:	53                   	push   ebx
c001c93b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c93f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c943:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c949:	39 03                	cmp    DWORD PTR [ebx],eax
c001c94b:	74 13                	je     c001c960 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c94d:	83 ec 0c             	sub    esp,0xc
c001c950:	68 ec 4d 02 c0       	push   0xc0024dec
c001c955:	e8 cb 79 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001c95a:	83 c4 10             	add    esp,0x10
c001c95d:	8d 76 00             	lea    esi,[esi+0x0]
c001c960:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c966:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c969:	74 11                	je     c001c97c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	68 b2 4d 02 c0       	push   0xc0024db2
c001c973:	e8 ad 79 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	90                   	nop
c001c97c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c982:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c985:	74 11                	je     c001c998 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c987:	83 ec 0c             	sub    esp,0xc
c001c98a:	68 b2 4d 02 c0       	push   0xc0024db2
c001c98f:	e8 91 79 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	90                   	nop
c001c998:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c99b:	89 c6                	mov    esi,eax
c001c99d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9a1:	7e 05                	jle    c001c9a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c9a7:	90                   	nop
c001c9a8:	85 f6                	test   esi,esi
c001c9aa:	7e 30                	jle    c001c9dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c9ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9b0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c9b3:	31 c9                	xor    ecx,ecx
c001c9b5:	01 d7                	add    edi,edx
c001c9b7:	90                   	nop
c001c9b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9bb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c9be:	85 c0                	test   eax,eax
c001c9c0:	79 06                	jns    c001c9c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c9c2:	05 ff 7f 00 00       	add    eax,0x7fff
c001c9c7:	90                   	nop
c001c9c8:	c1 f8 0f             	sar    eax,0xf
c001c9cb:	83 c1 04             	add    ecx,0x4
c001c9ce:	66 01 02             	add    WORD PTR [edx],ax
c001c9d1:	83 c2 02             	add    edx,0x2
c001c9d4:	39 d7                	cmp    edi,edx
c001c9d6:	75 e0                	jne    c001c9b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c9d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9db:	90                   	nop
c001c9dc:	56                   	push   esi
c001c9dd:	89 c2                	mov    edx,eax
c001c9df:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c9e6:	29 f2                	sub    edx,esi
c001c9e8:	52                   	push   edx
c001c9e9:	50                   	push   eax
c001c9ea:	68 0c 4e 02 c0       	push   0xc0024e0c
c001c9ef:	e8 70 00 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001c9f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9f7:	50                   	push   eax
c001c9f8:	01 f8                	add    eax,edi
c001c9fa:	50                   	push   eax
c001c9fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9fe:	29 f0                	sub    eax,esi
c001ca00:	c1 e0 02             	shl    eax,0x2
c001ca03:	50                   	push   eax
c001ca04:	68 3c 4e 02 c0       	push   0xc0024e3c
c001ca09:	e8 56 00 ff ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001ca0e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca11:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca14:	83 c4 1c             	add    esp,0x1c
c001ca17:	01 d7                	add    edi,edx
c001ca19:	29 f0                	sub    eax,esi
c001ca1b:	c1 e0 02             	shl    eax,0x2
c001ca1e:	50                   	push   eax
c001ca1f:	57                   	push   edi
c001ca20:	52                   	push   edx
c001ca21:	e8 96 3b fe ff       	call   c00005bc <memmove>
c001ca26:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca29:	83 c4 10             	add    esp,0x10
c001ca2c:	89 f0                	mov    eax,esi
c001ca2e:	5b                   	pop    ebx
c001ca2f:	5e                   	pop    esi
c001ca30:	5f                   	pop    edi
c001ca31:	c3                   	ret    
c001ca32:	66 90                	xchg   ax,ax

c001ca34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca34:	57                   	push   edi
c001ca35:	56                   	push   esi
c001ca36:	53                   	push   ebx
c001ca37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca43:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca49:	39 06                	cmp    DWORD PTR [esi],eax
c001ca4b:	74 13                	je     c001ca60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca4d:	83 ec 0c             	sub    esp,0xc
c001ca50:	68 60 4e 02 c0       	push   0xc0024e60
c001ca55:	e8 cb 78 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca60:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca66:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca69:	74 11                	je     c001ca7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca6b:	83 ec 0c             	sub    esp,0xc
c001ca6e:	68 ce 4d 02 c0       	push   0xc0024dce
c001ca73:	e8 ad 78 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001ca78:	83 c4 10             	add    esp,0x10
c001ca7b:	90                   	nop
c001ca7c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca82:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca85:	74 11                	je     c001ca98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca87:	83 ec 0c             	sub    esp,0xc
c001ca8a:	68 ce 4d 02 c0       	push   0xc0024dce
c001ca8f:	e8 91 78 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	90                   	nop
c001ca98:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ca9b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ca9f:	7e 07                	jle    c001caa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001caa1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001caa5:	8d 76 00             	lea    esi,[esi+0x0]
c001caa8:	85 ff                	test   edi,edi
c001caaa:	7e 1c                	jle    c001cac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001caac:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cab3:	31 c0                	xor    eax,eax
c001cab5:	8d 76 00             	lea    esi,[esi+0x0]
c001cab8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cabb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cabe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cac1:	83 c0 04             	add    eax,0x4
c001cac4:	39 c1                	cmp    ecx,eax
c001cac6:	75 f0                	jne    c001cab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cac8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cacb:	50                   	push   eax
c001cacc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cacf:	29 f8                	sub    eax,edi
c001cad1:	c1 e0 02             	shl    eax,0x2
c001cad4:	50                   	push   eax
c001cad5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cad8:	50                   	push   eax
c001cad9:	52                   	push   edx
c001cada:	e8 dd 3a fe ff       	call   c00005bc <memmove>
c001cadf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cae2:	83 c4 10             	add    esp,0x10
c001cae5:	89 f8                	mov    eax,edi
c001cae7:	5b                   	pop    ebx
c001cae8:	5e                   	pop    esi
c001cae9:	5f                   	pop    edi
c001caea:	c3                   	ret    
c001caeb:	90                   	nop

c001caec <PCI::open(int, int, void*)>:
c001caec:	83 ec 18             	sub    esp,0x18
c001caef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001caf7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cafd:	8b 10                	mov    edx,DWORD PTR [eax]
c001caff:	50                   	push   eax
c001cb00:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb03:	31 c0                	xor    eax,eax
c001cb05:	83 c4 1c             	add    esp,0x1c
c001cb08:	c3                   	ret    
c001cb09:	90                   	nop

c001cb0a <PCI::close(int, int, void*)>:
c001cb0a:	31 c0                	xor    eax,eax
c001cb0c:	c3                   	ret    
c001cb0d:	90                   	nop

c001cb0e <PCI::PCI()>:
c001cb0e:	83 ec 0c             	sub    esp,0xc
c001cb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb15:	83 ec 08             	sub    esp,0x8
c001cb18:	68 7f 4e 02 c0       	push   0xc0024e7f
c001cb1d:	50                   	push   eax
c001cb1e:	e8 ed 0b ff ff       	call   c000d710 <Bus::Bus(char const*)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	ba 68 4f 02 c0       	mov    edx,0xc0024f68
c001cb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2f:	89 10                	mov    DWORD PTR [eax],edx
c001cb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb35:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb43:	a3 00 83 02 c0       	mov    ds:0xc0028300,eax
c001cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb52:	0f b6 d0             	movzx  edx,al
c001cb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb59:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb6a:	0f b6 d0             	movzx  edx,al
c001cb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb71:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb80:	8d 50 01             	lea    edx,[eax+0x1]
c001cb83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb87:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb8d:	0f b6 d0             	movzx  edx,al
c001cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb94:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cb98:	83 c9 c0             	or     ecx,0xffffffc0
c001cb9b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cb9f:	90                   	nop
c001cba0:	83 c4 0c             	add    esp,0xc
c001cba3:	c3                   	ret    

c001cba4 <PCI::readBAR8(unsigned int, int)>:
c001cba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbac:	f6 c2 01             	test   dl,0x1
c001cbaf:	74 07                	je     c001cbb8 <PCI::readBAR8(unsigned int, int)+0x14>
c001cbb1:	83 e2 fc             	and    edx,0xfffffffc
c001cbb4:	01 c2                	add    edx,eax
c001cbb6:	ec                   	in     al,dx
c001cbb7:	c3                   	ret    
c001cbb8:	83 e2 f0             	and    edx,0xfffffff0
c001cbbb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cbbe:	c3                   	ret    
c001cbbf:	90                   	nop

c001cbc0 <PCI::readBAR16(unsigned int, int)>:
c001cbc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbc8:	f6 c2 01             	test   dl,0x1
c001cbcb:	74 08                	je     c001cbd5 <PCI::readBAR16(unsigned int, int)+0x15>
c001cbcd:	83 e2 fc             	and    edx,0xfffffffc
c001cbd0:	01 c2                	add    edx,eax
c001cbd2:	66 ed                	in     ax,dx
c001cbd4:	c3                   	ret    
c001cbd5:	83 e2 f0             	and    edx,0xfffffff0
c001cbd8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cbdc:	c3                   	ret    
c001cbdd:	90                   	nop

c001cbde <PCI::readBAR32(unsigned int, int)>:
c001cbde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbe6:	f6 c2 01             	test   dl,0x1
c001cbe9:	74 07                	je     c001cbf2 <PCI::readBAR32(unsigned int, int)+0x14>
c001cbeb:	83 e2 fc             	and    edx,0xfffffffc
c001cbee:	01 c2                	add    edx,eax
c001cbf0:	ed                   	in     eax,dx
c001cbf1:	c3                   	ret    
c001cbf2:	83 e2 f0             	and    edx,0xfffffff0
c001cbf5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cbf8:	c3                   	ret    
c001cbf9:	90                   	nop

c001cbfa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cbfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc06:	f6 c2 01             	test   dl,0x1
c001cc09:	74 07                	je     c001cc12 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc0b:	83 e2 fc             	and    edx,0xfffffffc
c001cc0e:	01 ca                	add    edx,ecx
c001cc10:	ee                   	out    dx,al
c001cc11:	c3                   	ret    
c001cc12:	83 e2 f0             	and    edx,0xfffffff0
c001cc15:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc18:	c3                   	ret    
c001cc19:	90                   	nop

c001cc1a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc26:	f6 c2 01             	test   dl,0x1
c001cc29:	74 08                	je     c001cc33 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc2b:	83 e2 fc             	and    edx,0xfffffffc
c001cc2e:	01 ca                	add    edx,ecx
c001cc30:	66 ef                	out    dx,ax
c001cc32:	c3                   	ret    
c001cc33:	83 e2 f0             	and    edx,0xfffffff0
c001cc36:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc3a:	c3                   	ret    
c001cc3b:	90                   	nop

c001cc3c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc48:	f6 c2 01             	test   dl,0x1
c001cc4b:	74 07                	je     c001cc54 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc4d:	83 e2 fc             	and    edx,0xfffffffc
c001cc50:	01 ca                	add    edx,ecx
c001cc52:	ef                   	out    dx,eax
c001cc53:	c3                   	ret    
c001cc54:	83 e2 f0             	and    edx,0xfffffff0
c001cc57:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc5a:	c3                   	ret    
c001cc5b:	90                   	nop

c001cc5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc5c:	55                   	push   ebp
c001cc5d:	57                   	push   edi
c001cc5e:	56                   	push   esi
c001cc5f:	53                   	push   ebx
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc67:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc6b:	89 f0                	mov    eax,esi
c001cc6d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc75:	3c 07                	cmp    al,0x7
c001cc77:	76 10                	jbe    c001cc89 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	68 87 4e 02 c0       	push   0xc0024e87
c001cc81:	e8 9f 76 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001cc86:	83 c4 10             	add    esp,0x10
c001cc89:	80 fb 0f             	cmp    bl,0xf
c001cc8c:	76 10                	jbe    c001cc9e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	68 b7 4e 02 c0       	push   0xc0024eb7
c001cc96:	e8 8a 76 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	8d 04 36             	lea    eax,[esi+esi*1]
c001cca1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cca6:	83 c8 f0             	or     eax,0xfffffff0
c001cca9:	ee                   	out    dx,al
c001ccaa:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ccaf:	89 e8                	mov    eax,ebp
c001ccb1:	ee                   	out    dx,al
c001ccb2:	83 c4 0c             	add    esp,0xc
c001ccb5:	89 d8                	mov    eax,ebx
c001ccb7:	66 81 e7 fc 00       	and    di,0xfc
c001ccbc:	5b                   	pop    ebx
c001ccbd:	c1 e0 08             	shl    eax,0x8
c001ccc0:	5e                   	pop    esi
c001ccc1:	09 f8                	or     eax,edi
c001ccc3:	5f                   	pop    edi
c001ccc4:	66 0d 00 c0          	or     ax,0xc000
c001ccc8:	5d                   	pop    ebp
c001ccc9:	c3                   	ret    

c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccca:	57                   	push   edi
c001cccb:	56                   	push   esi
c001cccc:	53                   	push   ebx
c001cccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccd5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ccdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ccdf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cce3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cce7:	83 ff 01             	cmp    edi,0x1
c001ccea:	75 3e                	jne    c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ccec:	89 de                	mov    esi,ebx
c001ccee:	0f b6 c0             	movzx  eax,al
c001ccf1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ccf7:	c1 e0 10             	shl    eax,0x10
c001ccfa:	0f b6 c9             	movzx  ecx,cl
c001ccfd:	09 f0                	or     eax,esi
c001ccff:	c1 e1 08             	shl    ecx,0x8
c001cd02:	0f b6 d2             	movzx  edx,dl
c001cd05:	09 c8                	or     eax,ecx
c001cd07:	c1 e2 0b             	shl    edx,0xb
c001cd0a:	09 d0                	or     eax,edx
c001cd0c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd11:	0d 00 00 00 80       	or     eax,0x80000000
c001cd16:	ef                   	out    dx,eax
c001cd17:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd1c:	ed                   	in     eax,dx
c001cd1d:	83 e3 02             	and    ebx,0x2
c001cd20:	0f b6 cb             	movzx  ecx,bl
c001cd23:	c1 e1 03             	shl    ecx,0x3
c001cd26:	d3 e8                	shr    eax,cl
c001cd28:	eb 43                	jmp    c001cd6d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd2a:	83 ff 02             	cmp    edi,0x2
c001cd2d:	75 2c                	jne    c001cd5b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd2f:	83 ec 0c             	sub    esp,0xc
c001cd32:	0f b6 c9             	movzx  ecx,cl
c001cd35:	0f b6 d2             	movzx  edx,dl
c001cd38:	0f b6 fb             	movzx  edi,bl
c001cd3b:	0f b6 c0             	movzx  eax,al
c001cd3e:	57                   	push   edi
c001cd3f:	51                   	push   ecx
c001cd40:	52                   	push   edx
c001cd41:	50                   	push   eax
c001cd42:	56                   	push   esi
c001cd43:	e8 14 ff ff ff       	call   c001cc5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd48:	89 c2                	mov    edx,eax
c001cd4a:	ed                   	in     eax,dx
c001cd4b:	83 e3 02             	and    ebx,0x2
c001cd4e:	83 c4 20             	add    esp,0x20
c001cd51:	0f b6 cb             	movzx  ecx,bl
c001cd54:	c1 e1 03             	shl    ecx,0x3
c001cd57:	d3 e8                	shr    eax,cl
c001cd59:	eb 12                	jmp    c001cd6d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd5b:	83 ec 0c             	sub    esp,0xc
c001cd5e:	68 e7 4e 02 c0       	push   0xc0024ee7
c001cd63:	e8 bd 75 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001cd68:	83 c4 10             	add    esp,0x10
c001cd6b:	31 c0                	xor    eax,eax
c001cd6d:	5b                   	pop    ebx
c001cd6e:	5e                   	pop    esi
c001cd6f:	5f                   	pop    edi
c001cd70:	c3                   	ret    
c001cd71:	90                   	nop

c001cd72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd72:	83 ec 18             	sub    esp,0x18
c001cd75:	6a 00                	push   0x0
c001cd77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd7c:	50                   	push   eax
c001cd7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd82:	50                   	push   eax
c001cd83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd88:	50                   	push   eax
c001cd89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd8d:	e8 38 ff ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd92:	83 c4 2c             	add    esp,0x2c
c001cd95:	c3                   	ret    

c001cd96 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd96:	83 ec 18             	sub    esp,0x18
c001cd99:	6a 0e                	push   0xe
c001cd9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda0:	50                   	push   eax
c001cda1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda6:	50                   	push   eax
c001cda7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdac:	50                   	push   eax
c001cdad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdb1:	e8 14 ff ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb6:	83 c4 2c             	add    esp,0x2c
c001cdb9:	0f b6 c0             	movzx  eax,al
c001cdbc:	c3                   	ret    
c001cdbd:	90                   	nop

c001cdbe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cdbe:	55                   	push   ebp
c001cdbf:	57                   	push   edi
c001cdc0:	56                   	push   esi
c001cdc1:	53                   	push   ebx
c001cdc2:	83 ec 18             	sub    esp,0x18
c001cdc5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cdca:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cdcf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cdd4:	6a 0a                	push   0xa
c001cdd6:	56                   	push   esi
c001cdd7:	55                   	push   ebp
c001cdd8:	57                   	push   edi
c001cdd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cddd:	e8 e8 fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cde2:	83 c4 14             	add    esp,0x14
c001cde5:	89 c3                	mov    ebx,eax
c001cde7:	6a 0a                	push   0xa
c001cde9:	0f b6 db             	movzx  ebx,bl
c001cdec:	56                   	push   esi
c001cded:	55                   	push   ebp
c001cdee:	57                   	push   edi
c001cdef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdf3:	e8 d2 fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdf8:	83 c4 2c             	add    esp,0x2c
c001cdfb:	25 00 ff 00 00       	and    eax,0xff00
c001ce00:	09 d8                	or     eax,ebx
c001ce02:	5b                   	pop    ebx
c001ce03:	5e                   	pop    esi
c001ce04:	5f                   	pop    edi
c001ce05:	5d                   	pop    ebp
c001ce06:	c3                   	ret    
c001ce07:	90                   	nop

c001ce08 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce08:	83 ec 18             	sub    esp,0x18
c001ce0b:	6a 08                	push   0x8
c001ce0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce12:	50                   	push   eax
c001ce13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce18:	50                   	push   eax
c001ce19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1e:	50                   	push   eax
c001ce1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce23:	e8 a2 fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce28:	83 c4 2c             	add    esp,0x2c
c001ce2b:	0f b6 c4             	movzx  eax,ah
c001ce2e:	c3                   	ret    
c001ce2f:	90                   	nop

c001ce30 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce30:	83 ec 18             	sub    esp,0x18
c001ce33:	6a 08                	push   0x8
c001ce35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce3a:	50                   	push   eax
c001ce3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce40:	50                   	push   eax
c001ce41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce46:	50                   	push   eax
c001ce47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce4b:	e8 7a fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce50:	83 c4 2c             	add    esp,0x2c
c001ce53:	c3                   	ret    

c001ce54 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce54:	83 ec 18             	sub    esp,0x18
c001ce57:	6a 3c                	push   0x3c
c001ce59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce5e:	50                   	push   eax
c001ce5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce64:	50                   	push   eax
c001ce65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6a:	50                   	push   eax
c001ce6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce6f:	e8 56 fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce74:	83 c4 2c             	add    esp,0x2c
c001ce77:	c3                   	ret    

c001ce78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce78:	83 ec 18             	sub    esp,0x18
c001ce7b:	6a 18                	push   0x18
c001ce7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce82:	50                   	push   eax
c001ce83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce88:	50                   	push   eax
c001ce89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce8e:	50                   	push   eax
c001ce8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce93:	e8 32 fe ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce98:	83 c4 2c             	add    esp,0x2c
c001ce9b:	0f b6 c4             	movzx  eax,ah
c001ce9e:	c3                   	ret    
c001ce9f:	90                   	nop

c001cea0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cea0:	55                   	push   ebp
c001cea1:	57                   	push   edi
c001cea2:	56                   	push   esi
c001cea3:	53                   	push   ebx
c001cea4:	83 ec 28             	sub    esp,0x28
c001cea7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ceab:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ceb0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ceb5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ceba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cec1:	8d 43 12             	lea    eax,[ebx+0x12]
c001cec4:	83 c3 10             	add    ebx,0x10
c001cec7:	0f b6 c0             	movzx  eax,al
c001ceca:	0f b6 db             	movzx  ebx,bl
c001cecd:	50                   	push   eax
c001cece:	51                   	push   ecx
c001cecf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ced3:	57                   	push   edi
c001ced4:	55                   	push   ebp
c001ced5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ced9:	e8 ec fd ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cede:	83 c4 14             	add    esp,0x14
c001cee1:	89 c6                	mov    esi,eax
c001cee3:	53                   	push   ebx
c001cee4:	c1 e6 10             	shl    esi,0x10
c001cee7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ceeb:	51                   	push   ecx
c001ceec:	57                   	push   edi
c001ceed:	55                   	push   ebp
c001ceee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cef2:	e8 d3 fd ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cef7:	83 c4 3c             	add    esp,0x3c
c001cefa:	0f b7 c0             	movzx  eax,ax
c001cefd:	5b                   	pop    ebx
c001cefe:	09 f0                	or     eax,esi
c001cf00:	5e                   	pop    esi
c001cf01:	5f                   	pop    edi
c001cf02:	5d                   	pop    ebp
c001cf03:	c3                   	ret    

c001cf04 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf04:	55                   	push   ebp
c001cf05:	57                   	push   edi
c001cf06:	56                   	push   esi
c001cf07:	53                   	push   ebx
c001cf08:	83 ec 0c             	sub    esp,0xc
c001cf0b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf13:	89 f5                	mov    ebp,esi
c001cf15:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf2b:	83 f9 01             	cmp    ecx,0x1
c001cf2e:	75 5d                	jne    c001cf8d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf30:	0f b6 c8             	movzx  ecx,al
c001cf33:	0f b6 d2             	movzx  edx,dl
c001cf36:	c1 e1 10             	shl    ecx,0x10
c001cf39:	c1 e2 0b             	shl    edx,0xb
c001cf3c:	89 f0                	mov    eax,esi
c001cf3e:	25 fc 00 00 00       	and    eax,0xfc
c001cf43:	09 c1                	or     ecx,eax
c001cf45:	89 e8                	mov    eax,ebp
c001cf47:	0f b6 c0             	movzx  eax,al
c001cf4a:	c1 e0 08             	shl    eax,0x8
c001cf4d:	09 c1                	or     ecx,eax
c001cf4f:	09 d1                	or     ecx,edx
c001cf51:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf56:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf5c:	89 c8                	mov    eax,ecx
c001cf5e:	ef                   	out    dx,eax
c001cf5f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf64:	ed                   	in     eax,dx
c001cf65:	0f b7 db             	movzx  ebx,bx
c001cf68:	83 e6 02             	and    esi,0x2
c001cf6b:	74 0a                	je     c001cf77 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf6d:	0f b7 d0             	movzx  edx,ax
c001cf70:	c1 e3 10             	shl    ebx,0x10
c001cf73:	09 d3                	or     ebx,edx
c001cf75:	eb 05                	jmp    c001cf7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf77:	66 31 c0             	xor    ax,ax
c001cf7a:	09 c3                	or     ebx,eax
c001cf7c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf81:	89 c8                	mov    eax,ecx
c001cf83:	ef                   	out    dx,eax
c001cf84:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf89:	89 d8                	mov    eax,ebx
c001cf8b:	eb 41                	jmp    c001cfce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf8d:	83 f9 02             	cmp    ecx,0x2
c001cf90:	75 45                	jne    c001cfd7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf92:	83 ec 0c             	sub    esp,0xc
c001cf95:	0f b6 d2             	movzx  edx,dl
c001cf98:	89 f1                	mov    ecx,esi
c001cf9a:	0f b6 c0             	movzx  eax,al
c001cf9d:	0f b6 f1             	movzx  esi,cl
c001cfa0:	89 e9                	mov    ecx,ebp
c001cfa2:	56                   	push   esi
c001cfa3:	0f b6 c9             	movzx  ecx,cl
c001cfa6:	51                   	push   ecx
c001cfa7:	52                   	push   edx
c001cfa8:	50                   	push   eax
c001cfa9:	57                   	push   edi
c001cfaa:	e8 ad fc ff ff       	call   c001cc5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfaf:	89 c2                	mov    edx,eax
c001cfb1:	ed                   	in     eax,dx
c001cfb2:	83 c4 20             	add    esp,0x20
c001cfb5:	0f b7 db             	movzx  ebx,bx
c001cfb8:	f6 c2 02             	test   dl,0x2
c001cfbb:	74 0c                	je     c001cfc9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cfbd:	0f b7 c8             	movzx  ecx,ax
c001cfc0:	89 d8                	mov    eax,ebx
c001cfc2:	c1 e0 10             	shl    eax,0x10
c001cfc5:	09 c8                	or     eax,ecx
c001cfc7:	eb 05                	jmp    c001cfce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfc9:	66 31 c0             	xor    ax,ax
c001cfcc:	09 d8                	or     eax,ebx
c001cfce:	ef                   	out    dx,eax
c001cfcf:	83 c4 0c             	add    esp,0xc
c001cfd2:	5b                   	pop    ebx
c001cfd3:	5e                   	pop    esi
c001cfd4:	5f                   	pop    edi
c001cfd5:	5d                   	pop    ebp
c001cfd6:	c3                   	ret    
c001cfd7:	c7 44 24 20 e7 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024ee7
c001cfdf:	83 c4 0c             	add    esp,0xc
c001cfe2:	5b                   	pop    ebx
c001cfe3:	5e                   	pop    esi
c001cfe4:	5f                   	pop    edi
c001cfe5:	5d                   	pop    ebp
c001cfe6:	e9 3a 73 ff ff       	jmp    c0014325 <Krnl::panic(char const*)>
c001cfeb:	90                   	nop

c001cfec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cfec:	55                   	push   ebp
c001cfed:	57                   	push   edi
c001cfee:	56                   	push   esi
c001cfef:	53                   	push   ebx
c001cff0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cff6:	80 3d 0c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002830c,0x0
c001cffd:	0f 85 84 00 00 00    	jne    c001d087 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	68 14 01 00 00       	push   0x114
c001d00b:	e8 b3 c9 fe ff       	call   c00099c3 <malloc>
c001d010:	83 c4 0c             	add    esp,0xc
c001d013:	89 c3                	mov    ebx,eax
c001d015:	ff 35 10 79 02 c0    	push   DWORD PTR ds:0xc0027910
c001d01b:	68 ed 4e 02 c0       	push   0xc0024eed
c001d020:	50                   	push   eax
c001d021:	e8 a8 ff fe ff       	call   c000cfce <File::File(char const*, Process*)>
c001d026:	5a                   	pop    edx
c001d027:	59                   	pop    ecx
c001d028:	6a 01                	push   0x1
c001d02a:	53                   	push   ebx
c001d02b:	e8 02 00 ff ff       	call   c000d032 <File::open(FileOpenMode)>
c001d030:	83 c4 0c             	add    esp,0xc
c001d033:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d037:	50                   	push   eax
c001d038:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d03c:	50                   	push   eax
c001d03d:	53                   	push   ebx
c001d03e:	e8 9b 02 ff ff       	call   c000d2de <File::stat(unsigned long long*, bool*)>
c001d043:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d047:	40                   	inc    eax
c001d048:	89 04 24             	mov    DWORD PTR [esp],eax
c001d04b:	e8 73 c9 fe ff       	call   c00099c3 <malloc>
c001d050:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d054:	a3 08 83 02 c0       	mov    ds:0xc0028308,eax
c001d059:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d05d:	5e                   	pop    esi
c001d05e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d060:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d064:	51                   	push   ecx
c001d065:	50                   	push   eax
c001d066:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d06a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d06e:	53                   	push   ebx
c001d06f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d072:	83 c4 14             	add    esp,0x14
c001d075:	53                   	push   ebx
c001d076:	e8 15 00 ff ff       	call   c000d090 <File::close()>
c001d07b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d07f:	83 c4 10             	add    esp,0x10
c001d082:	a3 04 83 02 c0       	mov    ds:0xc0028304,eax
c001d087:	a1 04 83 02 c0       	mov    eax,ds:0xc0028304
c001d08c:	8b 15 08 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028308
c001d092:	89 04 24             	mov    DWORD PTR [esp],eax
c001d095:	31 ff                	xor    edi,edi
c001d097:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d09f:	31 f6                	xor    esi,esi
c001d0a1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d0a6:	31 db                	xor    ebx,ebx
c001d0a8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d0b0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d0b5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d0bc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0c0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d0c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d0cb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d0ce:	0f 8e 6b 01 00 00    	jle    c001d23f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d0d4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0d7:	d4 40                	aam    0x40
c001d0d9:	d5 39                	aad    0x39
c001d0db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0df:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d0e3:	d4 40                	aam    0x40
c001d0e5:	d5 39                	aad    0x39
c001d0e7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0eb:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d0ef:	d4 40                	aam    0x40
c001d0f1:	d5 39                	aad    0x39
c001d0f3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d0f7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d0fb:	d4 40                	aam    0x40
c001d0fd:	d5 39                	aad    0x39
c001d0ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d103:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d107:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d10b:	3c 56                	cmp    al,0x56
c001d10d:	74 45                	je     c001d154 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d10f:	d4 40                	aam    0x40
c001d111:	d5 39                	aad    0x39
c001d113:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d116:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d11a:	0f b6 c9             	movzx  ecx,cl
c001d11d:	c1 e1 04             	shl    ecx,0x4
c001d120:	d4 40                	aam    0x40
c001d122:	d5 39                	aad    0x39
c001d124:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d127:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d12b:	0f b6 db             	movzx  ebx,bl
c001d12e:	09 cb                	or     ebx,ecx
c001d130:	c1 e3 04             	shl    ebx,0x4
c001d133:	d4 40                	aam    0x40
c001d135:	d5 39                	aad    0x39
c001d137:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d13a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d13e:	0f b6 c9             	movzx  ecx,cl
c001d141:	09 cb                	or     ebx,ecx
c001d143:	c1 e3 04             	shl    ebx,0x4
c001d146:	89 d9                	mov    ecx,ebx
c001d148:	d4 40                	aam    0x40
c001d14a:	d5 39                	aad    0x39
c001d14c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d14f:	0f b6 db             	movzx  ebx,bl
c001d152:	09 cb                	or     ebx,ecx
c001d154:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d158:	80 f9 44             	cmp    cl,0x44
c001d15b:	74 47                	je     c001d1a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d15d:	88 c8                	mov    al,cl
c001d15f:	d4 40                	aam    0x40
c001d161:	d5 39                	aad    0x39
c001d163:	83 e8 30             	sub    eax,0x30
c001d166:	0f b6 e8             	movzx  ebp,al
c001d169:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d16d:	c1 e5 04             	shl    ebp,0x4
c001d170:	d4 40                	aam    0x40
c001d172:	d5 39                	aad    0x39
c001d174:	83 e8 30             	sub    eax,0x30
c001d177:	0f b6 f0             	movzx  esi,al
c001d17a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d17e:	09 ee                	or     esi,ebp
c001d180:	c1 e6 04             	shl    esi,0x4
c001d183:	d4 40                	aam    0x40
c001d185:	d5 39                	aad    0x39
c001d187:	83 e8 30             	sub    eax,0x30
c001d18a:	0f b6 e8             	movzx  ebp,al
c001d18d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d191:	09 ee                	or     esi,ebp
c001d193:	c1 e6 04             	shl    esi,0x4
c001d196:	89 f5                	mov    ebp,esi
c001d198:	d4 40                	aam    0x40
c001d19a:	d5 39                	aad    0x39
c001d19c:	83 e8 30             	sub    eax,0x30
c001d19f:	0f b6 f0             	movzx  esi,al
c001d1a2:	09 ee                	or     esi,ebp
c001d1a4:	83 c7 10             	add    edi,0x10
c001d1a7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d1ab:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d1ae:	3c 0a                	cmp    al,0xa
c001d1b0:	74 09                	je     c001d1bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d1b2:	45                   	inc    ebp
c001d1b3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d1b6:	75 16                	jne    c001d1ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d1b8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d1bb:	3c 0a                	cmp    al,0xa
c001d1bd:	0f 94 c0             	sete   al
c001d1c0:	0f b6 c0             	movzx  eax,al
c001d1c3:	01 c7                	add    edi,eax
c001d1c5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d1ca:	75 0c                	jne    c001d1d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d1cc:	eb 15                	jmp    c001d1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d1ce:	47                   	inc    edi
c001d1cf:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d1d2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d1d6:	eb d3                	jmp    c001d1ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d1d8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d1dd:	0f 85 e8 fe ff ff    	jne    c001d0cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1e3:	80 f9 44             	cmp    cl,0x44
c001d1e6:	74 0b                	je     c001d1f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d1e8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d1ed:	0f 85 d8 fe ff ff    	jne    c001d0cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1f3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d1f7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d1fb:	c1 e1 04             	shl    ecx,0x4
c001d1fe:	83 e8 30             	sub    eax,0x30
c001d201:	09 c8                	or     eax,ecx
c001d203:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d207:	0f 85 be fe ff ff    	jne    c001d0cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d20d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d211:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d215:	c1 e1 04             	shl    ecx,0x4
c001d218:	83 e8 30             	sub    eax,0x30
c001d21b:	09 c8                	or     eax,ecx
c001d21d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d221:	0f 85 a4 fe ff ff    	jne    c001d0cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d227:	50                   	push   eax
c001d228:	50                   	push   eax
c001d229:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d22d:	50                   	push   eax
c001d22e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d235:	e8 06 35 fe ff       	call   c0000740 <strcpy>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	eb 15                	jmp    c001d254 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d23f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d246:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d251:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d254:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d25b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d261:	5b                   	pop    ebx
c001d262:	5e                   	pop    esi
c001d263:	5f                   	pop    edi
c001d264:	5d                   	pop    ebp
c001d265:	c3                   	ret    

c001d266 <PCI::checkBus(unsigned char)>:
c001d266:	56                   	push   esi
c001d267:	53                   	push   ebx
c001d268:	31 db                	xor    ebx,ebx
c001d26a:	51                   	push   ecx
c001d26b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d270:	52                   	push   edx
c001d271:	53                   	push   ebx
c001d272:	43                   	inc    ebx
c001d273:	56                   	push   esi
c001d274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d278:	e8 37 03 00 00       	call   c001d5b4 <PCI::checkDevice(unsigned char, unsigned char)>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	83 fb 20             	cmp    ebx,0x20
c001d283:	75 eb                	jne    c001d270 <PCI::checkBus(unsigned char)+0xa>
c001d285:	58                   	pop    eax
c001d286:	5b                   	pop    ebx
c001d287:	5e                   	pop    esi
c001d288:	c3                   	ret    
c001d289:	90                   	nop

c001d28a <PCI::foundDevice(PCIDeviceInfo)>:
c001d28a:	55                   	push   ebp
c001d28b:	57                   	push   edi
c001d28c:	56                   	push   esi
c001d28d:	53                   	push   ebx
c001d28e:	83 ec 1c             	sub    esp,0x1c
c001d291:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d295:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d29b:	0f 84 52 01 00 00    	je     c001d3f3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2a1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2a5:	66 81 f9 06 04       	cmp    cx,0x406
c001d2aa:	75 2c                	jne    c001d2d8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d2ac:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2b1:	50                   	push   eax
c001d2b2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2b7:	50                   	push   eax
c001d2b8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2bd:	50                   	push   eax
c001d2be:	56                   	push   esi
c001d2bf:	e8 b4 fb ff ff       	call   c001ce78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2c4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d2c8:	0f b6 c0             	movzx  eax,al
c001d2cb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2cf:	83 c4 2c             	add    esp,0x2c
c001d2d2:	5b                   	pop    ebx
c001d2d3:	5e                   	pop    esi
c001d2d4:	5f                   	pop    edi
c001d2d5:	5d                   	pop    ebp
c001d2d6:	eb 8e                	jmp    c001d266 <PCI::checkBus(unsigned char)>
c001d2d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2dc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d2e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2ea:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d2ee:	88 d3                	mov    bl,dl
c001d2f0:	85 c0                	test   eax,eax
c001d2f2:	74 33                	je     c001d327 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d2f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2f7:	85 d2                	test   edx,edx
c001d2f9:	74 28                	je     c001d323 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2fb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d301:	31 ef                	xor    edi,ebp
c001d303:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d309:	75 18                	jne    c001d323 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d30b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d30f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d315:	75 0c                	jne    c001d323 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d317:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d31d:	0f 84 d0 00 00 00    	je     c001d3f3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d323:	8b 00                	mov    eax,DWORD PTR [eax]
c001d325:	eb c9                	jmp    c001d2f0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d327:	66 81 f9 01 06       	cmp    cx,0x601
c001d32c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d330:	75 19                	jne    c001d34b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	68 64 01 00 00       	push   0x164
c001d33a:	e8 84 c6 fe ff       	call   c00099c3 <malloc>
c001d33f:	89 c5                	mov    ebp,eax
c001d341:	89 04 24             	mov    DWORD PTR [esp],eax
c001d344:	e8 7b 0e 00 00       	call   c001e1c4 <SATABus::SATABus()>
c001d349:	eb 1e                	jmp    c001d369 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d34b:	66 81 f9 01 01       	cmp    cx,0x101
c001d350:	75 60                	jne    c001d3b2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d352:	83 ec 0c             	sub    esp,0xc
c001d355:	68 70 02 00 00       	push   0x270
c001d35a:	e8 64 c6 fe ff       	call   c00099c3 <malloc>
c001d35f:	89 c5                	mov    ebp,eax
c001d361:	89 04 24             	mov    DWORD PTR [esp],eax
c001d364:	e8 0f 03 00 00       	call   c001d678 <IDE::IDE()>
c001d369:	58                   	pop    eax
c001d36a:	5a                   	pop    edx
c001d36b:	55                   	push   ebp
c001d36c:	56                   	push   esi
c001d36d:	e8 38 0b ff ff       	call   c000deaa <Device::addChild(Device*)>
c001d372:	83 ec 1c             	sub    esp,0x1c
c001d375:	b9 09 00 00 00       	mov    ecx,0x9
c001d37a:	fc                   	cld    
c001d37b:	89 e7                	mov    edi,esp
c001d37d:	89 de                	mov    esi,ebx
c001d37f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d381:	55                   	push   ebp
c001d382:	e8 35 0a ff ff       	call   c000ddbc <Device::preOpenPCI(PCIDeviceInfo)>
c001d387:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d38a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d38e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d396:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d39e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d3a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d3a9:	83 c4 4c             	add    esp,0x4c
c001d3ac:	5b                   	pop    ebx
c001d3ad:	5e                   	pop    esi
c001d3ae:	5f                   	pop    edi
c001d3af:	5d                   	pop    ebp
c001d3b0:	ff e0                	jmp    eax
c001d3b2:	83 ec 0c             	sub    esp,0xc
c001d3b5:	68 58 01 00 00       	push   0x158
c001d3ba:	e8 04 c6 fe ff       	call   c00099c3 <malloc>
c001d3bf:	89 c5                	mov    ebp,eax
c001d3c1:	58                   	pop    eax
c001d3c2:	5a                   	pop    edx
c001d3c3:	68 06 4f 02 c0       	push   0xc0024f06
c001d3c8:	55                   	push   ebp
c001d3c9:	e8 e6 0d ff ff       	call   c000e1b4 <DriverlessDevice::DriverlessDevice(char const*)>
c001d3ce:	59                   	pop    ecx
c001d3cf:	5f                   	pop    edi
c001d3d0:	55                   	push   ebp
c001d3d1:	56                   	push   esi
c001d3d2:	e8 d3 0a ff ff       	call   c000deaa <Device::addChild(Device*)>
c001d3d7:	b9 09 00 00 00       	mov    ecx,0x9
c001d3dc:	fc                   	cld    
c001d3dd:	89 df                	mov    edi,ebx
c001d3df:	89 de                	mov    esi,ebx
c001d3e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3e3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d3e7:	83 c4 2c             	add    esp,0x2c
c001d3ea:	5b                   	pop    ebx
c001d3eb:	5e                   	pop    esi
c001d3ec:	5f                   	pop    edi
c001d3ed:	5d                   	pop    ebp
c001d3ee:	e9 c9 09 ff ff       	jmp    c000ddbc <Device::preOpenPCI(PCIDeviceInfo)>
c001d3f3:	83 c4 1c             	add    esp,0x1c
c001d3f6:	5b                   	pop    ebx
c001d3f7:	5e                   	pop    esi
c001d3f8:	5f                   	pop    edi
c001d3f9:	5d                   	pop    ebp
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d3fc:	55                   	push   ebp
c001d3fd:	57                   	push   edi
c001d3fe:	56                   	push   esi
c001d3ff:	53                   	push   ebx
c001d400:	83 ec 68             	sub    esp,0x68
c001d403:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d407:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d40e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d412:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d419:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d41e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d422:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d429:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d42e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d432:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d437:	6a 0c                	push   0xc
c001d439:	57                   	push   edi
c001d43a:	53                   	push   ebx
c001d43b:	56                   	push   esi
c001d43c:	55                   	push   ebp
c001d43d:	e8 88 f8 ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d442:	83 c4 20             	add    esp,0x20
c001d445:	57                   	push   edi
c001d446:	53                   	push   ebx
c001d447:	56                   	push   esi
c001d448:	55                   	push   ebp
c001d449:	e8 70 f9 ff ff       	call   c001cdbe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d44e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d453:	57                   	push   edi
c001d454:	53                   	push   ebx
c001d455:	56                   	push   esi
c001d456:	55                   	push   ebp
c001d457:	e8 f8 f9 ff ff       	call   c001ce54 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d45c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d460:	83 c4 14             	add    esp,0x14
c001d463:	6a 3c                	push   0x3c
c001d465:	57                   	push   edi
c001d466:	53                   	push   ebx
c001d467:	56                   	push   esi
c001d468:	55                   	push   ebp
c001d469:	e8 5c f8 ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d46e:	0f b6 c4             	movzx  eax,ah
c001d471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d475:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d479:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d47d:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001d482:	83 c4 20             	add    esp,0x20
c001d485:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d48b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d492:	74 7c                	je     c001d510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d494:	31 c0                	xor    eax,eax
c001d496:	8b 15 e8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e8
c001d49c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4a2:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d4a8:	7e 66                	jle    c001d510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4aa:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d4ad:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d4b4:	39 cb                	cmp    ebx,ecx
c001d4b6:	75 55                	jne    c001d50d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4b8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d4bf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d4c3:	75 48                	jne    c001d50d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	68 20 4f 02 c0       	push   0xc0024f20
c001d4d1:	e8 8e f5 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001d4d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4da:	8b 15 e8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e8
c001d4e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4e4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4ea:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d4f2:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d4f6:	52                   	push   edx
c001d4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4fb:	53                   	push   ebx
c001d4fc:	68 45 4f 02 c0       	push   0xc0024f45
c001d501:	e8 5e f5 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001d506:	83 c4 20             	add    esp,0x20
c001d509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d50d:	40                   	inc    eax
c001d50e:	eb 86                	jmp    c001d496 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d510:	31 d2                	xor    edx,edx
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	57                   	push   edi
c001d516:	53                   	push   ebx
c001d517:	56                   	push   esi
c001d518:	52                   	push   edx
c001d519:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d51d:	55                   	push   ebp
c001d51e:	e8 7d f9 ff ff       	call   c001cea0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d523:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d527:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d52b:	42                   	inc    edx
c001d52c:	83 c4 20             	add    esp,0x20
c001d52f:	83 fa 06             	cmp    edx,0x6
c001d532:	75 de                	jne    c001d512 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d534:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d539:	83 ec 0c             	sub    esp,0xc
c001d53c:	86 e0                	xchg   al,ah
c001d53e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d543:	6a 02                	push   0x2
c001d545:	57                   	push   edi
c001d546:	53                   	push   ebx
c001d547:	56                   	push   esi
c001d548:	55                   	push   ebp
c001d549:	e8 7c f7 ff ff       	call   c001ccca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d54e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d553:	83 c4 20             	add    esp,0x20
c001d556:	57                   	push   edi
c001d557:	53                   	push   ebx
c001d558:	56                   	push   esi
c001d559:	55                   	push   ebp
c001d55a:	e8 a9 f8 ff ff       	call   c001ce08 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d55f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d563:	57                   	push   edi
c001d564:	53                   	push   ebx
c001d565:	56                   	push   esi
c001d566:	55                   	push   ebp
c001d567:	e8 06 f8 ff ff       	call   c001cd72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d56c:	b9 09 00 00 00       	mov    ecx,0x9
c001d571:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d576:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d57a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d57e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d582:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d586:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d58a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d58e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d592:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	fc                   	cld    
c001d59a:	89 e7                	mov    edi,esp
c001d59c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5a2:	55                   	push   ebp
c001d5a3:	e8 e2 fc ff ff       	call   c001d28a <PCI::foundDevice(PCIDeviceInfo)>
c001d5a8:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d5ae:	5b                   	pop    ebx
c001d5af:	5e                   	pop    esi
c001d5b0:	5f                   	pop    edi
c001d5b1:	5d                   	pop    ebp
c001d5b2:	c3                   	ret    
c001d5b3:	90                   	nop

c001d5b4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d5b4:	55                   	push   ebp
c001d5b5:	57                   	push   edi
c001d5b6:	56                   	push   esi
c001d5b7:	53                   	push   ebx
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5bf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5c4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5c9:	6a 00                	push   0x0
c001d5cb:	56                   	push   esi
c001d5cc:	57                   	push   edi
c001d5cd:	55                   	push   ebp
c001d5ce:	e8 9f f7 ff ff       	call   c001cd72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5d3:	6a 00                	push   0x0
c001d5d5:	56                   	push   esi
c001d5d6:	57                   	push   edi
c001d5d7:	55                   	push   ebp
c001d5d8:	e8 1f fe ff ff       	call   c001d3fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5dd:	83 c4 20             	add    esp,0x20
c001d5e0:	6a 00                	push   0x0
c001d5e2:	56                   	push   esi
c001d5e3:	57                   	push   edi
c001d5e4:	55                   	push   ebp
c001d5e5:	e8 ac f7 ff ff       	call   c001cd96 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	84 c0                	test   al,al
c001d5ef:	79 27                	jns    c001d618 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d5f1:	bb 01 00 00 00       	mov    ebx,0x1
c001d5f6:	53                   	push   ebx
c001d5f7:	56                   	push   esi
c001d5f8:	57                   	push   edi
c001d5f9:	55                   	push   ebp
c001d5fa:	e8 73 f7 ff ff       	call   c001cd72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	66 40                	inc    ax
c001d604:	74 0c                	je     c001d612 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d606:	53                   	push   ebx
c001d607:	56                   	push   esi
c001d608:	57                   	push   edi
c001d609:	55                   	push   ebp
c001d60a:	e8 ed fd ff ff       	call   c001d3fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	43                   	inc    ebx
c001d613:	83 fb 08             	cmp    ebx,0x8
c001d616:	75 de                	jne    c001d5f6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d618:	83 c4 0c             	add    esp,0xc
c001d61b:	5b                   	pop    ebx
c001d61c:	5e                   	pop    esi
c001d61d:	5f                   	pop    edi
c001d61e:	5d                   	pop    ebp
c001d61f:	c3                   	ret    

c001d620 <PCI::detect()>:
c001d620:	56                   	push   esi
c001d621:	53                   	push   ebx
c001d622:	53                   	push   ebx
c001d623:	31 db                	xor    ebx,ebx
c001d625:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d629:	6a 00                	push   0x0
c001d62b:	6a 00                	push   0x0
c001d62d:	6a 00                	push   0x0
c001d62f:	56                   	push   esi
c001d630:	e8 61 f7 ff ff       	call   c001cd96 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d635:	83 c4 10             	add    esp,0x10
c001d638:	a8 80                	test   al,0x80
c001d63a:	75 21                	jne    c001d65d <PCI::detect()+0x3d>
c001d63c:	51                   	push   ecx
c001d63d:	51                   	push   ecx
c001d63e:	6a 00                	push   0x0
c001d640:	56                   	push   esi
c001d641:	e8 20 fc ff ff       	call   c001d266 <PCI::checkBus(unsigned char)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	eb 24                	jmp    c001d66f <PCI::detect()+0x4f>
c001d64b:	52                   	push   edx
c001d64c:	52                   	push   edx
c001d64d:	53                   	push   ebx
c001d64e:	43                   	inc    ebx
c001d64f:	56                   	push   esi
c001d650:	e8 11 fc ff ff       	call   c001d266 <PCI::checkBus(unsigned char)>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	83 fb 08             	cmp    ebx,0x8
c001d65b:	74 12                	je     c001d66f <PCI::detect()+0x4f>
c001d65d:	53                   	push   ebx
c001d65e:	6a 00                	push   0x0
c001d660:	6a 00                	push   0x0
c001d662:	56                   	push   esi
c001d663:	e8 0a f7 ff ff       	call   c001cd72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	66 40                	inc    ax
c001d66d:	74 dc                	je     c001d64b <PCI::detect()+0x2b>
c001d66f:	58                   	pop    eax
c001d670:	5b                   	pop    ebx
c001d671:	5e                   	pop    esi
c001d672:	c3                   	ret    
c001d673:	90                   	nop

c001d674 <IDE::close(int, int, void*)>:
c001d674:	83 c8 ff             	or     eax,0xffffffff
c001d677:	c3                   	ret    

c001d678 <IDE::IDE()>:
c001d678:	83 ec 0c             	sub    esp,0xc
c001d67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67f:	83 ec 08             	sub    esp,0x8
c001d682:	68 8c 4f 02 c0       	push   0xc0024f8c
c001d687:	50                   	push   eax
c001d688:	e8 cb 0b ff ff       	call   c000e258 <HardDiskController::HardDiskController(char const*)>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	ba 1c 50 02 c0       	mov    edx,0xc002501c
c001d695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d699:	89 10                	mov    DWORD PTR [eax],edx
c001d69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d69f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d6a6:	90                   	nop
c001d6a7:	83 c4 0c             	add    esp,0xc
c001d6aa:	c3                   	ret    
c001d6ab:	90                   	nop

c001d6ac <IDE::prepareInterrupt(unsigned char)>:
c001d6ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6b5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6bd:	c3                   	ret    

c001d6be <selectDrive(unsigned char, unsigned char)>:
c001d6be:	c3                   	ret    
c001d6bf:	90                   	nop

c001d6c0 <IDE::getBase(unsigned char)>:
c001d6c0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6c9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6d1:	c3                   	ret    

c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6d2:	55                   	push   ebp
c001d6d3:	57                   	push   edi
c001d6d4:	56                   	push   esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 1c             	sub    esp,0x1c
c001d6d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6e1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6ec:	80 f9 03             	cmp    cl,0x3
c001d6ef:	77 51                	ja     c001d742 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d6f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6f5:	0f b6 f2             	movzx  esi,dl
c001d6f8:	0f b6 db             	movzx  ebx,bl
c001d6fb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d6fe:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d702:	83 ca 80             	or     edx,0xffffff80
c001d705:	0f b6 d2             	movzx  edx,dl
c001d708:	52                   	push   edx
c001d709:	6a 0c                	push   0xc
c001d70b:	56                   	push   esi
c001d70c:	57                   	push   edi
c001d70d:	e8 c0 ff ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d712:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d717:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d71b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d71f:	ee                   	out    dx,al
c001d720:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d725:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d729:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d72d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d731:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d739:	83 c4 2c             	add    esp,0x2c
c001d73c:	5b                   	pop    ebx
c001d73d:	5e                   	pop    esi
c001d73e:	5f                   	pop    edi
c001d73f:	5d                   	pop    ebp
c001d740:	eb 90                	jmp    c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d742:	80 fb 07             	cmp    bl,0x7
c001d745:	77 12                	ja     c001d759 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d747:	0f b6 d2             	movzx  edx,dl
c001d74a:	0f b6 db             	movzx  ebx,bl
c001d74d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d755:	89 da                	mov    edx,ebx
c001d757:	eb 2f                	jmp    c001d788 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d759:	80 fb 0d             	cmp    bl,0xd
c001d75c:	77 13                	ja     c001d771 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d75e:	0f b6 d2             	movzx  edx,dl
c001d761:	0f b6 db             	movzx  ebx,bl
c001d764:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d76b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d76f:	eb 17                	jmp    c001d788 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d771:	80 fb 15             	cmp    bl,0x15
c001d774:	77 13                	ja     c001d789 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d776:	0f b6 d2             	movzx  edx,dl
c001d779:	0f b6 db             	movzx  ebx,bl
c001d77c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d784:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d788:	ee                   	out    dx,al
c001d789:	83 c4 1c             	add    esp,0x1c
c001d78c:	5b                   	pop    ebx
c001d78d:	5e                   	pop    esi
c001d78e:	5f                   	pop    edi
c001d78f:	5d                   	pop    ebp
c001d790:	c3                   	ret    
c001d791:	90                   	nop

c001d792 <IDE::read(unsigned char, unsigned char)>:
c001d792:	55                   	push   ebp
c001d793:	57                   	push   edi
c001d794:	56                   	push   esi
c001d795:	53                   	push   ebx
c001d796:	83 ec 1c             	sub    esp,0x1c
c001d799:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d79d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7a1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d7a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7a8:	3c 03                	cmp    al,0x3
c001d7aa:	77 43                	ja     c001d7ef <IDE::read(unsigned char, unsigned char)+0x5d>
c001d7ac:	0f b6 f2             	movzx  esi,dl
c001d7af:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d7b2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d7b6:	83 c8 80             	or     eax,0xffffff80
c001d7b9:	0f b6 c0             	movzx  eax,al
c001d7bc:	50                   	push   eax
c001d7bd:	6a 0c                	push   0xc
c001d7bf:	56                   	push   esi
c001d7c0:	57                   	push   edi
c001d7c1:	e8 0c ff ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7c6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d7cb:	0f b6 c3             	movzx  eax,bl
c001d7ce:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d7d2:	ec                   	in     al,dx
c001d7d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7d7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d7dc:	52                   	push   edx
c001d7dd:	6a 0c                	push   0xc
c001d7df:	56                   	push   esi
c001d7e0:	57                   	push   edi
c001d7e1:	e8 ec fe ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e6:	83 c4 20             	add    esp,0x20
c001d7e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7ed:	eb 49                	jmp    c001d838 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7ef:	80 fb 07             	cmp    bl,0x7
c001d7f2:	77 12                	ja     c001d806 <IDE::read(unsigned char, unsigned char)+0x74>
c001d7f4:	0f b6 d2             	movzx  edx,dl
c001d7f7:	0f b6 c3             	movzx  eax,bl
c001d7fa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d802:	89 c2                	mov    edx,eax
c001d804:	eb 31                	jmp    c001d837 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d806:	80 fb 0d             	cmp    bl,0xd
c001d809:	77 13                	ja     c001d81e <IDE::read(unsigned char, unsigned char)+0x8c>
c001d80b:	0f b6 d2             	movzx  edx,dl
c001d80e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d815:	0f b6 d3             	movzx  edx,bl
c001d818:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d81c:	eb 19                	jmp    c001d837 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d81e:	31 c0                	xor    eax,eax
c001d820:	80 fb 15             	cmp    bl,0x15
c001d823:	77 13                	ja     c001d838 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d825:	0f b6 d2             	movzx  edx,dl
c001d828:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d830:	0f b6 d3             	movzx  edx,bl
c001d833:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d837:	ec                   	in     al,dx
c001d838:	83 c4 1c             	add    esp,0x1c
c001d83b:	5b                   	pop    ebx
c001d83c:	5e                   	pop    esi
c001d83d:	5f                   	pop    edi
c001d83e:	5d                   	pop    ebp
c001d83f:	c3                   	ret    

c001d840 <IDE::waitInterrupt(unsigned char)>:
c001d840:	55                   	push   ebp
c001d841:	57                   	push   edi
c001d842:	56                   	push   esi
c001d843:	53                   	push   ebx
c001d844:	31 db                	xor    ebx,ebx
c001d846:	83 ec 0c             	sub    esp,0xc
c001d849:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d84d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d852:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d85a:	89 e8                	mov    eax,ebp
c001d85c:	84 c0                	test   al,al
c001d85e:	75 30                	jne    c001d890 <IDE::waitInterrupt(unsigned char)+0x50>
c001d860:	50                   	push   eax
c001d861:	6a 0c                	push   0xc
c001d863:	56                   	push   esi
c001d864:	57                   	push   edi
c001d865:	e8 28 ff ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	a8 01                	test   al,0x1
c001d86f:	75 27                	jne    c001d898 <IDE::waitInterrupt(unsigned char)+0x58>
c001d871:	f6 c3 04             	test   bl,0x4
c001d874:	75 12                	jne    c001d888 <IDE::waitInterrupt(unsigned char)+0x48>
c001d876:	83 fb 32             	cmp    ebx,0x32
c001d879:	7e 0d                	jle    c001d888 <IDE::waitInterrupt(unsigned char)+0x48>
c001d87b:	83 ec 0c             	sub    esp,0xc
c001d87e:	6a 64                	push   0x64
c001d880:	e8 6b a9 ff ff       	call   c00181f0 <milliTenthSleep(unsigned int)>
c001d885:	83 c4 10             	add    esp,0x10
c001d888:	83 fb 3c             	cmp    ebx,0x3c
c001d88b:	74 0b                	je     c001d898 <IDE::waitInterrupt(unsigned char)+0x58>
c001d88d:	43                   	inc    ebx
c001d88e:	eb c2                	jmp    c001d852 <IDE::waitInterrupt(unsigned char)+0x12>
c001d890:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d898:	83 c4 0c             	add    esp,0xc
c001d89b:	89 e8                	mov    eax,ebp
c001d89d:	5b                   	pop    ebx
c001d89e:	5e                   	pop    esi
c001d89f:	5f                   	pop    edi
c001d8a0:	5d                   	pop    ebp
c001d8a1:	c3                   	ret    

c001d8a2 <ideChannel0IRQHandler(regs*, void*)>:
c001d8a2:	83 ec 10             	sub    esp,0x10
c001d8a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8b0:	6a 07                	push   0x7
c001d8b2:	6a 00                	push   0x0
c001d8b4:	50                   	push   eax
c001d8b5:	e8 d8 fe ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001d8ba:	83 c4 1c             	add    esp,0x1c
c001d8bd:	c3                   	ret    

c001d8be <ideChannel1IRQHandler(regs*, void*)>:
c001d8be:	83 ec 10             	sub    esp,0x10
c001d8c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8cc:	6a 07                	push   0x7
c001d8ce:	6a 01                	push   0x1
c001d8d0:	50                   	push   eax
c001d8d1:	e8 bc fe ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001d8d6:	83 c4 1c             	add    esp,0x1c
c001d8d9:	c3                   	ret    

c001d8da <IDE::enableIRQs(unsigned char, bool)>:
c001d8da:	57                   	push   edi
c001d8db:	56                   	push   esi
c001d8dc:	be 04 00 00 00       	mov    esi,0x4
c001d8e1:	53                   	push   ebx
c001d8e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d8f0:	0f 94 c0             	sete   al
c001d8f3:	d1 e0                	shl    eax,1
c001d8f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d8fc:	0f b6 c0             	movzx  eax,al
c001d8ff:	50                   	push   eax
c001d900:	6a 0c                	push   0xc
c001d902:	57                   	push   edi
c001d903:	53                   	push   ebx
c001d904:	e8 c9 fd ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	50                   	push   eax
c001d90d:	6a 0c                	push   0xc
c001d90f:	57                   	push   edi
c001d910:	53                   	push   ebx
c001d911:	e8 7c fe ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	4e                   	dec    esi
c001d91a:	75 f0                	jne    c001d90c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d91c:	5b                   	pop    ebx
c001d91d:	5e                   	pop    esi
c001d91e:	5f                   	pop    edi
c001d91f:	c3                   	ret    

c001d920 <IDE::open(int, int, void*)>:
c001d920:	55                   	push   ebp
c001d921:	57                   	push   edi
c001d922:	56                   	push   esi
c001d923:	53                   	push   ebx
c001d924:	83 ec 1c             	sub    esp,0x1c
c001d927:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d92b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d934:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d93d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d944:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d94b:	0f 85 b0 02 00 00    	jne    c001dc01 <IDE::open(int, int, void*)+0x2e1>
c001d951:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d957:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d95b:	83 e0 7f             	and    eax,0x7f
c001d95e:	3c 05                	cmp    al,0x5
c001d960:	74 04                	je     c001d966 <IDE::open(int, int, void*)+0x46>
c001d962:	3c 0f                	cmp    al,0xf
c001d964:	75 32                	jne    c001d998 <IDE::open(int, int, void*)+0x78>
c001d966:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d96c:	83 e0 fc             	and    eax,0xfffffffc
c001d96f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d976:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d97c:	83 e0 fc             	and    eax,0xfffffffc
c001d97f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d986:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d98c:	83 e0 fc             	and    eax,0xfffffffc
c001d98f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d996:	eb 14                	jmp    c001d9ac <IDE::open(int, int, void*)+0x8c>
c001d998:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d9ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9be:	89 c6                	mov    esi,eax
c001d9c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9c5:	c1 e6 10             	shl    esi,0x10
c001d9c8:	89 e8                	mov    eax,ebp
c001d9ca:	89 fa                	mov    edx,edi
c001d9cc:	c1 e0 0b             	shl    eax,0xb
c001d9cf:	09 f0                	or     eax,esi
c001d9d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d9d8:	c1 e6 08             	shl    esi,0x8
c001d9db:	09 c6                	or     esi,eax
c001d9dd:	89 f0                	mov    eax,esi
c001d9df:	0d 08 00 00 80       	or     eax,0x80000008
c001d9e4:	ef                   	out    dx,eax
c001d9e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d9ea:	89 ca                	mov    edx,ecx
c001d9ec:	ed                   	in     eax,dx
c001d9ed:	c1 e8 10             	shr    eax,0x10
c001d9f0:	3d ff ff 00 00       	cmp    eax,0xffff
c001d9f5:	0f 84 f5 00 00 00    	je     c001daf0 <IDE::open(int, int, void*)+0x1d0>
c001d9fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da01:	89 fa                	mov    edx,edi
c001da03:	89 f0                	mov    eax,esi
c001da05:	ef                   	out    dx,eax
c001da06:	b0 fe                	mov    al,0xfe
c001da08:	89 ca                	mov    edx,ecx
c001da0a:	ee                   	out    dx,al
c001da0b:	89 f0                	mov    eax,esi
c001da0d:	89 fa                	mov    edx,edi
c001da0f:	ef                   	out    dx,eax
c001da10:	89 ca                	mov    edx,ecx
c001da12:	ed                   	in     eax,dx
c001da13:	3c fe                	cmp    al,0xfe
c001da15:	0f 85 a9 00 00 00    	jne    c001dac4 <IDE::open(int, int, void*)+0x1a4>
c001da1b:	8b 15 e8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e8
c001da21:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da28:	74 33                	je     c001da5d <IDE::open(int, int, void*)+0x13d>
c001da2a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da30:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da34:	40                   	inc    eax
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	0f b6 c0             	movzx  eax,al
c001da3b:	50                   	push   eax
c001da3c:	55                   	push   ebp
c001da3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da41:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da47:	51                   	push   ecx
c001da48:	e8 0f 44 ff ff       	call   c0011e5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da4d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da52:	83 c4 1c             	add    esp,0x1c
c001da55:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da5b:	eb 0a                	jmp    c001da67 <IDE::open(int, int, void*)+0x147>
c001da5d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da67:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da6e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da75:	c1 e1 10             	shl    ecx,0x10
c001da78:	c1 e0 08             	shl    eax,0x8
c001da7b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da80:	09 c1                	or     ecx,eax
c001da82:	89 fa                	mov    edx,edi
c001da84:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da8b:	c1 e0 0b             	shl    eax,0xb
c001da8e:	09 c1                	or     ecx,eax
c001da90:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da96:	89 c8                	mov    eax,ecx
c001da98:	ef                   	out    dx,eax
c001da99:	be fc 0c 00 00       	mov    esi,0xcfc
c001da9e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001daa4:	89 f2                	mov    edx,esi
c001daa6:	ee                   	out    dx,al
c001daa7:	89 c8                	mov    eax,ecx
c001daa9:	89 fa                	mov    edx,edi
c001daab:	ef                   	out    dx,eax
c001daac:	89 f2                	mov    edx,esi
c001daae:	ed                   	in     eax,dx
c001daaf:	0f b6 c0             	movzx  eax,al
c001dab2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dab8:	74 46                	je     c001db00 <IDE::open(int, int, void*)+0x1e0>
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	68 a4 4f 02 c0       	push   0xc0024fa4
c001dac2:	eb 34                	jmp    c001daf8 <IDE::open(int, int, void*)+0x1d8>
c001dac4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001dacd:	75 17                	jne    c001dae6 <IDE::open(int, int, void*)+0x1c6>
c001dacf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dad4:	74 07                	je     c001dadd <IDE::open(int, int, void*)+0x1bd>
c001dad6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001dadb:	75 09                	jne    c001dae6 <IDE::open(int, int, void*)+0x1c6>
c001dadd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dae4:	eb 1a                	jmp    c001db00 <IDE::open(int, int, void*)+0x1e0>
c001dae6:	83 ec 0c             	sub    esp,0xc
c001dae9:	68 ac 4f 02 c0       	push   0xc0024fac
c001daee:	eb 08                	jmp    c001daf8 <IDE::open(int, int, void*)+0x1d8>
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	68 dd 4f 02 c0       	push   0xc0024fdd
c001daf8:	e8 28 68 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db07:	79 1a                	jns    c001db23 <IDE::open(int, int, void*)+0x203>
c001db09:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db0f:	83 e0 fc             	and    eax,0xfffffffc
c001db12:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db19:	83 c0 08             	add    eax,0x8
c001db1c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db23:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db29:	89 c2                	mov    edx,eax
c001db2b:	83 e2 0f             	and    edx,0xf
c001db2e:	66 83 fa 08          	cmp    dx,0x8
c001db32:	75 0a                	jne    c001db3e <IDE::open(int, int, void*)+0x21e>
c001db34:	83 e8 02             	sub    eax,0x2
c001db37:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db3e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db44:	89 c2                	mov    edx,eax
c001db46:	83 e2 0f             	and    edx,0xf
c001db49:	66 83 fa 08          	cmp    dx,0x8
c001db4d:	75 0a                	jne    c001db59 <IDE::open(int, int, void*)+0x239>
c001db4f:	83 e8 02             	sub    eax,0x2
c001db52:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db59:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db60:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db67:	89 d0                	mov    eax,edx
c001db69:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db70:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db74:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db77:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db7c:	0f b6 c9             	movzx  ecx,cl
c001db7f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db86:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db89:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db8d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db91:	8d 50 02             	lea    edx,[eax+0x2]
c001db94:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db99:	0f b6 d2             	movzx  edx,dl
c001db9c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dba2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dba5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dba9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dbad:	8d 48 03             	lea    ecx,[eax+0x3]
c001dbb0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbb5:	0f b6 c9             	movzx  ecx,cl
c001dbb8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dbbe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbc1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbc5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dbc9:	8d 50 04             	lea    edx,[eax+0x4]
c001dbcc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dbd2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbd7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dbde:	66 85 f6             	test   si,si
c001dbe1:	74 5b                	je     c001dc3e <IDE::open(int, int, void*)+0x31e>
c001dbe3:	0f b6 d2             	movzx  edx,dl
c001dbe6:	83 c0 05             	add    eax,0x5
c001dbe9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbf0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dbf4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dbfa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbff:	eb 3d                	jmp    c001dc3e <IDE::open(int, int, void*)+0x31e>
c001dc01:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc0e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc15:	66 05 06 02          	add    ax,0x206
c001dc19:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc20:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc27:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc2e:	66 05 06 02          	add    ax,0x206
c001dc32:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc39:	e9 e5 fe ff ff       	jmp    c001db23 <IDE::open(int, int, void*)+0x203>
c001dc3e:	50                   	push   eax
c001dc3f:	50                   	push   eax
c001dc40:	6a 00                	push   0x0
c001dc42:	53                   	push   ebx
c001dc43:	e8 64 fa ff ff       	call   c001d6ac <IDE::prepareInterrupt(unsigned char)>
c001dc48:	5a                   	pop    edx
c001dc49:	59                   	pop    ecx
c001dc4a:	6a 01                	push   0x1
c001dc4c:	53                   	push   ebx
c001dc4d:	e8 5a fa ff ff       	call   c001d6ac <IDE::prepareInterrupt(unsigned char)>
c001dc52:	83 c4 0c             	add    esp,0xc
c001dc55:	6a 00                	push   0x0
c001dc57:	6a 00                	push   0x0
c001dc59:	53                   	push   ebx
c001dc5a:	e8 7b fc ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001dc5f:	83 c4 0c             	add    esp,0xc
c001dc62:	6a 00                	push   0x0
c001dc64:	6a 01                	push   0x1
c001dc66:	53                   	push   ebx
c001dc67:	e8 6e fc ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc76:	74 34                	je     c001dcac <IDE::open(int, int, void*)+0x38c>
c001dc78:	83 ec 0c             	sub    esp,0xc
c001dc7b:	53                   	push   ebx
c001dc7c:	6a 01                	push   0x1
c001dc7e:	68 a2 d8 01 c0       	push   0xc001d8a2
c001dc83:	6a 0e                	push   0xe
c001dc85:	53                   	push   ebx
c001dc86:	e8 97 01 ff ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc8b:	83 c4 14             	add    esp,0x14
c001dc8e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc94:	53                   	push   ebx
c001dc95:	6a 01                	push   0x1
c001dc97:	68 be d8 01 c0       	push   0xc001d8be
c001dc9c:	6a 0f                	push   0xf
c001dc9e:	53                   	push   ebx
c001dc9f:	e8 7e 01 ff ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dca4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dcaa:	eb 38                	jmp    c001dce4 <IDE::open(int, int, void*)+0x3c4>
c001dcac:	83 ec 0c             	sub    esp,0xc
c001dcaf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dcb9:	53                   	push   ebx
c001dcba:	6a 00                	push   0x0
c001dcbc:	68 a2 d8 01 c0       	push   0xc001d8a2
c001dcc1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dcc7:	53                   	push   ebx
c001dcc8:	e8 55 01 ff ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dccd:	83 c4 14             	add    esp,0x14
c001dcd0:	53                   	push   ebx
c001dcd1:	6a 00                	push   0x0
c001dcd3:	68 be d8 01 c0       	push   0xc001d8be
c001dcd8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dcde:	53                   	push   ebx
c001dcdf:	e8 3e 01 ff ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dce4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dce6:	83 c4 20             	add    esp,0x20
c001dce9:	83 ec 0c             	sub    esp,0xc
c001dcec:	53                   	push   ebx
c001dced:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dcf0:	83 c4 0c             	add    esp,0xc
c001dcf3:	6a 07                	push   0x7
c001dcf5:	6a 00                	push   0x0
c001dcf7:	53                   	push   ebx
c001dcf8:	e8 95 fa ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001dcfd:	83 c4 0c             	add    esp,0xc
c001dd00:	6a 07                	push   0x7
c001dd02:	6a 01                	push   0x1
c001dd04:	53                   	push   ebx
c001dd05:	e8 88 fa ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001dd0a:	83 c4 0c             	add    esp,0xc
c001dd0d:	6a 01                	push   0x1
c001dd0f:	6a 00                	push   0x0
c001dd11:	53                   	push   ebx
c001dd12:	e8 c3 fb ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001dd17:	83 c4 0c             	add    esp,0xc
c001dd1a:	6a 01                	push   0x1
c001dd1c:	6a 01                	push   0x1
c001dd1e:	53                   	push   ebx
c001dd1f:	e8 b6 fb ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001dd24:	83 c4 2c             	add    esp,0x2c
c001dd27:	31 c0                	xor    eax,eax
c001dd29:	5b                   	pop    ebx
c001dd2a:	5e                   	pop    esi
c001dd2b:	5f                   	pop    edi
c001dd2c:	5d                   	pop    ebp
c001dd2d:	c3                   	ret    

c001dd2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd2e:	55                   	push   ebp
c001dd2f:	57                   	push   edi
c001dd30:	56                   	push   esi
c001dd31:	53                   	push   ebx
c001dd32:	83 ec 1c             	sub    esp,0x1c
c001dd35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd3d:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd44:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd48:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd4c:	80 fa 03             	cmp    dl,0x3
c001dd4f:	77 5d                	ja     c001ddae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd59:	0f b6 db             	movzx  ebx,bl
c001dd5c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd5f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd63:	83 ca 80             	or     edx,0xffffff80
c001dd66:	0f b6 d2             	movzx  edx,dl
c001dd69:	52                   	push   edx
c001dd6a:	6a 0c                	push   0xc
c001dd6c:	53                   	push   ebx
c001dd6d:	56                   	push   esi
c001dd6e:	e8 5f f9 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd73:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd80:	0f b6 c0             	movzx  eax,al
c001dd83:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd9a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dda2:	83 c4 2c             	add    esp,0x2c
c001dda5:	5b                   	pop    ebx
c001dda6:	5e                   	pop    esi
c001dda7:	5f                   	pop    edi
c001dda8:	5d                   	pop    ebp
c001dda9:	e9 24 f9 ff ff       	jmp    c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddae:	3c 07                	cmp    al,0x7
c001ddb0:	77 10                	ja     c001ddc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ddb2:	0f b6 db             	movzx  ebx,bl
c001ddb5:	0f b6 d0             	movzx  edx,al
c001ddb8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ddc0:	eb 2d                	jmp    c001ddef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddc2:	3c 0d                	cmp    al,0xd
c001ddc4:	77 13                	ja     c001ddd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ddc6:	0f b6 db             	movzx  ebx,bl
c001ddc9:	0f b6 c0             	movzx  eax,al
c001ddcc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ddd3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ddd7:	eb 16                	jmp    c001ddef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddd9:	3c 15                	cmp    al,0x15
c001dddb:	77 14                	ja     c001ddf1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dddd:	0f b6 db             	movzx  ebx,bl
c001dde0:	0f b6 c0             	movzx  eax,al
c001dde3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ddeb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ddef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ddf1:	83 c4 1c             	add    esp,0x1c
c001ddf4:	5b                   	pop    ebx
c001ddf5:	5e                   	pop    esi
c001ddf6:	5f                   	pop    edi
c001ddf7:	5d                   	pop    ebp
c001ddf8:	c3                   	ret    
c001ddf9:	90                   	nop

c001ddfa <IDE::detect()>:
c001ddfa:	55                   	push   ebp
c001ddfb:	57                   	push   edi
c001ddfc:	56                   	push   esi
c001ddfd:	53                   	push   ebx
c001ddfe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de04:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de0b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de12:	0f 85 97 02 00 00    	jne    c001e0af <IDE::detect()+0x2b5>
c001de18:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de1f:	31 f6                	xor    esi,esi
c001de21:	31 ed                	xor    ebp,ebp
c001de23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de2b:	89 e8                	mov    eax,ebp
c001de2d:	c1 e0 06             	shl    eax,0x6
c001de30:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de38:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de40:	c1 e0 04             	shl    eax,0x4
c001de43:	83 c8 a0             	or     eax,0xffffffa0
c001de46:	0f b6 c0             	movzx  eax,al
c001de49:	50                   	push   eax
c001de4a:	6a 06                	push   0x6
c001de4c:	56                   	push   esi
c001de4d:	53                   	push   ebx
c001de4e:	e8 7f f8 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de53:	83 c4 0c             	add    esp,0xc
c001de56:	6a 0c                	push   0xc
c001de58:	56                   	push   esi
c001de59:	53                   	push   ebx
c001de5a:	e8 33 f9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001de5f:	83 c4 0c             	add    esp,0xc
c001de62:	6a 0c                	push   0xc
c001de64:	56                   	push   esi
c001de65:	53                   	push   ebx
c001de66:	e8 27 f9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001de6b:	83 c4 0c             	add    esp,0xc
c001de6e:	6a 0c                	push   0xc
c001de70:	56                   	push   esi
c001de71:	53                   	push   ebx
c001de72:	e8 1b f9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001de77:	83 c4 0c             	add    esp,0xc
c001de7a:	6a 0c                	push   0xc
c001de7c:	56                   	push   esi
c001de7d:	53                   	push   ebx
c001de7e:	e8 0f f9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001de83:	68 ec 00 00 00       	push   0xec
c001de88:	6a 07                	push   0x7
c001de8a:	56                   	push   esi
c001de8b:	53                   	push   ebx
c001de8c:	e8 41 f8 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de91:	83 c4 1c             	add    esp,0x1c
c001de94:	6a 0c                	push   0xc
c001de96:	56                   	push   esi
c001de97:	53                   	push   ebx
c001de98:	e8 f5 f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001de9d:	83 c4 0c             	add    esp,0xc
c001dea0:	6a 0c                	push   0xc
c001dea2:	56                   	push   esi
c001dea3:	53                   	push   ebx
c001dea4:	e8 e9 f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001dea9:	83 c4 0c             	add    esp,0xc
c001deac:	6a 0c                	push   0xc
c001deae:	56                   	push   esi
c001deaf:	53                   	push   ebx
c001deb0:	e8 dd f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001deb5:	83 c4 0c             	add    esp,0xc
c001deb8:	6a 0c                	push   0xc
c001deba:	56                   	push   esi
c001debb:	53                   	push   ebx
c001debc:	e8 d1 f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001dec1:	83 c4 0c             	add    esp,0xc
c001dec4:	6a 0c                	push   0xc
c001dec6:	56                   	push   esi
c001dec7:	53                   	push   ebx
c001dec8:	e8 c5 f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	84 c0                	test   al,al
c001ded2:	0f 84 5f 01 00 00    	je     c001e037 <IDE::detect()+0x23d>
c001ded8:	31 ff                	xor    edi,edi
c001deda:	50                   	push   eax
c001dedb:	6a 0c                	push   0xc
c001dedd:	56                   	push   esi
c001dede:	53                   	push   ebx
c001dedf:	e8 ae f8 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001dee4:	83 c4 10             	add    esp,0x10
c001dee7:	a8 01                	test   al,0x1
c001dee9:	0f 85 69 01 00 00    	jne    c001e058 <IDE::detect()+0x25e>
c001deef:	84 c0                	test   al,al
c001def1:	78 04                	js     c001def7 <IDE::detect()+0xfd>
c001def3:	a8 08                	test   al,0x8
c001def5:	75 23                	jne    c001df1a <IDE::detect()+0x120>
c001def7:	47                   	inc    edi
c001def8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001defe:	7e da                	jle    c001deda <IDE::detect()+0xe0>
c001df00:	83 ec 0c             	sub    esp,0xc
c001df03:	6a 32                	push   0x32
c001df05:	e8 e6 a2 ff ff       	call   c00181f0 <milliTenthSleep(unsigned int)>
c001df0a:	83 c4 10             	add    esp,0x10
c001df0d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df13:	75 c5                	jne    c001deda <IDE::detect()+0xe0>
c001df15:	e9 3e 01 00 00       	jmp    c001e058 <IDE::detect()+0x25e>
c001df1a:	31 c9                	xor    ecx,ecx
c001df1c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df20:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	68 80 00 00 00       	push   0x80
c001df2c:	57                   	push   edi
c001df2d:	6a 00                	push   0x0
c001df2f:	56                   	push   esi
c001df30:	53                   	push   ebx
c001df31:	e8 f8 fd ff ff       	call   c001dd2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df36:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df3b:	89 e8                	mov    eax,ebp
c001df3d:	89 d1                	mov    ecx,edx
c001df3f:	c1 e0 06             	shl    eax,0x6
c001df42:	01 d8                	add    eax,ebx
c001df44:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df4b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df52:	89 f2                	mov    edx,esi
c001df54:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df5a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df5e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df68:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df6f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df77:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df7e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df86:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df8c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df93:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001df99:	8d 54 24 58          	lea    edx,[esp+0x58]
c001df9d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfa1:	83 c4 20             	add    esp,0x20
c001dfa4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dfa7:	83 c0 02             	add    eax,0x2
c001dfaa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dfb0:	83 c7 02             	add    edi,0x2
c001dfb3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dfb6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dfbc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dfc0:	75 e2                	jne    c001dfa4 <IDE::detect()+0x1aa>
c001dfc2:	89 e8                	mov    eax,ebp
c001dfc4:	c1 e0 06             	shl    eax,0x6
c001dfc7:	01 d8                	add    eax,ebx
c001dfc9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dfcf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dfd6:	66 c1 ea 09          	shr    dx,0x9
c001dfda:	83 e2 01             	and    edx,0x1
c001dfdd:	84 c9                	test   cl,cl
c001dfdf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dfe5:	75 22                	jne    c001e009 <IDE::detect()+0x20f>
c001dfe7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dfee:	74 46                	je     c001e036 <IDE::detect()+0x23c>
c001dff0:	83 ec 0c             	sub    esp,0xc
c001dff3:	68 7c 01 00 00       	push   0x17c
c001dff8:	e8 c6 b9 fe ff       	call   c00099c3 <malloc>
c001dffd:	89 c7                	mov    edi,eax
c001dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c001e002:	e8 13 05 00 00       	call   c001e51a <ATA::ATA()>
c001e007:	eb 17                	jmp    c001e020 <IDE::detect()+0x226>
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	68 80 01 00 00       	push   0x180
c001e011:	e8 ad b9 fe ff       	call   c00099c3 <malloc>
c001e016:	89 c7                	mov    edi,eax
c001e018:	89 04 24             	mov    DWORD PTR [esp],eax
c001e01b:	e8 82 0b 00 00       	call   c001eba2 <ATAPI::ATAPI()>
c001e020:	5a                   	pop    edx
c001e021:	59                   	pop    ecx
c001e022:	57                   	push   edi
c001e023:	53                   	push   ebx
c001e024:	e8 81 fe fe ff       	call   c000deaa <Device::addChild(Device*)>
c001e029:	8b 07                	mov    eax,DWORD PTR [edi]
c001e02b:	53                   	push   ebx
c001e02c:	55                   	push   ebp
c001e02d:	6a 00                	push   0x0
c001e02f:	57                   	push   edi
c001e030:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e033:	83 c4 20             	add    esp,0x20
c001e036:	45                   	inc    ebp
c001e037:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e03c:	74 0d                	je     c001e04b <IDE::detect()+0x251>
c001e03e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e046:	e9 e0 fd ff ff       	jmp    c001de2b <IDE::detect()+0x31>
c001e04b:	4e                   	dec    esi
c001e04c:	74 61                	je     c001e0af <IDE::detect()+0x2b5>
c001e04e:	be 01 00 00 00       	mov    esi,0x1
c001e053:	e9 cb fd ff ff       	jmp    c001de23 <IDE::detect()+0x29>
c001e058:	50                   	push   eax
c001e059:	6a 04                	push   0x4
c001e05b:	56                   	push   esi
c001e05c:	53                   	push   ebx
c001e05d:	e8 30 f7 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e062:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e066:	83 c4 0c             	add    esp,0xc
c001e069:	6a 05                	push   0x5
c001e06b:	56                   	push   esi
c001e06c:	53                   	push   ebx
c001e06d:	e8 20 f7 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e079:	80 fa 14             	cmp    dl,0x14
c001e07c:	75 04                	jne    c001e082 <IDE::detect()+0x288>
c001e07e:	3c eb                	cmp    al,0xeb
c001e080:	eb 07                	jmp    c001e089 <IDE::detect()+0x28f>
c001e082:	3c 96                	cmp    al,0x96
c001e084:	75 b1                	jne    c001e037 <IDE::detect()+0x23d>
c001e086:	80 fa 69             	cmp    dl,0x69
c001e089:	75 ac                	jne    c001e037 <IDE::detect()+0x23d>
c001e08b:	68 a1 00 00 00       	push   0xa1
c001e090:	6a 07                	push   0x7
c001e092:	56                   	push   esi
c001e093:	53                   	push   ebx
c001e094:	e8 39 f6 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e099:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e0a0:	e8 4b a1 ff ff       	call   c00181f0 <milliTenthSleep(unsigned int)>
c001e0a5:	83 c4 10             	add    esp,0x10
c001e0a8:	b1 01                	mov    cl,0x1
c001e0aa:	e9 6d fe ff ff       	jmp    c001df1c <IDE::detect()+0x122>
c001e0af:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e0b5:	5b                   	pop    ebx
c001e0b6:	5e                   	pop    esi
c001e0b7:	5f                   	pop    edi
c001e0b8:	5d                   	pop    ebp
c001e0b9:	c3                   	ret    

c001e0ba <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e0ba:	55                   	push   ebp
c001e0bb:	57                   	push   edi
c001e0bc:	56                   	push   esi
c001e0bd:	53                   	push   ebx
c001e0be:	83 ec 1c             	sub    esp,0x1c
c001e0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0d1:	88 c3                	mov    bl,al
c001e0d3:	84 c0                	test   al,al
c001e0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0d9:	0f 84 81 00 00 00    	je     c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0df:	83 ec 0c             	sub    esp,0xc
c001e0e2:	68 07 50 02 c0       	push   0xc0025007
c001e0e7:	e8 78 e9 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e0ec:	83 c4 10             	add    esp,0x10
c001e0ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0f3:	3c 01                	cmp    al,0x1
c001e0f5:	74 63                	je     c001e15a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e0f7:	3c 02                	cmp    al,0x2
c001e0f9:	75 53                	jne    c001e14e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e0fb:	d1 e6                	shl    esi,1
c001e0fd:	09 ee                	or     esi,ebp
c001e0ff:	50                   	push   eax
c001e100:	89 f0                	mov    eax,esi
c001e102:	6a 01                	push   0x1
c001e104:	0f b6 f0             	movzx  esi,al
c001e107:	c1 e6 06             	shl    esi,0x6
c001e10a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e112:	50                   	push   eax
c001e113:	57                   	push   edi
c001e114:	e8 79 f6 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	a8 01                	test   al,0x1
c001e11e:	74 02                	je     c001e122 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e120:	b3 07                	mov    bl,0x7
c001e122:	a8 02                	test   al,0x2
c001e124:	74 02                	je     c001e128 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e126:	b3 03                	mov    bl,0x3
c001e128:	a8 04                	test   al,0x4
c001e12a:	74 02                	je     c001e12e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e12c:	b3 14                	mov    bl,0x14
c001e12e:	a8 08                	test   al,0x8
c001e130:	74 02                	je     c001e134 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e132:	b3 03                	mov    bl,0x3
c001e134:	a8 10                	test   al,0x10
c001e136:	74 02                	je     c001e13a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e138:	b3 15                	mov    bl,0x15
c001e13a:	a8 20                	test   al,0x20
c001e13c:	74 02                	je     c001e140 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e13e:	b3 03                	mov    bl,0x3
c001e140:	a8 40                	test   al,0x40
c001e142:	74 02                	je     c001e146 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e144:	b3 16                	mov    bl,0x16
c001e146:	84 c0                	test   al,al
c001e148:	79 16                	jns    c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e14a:	b3 0d                	mov    bl,0xd
c001e14c:	eb 12                	jmp    c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e14e:	3c 03                	cmp    al,0x3
c001e150:	74 0c                	je     c001e15e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e152:	3c 04                	cmp    al,0x4
c001e154:	75 0a                	jne    c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e156:	b3 08                	mov    bl,0x8
c001e158:	eb 06                	jmp    c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15a:	b3 13                	mov    bl,0x13
c001e15c:	eb 02                	jmp    c001e160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15e:	b3 17                	mov    bl,0x17
c001e160:	83 c4 1c             	add    esp,0x1c
c001e163:	88 d8                	mov    al,bl
c001e165:	5b                   	pop    ebx
c001e166:	5e                   	pop    esi
c001e167:	5f                   	pop    edi
c001e168:	5d                   	pop    ebp
c001e169:	c3                   	ret    

c001e16a <IDE::polling(unsigned char, unsigned int)>:
c001e16a:	57                   	push   edi
c001e16b:	56                   	push   esi
c001e16c:	53                   	push   ebx
c001e16d:	bb 04 00 00 00       	mov    ebx,0x4
c001e172:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e176:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e17b:	52                   	push   edx
c001e17c:	6a 0c                	push   0xc
c001e17e:	56                   	push   esi
c001e17f:	57                   	push   edi
c001e180:	e8 0d f6 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e185:	83 c4 10             	add    esp,0x10
c001e188:	4b                   	dec    ebx
c001e189:	75 f0                	jne    c001e17b <IDE::polling(unsigned char, unsigned int)+0x11>
c001e18b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e190:	50                   	push   eax
c001e191:	6a 0c                	push   0xc
c001e193:	56                   	push   esi
c001e194:	57                   	push   edi
c001e195:	e8 f8 f5 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e19a:	83 c4 10             	add    esp,0x10
c001e19d:	a8 01                	test   al,0x1
c001e19f:	75 17                	jne    c001e1b8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1a1:	a8 20                	test   al,0x20
c001e1a3:	75 0f                	jne    c001e1b4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e1a5:	4b                   	dec    ebx
c001e1a6:	74 10                	je     c001e1b8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1a8:	84 c0                	test   al,al
c001e1aa:	78 e4                	js     c001e190 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1ac:	a8 08                	test   al,0x8
c001e1ae:	74 e0                	je     c001e190 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1b0:	31 c0                	xor    eax,eax
c001e1b2:	eb 06                	jmp    c001e1ba <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1b4:	b0 01                	mov    al,0x1
c001e1b6:	eb 02                	jmp    c001e1ba <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1b8:	b0 02                	mov    al,0x2
c001e1ba:	5b                   	pop    ebx
c001e1bb:	5e                   	pop    esi
c001e1bc:	5f                   	pop    edi
c001e1bd:	c3                   	ret    

c001e1be <SATABus::close(int, int, void*)>:
c001e1be:	31 c0                	xor    eax,eax
c001e1c0:	c3                   	ret    
c001e1c1:	90                   	nop

c001e1c2 <SATABus::detect()>:
c001e1c2:	c3                   	ret    
c001e1c3:	90                   	nop

c001e1c4 <SATABus::SATABus()>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cb:	83 ec 08             	sub    esp,0x8
c001e1ce:	68 40 50 02 c0       	push   0xc0025040
c001e1d3:	50                   	push   eax
c001e1d4:	e8 7f 00 ff ff       	call   c000e258 <HardDiskController::HardDiskController(char const*)>
c001e1d9:	83 c4 10             	add    esp,0x10
c001e1dc:	ba 94 50 02 c0       	mov    edx,0xc0025094
c001e1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e5:	89 10                	mov    DWORD PTR [eax],edx
c001e1e7:	83 ec 0c             	sub    esp,0xc
c001e1ea:	6a 50                	push   0x50
c001e1ec:	e8 01 bd fe ff       	call   c0009ef2 <Phys::allocateContiguousPages(int)>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	89 c2                	mov    edx,eax
c001e1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	6a 50                	push   0x50
c001e205:	e8 7f d4 fe ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	89 c2                	mov    edx,eax
c001e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e213:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e219:	a1 50 65 02 c0       	mov    eax,ds:0xc0026550
c001e21e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e222:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e22c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	6a 03                	push   0x3
c001e237:	6a 50                	push   0x50
c001e239:	51                   	push   ecx
c001e23a:	52                   	push   edx
c001e23b:	50                   	push   eax
c001e23c:	e8 e5 dd fe ff       	call   c000c026 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e241:	83 c4 20             	add    esp,0x20
c001e244:	90                   	nop
c001e245:	83 c4 0c             	add    esp,0xc
c001e248:	c3                   	ret    
c001e249:	90                   	nop

c001e24a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e251:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e257:	09 c2                	or     edx,eax
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e263:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e265:	31 c0                	xor    eax,eax
c001e267:	c1 e9 08             	shr    ecx,0x8
c001e26a:	83 e1 0f             	and    ecx,0xf
c001e26d:	39 c8                	cmp    eax,ecx
c001e26f:	74 0a                	je     c001e27b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e271:	f6 c2 01             	test   dl,0x1
c001e274:	74 18                	je     c001e28e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e276:	d1 ea                	shr    edx,1
c001e278:	40                   	inc    eax
c001e279:	eb f2                	jmp    c001e26d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e27b:	83 ec 0c             	sub    esp,0xc
c001e27e:	68 64 50 02 c0       	push   0xc0025064
c001e283:	e8 9d 60 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001e288:	83 c4 10             	add    esp,0x10
c001e28b:	83 c8 ff             	or     eax,0xffffffff
c001e28e:	83 c4 0c             	add    esp,0xc
c001e291:	c3                   	ret    

c001e292 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e292:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e296:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e299:	89 c2                	mov    edx,eax
c001e29b:	c1 ea 08             	shr    edx,0x8
c001e29e:	83 e2 0f             	and    edx,0xf
c001e2a1:	fe ca                	dec    dl
c001e2a3:	75 31                	jne    c001e2d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2a5:	83 e0 0f             	and    eax,0xf
c001e2a8:	3c 03                	cmp    al,0x3
c001e2aa:	75 2a                	jne    c001e2d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2ac:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e2af:	b8 02 00 00 00       	mov    eax,0x2
c001e2b4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e2ba:	74 1c                	je     c001e2d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2bc:	b8 04 00 00 00       	mov    eax,0x4
c001e2c1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e2c7:	74 0f                	je     c001e2d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2c9:	31 c0                	xor    eax,eax
c001e2cb:	83 fa 03             	cmp    edx,0x3
c001e2ce:	0f 94 c0             	sete   al
c001e2d1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e2d5:	c3                   	ret    
c001e2d6:	31 c0                	xor    eax,eax
c001e2d8:	c3                   	ret    
c001e2d9:	90                   	nop

c001e2da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2e1:	0f ba e2 0f          	bt     edx,0xf
c001e2e5:	72 f7                	jb     c001e2de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e2e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2ea:	83 ca 10             	or     edx,0x10
c001e2ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2f3:	83 ca 01             	or     edx,0x1
c001e2f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f9:	c3                   	ret    

c001e2fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e301:	83 e2 fe             	and    edx,0xfffffffe
c001e304:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e307:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e30a:	83 e2 ef             	and    edx,0xffffffef
c001e30d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e310:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e313:	0f ba e2 0e          	bt     edx,0xe
c001e317:	72 f7                	jb     c001e310 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e319:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e31c:	0f ba e2 0f          	bt     edx,0xf
c001e320:	72 ee                	jb     c001e310 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e322:	c3                   	ret    
c001e323:	90                   	nop

c001e324 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e324:	55                   	push   ebp
c001e325:	57                   	push   edi
c001e326:	56                   	push   esi
c001e327:	53                   	push   ebx
c001e328:	83 ec 1c             	sub    esp,0x1c
c001e32b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e32f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e333:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e337:	53                   	push   ebx
c001e338:	89 fd                	mov    ebp,edi
c001e33a:	56                   	push   esi
c001e33b:	c1 e5 0a             	shl    ebp,0xa
c001e33e:	e8 b7 ff ff ff       	call   c001e2fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e343:	83 ec 0c             	sub    esp,0xc
c001e346:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e34c:	01 e8                	add    eax,ebp
c001e34e:	89 03                	mov    DWORD PTR [ebx],eax
c001e350:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e352:	68 00 04 00 00       	push   0x400
c001e357:	6a 00                	push   0x0
c001e359:	50                   	push   eax
c001e35a:	e8 25 23 fe ff       	call   c0000684 <memset>
c001e35f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e365:	89 fa                	mov    edx,edi
c001e367:	01 e8                	add    eax,ebp
c001e369:	c1 e7 0d             	shl    edi,0xd
c001e36c:	89 03                	mov    DWORD PTR [ebx],eax
c001e36e:	c1 e2 08             	shl    edx,0x8
c001e371:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e378:	81 c2 00 80 00 00    	add    edx,0x8000
c001e37e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e382:	89 d0                	mov    eax,edx
c001e384:	83 c4 1c             	add    esp,0x1c
c001e387:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e38d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e390:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e393:	68 00 01 00 00       	push   0x100
c001e398:	6a 00                	push   0x0
c001e39a:	50                   	push   eax
c001e39b:	e8 e4 22 fe ff       	call   c0000684 <memset>
c001e3a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3a4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e3aa:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e3b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3b4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e3c1:	31 ff                	xor    edi,edi
c001e3c3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e3c9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e3cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3d3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3d9:	83 c5 20             	add    ebp,0x20
c001e3dc:	01 f8                	add    eax,edi
c001e3de:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3e1:	52                   	push   edx
c001e3e2:	68 00 01 00 00       	push   0x100
c001e3e7:	6a 00                	push   0x0
c001e3e9:	50                   	push   eax
c001e3ea:	e8 95 22 fe ff       	call   c0000684 <memset>
c001e3ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3f3:	83 c4 10             	add    esp,0x10
c001e3f6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e3fc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e403:	01 f8                	add    eax,edi
c001e405:	81 c7 00 01 00 00    	add    edi,0x100
c001e40b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e40e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e414:	75 b3                	jne    c001e3c9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e416:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e41a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e41e:	83 c4 1c             	add    esp,0x1c
c001e421:	5b                   	pop    ebx
c001e422:	5e                   	pop    esi
c001e423:	5f                   	pop    edi
c001e424:	5d                   	pop    ebp
c001e425:	e9 b0 fe ff ff       	jmp    c001e2da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e42a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e42a:	55                   	push   ebp
c001e42b:	57                   	push   edi
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	31 db                	xor    ebx,ebx
c001e430:	83 ec 0c             	sub    esp,0xc
c001e433:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e437:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e43b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e43e:	f7 c7 01 00 00 00    	test   edi,0x1
c001e444:	74 7a                	je     c001e4c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e446:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e44a:	89 d8                	mov    eax,ebx
c001e44c:	c1 e0 07             	shl    eax,0x7
c001e44f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e456:	55                   	push   ebp
c001e457:	56                   	push   esi
c001e458:	e8 35 fe ff ff       	call   c001e292 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e45d:	5a                   	pop    edx
c001e45e:	83 f8 01             	cmp    eax,0x1
c001e461:	59                   	pop    ecx
c001e462:	75 21                	jne    c001e485 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e464:	50                   	push   eax
c001e465:	53                   	push   ebx
c001e466:	55                   	push   ebp
c001e467:	56                   	push   esi
c001e468:	e8 b7 fe ff ff       	call   c001e324 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e46d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e474:	e8 4a b5 fe ff       	call   c00099c3 <malloc>
c001e479:	89 c5                	mov    ebp,eax
c001e47b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e47e:	e8 7f 0d 00 00       	call   c001f202 <SATA::SATA()>
c001e483:	eb 24                	jmp    c001e4a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e485:	83 f8 04             	cmp    eax,0x4
c001e488:	75 36                	jne    c001e4c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e48a:	51                   	push   ecx
c001e48b:	53                   	push   ebx
c001e48c:	55                   	push   ebp
c001e48d:	56                   	push   esi
c001e48e:	e8 91 fe ff ff       	call   c001e324 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e493:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e49a:	e8 24 b5 fe ff       	call   c00099c3 <malloc>
c001e49f:	89 c5                	mov    ebp,eax
c001e4a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4a4:	e8 cf 10 00 00       	call   c001f578 <SATAPI::SATAPI()>
c001e4a9:	58                   	pop    eax
c001e4aa:	5a                   	pop    edx
c001e4ab:	55                   	push   ebp
c001e4ac:	56                   	push   esi
c001e4ad:	e8 f8 f9 fe ff       	call   c000deaa <Device::addChild(Device*)>
c001e4b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e4b5:	56                   	push   esi
c001e4b6:	6a 00                	push   0x0
c001e4b8:	53                   	push   ebx
c001e4b9:	55                   	push   ebp
c001e4ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e4bd:	83 c4 20             	add    esp,0x20
c001e4c0:	d1 ef                	shr    edi,1
c001e4c2:	43                   	inc    ebx
c001e4c3:	83 fb 20             	cmp    ebx,0x20
c001e4c6:	0f 85 72 ff ff ff    	jne    c001e43e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e4cc:	83 c4 0c             	add    esp,0xc
c001e4cf:	5b                   	pop    ebx
c001e4d0:	5e                   	pop    esi
c001e4d1:	5f                   	pop    edi
c001e4d2:	5d                   	pop    ebp
c001e4d3:	c3                   	ret    

c001e4d4 <SATABus::open(int, int, void*)>:
c001e4d4:	83 ec 14             	sub    esp,0x14
c001e4d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e4db:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e4e1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4e7:	52                   	push   edx
c001e4e8:	50                   	push   eax
c001e4e9:	e8 3c ff ff ff       	call   c001e42a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e4ee:	31 c0                	xor    eax,eax
c001e4f0:	83 c4 1c             	add    esp,0x1c
c001e4f3:	c3                   	ret    

c001e4f4 <ATA::close(int, int, void*)>:
c001e4f4:	83 ec 0c             	sub    esp,0xc
c001e4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e501:	85 c0                	test   eax,eax
c001e503:	74 0c                	je     c001e511 <ATA::close(int, int, void*)+0x1d>
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	8b 10                	mov    edx,DWORD PTR [eax]
c001e50a:	50                   	push   eax
c001e50b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	31 c0                	xor    eax,eax
c001e513:	83 c4 0c             	add    esp,0xc
c001e516:	c3                   	ret    
c001e517:	90                   	nop

c001e518 <ATA::powerSaving(PowerSavingLevel)>:
c001e518:	c3                   	ret    
c001e519:	90                   	nop

c001e51a <ATA::ATA()>:
c001e51a:	83 ec 0c             	sub    esp,0xc
c001e51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e521:	83 ec 04             	sub    esp,0x4
c001e524:	68 00 02 00 00       	push   0x200
c001e529:	68 89 51 02 c0       	push   0xc0025189
c001e52e:	50                   	push   eax
c001e52f:	e8 ae fd fe ff       	call   c000e2e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e534:	83 c4 10             	add    esp,0x10
c001e537:	ba 0c 51 02 c0       	mov    edx,0xc002510c
c001e53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e540:	89 10                	mov    DWORD PTR [eax],edx
c001e542:	90                   	nop
c001e543:	83 c4 0c             	add    esp,0xc
c001e546:	c3                   	ret    
c001e547:	90                   	nop

c001e548 <ATA::flush(bool)>:
c001e548:	53                   	push   ebx
c001e549:	83 ec 08             	sub    esp,0x8
c001e54c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e555:	19 c0                	sbb    eax,eax
c001e557:	83 e0 fd             	and    eax,0xfffffffd
c001e55a:	05 ea 00 00 00       	add    eax,0xea
c001e55f:	50                   	push   eax
c001e560:	6a 07                	push   0x7
c001e562:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e569:	50                   	push   eax
c001e56a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e570:	e8 5d f1 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e575:	83 c4 0c             	add    esp,0xc
c001e578:	6a 00                	push   0x0
c001e57a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e581:	50                   	push   eax
c001e582:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e588:	e8 dd fb ff ff       	call   c001e16a <IDE::polling(unsigned char, unsigned int)>
c001e58d:	83 c4 18             	add    esp,0x18
c001e590:	5b                   	pop    ebx
c001e591:	c3                   	ret    

c001e592 <ATA::readyForCommand()>:
c001e592:	56                   	push   esi
c001e593:	53                   	push   ebx
c001e594:	53                   	push   ebx
c001e595:	31 db                	xor    ebx,ebx
c001e597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e59b:	51                   	push   ecx
c001e59c:	6a 0c                	push   0xc
c001e59e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5a5:	50                   	push   eax
c001e5a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5ac:	e8 e1 f1 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	a8 88                	test   al,0x88
c001e5b6:	74 1f                	je     c001e5d7 <ATA::readyForCommand()+0x45>
c001e5b8:	43                   	inc    ebx
c001e5b9:	83 fb 63             	cmp    ebx,0x63
c001e5bc:	7e dd                	jle    c001e59b <ATA::readyForCommand()+0x9>
c001e5be:	83 ec 0c             	sub    esp,0xc
c001e5c1:	6a 0a                	push   0xa
c001e5c3:	e8 28 9c ff ff       	call   c00181f0 <milliTenthSleep(unsigned int)>
c001e5c8:	83 c4 10             	add    esp,0x10
c001e5cb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e5d1:	75 c8                	jne    c001e59b <ATA::readyForCommand()+0x9>
c001e5d3:	31 c0                	xor    eax,eax
c001e5d5:	eb 02                	jmp    c001e5d9 <ATA::readyForCommand()+0x47>
c001e5d7:	b0 01                	mov    al,0x1
c001e5d9:	5a                   	pop    edx
c001e5da:	5b                   	pop    ebx
c001e5db:	5e                   	pop    esi
c001e5dc:	c3                   	ret    
c001e5dd:	90                   	nop

c001e5de <ATA::access(unsigned long long, int, void*, bool)>:
c001e5de:	55                   	push   ebp
c001e5df:	57                   	push   edi
c001e5e0:	56                   	push   esi
c001e5e1:	53                   	push   ebx
c001e5e2:	83 ec 38             	sub    esp,0x38
c001e5e5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e5e9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e5ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e5f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e5f5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e5f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e5fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e601:	68 b8 50 02 c0       	push   0xc00250b8
c001e606:	e8 59 e4 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e60b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e611:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e61e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e622:	c1 e0 06             	shl    eax,0x6
c001e625:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e62d:	74 5d                	je     c001e68c <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e62f:	89 fa                	mov    edx,edi
c001e631:	89 f0                	mov    eax,esi
c001e633:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e637:	c1 ea 1c             	shr    edx,0x1c
c001e63a:	89 d1                	mov    ecx,edx
c001e63c:	09 c1                	or     ecx,eax
c001e63e:	74 25                	je     c001e665 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e640:	31 ed                	xor    ebp,ebp
c001e642:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e649:	89 fa                	mov    edx,edi
c001e64b:	89 f0                	mov    eax,esi
c001e64d:	0f ad d0             	shrd   eax,edx,cl
c001e650:	d3 ea                	shr    edx,cl
c001e652:	f6 c1 20             	test   cl,0x20
c001e655:	74 02                	je     c001e659 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e657:	89 d0                	mov    eax,edx
c001e659:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e65d:	45                   	inc    ebp
c001e65e:	83 fd 06             	cmp    ebp,0x6
c001e661:	75 df                	jne    c001e642 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e663:	eb 76                	jmp    c001e6db <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e665:	89 f0                	mov    eax,esi
c001e667:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e66c:	89 fa                	mov    edx,edi
c001e66e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e675:	0f ac d0 10          	shrd   eax,edx,0x10
c001e679:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e67e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e682:	c1 ee 18             	shr    esi,0x18
c001e685:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e68a:	eb 56                	jmp    c001e6e2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e68c:	6a 00                	push   0x0
c001e68e:	6a 3f                	push   0x3f
c001e690:	57                   	push   edi
c001e691:	56                   	push   esi
c001e692:	e8 8d 29 00 00       	call   c0021024 <__umoddi3>
c001e697:	83 c4 10             	add    esp,0x10
c001e69a:	40                   	inc    eax
c001e69b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e69f:	6a 00                	push   0x0
c001e6a1:	68 f0 03 00 00       	push   0x3f0
c001e6a6:	57                   	push   edi
c001e6a7:	56                   	push   esi
c001e6a8:	e8 77 28 00 00       	call   c0020f24 <__udivdi3>
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e6b5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6bc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6c1:	6a 00                	push   0x0
c001e6c3:	6a 3f                	push   0x3f
c001e6c5:	57                   	push   edi
c001e6c6:	56                   	push   esi
c001e6c7:	e8 58 28 00 00       	call   c0020f24 <__udivdi3>
c001e6cc:	83 c4 10             	add    esp,0x10
c001e6cf:	89 c6                	mov    esi,eax
c001e6d1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e6d6:	83 e6 0f             	and    esi,0xf
c001e6d9:	eb 07                	jmp    c001e6e2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6db:	31 f6                	xor    esi,esi
c001e6dd:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e6e2:	bf 01 00 00 00       	mov    edi,0x1
c001e6e7:	50                   	push   eax
c001e6e8:	6a 00                	push   0x0
c001e6ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6f1:	50                   	push   eax
c001e6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e6f6:	e8 df f1 ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001e6fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6fe:	e8 8f fe ff ff       	call   c001e592 <ATA::readyForCommand()>
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	84 c0                	test   al,al
c001e708:	0f 84 bc 02 00 00    	je     c001e9ca <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e70e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e714:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e71a:	c1 e0 04             	shl    eax,0x4
c001e71d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e724:	09 c6                	or     esi,eax
c001e726:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e72b:	75 05                	jne    c001e732 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e72d:	83 ce a0             	or     esi,0xffffffa0
c001e730:	eb 03                	jmp    c001e735 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e732:	83 ce e0             	or     esi,0xffffffe0
c001e735:	89 f0                	mov    eax,esi
c001e737:	0f b6 f0             	movzx  esi,al
c001e73a:	56                   	push   esi
c001e73b:	6a 06                	push   0x6
c001e73d:	51                   	push   ecx
c001e73e:	52                   	push   edx
c001e73f:	e8 8e ef ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e744:	83 c4 10             	add    esp,0x10
c001e747:	6a 00                	push   0x0
c001e749:	6a 01                	push   0x1
c001e74b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e752:	50                   	push   eax
c001e753:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e759:	e8 74 ef ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75e:	83 c4 10             	add    esp,0x10
c001e761:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e766:	75 6e                	jne    c001e7d6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e768:	6a 00                	push   0x0
c001e76a:	6a 08                	push   0x8
c001e76c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e773:	50                   	push   eax
c001e774:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e77a:	e8 53 ef ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e77f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e784:	50                   	push   eax
c001e785:	6a 09                	push   0x9
c001e787:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e78e:	50                   	push   eax
c001e78f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e795:	e8 38 ef ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e79a:	83 c4 20             	add    esp,0x20
c001e79d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7a2:	50                   	push   eax
c001e7a3:	6a 0a                	push   0xa
c001e7a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ac:	50                   	push   eax
c001e7ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b3:	e8 1a ef ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7b8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e7bd:	50                   	push   eax
c001e7be:	6a 0b                	push   0xb
c001e7c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c7:	50                   	push   eax
c001e7c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7ce:	e8 ff ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d3:	83 c4 20             	add    esp,0x20
c001e7d6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e7db:	50                   	push   eax
c001e7dc:	6a 02                	push   0x2
c001e7de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7e5:	50                   	push   eax
c001e7e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7ec:	e8 e1 ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e7f6:	50                   	push   eax
c001e7f7:	6a 03                	push   0x3
c001e7f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e800:	50                   	push   eax
c001e801:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e807:	e8 c6 ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e80c:	83 c4 20             	add    esp,0x20
c001e80f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e814:	50                   	push   eax
c001e815:	6a 04                	push   0x4
c001e817:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e81e:	50                   	push   eax
c001e81f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e825:	e8 a8 ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e82a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e82f:	50                   	push   eax
c001e830:	6a 05                	push   0x5
c001e832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e839:	50                   	push   eax
c001e83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e840:	e8 8d ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e845:	83 c4 20             	add    esp,0x20
c001e848:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e84d:	0f 94 c0             	sete   al
c001e850:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e855:	74 09                	je     c001e860 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e857:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e85e:	eb 07                	jmp    c001e867 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e860:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e867:	0f b6 c0             	movzx  eax,al
c001e86a:	50                   	push   eax
c001e86b:	6a 07                	push   0x7
c001e86d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e874:	50                   	push   eax
c001e875:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e87b:	e8 52 ee ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e880:	c7 04 24 c5 50 02 c0 	mov    DWORD PTR [esp],0xc00250c5
c001e887:	e8 d8 e1 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e88c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e890:	83 c4 10             	add    esp,0x10
c001e893:	85 f6                	test   esi,esi
c001e895:	0f 84 f7 00 00 00    	je     c001e992 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	68 c8 50 02 c0       	push   0xc00250c8
c001e8a3:	e8 bc e1 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e8a8:	83 c4 0c             	add    esp,0xc
c001e8ab:	6a 01                	push   0x1
c001e8ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b4:	50                   	push   eax
c001e8b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8bb:	e8 aa f8 ff ff       	call   c001e16a <IDE::polling(unsigned char, unsigned int)>
c001e8c0:	c7 04 24 cb 50 02 c0 	mov    DWORD PTR [esp],0xc00250cb
c001e8c7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8cb:	e8 94 e1 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8d7:	84 c0                	test   al,al
c001e8d9:	74 2b                	je     c001e906 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e8db:	0f b6 f8             	movzx  edi,al
c001e8de:	57                   	push   edi
c001e8df:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8e6:	50                   	push   eax
c001e8e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8ee:	50                   	push   eax
c001e8ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8f5:	e8 c0 f7 ff ff       	call   c001e0ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e8fa:	c7 04 24 ce 50 02 c0 	mov    DWORD PTR [esp],0xc00250ce
c001e901:	e9 bc 00 00 00       	jmp    c001e9c2 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e906:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e90b:	74 50                	je     c001e95d <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e90d:	83 ec 0c             	sub    esp,0xc
c001e910:	31 ed                	xor    ebp,ebp
c001e912:	68 d9 50 02 c0       	push   0xc00250d9
c001e917:	e8 48 e1 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e91c:	83 c4 10             	add    esp,0x10
c001e91f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e923:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e927:	50                   	push   eax
c001e928:	50                   	push   eax
c001e929:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e930:	50                   	push   eax
c001e931:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e937:	e8 84 ed ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001e93c:	89 c2                	mov    edx,eax
c001e93e:	89 f8                	mov    eax,edi
c001e940:	66 ef                	out    dx,ax
c001e942:	45                   	inc    ebp
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e94c:	75 d1                	jne    c001e91f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	68 dc 50 02 c0       	push   0xc00250dc
c001e956:	e8 09 e1 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e95b:	eb 24                	jmp    c001e981 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e95d:	51                   	push   ecx
c001e95e:	51                   	push   ecx
c001e95f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e966:	50                   	push   eax
c001e967:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e96d:	e8 4e ed ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001e972:	b9 00 01 00 00       	mov    ecx,0x100
c001e977:	89 c2                	mov    edx,eax
c001e979:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e97d:	fc                   	cld    
c001e97e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	4e                   	dec    esi
c001e985:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e98d:	e9 01 ff ff ff       	jmp    c001e893 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e992:	31 ff                	xor    edi,edi
c001e994:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e999:	74 2f                	je     c001e9ca <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	68 df 50 02 c0       	push   0xc00250df
c001e9a3:	e8 bc e0 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e9a8:	58                   	pop    eax
c001e9a9:	31 c0                	xor    eax,eax
c001e9ab:	5a                   	pop    edx
c001e9ac:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e9b1:	0f 94 c0             	sete   al
c001e9b4:	50                   	push   eax
c001e9b5:	53                   	push   ebx
c001e9b6:	e8 8d fb ff ff       	call   c001e548 <ATA::flush(bool)>
c001e9bb:	c7 04 24 e2 50 02 c0 	mov    DWORD PTR [esp],0xc00250e2
c001e9c2:	e8 9d e0 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	83 c4 2c             	add    esp,0x2c
c001e9cd:	89 f8                	mov    eax,edi
c001e9cf:	5b                   	pop    ebx
c001e9d0:	5e                   	pop    esi
c001e9d1:	5f                   	pop    edi
c001e9d2:	5d                   	pop    ebp
c001e9d3:	c3                   	ret    

c001e9d4 <ATA::read(unsigned long long, int, void*)>:
c001e9d4:	57                   	push   edi
c001e9d5:	b8 04 00 00 00       	mov    eax,0x4
c001e9da:	56                   	push   esi
c001e9db:	53                   	push   ebx
c001e9dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9e4:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e9f5:	77 25                	ja     c001ea1c <ATA::read(unsigned long long, int, void*)+0x48>
c001e9f7:	b8 06 00 00 00       	mov    eax,0x6
c001e9fc:	85 f6                	test   esi,esi
c001e9fe:	74 1c                	je     c001ea1c <ATA::read(unsigned long long, int, void*)+0x48>
c001ea00:	50                   	push   eax
c001ea01:	50                   	push   eax
c001ea02:	6a 00                	push   0x0
c001ea04:	56                   	push   esi
c001ea05:	52                   	push   edx
c001ea06:	53                   	push   ebx
c001ea07:	51                   	push   ecx
c001ea08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea0c:	e8 cd fb ff ff       	call   c001e5de <ATA::access(unsigned long long, int, void*, bool)>
c001ea11:	83 c4 20             	add    esp,0x20
c001ea14:	85 c0                	test   eax,eax
c001ea16:	0f 95 c0             	setne  al
c001ea19:	0f b6 c0             	movzx  eax,al
c001ea1c:	5b                   	pop    ebx
c001ea1d:	5e                   	pop    esi
c001ea1e:	5f                   	pop    edi
c001ea1f:	c3                   	ret    

c001ea20 <ATA::write(unsigned long long, int, void*)>:
c001ea20:	55                   	push   ebp
c001ea21:	57                   	push   edi
c001ea22:	56                   	push   esi
c001ea23:	53                   	push   ebx
c001ea24:	83 ec 18             	sub    esp,0x18
c001ea27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea33:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea37:	68 e5 50 02 c0       	push   0xc00250e5
c001ea3c:	e8 23 e0 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001ea41:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea44:	83 c4 10             	add    esp,0x10
c001ea47:	b8 04 00 00 00       	mov    eax,0x4
c001ea4c:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea52:	77 25                	ja     c001ea79 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea54:	b8 06 00 00 00       	mov    eax,0x6
c001ea59:	85 f6                	test   esi,esi
c001ea5b:	74 1c                	je     c001ea79 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea5d:	50                   	push   eax
c001ea5e:	50                   	push   eax
c001ea5f:	6a 01                	push   0x1
c001ea61:	56                   	push   esi
c001ea62:	53                   	push   ebx
c001ea63:	55                   	push   ebp
c001ea64:	57                   	push   edi
c001ea65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea69:	e8 70 fb ff ff       	call   c001e5de <ATA::access(unsigned long long, int, void*, bool)>
c001ea6e:	83 c4 20             	add    esp,0x20
c001ea71:	85 c0                	test   eax,eax
c001ea73:	0f 95 c0             	setne  al
c001ea76:	0f b6 c0             	movzx  eax,al
c001ea79:	83 c4 0c             	add    esp,0xc
c001ea7c:	5b                   	pop    ebx
c001ea7d:	5e                   	pop    esi
c001ea7e:	5f                   	pop    edi
c001ea7f:	5d                   	pop    ebp
c001ea80:	c3                   	ret    
c001ea81:	90                   	nop

c001ea82 <ATA::detectCHS()>:
c001ea82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea86:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea8c:	c1 e0 06             	shl    eax,0x6
c001ea8f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea95:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ea9f:	c7 44 24 04 f1 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250f1
c001eaa7:	e9 79 58 ff ff       	jmp    c0014325 <Krnl::panic(char const*)>

c001eaac <ATA::open(int, int, void*)>:
c001eaac:	53                   	push   ebx
c001eaad:	83 ec 08             	sub    esp,0x8
c001eab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eab4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eab8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eabc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eac2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eac8:	c1 e0 06             	shl    eax,0x6
c001eacb:	01 d0                	add    eax,edx
c001eacd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ead4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eada:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eae1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eaeb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eaf1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eaf8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eaff:	75 0c                	jne    c001eb0d <ATA::open(int, int, void*)+0x61>
c001eb01:	83 ec 0c             	sub    esp,0xc
c001eb04:	53                   	push   ebx
c001eb05:	e8 78 ff ff ff       	call   c001ea82 <ATA::detectCHS()>
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb13:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb19:	c1 e0 06             	shl    eax,0x6
c001eb1c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb23:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb2d:	d1 e8                	shr    eax,1
c001eb2f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb35:	6a 04                	push   0x4
c001eb37:	6a 0c                	push   0xc
c001eb39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb40:	50                   	push   eax
c001eb41:	52                   	push   edx
c001eb42:	e8 8b eb ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb47:	90                   	nop
c001eb48:	90                   	nop
c001eb49:	6a 00                	push   0x0
c001eb4b:	6a 0c                	push   0xc
c001eb4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb54:	50                   	push   eax
c001eb55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb5b:	e8 72 eb ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb60:	83 c4 14             	add    esp,0x14
c001eb63:	53                   	push   ebx
c001eb64:	e8 e1 f7 fe ff       	call   c000e34a <PhysicalDisk::startCache()>
c001eb69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb6c:	e8 15 18 ff ff       	call   c0010386 <createPartitionsForDisk(PhysicalDisk*)>
c001eb71:	31 c0                	xor    eax,eax
c001eb73:	83 c4 18             	add    esp,0x18
c001eb76:	5b                   	pop    ebx
c001eb77:	c3                   	ret    

c001eb78 <ATAPI::write(unsigned long long, int, void*)>:
c001eb78:	b8 03 00 00 00       	mov    eax,0x3
c001eb7d:	c3                   	ret    

c001eb7e <ATAPI::close(int, int, void*)>:
c001eb7e:	83 ec 0c             	sub    esp,0xc
c001eb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb8b:	85 c0                	test   eax,eax
c001eb8d:	74 0c                	je     c001eb9b <ATAPI::close(int, int, void*)+0x1d>
c001eb8f:	83 ec 0c             	sub    esp,0xc
c001eb92:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb94:	50                   	push   eax
c001eb95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb98:	83 c4 10             	add    esp,0x10
c001eb9b:	31 c0                	xor    eax,eax
c001eb9d:	83 c4 0c             	add    esp,0xc
c001eba0:	c3                   	ret    
c001eba1:	90                   	nop

c001eba2 <ATAPI::ATAPI()>:
c001eba2:	83 ec 0c             	sub    esp,0xc
c001eba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba9:	83 ec 04             	sub    esp,0x4
c001ebac:	68 00 08 00 00       	push   0x800
c001ebb1:	68 29 52 02 c0       	push   0xc0025229
c001ebb6:	50                   	push   eax
c001ebb7:	e8 26 f7 fe ff       	call   c000e2e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ebbc:	83 c4 10             	add    esp,0x10
c001ebbf:	ba 44 51 02 c0       	mov    edx,0xc0025144
c001ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc8:	89 10                	mov    DWORD PTR [eax],edx
c001ebca:	90                   	nop
c001ebcb:	83 c4 0c             	add    esp,0xc
c001ebce:	c3                   	ret    
c001ebcf:	90                   	nop

c001ebd0 <ATAPI::readyForCommand()>:
c001ebd0:	56                   	push   esi
c001ebd1:	53                   	push   ebx
c001ebd2:	53                   	push   ebx
c001ebd3:	31 db                	xor    ebx,ebx
c001ebd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebd9:	51                   	push   ecx
c001ebda:	6a 0c                	push   0xc
c001ebdc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ebe3:	50                   	push   eax
c001ebe4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ebea:	e8 a3 eb ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001ebef:	83 c4 10             	add    esp,0x10
c001ebf2:	a8 88                	test   al,0x88
c001ebf4:	74 1f                	je     c001ec15 <ATAPI::readyForCommand()+0x45>
c001ebf6:	43                   	inc    ebx
c001ebf7:	83 fb 63             	cmp    ebx,0x63
c001ebfa:	7e dd                	jle    c001ebd9 <ATAPI::readyForCommand()+0x9>
c001ebfc:	83 ec 0c             	sub    esp,0xc
c001ebff:	6a 0a                	push   0xa
c001ec01:	e8 ea 95 ff ff       	call   c00181f0 <milliTenthSleep(unsigned int)>
c001ec06:	83 c4 10             	add    esp,0x10
c001ec09:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec0f:	75 c8                	jne    c001ebd9 <ATAPI::readyForCommand()+0x9>
c001ec11:	31 c0                	xor    eax,eax
c001ec13:	eb 02                	jmp    c001ec17 <ATAPI::readyForCommand()+0x47>
c001ec15:	b0 01                	mov    al,0x1
c001ec17:	5a                   	pop    edx
c001ec18:	5b                   	pop    ebx
c001ec19:	5e                   	pop    esi
c001ec1a:	c3                   	ret    
c001ec1b:	90                   	nop

c001ec1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec1c:	55                   	push   ebp
c001ec1d:	57                   	push   edi
c001ec1e:	56                   	push   esi
c001ec1f:	53                   	push   ebx
c001ec20:	83 ec 20             	sub    esp,0x20
c001ec23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec27:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec2b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec33:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec37:	6a 01                	push   0x1
c001ec39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec40:	50                   	push   eax
c001ec41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec47:	e8 8e ec ff ff       	call   c001d8da <IDE::enableIRQs(unsigned char, bool)>
c001ec4c:	5e                   	pop    esi
c001ec4d:	58                   	pop    eax
c001ec4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec55:	50                   	push   eax
c001ec56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec5c:	e8 4b ea ff ff       	call   c001d6ac <IDE::prepareInterrupt(unsigned char)>
c001ec61:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec64:	e8 67 ff ff ff       	call   c001ebd0 <ATAPI::readyForCommand()>
c001ec69:	83 c4 10             	add    esp,0x10
c001ec6c:	84 c0                	test   al,al
c001ec6e:	75 0a                	jne    c001ec7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ec70:	bb 01 00 00 00       	mov    ebx,0x1
c001ec75:	e9 57 02 00 00       	jmp    c001eed1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec7a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec80:	c1 e0 04             	shl    eax,0x4
c001ec83:	0f b6 c0             	movzx  eax,al
c001ec86:	50                   	push   eax
c001ec87:	6a 06                	push   0x6
c001ec89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec90:	50                   	push   eax
c001ec91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec97:	e8 36 ea ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec9c:	6a 00                	push   0x0
c001ec9e:	6a 01                	push   0x1
c001eca0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eca7:	50                   	push   eax
c001eca8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecae:	e8 1f ea ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb3:	83 c4 20             	add    esp,0x20
c001ecb6:	0f b6 c3             	movzx  eax,bl
c001ecb9:	0f b6 df             	movzx  ebx,bh
c001ecbc:	50                   	push   eax
c001ecbd:	6a 04                	push   0x4
c001ecbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecc6:	50                   	push   eax
c001ecc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eccd:	e8 00 ea ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecd2:	53                   	push   ebx
c001ecd3:	6a 05                	push   0x5
c001ecd5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecdc:	50                   	push   eax
c001ecdd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ece3:	e8 ea e9 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece8:	83 c4 20             	add    esp,0x20
c001eceb:	68 a0 00 00 00       	push   0xa0
c001ecf0:	6a 07                	push   0x7
c001ecf2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecf9:	50                   	push   eax
c001ecfa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed00:	e8 cd e9 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed05:	83 c4 0c             	add    esp,0xc
c001ed08:	6a 01                	push   0x1
c001ed0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed11:	50                   	push   eax
c001ed12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed18:	e8 4d f4 ff ff       	call   c001e16a <IDE::polling(unsigned char, unsigned int)>
c001ed1d:	83 c4 10             	add    esp,0x10
c001ed20:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed26:	84 c0                	test   al,al
c001ed28:	74 23                	je     c001ed4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed2a:	0f b6 d8             	movzx  ebx,al
c001ed2d:	0f b6 d2             	movzx  edx,dl
c001ed30:	53                   	push   ebx
c001ed31:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed38:	50                   	push   eax
c001ed39:	52                   	push   edx
c001ed3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed40:	e8 75 f3 ff ff       	call   c001e0ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed45:	83 c4 10             	add    esp,0x10
c001ed48:	e9 84 01 00 00       	jmp    c001eed1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed4d:	0f b6 d2             	movzx  edx,dl
c001ed50:	53                   	push   ebx
c001ed51:	53                   	push   ebx
c001ed52:	52                   	push   edx
c001ed53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed59:	e8 62 e9 ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001ed5e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed62:	b9 06 00 00 00       	mov    ecx,0x6
c001ed67:	89 c2                	mov    edx,eax
c001ed69:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ed6c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed70:	83 c4 10             	add    esp,0x10
c001ed73:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed79:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed80:	85 db                	test   ebx,ebx
c001ed82:	0f 84 ec 00 00 00    	je     c001ee74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed88:	51                   	push   ecx
c001ed89:	51                   	push   ecx
c001ed8a:	52                   	push   edx
c001ed8b:	50                   	push   eax
c001ed8c:	e8 af ea ff ff       	call   c001d840 <IDE::waitInterrupt(unsigned char)>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	84 c0                	test   al,al
c001ed96:	0f 84 d4 fe ff ff    	je     c001ec70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ed9c:	56                   	push   esi
c001ed9d:	56                   	push   esi
c001ed9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eda5:	50                   	push   eax
c001eda6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edac:	e8 fb e8 ff ff       	call   c001d6ac <IDE::prepareInterrupt(unsigned char)>
c001edb1:	83 c4 0c             	add    esp,0xc
c001edb4:	6a 04                	push   0x4
c001edb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edbd:	50                   	push   eax
c001edbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edc4:	e8 c9 e9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001edc9:	83 c4 0c             	add    esp,0xc
c001edcc:	89 c6                	mov    esi,eax
c001edce:	6a 05                	push   0x5
c001edd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edd7:	50                   	push   eax
c001edd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edde:	e8 af e9 ff ff       	call   c001d792 <IDE::read(unsigned char, unsigned char)>
c001ede3:	89 f1                	mov    ecx,esi
c001ede5:	0f b6 c0             	movzx  eax,al
c001ede8:	0f b6 f1             	movzx  esi,cl
c001edeb:	c1 e0 08             	shl    eax,0x8
c001edee:	09 c6                	or     esi,eax
c001edf0:	d1 fe                	sar    esi,1
c001edf2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001edf6:	83 c4 10             	add    esp,0x10
c001edf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001edfe:	74 41                	je     c001ee41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee00:	31 c9                	xor    ecx,ecx
c001ee02:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee08:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee0f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee13:	75 0a                	jne    c001ee1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee15:	01 c9                	add    ecx,ecx
c001ee17:	01 cd                	add    ebp,ecx
c001ee19:	4b                   	dec    ebx
c001ee1a:	e9 54 ff ff ff       	jmp    c001ed73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee1f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee28:	51                   	push   ecx
c001ee29:	51                   	push   ecx
c001ee2a:	52                   	push   edx
c001ee2b:	50                   	push   eax
c001ee2c:	e8 8f e8 ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001ee31:	89 c2                	mov    edx,eax
c001ee33:	89 f0                	mov    eax,esi
c001ee35:	66 ef                	out    dx,ax
c001ee37:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee3b:	83 c4 10             	add    esp,0x10
c001ee3e:	41                   	inc    ecx
c001ee3f:	eb c1                	jmp    c001ee02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee41:	31 f6                	xor    esi,esi
c001ee43:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee49:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee50:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee54:	75 06                	jne    c001ee5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee56:	01 f6                	add    esi,esi
c001ee58:	01 f5                	add    ebp,esi
c001ee5a:	eb bd                	jmp    c001ee19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee5c:	51                   	push   ecx
c001ee5d:	51                   	push   ecx
c001ee5e:	52                   	push   edx
c001ee5f:	50                   	push   eax
c001ee60:	e8 5b e8 ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001ee65:	89 c2                	mov    edx,eax
c001ee67:	66 ed                	in     ax,dx
c001ee69:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ee6e:	83 c4 10             	add    esp,0x10
c001ee71:	46                   	inc    esi
c001ee72:	eb cf                	jmp    c001ee43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee74:	51                   	push   ecx
c001ee75:	51                   	push   ecx
c001ee76:	52                   	push   edx
c001ee77:	50                   	push   eax
c001ee78:	e8 c3 e9 ff ff       	call   c001d840 <IDE::waitInterrupt(unsigned char)>
c001ee7d:	83 c4 10             	add    esp,0x10
c001ee80:	84 c0                	test   al,al
c001ee82:	0f 84 e8 fd ff ff    	je     c001ec70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee88:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee8d:	52                   	push   edx
c001ee8e:	52                   	push   edx
c001ee8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee96:	50                   	push   eax
c001ee97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee9d:	e8 0a e8 ff ff       	call   c001d6ac <IDE::prepareInterrupt(unsigned char)>
c001eea2:	83 c4 10             	add    esp,0x10
c001eea5:	50                   	push   eax
c001eea6:	50                   	push   eax
c001eea7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eeae:	50                   	push   eax
c001eeaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eeb5:	e8 06 e8 ff ff       	call   c001d6c0 <IDE::getBase(unsigned char)>
c001eeba:	8d 50 07             	lea    edx,[eax+0x7]
c001eebd:	ec                   	in     al,dx
c001eebe:	83 c4 10             	add    esp,0x10
c001eec1:	a8 88                	test   al,0x88
c001eec3:	74 0a                	je     c001eecf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001eec5:	4b                   	dec    ebx
c001eec6:	75 dd                	jne    c001eea5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001eec8:	bb 02 00 00 00       	mov    ebx,0x2
c001eecd:	eb 02                	jmp    c001eed1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eecf:	31 db                	xor    ebx,ebx
c001eed1:	83 c4 1c             	add    esp,0x1c
c001eed4:	89 d8                	mov    eax,ebx
c001eed6:	5b                   	pop    ebx
c001eed7:	5e                   	pop    esi
c001eed8:	5f                   	pop    edi
c001eed9:	5d                   	pop    ebp
c001eeda:	c3                   	ret    
c001eedb:	90                   	nop

c001eedc <ATAPI::diskRemoved()>:
c001eedc:	83 ec 18             	sub    esp,0x18
c001eedf:	68 35 52 02 c0       	push   0xc0025235
c001eee4:	e8 7b db fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001eee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeed:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001eef4:	83 c4 1c             	add    esp,0x1c
c001eef7:	c3                   	ret    

c001eef8 <ATAPI::eject()>:
c001eef8:	57                   	push   edi
c001eef9:	b9 03 00 00 00       	mov    ecx,0x3
c001eefe:	53                   	push   ebx
c001eeff:	83 ec 14             	sub    esp,0x14
c001ef02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef06:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef0a:	fc                   	cld    
c001ef0b:	31 c0                	xor    eax,eax
c001ef0d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef0f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef14:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef19:	50                   	push   eax
c001ef1a:	50                   	push   eax
c001ef1b:	6a 00                	push   0x0
c001ef1d:	6a 00                	push   0x0
c001ef1f:	6a 00                	push   0x0
c001ef21:	6a 02                	push   0x2
c001ef23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef27:	50                   	push   eax
c001ef28:	53                   	push   ebx
c001ef29:	e8 ee fc ff ff       	call   c001ec1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef2e:	83 c4 14             	add    esp,0x14
c001ef31:	53                   	push   ebx
c001ef32:	e8 a5 ff ff ff       	call   c001eedc <ATAPI::diskRemoved()>
c001ef37:	83 c4 24             	add    esp,0x24
c001ef3a:	31 c0                	xor    eax,eax
c001ef3c:	5b                   	pop    ebx
c001ef3d:	5f                   	pop    edi
c001ef3e:	c3                   	ret    
c001ef3f:	90                   	nop

c001ef40 <ATAPI::diskInserted()>:
c001ef40:	53                   	push   ebx
c001ef41:	83 ec 14             	sub    esp,0x14
c001ef44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef48:	68 4c 52 02 c0       	push   0xc002524c
c001ef4d:	e8 12 db fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001ef52:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef5c:	e8 e9 f3 fe ff       	call   c000e34a <PhysicalDisk::startCache()>
c001ef61:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef65:	83 c4 18             	add    esp,0x18
c001ef68:	5b                   	pop    ebx
c001ef69:	e9 18 14 ff ff       	jmp    c0010386 <createPartitionsForDisk(PhysicalDisk*)>

c001ef6e <ATAPI::detectMedia()>:
c001ef6e:	56                   	push   esi
c001ef6f:	53                   	push   ebx
c001ef70:	83 ec 28             	sub    esp,0x28
c001ef73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef77:	6a 0c                	push   0xc
c001ef79:	6a 00                	push   0x0
c001ef7b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef7f:	56                   	push   esi
c001ef80:	e8 ff 16 fe ff       	call   c0000684 <memset>
c001ef85:	58                   	pop    eax
c001ef86:	5a                   	pop    edx
c001ef87:	6a 00                	push   0x0
c001ef89:	6a 00                	push   0x0
c001ef8b:	6a 00                	push   0x0
c001ef8d:	6a 00                	push   0x0
c001ef8f:	56                   	push   esi
c001ef90:	53                   	push   ebx
c001ef91:	e8 86 fc ff ff       	call   c001ec1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef96:	83 c4 1c             	add    esp,0x1c
c001ef99:	6a 0c                	push   0xc
c001ef9b:	6a 00                	push   0x0
c001ef9d:	56                   	push   esi
c001ef9e:	e8 e1 16 fe ff       	call   c0000684 <memset>
c001efa3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001efa8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001efad:	59                   	pop    ecx
c001efae:	58                   	pop    eax
c001efaf:	6a 01                	push   0x1
c001efb1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001efb5:	50                   	push   eax
c001efb6:	6a 00                	push   0x0
c001efb8:	6a 12                	push   0x12
c001efba:	56                   	push   esi
c001efbb:	53                   	push   ebx
c001efbc:	e8 5b fc ff ff       	call   c001ec1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efc1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001efc5:	83 c4 20             	add    esp,0x20
c001efc8:	83 e0 7f             	and    eax,0x7f
c001efcb:	3c 70                	cmp    al,0x70
c001efcd:	74 15                	je     c001efe4 <ATAPI::detectMedia()+0x76>
c001efcf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efd6:	75 0c                	jne    c001efe4 <ATAPI::detectMedia()+0x76>
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	53                   	push   ebx
c001efdc:	e8 5f ff ff ff       	call   c001ef40 <ATAPI::diskInserted()>
c001efe1:	83 c4 10             	add    esp,0x10
c001efe4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001efe8:	83 e0 0f             	and    eax,0xf
c001efeb:	3c 02                	cmp    al,0x2
c001efed:	75 1b                	jne    c001f00a <ATAPI::detectMedia()+0x9c>
c001efef:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001eff4:	75 2d                	jne    c001f023 <ATAPI::detectMedia()+0xb5>
c001eff6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001effd:	74 24                	je     c001f023 <ATAPI::detectMedia()+0xb5>
c001efff:	83 ec 0c             	sub    esp,0xc
c001f002:	53                   	push   ebx
c001f003:	e8 d4 fe ff ff       	call   c001eedc <ATAPI::diskRemoved()>
c001f008:	eb 16                	jmp    c001f020 <ATAPI::detectMedia()+0xb2>
c001f00a:	84 c0                	test   al,al
c001f00c:	75 15                	jne    c001f023 <ATAPI::detectMedia()+0xb5>
c001f00e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f015:	75 0c                	jne    c001f023 <ATAPI::detectMedia()+0xb5>
c001f017:	83 ec 0c             	sub    esp,0xc
c001f01a:	53                   	push   ebx
c001f01b:	e8 20 ff ff ff       	call   c001ef40 <ATAPI::diskInserted()>
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	83 c4 24             	add    esp,0x24
c001f026:	5b                   	pop    ebx
c001f027:	5e                   	pop    esi
c001f028:	c3                   	ret    
c001f029:	90                   	nop

c001f02a <ATAPI::open(int, int, void*)>:
c001f02a:	53                   	push   ebx
c001f02b:	83 ec 08             	sub    esp,0x8
c001f02e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f032:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f036:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f03a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f040:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f046:	c1 e0 06             	shl    eax,0x6
c001f049:	01 d0                	add    eax,edx
c001f04b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f052:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f058:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f05f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f069:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f06f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f076:	6a 04                	push   0x4
c001f078:	6a 0c                	push   0xc
c001f07a:	51                   	push   ecx
c001f07b:	52                   	push   edx
c001f07c:	e8 51 e6 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f081:	90                   	nop
c001f082:	90                   	nop
c001f083:	6a 00                	push   0x0
c001f085:	6a 0c                	push   0xc
c001f087:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f08e:	50                   	push   eax
c001f08f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f095:	e8 38 e6 ff ff       	call   c001d6d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f09a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0a1:	83 c4 14             	add    esp,0x14
c001f0a4:	53                   	push   ebx
c001f0a5:	e8 c4 fe ff ff       	call   c001ef6e <ATAPI::detectMedia()>
c001f0aa:	31 c0                	xor    eax,eax
c001f0ac:	83 c4 18             	add    esp,0x18
c001f0af:	5b                   	pop    ebx
c001f0b0:	c3                   	ret    
c001f0b1:	90                   	nop

c001f0b2 <ATAPI::read(unsigned long long, int, void*)>:
c001f0b2:	55                   	push   ebp
c001f0b3:	57                   	push   edi
c001f0b4:	56                   	push   esi
c001f0b5:	53                   	push   ebx
c001f0b6:	83 ec 1c             	sub    esp,0x1c
c001f0b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0c1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f0c5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0cc:	74 41                	je     c001f10f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f0ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f0d2:	b9 03 00 00 00       	mov    ecx,0x3
c001f0d7:	fc                   	cld    
c001f0d8:	31 c0                	xor    eax,eax
c001f0da:	86 fb                	xchg   bl,bh
c001f0dc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f0de:	c1 c3 10             	rol    ebx,0x10
c001f0e1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f0e6:	89 e8                	mov    eax,ebp
c001f0e8:	86 fb                	xchg   bl,bh
c001f0ea:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f0ee:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f0f2:	50                   	push   eax
c001f0f3:	50                   	push   eax
c001f0f4:	55                   	push   ebp
c001f0f5:	c1 e5 0b             	shl    ebp,0xb
c001f0f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f0fc:	6a 00                	push   0x0
c001f0fe:	55                   	push   ebp
c001f0ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f103:	50                   	push   eax
c001f104:	56                   	push   esi
c001f105:	e8 12 fb ff ff       	call   c001ec1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f10a:	83 c4 20             	add    esp,0x20
c001f10d:	eb 1a                	jmp    c001f129 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f10f:	83 ec 0c             	sub    esp,0xc
c001f112:	56                   	push   esi
c001f113:	e8 56 fe ff ff       	call   c001ef6e <ATAPI::detectMedia()>
c001f118:	83 c4 10             	add    esp,0x10
c001f11b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f122:	75 aa                	jne    c001f0ce <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f124:	b8 02 00 00 00       	mov    eax,0x2
c001f129:	83 c4 1c             	add    esp,0x1c
c001f12c:	5b                   	pop    ebx
c001f12d:	5e                   	pop    esi
c001f12e:	5f                   	pop    edi
c001f12f:	5d                   	pop    ebp
c001f130:	c3                   	ret    
c001f131:	90                   	nop

c001f132 <SATA::close(int, int, void*)>:
c001f132:	83 ec 0c             	sub    esp,0xc
c001f135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f139:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f13f:	85 c0                	test   eax,eax
c001f141:	74 0c                	je     c001f14f <SATA::close(int, int, void*)+0x1d>
c001f143:	83 ec 0c             	sub    esp,0xc
c001f146:	8b 10                	mov    edx,DWORD PTR [eax]
c001f148:	50                   	push   eax
c001f149:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f14c:	83 c4 10             	add    esp,0x10
c001f14f:	31 c0                	xor    eax,eax
c001f151:	83 c4 0c             	add    esp,0xc
c001f154:	c3                   	ret    
c001f155:	90                   	nop

c001f156 <SATA::powerSaving(PowerSavingLevel)>:
c001f156:	c3                   	ret    
c001f157:	90                   	nop

c001f158 <SATA::open(int, int, void*)>:
c001f158:	56                   	push   esi
c001f159:	53                   	push   ebx
c001f15a:	50                   	push   eax
c001f15b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f15f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f163:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f16d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f173:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f181:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f18b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f191:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f198:	e8 2e ac fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f19d:	89 c6                	mov    esi,eax
c001f19f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f1a5:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1ab:	e8 1b ac fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f1b0:	39 c6                	cmp    esi,eax
c001f1b2:	74 10                	je     c001f1c4 <SATA::open(int, int, void*)+0x6c>
c001f1b4:	83 ec 0c             	sub    esp,0xc
c001f1b7:	68 74 51 02 c0       	push   0xc0025174
c001f1bc:	e8 64 51 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f1c1:	83 c4 10             	add    esp,0x10
c001f1c4:	83 ec 0c             	sub    esp,0xc
c001f1c7:	6a 02                	push   0x2
c001f1c9:	e8 bb c4 fe ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c001f1ce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f1d4:	6a 03                	push   0x3
c001f1d6:	50                   	push   eax
c001f1d7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f1dd:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c001f1e3:	e8 48 cb fe ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f1e8:	83 c4 14             	add    esp,0x14
c001f1eb:	53                   	push   ebx
c001f1ec:	e8 59 f1 fe ff       	call   c000e34a <PhysicalDisk::startCache()>
c001f1f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1f4:	e8 8d 11 ff ff       	call   c0010386 <createPartitionsForDisk(PhysicalDisk*)>
c001f1f9:	83 c4 14             	add    esp,0x14
c001f1fc:	31 c0                	xor    eax,eax
c001f1fe:	5b                   	pop    ebx
c001f1ff:	5e                   	pop    esi
c001f200:	c3                   	ret    
c001f201:	90                   	nop

c001f202 <SATA::SATA()>:
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f209:	83 ec 04             	sub    esp,0x4
c001f20c:	68 00 02 00 00       	push   0x200
c001f211:	68 88 51 02 c0       	push   0xc0025188
c001f216:	50                   	push   eax
c001f217:	e8 c6 f0 fe ff       	call   c000e2e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f21c:	83 c4 10             	add    esp,0x10
c001f21f:	ba f8 51 02 c0       	mov    edx,0xc00251f8
c001f224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f228:	89 10                	mov    DWORD PTR [eax],edx
c001f22a:	90                   	nop
c001f22b:	83 c4 0c             	add    esp,0xc
c001f22e:	c3                   	ret    
c001f22f:	90                   	nop

c001f230 <SATA::access(unsigned long long, int, void*, bool)>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 2c             	sub    esp,0x2c
c001f237:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f23b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f23f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f243:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f247:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f24b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f254:	7e 10                	jle    c001f266 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f256:	83 ec 0c             	sub    esp,0xc
c001f259:	68 98 51 02 c0       	push   0xc0025198
c001f25e:	e8 c2 50 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f263:	83 c4 10             	add    esp,0x10
c001f266:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f26c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f272:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f278:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f27c:	89 d0                	mov    eax,edx
c001f27e:	c1 e0 07             	shl    eax,0x7
c001f281:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f285:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f28f:	51                   	push   ecx
c001f290:	8d 42 02             	lea    eax,[edx+0x2]
c001f293:	51                   	push   ecx
c001f294:	c1 e0 07             	shl    eax,0x7
c001f297:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f29b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f29f:	50                   	push   eax
c001f2a0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f2a6:	e8 9f ef ff ff       	call   c001e24a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f2ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f2af:	83 c4 10             	add    esp,0x10
c001f2b2:	b8 01 00 00 00       	mov    eax,0x1
c001f2b7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f2bc:	0f 84 cb 01 00 00    	je     c001f48d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f2c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2ca:	c1 e0 09             	shl    eax,0x9
c001f2cd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f2d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f2d6:	74 0e                	je     c001f2e6 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f2d8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f2de:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f2e2:	89 c1                	mov    ecx,eax
c001f2e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2ea:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2f0:	8d 42 02             	lea    eax,[edx+0x2]
c001f2f3:	c1 e0 07             	shl    eax,0x7
c001f2f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2fc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f302:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f308:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f30c:	c1 e1 05             	shl    ecx,0x5
c001f30f:	01 c8                	add    eax,ecx
c001f311:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f315:	83 e1 01             	and    ecx,0x1
c001f318:	89 ce                	mov    esi,ecx
c001f31a:	8a 08                	mov    cl,BYTE PTR [eax]
c001f31c:	c1 e6 06             	shl    esi,0x6
c001f31f:	83 e1 bf             	and    ecx,0xffffffbf
c001f322:	09 f1                	or     ecx,esi
c001f324:	88 08                	mov    BYTE PTR [eax],cl
c001f326:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f328:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f32e:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f334:	89 08                	mov    DWORD PTR [eax],ecx
c001f336:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f33c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f342:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f348:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f34b:	50                   	push   eax
c001f34c:	68 90 00 00 00       	push   0x90
c001f351:	6a 00                	push   0x0
c001f353:	56                   	push   esi
c001f354:	e8 2b 13 fe ff       	call   c0000684 <memset>
c001f359:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f35f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f363:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f369:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f36d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	48                   	dec    eax
c001f375:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f37a:	89 c1                	mov    ecx,eax
c001f37c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f382:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f387:	09 c8                	or     eax,ecx
c001f389:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f38f:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f392:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f399:	66 25 00 7f          	and    ax,0x7f00
c001f39d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3a1:	66 0d 27 80          	or     ax,0x8027
c001f3a5:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f3aa:	66 89 06             	mov    WORD PTR [esi],ax
c001f3ad:	19 c0                	sbb    eax,eax
c001f3af:	83 e0 f0             	and    eax,0xfffffff0
c001f3b2:	83 c0 35             	add    eax,0x35
c001f3b5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f3b8:	89 e8                	mov    eax,ebp
c001f3ba:	c1 e8 10             	shr    eax,0x10
c001f3bd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f3c0:	89 e8                	mov    eax,ebp
c001f3c2:	c1 e8 18             	shr    eax,0x18
c001f3c5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f3c8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f3cc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f3cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f3d3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f3d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f3da:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f3de:	89 d6                	mov    esi,edx
c001f3e0:	31 c0                	xor    eax,eax
c001f3e2:	c1 e6 07             	shl    esi,0x7
c001f3e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f3e9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f3ef:	80 e1 88             	and    cl,0x88
c001f3f2:	74 0a                	je     c001f3fe <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f3f4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f3f9:	74 0a                	je     c001f405 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f3fb:	40                   	inc    eax
c001f3fc:	eb eb                	jmp    c001f3e9 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f3fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f403:	75 0a                	jne    c001f40f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f405:	83 ec 0c             	sub    esp,0xc
c001f408:	68 d1 51 02 c0       	push   0xc00251d1
c001f40d:	eb 56                	jmp    c001f465 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f40f:	b8 01 00 00 00       	mov    eax,0x1
c001f414:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f418:	c1 e2 07             	shl    edx,0x7
c001f41b:	d3 e0                	shl    eax,cl
c001f41d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f421:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f427:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f42d:	85 c8                	test   eax,ecx
c001f42f:	74 20                	je     c001f451 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f431:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f437:	0f ba e1 1e          	bt     ecx,0x1e
c001f43b:	73 ea                	jae    c001f427 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f43d:	83 ec 0c             	sub    esp,0xc
c001f440:	68 df 51 02 c0       	push   0xc00251df
c001f445:	e8 db 4e ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f44a:	83 c4 10             	add    esp,0x10
c001f44d:	31 c0                	xor    eax,eax
c001f44f:	eb 3c                	jmp    c001f48d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f451:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f457:	0f ba e0 1e          	bt     eax,0x1e
c001f45b:	73 17                	jae    c001f474 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	68 df 51 02 c0       	push   0xc00251df
c001f465:	e8 bb 4e ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f46a:	83 c4 10             	add    esp,0x10
c001f46d:	b8 01 00 00 00       	mov    eax,0x1
c001f472:	eb 19                	jmp    c001f48d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f474:	31 c0                	xor    eax,eax
c001f476:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f47b:	75 10                	jne    c001f48d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f47d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f48b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f48d:	83 c4 2c             	add    esp,0x2c
c001f490:	5b                   	pop    ebx
c001f491:	5e                   	pop    esi
c001f492:	5f                   	pop    edi
c001f493:	5d                   	pop    ebp
c001f494:	c3                   	ret    
c001f495:	90                   	nop

c001f496 <SATA::read(unsigned long long, int, void*)>:
c001f496:	57                   	push   edi
c001f497:	b8 04 00 00 00       	mov    eax,0x4
c001f49c:	56                   	push   esi
c001f49d:	53                   	push   ebx
c001f49e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4a6:	8d 7a ff             	lea    edi,[edx-0x1]
c001f4a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f4b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f4b7:	77 25                	ja     c001f4de <SATA::read(unsigned long long, int, void*)+0x48>
c001f4b9:	b8 06 00 00 00       	mov    eax,0x6
c001f4be:	85 f6                	test   esi,esi
c001f4c0:	74 1c                	je     c001f4de <SATA::read(unsigned long long, int, void*)+0x48>
c001f4c2:	50                   	push   eax
c001f4c3:	50                   	push   eax
c001f4c4:	6a 00                	push   0x0
c001f4c6:	56                   	push   esi
c001f4c7:	52                   	push   edx
c001f4c8:	53                   	push   ebx
c001f4c9:	51                   	push   ecx
c001f4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f4ce:	e8 5d fd ff ff       	call   c001f230 <SATA::access(unsigned long long, int, void*, bool)>
c001f4d3:	83 c4 20             	add    esp,0x20
c001f4d6:	85 c0                	test   eax,eax
c001f4d8:	0f 95 c0             	setne  al
c001f4db:	0f b6 c0             	movzx  eax,al
c001f4de:	5b                   	pop    ebx
c001f4df:	5e                   	pop    esi
c001f4e0:	5f                   	pop    edi
c001f4e1:	c3                   	ret    

c001f4e2 <SATA::write(unsigned long long, int, void*)>:
c001f4e2:	55                   	push   ebp
c001f4e3:	b8 04 00 00 00       	mov    eax,0x4
c001f4e8:	57                   	push   edi
c001f4e9:	56                   	push   esi
c001f4ea:	53                   	push   ebx
c001f4eb:	83 ec 0c             	sub    esp,0xc
c001f4ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f4f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4f6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f4f9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f4fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f501:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f507:	77 3d                	ja     c001f546 <SATA::write(unsigned long long, int, void*)+0x64>
c001f509:	b8 06 00 00 00       	mov    eax,0x6
c001f50e:	85 ed                	test   ebp,ebp
c001f510:	74 34                	je     c001f546 <SATA::write(unsigned long long, int, void*)+0x64>
c001f512:	c1 e3 09             	shl    ebx,0x9
c001f515:	01 eb                	add    ebx,ebp
c001f517:	89 d6                	mov    esi,edx
c001f519:	89 cf                	mov    edi,ecx
c001f51b:	83 c6 01             	add    esi,0x1
c001f51e:	83 d7 00             	adc    edi,0x0
c001f521:	50                   	push   eax
c001f522:	50                   	push   eax
c001f523:	6a 01                	push   0x1
c001f525:	55                   	push   ebp
c001f526:	81 c5 00 02 00 00    	add    ebp,0x200
c001f52c:	6a 01                	push   0x1
c001f52e:	51                   	push   ecx
c001f52f:	52                   	push   edx
c001f530:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f534:	e8 f7 fc ff ff       	call   c001f230 <SATA::access(unsigned long long, int, void*, bool)>
c001f539:	83 c4 20             	add    esp,0x20
c001f53c:	89 f2                	mov    edx,esi
c001f53e:	89 f9                	mov    ecx,edi
c001f540:	39 dd                	cmp    ebp,ebx
c001f542:	75 d3                	jne    c001f517 <SATA::write(unsigned long long, int, void*)+0x35>
c001f544:	31 c0                	xor    eax,eax
c001f546:	83 c4 0c             	add    esp,0xc
c001f549:	5b                   	pop    ebx
c001f54a:	5e                   	pop    esi
c001f54b:	5f                   	pop    edi
c001f54c:	5d                   	pop    ebp
c001f54d:	c3                   	ret    

c001f54e <SATAPI::write(unsigned long long, int, void*)>:
c001f54e:	b8 03 00 00 00       	mov    eax,0x3
c001f553:	c3                   	ret    

c001f554 <SATAPI::close(int, int, void*)>:
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f561:	85 c0                	test   eax,eax
c001f563:	74 0c                	je     c001f571 <SATAPI::close(int, int, void*)+0x1d>
c001f565:	83 ec 0c             	sub    esp,0xc
c001f568:	8b 10                	mov    edx,DWORD PTR [eax]
c001f56a:	50                   	push   eax
c001f56b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f56e:	83 c4 10             	add    esp,0x10
c001f571:	31 c0                	xor    eax,eax
c001f573:	83 c4 0c             	add    esp,0xc
c001f576:	c3                   	ret    
c001f577:	90                   	nop

c001f578 <SATAPI::SATAPI()>:
c001f578:	83 ec 0c             	sub    esp,0xc
c001f57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57f:	83 ec 04             	sub    esp,0x4
c001f582:	68 00 08 00 00       	push   0x800
c001f587:	68 28 52 02 c0       	push   0xc0025228
c001f58c:	50                   	push   eax
c001f58d:	e8 50 ed fe ff       	call   c000e2e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f592:	83 c4 10             	add    esp,0x10
c001f595:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c001f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59e:	89 10                	mov    DWORD PTR [eax],edx
c001f5a0:	90                   	nop
c001f5a1:	83 c4 0c             	add    esp,0xc
c001f5a4:	c3                   	ret    
c001f5a5:	90                   	nop

c001f5a6 <SATAPI::diskRemoved()>:
c001f5a6:	83 ec 18             	sub    esp,0x18
c001f5a9:	68 34 52 02 c0       	push   0xc0025234
c001f5ae:	e8 b1 d4 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001f5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5b7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f5be:	83 c4 1c             	add    esp,0x1c
c001f5c1:	c3                   	ret    

c001f5c2 <SATAPI::diskInserted()>:
c001f5c2:	53                   	push   ebx
c001f5c3:	83 ec 14             	sub    esp,0x14
c001f5c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f5ca:	68 4b 52 02 c0       	push   0xc002524b
c001f5cf:	e8 90 d4 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001f5d4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f5db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5de:	e8 67 ed fe ff       	call   c000e34a <PhysicalDisk::startCache()>
c001f5e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f5e7:	83 c4 18             	add    esp,0x18
c001f5ea:	5b                   	pop    ebx
c001f5eb:	e9 96 0d ff ff       	jmp    c0010386 <createPartitionsForDisk(PhysicalDisk*)>

c001f5f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f5f0:	55                   	push   ebp
c001f5f1:	57                   	push   edi
c001f5f2:	56                   	push   esi
c001f5f3:	53                   	push   ebx
c001f5f4:	83 ec 34             	sub    esp,0x34
c001f5f7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f5fb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f5ff:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f603:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f60b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f611:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f61b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f621:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f625:	c1 e0 07             	shl    eax,0x7
c001f628:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f62c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f630:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f63a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f63e:	8d 58 02             	lea    ebx,[eax+0x2]
c001f641:	c1 e3 07             	shl    ebx,0x7
c001f644:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f648:	53                   	push   ebx
c001f649:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f64f:	e8 f6 eb ff ff       	call   c001e24a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f658:	83 c4 10             	add    esp,0x10
c001f65b:	b8 01 00 00 00       	mov    eax,0x1
c001f660:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f665:	0f 84 85 01 00 00    	je     c001f7f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f66b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f673:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f679:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f67f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f683:	c1 e1 05             	shl    ecx,0x5
c001f686:	01 c8                	add    eax,ecx
c001f688:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f68a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f690:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f696:	89 08                	mov    DWORD PTR [eax],ecx
c001f698:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f69e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f6a4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f6aa:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f6ad:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f6b0:	50                   	push   eax
c001f6b1:	68 90 00 00 00       	push   0x90
c001f6b6:	6a 00                	push   0x0
c001f6b8:	53                   	push   ebx
c001f6b9:	e8 c6 0f fe ff       	call   c0000684 <memset>
c001f6be:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f6c2:	b9 0c 00 00 00       	mov    ecx,0xc
c001f6c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6c9:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f6cf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f6d3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f6d9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f6dd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f6e1:	48                   	dec    eax
c001f6e2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6e7:	89 c1                	mov    ecx,eax
c001f6e9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f6ef:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f6f4:	09 c8                	or     eax,ecx
c001f6f6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f6fc:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f6ff:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f706:	66 25 00 7f          	and    ax,0x7f00
c001f70a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f70e:	66 0d 27 80          	or     ax,0x8027
c001f712:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f716:	66 89 03             	mov    WORD PTR [ebx],ax
c001f719:	89 d0                	mov    eax,edx
c001f71b:	c1 ea 18             	shr    edx,0x18
c001f71e:	c1 e8 10             	shr    eax,0x10
c001f721:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f724:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f727:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f72b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f72e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f732:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f735:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f739:	83 c4 10             	add    esp,0x10
c001f73c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f740:	31 c0                	xor    eax,eax
c001f742:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f746:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f74c:	80 e2 88             	and    dl,0x88
c001f74f:	74 0a                	je     c001f75b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f751:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f756:	74 0a                	je     c001f762 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f758:	40                   	inc    eax
c001f759:	eb eb                	jmp    c001f746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f75b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f760:	75 0f                	jne    c001f771 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f762:	83 ec 0c             	sub    esp,0xc
c001f765:	68 d1 51 02 c0       	push   0xc00251d1
c001f76a:	e8 b6 4b ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f76f:	eb 3f                	jmp    c001f7b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f771:	ba 01 00 00 00       	mov    edx,0x1
c001f776:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f77e:	d3 e2                	shl    edx,cl
c001f780:	c1 e0 07             	shl    eax,0x7
c001f783:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f789:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f78d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f793:	85 ca                	test   edx,ecx
c001f795:	74 23                	je     c001f7ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f797:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f79d:	0f ba e1 1e          	bt     ecx,0x1e
c001f7a1:	73 ea                	jae    c001f78d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7a3:	83 ec 0c             	sub    esp,0xc
c001f7a6:	68 63 52 02 c0       	push   0xc0025263
c001f7ab:	e8 b4 d2 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c001f7b0:	83 c4 10             	add    esp,0x10
c001f7b3:	b8 01 00 00 00       	mov    eax,0x1
c001f7b8:	eb 36                	jmp    c001f7f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f7ba:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f7c0:	0f ba e0 1e          	bt     eax,0x1e
c001f7c4:	73 0a                	jae    c001f7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f7c6:	83 ec 0c             	sub    esp,0xc
c001f7c9:	68 76 52 02 c0       	push   0xc0025276
c001f7ce:	eb db                	jmp    c001f7ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f7d0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f7d5:	74 17                	je     c001f7ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f7dc:	74 10                	je     c001f7ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7de:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f7e4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f7e8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f7ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7ee:	31 c0                	xor    eax,eax
c001f7f0:	83 c4 2c             	add    esp,0x2c
c001f7f3:	5b                   	pop    ebx
c001f7f4:	5e                   	pop    esi
c001f7f5:	5f                   	pop    edi
c001f7f6:	5d                   	pop    ebp
c001f7f7:	c3                   	ret    

c001f7f8 <SATAPI::eject()>:
c001f7f8:	57                   	push   edi
c001f7f9:	b9 03 00 00 00       	mov    ecx,0x3
c001f7fe:	53                   	push   ebx
c001f7ff:	83 ec 14             	sub    esp,0x14
c001f802:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f806:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f80a:	fc                   	cld    
c001f80b:	31 c0                	xor    eax,eax
c001f80d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f80f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f814:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f819:	50                   	push   eax
c001f81a:	6a 00                	push   0x0
c001f81c:	6a 00                	push   0x0
c001f81e:	6a 00                	push   0x0
c001f820:	6a 00                	push   0x0
c001f822:	6a 02                	push   0x2
c001f824:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f828:	50                   	push   eax
c001f829:	53                   	push   ebx
c001f82a:	e8 c1 fd ff ff       	call   c001f5f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f82f:	83 c4 14             	add    esp,0x14
c001f832:	53                   	push   ebx
c001f833:	e8 6e fd ff ff       	call   c001f5a6 <SATAPI::diskRemoved()>
c001f838:	83 c4 24             	add    esp,0x24
c001f83b:	31 c0                	xor    eax,eax
c001f83d:	5b                   	pop    ebx
c001f83e:	5f                   	pop    edi
c001f83f:	c3                   	ret    

c001f840 <SATAPI::detectMedia()>:
c001f840:	56                   	push   esi
c001f841:	53                   	push   ebx
c001f842:	83 ec 28             	sub    esp,0x28
c001f845:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f849:	6a 0c                	push   0xc
c001f84b:	6a 00                	push   0x0
c001f84d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f851:	56                   	push   esi
c001f852:	e8 2d 0e fe ff       	call   c0000684 <memset>
c001f857:	83 c4 0c             	add    esp,0xc
c001f85a:	6a 00                	push   0x0
c001f85c:	6a 00                	push   0x0
c001f85e:	6a 00                	push   0x0
c001f860:	6a 00                	push   0x0
c001f862:	6a 00                	push   0x0
c001f864:	56                   	push   esi
c001f865:	53                   	push   ebx
c001f866:	e8 85 fd ff ff       	call   c001f5f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f86b:	83 c4 1c             	add    esp,0x1c
c001f86e:	6a 0c                	push   0xc
c001f870:	6a 00                	push   0x0
c001f872:	56                   	push   esi
c001f873:	e8 0c 0e fe ff       	call   c0000684 <memset>
c001f878:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f87d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f882:	83 c4 0c             	add    esp,0xc
c001f885:	6a 01                	push   0x1
c001f887:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f88b:	50                   	push   eax
c001f88c:	6a 00                	push   0x0
c001f88e:	6a 00                	push   0x0
c001f890:	6a 12                	push   0x12
c001f892:	56                   	push   esi
c001f893:	53                   	push   ebx
c001f894:	e8 57 fd ff ff       	call   c001f5f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f899:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f89d:	83 c4 20             	add    esp,0x20
c001f8a0:	83 e0 7f             	and    eax,0x7f
c001f8a3:	3c 70                	cmp    al,0x70
c001f8a5:	74 15                	je     c001f8bc <SATAPI::detectMedia()+0x7c>
c001f8a7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8ae:	75 0c                	jne    c001f8bc <SATAPI::detectMedia()+0x7c>
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	53                   	push   ebx
c001f8b4:	e8 09 fd ff ff       	call   c001f5c2 <SATAPI::diskInserted()>
c001f8b9:	83 c4 10             	add    esp,0x10
c001f8bc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f8c0:	83 e0 0f             	and    eax,0xf
c001f8c3:	3c 02                	cmp    al,0x2
c001f8c5:	75 1b                	jne    c001f8e2 <SATAPI::detectMedia()+0xa2>
c001f8c7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f8cc:	75 2d                	jne    c001f8fb <SATAPI::detectMedia()+0xbb>
c001f8ce:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8d5:	74 24                	je     c001f8fb <SATAPI::detectMedia()+0xbb>
c001f8d7:	83 ec 0c             	sub    esp,0xc
c001f8da:	53                   	push   ebx
c001f8db:	e8 c6 fc ff ff       	call   c001f5a6 <SATAPI::diskRemoved()>
c001f8e0:	eb 16                	jmp    c001f8f8 <SATAPI::detectMedia()+0xb8>
c001f8e2:	84 c0                	test   al,al
c001f8e4:	75 15                	jne    c001f8fb <SATAPI::detectMedia()+0xbb>
c001f8e6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8ed:	75 0c                	jne    c001f8fb <SATAPI::detectMedia()+0xbb>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	53                   	push   ebx
c001f8f3:	e8 ca fc ff ff       	call   c001f5c2 <SATAPI::diskInserted()>
c001f8f8:	83 c4 10             	add    esp,0x10
c001f8fb:	83 c4 24             	add    esp,0x24
c001f8fe:	5b                   	pop    ebx
c001f8ff:	5e                   	pop    esi
c001f900:	c3                   	ret    
c001f901:	90                   	nop

c001f902 <SATAPI::open(int, int, void*)>:
c001f902:	56                   	push   esi
c001f903:	53                   	push   ebx
c001f904:	50                   	push   eax
c001f905:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f909:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f90d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f917:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f91d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f92b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f935:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f93b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f942:	e8 84 a4 fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f947:	89 c6                	mov    esi,eax
c001f949:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f94f:	81 c6 00 10 00 00    	add    esi,0x1000
c001f955:	e8 71 a4 fe ff       	call   c0009dcb <Phys::allocatePage()>
c001f95a:	39 c6                	cmp    esi,eax
c001f95c:	74 10                	je     c001f96e <SATAPI::open(int, int, void*)+0x6c>
c001f95e:	83 ec 0c             	sub    esp,0xc
c001f961:	68 8b 52 02 c0       	push   0xc002528b
c001f966:	e8 ba 49 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f96b:	83 c4 10             	add    esp,0x10
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	6a 02                	push   0x2
c001f973:	e8 11 bd fe ff       	call   c000b689 <Virt::allocateKernelVirtualPages(int)>
c001f978:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f97e:	6a 03                	push   0x3
c001f980:	50                   	push   eax
c001f981:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f987:	ff 35 50 65 02 c0    	push   DWORD PTR ds:0xc0026550
c001f98d:	e8 9e c3 fe ff       	call   c000bd30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f992:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f999:	83 c4 14             	add    esp,0x14
c001f99c:	53                   	push   ebx
c001f99d:	e8 9e fe ff ff       	call   c001f840 <SATAPI::detectMedia()>
c001f9a2:	83 c4 14             	add    esp,0x14
c001f9a5:	31 c0                	xor    eax,eax
c001f9a7:	5b                   	pop    ebx
c001f9a8:	5e                   	pop    esi
c001f9a9:	c3                   	ret    

c001f9aa <SATAPI::read(unsigned long long, int, void*)>:
c001f9aa:	55                   	push   ebp
c001f9ab:	57                   	push   edi
c001f9ac:	56                   	push   esi
c001f9ad:	53                   	push   ebx
c001f9ae:	83 ec 1c             	sub    esp,0x1c
c001f9b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f9bd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9c4:	74 19                	je     c001f9df <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f9c6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f9cb:	7e 2e                	jle    c001f9fb <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9cd:	83 ec 0c             	sub    esp,0xc
c001f9d0:	68 a1 52 02 c0       	push   0xc00252a1
c001f9d5:	e8 4b 49 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c001f9da:	83 c4 10             	add    esp,0x10
c001f9dd:	eb 1c                	jmp    c001f9fb <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9df:	83 ec 0c             	sub    esp,0xc
c001f9e2:	55                   	push   ebp
c001f9e3:	e8 58 fe ff ff       	call   c001f840 <SATAPI::detectMedia()>
c001f9e8:	83 c4 10             	add    esp,0x10
c001f9eb:	b8 02 00 00 00       	mov    eax,0x2
c001f9f0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9f7:	75 cd                	jne    c001f9c6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f9f9:	eb 49                	jmp    c001fa44 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f9fb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f9ff:	b9 03 00 00 00       	mov    ecx,0x3
c001fa04:	fc                   	cld    
c001fa05:	31 c0                	xor    eax,eax
c001fa07:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa09:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa0e:	89 d8                	mov    eax,ebx
c001fa10:	86 e0                	xchg   al,ah
c001fa12:	c1 c0 10             	rol    eax,0x10
c001fa15:	86 e0                	xchg   al,ah
c001fa17:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa1b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa1f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa23:	50                   	push   eax
c001fa24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa2c:	56                   	push   esi
c001fa2d:	53                   	push   ebx
c001fa2e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa32:	c1 e0 0b             	shl    eax,0xb
c001fa35:	50                   	push   eax
c001fa36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa3a:	50                   	push   eax
c001fa3b:	55                   	push   ebp
c001fa3c:	e8 af fb ff ff       	call   c001f5f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa41:	83 c4 20             	add    esp,0x20
c001fa44:	83 c4 1c             	add    esp,0x1c
c001fa47:	5b                   	pop    ebx
c001fa48:	5e                   	pop    esi
c001fa49:	5f                   	pop    edi
c001fa4a:	5d                   	pop    ebp
c001fa4b:	c3                   	ret    

c001fa4c <AVX::open(int, int, void*)>:
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	e8 34 11 00 00       	call   c0020b88 <avxInit>
c001fa54:	b8 00 00 00 00       	mov    eax,0x0
c001fa59:	83 c4 0c             	add    esp,0xc
c001fa5c:	c3                   	ret    
c001fa5d:	90                   	nop
c001fa5e:	66 90                	xchg   ax,ax

c001fa60 <AVX::close(int, int, void*)>:
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	e8 21 11 00 00       	call   c0020b89 <avxClose>
c001fa68:	b8 00 00 00 00       	mov    eax,0x0
c001fa6d:	83 c4 0c             	add    esp,0xc
c001fa70:	c3                   	ret    
c001fa71:	90                   	nop
c001fa72:	66 90                	xchg   ax,ax

c001fa74 <AVX::available()>:
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	e8 04 11 00 00       	call   c0020b80 <avxDetect>
c001fa7c:	85 c0                	test   eax,eax
c001fa7e:	0f 95 c0             	setne  al
c001fa81:	83 c4 0c             	add    esp,0xc
c001fa84:	c3                   	ret    
c001fa85:	90                   	nop
c001fa86:	66 90                	xchg   ax,ax

c001fa88 <AVX::save(void*)>:
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa8f:	83 ec 0c             	sub    esp,0xc
c001fa92:	50                   	push   eax
c001fa93:	e8 ee 10 00 00       	call   c0020b86 <avxSave>
c001fa98:	83 c4 10             	add    esp,0x10
c001fa9b:	90                   	nop
c001fa9c:	83 c4 0c             	add    esp,0xc
c001fa9f:	c3                   	ret    

c001faa0 <AVX::load(void*)>:
c001faa0:	83 ec 0c             	sub    esp,0xc
c001faa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faa7:	83 ec 0c             	sub    esp,0xc
c001faaa:	50                   	push   eax
c001faab:	e8 d7 10 00 00       	call   c0020b87 <avxLoad>
c001fab0:	83 c4 10             	add    esp,0x10
c001fab3:	90                   	nop
c001fab4:	83 c4 0c             	add    esp,0xc
c001fab7:	c3                   	ret    

c001fab8 <AVX::AVX()>:
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabf:	83 ec 08             	sub    esp,0x8
c001fac2:	68 04 53 02 c0       	push   0xc0025304
c001fac7:	50                   	push   eax
c001fac8:	e8 f3 e8 fe ff       	call   c000e3c0 <FPU::FPU(char const*)>
c001facd:	83 c4 10             	add    esp,0x10
c001fad0:	ba 14 53 02 c0       	mov    edx,0xc0025314
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	89 10                	mov    DWORD PTR [eax],edx
c001fadb:	90                   	nop
c001fadc:	83 c4 0c             	add    esp,0xc
c001fadf:	c3                   	ret    

c001fae0 <MMX::available()>:
c001fae0:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001fae5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001faeb:	83 e0 20             	and    eax,0x20
c001faee:	84 c0                	test   al,al
c001faf0:	0f 95 c0             	setne  al
c001faf3:	c3                   	ret    

c001faf4 <MMX::open(int, int, void*)>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	e8 16 11 00 00       	call   c0020c12 <x87Init>
c001fafc:	b8 00 00 00 00       	mov    eax,0x0
c001fb01:	83 c4 0c             	add    esp,0xc
c001fb04:	c3                   	ret    
c001fb05:	90                   	nop
c001fb06:	66 90                	xchg   ax,ax

c001fb08 <MMX::close(int, int, void*)>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	e8 1c 11 00 00       	call   c0020c2c <x87Close>
c001fb10:	b8 00 00 00 00       	mov    eax,0x0
c001fb15:	83 c4 0c             	add    esp,0xc
c001fb18:	c3                   	ret    
c001fb19:	90                   	nop
c001fb1a:	66 90                	xchg   ax,ax

c001fb1c <MMX::save(void*)>:
c001fb1c:	83 ec 0c             	sub    esp,0xc
c001fb1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	50                   	push   eax
c001fb27:	e8 d5 10 00 00       	call   c0020c01 <x87Save>
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	90                   	nop
c001fb30:	83 c4 0c             	add    esp,0xc
c001fb33:	c3                   	ret    

c001fb34 <MMX::load(void*)>:
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb3b:	83 ec 0c             	sub    esp,0xc
c001fb3e:	50                   	push   eax
c001fb3f:	e8 c6 10 00 00       	call   c0020c0a <x87Load>
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	90                   	nop
c001fb48:	83 c4 0c             	add    esp,0xc
c001fb4b:	c3                   	ret    

c001fb4c <MMX::MMX()>:
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb53:	83 ec 08             	sub    esp,0x8
c001fb56:	68 44 53 02 c0       	push   0xc0025344
c001fb5b:	50                   	push   eax
c001fb5c:	e8 5f e8 fe ff       	call   c000e3c0 <FPU::FPU(char const*)>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	ba 54 53 02 c0       	mov    edx,0xc0025354
c001fb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6d:	89 10                	mov    DWORD PTR [eax],edx
c001fb6f:	90                   	nop
c001fb70:	83 c4 0c             	add    esp,0xc
c001fb73:	c3                   	ret    

c001fb74 <SSE::open(int, int, void*)>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	e8 48 10 00 00       	call   c0020bc4 <sseInit>
c001fb7c:	b8 00 00 00 00       	mov    eax,0x0
c001fb81:	83 c4 0c             	add    esp,0xc
c001fb84:	c3                   	ret    
c001fb85:	90                   	nop
c001fb86:	66 90                	xchg   ax,ax

c001fb88 <SSE::close(int, int, void*)>:
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	e8 44 10 00 00       	call   c0020bd4 <sseClose>
c001fb90:	b8 00 00 00 00       	mov    eax,0x0
c001fb95:	83 c4 0c             	add    esp,0xc
c001fb98:	c3                   	ret    
c001fb99:	90                   	nop
c001fb9a:	66 90                	xchg   ax,ax

c001fb9c <SSE::available()>:
c001fb9c:	83 ec 1c             	sub    esp,0x1c
c001fb9f:	e8 fc 0f 00 00       	call   c0020ba0 <absolutelyNoChanceInHell>
c001fba4:	85 c0                	test   eax,eax
c001fba6:	0f 95 c0             	setne  al
c001fba9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fbb1:	83 c4 1c             	add    esp,0x1c
c001fbb4:	c3                   	ret    
c001fbb5:	90                   	nop
c001fbb6:	66 90                	xchg   ax,ax

c001fbb8 <SSE::save(void*)>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbbf:	83 ec 0c             	sub    esp,0xc
c001fbc2:	50                   	push   eax
c001fbc3:	e8 f0 0f 00 00       	call   c0020bb8 <sseSave>
c001fbc8:	83 c4 10             	add    esp,0x10
c001fbcb:	90                   	nop
c001fbcc:	83 c4 0c             	add    esp,0xc
c001fbcf:	c3                   	ret    

c001fbd0 <SSE::load(void*)>:
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbd7:	83 ec 0c             	sub    esp,0xc
c001fbda:	50                   	push   eax
c001fbdb:	e8 de 0f 00 00       	call   c0020bbe <sseLoad>
c001fbe0:	83 c4 10             	add    esp,0x10
c001fbe3:	90                   	nop
c001fbe4:	83 c4 0c             	add    esp,0xc
c001fbe7:	c3                   	ret    

c001fbe8 <SSE::SSE()>:
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbef:	83 ec 08             	sub    esp,0x8
c001fbf2:	68 84 53 02 c0       	push   0xc0025384
c001fbf7:	50                   	push   eax
c001fbf8:	e8 c3 e7 fe ff       	call   c000e3c0 <FPU::FPU(char const*)>
c001fbfd:	83 c4 10             	add    esp,0x10
c001fc00:	ba 94 53 02 c0       	mov    edx,0xc0025394
c001fc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc09:	89 10                	mov    DWORD PTR [eax],edx
c001fc0b:	90                   	nop
c001fc0c:	83 c4 0c             	add    esp,0xc
c001fc0f:	c3                   	ret    

c001fc10 <x87::open(int, int, void*)>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	e8 fa 0f 00 00       	call   c0020c12 <x87Init>
c001fc18:	b8 00 00 00 00       	mov    eax,0x0
c001fc1d:	83 c4 0c             	add    esp,0xc
c001fc20:	c3                   	ret    
c001fc21:	90                   	nop
c001fc22:	66 90                	xchg   ax,ax

c001fc24 <x87::close(int, int, void*)>:
c001fc24:	83 ec 0c             	sub    esp,0xc
c001fc27:	e8 00 10 00 00       	call   c0020c2c <x87Close>
c001fc2c:	b8 00 00 00 00       	mov    eax,0x0
c001fc31:	83 c4 0c             	add    esp,0xc
c001fc34:	c3                   	ret    
c001fc35:	90                   	nop
c001fc36:	66 90                	xchg   ax,ax

c001fc38 <x87::available()>:
c001fc38:	83 ec 0c             	sub    esp,0xc
c001fc3b:	e8 a6 0f 00 00       	call   c0020be6 <x87Detect>
c001fc40:	85 c0                	test   eax,eax
c001fc42:	0f 95 c0             	setne  al
c001fc45:	83 c4 0c             	add    esp,0xc
c001fc48:	c3                   	ret    
c001fc49:	90                   	nop
c001fc4a:	66 90                	xchg   ax,ax

c001fc4c <x87::save(void*)>:
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	50                   	push   eax
c001fc57:	e8 a5 0f 00 00       	call   c0020c01 <x87Save>
c001fc5c:	83 c4 10             	add    esp,0x10
c001fc5f:	90                   	nop
c001fc60:	83 c4 0c             	add    esp,0xc
c001fc63:	c3                   	ret    

c001fc64 <x87::load(void*)>:
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc6b:	83 ec 0c             	sub    esp,0xc
c001fc6e:	50                   	push   eax
c001fc6f:	e8 96 0f 00 00       	call   c0020c0a <x87Load>
c001fc74:	83 c4 10             	add    esp,0x10
c001fc77:	90                   	nop
c001fc78:	83 c4 0c             	add    esp,0xc
c001fc7b:	c3                   	ret    

c001fc7c <x87::x87()>:
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc83:	83 ec 08             	sub    esp,0x8
c001fc86:	68 c4 53 02 c0       	push   0xc00253c4
c001fc8b:	50                   	push   eax
c001fc8c:	e8 2f e7 fe ff       	call   c000e3c0 <FPU::FPU(char const*)>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001fc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9d:	89 10                	mov    DWORD PTR [eax],edx
c001fc9f:	90                   	nop
c001fca0:	83 c4 0c             	add    esp,0xc
c001fca3:	c3                   	ret    

c001fca4 <APIC::disable()>:
c001fca4:	90                   	nop
c001fca5:	c3                   	ret    

c001fca6 <APIC::close(int, int, void*)>:
c001fca6:	55                   	push   ebp
c001fca7:	89 e5                	mov    ebp,esp
c001fca9:	83 ec 08             	sub    esp,0x8
c001fcac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb1:	83 c0 3c             	add    eax,0x3c
c001fcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb6:	83 ec 0c             	sub    esp,0xc
c001fcb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcbc:	ff d0                	call   eax
c001fcbe:	83 c4 10             	add    esp,0x10
c001fcc1:	b8 00 00 00 00       	mov    eax,0x0
c001fcc6:	c9                   	leave  
c001fcc7:	c3                   	ret    

c001fcc8 <IOAPIC::close(int, int, void*)>:
c001fcc8:	b8 00 00 00 00       	mov    eax,0x0
c001fccd:	c3                   	ret    

c001fcce <APIC::io_wait()>:
c001fcce:	eb 00                	jmp    c001fcd0 <APIC::io_wait()+0x2>
c001fcd0:	eb 00                	jmp    c001fcd2 <APIC::io_wait()+0x4>
c001fcd2:	90                   	nop
c001fcd3:	c3                   	ret    

c001fcd4 <APIC::getBase()>:
c001fcd4:	55                   	push   ebp
c001fcd5:	89 e5                	mov    ebp,esp
c001fcd7:	83 ec 18             	sub    esp,0x18
c001fcda:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001fcdf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fce5:	83 e0 08             	and    eax,0x8
c001fce8:	84 c0                	test   al,al
c001fcea:	75 07                	jne    c001fcf3 <APIC::getBase()+0x1f>
c001fcec:	b8 00 00 00 00       	mov    eax,0x0
c001fcf1:	eb 21                	jmp    c001fd14 <APIC::getBase()+0x40>
c001fcf3:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001fcf8:	83 ec 08             	sub    esp,0x8
c001fcfb:	6a 1b                	push   0x1b
c001fcfd:	50                   	push   eax
c001fcfe:	e8 21 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd14:	c9                   	leave  
c001fd15:	c3                   	ret    

c001fd16 <APIC::eoi(unsigned char)>:
c001fd16:	55                   	push   ebp
c001fd17:	89 e5                	mov    ebp,esp
c001fd19:	83 ec 28             	sub    esp,0x28
c001fd1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd1f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd22:	83 ec 0c             	sub    esp,0xc
c001fd25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd28:	e8 a7 ff ff ff       	call   c001fcd4 <APIC::getBase()>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	05 b0 00 00 00       	add    eax,0xb0
c001fd35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd3b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd41:	90                   	nop
c001fd42:	c9                   	leave  
c001fd43:	c3                   	ret    

c001fd44 <APIC::open(int, int, void*)>:
c001fd44:	55                   	push   ebp
c001fd45:	89 e5                	mov    ebp,esp
c001fd47:	57                   	push   edi
c001fd48:	56                   	push   esi
c001fd49:	53                   	push   ebx
c001fd4a:	83 ec 2c             	sub    esp,0x2c
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd53:	e8 7c ff ff ff       	call   c001fcd4 <APIC::getBase()>
c001fd58:	83 c4 10             	add    esp,0x10
c001fd5b:	89 c2                	mov    edx,eax
c001fd5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd60:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd66:	0f b6 f8             	movzx  edi,al
c001fd69:	89 d0                	mov    eax,edx
c001fd6b:	ba 00 00 00 00       	mov    edx,0x0
c001fd70:	89 c1                	mov    ecx,eax
c001fd72:	80 e5 ff             	and    ch,0xff
c001fd75:	89 cb                	mov    ebx,ecx
c001fd77:	0f b6 f2             	movzx  esi,dl
c001fd7a:	89 d8                	mov    eax,ebx
c001fd7c:	89 f2                	mov    edx,esi
c001fd7e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd81:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd84:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd88:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd8c:	83 e0 00             	and    eax,0x0
c001fd8f:	09 d0                	or     eax,edx
c001fd91:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd98:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd9e:	8d 50 01             	lea    edx,[eax+0x1]
c001fda1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fda4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fdaa:	0f b6 d0             	movzx  edx,al
c001fdad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdb0:	83 c2 08             	add    edx,0x8
c001fdb3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fdb7:	0f b6 c9             	movzx  ecx,cl
c001fdba:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fdc0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdca:	e8 05 ff ff ff       	call   c001fcd4 <APIC::getBase()>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	05 f0 00 00 00       	add    eax,0xf0
c001fdd7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fdda:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fddd:	8b 00                	mov    eax,DWORD PTR [eax]
c001fddf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fde2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fde9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fdf0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fdf3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fdf6:	89 10                	mov    DWORD PTR [eax],edx
c001fdf8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fdff:	a1 90 6c 02 c0       	mov    eax,ds:0xc0026c90
c001fe04:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe07:	7d 7c                	jge    c001fe85 <APIC::open(int, int, void*)+0x141>
c001fe09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe0c:	8b 04 85 a0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9360]
c001fe13:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe16:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe19:	8b 04 85 a0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9360]
c001fe20:	c1 e8 08             	shr    eax,0x8
c001fe23:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe27:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe2a:	8b 04 85 a0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9360]
c001fe31:	c1 e8 18             	shr    eax,0x18
c001fe34:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe37:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe3b:	75 40                	jne    c001fe7d <APIC::open(int, int, void*)+0x139>
c001fe3d:	83 ec 0c             	sub    esp,0xc
c001fe40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe43:	e8 8c fe ff ff       	call   c001fcd4 <APIC::getBase()>
c001fe48:	83 c4 10             	add    esp,0x10
c001fe4b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe4f:	75 07                	jne    c001fe58 <APIC::open(int, int, void*)+0x114>
c001fe51:	ba 60 03 00 00       	mov    edx,0x360
c001fe56:	eb 05                	jmp    c001fe5d <APIC::open(int, int, void*)+0x119>
c001fe58:	ba 50 03 00 00       	mov    edx,0x350
c001fe5d:	01 d0                	add    eax,edx
c001fe5f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe62:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe65:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe67:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fe6a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fe71:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe75:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe78:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe7b:	89 10                	mov    DWORD PTR [eax],edx
c001fe7d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe80:	e9 7a ff ff ff       	jmp    c001fdff <APIC::open(int, int, void*)+0xbb>
c001fe85:	b8 00 00 00 00       	mov    eax,0x0
c001fe8a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe8d:	5b                   	pop    ebx
c001fe8e:	5e                   	pop    esi
c001fe8f:	5f                   	pop    edi
c001fe90:	5d                   	pop    ebp
c001fe91:	c3                   	ret    

c001fe92 <IOAPIC::IOAPIC()>:
c001fe92:	83 ec 0c             	sub    esp,0xc
c001fe95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe99:	83 ec 08             	sub    esp,0x8
c001fe9c:	68 04 54 02 c0       	push   0xc0025404
c001fea1:	50                   	push   eax
c001fea2:	e8 07 e2 fe ff       	call   c000e0ae <Device::Device(char const*)>
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	ba 2c 55 02 c0       	mov    edx,0xc002552c
c001feaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb3:	89 10                	mov    DWORD PTR [eax],edx
c001feb5:	90                   	nop
c001feb6:	83 c4 0c             	add    esp,0xc
c001feb9:	c3                   	ret    

c001feba <APIC::APIC()>:
c001feba:	53                   	push   ebx
c001febb:	83 ec 18             	sub    esp,0x18
c001febe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fec2:	83 ec 08             	sub    esp,0x8
c001fec5:	68 0c 54 02 c0       	push   0xc002540c
c001feca:	50                   	push   eax
c001fecb:	e8 56 e9 fe ff       	call   c000e826 <InterruptController::InterruptController(char const*)>
c001fed0:	83 c4 10             	add    esp,0x10
c001fed3:	ba e4 54 02 c0       	mov    edx,0xc00254e4
c001fed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fedc:	89 10                	mov    DWORD PTR [eax],edx
c001fede:	a0 60 83 02 c0       	mov    al,ds:0xc0028360
c001fee3:	83 f0 01             	xor    eax,0x1
c001fee6:	84 c0                	test   al,al
c001fee8:	0f 84 a1 00 00 00    	je     c001ff8f <APIC::APIC()+0xd5>
c001feee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fef3:	a0 40 6d 02 c0       	mov    al,ds:0xc0026d40
c001fef8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fefc:	0f 83 86 00 00 00    	jae    c001ff88 <APIC::APIC()+0xce>
c001ff02:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff11:	e8 ad 9a fe ff       	call   c00099c3 <malloc>
c001ff16:	83 c4 10             	add    esp,0x10
c001ff19:	89 c3                	mov    ebx,eax
c001ff1b:	83 ec 0c             	sub    esp,0xc
c001ff1e:	53                   	push   ebx
c001ff1f:	e8 6e ff ff ff       	call   c001fe92 <IOAPIC::IOAPIC()>
c001ff24:	83 c4 10             	add    esp,0x10
c001ff27:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff2b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff34:	89 14 85 40 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7cc0],edx
c001ff3b:	a1 20 83 02 c0       	mov    eax,ds:0xc0028320
c001ff40:	40                   	inc    eax
c001ff41:	a3 20 83 02 c0       	mov    ds:0xc0028320,eax
c001ff46:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c001ff4b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff51:	83 ec 08             	sub    esp,0x8
c001ff54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff58:	50                   	push   eax
c001ff59:	e8 4c df fe ff       	call   c000deaa <Device::addChild(Device*)>
c001ff5e:	83 c4 10             	add    esp,0x10
c001ff61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff67:	83 c0 08             	add    eax,0x8
c001ff6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ff71:	6a 00                	push   0x0
c001ff73:	6a 00                	push   0x0
c001ff75:	52                   	push   edx
c001ff76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff7a:	ff d0                	call   eax
c001ff7c:	83 c4 10             	add    esp,0x10
c001ff7f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff83:	e9 6b ff ff ff       	jmp    c001fef3 <APIC::APIC()+0x39>
c001ff88:	c6 05 60 83 02 c0 01 	mov    BYTE PTR ds:0xc0028360,0x1
c001ff8f:	90                   	nop
c001ff90:	83 c4 18             	add    esp,0x18
c001ff93:	5b                   	pop    ebx
c001ff94:	c3                   	ret    
c001ff95:	90                   	nop

c001ff96 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff96:	55                   	push   ebp
c001ff97:	89 e5                	mov    ebp,esp
c001ff99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffa2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffa5:	72 1d                	jb     c001ffc4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffaa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ffb9:	01 d0                	add    eax,edx
c001ffbb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffbe:	73 04                	jae    c001ffc4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffc0:	b0 01                	mov    al,0x1
c001ffc2:	eb 02                	jmp    c001ffc6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ffc4:	b0 00                	mov    al,0x0
c001ffc6:	5d                   	pop    ebp
c001ffc7:	c3                   	ret    

c001ffc8 <IOAPIC::read(int)>:
c001ffc8:	55                   	push   ebp
c001ffc9:	89 e5                	mov    ebp,esp
c001ffcb:	83 ec 10             	sub    esp,0x10
c001ffce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffd7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffdd:	0f b6 d0             	movzx  edx,al
c001ffe0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffe3:	89 10                	mov    DWORD PTR [eax],edx
c001ffe5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffe8:	83 c0 10             	add    eax,0x10
c001ffeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffed:	c9                   	leave  
c001ffee:	c3                   	ret    
c001ffef:	90                   	nop

c001fff0 <IOAPIC::open(int, int, void*)>:
c001fff0:	55                   	push   ebp
c001fff1:	89 e5                	mov    ebp,esp
c001fff3:	57                   	push   edi
c001fff4:	56                   	push   esi
c001fff5:	53                   	push   ebx
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	68 37 54 02 c0       	push   0xc0025437
c0020001:	e8 5e ca fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c0020006:	83 c4 10             	add    esp,0x10
c0020009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002000c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002000f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020018:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002001e:	8b 14 85 80 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9280]
c0020025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020028:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002002e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020031:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020037:	8b 14 85 00 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9200]
c002003e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020041:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020053:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020059:	0f b6 f8             	movzx  edi,al
c002005c:	89 d0                	mov    eax,edx
c002005e:	ba 00 00 00 00       	mov    edx,0x0
c0020063:	89 c1                	mov    ecx,eax
c0020065:	80 e5 ff             	and    ch,0xff
c0020068:	89 cb                	mov    ebx,ecx
c002006a:	0f b6 f2             	movzx  esi,dl
c002006d:	89 d8                	mov    eax,ebx
c002006f:	89 f2                	mov    edx,esi
c0020071:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020074:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020077:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002007b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002007f:	83 e0 00             	and    eax,0x0
c0020082:	09 d0                	or     eax,edx
c0020084:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002008b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020091:	8d 50 01             	lea    edx,[eax+0x1]
c0020094:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020097:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002009d:	0f b6 d0             	movzx  edx,al
c00200a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a3:	83 c2 08             	add    edx,0x8
c00200a6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200aa:	0f b6 c9             	movzx  ecx,cl
c00200ad:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200b3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200b7:	83 ec 08             	sub    esp,0x8
c00200ba:	6a 01                	push   0x1
c00200bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200bf:	e8 04 ff ff ff       	call   c001ffc8 <IOAPIC::read(int)>
c00200c4:	83 c4 10             	add    esp,0x10
c00200c7:	c1 f8 10             	sar    eax,0x10
c00200ca:	0f b6 c0             	movzx  eax,al
c00200cd:	8d 50 01             	lea    edx,[eax+0x1]
c00200d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200d3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00200d9:	b8 00 00 00 00       	mov    eax,0x0
c00200de:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200e1:	5b                   	pop    ebx
c00200e2:	5e                   	pop    esi
c00200e3:	5f                   	pop    edi
c00200e4:	5d                   	pop    ebp
c00200e5:	c3                   	ret    

c00200e6 <IOAPIC::write(int, int)>:
c00200e6:	55                   	push   ebp
c00200e7:	89 e5                	mov    ebp,esp
c00200e9:	83 ec 10             	sub    esp,0x10
c00200ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200f5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00200f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200fb:	0f b6 d0             	movzx  edx,al
c00200fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020101:	89 10                	mov    DWORD PTR [eax],edx
c0020103:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020106:	8d 50 10             	lea    edx,[eax+0x10]
c0020109:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002010c:	89 02                	mov    DWORD PTR [edx],eax
c002010e:	90                   	nop
c002010f:	c9                   	leave  
c0020110:	c3                   	ret    
c0020111:	90                   	nop

c0020112 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020112:	55                   	push   ebp
c0020113:	89 e5                	mov    ebp,esp
c0020115:	53                   	push   ebx
c0020116:	83 ec 2c             	sub    esp,0x2c
c0020119:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002011c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002011f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020122:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020125:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020128:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002012b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002012e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020131:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020134:	88 d8                	mov    al,bl
c0020136:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020139:	88 c8                	mov    al,cl
c002013b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002013e:	88 d0                	mov    al,dl
c0020140:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020143:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020147:	83 c0 08             	add    eax,0x8
c002014a:	01 c0                	add    eax,eax
c002014c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002014f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020153:	83 c0 08             	add    eax,0x8
c0020156:	01 c0                	add    eax,eax
c0020158:	40                   	inc    eax
c0020159:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002015c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002015f:	50                   	push   eax
c0020160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020163:	e8 60 fe ff ff       	call   c001ffc8 <IOAPIC::read(int)>
c0020168:	83 c4 08             	add    esp,0x8
c002016b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002016e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020175:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020178:	c1 e0 18             	shl    eax,0x18
c002017b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002017e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020181:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020184:	52                   	push   edx
c0020185:	50                   	push   eax
c0020186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020189:	e8 58 ff ff ff       	call   c00200e6 <IOAPIC::write(int, int)>
c002018e:	83 c4 0c             	add    esp,0xc
c0020191:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020194:	50                   	push   eax
c0020195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020198:	e8 2b fe ff ff       	call   c001ffc8 <IOAPIC::read(int)>
c002019d:	83 c4 08             	add    esp,0x8
c00201a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201a3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201aa:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201b1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201b8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201bc:	74 09                	je     c00201c7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00201be:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201c5:	eb 07                	jmp    c00201ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00201c7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00201ce:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00201d2:	74 09                	je     c00201dd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00201d4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00201db:	eb 07                	jmp    c00201e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00201dd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201e4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201eb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201ef:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00201f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00201f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201f8:	52                   	push   edx
c00201f9:	50                   	push   eax
c00201fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201fd:	e8 e4 fe ff ff       	call   c00200e6 <IOAPIC::write(int, int)>
c0020202:	83 c4 0c             	add    esp,0xc
c0020205:	90                   	nop
c0020206:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020209:	c9                   	leave  
c002020a:	c3                   	ret    
c002020b:	90                   	nop

c002020c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002020c:	55                   	push   ebp
c002020d:	89 e5                	mov    ebp,esp
c002020f:	57                   	push   edi
c0020210:	56                   	push   esi
c0020211:	53                   	push   ebx
c0020212:	83 ec 2c             	sub    esp,0x2c
c0020215:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020218:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002021b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002021f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0020223:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020227:	74 5a                	je     c0020283 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020229:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002022d:	7f 44                	jg     c0020273 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002022f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020232:	05 e0 5a 02 c0       	add    eax,0xc0025ae0
c0020237:	8a 00                	mov    al,BYTE PTR [eax]
c0020239:	0f b6 c0             	movzx  eax,al
c002023c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002023f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020242:	66 8b 84 00 20 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92e0]
c002024a:	0f b7 c0             	movzx  eax,ax
c002024d:	83 e0 02             	and    eax,0x2
c0020250:	85 c0                	test   eax,eax
c0020252:	74 04                	je     c0020258 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0020254:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0020258:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002025b:	66 8b 84 00 20 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92e0]
c0020263:	0f b7 c0             	movzx  eax,ax
c0020266:	83 e0 08             	and    eax,0x8
c0020269:	85 c0                	test   eax,eax
c002026b:	74 16                	je     c0020283 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002026d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020271:	eb 10                	jmp    c0020283 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020273:	83 ec 0c             	sub    esp,0xc
c0020276:	68 48 54 02 c0       	push   0xc0025448
c002027b:	e8 a5 40 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0020280:	83 c4 10             	add    esp,0x10
c0020283:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020287:	a1 20 83 02 c0       	mov    eax,ds:0xc0028320
c002028c:	83 ec 08             	sub    esp,0x8
c002028f:	50                   	push   eax
c0020290:	68 80 54 02 c0       	push   0xc0025480
c0020295:	e8 ca c7 fe ff       	call   c000ca64 <Dbg::kprintf(char const*, ...)>
c002029a:	83 c4 10             	add    esp,0x10
c002029d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00202a4:	a1 20 83 02 c0       	mov    eax,ds:0xc0028320
c00202a9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00202ac:	7d 67                	jge    c0020315 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202b1:	8b 04 85 40 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7cc0]
c00202b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202bb:	83 ec 08             	sub    esp,0x8
c00202be:	52                   	push   edx
c00202bf:	50                   	push   eax
c00202c0:	e8 d1 fc ff ff       	call   c001ff96 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	84 c0                	test   al,al
c00202ca:	74 44                	je     c0020310 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00202cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202cf:	8b 1c 85 40 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7cc0]
c00202d6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00202da:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00202dd:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00202e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202e4:	83 c0 20             	add    eax,0x20
c00202e7:	0f b6 f0             	movzx  esi,al
c00202ea:	b8 00 00 00 00       	mov    eax,0x0
c00202ef:	99                   	cdq    
c00202f0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00202f3:	0f b6 c9             	movzx  ecx,cl
c00202f6:	83 ec 04             	sub    esp,0x4
c00202f9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00202fc:	57                   	push   edi
c00202fd:	56                   	push   esi
c00202fe:	52                   	push   edx
c00202ff:	50                   	push   eax
c0020300:	51                   	push   ecx
c0020301:	53                   	push   ebx
c0020302:	e8 0b fe ff ff       	call   c0020112 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020307:	83 c4 20             	add    esp,0x20
c002030a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002030e:	eb 05                	jmp    c0020315 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020310:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020313:	eb 8f                	jmp    c00202a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020315:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020318:	83 f0 01             	xor    eax,0x1
c002031b:	84 c0                	test   al,al
c002031d:	74 10                	je     c002032f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	68 97 54 02 c0       	push   0xc0025497
c0020327:	e8 f9 3f ff ff       	call   c0014325 <Krnl::panic(char const*)>
c002032c:	83 c4 10             	add    esp,0x10
c002032f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0020333:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002033a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002033e:	7f 65                	jg     c00203a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020343:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020346:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002034d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020350:	01 ca                	add    edx,ecx
c0020352:	83 c2 54             	add    edx,0x54
c0020355:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0020359:	85 c0                	test   eax,eax
c002035b:	75 43                	jne    c00203a0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002035d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020363:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002036a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002036d:	01 ca                	add    edx,ecx
c002036f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020372:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020375:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002037c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002037f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020386:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020389:	01 ca                	add    edx,ecx
c002038b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020391:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020394:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020398:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002039b:	83 e8 20             	sub    eax,0x20
c002039e:	eb 1a                	jmp    c00203ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203a0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203a3:	eb 95                	jmp    c002033a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00203a5:	83 ec 0c             	sub    esp,0xc
c00203a8:	68 a4 54 02 c0       	push   0xc00254a4
c00203ad:	e8 73 3f ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00203b2:	83 c4 10             	add    esp,0x10
c00203b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00203ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c00203bd:	5b                   	pop    ebx
c00203be:	5e                   	pop    esi
c00203bf:	5f                   	pop    edi
c00203c0:	5d                   	pop    ebp
c00203c1:	c3                   	ret    

c00203c2 <PIC::disable()>:
c00203c2:	55                   	push   ebp
c00203c3:	89 e5                	mov    ebp,esp
c00203c5:	83 ec 10             	sub    esp,0x10
c00203c8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00203ce:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00203d2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00203d5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00203d9:	ee                   	out    dx,al
c00203da:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00203e0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00203e4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00203e7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00203eb:	ee                   	out    dx,al
c00203ec:	90                   	nop
c00203ed:	c9                   	leave  
c00203ee:	c3                   	ret    
c00203ef:	90                   	nop

c00203f0 <PIC::close(int, int, void*)>:
c00203f0:	55                   	push   ebp
c00203f1:	89 e5                	mov    ebp,esp
c00203f3:	83 ec 08             	sub    esp,0x8
c00203f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00203fb:	83 c0 3c             	add    eax,0x3c
c00203fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020400:	83 ec 0c             	sub    esp,0xc
c0020403:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020406:	ff d0                	call   eax
c0020408:	83 c4 10             	add    esp,0x10
c002040b:	b8 00 00 00 00       	mov    eax,0x0
c0020410:	c9                   	leave  
c0020411:	c3                   	ret    

c0020412 <PIC::PIC()>:
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020419:	83 ec 08             	sub    esp,0x8
c002041c:	68 50 55 02 c0       	push   0xc0025550
c0020421:	50                   	push   eax
c0020422:	e8 ff e3 fe ff       	call   c000e826 <InterruptController::InterruptController(char const*)>
c0020427:	83 c4 10             	add    esp,0x10
c002042a:	ba 7c 55 02 c0       	mov    edx,0xc002557c
c002042f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020433:	89 10                	mov    DWORD PTR [eax],edx
c0020435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020439:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002043f:	0f b6 d0             	movzx  edx,al
c0020442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020446:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020451:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020457:	0f b6 d0             	movzx  edx,al
c002045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020467:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002046d:	8d 50 01             	lea    edx,[eax+0x1]
c0020470:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020474:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002047a:	0f b6 d0             	movzx  edx,al
c002047d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020481:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020485:	83 e1 3f             	and    ecx,0x3f
c0020488:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002048c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020490:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020496:	0f b6 d0             	movzx  edx,al
c0020499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00204a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204ae:	0f b6 d0             	movzx  edx,al
c00204b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204c4:	8d 50 01             	lea    edx,[eax+0x1]
c00204c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204d1:	0f b6 d0             	movzx  edx,al
c00204d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204dc:	83 e1 3f             	and    ecx,0x3f
c00204df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204e3:	90                   	nop
c00204e4:	83 c4 0c             	add    esp,0xc
c00204e7:	c3                   	ret    

c00204e8 <PIC::ioWait()>:
c00204e8:	eb 00                	jmp    c00204ea <PIC::ioWait()+0x2>
c00204ea:	eb 00                	jmp    c00204ec <PIC::ioWait()+0x4>
c00204ec:	90                   	nop
c00204ed:	c3                   	ret    

c00204ee <PIC::getIRQReg(int)>:
c00204ee:	55                   	push   ebp
c00204ef:	89 e5                	mov    ebp,esp
c00204f1:	83 ec 10             	sub    esp,0x10
c00204f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204f7:	0f b6 c0             	movzx  eax,al
c00204fa:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020500:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0020503:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020506:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002050a:	ee                   	out    dx,al
c002050b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002050e:	0f b6 c0             	movzx  eax,al
c0020511:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020517:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002051a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002051d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020521:	ee                   	out    dx,al
c0020522:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020528:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002052c:	89 c2                	mov    edx,eax
c002052e:	ec                   	in     al,dx
c002052f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0020532:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020535:	0f b6 c0             	movzx  eax,al
c0020538:	c1 e0 08             	shl    eax,0x8
c002053b:	89 c1                	mov    ecx,eax
c002053d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020543:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0020547:	89 c2                	mov    edx,eax
c0020549:	ec                   	in     al,dx
c002054a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002054d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020550:	0f b6 c0             	movzx  eax,al
c0020553:	09 c8                	or     eax,ecx
c0020555:	c9                   	leave  
c0020556:	c3                   	ret    
c0020557:	90                   	nop

c0020558 <PIC::eoi(unsigned char)>:
c0020558:	55                   	push   ebp
c0020559:	89 e5                	mov    ebp,esp
c002055b:	83 ec 14             	sub    esp,0x14
c002055e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020561:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020564:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020568:	75 1e                	jne    c0020588 <PIC::eoi(unsigned char)+0x30>
c002056a:	6a 0b                	push   0xb
c002056c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002056f:	e8 7a ff ff ff       	call   c00204ee <PIC::getIRQReg(int)>
c0020574:	83 c4 08             	add    esp,0x8
c0020577:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002057b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002057f:	25 80 00 00 00       	and    eax,0x80
c0020584:	85 c0                	test   eax,eax
c0020586:	74 5f                	je     c00205e7 <PIC::eoi(unsigned char)+0x8f>
c0020588:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002058c:	75 2d                	jne    c00205bb <PIC::eoi(unsigned char)+0x63>
c002058e:	6a 0b                	push   0xb
c0020590:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020593:	e8 56 ff ff ff       	call   c00204ee <PIC::getIRQReg(int)>
c0020598:	83 c4 08             	add    esp,0x8
c002059b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002059f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205a2:	66 85 c0             	test   ax,ax
c00205a5:	78 14                	js     c00205bb <PIC::eoi(unsigned char)+0x63>
c00205a7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00205ad:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00205b1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205b4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00205b8:	ee                   	out    dx,al
c00205b9:	eb 2d                	jmp    c00205e8 <PIC::eoi(unsigned char)+0x90>
c00205bb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205bf:	76 12                	jbe    c00205d3 <PIC::eoi(unsigned char)+0x7b>
c00205c1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205c7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00205cb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00205ce:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00205d2:	ee                   	out    dx,al
c00205d3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00205d9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00205dd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00205e0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205e4:	ee                   	out    dx,al
c00205e5:	eb 01                	jmp    c00205e8 <PIC::eoi(unsigned char)+0x90>
c00205e7:	90                   	nop
c00205e8:	c9                   	leave  
c00205e9:	c3                   	ret    

c00205ea <PIC::remap()>:
c00205ea:	55                   	push   ebp
c00205eb:	89 e5                	mov    ebp,esp
c00205ed:	83 ec 48             	sub    esp,0x48
c00205f0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00205f7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00205fe:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020604:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020607:	89 c2                	mov    edx,eax
c0020609:	ec                   	in     al,dx
c002060a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002060d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020610:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020613:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020619:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002061c:	89 c2                	mov    edx,eax
c002061e:	ec                   	in     al,dx
c002061f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0020622:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020625:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020628:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002062e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0020632:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020635:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020638:	ee                   	out    dx,al
c0020639:	83 ec 0c             	sub    esp,0xc
c002063c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002063f:	e8 a4 fe ff ff       	call   c00204e8 <PIC::ioWait()>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002064d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020651:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020654:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0020657:	ee                   	out    dx,al
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002065e:	e8 85 fe ff ff       	call   c00204e8 <PIC::ioWait()>
c0020663:	83 c4 10             	add    esp,0x10
c0020666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020669:	0f b6 c0             	movzx  eax,al
c002066c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020672:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020675:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020678:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002067b:	ee                   	out    dx,al
c002067c:	83 ec 0c             	sub    esp,0xc
c002067f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020682:	e8 61 fe ff ff       	call   c00204e8 <PIC::ioWait()>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002068d:	0f b6 c0             	movzx  eax,al
c0020690:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020696:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020699:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002069c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002069f:	ee                   	out    dx,al
c00206a0:	83 ec 0c             	sub    esp,0xc
c00206a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206a6:	e8 3d fe ff ff       	call   c00204e8 <PIC::ioWait()>
c00206ab:	83 c4 10             	add    esp,0x10
c00206ae:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00206b4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00206b8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00206bb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00206be:	ee                   	out    dx,al
c00206bf:	83 ec 0c             	sub    esp,0xc
c00206c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206c5:	e8 1e fe ff ff       	call   c00204e8 <PIC::ioWait()>
c00206ca:	83 c4 10             	add    esp,0x10
c00206cd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00206d3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00206d7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00206da:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00206dd:	ee                   	out    dx,al
c00206de:	83 ec 0c             	sub    esp,0xc
c00206e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206e4:	e8 ff fd ff ff       	call   c00204e8 <PIC::ioWait()>
c00206e9:	83 c4 10             	add    esp,0x10
c00206ec:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00206f2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00206f6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00206f9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00206fc:	ee                   	out    dx,al
c00206fd:	83 ec 0c             	sub    esp,0xc
c0020700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020703:	e8 e0 fd ff ff       	call   c00204e8 <PIC::ioWait()>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020711:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020715:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020718:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002071b:	ee                   	out    dx,al
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020722:	e8 c1 fd ff ff       	call   c00204e8 <PIC::ioWait()>
c0020727:	83 c4 10             	add    esp,0x10
c002072a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002072e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020734:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0020737:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002073a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002073d:	ee                   	out    dx,al
c002073e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020742:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0020748:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002074b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002074e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020751:	ee                   	out    dx,al
c0020752:	90                   	nop
c0020753:	c9                   	leave  
c0020754:	c3                   	ret    
c0020755:	90                   	nop

c0020756 <PIC::open(int, int, void*)>:
c0020756:	55                   	push   ebp
c0020757:	89 e5                	mov    ebp,esp
c0020759:	83 ec 18             	sub    esp,0x18
c002075c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020762:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0020766:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020769:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002076d:	ee                   	out    dx,al
c002076e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020774:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020778:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002077b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002077f:	ee                   	out    dx,al
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020786:	e8 5f fe ff ff       	call   c00205ea <PIC::remap()>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	b8 00 00 00 00       	mov    eax,0x0
c0020793:	c9                   	leave  
c0020794:	c3                   	ret    
c0020795:	66 90                	xchg   ax,ax
c0020797:	90                   	nop

c0020798 <APICTimer::close(int, int, void*)>:
c0020798:	b8 00 00 00 00       	mov    eax,0x0
c002079d:	c3                   	ret    
c002079e:	66 90                	xchg   ax,ax

c00207a0 <apicTimerHandler(regs*, void*)>:
c00207a0:	83 ec 0c             	sub    esp,0xc
c00207a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00207a9:	b8 10 27 00 00       	mov    eax,0x2710
c00207ae:	ba 00 00 00 00       	mov    edx,0x0
c00207b3:	f7 f1                	div    ecx
c00207b5:	83 ec 0c             	sub    esp,0xc
c00207b8:	50                   	push   eax
c00207b9:	e8 73 ff fe ff       	call   c0010731 <timerHandler(unsigned int)>
c00207be:	83 c4 10             	add    esp,0x10
c00207c1:	90                   	nop
c00207c2:	83 c4 0c             	add    esp,0xc
c00207c5:	c3                   	ret    
c00207c6:	66 90                	xchg   ax,ax

c00207c8 <APICTimer::write(int)>:
c00207c8:	83 ec 1c             	sub    esp,0x1c
c00207cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00207d9:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00207de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207ea:	83 ec 0c             	sub    esp,0xc
c00207ed:	50                   	push   eax
c00207ee:	e8 e1 f4 ff ff       	call   c001fcd4 <APIC::getBase()>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207fa:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00207ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020807:	05 e0 03 00 00       	add    eax,0x3e0
c002080c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020816:	05 80 03 00 00       	add    eax,0x380
c002081b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0020821:	fb                   	sti    
c0020822:	66 90                	xchg   ax,ax
c0020824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020828:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002082e:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0020833:	39 c2                	cmp    edx,eax
c0020835:	76 05                	jbe    c002083c <APICTimer::write(int)+0x74>
c0020837:	eb eb                	jmp    c0020824 <APICTimer::write(int)+0x5c>
c0020839:	8d 76 00             	lea    esi,[esi+0x0]
c002083c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020840:	05 20 03 00 00       	add    eax,0x320
c0020845:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002084b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002084f:	05 90 03 00 00       	add    eax,0x390
c0020854:	8b 00                	mov    eax,DWORD PTR [eax]
c0020856:	f7 d0                	not    eax
c0020858:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002085c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020864:	ba 00 00 00 00       	mov    edx,0x0
c0020869:	f7 f1                	div    ecx
c002086b:	89 04 24             	mov    DWORD PTR [esp],eax
c002086e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020872:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020878:	0d 00 00 02 00       	or     eax,0x20000
c002087d:	89 c2                	mov    edx,eax
c002087f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020883:	05 20 03 00 00       	add    eax,0x320
c0020888:	89 10                	mov    DWORD PTR [eax],edx
c002088a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002088e:	05 e0 03 00 00       	add    eax,0x3e0
c0020893:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002089d:	05 80 03 00 00       	add    eax,0x380
c00208a2:	89 c2                	mov    edx,eax
c00208a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00208a7:	89 02                	mov    DWORD PTR [edx],eax
c00208a9:	90                   	nop
c00208aa:	83 c4 1c             	add    esp,0x1c
c00208ad:	c3                   	ret    
c00208ae:	66 90                	xchg   ax,ax

c00208b0 <APICTimer::open(int, int, void*)>:
c00208b0:	57                   	push   edi
c00208b1:	56                   	push   esi
c00208b2:	53                   	push   ebx
c00208b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b9:	83 c0 24             	add    eax,0x24
c00208bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00208be:	83 ec 08             	sub    esp,0x8
c00208c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c9:	ff d0                	call   eax
c00208cb:	83 c4 10             	add    esp,0x10
c00208ce:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c00208d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208d9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00208df:	83 ec 0c             	sub    esp,0xc
c00208e2:	50                   	push   eax
c00208e3:	e8 ec f3 ff ff       	call   c001fcd4 <APIC::getBase()>
c00208e8:	83 c4 10             	add    esp,0x10
c00208eb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00208f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208fb:	0f b6 f8             	movzx  edi,al
c00208fe:	89 d0                	mov    eax,edx
c0020900:	ba 00 00 00 00       	mov    edx,0x0
c0020905:	89 c1                	mov    ecx,eax
c0020907:	80 e5 ff             	and    ch,0xff
c002090a:	89 cb                	mov    ebx,ecx
c002090c:	0f b6 f2             	movzx  esi,dl
c002090f:	89 d8                	mov    eax,ebx
c0020911:	89 f2                	mov    edx,esi
c0020913:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020917:	8d 5f 08             	lea    ebx,[edi+0x8]
c002091a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002091e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020922:	83 e0 00             	and    eax,0x0
c0020925:	09 d0                	or     eax,edx
c0020927:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002092f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020935:	8d 50 01             	lea    edx,[eax+0x1]
c0020938:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002093c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020942:	0f b6 d0             	movzx  edx,al
c0020945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020949:	83 c2 08             	add    edx,0x8
c002094c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020950:	0f b6 c9             	movzx  ecx,cl
c0020953:	81 c9 00 00 01 00    	or     ecx,0x10000
c0020959:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002095d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020961:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020965:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002096b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002096f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020973:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020979:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002097d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020983:	83 ec 0c             	sub    esp,0xc
c0020986:	51                   	push   ecx
c0020987:	6a 01                	push   0x1
c0020989:	68 a0 07 02 c0       	push   0xc00207a0
c002098e:	52                   	push   edx
c002098f:	50                   	push   eax
c0020990:	e8 8d d4 fe ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020995:	83 c4 20             	add    esp,0x20
c0020998:	89 c2                	mov    edx,eax
c002099a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00209a4:	b8 00 00 00 00       	mov    eax,0x0
c00209a9:	5b                   	pop    ebx
c00209aa:	5e                   	pop    esi
c00209ab:	5f                   	pop    edi
c00209ac:	c3                   	ret    
c00209ad:	90                   	nop
c00209ae:	66 90                	xchg   ax,ax

c00209b0 <APICTimer::APICTimer()>:
c00209b0:	83 ec 0c             	sub    esp,0xc
c00209b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209b7:	83 ec 08             	sub    esp,0x8
c00209ba:	68 bc 55 02 c0       	push   0xc00255bc
c00209bf:	50                   	push   eax
c00209c0:	e8 db fc fe ff       	call   c00106a0 <Timer::Timer(char const*)>
c00209c5:	83 c4 10             	add    esp,0x10
c00209c8:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c00209cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d1:	89 10                	mov    DWORD PTR [eax],edx
c00209d3:	90                   	nop
c00209d4:	83 c4 0c             	add    esp,0xc
c00209d7:	c3                   	ret    

c00209d8 <PIT::write(int)>:
c00209d8:	83 ec 10             	sub    esp,0x10
c00209db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209ed:	a3 64 83 02 c0       	mov    ds:0xc0028364,eax
c00209f2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00209f7:	99                   	cdq    
c00209f8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00209fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a00:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a07:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a0c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a10:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a15:	ee                   	out    dx,al
c0020a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a1a:	0f b6 c0             	movzx  eax,al
c0020a1d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a24:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a28:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a2c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a31:	ee                   	out    dx,al
c0020a32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a36:	c1 f8 08             	sar    eax,0x8
c0020a39:	0f b6 c0             	movzx  eax,al
c0020a3c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a43:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020a47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020a50:	ee                   	out    dx,al
c0020a51:	90                   	nop
c0020a52:	83 c4 10             	add    esp,0x10
c0020a55:	c3                   	ret    
c0020a56:	66 90                	xchg   ax,ax

c0020a58 <pitHandler(regs*, void*)>:
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	8b 0d 64 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028364
c0020a61:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020a66:	99                   	cdq    
c0020a67:	f7 f9                	idiv   ecx
c0020a69:	83 ec 0c             	sub    esp,0xc
c0020a6c:	50                   	push   eax
c0020a6d:	e8 bf fc fe ff       	call   c0010731 <timerHandler(unsigned int)>
c0020a72:	83 c4 10             	add    esp,0x10
c0020a75:	90                   	nop
c0020a76:	83 c4 0c             	add    esp,0xc
c0020a79:	c3                   	ret    
c0020a7a:	66 90                	xchg   ax,ax

c0020a7c <PIT::open(int, int, void*)>:
c0020a7c:	83 ec 0c             	sub    esp,0xc
c0020a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a85:	83 c0 24             	add    eax,0x24
c0020a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8a:	83 ec 08             	sub    esp,0x8
c0020a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a95:	ff d0                	call   eax
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a9e:	83 ec 0c             	sub    esp,0xc
c0020aa1:	6a 00                	push   0x0
c0020aa3:	6a 01                	push   0x1
c0020aa5:	68 58 0a 02 c0       	push   0xc0020a58
c0020aaa:	6a 00                	push   0x0
c0020aac:	50                   	push   eax
c0020aad:	e8 70 d3 fe ff       	call   c000de22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ab2:	83 c4 20             	add    esp,0x20
c0020ab5:	89 c2                	mov    edx,eax
c0020ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020abb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020ac1:	b8 00 00 00 00       	mov    eax,0x0
c0020ac6:	83 c4 0c             	add    esp,0xc
c0020ac9:	c3                   	ret    
c0020aca:	66 90                	xchg   ax,ax

c0020acc <PIT::close(int, int, void*)>:
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae1:	6a 01                	push   0x1
c0020ae3:	68 58 0a 02 c0       	push   0xc0020a58
c0020ae8:	6a 00                	push   0x0
c0020aea:	50                   	push   eax
c0020aeb:	e8 7c d3 fe ff       	call   c000de6c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020af0:	83 c4 10             	add    esp,0x10
c0020af3:	b8 00 00 00 00       	mov    eax,0x0
c0020af8:	83 c4 0c             	add    esp,0xc
c0020afb:	c3                   	ret    

c0020afc <PIT::PIT()>:
c0020afc:	83 ec 0c             	sub    esp,0xc
c0020aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b03:	83 ec 08             	sub    esp,0x8
c0020b06:	68 f8 55 02 c0       	push   0xc00255f8
c0020b0b:	50                   	push   eax
c0020b0c:	e8 8f fb fe ff       	call   c00106a0 <Timer::Timer(char const*)>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	ba 20 56 02 c0       	mov    edx,0xc0025620
c0020b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1d:	89 10                	mov    DWORD PTR [eax],edx
c0020b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b29:	0f b6 d0             	movzx  edx,al
c0020b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b30:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b41:	0f b6 d0             	movzx  edx,al
c0020b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b48:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b57:	8d 50 01             	lea    edx,[eax+0x1]
c0020b5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b5e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020b64:	0f b6 d0             	movzx  edx,al
c0020b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020b6f:	83 e1 3f             	and    ecx,0x3f
c0020b72:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b76:	90                   	nop
c0020b77:	83 c4 0c             	add    esp,0xc
c0020b7a:	c3                   	ret    
c0020b7b:	66 90                	xchg   ax,ax
c0020b7d:	66 90                	xchg   ax,ax
c0020b7f:	90                   	nop

c0020b80 <avxDetect>:
c0020b80:	b8 00 00 00 00       	mov    eax,0x0
c0020b85:	c3                   	ret    

c0020b86 <avxSave>:
c0020b86:	c3                   	ret    

c0020b87 <avxLoad>:
c0020b87:	c3                   	ret    

c0020b88 <avxInit>:
c0020b88:	c3                   	ret    

c0020b89 <avxClose>:
c0020b89:	c3                   	ret    

c0020b8a <wouldSheSayYes>:
c0020b8a:	c3                   	ret    
c0020b8b:	49                   	dec    ecx
c0020b8c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020b90:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020b94:	75 20                	jne    c0020bb6 <sseDetect.noSSE+0x1>
c0020b96:	4e                   	dec    esi
c0020b97:	79 61                	jns    c0020bfa <x87Detect+0x14>
c0020b99:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020b9e:	66 90                	xchg   ax,ax

c0020ba0 <absolutelyNoChanceInHell>:
c0020ba0:	b8 01 00 00 00       	mov    eax,0x1
c0020ba5:	0f a2                	cpuid  
c0020ba7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020bad:	74 06                	je     c0020bb5 <sseDetect.noSSE>
c0020baf:	b8 01 00 00 00       	mov    eax,0x1
c0020bb4:	c3                   	ret    

c0020bb5 <sseDetect.noSSE>:
c0020bb5:	31 c0                	xor    eax,eax
c0020bb7:	c3                   	ret    

c0020bb8 <sseSave>:
c0020bb8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020bbd:	c3                   	ret    

c0020bbe <sseLoad>:
c0020bbe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020bc3:	c3                   	ret    

c0020bc4 <sseInit>:
c0020bc4:	e8 49 00 00 00       	call   c0020c12 <x87Init>
c0020bc9:	0f 20 e0             	mov    eax,cr4
c0020bcc:	66 0d 00 06          	or     ax,0x600
c0020bd0:	0f 22 e0             	mov    cr4,eax
c0020bd3:	c3                   	ret    

c0020bd4 <sseClose>:
c0020bd4:	c3                   	ret    
c0020bd5:	66 90                	xchg   ax,ax
c0020bd7:	66 90                	xchg   ax,ax
c0020bd9:	66 90                	xchg   ax,ax
c0020bdb:	66 90                	xchg   ax,ax
c0020bdd:	66 90                	xchg   ax,ax
c0020bdf:	90                   	nop

c0020be0 <value_37F>:
c0020be0:	7f 03                	jg     c0020be5 <value_37A+0x1>

c0020be2 <value_37E>:
c0020be2:	7e 03                	jle    c0020be7 <x87Detect+0x1>

c0020be4 <value_37A>:
c0020be4:	7a 03                	jp     c0020be9 <x87Detect+0x3>

c0020be6 <x87Detect>:
c0020be6:	b8 01 00 00 00       	mov    eax,0x1
c0020beb:	0f a2                	cpuid  
c0020bed:	f7 c2 01 00 00 00    	test   edx,0x1
c0020bf3:	74 06                	je     c0020bfb <x87Detect.nox87>
c0020bf5:	b8 01 00 00 00       	mov    eax,0x1
c0020bfa:	c3                   	ret    

c0020bfb <x87Detect.nox87>:
c0020bfb:	b8 00 00 00 00       	mov    eax,0x0
c0020c00:	c3                   	ret    

c0020c01 <x87Save>:
c0020c01:	55                   	push   ebp
c0020c02:	89 e5                	mov    ebp,esp
c0020c04:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c08:	c9                   	leave  
c0020c09:	c3                   	ret    

c0020c0a <x87Load>:
c0020c0a:	55                   	push   ebp
c0020c0b:	89 e5                	mov    ebp,esp
c0020c0d:	dd 65 08             	frstor [ebp+0x8]
c0020c10:	c9                   	leave  
c0020c11:	c3                   	ret    

c0020c12 <x87Init>:
c0020c12:	9b db e3             	finit  
c0020c15:	0f 20 c0             	mov    eax,cr0
c0020c18:	66 25 fb ff          	and    ax,0xfffb
c0020c1c:	66 0d 22 00          	or     ax,0x22
c0020c20:	0f 22 c0             	mov    cr0,eax
c0020c23:	0f 06                	clts   
c0020c25:	d9 2d e4 0b 02 c0    	fldcw  WORD PTR ds:0xc0020be4
c0020c2b:	c3                   	ret    

c0020c2c <x87Close>:
c0020c2c:	c3                   	ret    
c0020c2d:	66 90                	xchg   ax,ax
c0020c2f:	90                   	nop

c0020c30 <__do_global_ctors_aux>:
c0020c30:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c0020c35:	83 f8 ff             	cmp    eax,0xffffffff
c0020c38:	74 1a                	je     c0020c54 <__do_global_ctors_aux+0x24>
c0020c3a:	55                   	push   ebp
c0020c3b:	89 e5                	mov    ebp,esp
c0020c3d:	53                   	push   ebx
c0020c3e:	52                   	push   edx
c0020c3f:	bb cc 1d 02 c0       	mov    ebx,0xc0021dcc
c0020c44:	ff d0                	call   eax
c0020c46:	83 eb 04             	sub    ebx,0x4
c0020c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c4b:	83 f8 ff             	cmp    eax,0xffffffff
c0020c4e:	75 f4                	jne    c0020c44 <__do_global_ctors_aux+0x14>
c0020c50:	58                   	pop    eax
c0020c51:	5b                   	pop    ebx
c0020c52:	5d                   	pop    ebp
c0020c53:	c3                   	ret    
c0020c54:	c3                   	ret    
c0020c55:	66 90                	xchg   ax,ax
c0020c57:	90                   	nop

c0020c58 <__divdi3>:
c0020c58:	55                   	push   ebp
c0020c59:	57                   	push   edi
c0020c5a:	56                   	push   esi
c0020c5b:	53                   	push   ebx
c0020c5c:	83 ec 1c             	sub    esp,0x1c
c0020c5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020c63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c6a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c76:	85 db                	test   ebx,ebx
c0020c78:	0f 88 8e 00 00 00    	js     c0020d0c <__divdi3+0xb4>
c0020c7e:	89 dd                	mov    ebp,ebx
c0020c80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c88:	89 d3                	mov    ebx,edx
c0020c8a:	85 d2                	test   edx,edx
c0020c8c:	79 0d                	jns    c0020c9b <__divdi3+0x43>
c0020c8e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020c92:	f7 d8                	neg    eax
c0020c94:	83 d2 00             	adc    edx,0x0
c0020c97:	f7 da                	neg    edx
c0020c99:	89 d3                	mov    ebx,edx
c0020c9b:	89 c7                	mov    edi,eax
c0020c9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ca0:	85 db                	test   ebx,ebx
c0020ca2:	75 48                	jne    c0020cec <__divdi3+0x94>
c0020ca4:	39 ef                	cmp    edi,ebp
c0020ca6:	76 24                	jbe    c0020ccc <__divdi3+0x74>
c0020ca8:	89 ea                	mov    edx,ebp
c0020caa:	f7 f7                	div    edi
c0020cac:	89 c1                	mov    ecx,eax
c0020cae:	31 f6                	xor    esi,esi
c0020cb0:	89 c8                	mov    eax,ecx
c0020cb2:	89 f2                	mov    edx,esi
c0020cb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020cb8:	85 c9                	test   ecx,ecx
c0020cba:	74 07                	je     c0020cc3 <__divdi3+0x6b>
c0020cbc:	f7 d8                	neg    eax
c0020cbe:	83 d2 00             	adc    edx,0x0
c0020cc1:	f7 da                	neg    edx
c0020cc3:	83 c4 1c             	add    esp,0x1c
c0020cc6:	5b                   	pop    ebx
c0020cc7:	5e                   	pop    esi
c0020cc8:	5f                   	pop    edi
c0020cc9:	5d                   	pop    ebp
c0020cca:	c3                   	ret    
c0020ccb:	90                   	nop
c0020ccc:	85 ff                	test   edi,edi
c0020cce:	75 0b                	jne    c0020cdb <__divdi3+0x83>
c0020cd0:	b8 01 00 00 00       	mov    eax,0x1
c0020cd5:	31 d2                	xor    edx,edx
c0020cd7:	f7 f3                	div    ebx
c0020cd9:	89 c7                	mov    edi,eax
c0020cdb:	31 d2                	xor    edx,edx
c0020cdd:	89 e8                	mov    eax,ebp
c0020cdf:	f7 f7                	div    edi
c0020ce1:	89 c6                	mov    esi,eax
c0020ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ce6:	f7 f7                	div    edi
c0020ce8:	89 c1                	mov    ecx,eax
c0020cea:	eb c4                	jmp    c0020cb0 <__divdi3+0x58>
c0020cec:	39 eb                	cmp    ebx,ebp
c0020cee:	77 3c                	ja     c0020d2c <__divdi3+0xd4>
c0020cf0:	0f bd f3             	bsr    esi,ebx
c0020cf3:	83 f6 1f             	xor    esi,0x1f
c0020cf6:	75 40                	jne    c0020d38 <__divdi3+0xe0>
c0020cf8:	39 eb                	cmp    ebx,ebp
c0020cfa:	72 09                	jb     c0020d05 <__divdi3+0xad>
c0020cfc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020cff:	0f 87 97 00 00 00    	ja     c0020d9c <__divdi3+0x144>
c0020d05:	b9 01 00 00 00       	mov    ecx,0x1
c0020d0a:	eb a4                	jmp    c0020cb0 <__divdi3+0x58>
c0020d0c:	f7 d9                	neg    ecx
c0020d0e:	83 d3 00             	adc    ebx,0x0
c0020d11:	f7 db                	neg    ebx
c0020d13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d1a:	89 dd                	mov    ebp,ebx
c0020d1c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d24:	e9 5f ff ff ff       	jmp    c0020c88 <__divdi3+0x30>
c0020d29:	8d 76 00             	lea    esi,[esi+0x0]
c0020d2c:	31 f6                	xor    esi,esi
c0020d2e:	31 c9                	xor    ecx,ecx
c0020d30:	e9 7b ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d35:	8d 76 00             	lea    esi,[esi+0x0]
c0020d38:	b8 20 00 00 00       	mov    eax,0x20
c0020d3d:	29 f0                	sub    eax,esi
c0020d3f:	89 f1                	mov    ecx,esi
c0020d41:	d3 e3                	shl    ebx,cl
c0020d43:	89 fa                	mov    edx,edi
c0020d45:	88 c1                	mov    cl,al
c0020d47:	d3 ea                	shr    edx,cl
c0020d49:	09 da                	or     edx,ebx
c0020d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d4f:	89 f1                	mov    ecx,esi
c0020d51:	d3 e7                	shl    edi,cl
c0020d53:	89 eb                	mov    ebx,ebp
c0020d55:	88 c1                	mov    cl,al
c0020d57:	d3 eb                	shr    ebx,cl
c0020d59:	89 f1                	mov    ecx,esi
c0020d5b:	d3 e5                	shl    ebp,cl
c0020d5d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020d60:	88 c1                	mov    cl,al
c0020d62:	d3 ea                	shr    edx,cl
c0020d64:	09 d5                	or     ebp,edx
c0020d66:	89 e8                	mov    eax,ebp
c0020d68:	89 da                	mov    edx,ebx
c0020d6a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020d6e:	89 d3                	mov    ebx,edx
c0020d70:	89 c5                	mov    ebp,eax
c0020d72:	f7 e7                	mul    edi
c0020d74:	39 d3                	cmp    ebx,edx
c0020d76:	72 18                	jb     c0020d90 <__divdi3+0x138>
c0020d78:	74 0a                	je     c0020d84 <__divdi3+0x12c>
c0020d7a:	89 e9                	mov    ecx,ebp
c0020d7c:	31 f6                	xor    esi,esi
c0020d7e:	e9 2d ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d83:	90                   	nop
c0020d84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d87:	89 f1                	mov    ecx,esi
c0020d89:	d3 e7                	shl    edi,cl
c0020d8b:	39 c7                	cmp    edi,eax
c0020d8d:	73 eb                	jae    c0020d7a <__divdi3+0x122>
c0020d8f:	90                   	nop
c0020d90:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020d93:	31 f6                	xor    esi,esi
c0020d95:	e9 16 ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d9a:	66 90                	xchg   ax,ax
c0020d9c:	31 c9                	xor    ecx,ecx
c0020d9e:	e9 0d ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020da3:	90                   	nop

c0020da4 <__moddi3>:
c0020da4:	55                   	push   ebp
c0020da5:	57                   	push   edi
c0020da6:	56                   	push   esi
c0020da7:	53                   	push   ebx
c0020da8:	83 ec 2c             	sub    esp,0x2c
c0020dab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020daf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020db3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020db7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020dbb:	85 db                	test   ebx,ebx
c0020dbd:	0f 88 85 00 00 00    	js     c0020e48 <__moddi3+0xa4>
c0020dc3:	89 de                	mov    esi,ebx
c0020dc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020dcd:	89 d7                	mov    edi,edx
c0020dcf:	85 d2                	test   edx,edx
c0020dd1:	79 09                	jns    c0020ddc <__moddi3+0x38>
c0020dd3:	f7 d8                	neg    eax
c0020dd5:	83 d2 00             	adc    edx,0x0
c0020dd8:	f7 da                	neg    edx
c0020dda:	89 d7                	mov    edi,edx
c0020ddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020de0:	89 cd                	mov    ebp,ecx
c0020de2:	85 ff                	test   edi,edi
c0020de4:	75 52                	jne    c0020e38 <__moddi3+0x94>
c0020de6:	89 c3                	mov    ebx,eax
c0020de8:	39 f0                	cmp    eax,esi
c0020dea:	76 24                	jbe    c0020e10 <__moddi3+0x6c>
c0020dec:	89 c8                	mov    eax,ecx
c0020dee:	89 f2                	mov    edx,esi
c0020df0:	f7 f3                	div    ebx
c0020df2:	89 d6                	mov    esi,edx
c0020df4:	89 f0                	mov    eax,esi
c0020df6:	31 d2                	xor    edx,edx
c0020df8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dfc:	85 c9                	test   ecx,ecx
c0020dfe:	74 07                	je     c0020e07 <__moddi3+0x63>
c0020e00:	f7 d8                	neg    eax
c0020e02:	83 d2 00             	adc    edx,0x0
c0020e05:	f7 da                	neg    edx
c0020e07:	83 c4 2c             	add    esp,0x2c
c0020e0a:	5b                   	pop    ebx
c0020e0b:	5e                   	pop    esi
c0020e0c:	5f                   	pop    edi
c0020e0d:	5d                   	pop    ebp
c0020e0e:	c3                   	ret    
c0020e0f:	90                   	nop
c0020e10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e14:	85 db                	test   ebx,ebx
c0020e16:	75 0d                	jne    c0020e25 <__moddi3+0x81>
c0020e18:	b8 01 00 00 00       	mov    eax,0x1
c0020e1d:	31 d2                	xor    edx,edx
c0020e1f:	f7 f7                	div    edi
c0020e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e25:	89 f0                	mov    eax,esi
c0020e27:	31 d2                	xor    edx,edx
c0020e29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e2d:	f7 f7                	div    edi
c0020e2f:	89 e8                	mov    eax,ebp
c0020e31:	f7 f7                	div    edi
c0020e33:	89 d6                	mov    esi,edx
c0020e35:	eb bd                	jmp    c0020df4 <__moddi3+0x50>
c0020e37:	90                   	nop
c0020e38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e3c:	39 f7                	cmp    edi,esi
c0020e3e:	76 20                	jbe    c0020e60 <__moddi3+0xbc>
c0020e40:	89 c8                	mov    eax,ecx
c0020e42:	89 f2                	mov    edx,esi
c0020e44:	eb b2                	jmp    c0020df8 <__moddi3+0x54>
c0020e46:	66 90                	xchg   ax,ax
c0020e48:	f7 d9                	neg    ecx
c0020e4a:	83 d3 00             	adc    ebx,0x0
c0020e4d:	f7 db                	neg    ebx
c0020e4f:	89 de                	mov    esi,ebx
c0020e51:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020e59:	e9 6f ff ff ff       	jmp    c0020dcd <__moddi3+0x29>
c0020e5e:	66 90                	xchg   ax,ax
c0020e60:	0f bd c7             	bsr    eax,edi
c0020e63:	83 f0 1f             	xor    eax,0x1f
c0020e66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e6a:	75 24                	jne    c0020e90 <__moddi3+0xec>
c0020e6c:	39 f7                	cmp    edi,esi
c0020e6e:	72 06                	jb     c0020e76 <__moddi3+0xd2>
c0020e70:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e74:	77 0c                	ja     c0020e82 <__moddi3+0xde>
c0020e76:	89 e9                	mov    ecx,ebp
c0020e78:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e7c:	19 fe                	sbb    esi,edi
c0020e7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e86:	89 f2                	mov    edx,esi
c0020e88:	e9 6b ff ff ff       	jmp    c0020df8 <__moddi3+0x54>
c0020e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e90:	b8 20 00 00 00       	mov    eax,0x20
c0020e95:	89 c2                	mov    edx,eax
c0020e97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e9b:	29 da                	sub    edx,ebx
c0020e9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020ea1:	88 d9                	mov    cl,bl
c0020ea3:	d3 e7                	shl    edi,cl
c0020ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ea9:	88 d1                	mov    cl,dl
c0020eab:	d3 e8                	shr    eax,cl
c0020ead:	09 c7                	or     edi,eax
c0020eaf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020eb3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020eb7:	89 d8                	mov    eax,ebx
c0020eb9:	88 d9                	mov    cl,bl
c0020ebb:	d3 e7                	shl    edi,cl
c0020ebd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020ec1:	89 f3                	mov    ebx,esi
c0020ec3:	88 d1                	mov    cl,dl
c0020ec5:	d3 eb                	shr    ebx,cl
c0020ec7:	89 c7                	mov    edi,eax
c0020ec9:	88 c1                	mov    cl,al
c0020ecb:	d3 e6                	shl    esi,cl
c0020ecd:	89 e8                	mov    eax,ebp
c0020ecf:	88 d1                	mov    cl,dl
c0020ed1:	d3 e8                	shr    eax,cl
c0020ed3:	09 f0                	or     eax,esi
c0020ed5:	89 f9                	mov    ecx,edi
c0020ed7:	d3 e5                	shl    ebp,cl
c0020ed9:	89 da                	mov    edx,ebx
c0020edb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020edf:	89 d3                	mov    ebx,edx
c0020ee1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ee5:	89 c6                	mov    esi,eax
c0020ee7:	89 d1                	mov    ecx,edx
c0020ee9:	39 d3                	cmp    ebx,edx
c0020eeb:	72 27                	jb     c0020f14 <__moddi3+0x170>
c0020eed:	74 21                	je     c0020f10 <__moddi3+0x16c>
c0020eef:	29 f5                	sub    ebp,esi
c0020ef1:	19 cb                	sbb    ebx,ecx
c0020ef3:	89 de                	mov    esi,ebx
c0020ef5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020ef9:	d3 e6                	shl    esi,cl
c0020efb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020eff:	89 f9                	mov    ecx,edi
c0020f01:	d3 ed                	shr    ebp,cl
c0020f03:	09 ee                	or     esi,ebp
c0020f05:	89 f0                	mov    eax,esi
c0020f07:	d3 eb                	shr    ebx,cl
c0020f09:	89 da                	mov    edx,ebx
c0020f0b:	e9 e8 fe ff ff       	jmp    c0020df8 <__moddi3+0x54>
c0020f10:	39 c5                	cmp    ebp,eax
c0020f12:	73 db                	jae    c0020eef <__moddi3+0x14b>
c0020f14:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f18:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f1c:	89 d1                	mov    ecx,edx
c0020f1e:	89 c6                	mov    esi,eax
c0020f20:	eb cd                	jmp    c0020eef <__moddi3+0x14b>
c0020f22:	66 90                	xchg   ax,ax

c0020f24 <__udivdi3>:
c0020f24:	55                   	push   ebp
c0020f25:	57                   	push   edi
c0020f26:	56                   	push   esi
c0020f27:	53                   	push   ebx
c0020f28:	83 ec 1c             	sub    esp,0x1c
c0020f2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f3b:	85 d2                	test   edx,edx
c0020f3d:	75 41                	jne    c0020f80 <__udivdi3+0x5c>
c0020f3f:	39 f7                	cmp    edi,esi
c0020f41:	76 15                	jbe    c0020f58 <__udivdi3+0x34>
c0020f43:	89 e8                	mov    eax,ebp
c0020f45:	89 f2                	mov    edx,esi
c0020f47:	f7 f7                	div    edi
c0020f49:	31 db                	xor    ebx,ebx
c0020f4b:	89 da                	mov    edx,ebx
c0020f4d:	83 c4 1c             	add    esp,0x1c
c0020f50:	5b                   	pop    ebx
c0020f51:	5e                   	pop    esi
c0020f52:	5f                   	pop    edi
c0020f53:	5d                   	pop    ebp
c0020f54:	c3                   	ret    
c0020f55:	8d 76 00             	lea    esi,[esi+0x0]
c0020f58:	89 f9                	mov    ecx,edi
c0020f5a:	85 ff                	test   edi,edi
c0020f5c:	75 0b                	jne    c0020f69 <__udivdi3+0x45>
c0020f5e:	b8 01 00 00 00       	mov    eax,0x1
c0020f63:	31 d2                	xor    edx,edx
c0020f65:	f7 f7                	div    edi
c0020f67:	89 c1                	mov    ecx,eax
c0020f69:	31 d2                	xor    edx,edx
c0020f6b:	89 f0                	mov    eax,esi
c0020f6d:	f7 f1                	div    ecx
c0020f6f:	89 c3                	mov    ebx,eax
c0020f71:	89 e8                	mov    eax,ebp
c0020f73:	f7 f1                	div    ecx
c0020f75:	89 da                	mov    edx,ebx
c0020f77:	83 c4 1c             	add    esp,0x1c
c0020f7a:	5b                   	pop    ebx
c0020f7b:	5e                   	pop    esi
c0020f7c:	5f                   	pop    edi
c0020f7d:	5d                   	pop    ebp
c0020f7e:	c3                   	ret    
c0020f7f:	90                   	nop
c0020f80:	39 f2                	cmp    edx,esi
c0020f82:	77 1c                	ja     c0020fa0 <__udivdi3+0x7c>
c0020f84:	0f bd da             	bsr    ebx,edx
c0020f87:	83 f3 1f             	xor    ebx,0x1f
c0020f8a:	75 24                	jne    c0020fb0 <__udivdi3+0x8c>
c0020f8c:	39 f2                	cmp    edx,esi
c0020f8e:	72 08                	jb     c0020f98 <__udivdi3+0x74>
c0020f90:	39 ef                	cmp    edi,ebp
c0020f92:	0f 87 84 00 00 00    	ja     c002101c <__udivdi3+0xf8>
c0020f98:	b8 01 00 00 00       	mov    eax,0x1
c0020f9d:	eb ac                	jmp    c0020f4b <__udivdi3+0x27>
c0020f9f:	90                   	nop
c0020fa0:	31 db                	xor    ebx,ebx
c0020fa2:	31 c0                	xor    eax,eax
c0020fa4:	89 da                	mov    edx,ebx
c0020fa6:	83 c4 1c             	add    esp,0x1c
c0020fa9:	5b                   	pop    ebx
c0020faa:	5e                   	pop    esi
c0020fab:	5f                   	pop    edi
c0020fac:	5d                   	pop    ebp
c0020fad:	c3                   	ret    
c0020fae:	66 90                	xchg   ax,ax
c0020fb0:	b8 20 00 00 00       	mov    eax,0x20
c0020fb5:	29 d8                	sub    eax,ebx
c0020fb7:	88 d9                	mov    cl,bl
c0020fb9:	d3 e2                	shl    edx,cl
c0020fbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020fbf:	89 fa                	mov    edx,edi
c0020fc1:	88 c1                	mov    cl,al
c0020fc3:	d3 ea                	shr    edx,cl
c0020fc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020fc9:	09 d1                	or     ecx,edx
c0020fcb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020fcf:	88 d9                	mov    cl,bl
c0020fd1:	d3 e7                	shl    edi,cl
c0020fd3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020fd7:	89 f7                	mov    edi,esi
c0020fd9:	88 c1                	mov    cl,al
c0020fdb:	d3 ef                	shr    edi,cl
c0020fdd:	88 d9                	mov    cl,bl
c0020fdf:	d3 e6                	shl    esi,cl
c0020fe1:	89 ea                	mov    edx,ebp
c0020fe3:	88 c1                	mov    cl,al
c0020fe5:	d3 ea                	shr    edx,cl
c0020fe7:	09 d6                	or     esi,edx
c0020fe9:	89 f0                	mov    eax,esi
c0020feb:	89 fa                	mov    edx,edi
c0020fed:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020ff1:	89 d7                	mov    edi,edx
c0020ff3:	89 c6                	mov    esi,eax
c0020ff5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ff9:	39 d7                	cmp    edi,edx
c0020ffb:	72 13                	jb     c0021010 <__udivdi3+0xec>
c0020ffd:	74 09                	je     c0021008 <__udivdi3+0xe4>
c0020fff:	89 f0                	mov    eax,esi
c0021001:	31 db                	xor    ebx,ebx
c0021003:	e9 43 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c0021008:	88 d9                	mov    cl,bl
c002100a:	d3 e5                	shl    ebp,cl
c002100c:	39 c5                	cmp    ebp,eax
c002100e:	73 ef                	jae    c0020fff <__udivdi3+0xdb>
c0021010:	8d 46 ff             	lea    eax,[esi-0x1]
c0021013:	31 db                	xor    ebx,ebx
c0021015:	e9 31 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c002101a:	66 90                	xchg   ax,ax
c002101c:	31 c0                	xor    eax,eax
c002101e:	e9 28 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c0021023:	90                   	nop

c0021024 <__umoddi3>:
c0021024:	55                   	push   ebp
c0021025:	57                   	push   edi
c0021026:	56                   	push   esi
c0021027:	53                   	push   ebx
c0021028:	83 ec 1c             	sub    esp,0x1c
c002102b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002102f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021033:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021037:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002103b:	89 da                	mov    edx,ebx
c002103d:	85 c0                	test   eax,eax
c002103f:	75 37                	jne    c0021078 <__umoddi3+0x54>
c0021041:	39 df                	cmp    edi,ebx
c0021043:	76 13                	jbe    c0021058 <__umoddi3+0x34>
c0021045:	89 f0                	mov    eax,esi
c0021047:	f7 f7                	div    edi
c0021049:	89 d0                	mov    eax,edx
c002104b:	31 d2                	xor    edx,edx
c002104d:	83 c4 1c             	add    esp,0x1c
c0021050:	5b                   	pop    ebx
c0021051:	5e                   	pop    esi
c0021052:	5f                   	pop    edi
c0021053:	5d                   	pop    ebp
c0021054:	c3                   	ret    
c0021055:	8d 76 00             	lea    esi,[esi+0x0]
c0021058:	89 fd                	mov    ebp,edi
c002105a:	85 ff                	test   edi,edi
c002105c:	75 0b                	jne    c0021069 <__umoddi3+0x45>
c002105e:	b8 01 00 00 00       	mov    eax,0x1
c0021063:	31 d2                	xor    edx,edx
c0021065:	f7 f7                	div    edi
c0021067:	89 c5                	mov    ebp,eax
c0021069:	89 d8                	mov    eax,ebx
c002106b:	31 d2                	xor    edx,edx
c002106d:	f7 f5                	div    ebp
c002106f:	89 f0                	mov    eax,esi
c0021071:	f7 f5                	div    ebp
c0021073:	89 d0                	mov    eax,edx
c0021075:	eb d4                	jmp    c002104b <__umoddi3+0x27>
c0021077:	90                   	nop
c0021078:	89 f1                	mov    ecx,esi
c002107a:	39 d8                	cmp    eax,ebx
c002107c:	76 0a                	jbe    c0021088 <__umoddi3+0x64>
c002107e:	89 f0                	mov    eax,esi
c0021080:	83 c4 1c             	add    esp,0x1c
c0021083:	5b                   	pop    ebx
c0021084:	5e                   	pop    esi
c0021085:	5f                   	pop    edi
c0021086:	5d                   	pop    ebp
c0021087:	c3                   	ret    
c0021088:	0f bd e8             	bsr    ebp,eax
c002108b:	83 f5 1f             	xor    ebp,0x1f
c002108e:	75 1c                	jne    c00210ac <__umoddi3+0x88>
c0021090:	39 d8                	cmp    eax,ebx
c0021092:	72 04                	jb     c0021098 <__umoddi3+0x74>
c0021094:	39 f7                	cmp    edi,esi
c0021096:	77 08                	ja     c00210a0 <__umoddi3+0x7c>
c0021098:	89 da                	mov    edx,ebx
c002109a:	29 fe                	sub    esi,edi
c002109c:	19 c2                	sbb    edx,eax
c002109e:	89 f1                	mov    ecx,esi
c00210a0:	89 c8                	mov    eax,ecx
c00210a2:	83 c4 1c             	add    esp,0x1c
c00210a5:	5b                   	pop    ebx
c00210a6:	5e                   	pop    esi
c00210a7:	5f                   	pop    edi
c00210a8:	5d                   	pop    ebp
c00210a9:	c3                   	ret    
c00210aa:	66 90                	xchg   ax,ax
c00210ac:	ba 20 00 00 00       	mov    edx,0x20
c00210b1:	29 ea                	sub    edx,ebp
c00210b3:	89 e9                	mov    ecx,ebp
c00210b5:	d3 e0                	shl    eax,cl
c00210b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210bb:	89 f8                	mov    eax,edi
c00210bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210c1:	88 d1                	mov    cl,dl
c00210c3:	d3 e8                	shr    eax,cl
c00210c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210c9:	09 c1                	or     ecx,eax
c00210cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00210cf:	89 e9                	mov    ecx,ebp
c00210d1:	d3 e7                	shl    edi,cl
c00210d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210d7:	89 d8                	mov    eax,ebx
c00210d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210dd:	88 d1                	mov    cl,dl
c00210df:	d3 e8                	shr    eax,cl
c00210e1:	89 c7                	mov    edi,eax
c00210e3:	89 e9                	mov    ecx,ebp
c00210e5:	d3 e3                	shl    ebx,cl
c00210e7:	89 f0                	mov    eax,esi
c00210e9:	88 d1                	mov    cl,dl
c00210eb:	d3 e8                	shr    eax,cl
c00210ed:	09 d8                	or     eax,ebx
c00210ef:	89 e9                	mov    ecx,ebp
c00210f1:	d3 e6                	shl    esi,cl
c00210f3:	89 f3                	mov    ebx,esi
c00210f5:	89 fa                	mov    edx,edi
c00210f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00210fb:	89 d1                	mov    ecx,edx
c00210fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021101:	89 c6                	mov    esi,eax
c0021103:	89 d7                	mov    edi,edx
c0021105:	39 d1                	cmp    ecx,edx
c0021107:	72 27                	jb     c0021130 <__umoddi3+0x10c>
c0021109:	74 21                	je     c002112c <__umoddi3+0x108>
c002110b:	89 ca                	mov    edx,ecx
c002110d:	29 f3                	sub    ebx,esi
c002110f:	19 fa                	sbb    edx,edi
c0021111:	89 d0                	mov    eax,edx
c0021113:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021117:	d3 e0                	shl    eax,cl
c0021119:	89 e9                	mov    ecx,ebp
c002111b:	d3 eb                	shr    ebx,cl
c002111d:	09 d8                	or     eax,ebx
c002111f:	d3 ea                	shr    edx,cl
c0021121:	83 c4 1c             	add    esp,0x1c
c0021124:	5b                   	pop    ebx
c0021125:	5e                   	pop    esi
c0021126:	5f                   	pop    edi
c0021127:	5d                   	pop    ebp
c0021128:	c3                   	ret    
c0021129:	8d 76 00             	lea    esi,[esi+0x0]
c002112c:	39 c3                	cmp    ebx,eax
c002112e:	73 db                	jae    c002110b <__umoddi3+0xe7>
c0021130:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021134:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021138:	89 d7                	mov    edi,edx
c002113a:	89 c6                	mov    esi,eax
c002113c:	eb cd                	jmp    c002110b <__umoddi3+0xe7>

Disassembly of section .init:

c002113e <_init>:
c002113e:	55                   	push   ebp
c002113f:	89 e5                	mov    ebp,esp
c0021141:	e8 d2 ef fd ff       	call   c0000118 <frame_dummy>
c0021146:	e8 e5 fa ff ff       	call   c0020c30 <__do_global_ctors_aux>
c002114b:	5d                   	pop    ebp
c002114c:	c3                   	ret    

Disassembly of section .fini:

c002114d <_fini>:
c002114d:	55                   	push   ebp
c002114e:	89 e5                	mov    ebp,esp
c0021150:	e8 53 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021155:	5d                   	pop    ebp
c0021156:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021158 <Computer::~Computer()>:
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	ba 74 27 02 c0       	mov    edx,0xc0022774
c0021160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021164:	89 10                	mov    DWORD PTR [eax],edx
c0021166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116a:	83 ec 0c             	sub    esp,0xc
c002116d:	50                   	push   eax
c002116e:	e8 05 cc fe ff       	call   c000dd78 <Device::~Device()>
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	90                   	nop
c0021177:	83 c4 0c             	add    esp,0xc
c002117a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002117c <Computer::~Computer()>:
c002117c:	83 ec 0c             	sub    esp,0xc
c002117f:	83 ec 0c             	sub    esp,0xc
c0021182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021186:	e8 cd ff ff ff       	call   c0021158 <Computer::~Computer()>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	83 ec 08             	sub    esp,0x8
c0021191:	68 ec 01 00 00       	push   0x1ec
c0021196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002119a:	e8 e4 b7 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	83 c4 0c             	add    esp,0xc
c00211a5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00211a6 <idleCommon()>:
c00211a6:	83 ec 0c             	sub    esp,0xc
c00211a9:	fa                   	cli    
c00211aa:	ff 05 e8 78 02 c0    	inc    DWORD PTR ds:0xc00278e8
c00211b0:	e8 43 6d ff ff       	call   c0017ef8 <schedule()>
c00211b5:	a1 e8 78 02 c0       	mov    eax,ds:0xc00278e8
c00211ba:	48                   	dec    eax
c00211bb:	a3 e8 78 02 c0       	mov    ds:0xc00278e8,eax
c00211c0:	75 01                	jne    c00211c3 <idleCommon()+0x1d>
c00211c2:	fb                   	sti    
c00211c3:	83 c4 0c             	add    esp,0xc
c00211c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00211c8 <LinkedList<UnixFile>::~LinkedList()>:
c00211c8:	90                   	nop
c00211c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00211ca <LinkedList<UnixFile>::LinkedList()>:
c00211ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021203:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002120a:	90                   	nop
c002120b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002120c:	83 ec 0c             	sub    esp,0xc
c002120f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021214:	75 10                	jne    c0021226 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	68 84 2a 02 c0       	push   0xc0022a84
c002121e:	e8 02 31 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021223:	83 c4 10             	add    esp,0x10
c0021226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122a:	8b 00                	mov    eax,DWORD PTR [eax]
c002122c:	85 c0                	test   eax,eax
c002122e:	74 34                	je     c0021264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021237:	85 c0                	test   eax,eax
c0021239:	74 29                	je     c0021264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002123b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021246:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021251:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021258:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002125b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021262:	eb 65                	jmp    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021268:	8b 00                	mov    eax,DWORD PTR [eax]
c002126a:	85 c0                	test   eax,eax
c002126c:	75 4b                	jne    c00212b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021272:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021275:	85 c0                	test   eax,eax
c0021277:	75 40                	jne    c00212b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021281:	89 10                	mov    DWORD PTR [eax],edx
c0021283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021287:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002128b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021295:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212a3:	85 c0                	test   eax,eax
c00212a5:	74 22                	je     c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212a7:	83 ec 0c             	sub    esp,0xc
c00212aa:	68 a6 2a 02 c0       	push   0xc0022aa6
c00212af:	e8 71 30 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00212b4:	83 c4 10             	add    esp,0x10
c00212b7:	eb 10                	jmp    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212b9:	83 ec 0c             	sub    esp,0xc
c00212bc:	68 b0 2a 02 c0       	push   0xc0022ab0
c00212c1:	e8 5f 30 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00212c6:	83 c4 10             	add    esp,0x10
c00212c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212d0:	8d 50 01             	lea    edx,[eax+0x1]
c00212d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212da:	90                   	nop
c00212db:	83 c4 0c             	add    esp,0xc
c00212de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00212e0 <LinkedList<UnixFile>::getFirstElement()>:
c00212e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00212e8 <LinkedList<UnixFile>::removeFirst()>:
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f1:	85 c0                	test   eax,eax
c00212f3:	75 12                	jne    c0021307 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	68 bc 2a 02 c0       	push   0xc0022abc
c00212fd:	e8 23 30 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021302:	83 c4 10             	add    esp,0x10
c0021305:	eb 7e                	jmp    c0021385 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002130e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021311:	85 c0                	test   eax,eax
c0021313:	74 10                	je     c0021325 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021315:	83 ec 0c             	sub    esp,0xc
c0021318:	68 07 2b 02 c0       	push   0xc0022b07
c002131d:	e8 03 30 ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021322:	83 c4 10             	add    esp,0x10
c0021325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021329:	8b 00                	mov    eax,DWORD PTR [eax]
c002132b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002132e:	85 c0                	test   eax,eax
c0021330:	75 33                	jne    c0021365 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021336:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002133c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021340:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002134e:	83 f8 01             	cmp    eax,0x1
c0021351:	74 21                	je     c0021374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	68 e0 2a 02 c0       	push   0xc0022ae0
c002135b:	e8 c5 2f ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021360:	83 c4 10             	add    esp,0x10
c0021363:	eb 0f                	jmp    c0021374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021369:	8b 00                	mov    eax,DWORD PTR [eax]
c002136b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002136e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021372:	89 10                	mov    DWORD PTR [eax],edx
c0021374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021378:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002137b:	8d 50 ff             	lea    edx,[eax-0x1]
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021385:	83 c4 0c             	add    esp,0xc
c0021388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002138a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002138a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002138e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021391:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021392 <DriverlessDevice::~DriverlessDevice()>:
c0021392:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c0021397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002139b:	89 10                	mov    DWORD PTR [eax],edx
c002139d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a1:	50                   	push   eax
c00213a2:	e8 d1 c9 fe ff       	call   c000dd78 <Device::~Device()>
c00213a7:	83 c4 04             	add    esp,0x4
c00213aa:	90                   	nop
c00213ab:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00213ac <DriverlessDevice::~DriverlessDevice()>:
c00213ac:	83 ec 0c             	sub    esp,0xc
c00213af:	83 ec 0c             	sub    esp,0xc
c00213b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213b6:	e8 d7 ff ff ff       	call   c0021392 <DriverlessDevice::~DriverlessDevice()>
c00213bb:	83 c4 10             	add    esp,0x10
c00213be:	83 ec 08             	sub    esp,0x8
c00213c1:	68 58 01 00 00       	push   0x158
c00213c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213ca:	e8 b4 b5 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c00213cf:	83 c4 10             	add    esp,0x10
c00213d2:	83 c4 0c             	add    esp,0xc
c00213d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00213d6 <LinkedList<Device>::addElement(Device*)>:
c00213d6:	83 ec 0c             	sub    esp,0xc
c00213d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00213de:	75 10                	jne    c00213f0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	68 84 2a 02 c0       	push   0xc0022a84
c00213e8:	e8 38 2f ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00213ed:	83 c4 10             	add    esp,0x10
c00213f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f6:	85 c0                	test   eax,eax
c00213f8:	74 3a                	je     c0021434 <LinkedList<Device>::addElement(Device*)+0x5e>
c00213fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021401:	85 c0                	test   eax,eax
c0021403:	74 2f                	je     c0021434 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021409:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002140c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021410:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002141e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021428:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021432:	eb 68                	jmp    c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c0021434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021438:	8b 00                	mov    eax,DWORD PTR [eax]
c002143a:	85 c0                	test   eax,eax
c002143c:	75 4e                	jne    c002148c <LinkedList<Device>::addElement(Device*)+0xb6>
c002143e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021445:	85 c0                	test   eax,eax
c0021447:	75 43                	jne    c002148c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021451:	89 10                	mov    DWORD PTR [eax],edx
c0021453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021457:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002145b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002145e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021465:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002146f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021473:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021476:	85 c0                	test   eax,eax
c0021478:	74 22                	je     c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c002147a:	83 ec 0c             	sub    esp,0xc
c002147d:	68 a6 2a 02 c0       	push   0xc0022aa6
c0021482:	e8 9e 2e ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021487:	83 c4 10             	add    esp,0x10
c002148a:	eb 10                	jmp    c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c002148c:	83 ec 0c             	sub    esp,0xc
c002148f:	68 b0 2a 02 c0       	push   0xc0022ab0
c0021494:	e8 8c 2e ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021499:	83 c4 10             	add    esp,0x10
c002149c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214a3:	8d 50 01             	lea    edx,[eax+0x1]
c00214a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00214ad:	90                   	nop
c00214ae:	83 c4 0c             	add    esp,0xc
c00214b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00214b2 <LinkedList<Device>::LinkedList()>:
c00214b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214f2:	90                   	nop
c00214f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00214f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214fa:	85 c0                	test   eax,eax
c00214fc:	75 0e                	jne    c002150c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00214fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021505:	85 c0                	test   eax,eax
c0021507:	75 03                	jne    c002150c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021509:	b0 01                	mov    al,0x1
c002150b:	c3                   	ret    
c002150c:	b0 00                	mov    al,0x0
c002150e:	90                   	nop
c002150f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021514:	8b 00                	mov    eax,DWORD PTR [eax]
c0021516:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021518:	83 ec 0c             	sub    esp,0xc
c002151b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021521:	85 c0                	test   eax,eax
c0021523:	75 17                	jne    c002153c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021525:	83 ec 0c             	sub    esp,0xc
c0021528:	68 bc 2a 02 c0       	push   0xc0022abc
c002152d:	e8 f3 2d ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021532:	83 c4 10             	add    esp,0x10
c0021535:	e9 92 00 00 00       	jmp    c00215cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002153a:	66 90                	xchg   ax,ax
c002153c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021543:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021546:	85 c0                	test   eax,eax
c0021548:	0f 95 c0             	setne  al
c002154b:	84 c0                	test   al,al
c002154d:	74 11                	je     c0021560 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002154f:	83 ec 0c             	sub    esp,0xc
c0021552:	68 07 2b 02 c0       	push   0xc0022b07
c0021557:	e8 c9 2d ff ff       	call   c0014325 <Krnl::panic(char const*)>
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	90                   	nop
c0021560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021564:	8b 00                	mov    eax,DWORD PTR [eax]
c0021566:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021569:	85 c0                	test   eax,eax
c002156b:	0f 94 c0             	sete   al
c002156e:	84 c0                	test   al,al
c0021570:	74 36                	je     c00215a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021576:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021580:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002158e:	83 f8 01             	cmp    eax,0x1
c0021591:	74 25                	je     c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021593:	83 ec 0c             	sub    esp,0xc
c0021596:	68 e0 2a 02 c0       	push   0xc0022ae0
c002159b:	e8 85 2d ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00215a0:	83 c4 10             	add    esp,0x10
c00215a3:	eb 13                	jmp    c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215a5:	8d 76 00             	lea    esi,[esi+0x0]
c00215a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00215ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00215b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b5:	89 10                	mov    DWORD PTR [eax],edx
c00215b7:	90                   	nop
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00215c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215c9:	8d 76 00             	lea    esi,[esi+0x0]
c00215cc:	83 c4 0c             	add    esp,0xc
c00215cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00215d0:	83 ec 0c             	sub    esp,0xc
c00215d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215d8:	75 12                	jne    c00215ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00215da:	83 ec 0c             	sub    esp,0xc
c00215dd:	68 84 2a 02 c0       	push   0xc0022a84
c00215e2:	e8 3e 2d ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	66 90                	xchg   ax,ax
c00215ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f2:	85 c0                	test   eax,eax
c00215f4:	74 36                	je     c002162c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00215f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215fd:	85 c0                	test   eax,eax
c00215ff:	74 2b                	je     c002162c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002160c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002160f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021617:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002161a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021621:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021628:	eb 6a                	jmp    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002162a:	66 90                	xchg   ax,ax
c002162c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021630:	8b 00                	mov    eax,DWORD PTR [eax]
c0021632:	85 c0                	test   eax,eax
c0021634:	75 4e                	jne    c0021684 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002163d:	85 c0                	test   eax,eax
c002163f:	75 43                	jne    c0021684 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021645:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021649:	89 10                	mov    DWORD PTR [eax],edx
c002164b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021653:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002165d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021668:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002166b:	85 c0                	test   eax,eax
c002166d:	74 25                	je     c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002166f:	83 ec 0c             	sub    esp,0xc
c0021672:	68 a6 2a 02 c0       	push   0xc0022aa6
c0021677:	e8 a9 2c ff ff       	call   c0014325 <Krnl::panic(char const*)>
c002167c:	83 c4 10             	add    esp,0x10
c002167f:	eb 13                	jmp    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021681:	8d 76 00             	lea    esi,[esi+0x0]
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	68 b0 2a 02 c0       	push   0xc0022ab0
c002168c:	e8 94 2c ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021691:	83 c4 10             	add    esp,0x10
c0021694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021698:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002169b:	8d 50 01             	lea    edx,[eax+0x1]
c002169e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216a5:	90                   	nop
c00216a6:	83 c4 0c             	add    esp,0xc
c00216a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00216ac <ACPI::~ACPI()>:
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	ba 6c 3e 02 c0       	mov    edx,0xc0023e6c
c00216b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b8:	89 10                	mov    DWORD PTR [eax],edx
c00216ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216be:	83 ec 0c             	sub    esp,0xc
c00216c1:	50                   	push   eax
c00216c2:	e8 b1 c6 fe ff       	call   c000dd78 <Device::~Device()>
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	90                   	nop
c00216cb:	83 c4 0c             	add    esp,0xc
c00216ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00216d0 <ACPI::~ACPI()>:
c00216d0:	83 ec 0c             	sub    esp,0xc
c00216d3:	83 ec 0c             	sub    esp,0xc
c00216d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216da:	e8 cd ff ff ff       	call   c00216ac <ACPI::~ACPI()>
c00216df:	83 c4 10             	add    esp,0x10
c00216e2:	83 ec 08             	sub    esp,0x8
c00216e5:	68 64 12 00 00       	push   0x1264
c00216ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ee:	e8 90 b2 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c00216f3:	83 c4 10             	add    esp,0x10
c00216f6:	83 c4 0c             	add    esp,0xc
c00216f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00216fc <LinkedList<Device>::~LinkedList()>:
c00216fc:	90                   	nop
c00216fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021700 <LinkedList<Device>::isEmpty()>:
c0021700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021704:	8b 00                	mov    eax,DWORD PTR [eax]
c0021706:	85 c0                	test   eax,eax
c0021708:	75 0e                	jne    c0021718 <LinkedList<Device>::isEmpty()+0x18>
c002170a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002170e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021711:	85 c0                	test   eax,eax
c0021713:	75 03                	jne    c0021718 <LinkedList<Device>::isEmpty()+0x18>
c0021715:	b0 01                	mov    al,0x1
c0021717:	c3                   	ret    
c0021718:	b0 00                	mov    al,0x0
c002171a:	90                   	nop
c002171b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002171c <LinkedList<Device>::getFirstElement()>:
c002171c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021720:	8b 00                	mov    eax,DWORD PTR [eax]
c0021722:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021724 <LinkedList<Device>::removeFirst()>:
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172b:	8b 00                	mov    eax,DWORD PTR [eax]
c002172d:	85 c0                	test   eax,eax
c002172f:	75 17                	jne    c0021748 <LinkedList<Device>::removeFirst()+0x24>
c0021731:	83 ec 0c             	sub    esp,0xc
c0021734:	68 bc 2a 02 c0       	push   0xc0022abc
c0021739:	e8 e7 2b ff ff       	call   c0014325 <Krnl::panic(char const*)>
c002173e:	83 c4 10             	add    esp,0x10
c0021741:	e9 92 00 00 00       	jmp    c00217d8 <LinkedList<Device>::removeFirst()+0xb4>
c0021746:	66 90                	xchg   ax,ax
c0021748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002174c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002174f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021755:	85 c0                	test   eax,eax
c0021757:	74 13                	je     c002176c <LinkedList<Device>::removeFirst()+0x48>
c0021759:	83 ec 0c             	sub    esp,0xc
c002175c:	68 07 2b 02 c0       	push   0xc0022b07
c0021761:	e8 bf 2b ff ff       	call   c0014325 <Krnl::panic(char const*)>
c0021766:	83 c4 10             	add    esp,0x10
c0021769:	8d 76 00             	lea    esi,[esi+0x0]
c002176c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021770:	8b 00                	mov    eax,DWORD PTR [eax]
c0021772:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021778:	85 c0                	test   eax,eax
c002177a:	75 34                	jne    c00217b0 <LinkedList<Device>::removeFirst()+0x8c>
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021795:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021798:	83 f8 01             	cmp    eax,0x1
c002179b:	74 27                	je     c00217c4 <LinkedList<Device>::removeFirst()+0xa0>
c002179d:	83 ec 0c             	sub    esp,0xc
c00217a0:	68 e0 2a 02 c0       	push   0xc0022ae0
c00217a5:	e8 7b 2b ff ff       	call   c0014325 <Krnl::panic(char const*)>
c00217aa:	83 c4 10             	add    esp,0x10
c00217ad:	eb 15                	jmp    c00217c4 <LinkedList<Device>::removeFirst()+0xa0>
c00217af:	90                   	nop
c00217b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00217bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c0:	89 10                	mov    DWORD PTR [eax],edx
c00217c2:	66 90                	xchg   ax,ax
c00217c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00217ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217d5:	8d 76 00             	lea    esi,[esi+0x0]
c00217d8:	83 c4 0c             	add    esp,0xc
c00217db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00217dc <CPU::~CPU()>:
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	ba 08 42 02 c0       	mov    edx,0xc0024208
c00217e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e8:	89 10                	mov    DWORD PTR [eax],edx
c00217ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ee:	83 ec 0c             	sub    esp,0xc
c00217f1:	50                   	push   eax
c00217f2:	e8 81 c5 fe ff       	call   c000dd78 <Device::~Device()>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	90                   	nop
c00217fb:	83 c4 0c             	add    esp,0xc
c00217fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021800 <CPU::~CPU()>:
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	83 ec 0c             	sub    esp,0xc
c0021806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002180a:	e8 cd ff ff ff       	call   c00217dc <CPU::~CPU()>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	83 ec 08             	sub    esp,0x8
c0021815:	68 98 11 00 00       	push   0x1198
c002181a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181e:	e8 60 b1 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	83 c4 0c             	add    esp,0xc
c0021829:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002182c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002182c:	90                   	nop
c002182d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021830 <ThreadControlBlock::ThreadControlBlock()>:
c0021830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021834:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002183b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002183f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021855:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002185c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021860:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021867:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002186f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021873:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021877:	90                   	nop
c0021878:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002187c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021880:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021895:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002189c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218bc:	90                   	nop
c00218bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00218c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00218c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218c7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00218c8 <Vm::_FPUState::_FPUState()>:
c00218c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218cc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00218d3:	90                   	nop
c00218d4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00218d6 <PCI::~PCI()>:
c00218d6:	83 ec 0c             	sub    esp,0xc
c00218d9:	ba 68 4f 02 c0       	mov    edx,0xc0024f68
c00218de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e2:	89 10                	mov    DWORD PTR [eax],edx
c00218e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e8:	83 ec 0c             	sub    esp,0xc
c00218eb:	50                   	push   eax
c00218ec:	e8 57 be fe ff       	call   c000d748 <Bus::~Bus()>
c00218f1:	83 c4 10             	add    esp,0x10
c00218f4:	90                   	nop
c00218f5:	83 c4 0c             	add    esp,0xc
c00218f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00218fa <PCI::~PCI()>:
c00218fa:	83 ec 0c             	sub    esp,0xc
c00218fd:	83 ec 0c             	sub    esp,0xc
c0021900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021904:	e8 cd ff ff ff       	call   c00218d6 <PCI::~PCI()>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	83 ec 08             	sub    esp,0x8
c002190f:	68 5c 01 00 00       	push   0x15c
c0021914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021918:	e8 66 b0 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	83 c4 0c             	add    esp,0xc
c0021923:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021924 <IDE::~IDE()>:
c0021924:	83 ec 0c             	sub    esp,0xc
c0021927:	ba 1c 50 02 c0       	mov    edx,0xc002501c
c002192c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021930:	89 10                	mov    DWORD PTR [eax],edx
c0021932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021936:	83 ec 0c             	sub    esp,0xc
c0021939:	50                   	push   eax
c002193a:	e8 51 c9 fe ff       	call   c000e290 <HardDiskController::~HardDiskController()>
c002193f:	83 c4 10             	add    esp,0x10
c0021942:	90                   	nop
c0021943:	83 c4 0c             	add    esp,0xc
c0021946:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021948 <IDE::~IDE()>:
c0021948:	83 ec 0c             	sub    esp,0xc
c002194b:	83 ec 0c             	sub    esp,0xc
c002194e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021952:	e8 cd ff ff ff       	call   c0021924 <IDE::~IDE()>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	83 ec 08             	sub    esp,0x8
c002195d:	68 70 02 00 00       	push   0x270
c0021962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021966:	e8 18 b0 fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	83 c4 0c             	add    esp,0xc
c0021971:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021972 <SATABus::~SATABus()>:
c0021972:	83 ec 0c             	sub    esp,0xc
c0021975:	ba 94 50 02 c0       	mov    edx,0xc0025094
c002197a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197e:	89 10                	mov    DWORD PTR [eax],edx
c0021980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	50                   	push   eax
c0021988:	e8 03 c9 fe ff       	call   c000e290 <HardDiskController::~HardDiskController()>
c002198d:	83 c4 10             	add    esp,0x10
c0021990:	90                   	nop
c0021991:	83 c4 0c             	add    esp,0xc
c0021994:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021996 <SATABus::~SATABus()>:
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	83 ec 0c             	sub    esp,0xc
c002199c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219a0:	e8 cd ff ff ff       	call   c0021972 <SATABus::~SATABus()>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	83 ec 08             	sub    esp,0x8
c00219ab:	68 64 01 00 00       	push   0x164
c00219b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b4:	e8 ca af fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c00219b9:	83 c4 10             	add    esp,0x10
c00219bc:	83 c4 0c             	add    esp,0xc
c00219bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00219c0 <ATA::~ATA()>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	ba 0c 51 02 c0       	mov    edx,0xc002510c
c00219c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219cc:	89 10                	mov    DWORD PTR [eax],edx
c00219ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	50                   	push   eax
c00219d6:	e8 97 c9 fe ff       	call   c000e372 <PhysicalDisk::~PhysicalDisk()>
c00219db:	83 c4 10             	add    esp,0x10
c00219de:	90                   	nop
c00219df:	83 c4 0c             	add    esp,0xc
c00219e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00219e4 <ATA::~ATA()>:
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	83 ec 0c             	sub    esp,0xc
c00219ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ee:	e8 cd ff ff ff       	call   c00219c0 <ATA::~ATA()>
c00219f3:	83 c4 10             	add    esp,0x10
c00219f6:	83 ec 08             	sub    esp,0x8
c00219f9:	68 7c 01 00 00       	push   0x17c
c00219fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a02:	e8 7c af fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021a07:	83 c4 10             	add    esp,0x10
c0021a0a:	83 c4 0c             	add    esp,0xc
c0021a0d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a0e <ATAPI::~ATAPI()>:
c0021a0e:	83 ec 0c             	sub    esp,0xc
c0021a11:	ba 44 51 02 c0       	mov    edx,0xc0025144
c0021a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1a:	89 10                	mov    DWORD PTR [eax],edx
c0021a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	50                   	push   eax
c0021a24:	e8 49 c9 fe ff       	call   c000e372 <PhysicalDisk::~PhysicalDisk()>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	90                   	nop
c0021a2d:	83 c4 0c             	add    esp,0xc
c0021a30:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a32 <ATAPI::~ATAPI()>:
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	83 ec 0c             	sub    esp,0xc
c0021a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a3c:	e8 cd ff ff ff       	call   c0021a0e <ATAPI::~ATAPI()>
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	83 ec 08             	sub    esp,0x8
c0021a47:	68 80 01 00 00       	push   0x180
c0021a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a50:	e8 2e af fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021a55:	83 c4 10             	add    esp,0x10
c0021a58:	83 c4 0c             	add    esp,0xc
c0021a5b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021a5c <SATA::~SATA()>:
c0021a5c:	83 ec 0c             	sub    esp,0xc
c0021a5f:	ba f8 51 02 c0       	mov    edx,0xc00251f8
c0021a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a68:	89 10                	mov    DWORD PTR [eax],edx
c0021a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	50                   	push   eax
c0021a72:	e8 fb c8 fe ff       	call   c000e372 <PhysicalDisk::~PhysicalDisk()>
c0021a77:	83 c4 10             	add    esp,0x10
c0021a7a:	90                   	nop
c0021a7b:	83 c4 0c             	add    esp,0xc
c0021a7e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a80 <SATA::~SATA()>:
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	83 ec 0c             	sub    esp,0xc
c0021a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8a:	e8 cd ff ff ff       	call   c0021a5c <SATA::~SATA()>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	83 ec 08             	sub    esp,0x8
c0021a95:	68 7c 01 00 00       	push   0x17c
c0021a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9e:	e8 e0 ae fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021aa3:	83 c4 10             	add    esp,0x10
c0021aa6:	83 c4 0c             	add    esp,0xc
c0021aa9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021aaa <SATAPI::~SATAPI()>:
c0021aaa:	83 ec 0c             	sub    esp,0xc
c0021aad:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c0021ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab6:	89 10                	mov    DWORD PTR [eax],edx
c0021ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	50                   	push   eax
c0021ac0:	e8 ad c8 fe ff       	call   c000e372 <PhysicalDisk::~PhysicalDisk()>
c0021ac5:	83 c4 10             	add    esp,0x10
c0021ac8:	90                   	nop
c0021ac9:	83 c4 0c             	add    esp,0xc
c0021acc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021ace <SATAPI::~SATAPI()>:
c0021ace:	83 ec 0c             	sub    esp,0xc
c0021ad1:	83 ec 0c             	sub    esp,0xc
c0021ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ad8:	e8 cd ff ff ff       	call   c0021aaa <SATAPI::~SATAPI()>
c0021add:	83 c4 10             	add    esp,0x10
c0021ae0:	83 ec 08             	sub    esp,0x8
c0021ae3:	68 80 01 00 00       	push   0x180
c0021ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aec:	e8 92 ae fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021af1:	83 c4 10             	add    esp,0x10
c0021af4:	83 c4 0c             	add    esp,0xc
c0021af7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021af8 <AVX::~AVX()>:
c0021af8:	83 ec 0c             	sub    esp,0xc
c0021afb:	ba 14 53 02 c0       	mov    edx,0xc0025314
c0021b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b04:	89 10                	mov    DWORD PTR [eax],edx
c0021b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0a:	83 ec 0c             	sub    esp,0xc
c0021b0d:	50                   	push   eax
c0021b0e:	e8 e5 c8 fe ff       	call   c000e3f8 <FPU::~FPU()>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	90                   	nop
c0021b17:	83 c4 0c             	add    esp,0xc
c0021b1a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b1c <AVX::~AVX()>:
c0021b1c:	83 ec 0c             	sub    esp,0xc
c0021b1f:	83 ec 0c             	sub    esp,0xc
c0021b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b26:	e8 cd ff ff ff       	call   c0021af8 <AVX::~AVX()>
c0021b2b:	83 c4 10             	add    esp,0x10
c0021b2e:	83 ec 08             	sub    esp,0x8
c0021b31:	68 58 01 00 00       	push   0x158
c0021b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b3a:	e8 44 ae fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021b3f:	83 c4 10             	add    esp,0x10
c0021b42:	83 c4 0c             	add    esp,0xc
c0021b45:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021b48 <MMX::~MMX()>:
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	ba 54 53 02 c0       	mov    edx,0xc0025354
c0021b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b54:	89 10                	mov    DWORD PTR [eax],edx
c0021b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	50                   	push   eax
c0021b5e:	e8 95 c8 fe ff       	call   c000e3f8 <FPU::~FPU()>
c0021b63:	83 c4 10             	add    esp,0x10
c0021b66:	90                   	nop
c0021b67:	83 c4 0c             	add    esp,0xc
c0021b6a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021b6c <MMX::~MMX()>:
c0021b6c:	83 ec 0c             	sub    esp,0xc
c0021b6f:	83 ec 0c             	sub    esp,0xc
c0021b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b76:	e8 cd ff ff ff       	call   c0021b48 <MMX::~MMX()>
c0021b7b:	83 c4 10             	add    esp,0x10
c0021b7e:	83 ec 08             	sub    esp,0x8
c0021b81:	68 58 01 00 00       	push   0x158
c0021b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b8a:	e8 f4 ad fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	83 c4 0c             	add    esp,0xc
c0021b95:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021b98 <SSE::~SSE()>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	ba 94 53 02 c0       	mov    edx,0xc0025394
c0021ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba4:	89 10                	mov    DWORD PTR [eax],edx
c0021ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baa:	83 ec 0c             	sub    esp,0xc
c0021bad:	50                   	push   eax
c0021bae:	e8 45 c8 fe ff       	call   c000e3f8 <FPU::~FPU()>
c0021bb3:	83 c4 10             	add    esp,0x10
c0021bb6:	90                   	nop
c0021bb7:	83 c4 0c             	add    esp,0xc
c0021bba:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021bbc <SSE::~SSE()>:
c0021bbc:	83 ec 0c             	sub    esp,0xc
c0021bbf:	83 ec 0c             	sub    esp,0xc
c0021bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bc6:	e8 cd ff ff ff       	call   c0021b98 <SSE::~SSE()>
c0021bcb:	83 c4 10             	add    esp,0x10
c0021bce:	83 ec 08             	sub    esp,0x8
c0021bd1:	68 58 01 00 00       	push   0x158
c0021bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bda:	e8 a4 ad fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021bdf:	83 c4 10             	add    esp,0x10
c0021be2:	83 c4 0c             	add    esp,0xc
c0021be5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021be8 <x87::~x87()>:
c0021be8:	83 ec 0c             	sub    esp,0xc
c0021beb:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c0021bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf4:	89 10                	mov    DWORD PTR [eax],edx
c0021bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfa:	83 ec 0c             	sub    esp,0xc
c0021bfd:	50                   	push   eax
c0021bfe:	e8 f5 c7 fe ff       	call   c000e3f8 <FPU::~FPU()>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	90                   	nop
c0021c07:	83 c4 0c             	add    esp,0xc
c0021c0a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c0c <x87::~x87()>:
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	83 ec 0c             	sub    esp,0xc
c0021c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c16:	e8 cd ff ff ff       	call   c0021be8 <x87::~x87()>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	83 ec 08             	sub    esp,0x8
c0021c21:	68 58 01 00 00       	push   0x158
c0021c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c2a:	e8 54 ad fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	83 c4 0c             	add    esp,0xc
c0021c35:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c36 <IOAPIC::~IOAPIC()>:
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	ba 2c 55 02 c0       	mov    edx,0xc002552c
c0021c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c42:	89 10                	mov    DWORD PTR [eax],edx
c0021c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c48:	83 ec 0c             	sub    esp,0xc
c0021c4b:	50                   	push   eax
c0021c4c:	e8 27 c1 fe ff       	call   c000dd78 <Device::~Device()>
c0021c51:	83 c4 10             	add    esp,0x10
c0021c54:	90                   	nop
c0021c55:	83 c4 0c             	add    esp,0xc
c0021c58:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021c5a <IOAPIC::~IOAPIC()>:
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	83 ec 0c             	sub    esp,0xc
c0021c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c64:	e8 cd ff ff ff       	call   c0021c36 <IOAPIC::~IOAPIC()>
c0021c69:	83 c4 10             	add    esp,0x10
c0021c6c:	83 ec 08             	sub    esp,0x8
c0021c6f:	68 68 01 00 00       	push   0x168
c0021c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c78:	e8 06 ad fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	83 c4 0c             	add    esp,0xc
c0021c83:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c84 <APIC::~APIC()>:
c0021c84:	83 ec 0c             	sub    esp,0xc
c0021c87:	ba e4 54 02 c0       	mov    edx,0xc00254e4
c0021c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c90:	89 10                	mov    DWORD PTR [eax],edx
c0021c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	50                   	push   eax
c0021c9a:	e8 2d cc fe ff       	call   c000e8cc <InterruptController::~InterruptController()>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	90                   	nop
c0021ca3:	83 c4 0c             	add    esp,0xc
c0021ca6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021ca8 <APIC::~APIC()>:
c0021ca8:	83 ec 0c             	sub    esp,0xc
c0021cab:	83 ec 0c             	sub    esp,0xc
c0021cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cb2:	e8 cd ff ff ff       	call   c0021c84 <APIC::~APIC()>
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	83 ec 08             	sub    esp,0x8
c0021cbd:	68 58 21 00 00       	push   0x2158
c0021cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc6:	e8 b8 ac fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021ccb:	83 c4 10             	add    esp,0x10
c0021cce:	83 c4 0c             	add    esp,0xc
c0021cd1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021cd2 <PIC::~PIC()>:
c0021cd2:	83 ec 0c             	sub    esp,0xc
c0021cd5:	ba 7c 55 02 c0       	mov    edx,0xc002557c
c0021cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cde:	89 10                	mov    DWORD PTR [eax],edx
c0021ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce4:	83 ec 0c             	sub    esp,0xc
c0021ce7:	50                   	push   eax
c0021ce8:	e8 df cb fe ff       	call   c000e8cc <InterruptController::~InterruptController()>
c0021ced:	83 c4 10             	add    esp,0x10
c0021cf0:	90                   	nop
c0021cf1:	83 c4 0c             	add    esp,0xc
c0021cf4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021cf6 <PIC::~PIC()>:
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	83 ec 0c             	sub    esp,0xc
c0021cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d00:	e8 cd ff ff ff       	call   c0021cd2 <PIC::~PIC()>
c0021d05:	83 c4 10             	add    esp,0x10
c0021d08:	83 ec 08             	sub    esp,0x8
c0021d0b:	68 58 21 00 00       	push   0x2158
c0021d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d14:	e8 6a ac fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021d19:	83 c4 10             	add    esp,0x10
c0021d1c:	83 c4 0c             	add    esp,0xc
c0021d1f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d20 <APICTimer::~APICTimer()>:
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c0021d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2c:	89 10                	mov    DWORD PTR [eax],edx
c0021d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	50                   	push   eax
c0021d36:	e8 9d e9 fe ff       	call   c00106d8 <Timer::~Timer()>
c0021d3b:	83 c4 10             	add    esp,0x10
c0021d3e:	90                   	nop
c0021d3f:	83 c4 0c             	add    esp,0xc
c0021d42:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021d44 <APICTimer::~APICTimer()>:
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	83 ec 0c             	sub    esp,0xc
c0021d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d4e:	e8 cd ff ff ff       	call   c0021d20 <APICTimer::~APICTimer()>
c0021d53:	83 c4 10             	add    esp,0x10
c0021d56:	83 ec 08             	sub    esp,0x8
c0021d59:	68 60 01 00 00       	push   0x160
c0021d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d62:	e8 1c ac fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021d67:	83 c4 10             	add    esp,0x10
c0021d6a:	83 c4 0c             	add    esp,0xc
c0021d6d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d70 <PIT::~PIT()>:
c0021d70:	83 ec 0c             	sub    esp,0xc
c0021d73:	ba 20 56 02 c0       	mov    edx,0xc0025620
c0021d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7c:	89 10                	mov    DWORD PTR [eax],edx
c0021d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d82:	83 ec 0c             	sub    esp,0xc
c0021d85:	50                   	push   eax
c0021d86:	e8 4d e9 fe ff       	call   c00106d8 <Timer::~Timer()>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	90                   	nop
c0021d8f:	83 c4 0c             	add    esp,0xc
c0021d92:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021d94 <PIT::~PIT()>:
c0021d94:	83 ec 0c             	sub    esp,0xc
c0021d97:	83 ec 0c             	sub    esp,0xc
c0021d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d9e:	e8 cd ff ff ff       	call   c0021d70 <PIT::~PIT()>
c0021da3:	83 c4 10             	add    esp,0x10
c0021da6:	83 ec 08             	sub    esp,0x8
c0021da9:	68 5c 01 00 00       	push   0x15c
c0021dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db2:	e8 cc ab fe ff       	call   c000c983 <operator delete(void*, unsigned long)>
c0021db7:	83 c4 10             	add    esp,0x10
c0021dba:	83 c4 0c             	add    esp,0xc
c0021dbd:	c3                   	ret    
