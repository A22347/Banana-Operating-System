
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ff 7e 00 00       	call   c0007f1f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 c4 01 00       	call   c001c45a <_init>
c0000025:	c3                   	ret    
c0000026:	bb f6 ce 01 c0       	mov    ebx,0xc001cef6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 cf 01 c0    	cmp    ebx,0xc001cf00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 f9 01 c0       	mov    eax,0xc001f9b8
c0000049:	3d b8 f9 01 c0       	cmp    eax,0xc001f9b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 f9 01 c0       	push   0xc001f9b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 f9 01 c0       	mov    eax,0xc001f9b8
c0000075:	2d b8 f9 01 c0       	sub    eax,0xc001f9b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 f9 01 c0       	push   0xc001f9b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fbe0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 cf 01 c0       	mov    ebx,0xc001cf08
c00000bb:	81 eb 04 cf 01 c0    	sub    ebx,0xc001cf04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 cf 01 c0       	mov    esi,0xc001cf04
c00000ca:	a1 e4 fb 01 c0       	mov    eax,ds:0xc001fbe4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 fb 01 c0       	mov    ds:0xc001fbe4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 fb 01 c0       	mov    eax,ds:0xc001fbe4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 f9 01 c0       	push   0xc001f9b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fbe0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 fb 01 c0       	push   0xc001fbe8
c000012c:	68 b8 f9 01 c0       	push   0xc001f9b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 9c 30 01 00       	call   c001336c <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 00 a7 00 00       	call   c000a9e8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 7a 30 01 00       	call   c001336c <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 4b 35 01 00       	call   c001385c <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 9a 3b 01 00       	call   c0013eb4 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 e0 09 02 c0 	lgdtd  ds:0xc00209e0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 00 fc 01 c0       	mov    ds:0xc001fc00,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 00 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc00
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 cf 01 c0 02 	test   BYTE PTR [edx-0x3ffe30e0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 20 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe30e0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 20 cf 01 c0 08 	test   BYTE PTR [edx-0x3ffe30e0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 20 cf 01 c0 04 	test   BYTE PTR [ebx-0x3ffe30e0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 20 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe30e0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 20 fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc20
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 24 fc 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe03dc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 24 fc 01 c0 	mov    DWORD PTR [eax*4-0x3ffe03dc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 4c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc4c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 5c fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc5c
c0000d5d:	c7 42 0c 54 fc 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fc54
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 20 fc 01 c0 02 	test   BYTE PTR ds:0xc001fc20,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f2 6e 00 00       	call   c0007d30 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 34 6e 00 00       	call   c0007d30 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 1e 6e 00 00       	call   c0007d30 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fa 6d 00 00       	call   c0007d30 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 20 fc 01 c0    	mov    edi,DWORD PTR ds:0xc001fc20
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 24 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03dc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 24 fc 01 c0 	mov    DWORD PTR [edx*4-0x3ffe03dc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 54 fc 01 c0 	lea    edx,[eax*8-0x3ffe03ac]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 60 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc60
c00010df:	81 fb 54 fc 01 c0    	cmp    ebx,0xc001fc54
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 54 fc 01 c0       	cmp    eax,0xc001fc54
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 50 fc 01 c0    	cmp    DWORD PTR ds:0xc001fc50,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 5c fc 01 c0       	mov    ds:0xc001fc5c,eax
c000111b:	a3 60 fc 01 c0       	mov    ds:0xc001fc60,eax
c0001120:	a3 50 fc 01 c0       	mov    ds:0xc001fc50,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 54 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc54
c000112e:	c7 40 0c 54 fc 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fc54
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 60 fc 01 c0       	mov    ds:0xc001fc60,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 54 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc54
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 18 fc 01 c0 	lea    ebp,[edx*4-0x3ffe03e8]
c000117f:	8b 14 95 20 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03e0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 20 fc 01 c0 	lea    ecx,[edx*4-0x3ffe03e0]
c000119a:	8b 14 95 20 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03e0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 54 ff 01 c0 	or     DWORD PTR [edi*4-0x3ffe00ac],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 54 fc 01 c0 	lea    eax,[eax*8-0x3ffe03ac]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,ecx
c0001254:	89 0d 60 fc 01 c0    	mov    DWORD PTR ds:0xc001fc60,ecx
c000125a:	c7 41 08 54 fc 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fc54
c0001261:	c7 41 0c 54 fc 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fc54
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 4c fc 01 c0 	lea    edx,[ecx*8-0x3ffe03b4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 54 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ac]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 54 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ac]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 4c fc 01 c0 	lea    edx,[eax*4-0x3ffe03b4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 54 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00ac],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,edi
c0001327:	89 3d 60 fc 01 c0    	mov    DWORD PTR ds:0xc001fc60,edi
c000132d:	c7 47 08 54 fc 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fc54
c0001334:	c7 47 0c 54 fc 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fc54
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 50 fc 01 c0    	mov    DWORD PTR ds:0xc001fc50,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 4c fc 01 c0       	mov    eax,ds:0xc001fc4c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 20 fc 01 c0       	mov    edx,0xc001fc20
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 74 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff74
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 74 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff74,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 74 ff 01 c0    	mov    DWORD PTR ds:0xc001ff74,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 4c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc4c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 7c ff 01 c0    	push   DWORD PTR ds:0xc001ff7c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 7c ff 01 c0       	mov    eax,ds:0xc001ff7c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 4c fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc4c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 4c fc 01 c0       	mov    eax,ds:0xc001fc4c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 24 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03dc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 54 fc 01 c0       	mov    eax,0xc001fc54
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 4c ff 01 c0       	cmp    eax,0xc001ff4c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 88 ff 01 c0       	mov    eax,ds:0xc001ff88
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 70 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff70
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 84 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff84
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 94 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff94
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 24 d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2fdc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 20 fc 01 c0       	mov    eax,ds:0xc001fc20
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 20 fc 01 c0       	mov    ds:0xc001fc20,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 64 ff 01 c0    	mov    DWORD PTR ds:0xc001ff64,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 68 ff 01 c0    	mov    DWORD PTR ds:0xc001ff68,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 6c ff 01 c0    	mov    DWORD PTR ds:0xc001ff6c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 74 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff74,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 00 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc000]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 d2 53 01 00       	jmp    c00170dc <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 00 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc000]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 00 54 01 00       	jmp    c0017120 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 00 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc000]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 25 54 01 00       	jmp    c0017164 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 80 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2e80]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 80 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2e80]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 88 ef 01 c0       	mov    edx,0xc001ef88
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 3c d0 01 c0       	mov    edx,0xc001d03c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 c0 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0040]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 a0 ff 01 c0    	mov    ax,ds:0xc001ffa0
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 a0 ff 01 c0    	mov    ds:0xc001ffa0,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 42 d0 01 c0       	mov    eax,0xc001d042
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 00 d1 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f00]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 4b d0 01 c0       	mov    eax,0xc001d04b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 80 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2e80]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 c0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0040]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 c0 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0040],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 d0 d0 01 c0       	mov    eax,0xc001d0d0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 c0 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0040]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb c0 d0 01 c0       	mov    ebx,0xc001d0c0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba a0 d0 01 c0       	mov    edx,0xc001d0a0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba b0 d0 01 c0       	mov    edx,0xc001d0b0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 52 d0 01 c0       	mov    edx,0xc001d052
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 5e d0 01 c0       	mov    edx,0xc001d05e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 72 d0 01 c0       	mov    edx,0xc001d072
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 be 23 00 00       	call   c0007e59 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 b6 23 00 00       	call   c0007e69 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c a0 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d4a0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 a0 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d4a0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 a0 d2 01 c0       	mov    eax,0xc001d2a0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 e0 d1 01 c0       	mov    eax,0xc001d1e0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 a0 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2e60]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 a0 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0460]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 f0 00 02 c0       	mov    eax,0xc00200f0
c0005ed7:	ba 30 0a 02 c0       	mov    edx,0xc0020a30
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 80 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb80
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 38 19 01 00       	call   c00179b8 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 a0 fb 01 c0       	mov    eax,0xc001fba0
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 a0 d5 01 c0       	push   0xc001d5a0
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d d4 09 02 c0    	mov    edi,DWORD PTR ds:0xc00209d4
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 a0 09 02 c0       	mov    ecx,0xc00209a0
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d 60 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020060,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdffa0],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa 60 00 02 c0    	lea    ebp,[edx-0x3ffdffa0]
c000658e:	89 82 60 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffa0],eax
c0006594:	89 ba 64 00 02 c0    	mov    DWORD PTR [edx-0x3ffdff9c],edi
c000659a:	c7 82 68 00 02 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffdff98],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020060,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 60 00 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffdffa0],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 60 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffa0],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 f0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff10]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 60 00 02 c0 	lea    edx,[eax*4-0x3ffdffa0]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 60 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffa0]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 60 00 02 c0 	lea    edx,[eax*4-0x3ffdffa0]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 6c 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdff94]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 60 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffa0]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d 60 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffa0],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d f0 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdff10],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d 68 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdff98],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 6c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdff94]
c000686c:	39 0c 95 68 00 02 c0 	cmp    DWORD PTR [edx*4-0x3ffdff98],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 68 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdff98],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 68 00 02 c0 	add    DWORD PTR [edx*4-0x3ffdff98],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 60 00 02 c0 	lea    edx,[edx*4-0x3ffdffa0]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 60 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffa0],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 f0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff10],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 60 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffa0],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 f0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff10],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 6c 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff94]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 60 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffa0],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 64 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff9c],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 f0 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff10],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 68 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff98]
c0006a15:	8b 0c 95 6c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdff94]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 60 00 02 c0    	add    eax,DWORD PTR [edi-0x3ffdffa0]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 a0 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0460]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 68 00 02 c0    	mov    eax,DWORD PTR [edi-0x3ffdff98]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 68 00 02 c0    	mov    DWORD PTR [edi-0x3ffdff98],eax
c0006a6f:	3b 87 6c 00 02 c0    	cmp    eax,DWORD PTR [edi-0x3ffdff94]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd 6c 00 02 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffdff94]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 78 00 02 c0 	lea    eax,[eax*4-0x3ffdff88]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd 60 00 02 c0 	lea    edi,[edi*4-0x3ffdffa0]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 70 00 02 c0 	lea    eax,[esi*4-0x3ffdff90]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd 60 00 02 c0 	lea    edi,[edi*4-0x3ffdffa0]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 78 00 02 c0 	lea    ebp,[eax*4-0x3ffdff88]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 78 00 02 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffdff88],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 a0 d5 01 c0       	push   0xc001d5a0
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 73 00 02 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffdff8d],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 80 fb 01 c0       	mov    ds:0xc001fb80,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 d4 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d4,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 cc 09 02 c0       	mov    eax,ds:0xc00209cc
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 a3 d5 01 c0       	push   0xc001d5a3
c0006cdc:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 a0 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0460]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 d4 09 02 c0       	mov    ds:0xc00209d4,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 a0 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0460]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf a0 09 02 c0       	mov    edi,0xc00209a0
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 a2 09 02 c0       	mov    eax,0xc00209a2
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c0006d3e:	b8 aa 09 02 c0       	mov    eax,0xc00209aa
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 c4 09 02 c0       	mov    ds:0xc00209c4,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 cc 09 02 c0       	mov    eax,ds:0xc00209cc
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 aa d5 01 c0       	push   0xc001d5aa
c0006d75:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 60 00 02 c0       	push   0xc0020060
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020060,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 8c 10 00 00       	call   c0007e59 <malloc>
c0006dcd:	a3 d0 09 02 c0       	mov    ds:0xc00209d0,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 7b 10 00 00       	call   c0007e59 <malloc>
c0006dde:	a3 40 00 02 c0       	mov    ds:0xc0020040,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 61 10 00 00       	call   c0007e59 <malloc>
c0006df8:	89 04 9d a0 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0460],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 48 10 00 00       	call   c0007e59 <malloc>
c0006e11:	89 04 9d 40 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe04c0],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d a0 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0460]
c0006e44:	e8 20 10 00 00       	call   c0007e69 <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d 40 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe04c0]
c0006e53:	e8 11 10 00 00       	call   c0007e69 <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 f6 0f 00 00       	call   c0007e69 <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 40 00 02 c0       	mov    eax,ds:0xc0020040
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 e1 0f 00 00       	call   c0007e69 <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 40 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020040,0x0
c0006e95:	c7 05 d0 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d0,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 9f 0f 00 00       	jmp    c0007e59 <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 ba 0f 00 00       	jmp    c0007e79 <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0006ee1:	ff 05 a4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea4
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d a0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ea0,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0006f0b:	e8 bc cb 00 00       	call   c0013acc <schedule()>
c0006f10:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0006f15:	48                   	dec    eax
c0006f16:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 d8 09 02 c0       	mov    eax,0xc00209d8
c0006f65:	e9 ea 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 ba d5 01 c0       	push   0xc001d5ba
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 40 c2 01 c0       	mov    eax,0xc001c240
c0006f8e:	e9 c1 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 c4 d5 01 c0       	push   0xc001d5c4
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 74 bf 01 c0       	mov    eax,0xc001bf74
c0006fb6:	e9 99 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 cd d5 01 c0       	push   0xc001d5cd
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 07                	je     c0006fe0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd9:	b8 40 c3 01 c0       	mov    eax,0xc001c340
c0006fde:	eb 74                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe0:	83 ec 08             	sub    esp,0x8
c0006fe3:	68 d7 d5 01 c0       	push   0xc001d5d7
c0006fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fec:	e8 0f 97 ff ff       	call   c0000700 <strcmp>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	85 c0                	test   eax,eax
c0006ff6:	0f 94 c0             	sete   al
c0006ff9:	84 c0                	test   al,al
c0006ffb:	74 07                	je     c0007004 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ffd:	b8 c0 c0 01 c0       	mov    eax,0xc001c0c0
c0007002:	eb 50                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007004:	83 ec 08             	sub    esp,0x8
c0007007:	68 e0 d5 01 c0       	push   0xc001d5e0
c000700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007010:	e8 eb 96 ff ff       	call   c0000700 <strcmp>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	85 c0                	test   eax,eax
c000701a:	0f 94 c0             	sete   al
c000701d:	84 c0                	test   al,al
c000701f:	74 07                	je     c0007028 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007021:	b8 dc 09 02 c0       	mov    eax,0xc00209dc
c0007026:	eb 2c                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007028:	83 ec 08             	sub    esp,0x8
c000702b:	68 ed d5 01 c0       	push   0xc001d5ed
c0007030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007034:	e8 c7 96 ff ff       	call   c0000700 <strcmp>
c0007039:	83 c4 10             	add    esp,0x10
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 94 c0             	sete   al
c0007041:	84 c0                	test   al,al
c0007043:	74 07                	je     c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007045:	b8 dd 09 02 c0       	mov    eax,0xc00209dd
c000704a:	eb 08                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000704c:	b8 00 00 00 00       	mov    eax,0x0
c0007051:	8d 76 00             	lea    esi,[esi+0x0]
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    

c0007058 <Computer::close(int, int, void*)>:
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	53                   	push   ebx
c000705b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000705f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007063:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007067:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000706d:	83 ec 0c             	sub    esp,0xc
c0007070:	50                   	push   eax
c0007071:	e8 d0 50 00 00       	call   c000c146 <Device::closeAll()>
c0007076:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000707c:	83 c4 10             	add    esp,0x10
c000707f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007081:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007085:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000708d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007095:	5b                   	pop    ebx
c0007096:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007099:	5e                   	pop    esi
c000709a:	5f                   	pop    edi
c000709b:	ff e0                	jmp    eax

c000709d <Krnl::firstTask()>:
c000709d:	53                   	push   ebx
c000709e:	83 ec 14             	sub    esp,0x14
c00070a1:	fb                   	sti    
c00070a2:	68 fa d5 01 c0       	push   0xc001d5fa
c00070a7:	e8 07 0e 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00070ac:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b3:	e8 a1 0d 00 00       	call   c0007e59 <malloc>
c00070b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070bf:	89 c3                	mov    ebx,eax
c00070c1:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00070c6:	50                   	push   eax
c00070c7:	68 13 d6 01 c0       	push   0xc001d613
c00070cc:	6a 01                	push   0x1
c00070ce:	53                   	push   ebx
c00070cf:	e8 cc c5 00 00       	call   c00136a0 <Process::Process(bool, char const*, Process*, char**)>
c00070d4:	83 c4 20             	add    esp,0x20
c00070d7:	68 ff 00 00 00       	push   0xff
c00070dc:	6a 00                	push   0x0
c00070de:	68 b3 78 00 c0       	push   0xc00078b3
c00070e3:	53                   	push   ebx
c00070e4:	e8 c3 c7 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c00070e9:	8b 15 d0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ed0
c00070ef:	6a 7a                	push   0x7a
c00070f1:	6a 00                	push   0x0
c00070f3:	68 00 43 01 c0       	push   0xc0014300
c00070f8:	52                   	push   edx
c00070f9:	e8 ae c7 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c00070fe:	83 c4 14             	add    esp,0x14
c0007101:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0007106:	68 10 d7 01 c0       	push   0xc001d710
c000710b:	c6 05 dd 09 02 c0 01 	mov    BYTE PTR ds:0xc00209dd,0x1
c0007112:	e8 9c 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007117:	e8 c3 d5 00 00       	call   c00146df <Vm::initialise8086()>
c000711c:	e8 69 3e 00 00       	call   c000af8a <Fs::initVFS()>
c0007121:	c7 04 24 20 d6 01 c0 	mov    DWORD PTR [esp],0xc001d620
c0007128:	e8 86 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000712d:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0007132:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007138:	8b 10                	mov    edx,DWORD PTR [eax]
c000713a:	6a 00                	push   0x0
c000713c:	6a 00                	push   0x0
c000713e:	6a 00                	push   0x0
c0007140:	50                   	push   eax
c0007141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007144:	83 c4 14             	add    esp,0x14
c0007147:	68 10 d7 01 c0       	push   0xc001d710
c000714c:	e8 62 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007151:	e8 dc ad 00 00       	call   c0011f32 <Sys::loadSyscalls()>
c0007156:	e8 13 95 00 00       	call   c001066e <Krnl::loadSystemEnv()>
c000715b:	e8 d8 97 00 00       	call   c0010938 <Krnl::setupPowerManager()>
c0007160:	83 c4 0c             	add    esp,0xc
c0007163:	6a 3a                	push   0x3a
c0007165:	68 3a d6 01 c0       	push   0xc001d63a
c000716a:	68 43 d6 01 c0       	push   0xc001d643
c000716f:	e8 ee 9c 00 00       	call   c0010e62 <Reg::readIntWithDefault(char*, char*, int)>
c0007174:	89 04 24             	mov    DWORD PTR [esp],eax
c0007177:	e8 1c 49 00 00       	call   c000ba98 <User::loadClockSettings(int)>
c000717c:	c7 04 24 34 d7 01 c0 	mov    DWORD PTR [esp],0xc001d734
c0007183:	e8 2b 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007188:	59                   	pop    ecx
c0007189:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000718e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007194:	53                   	push   ebx
c0007195:	e8 aa 4f 00 00       	call   c000c144 <Device::loadDriversForAll()>
c000719a:	c7 04 24 4b d6 01 c0 	mov    DWORD PTR [esp],0xc001d64b
c00071a1:	e8 0d 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00071a6:	58                   	pop    eax
c00071a7:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c00071ad:	5a                   	pop    edx
c00071ae:	6a 01                	push   0x1
c00071b0:	68 5c d6 01 c0       	push   0xc001d65c
c00071b5:	e8 20 bf 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c00071ba:	59                   	pop    ecx
c00071bb:	5a                   	pop    edx
c00071bc:	53                   	push   ebx
c00071bd:	50                   	push   eax
c00071be:	e8 48 c1 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c00071c3:	83 c4 10             	add    esp,0x10
c00071c6:	83 ec 0c             	sub    esp,0xc
c00071c9:	6a 02                	push   0x2
c00071cb:	e8 f8 ca 00 00       	call   c0013cc8 <blockTask(TaskState)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	eb f1                	jmp    c00071c6 <Krnl::firstTask()+0x129>
c00071d5:	90                   	nop

c00071d6 <Computer::Computer()>:
c00071d6:	83 ec 0c             	sub    esp,0xc
c00071d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	68 78 d6 01 c0       	push   0xc001d678
c00071e5:	50                   	push   eax
c00071e6:	e8 d5 4f 00 00       	call   c000c1c0 <Device::Device(char const*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	ba 80 d7 01 c0       	mov    edx,0xc001d780
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	89 10                	mov    DWORD PTR [eax],edx
c00071f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000721f:	83 ca 04             	or     edx,0x4
c0007222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007232:	31 d2                	xor    edx,edx
c0007234:	88 c2                	mov    dl,al
c0007236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724b:	31 d2                	xor    edx,edx
c000724d:	88 c2                	mov    dl,al
c000724f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007253:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007262:	8d 50 01             	lea    edx,[eax+0x1]
c0007265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007269:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000726f:	31 d2                	xor    edx,edx
c0007271:	88 c2                	mov    dl,al
c0007273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727b:	83 e1 3f             	and    ecx,0x3f
c000727e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007282:	90                   	nop
c0007283:	83 c4 0c             	add    esp,0xc
c0007286:	c3                   	ret    
c0007287:	90                   	nop

c0007288 <Computer::setBootMessage(char const*)>:
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::detectFeatures()>:
c000728a:	55                   	push   ebp
c000728b:	57                   	push   edi
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 1c             	sub    esp,0x1c
c0007291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007295:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000729f:	e8 75 8f ff ff       	call   c0000219 <detectCPUID>
c00072a4:	85 c0                	test   eax,eax
c00072a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072ac:	0f 95 c2             	setne  dl
c00072af:	83 e0 fd             	and    eax,0xfffffffd
c00072b2:	01 d2                	add    edx,edx
c00072b4:	09 d0                	or     eax,edx
c00072b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072bc:	a8 02                	test   al,0x2
c00072be:	75 46                	jne    c0007306 <Computer::detectFeatures()+0x7c>
c00072c0:	f6 05 f1 09 02 c0 04 	test   BYTE PTR ds:0xc00209f1,0x4
c00072c7:	74 07                	je     c00072d0 <Computer::detectFeatures()+0x46>
c00072c9:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d0:	e8 31 4c 01 00       	call   c001bf06 <x87Detect>
c00072d5:	83 e0 01             	and    eax,0x1
c00072d8:	c1 e0 04             	shl    eax,0x4
c00072db:	88 c2                	mov    dl,al
c00072dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e3:	83 e0 ef             	and    eax,0xffffffef
c00072e6:	09 d0                	or     eax,edx
c00072e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ee:	a8 10                	test   al,0x10
c00072f0:	0f 85 2a 01 00 00    	jne    c0007420 <Computer::detectFeatures()+0x196>
c00072f6:	84 c0                	test   al,al
c00072f8:	0f 88 45 01 00 00    	js     c0007443 <Computer::detectFeatures()+0x1b9>
c00072fe:	83 c4 1c             	add    esp,0x1c
c0007301:	5b                   	pop    ebx
c0007302:	5e                   	pop    esi
c0007303:	5f                   	pop    edi
c0007304:	5d                   	pop    ebp
c0007305:	c3                   	ret    
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	6a 20                	push   0x20
c000730b:	e8 80 84 00 00       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c0007310:	83 e0 01             	and    eax,0x1
c0007313:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007320:	83 e0 f7             	and    eax,0xfffffff7
c0007323:	09 d0                	or     eax,edx
c0007325:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007332:	e8 59 84 00 00       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c0007337:	83 e0 01             	and    eax,0x1
c000733a:	88 c2                	mov    dl,al
c000733c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007342:	83 e0 fe             	and    eax,0xfffffffe
c0007345:	09 d0                	or     eax,edx
c0007347:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000734d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007354:	e8 37 84 00 00       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c0007359:	c1 e0 07             	shl    eax,0x7
c000735c:	88 c2                	mov    dl,al
c000735e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007364:	83 e0 7f             	and    eax,0x7f
c0007367:	09 d0                	or     eax,edx
c0007369:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000736f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007376:	e8 15 84 00 00       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000737b:	83 c4 10             	add    esp,0x10
c000737e:	83 e0 01             	and    eax,0x1
c0007381:	c1 e0 05             	shl    eax,0x5
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000738c:	83 e0 df             	and    eax,0xffffffdf
c000738f:	09 d0                	or     eax,edx
c0007391:	f7 05 f0 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00209f0,0x401
c000739b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a1:	0f 84 c2 00 00 00    	je     c0007469 <Computer::detectFeatures()+0x1df>
c00073a7:	83 e0 fe             	and    eax,0xfffffffe
c00073aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b6:	88 c2                	mov    dl,al
c00073b8:	83 e2 09             	and    edx,0x9
c00073bb:	fe ca                	dec    dl
c00073bd:	75 09                	jne    c00073c8 <Computer::detectFeatures()+0x13e>
c00073bf:	83 e0 fe             	and    eax,0xfffffffe
c00073c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c8:	83 ec 0c             	sub    esp,0xc
c00073cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073cf:	50                   	push   eax
c00073d0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d4:	55                   	push   ebp
c00073d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d9:	57                   	push   edi
c00073da:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073de:	56                   	push   esi
c00073df:	68 00 00 00 80       	push   0x80000000
c00073e4:	e8 23 83 00 00       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e9:	83 c4 20             	add    esp,0x20
c00073ec:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073f7:	0f 86 c3 fe ff ff    	jbe    c00072c0 <Computer::detectFeatures()+0x36>
c00073fd:	83 ec 0c             	sub    esp,0xc
c0007400:	50                   	push   eax
c0007401:	55                   	push   ebp
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	68 01 00 00 80       	push   0x80000001
c0007409:	e8 fe 82 00 00       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000740e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	e9 a0 fe ff ff       	jmp    c00072c0 <Computer::detectFeatures()+0x36>
c0007420:	e8 9b 4a 01 00       	call   c001bec0 <absolutelyNoChanceInHell>
c0007425:	88 c2                	mov    dl,al
c0007427:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000742d:	c1 e2 07             	shl    edx,0x7
c0007430:	83 e0 7f             	and    eax,0x7f
c0007433:	09 d0                	or     eax,edx
c0007435:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743b:	84 c0                	test   al,al
c000743d:	0f 89 bb fe ff ff    	jns    c00072fe <Computer::detectFeatures()+0x74>
c0007443:	e8 f8 47 01 00       	call   c001bc40 <avxDetect>
c0007448:	83 e0 01             	and    eax,0x1
c000744b:	c1 e0 05             	shl    eax,0x5
c000744e:	88 c2                	mov    dl,al
c0007450:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007456:	83 e0 df             	and    eax,0xffffffdf
c0007459:	09 d0                	or     eax,edx
c000745b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007461:	83 c4 1c             	add    esp,0x1c
c0007464:	5b                   	pop    ebx
c0007465:	5e                   	pop    esi
c0007466:	5f                   	pop    edi
c0007467:	5d                   	pop    ebp
c0007468:	c3                   	ret    
c0007469:	83 ec 0c             	sub    esp,0xc
c000746c:	68 00 02 00 00       	push   0x200
c0007471:	e8 1a 83 00 00       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	83 e0 01             	and    eax,0x1
c000747c:	88 c2                	mov    dl,al
c000747e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007484:	83 e0 fe             	and    eax,0xfffffffe
c0007487:	09 d0                	or     eax,edx
c0007489:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000748f:	e9 1c ff ff ff       	jmp    c00073b0 <Computer::detectFeatures()+0x126>

c0007494 <Computer::displayFeatures()>:
c0007494:	c3                   	ret    
c0007495:	90                   	nop

c0007496 <Computer::rdmsr(unsigned int)>:
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a4:	74 0a                	je     c00074b0 <Computer::rdmsr(unsigned int)+0x1a>
c00074a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074aa:	0f 32                	rdmsr  
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	c3                   	ret    
c00074b0:	83 ec 0c             	sub    esp,0xc
c00074b3:	68 81 d6 01 c0       	push   0xc001d681
c00074b8:	e8 ba 92 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00074bd:	83 c4 10             	add    esp,0x10
c00074c0:	eb e4                	jmp    c00074a6 <Computer::rdmsr(unsigned int)+0x10>

c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	52                   	push   edx
c00074c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d8:	74 0e                	je     c00074e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074de:	89 f0                	mov    eax,esi
c00074e0:	89 fa                	mov    edx,edi
c00074e2:	0f 30                	wrmsr  
c00074e4:	58                   	pop    eax
c00074e5:	5e                   	pop    esi
c00074e6:	5f                   	pop    edi
c00074e7:	c3                   	ret    
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	68 87 d6 01 c0       	push   0xc001d687
c00074f0:	e8 82 92 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	eb e0                	jmp    c00074da <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fa <Computer::shutdown()>:
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007501:	8b 10                	mov    edx,DWORD PTR [eax]
c0007503:	6a 00                	push   0x0
c0007505:	6a 00                	push   0x0
c0007507:	6a 00                	push   0x0
c0007509:	50                   	push   eax
c000750a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000750d:	83 c4 1c             	add    esp,0x1c
c0007510:	c3                   	ret    
c0007511:	90                   	nop

c0007512 <Computer::restart()>:
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007519:	8b 10                	mov    edx,DWORD PTR [eax]
c000751b:	6a 00                	push   0x0
c000751d:	6a 00                	push   0x0
c000751f:	6a 01                	push   0x1
c0007521:	50                   	push   eax
c0007522:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007525:	83 c4 1c             	add    esp,0x1c
c0007528:	c3                   	ret    
c0007529:	90                   	nop

c000752a <Computer::sleep()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007538:	e9 cb 7c 00 00       	jmp    c000f208 <ACPI::sleep()>
c000753d:	90                   	nop

c000753e <Computer::nmiEnabled()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007548:	c3                   	ret    
c0007549:	90                   	nop

c000754a <Computer::readCMOS(unsigned char)>:
c000754a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007555:	19 c0                	sbb    eax,eax
c0007557:	83 e0 80             	and    eax,0xffffff80
c000755a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000755e:	e6 70                	out    0x70,al
c0007560:	e4 71                	in     al,0x71
c0007562:	c3                   	ret    
c0007563:	90                   	nop

c0007564 <Computer::enableNMI(bool)>:
c0007564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007572:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757a:	eb ce                	jmp    c000754a <Computer::readCMOS(unsigned char)>

c000757c <Computer::open(int, int, void*)>:
c000757c:	56                   	push   esi
c000757d:	53                   	push   ebx
c000757e:	83 ec 10             	sub    esp,0x10
c0007581:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007585:	f6 05 f0 09 02 c0 04 	test   BYTE PTR ds:0xc00209f0,0x4
c000758c:	68 8d d6 01 c0       	push   0xc001d68d
c0007591:	0f 94 05 c0 f8 01 c0 	sete   BYTE PTR ds:0xc001f8c0
c0007598:	e8 16 09 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000759d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a4:	e8 b0 08 00 00       	call   c0007e59 <malloc>
c00075a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ac:	89 c6                	mov    esi,eax
c00075ae:	e8 ed 77 00 00       	call   c000eda0 <ACPI::ACPI()>
c00075b3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b9:	58                   	pop    eax
c00075ba:	5a                   	pop    edx
c00075bb:	56                   	push   esi
c00075bc:	53                   	push   ebx
c00075bd:	e8 66 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c00075c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c5:	e8 c0 fc ff ff       	call   c000728a <Computer::detectFeatures()>
c00075ca:	59                   	pop    ecx
c00075cb:	5e                   	pop    esi
c00075cc:	6a 01                	push   0x1
c00075ce:	53                   	push   ebx
c00075cf:	e8 90 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c00075d4:	c7 04 24 a5 d6 01 c0 	mov    DWORD PTR [esp],0xc001d6a5
c00075db:	e8 d3 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00075e0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075e7:	e8 6d 08 00 00       	call   c0007e59 <malloc>
c00075ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ef:	89 c6                	mov    esi,eax
c00075f1:	e8 52 82 00 00       	call   c000f848 <CPU::CPU()>
c00075f6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075fc:	58                   	pop    eax
c00075fd:	5a                   	pop    edx
c00075fe:	56                   	push   esi
c00075ff:	53                   	push   ebx
c0007600:	e8 23 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c0007605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000760f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007611:	51                   	push   ecx
c0007612:	6a 00                	push   0x0
c0007614:	6a 00                	push   0x0
c0007616:	50                   	push   eax
c0007617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761a:	83 c4 14             	add    esp,0x14
c000761d:	68 54 d7 01 c0       	push   0xc001d754
c0007622:	e8 8c 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007627:	e8 74 e1 00 00       	call   c00157a0 <HalInitialiseCoprocessor()>
c000762c:	c7 04 24 bf d6 01 c0 	mov    DWORD PTR [esp],0xc001d6bf
c0007633:	e8 7b 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007638:	c7 04 24 9d 70 00 c0 	mov    DWORD PTR [esp],0xc000709d
c000763f:	e8 80 c3 00 00       	call   c00139c4 <setupMultitasking(void (*)())>
c0007644:	83 c4 14             	add    esp,0x14
c0007647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000764c:	5b                   	pop    ebx
c000764d:	5e                   	pop    esi
c000764e:	c3                   	ret    
c000764f:	90                   	nop

c0007650 <Computer::disableNMI()>:
c0007650:	6a 00                	push   0x0
c0007652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007656:	50                   	push   eax
c0007657:	e8 08 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c000765c:	5a                   	pop    edx
c000765d:	59                   	pop    ecx
c000765e:	c3                   	ret    
c000765f:	90                   	nop

c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007664:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766b:	19 c0                	sbb    eax,eax
c000766d:	83 e0 80             	and    eax,0xffffff80
c0007670:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007674:	e6 70                	out    0x70,al
c0007676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767a:	e6 71                	out    0x71,al
c000767c:	c3                   	ret    
c000767d:	90                   	nop

c000767e <Computer::handleNMI()>:
c000767e:	56                   	push   esi
c000767f:	53                   	push   ebx
c0007680:	83 ec 10             	sub    esp,0x10
c0007683:	e4 92                	in     al,0x92
c0007685:	89 c6                	mov    esi,eax
c0007687:	e4 61                	in     al,0x61
c0007689:	68 da d6 01 c0       	push   0xc001d6da
c000768e:	88 c3                	mov    bl,al
c0007690:	e8 53 35 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	83 e6 10             	and    esi,0x10
c000769b:	75 0d                	jne    c00076aa <Computer::handleNMI()+0x2c>
c000769d:	f6 c3 40             	test   bl,0x40
c00076a0:	75 1d                	jne    c00076bf <Computer::handleNMI()+0x41>
c00076a2:	84 db                	test   bl,bl
c00076a4:	78 2d                	js     c00076d3 <Computer::handleNMI()+0x55>
c00076a6:	58                   	pop    eax
c00076a7:	5b                   	pop    ebx
c00076a8:	5e                   	pop    esi
c00076a9:	c3                   	ret    
c00076aa:	83 ec 0c             	sub    esp,0xc
c00076ad:	68 eb d6 01 c0       	push   0xc001d6eb
c00076b2:	e8 c0 90 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00076b7:	83 c4 10             	add    esp,0x10
c00076ba:	f6 c3 40             	test   bl,0x40
c00076bd:	74 e3                	je     c00076a2 <Computer::handleNMI()+0x24>
c00076bf:	83 ec 0c             	sub    esp,0xc
c00076c2:	68 f8 d6 01 c0       	push   0xc001d6f8
c00076c7:	e8 ab 90 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	84 db                	test   bl,bl
c00076d1:	79 d3                	jns    c00076a6 <Computer::handleNMI()+0x28>
c00076d3:	c7 44 24 10 02 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d702
c00076db:	5a                   	pop    edx
c00076dc:	5b                   	pop    ebx
c00076dd:	5e                   	pop    esi
c00076de:	e9 94 90 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c00076e3:	90                   	nop

c00076e4 <GDTEntry::setBase(unsigned int)>:
c00076e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f2:	c1 e9 10             	shr    ecx,0x10
c00076f5:	c1 e8 18             	shr    eax,0x18
c00076f8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076fb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076fe:	c3                   	ret    
c00076ff:	90                   	nop

c0007700 <GDTEntry::setLimit(unsigned int)>:
c0007700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007708:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770b:	66 89 01             	mov    WORD PTR [ecx],ax
c000770e:	83 e2 f0             	and    edx,0xfffffff0
c0007711:	c1 e8 10             	shr    eax,0x10
c0007714:	83 e0 0f             	and    eax,0xf
c0007717:	09 d0                	or     eax,edx
c0007719:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::GDT()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007732:	90                   	nop
c0007733:	c3                   	ret    

c0007734 <GDT::addEntry(GDTEntry)>:
c0007734:	53                   	push   ebx
c0007735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000773d:	8b 02                	mov    eax,DWORD PTR [edx]
c000773f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007743:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007747:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774b:	8d 48 01             	lea    ecx,[eax+0x1]
c000774e:	c1 e0 03             	shl    eax,0x3
c0007751:	89 0a                	mov    DWORD PTR [edx],ecx
c0007753:	5b                   	pop    ebx
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::getNumberOfEntries()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 00                	mov    eax,DWORD PTR [eax]
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::flush()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 10                	mov    edx,DWORD PTR [eax]
c0007764:	83 c0 04             	add    eax,0x4
c0007767:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000776e:	a3 e2 09 02 c0       	mov    ds:0xc00209e2,eax
c0007773:	66 89 15 e0 09 02 c0 	mov    WORD PTR ds:0xc00209e0,dx
c000777a:	e9 fe 8b ff ff       	jmp    c000037d <loadGDT>
c000777f:	90                   	nop

c0007780 <GDT::setup()>:
c0007780:	57                   	push   edi
c0007781:	56                   	push   esi
c0007782:	53                   	push   ebx
c0007783:	83 ec 30             	sub    esp,0x30
c0007786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778a:	6a 00                	push   0x0
c000778c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007790:	56                   	push   esi
c0007791:	e8 4e ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007796:	6a 00                	push   0x0
c0007798:	56                   	push   esi
c0007799:	e8 62 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c000779e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077a6:	6a 00                	push   0x0
c00077a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077ac:	56                   	push   esi
c00077ad:	e8 32 ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c00077b2:	68 ff ff ff 00       	push   0xffffff
c00077b7:	56                   	push   esi
c00077b8:	e8 43 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c00077bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077df:	89 f8                	mov    eax,edi
c00077e1:	89 fa                	mov    edx,edi
c00077e3:	80 e4 f7             	and    ah,0xf7
c00077e6:	80 ce 60             	or     dh,0x60
c00077e9:	89 c7                	mov    edi,eax
c00077eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077ef:	80 cc 60             	or     ah,0x60
c00077f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007802:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000780f:	50                   	push   eax
c0007810:	e8 cf fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007815:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007819:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000781d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007822:	6a 00                	push   0x0
c0007824:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007828:	50                   	push   eax
c0007829:	e8 b6 fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000782e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007833:	83 c4 0c             	add    esp,0xc
c0007836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	53                   	push   ebx
c000783f:	e8 f0 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007844:	83 c4 0c             	add    esp,0xc
c0007847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	53                   	push   ebx
c0007850:	e8 df fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007855:	83 c4 0c             	add    esp,0xc
c0007858:	57                   	push   edi
c0007859:	56                   	push   esi
c000785a:	53                   	push   ebx
c000785b:	e8 d4 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007860:	83 c4 0c             	add    esp,0xc
c0007863:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	53                   	push   ebx
c000786c:	e8 c3 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007871:	83 c4 0c             	add    esp,0xc
c0007874:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	53                   	push   ebx
c000787d:	e8 b2 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007882:	83 c4 0c             	add    esp,0xc
c0007885:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	53                   	push   ebx
c000788e:	e8 a1 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007893:	83 c4 0c             	add    esp,0xc
c0007896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	53                   	push   ebx
c000789f:	e8 90 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c00078a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a7:	e8 b2 fe ff ff       	call   c000775e <GDT::flush()>
c00078ac:	83 c4 40             	add    esp,0x40
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	c3                   	ret    

c00078b3 <idleFunction(void*)>:
c00078b3:	83 ec 0c             	sub    esp,0xc
c00078b6:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00078bb:	48                   	dec    eax
c00078bc:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00078c1:	75 01                	jne    c00078c4 <idleFunction(void*)+0x11>
c00078c3:	fb                   	sti    
c00078c4:	f4                   	hlt    
c00078c5:	e8 f8 4b 01 00       	call   c001c4c2 <idleCommon()>
c00078ca:	eb f8                	jmp    c00078c4 <idleFunction(void*)+0x11>

c00078cc <IDTEntry::IDTEntry(bool)>:
c00078cc:	83 ec 04             	sub    esp,0x4
c00078cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d3:	88 04 24             	mov    BYTE PTR [esp],al
c00078d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078da:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ef:	83 e2 f0             	and    edx,0xfffffff0
c00078f2:	83 ca 0e             	or     edx,0xe
c00078f5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078fc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ff:	83 e2 ef             	and    edx,0xffffffef
c0007902:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007905:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007909:	74 05                	je     c0007910 <IDTEntry::IDTEntry(bool)+0x44>
c000790b:	b2 03                	mov    dl,0x3
c000790d:	eb 05                	jmp    c0007914 <IDTEntry::IDTEntry(bool)+0x48>
c000790f:	90                   	nop
c0007910:	b2 00                	mov    dl,0x0
c0007912:	66 90                	xchg   ax,ax
c0007914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007918:	83 e2 03             	and    edx,0x3
c000791b:	88 d1                	mov    cl,dl
c000791d:	c1 e1 05             	shl    ecx,0x5
c0007920:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007923:	83 e2 9f             	and    edx,0xffffff9f
c0007926:	09 ca                	or     edx,ecx
c0007928:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007932:	83 ca 80             	or     edx,0xffffff80
c0007935:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007938:	90                   	nop
c0007939:	83 c4 04             	add    esp,0x4
c000793c:	c3                   	ret    
c000793d:	90                   	nop

c000793e <IDTEntry::setOffset(unsigned int)>:
c000793e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007946:	66 89 02             	mov    WORD PTR [edx],ax
c0007949:	c1 e8 10             	shr    eax,0x10
c000794c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007950:	c3                   	ret    
c0007951:	90                   	nop
c0007952:	66 90                	xchg   ax,ax

c0007954 <IDT::IDT()>:
c0007954:	90                   	nop
c0007955:	c3                   	ret    

c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795a:	83 c0 30             	add    eax,0x30
c000795d:	c3                   	ret    

c000795e <IDT::addEntry(IDTEntry, int)>:
c000795e:	53                   	push   ebx
c000795f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007967:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000796f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007972:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007976:	5b                   	pop    ebx
c0007977:	c3                   	ret    

c0007978 <IDT::addEntry(int, void (*)(), bool)>:
c0007978:	53                   	push   ebx
c0007979:	83 ec 10             	sub    esp,0x10
c000797c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007981:	50                   	push   eax
c0007982:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007986:	53                   	push   ebx
c0007987:	e8 40 ff ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c000798c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007990:	53                   	push   ebx
c0007991:	e8 a8 ff ff ff       	call   c000793e <IDTEntry::setOffset(unsigned int)>
c0007996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079a6:	e8 b3 ff ff ff       	call   c000795e <IDT::addEntry(IDTEntry, int)>
c00079ab:	83 c4 30             	add    esp,0x30
c00079ae:	5b                   	pop    ebx
c00079af:	c3                   	ret    

c00079b0 <IDT::flush()>:
c00079b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b4:	66 c7 05 e8 09 02 c0 ff 07 	mov    WORD PTR ds:0xc00209e8,0x7ff
c00079bd:	a3 ea 09 02 c0       	mov    ds:0xc00209ea,eax
c00079c2:	0f 01 1d e8 09 02 c0 	lidtd  ds:0xc00209e8
c00079c9:	c3                   	ret    

c00079ca <IDT::setup()>:
c00079ca:	57                   	push   edi
c00079cb:	56                   	push   esi
c00079cc:	53                   	push   ebx
c00079cd:	83 ec 10             	sub    esp,0x10
c00079d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d4:	6a 00                	push   0x0
c00079d6:	68 d0 bc 01 c0       	push   0xc001bcd0
c00079db:	6a 00                	push   0x0
c00079dd:	53                   	push   ebx
c00079de:	e8 95 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079e3:	6a 00                	push   0x0
c00079e5:	68 e0 bc 01 c0       	push   0xc001bce0
c00079ea:	6a 01                	push   0x1
c00079ec:	53                   	push   ebx
c00079ed:	e8 86 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	6a 00                	push   0x0
c00079f7:	68 ea bc 01 c0       	push   0xc001bcea
c00079fc:	6a 02                	push   0x2
c00079fe:	53                   	push   ebx
c00079ff:	e8 74 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a04:	6a 00                	push   0x0
c0007a06:	68 f4 bc 01 c0       	push   0xc001bcf4
c0007a0b:	6a 03                	push   0x3
c0007a0d:	53                   	push   ebx
c0007a0e:	e8 65 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a13:	83 c4 20             	add    esp,0x20
c0007a16:	6a 00                	push   0x0
c0007a18:	68 fe bc 01 c0       	push   0xc001bcfe
c0007a1d:	6a 04                	push   0x4
c0007a1f:	53                   	push   ebx
c0007a20:	e8 53 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a25:	6a 00                	push   0x0
c0007a27:	68 08 bd 01 c0       	push   0xc001bd08
c0007a2c:	6a 05                	push   0x5
c0007a2e:	53                   	push   ebx
c0007a2f:	e8 44 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	6a 00                	push   0x0
c0007a39:	68 12 bd 01 c0       	push   0xc001bd12
c0007a3e:	6a 06                	push   0x6
c0007a40:	53                   	push   ebx
c0007a41:	e8 32 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a46:	6a 00                	push   0x0
c0007a48:	68 1c bd 01 c0       	push   0xc001bd1c
c0007a4d:	6a 07                	push   0x7
c0007a4f:	53                   	push   ebx
c0007a50:	e8 23 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a55:	83 c4 20             	add    esp,0x20
c0007a58:	6a 00                	push   0x0
c0007a5a:	68 26 bd 01 c0       	push   0xc001bd26
c0007a5f:	6a 08                	push   0x8
c0007a61:	53                   	push   ebx
c0007a62:	e8 11 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a67:	6a 00                	push   0x0
c0007a69:	68 2e bd 01 c0       	push   0xc001bd2e
c0007a6e:	6a 09                	push   0x9
c0007a70:	53                   	push   ebx
c0007a71:	e8 02 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	6a 00                	push   0x0
c0007a7b:	68 38 bd 01 c0       	push   0xc001bd38
c0007a80:	6a 0a                	push   0xa
c0007a82:	53                   	push   ebx
c0007a83:	e8 f0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a88:	6a 00                	push   0x0
c0007a8a:	68 40 bd 01 c0       	push   0xc001bd40
c0007a8f:	6a 0b                	push   0xb
c0007a91:	53                   	push   ebx
c0007a92:	e8 e1 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a97:	83 c4 20             	add    esp,0x20
c0007a9a:	6a 00                	push   0x0
c0007a9c:	68 48 bd 01 c0       	push   0xc001bd48
c0007aa1:	6a 0c                	push   0xc
c0007aa3:	53                   	push   ebx
c0007aa4:	e8 cf fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aa9:	6a 00                	push   0x0
c0007aab:	68 50 bd 01 c0       	push   0xc001bd50
c0007ab0:	6a 0d                	push   0xd
c0007ab2:	53                   	push   ebx
c0007ab3:	e8 c0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ab8:	83 c4 20             	add    esp,0x20
c0007abb:	6a 00                	push   0x0
c0007abd:	68 58 bd 01 c0       	push   0xc001bd58
c0007ac2:	6a 0e                	push   0xe
c0007ac4:	53                   	push   ebx
c0007ac5:	e8 ae fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aca:	6a 00                	push   0x0
c0007acc:	68 60 bd 01 c0       	push   0xc001bd60
c0007ad1:	6a 0f                	push   0xf
c0007ad3:	53                   	push   ebx
c0007ad4:	e8 9f fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ad9:	83 c4 20             	add    esp,0x20
c0007adc:	6a 00                	push   0x0
c0007ade:	68 6a bd 01 c0       	push   0xc001bd6a
c0007ae3:	6a 10                	push   0x10
c0007ae5:	53                   	push   ebx
c0007ae6:	e8 8d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aeb:	6a 00                	push   0x0
c0007aed:	68 74 bd 01 c0       	push   0xc001bd74
c0007af2:	6a 11                	push   0x11
c0007af4:	53                   	push   ebx
c0007af5:	e8 7e fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007afa:	83 c4 20             	add    esp,0x20
c0007afd:	6a 00                	push   0x0
c0007aff:	68 7e bd 01 c0       	push   0xc001bd7e
c0007b04:	6a 12                	push   0x12
c0007b06:	53                   	push   ebx
c0007b07:	e8 6c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b0c:	6a 01                	push   0x1
c0007b0e:	68 18 be 01 c0       	push   0xc001be18
c0007b13:	6a 60                	push   0x60
c0007b15:	53                   	push   ebx
c0007b16:	e8 5d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b1b:	83 c4 20             	add    esp,0x20
c0007b1e:	6a 00                	push   0x0
c0007b20:	68 1f be 01 c0       	push   0xc001be1f
c0007b25:	6a 20                	push   0x20
c0007b27:	53                   	push   ebx
c0007b28:	e8 4b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b2d:	6a 00                	push   0x0
c0007b2f:	68 0a be 01 c0       	push   0xc001be0a
c0007b34:	6a 21                	push   0x21
c0007b36:	53                   	push   ebx
c0007b37:	e8 3c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b3c:	83 c4 20             	add    esp,0x20
c0007b3f:	6a 00                	push   0x0
c0007b41:	68 11 be 01 c0       	push   0xc001be11
c0007b46:	6a 22                	push   0x22
c0007b48:	53                   	push   ebx
c0007b49:	e8 2a fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b4e:	6a 00                	push   0x0
c0007b50:	68 88 bd 01 c0       	push   0xc001bd88
c0007b55:	6a 23                	push   0x23
c0007b57:	53                   	push   ebx
c0007b58:	e8 1b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b5d:	83 c4 20             	add    esp,0x20
c0007b60:	6a 00                	push   0x0
c0007b62:	68 92 bd 01 c0       	push   0xc001bd92
c0007b67:	6a 24                	push   0x24
c0007b69:	53                   	push   ebx
c0007b6a:	e8 09 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b6f:	6a 00                	push   0x0
c0007b71:	68 9c bd 01 c0       	push   0xc001bd9c
c0007b76:	6a 25                	push   0x25
c0007b78:	53                   	push   ebx
c0007b79:	e8 fa fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b7e:	83 c4 20             	add    esp,0x20
c0007b81:	6a 00                	push   0x0
c0007b83:	68 a6 bd 01 c0       	push   0xc001bda6
c0007b88:	6a 26                	push   0x26
c0007b8a:	53                   	push   ebx
c0007b8b:	e8 e8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b90:	6a 00                	push   0x0
c0007b92:	68 b0 bd 01 c0       	push   0xc001bdb0
c0007b97:	6a 27                	push   0x27
c0007b99:	53                   	push   ebx
c0007b9a:	e8 d9 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b9f:	83 c4 20             	add    esp,0x20
c0007ba2:	6a 00                	push   0x0
c0007ba4:	68 ba bd 01 c0       	push   0xc001bdba
c0007ba9:	6a 28                	push   0x28
c0007bab:	53                   	push   ebx
c0007bac:	e8 c7 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bb1:	6a 00                	push   0x0
c0007bb3:	68 c4 bd 01 c0       	push   0xc001bdc4
c0007bb8:	6a 29                	push   0x29
c0007bba:	53                   	push   ebx
c0007bbb:	e8 b8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bc0:	83 c4 20             	add    esp,0x20
c0007bc3:	6a 00                	push   0x0
c0007bc5:	68 ce bd 01 c0       	push   0xc001bdce
c0007bca:	6a 2a                	push   0x2a
c0007bcc:	53                   	push   ebx
c0007bcd:	e8 a6 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bd2:	6a 00                	push   0x0
c0007bd4:	68 d8 bd 01 c0       	push   0xc001bdd8
c0007bd9:	6a 2b                	push   0x2b
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 97 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007be1:	83 c4 20             	add    esp,0x20
c0007be4:	6a 00                	push   0x0
c0007be6:	68 e2 bd 01 c0       	push   0xc001bde2
c0007beb:	6a 2c                	push   0x2c
c0007bed:	53                   	push   ebx
c0007bee:	e8 85 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bf3:	6a 00                	push   0x0
c0007bf5:	68 ec bd 01 c0       	push   0xc001bdec
c0007bfa:	6a 2d                	push   0x2d
c0007bfc:	53                   	push   ebx
c0007bfd:	e8 76 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c02:	83 c4 20             	add    esp,0x20
c0007c05:	6a 00                	push   0x0
c0007c07:	68 f6 bd 01 c0       	push   0xc001bdf6
c0007c0c:	6a 2e                	push   0x2e
c0007c0e:	53                   	push   ebx
c0007c0f:	e8 64 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c14:	6a 00                	push   0x0
c0007c16:	68 00 be 01 c0       	push   0xc001be00
c0007c1b:	6a 2f                	push   0x2f
c0007c1d:	53                   	push   ebx
c0007c1e:	e8 55 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c23:	83 c4 20             	add    esp,0x20
c0007c26:	6a 00                	push   0x0
c0007c28:	68 56 be 01 c0       	push   0xc001be56
c0007c2d:	6a 30                	push   0x30
c0007c2f:	53                   	push   ebx
c0007c30:	e8 43 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c35:	6a 00                	push   0x0
c0007c37:	68 60 be 01 c0       	push   0xc001be60
c0007c3c:	6a 31                	push   0x31
c0007c3e:	53                   	push   ebx
c0007c3f:	e8 34 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c44:	83 c4 20             	add    esp,0x20
c0007c47:	6a 00                	push   0x0
c0007c49:	68 6a be 01 c0       	push   0xc001be6a
c0007c4e:	6a 32                	push   0x32
c0007c50:	53                   	push   ebx
c0007c51:	e8 22 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c56:	6a 00                	push   0x0
c0007c58:	68 74 be 01 c0       	push   0xc001be74
c0007c5d:	6a 33                	push   0x33
c0007c5f:	53                   	push   ebx
c0007c60:	e8 13 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c65:	83 c4 20             	add    esp,0x20
c0007c68:	6a 00                	push   0x0
c0007c6a:	68 7e be 01 c0       	push   0xc001be7e
c0007c6f:	6a 34                	push   0x34
c0007c71:	53                   	push   ebx
c0007c72:	e8 01 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c77:	6a 00                	push   0x0
c0007c79:	68 88 be 01 c0       	push   0xc001be88
c0007c7e:	6a 35                	push   0x35
c0007c80:	53                   	push   ebx
c0007c81:	e8 f2 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c86:	83 c4 20             	add    esp,0x20
c0007c89:	6a 00                	push   0x0
c0007c8b:	68 92 be 01 c0       	push   0xc001be92
c0007c90:	6a 36                	push   0x36
c0007c92:	53                   	push   ebx
c0007c93:	e8 e0 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c98:	6a 00                	push   0x0
c0007c9a:	68 9c be 01 c0       	push   0xc001be9c
c0007c9f:	6a 37                	push   0x37
c0007ca1:	53                   	push   ebx
c0007ca2:	e8 d1 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ca7:	83 c4 1c             	add    esp,0x1c
c0007caa:	6a 03                	push   0x3
c0007cac:	6a 02                	push   0x2
c0007cae:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007cb4:	e8 75 24 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007cb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc0:	89 c6                	mov    esi,eax
c0007cc2:	e8 92 01 00 00       	call   c0007e59 <malloc>
c0007cc7:	81 c6 00 20 00 00    	add    esi,0x2000
c0007ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd0:	89 c7                	mov    edi,eax
c0007cd2:	e8 01 16 00 00       	call   c00092d8 <TSS::TSS()>
c0007cd7:	83 c4 0c             	add    esp,0xc
c0007cda:	68 26 bd 01 c0       	push   0xc001bd26
c0007cdf:	56                   	push   esi
c0007ce0:	57                   	push   edi
c0007ce1:	e8 36 16 00 00       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c0007ce6:	89 c6                	mov    esi,eax
c0007ce8:	58                   	pop    eax
c0007ce9:	5a                   	pop    edx
c0007cea:	6a 00                	push   0x0
c0007cec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf0:	50                   	push   eax
c0007cf1:	e8 d6 fb ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c0007cf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007cff:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d06:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d10:	80 ce 05             	or     dh,0x5
c0007d13:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d24:	e8 87 fc ff ff       	call   c00079b0 <IDT::flush()>
c0007d29:	83 c4 20             	add    esp,0x20
c0007d2c:	5b                   	pop    ebx
c0007d2d:	5e                   	pop    esi
c0007d2e:	5f                   	pop    edi
c0007d2f:	c3                   	ret    

c0007d30 <sbrk>:
c0007d30:	55                   	push   ebp
c0007d31:	57                   	push   edi
c0007d32:	56                   	push   esi
c0007d33:	53                   	push   ebx
c0007d34:	83 ec 1c             	sub    esp,0x1c
c0007d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3b:	85 c0                	test   eax,eax
c0007d3d:	74 5f                	je     c0007d9e <sbrk+0x6e>
c0007d3f:	78 64                	js     c0007da5 <sbrk+0x75>
c0007d41:	8b 15 5c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f75c
c0007d47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4b:	05 ff 0f 00 00       	add    eax,0xfff
c0007d50:	89 c5                	mov    ebp,eax
c0007d52:	78 69                	js     c0007dbd <sbrk+0x8d>
c0007d54:	c1 fd 0c             	sar    ebp,0xc
c0007d57:	bb 00 00 00 00       	mov    ebx,0x0
c0007d5c:	8b 35 d0 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020ad0
c0007d62:	8b 3d 5c f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f75c
c0007d68:	e8 b9 04 00 00       	call   c0008226 <Phys::allocatePage()>
c0007d6d:	68 01 04 00 00       	push   0x401
c0007d72:	57                   	push   edi
c0007d73:	50                   	push   eax
c0007d74:	56                   	push   esi
c0007d75:	e8 b0 22 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7a:	81 05 5c f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f75c,0x1000
c0007d84:	43                   	inc    ebx
c0007d85:	83 c4 10             	add    esp,0x10
c0007d88:	39 dd                	cmp    ebp,ebx
c0007d8a:	75 d0                	jne    c0007d5c <sbrk+0x2c>
c0007d8c:	0f 20 d8             	mov    eax,cr3
c0007d8f:	0f 22 d8             	mov    cr3,eax
c0007d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d96:	83 c4 1c             	add    esp,0x1c
c0007d99:	5b                   	pop    ebx
c0007d9a:	5e                   	pop    esi
c0007d9b:	5f                   	pop    edi
c0007d9c:	5d                   	pop    ebp
c0007d9d:	c3                   	ret    
c0007d9e:	a1 5c f7 01 c0       	mov    eax,ds:0xc001f75c
c0007da3:	eb f1                	jmp    c0007d96 <sbrk+0x66>
c0007da5:	83 ec 08             	sub    esp,0x8
c0007da8:	50                   	push   eax
c0007da9:	68 a4 d7 01 c0       	push   0xc001d7a4
c0007dae:	e8 35 2e 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007db3:	83 c4 10             	add    esp,0x10
c0007db6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbb:	eb d9                	jmp    c0007d96 <sbrk+0x66>
c0007dbd:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc3:	eb 8f                	jmp    c0007d54 <sbrk+0x24>

c0007dc5 <mmap>:
c0007dc5:	83 ec 18             	sub    esp,0x18
c0007dc8:	68 d4 d7 01 c0       	push   0xc001d7d4
c0007dcd:	e8 a5 89 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0007dd2:	b8 00 00 00 00       	mov    eax,0x0
c0007dd7:	83 c4 1c             	add    esp,0x1c
c0007dda:	c3                   	ret    

c0007ddb <munmap>:
c0007ddb:	83 ec 18             	sub    esp,0x18
c0007dde:	68 d9 d7 01 c0       	push   0xc001d7d9
c0007de3:	e8 8f 89 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0007de8:	b8 00 00 00 00       	mov    eax,0x0
c0007ded:	83 c4 1c             	add    esp,0x1c
c0007df0:	c3                   	ret    

c0007df1 <liballoc_lock()>:
c0007df1:	fa                   	cli    
c0007df2:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0007df8:	b8 00 00 00 00       	mov    eax,0x0
c0007dfd:	c3                   	ret    

c0007dfe <liballoc_unlock()>:
c0007dfe:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0007e03:	48                   	dec    eax
c0007e04:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0007e09:	75 01                	jne    c0007e0c <liballoc_unlock()+0xe>
c0007e0b:	fb                   	sti    
c0007e0c:	b8 00 00 00 00       	mov    eax,0x0
c0007e11:	c3                   	ret    

c0007e12 <liballoc_alloc(int)>:
c0007e12:	83 ec 10             	sub    esp,0x10
c0007e15:	6a 01                	push   0x1
c0007e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1b:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007e21:	e8 08 23 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007e26:	83 c4 1c             	add    esp,0x1c
c0007e29:	c3                   	ret    

c0007e2a <liballoc_free(void*, int)>:
c0007e2a:	83 ec 14             	sub    esp,0x14
c0007e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e31:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007e37:	e8 ae 1f 00 00       	call   c0009dea <VAS::freeAllocatedPages(unsigned long)>
c0007e3c:	b8 00 00 00 00       	mov    eax,0x0
c0007e41:	83 c4 1c             	add    esp,0x1c
c0007e44:	c3                   	ret    

c0007e45 <realloc>:
c0007e45:	83 ec 14             	sub    esp,0x14
c0007e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	e8 fc 96 ff ff       	call   c0001551 <dlrealloc>
c0007e55:	83 c4 1c             	add    esp,0x1c
c0007e58:	c3                   	ret    

c0007e59 <malloc>:
c0007e59:	83 ec 18             	sub    esp,0x18
c0007e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e60:	e8 af 91 ff ff       	call   c0001014 <dlmalloc>
c0007e65:	83 c4 1c             	add    esp,0x1c
c0007e68:	c3                   	ret    

c0007e69 <free>:
c0007e69:	83 ec 18             	sub    esp,0x18
c0007e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e70:	e8 44 8e ff ff       	call   c0000cb9 <dlfree>
c0007e75:	83 c4 1c             	add    esp,0x1c
c0007e78:	c3                   	ret    

c0007e79 <rfree>:
c0007e79:	83 ec 18             	sub    esp,0x18
c0007e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e80:	e8 34 8e ff ff       	call   c0000cb9 <dlfree>
c0007e85:	83 c4 1c             	add    esp,0x1c
c0007e88:	c3                   	ret    

c0007e89 <calloc>:
c0007e89:	56                   	push   esi
c0007e8a:	53                   	push   ebx
c0007e8b:	83 ec 10             	sub    esp,0x10
c0007e8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e92:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e97:	53                   	push   ebx
c0007e98:	e8 bc ff ff ff       	call   c0007e59 <malloc>
c0007e9d:	89 c6                	mov    esi,eax
c0007e9f:	83 c4 0c             	add    esp,0xc
c0007ea2:	53                   	push   ebx
c0007ea3:	6a 00                	push   0x0
c0007ea5:	50                   	push   eax
c0007ea6:	e8 45 86 ff ff       	call   c00004f0 <memset>
c0007eab:	89 f0                	mov    eax,esi
c0007ead:	83 c4 14             	add    esp,0x14
c0007eb0:	5b                   	pop    ebx
c0007eb1:	5e                   	pop    esi
c0007eb2:	c3                   	ret    

c0007eb3 <Krnl::setBootMessage(char const*)>:
c0007eb3:	57                   	push   edi
c0007eb4:	56                   	push   esi
c0007eb5:	53                   	push   ebx
c0007eb6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ebc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ec3:	68 9e 00 00 00       	push   0x9e
c0007ec8:	6a 00                	push   0x0
c0007eca:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ece:	56                   	push   esi
c0007ecf:	e8 1c 86 ff ff       	call   c00004f0 <memset>
c0007ed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ed7:	e8 84 86 ff ff       	call   c0000560 <strlen>
c0007edc:	ba 50 00 00 00       	mov    edx,0x50
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	29 c2                	sub    edx,eax
c0007ee6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eea:	d1 ea                	shr    edx,1
c0007eec:	84 c0                	test   al,al
c0007eee:	74 19                	je     c0007f09 <Krnl::setBootMessage(char const*)+0x56>
c0007ef0:	01 d2                	add    edx,edx
c0007ef2:	43                   	inc    ebx
c0007ef3:	01 f2                	add    edx,esi
c0007ef5:	80 cc 0f             	or     ah,0xf
c0007ef8:	83 c2 02             	add    edx,0x2
c0007efb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007eff:	43                   	inc    ebx
c0007f00:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f05:	84 c0                	test   al,al
c0007f07:	75 ec                	jne    c0007ef5 <Krnl::setBootMessage(char const*)+0x42>
c0007f09:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f0e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f15:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f1b:	5b                   	pop    ebx
c0007f1c:	5e                   	pop    esi
c0007f1d:	5f                   	pop    edi
c0007f1e:	c3                   	ret    

c0007f1f <kernel_main>:
c0007f1f:	55                   	push   ebp
c0007f20:	57                   	push   edi
c0007f21:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f26:	56                   	push   esi
c0007f27:	89 fa                	mov    edx,edi
c0007f29:	53                   	push   ebx
c0007f2a:	31 f6                	xor    esi,esi
c0007f2c:	83 ec 38             	sub    esp,0x38
c0007f2f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f34:	a3 f0 09 02 c0       	mov    ds:0xc00209f0,eax
c0007f39:	89 f0                	mov    eax,esi
c0007f3b:	ee                   	out    dx,al
c0007f3c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f41:	b0 80                	mov    al,0x80
c0007f43:	89 da                	mov    edx,ebx
c0007f45:	ee                   	out    dx,al
c0007f46:	b1 03                	mov    cl,0x3
c0007f48:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f4d:	88 c8                	mov    al,cl
c0007f4f:	ee                   	out    dx,al
c0007f50:	89 f0                	mov    eax,esi
c0007f52:	89 fa                	mov    edx,edi
c0007f54:	ee                   	out    dx,al
c0007f55:	88 c8                	mov    al,cl
c0007f57:	89 da                	mov    edx,ebx
c0007f59:	ee                   	out    dx,al
c0007f5a:	b0 c7                	mov    al,0xc7
c0007f5c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f61:	ee                   	out    dx,al
c0007f62:	b0 0b                	mov    al,0xb
c0007f64:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f69:	ee                   	out    dx,al
c0007f6a:	68 e0 d7 01 c0       	push   0xc001d7e0
c0007f6f:	e8 74 2c 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007f74:	0f be 05 60 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f760
c0007f7b:	83 c4 10             	add    esp,0x10
c0007f7e:	84 c0                	test   al,al
c0007f80:	74 5c                	je     c0007fde <kernel_main+0xbf>
c0007f82:	31 db                	xor    ebx,ebx
c0007f84:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f89:	bf 05 00 00 00       	mov    edi,0x5
c0007f8e:	31 f6                	xor    esi,esi
c0007f90:	eb 14                	jmp    c0007fa6 <kernel_main+0x87>
c0007f92:	47                   	inc    edi
c0007f93:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f98:	31 f6                	xor    esi,esi
c0007f9a:	43                   	inc    ebx
c0007f9b:	0f be 83 60 f7 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe08a0]
c0007fa2:	84 c0                	test   al,al
c0007fa4:	74 38                	je     c0007fde <kernel_main+0xbf>
c0007fa6:	80 be 96 f7 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe086a],0xdb
c0007fad:	0f 84 97 00 00 00    	je     c000804a <kernel_main+0x12b>
c0007fb3:	3c 0d                	cmp    al,0xd
c0007fb5:	74 e3                	je     c0007f9a <kernel_main+0x7b>
c0007fb7:	3c 0a                	cmp    al,0xa
c0007fb9:	74 d7                	je     c0007f92 <kernel_main+0x73>
c0007fbb:	83 ec 0c             	sub    esp,0xc
c0007fbe:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fc2:	57                   	push   edi
c0007fc3:	43                   	inc    ebx
c0007fc4:	52                   	push   edx
c0007fc5:	46                   	inc    esi
c0007fc6:	6a 00                	push   0x0
c0007fc8:	6a 0e                	push   0xe
c0007fca:	50                   	push   eax
c0007fcb:	e8 04 e5 00 00       	call   c00164d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd0:	83 c4 20             	add    esp,0x20
c0007fd3:	0f be 83 60 f7 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe08a0]
c0007fda:	84 c0                	test   al,al
c0007fdc:	75 c8                	jne    c0007fa6 <kernel_main+0x87>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fe6:	05 ff 0f 00 00       	add    eax,0xfff
c0007feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff0:	50                   	push   eax
c0007ff1:	e8 82 03 00 00       	call   c0008378 <Phys::physicalMemorySetup(unsigned int)>
c0007ff6:	e8 59 1b 00 00       	call   c0009b54 <Virt::virtualMemorySetup()>
c0007ffb:	58                   	pop    eax
c0007ffc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008000:	53                   	push   ebx
c0008001:	e8 0a 1c 00 00       	call   c0009c10 <VAS::VAS()>
c0008006:	89 1d d0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ad0,ebx
c000800c:	e8 0f 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008011:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008018:	e8 3c fe ff ff       	call   c0007e59 <malloc>
c000801d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008020:	89 c6                	mov    esi,eax
c0008022:	e8 af f1 ff ff       	call   c00071d6 <Computer::Computer()>
c0008027:	6a 00                	push   0x0
c0008029:	89 35 d8 09 02 c0    	mov    DWORD PTR ds:0xc00209d8,esi
c000802f:	6a 00                	push   0x0
c0008031:	6a 00                	push   0x0
c0008033:	56                   	push   esi
c0008034:	e8 43 f5 ff ff       	call   c000757c <Computer::open(int, int, void*)>
c0008039:	83 c4 14             	add    esp,0x14
c000803c:	53                   	push   ebx
c000803d:	e8 84 1e 00 00       	call   c0009ec6 <VAS::~VAS()>
c0008042:	83 c4 3c             	add    esp,0x3c
c0008045:	5b                   	pop    ebx
c0008046:	5e                   	pop    esi
c0008047:	5f                   	pop    edi
c0008048:	5d                   	pop    ebp
c0008049:	c3                   	ret    
c000804a:	31 d2                	xor    edx,edx
c000804c:	8a 96 95 f7 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe086b]
c0008052:	83 e2 fe             	and    edx,0xfffffffe
c0008055:	81 fa ba 00 00 00    	cmp    edx,0xba
c000805b:	0f 85 52 ff ff ff    	jne    c0007fb3 <kernel_main+0x94>
c0008061:	45                   	inc    ebp
c0008062:	e9 4c ff ff ff       	jmp    c0007fb3 <kernel_main+0x94>

c0008067 <Phys::allocateDMA(unsigned long)>:
c0008067:	55                   	push   ebp
c0008068:	31 ed                	xor    ebp,ebp
c000806a:	57                   	push   edi
c000806b:	56                   	push   esi
c000806c:	53                   	push   ebx
c000806d:	31 db                	xor    ebx,ebx
c000806f:	83 ec 1c             	sub    esp,0x1c
c0008072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008076:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000807e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008084:	31 c0                	xor    eax,eax
c0008086:	c1 ef 0c             	shr    edi,0xc
c0008089:	eb 19                	jmp    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c000808b:	85 c0                	test   eax,eax
c000808d:	75 06                	jne    c0008095 <Phys::allocateDMA(unsigned long)+0x2e>
c000808f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008093:	89 dd                	mov    ebp,ebx
c0008095:	8d 70 01             	lea    esi,[eax+0x1]
c0008098:	39 f7                	cmp    edi,esi
c000809a:	74 33                	je     c00080cf <Phys::allocateDMA(unsigned long)+0x68>
c000809c:	89 f0                	mov    eax,esi
c000809e:	43                   	inc    ebx
c000809f:	83 fb 0f             	cmp    ebx,0xf
c00080a2:	7f 11                	jg     c00080b5 <Phys::allocateDMA(unsigned long)+0x4e>
c00080a4:	80 bb 0c 0a 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf5f4],0x0
c00080ab:	74 de                	je     c000808b <Phys::allocateDMA(unsigned long)+0x24>
c00080ad:	31 c0                	xor    eax,eax
c00080af:	43                   	inc    ebx
c00080b0:	83 fb 0f             	cmp    ebx,0xf
c00080b3:	7e ef                	jle    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c00080b5:	83 ec 0c             	sub    esp,0xc
c00080b8:	68 f8 d7 01 c0       	push   0xc001d7f8
c00080bd:	e8 b5 86 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	31 c0                	xor    eax,eax
c00080c7:	83 c4 1c             	add    esp,0x1c
c00080ca:	5b                   	pop    ebx
c00080cb:	5e                   	pop    esi
c00080cc:	5f                   	pop    edi
c00080cd:	5d                   	pop    ebp
c00080ce:	c3                   	ret    
c00080cf:	89 e9                	mov    ecx,ebp
c00080d1:	c1 f9 04             	sar    ecx,0x4
c00080d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080d8:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080dc:	89 ca                	mov    edx,ecx
c00080de:	4a                   	dec    edx
c00080df:	79 03                	jns    c00080e4 <Phys::allocateDMA(unsigned long)+0x7d>
c00080e1:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080e4:	c1 fa 04             	sar    edx,0x4
c00080e7:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080eb:	74 08                	je     c00080f5 <Phys::allocateDMA(unsigned long)+0x8e>
c00080ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f1:	31 c0                	xor    eax,eax
c00080f3:	eb ba                	jmp    c00080af <Phys::allocateDMA(unsigned long)+0x48>
c00080f5:	85 f6                	test   esi,esi
c00080f7:	74 15                	je     c000810e <Phys::allocateDMA(unsigned long)+0xa7>
c00080f9:	8d 95 0c 0a 02 c0    	lea    edx,[ebp-0x3ffdf5f4]
c00080ff:	8d 84 05 0d 0a 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf5f3]
c0008106:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008109:	42                   	inc    edx
c000810a:	39 d0                	cmp    eax,edx
c000810c:	75 f8                	jne    c0008106 <Phys::allocateDMA(unsigned long)+0x9f>
c000810e:	01 3d 04 0a 02 c0    	add    DWORD PTR ds:0xc0020a04,edi
c0008114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008118:	85 c0                	test   eax,eax
c000811a:	74 17                	je     c0008133 <Phys::allocateDMA(unsigned long)+0xcc>
c000811c:	83 ec 0c             	sub    esp,0xc
c000811f:	68 f8 d7 01 c0       	push   0xc001d7f8
c0008124:	e8 4e 86 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0008129:	83 c4 10             	add    esp,0x10
c000812c:	89 f0                	mov    eax,esi
c000812e:	e9 6b ff ff ff       	jmp    c000809e <Phys::allocateDMA(unsigned long)+0x37>
c0008133:	c1 e5 0c             	shl    ebp,0xc
c0008136:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000813c:	eb 89                	jmp    c00080c7 <Phys::allocateDMA(unsigned long)+0x60>

c000813e <Phys::freeDMA(unsigned long, unsigned long)>:
c000813e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008142:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000814c:	c1 ea 0c             	shr    edx,0xc
c000814f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008154:	29 15 04 0a 02 c0    	sub    DWORD PTR ds:0xc0020a04,edx
c000815a:	c1 e8 0c             	shr    eax,0xc
c000815d:	85 d2                	test   edx,edx
c000815f:	74 0f                	je     c0008170 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008161:	05 0c 0a 02 c0       	add    eax,0xc0020a0c
c0008166:	01 c2                	add    edx,eax
c0008168:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000816b:	40                   	inc    eax
c000816c:	39 d0                	cmp    eax,edx
c000816e:	75 f8                	jne    c0008168 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008170:	c3                   	ret    

c0008171 <Phys::setPageState(unsigned long, bool)>:
c0008171:	56                   	push   esi
c0008172:	ba 01 00 00 00       	mov    edx,0x1
c0008177:	53                   	push   ebx
c0008178:	8b 35 a4 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8a4
c000817e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008182:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008186:	89 c8                	mov    eax,ecx
c0008188:	83 e1 07             	and    ecx,0x7
c000818b:	c1 e8 03             	shr    eax,0x3
c000818e:	d3 e3                	shl    ebx,cl
c0008190:	01 c6                	add    esi,eax
c0008192:	d3 e2                	shl    edx,cl
c0008194:	f7 d2                	not    edx
c0008196:	20 16                	and    BYTE PTR [esi],dl
c0008198:	03 05 a4 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8a4
c000819e:	08 18                	or     BYTE PTR [eax],bl
c00081a0:	5b                   	pop    ebx
c00081a1:	5e                   	pop    esi
c00081a2:	c3                   	ret    

c00081a3 <Phys::getPageState(unsigned long)>:
c00081a3:	53                   	push   ebx
c00081a4:	8b 15 a4 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f8a4
c00081aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081ae:	31 db                	xor    ebx,ebx
c00081b0:	89 c8                	mov    eax,ecx
c00081b2:	83 e1 07             	and    ecx,0x7
c00081b5:	c1 e8 03             	shr    eax,0x3
c00081b8:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081bb:	89 d8                	mov    eax,ebx
c00081bd:	5b                   	pop    ebx
c00081be:	d3 f8                	sar    eax,cl
c00081c0:	83 e0 01             	and    eax,0x1
c00081c3:	c3                   	ret    

c00081c4 <Phys::freePage(unsigned long)>:
c00081c4:	53                   	push   ebx
c00081c5:	83 ec 08             	sub    esp,0x8
c00081c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081cc:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081d2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081d8:	76 3a                	jbe    c0008214 <Phys::freePage(unsigned long)+0x50>
c00081da:	c1 e8 0c             	shr    eax,0xc
c00081dd:	50                   	push   eax
c00081de:	89 c3                	mov    ebx,eax
c00081e0:	e8 be ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00081e5:	5a                   	pop    edx
c00081e6:	84 c0                	test   al,al
c00081e8:	74 19                	je     c0008203 <Phys::freePage(unsigned long)+0x3f>
c00081ea:	83 ec 08             	sub    esp,0x8
c00081ed:	ff 0d 04 0a 02 c0    	dec    DWORD PTR ds:0xc0020a04
c00081f3:	6a 00                	push   0x0
c00081f5:	53                   	push   ebx
c00081f6:	e8 76 ff ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00081fb:	83 c4 10             	add    esp,0x10
c00081fe:	83 c4 08             	add    esp,0x8
c0008201:	5b                   	pop    ebx
c0008202:	c3                   	ret    
c0008203:	c7 44 24 10 9d d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d89d
c000820b:	83 c4 08             	add    esp,0x8
c000820e:	5b                   	pop    ebx
c000820f:	e9 63 85 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c0008214:	68 00 10 00 00       	push   0x1000
c0008219:	50                   	push   eax
c000821a:	e8 1f ff ff ff       	call   c000813e <Phys::freeDMA(unsigned long, unsigned long)>
c000821f:	59                   	pop    ecx
c0008220:	5b                   	pop    ebx
c0008221:	83 c4 08             	add    esp,0x8
c0008224:	5b                   	pop    ebx
c0008225:	c3                   	ret    

c0008226 <Phys::allocatePage()>:
c0008226:	56                   	push   esi
c0008227:	53                   	push   ebx
c0008228:	83 ec 14             	sub    esp,0x14
c000822b:	8b 35 f8 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209f8
c0008231:	89 f3                	mov    ebx,esi
c0008233:	eb 0a                	jmp    c000823f <Phys::allocatePage()+0x19>
c0008235:	89 1d f8 09 02 c0    	mov    DWORD PTR ds:0xc00209f8,ebx
c000823b:	39 de                	cmp    esi,ebx
c000823d:	74 24                	je     c0008263 <Phys::allocatePage()+0x3d>
c000823f:	53                   	push   ebx
c0008240:	e8 5e ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c0008245:	5a                   	pop    edx
c0008246:	84 c0                	test   al,al
c0008248:	74 5f                	je     c00082a9 <Phys::allocatePage()+0x83>
c000824a:	43                   	inc    ebx
c000824b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008251:	75 e2                	jne    c0008235 <Phys::allocatePage()+0xf>
c0008253:	31 db                	xor    ebx,ebx
c0008255:	c7 05 f8 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209f8,0x0
c000825f:	39 de                	cmp    esi,ebx
c0008261:	75 dc                	jne    c000823f <Phys::allocatePage()+0x19>
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	80 35 1c 0a 02 c0 01 	xor    BYTE PTR ds:0xc0020a1c,0x1
c000826d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008275:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000827b:	50                   	push   eax
c000827c:	e8 87 26 00 00       	call   c000a908 <VAS::scanForEviction()>
c0008281:	83 c4 10             	add    esp,0x10
c0008284:	85 c0                	test   eax,eax
c0008286:	75 3f                	jne    c00082c7 <Phys::allocatePage()+0xa1>
c0008288:	83 ec 0c             	sub    esp,0xc
c000828b:	68 20 d8 01 c0       	push   0xc001d820
c0008290:	e8 e2 84 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0008295:	83 c4 10             	add    esp,0x10
c0008298:	8b 1d f8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f8
c000829e:	53                   	push   ebx
c000829f:	e8 ff fe ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00082a4:	5a                   	pop    edx
c00082a5:	84 c0                	test   al,al
c00082a7:	75 a1                	jne    c000824a <Phys::allocatePage()+0x24>
c00082a9:	6a 01                	push   0x1
c00082ab:	53                   	push   ebx
c00082ac:	e8 c0 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082b1:	a1 f8 09 02 c0       	mov    eax,ds:0xc00209f8
c00082b6:	5a                   	pop    edx
c00082b7:	ff 05 04 0a 02 c0    	inc    DWORD PTR ds:0xc0020a04
c00082bd:	c1 e0 0c             	shl    eax,0xc
c00082c0:	59                   	pop    ecx
c00082c1:	83 c4 14             	add    esp,0x14
c00082c4:	5b                   	pop    ebx
c00082c5:	5e                   	pop    esi
c00082c6:	c3                   	ret    
c00082c7:	83 ec 08             	sub    esp,0x8
c00082ca:	89 c2                	mov    edx,eax
c00082cc:	6a 01                	push   0x1
c00082ce:	c1 ea 0c             	shr    edx,0xc
c00082d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082d5:	52                   	push   edx
c00082d6:	e8 96 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082db:	83 c4 10             	add    esp,0x10
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	eb dd                	jmp    c00082c1 <Phys::allocatePage()+0x9b>

c00082e4 <Phys::allocateContiguousPages(int)>:
c00082e4:	57                   	push   edi
c00082e5:	56                   	push   esi
c00082e6:	53                   	push   ebx
c00082e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082eb:	fa                   	cli    
c00082ec:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c00082f2:	31 db                	xor    ebx,ebx
c00082f4:	85 db                	test   ebx,ebx
c00082f6:	75 11                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c00082f8:	e8 29 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c00082fd:	83 fe 01             	cmp    esi,0x1
c0008300:	89 c7                	mov    edi,eax
c0008302:	74 21                	je     c0008325 <Phys::allocateContiguousPages(int)+0x41>
c0008304:	bb 01 00 00 00       	mov    ebx,0x1
c0008309:	e8 18 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c000830e:	89 da                	mov    edx,ebx
c0008310:	c1 e2 0c             	shl    edx,0xc
c0008313:	01 fa                	add    edx,edi
c0008315:	39 c2                	cmp    edx,eax
c0008317:	74 20                	je     c0008339 <Phys::allocateContiguousPages(int)+0x55>
c0008319:	bb 01 00 00 00       	mov    ebx,0x1
c000831e:	89 c7                	mov    edi,eax
c0008320:	83 fe 01             	cmp    esi,0x1
c0008323:	75 e4                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c0008325:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000832a:	48                   	dec    eax
c000832b:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0008330:	75 01                	jne    c0008333 <Phys::allocateContiguousPages(int)+0x4f>
c0008332:	fb                   	sti    
c0008333:	89 f8                	mov    eax,edi
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	5f                   	pop    edi
c0008338:	c3                   	ret    
c0008339:	43                   	inc    ebx
c000833a:	39 f3                	cmp    ebx,esi
c000833c:	75 b6                	jne    c00082f4 <Phys::allocateContiguousPages(int)+0x10>
c000833e:	eb e5                	jmp    c0008325 <Phys::allocateContiguousPages(int)+0x41>

c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008346:	39 1d fc 09 02 c0    	cmp    DWORD PTR ds:0xc00209fc,ebx
c000834c:	73 06                	jae    c0008354 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000834e:	89 1d fc 09 02 c0    	mov    DWORD PTR ds:0xc00209fc,ebx
c0008354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008358:	c1 eb 0c             	shr    ebx,0xc
c000835b:	c1 e8 0c             	shr    eax,0xc
c000835e:	39 d8                	cmp    eax,ebx
c0008360:	73 13                	jae    c0008375 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008362:	6a 00                	push   0x0
c0008364:	8d 70 01             	lea    esi,[eax+0x1]
c0008367:	50                   	push   eax
c0008368:	e8 04 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000836d:	5a                   	pop    edx
c000836e:	89 f0                	mov    eax,esi
c0008370:	59                   	pop    ecx
c0008371:	39 f3                	cmp    ebx,esi
c0008373:	75 ed                	jne    c0008362 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008375:	5b                   	pop    ebx
c0008376:	5e                   	pop    esi
c0008377:	c3                   	ret    

c0008378 <Phys::physicalMemorySetup(unsigned int)>:
c0008378:	55                   	push   ebp
c0008379:	57                   	push   edi
c000837a:	56                   	push   esi
c000837b:	53                   	push   ebx
c000837c:	31 db                	xor    ebx,ebx
c000837e:	83 ec 40             	sub    esp,0x40
c0008381:	6a 10                	push   0x10
c0008383:	6a 00                	push   0x0
c0008385:	68 0c 0a 02 c0       	push   0xc0020a0c
c000838a:	e8 61 81 ff ff       	call   c00004f0 <memset>
c000838f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008393:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008398:	05 00 10 00 00       	add    eax,0x1000
c000839d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a1:	5a                   	pop    edx
c00083a2:	59                   	pop    ecx
c00083a3:	50                   	push   eax
c00083a4:	68 b3 d8 01 c0       	push   0xc001d8b3
c00083a9:	e8 3a 28 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00083ae:	83 c4 10             	add    esp,0x10
c00083b1:	83 ec 08             	sub    esp,0x8
c00083b4:	6a 01                	push   0x1
c00083b6:	53                   	push   ebx
c00083b7:	43                   	inc    ebx
c00083b8:	e8 b4 fd ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00083bd:	83 c4 10             	add    esp,0x10
c00083c0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083c6:	75 e9                	jne    c00083b1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083c8:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083ce:	66 85 c0             	test   ax,ax
c00083d1:	0f 84 97 01 00 00    	je     c000856e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083d7:	89 c7                	mov    edi,eax
c00083d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e1:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083e7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083ec:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f0:	eb 15                	jmp    c0008407 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083f2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083f6:	83 c3 18             	add    ebx,0x18
c00083f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083fd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008401:	0f 84 77 01 00 00    	je     c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008407:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000840a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000840d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008410:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008414:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008418:	8b 33                	mov    esi,DWORD PTR [ebx]
c000841a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000841d:	01 f0                	add    eax,esi
c000841f:	55                   	push   ebp
c0008420:	11 fa                	adc    edx,edi
c0008422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008426:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	50                   	push   eax
c000842f:	56                   	push   esi
c0008430:	68 50 d8 01 c0       	push   0xc001d850
c0008435:	e8 ae 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000843a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000843e:	83 c4 10             	add    esp,0x10
c0008441:	09 f8                	or     eax,edi
c0008443:	0f 85 35 01 00 00    	jne    c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008449:	4d                   	dec    ebp
c000844a:	75 a6                	jne    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000844c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008450:	ba 00 00 08 00       	mov    edx,0x80000
c0008455:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008459:	39 f2                	cmp    edx,esi
c000845b:	89 c1                	mov    ecx,eax
c000845d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008465:	19 f9                	sbb    ecx,edi
c0008467:	0f 82 a7 00 00 00    	jb     c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000846d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008471:	89 c1                	mov    ecx,eax
c0008473:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008477:	0f 83 97 00 00 00    	jae    c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000847d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000848a:	39 fa                	cmp    edx,edi
c000848c:	19 e8                	sbb    eax,ebp
c000848e:	0f 82 9a 01 00 00    	jb     c000862e <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008494:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008498:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000849c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084a7:	83 d5 ff             	adc    ebp,0xffffffff
c00084aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084ae:	31 c0                	xor    eax,eax
c00084b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084b4:	39 fa                	cmp    edx,edi
c00084b6:	89 c1                	mov    ecx,eax
c00084b8:	19 e9                	sbb    ecx,ebp
c00084ba:	0f 83 32 ff ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c0:	be 00 00 08 00       	mov    esi,0x80000
c00084c5:	51                   	push   ecx
c00084c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084ca:	57                   	push   edi
c00084cb:	56                   	push   esi
c00084cc:	68 74 d8 01 c0       	push   0xc001d874
c00084d1:	e8 12 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00084d6:	5d                   	pop    ebp
c00084d7:	58                   	pop    eax
c00084d8:	57                   	push   edi
c00084d9:	56                   	push   esi
c00084da:	e8 61 fe ff ff       	call   c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084e7:	83 c4 0c             	add    esp,0xc
c00084ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084ee:	03 05 08 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a08
c00084f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084fb:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c0008500:	52                   	push   edx
c0008501:	50                   	push   eax
c0008502:	68 d9 d8 01 c0       	push   0xc001d8d9
c0008507:	e8 dc 26 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	e9 de fe ff ff       	jmp    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008514:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000851c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008520:	39 ea                	cmp    edx,ebp
c0008522:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008526:	0f 82 c6 fe ff ff    	jb     c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000852c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008531:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008535:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008539:	0f 83 b3 fe ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000853f:	39 ee                	cmp    esi,ebp
c0008541:	89 f8                	mov    eax,edi
c0008543:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008547:	0f 83 78 ff ff ff    	jae    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000854d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008555:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008559:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000855d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008561:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008565:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008569:	e9 57 ff ff ff       	jmp    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000856e:	83 ec 0c             	sub    esp,0xc
c0008571:	68 cb d8 01 c0       	push   0xc001d8cb
c0008576:	e8 fc 81 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000857b:	83 c4 10             	add    esp,0x10
c000857e:	83 ec 08             	sub    esp,0x8
c0008581:	bb 60 00 00 00       	mov    ebx,0x60
c0008586:	6a 00                	push   0x0
c0008588:	6a 06                	push   0x6
c000858a:	e8 e2 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000858f:	58                   	pop    eax
c0008590:	5a                   	pop    edx
c0008591:	6a 00                	push   0x0
c0008593:	6a 07                	push   0x7
c0008595:	e8 d7 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000859a:	83 05 08 0a 02 c0 02 	add    DWORD PTR ds:0xc0020a08,0x2
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	83 ec 08             	sub    esp,0x8
c00085a7:	6a 00                	push   0x0
c00085a9:	53                   	push   ebx
c00085aa:	43                   	inc    ebx
c00085ab:	e8 c1 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085b9:	75 e9                	jne    c00085a4 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085bb:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c00085c0:	bb 40 01 00 00       	mov    ebx,0x140
c00085c5:	83 c0 20             	add    eax,0x20
c00085c8:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c00085cd:	eb 22                	jmp    c00085f1 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085cf:	83 ec 08             	sub    esp,0x8
c00085d2:	6a 00                	push   0x0
c00085d4:	53                   	push   ebx
c00085d5:	43                   	inc    ebx
c00085d6:	e8 96 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085db:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c00085e0:	83 c4 10             	add    esp,0x10
c00085e3:	40                   	inc    eax
c00085e4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085ea:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c00085ef:	74 07                	je     c00085f8 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085f6:	7e d7                	jle    c00085cf <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085f8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00085fd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008602:	7f 22                	jg     c0008626 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008604:	83 ec 08             	sub    esp,0x8
c0008607:	6a 00                	push   0x0
c0008609:	53                   	push   ebx
c000860a:	43                   	inc    ebx
c000860b:	e8 61 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c0008610:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c0008615:	83 c4 10             	add    esp,0x10
c0008618:	40                   	inc    eax
c0008619:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000861f:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c0008624:	75 d7                	jne    c00085fd <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008626:	83 c4 3c             	add    esp,0x3c
c0008629:	5b                   	pop    ebx
c000862a:	5e                   	pop    esi
c000862b:	5f                   	pop    edi
c000862c:	5d                   	pop    ebp
c000862d:	c3                   	ret    
c000862e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008636:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000863e:	e9 51 fe ff ff       	jmp    c0008494 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008643:	90                   	nop

c0008644 <Pipe::isAtty()>:
c0008644:	31 c0                	xor    eax,eax
c0008646:	c3                   	ret    
c0008647:	90                   	nop

c0008648 <Pipe::~Pipe()>:
c0008648:	83 ec 0c             	sub    esp,0xc
c000864b:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c0008650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008654:	89 10                	mov    DWORD PTR [eax],edx
c0008656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865a:	83 ec 0c             	sub    esp,0xc
c000865d:	50                   	push   eax
c000865e:	e8 d1 10 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c0008663:	83 c4 10             	add    esp,0x10
c0008666:	90                   	nop
c0008667:	83 c4 0c             	add    esp,0xc
c000866a:	c3                   	ret    
c000866b:	90                   	nop

c000866c <Pipe::~Pipe()>:
c000866c:	83 ec 0c             	sub    esp,0xc
c000866f:	83 ec 0c             	sub    esp,0xc
c0008672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008676:	e8 cd ff ff ff       	call   c0008648 <Pipe::~Pipe()>
c000867b:	83 c4 10             	add    esp,0x10
c000867e:	83 ec 08             	sub    esp,0x8
c0008681:	6a 20                	push   0x20
c0008683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008687:	e8 66 24 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000868c:	83 c4 10             	add    esp,0x10
c000868f:	83 c4 0c             	add    esp,0xc
c0008692:	c3                   	ret    
c0008693:	90                   	nop

c0008694 <Pipe::write(unsigned long long, void*, int*)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086a3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00086ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b1:	89 d8                	mov    eax,ebx
c00086b3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086b6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086ba:	89 d6                	mov    esi,edx
c00086bc:	89 d7                	mov    edi,edx
c00086be:	c1 ff 1f             	sar    edi,0x1f
c00086c1:	03 34 24             	add    esi,DWORD PTR [esp]
c00086c4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086c8:	c1 f8 1f             	sar    eax,0x1f
c00086cb:	39 f3                	cmp    ebx,esi
c00086cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d5:	19 f8                	sbb    eax,edi
c00086d7:	b8 01 00 00 00       	mov    eax,0x1
c00086dc:	72 6e                	jb     c000874c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e1:	01 d0                	add    eax,edx
c00086e3:	99                   	cdq    
c00086e4:	f7 fb                	idiv   ebx
c00086e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ea:	29 d3                	sub    ebx,edx
c00086ec:	89 d7                	mov    edi,edx
c00086ee:	89 de                	mov    esi,ebx
c00086f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086f3:	c1 fb 1f             	sar    ebx,0x1f
c00086f6:	39 f2                	cmp    edx,esi
c00086f8:	19 d8                	sbb    eax,ebx
c00086fa:	b8 00 00 00 00       	mov    eax,0x0
c00086ff:	72 04                	jb     c0008705 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008701:	89 d0                	mov    eax,edx
c0008703:	29 f0                	sub    eax,esi
c0008705:	89 d3                	mov    ebx,edx
c0008707:	29 c3                	sub    ebx,eax
c0008709:	74 0b                	je     c0008716 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000870b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000870e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008712:	89 d9                	mov    ecx,ebx
c0008714:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008716:	85 c0                	test   eax,eax
c0008718:	74 0d                	je     c0008727 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000871a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000871e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008721:	89 de                	mov    esi,ebx
c0008723:	89 c1                	mov    ecx,eax
c0008725:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008727:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000872a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000872f:	75 10                	jne    c0008741 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	68 f5 d8 01 c0       	push   0xc001d8f5
c0008739:	e8 39 80 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000873e:	83 c4 10             	add    esp,0x10
c0008741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008745:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008748:	89 08                	mov    DWORD PTR [eax],ecx
c000874a:	31 c0                	xor    eax,eax
c000874c:	83 c4 1c             	add    esp,0x1c
c000874f:	5b                   	pop    ebx
c0008750:	5e                   	pop    esi
c0008751:	5f                   	pop    edi
c0008752:	5d                   	pop    ebp
c0008753:	c3                   	ret    

c0008754 <Pipe::read(unsigned long long, void*, int*)>:
c0008754:	55                   	push   ebp
c0008755:	57                   	push   edi
c0008756:	56                   	push   esi
c0008757:	53                   	push   ebx
c0008758:	83 ec 1c             	sub    esp,0x1c
c000875b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000875f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008763:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008767:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000876a:	89 c8                	mov    eax,ecx
c000876c:	99                   	cdq    
c000876d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008771:	74 24                	je     c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008773:	39 f9                	cmp    ecx,edi
c0008775:	89 d1                	mov    ecx,edx
c0008777:	19 f1                	sbb    ecx,esi
c0008779:	73 1c                	jae    c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877b:	fa                   	cli    
c000877c:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0008782:	e8 45 b3 00 00       	call   c0013acc <schedule()>
c0008787:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000878c:	48                   	dec    eax
c000878d:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0008792:	75 d3                	jne    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008794:	fb                   	sti    
c0008795:	eb d0                	jmp    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008797:	39 f8                	cmp    eax,edi
c0008799:	89 d1                	mov    ecx,edx
c000879b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000879e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087a2:	19 f1                	sbb    ecx,esi
c00087a4:	73 07                	jae    c00087ad <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00087a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087ad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087b3:	29 f7                	sub    edi,esi
c00087b5:	89 f8                	mov    eax,edi
c00087b7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087bb:	99                   	cdq    
c00087bc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087c3:	19 d0                	sbb    eax,edx
c00087c5:	73 07                	jae    c00087ce <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ce:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d1:	89 ea                	mov    edx,ebp
c00087d3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087dc:	74 0d                	je     c00087eb <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087eb:	85 d2                	test   edx,edx
c00087ed:	74 11                	je     c0008800 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087f6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087fa:	89 d1                	mov    ecx,edx
c00087fc:	89 c7                	mov    edi,eax
c00087fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008800:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008803:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008806:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008809:	99                   	cdq    
c000880a:	89 f7                	mov    edi,esi
c000880c:	03 04 24             	add    eax,DWORD PTR [esp]
c000880f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008813:	c1 ff 1f             	sar    edi,0x1f
c0008816:	57                   	push   edi
c0008817:	56                   	push   esi
c0008818:	52                   	push   edx
c0008819:	50                   	push   eax
c000881a:	e8 21 3b 01 00       	call   c001c340 <__umoddi3>
c000881f:	83 c4 10             	add    esp,0x10
c0008822:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008825:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000882a:	75 10                	jne    c000883c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000882c:	83 ec 0c             	sub    esp,0xc
c000882f:	68 12 d9 01 c0       	push   0xc001d912
c0008834:	e8 3e 7f 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0008839:	83 c4 10             	add    esp,0x10
c000883c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008840:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008843:	89 10                	mov    DWORD PTR [eax],edx
c0008845:	83 c4 1c             	add    esp,0x1c
c0008848:	31 c0                	xor    eax,eax
c000884a:	5b                   	pop    ebx
c000884b:	5e                   	pop    esi
c000884c:	5f                   	pop    edi
c000884d:	5d                   	pop    ebp
c000884e:	c3                   	ret    
c000884f:	90                   	nop

c0008850 <Pipe::Pipe(int)>:
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008857:	83 ec 08             	sub    esp,0x8
c000885a:	6a 00                	push   0x0
c000885c:	50                   	push   eax
c000885d:	e8 f0 0c 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c0008862:	83 c4 10             	add    esp,0x10
c0008865:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c000886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886e:	89 10                	mov    DWORD PTR [eax],edx
c0008870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008878:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000887f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008895:	83 ec 0c             	sub    esp,0xc
c0008898:	50                   	push   eax
c0008899:	e8 bb f5 ff ff       	call   c0007e59 <malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 c2                	mov    edx,eax
c00088a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ae:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088b2:	90                   	nop
c00088b3:	83 c4 0c             	add    esp,0xc
c00088b6:	c3                   	ret    
c00088b7:	90                   	nop

c00088b8 <VgaText::isAtty()>:
c00088b8:	b0 01                	mov    al,0x1
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::~VgaText()>:
c00088bc:	83 ec 0c             	sub    esp,0xc
c00088bf:	ba c0 d9 01 c0       	mov    edx,0xc001d9c0
c00088c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c8:	89 10                	mov    DWORD PTR [eax],edx
c00088ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ce:	83 ec 0c             	sub    esp,0xc
c00088d1:	50                   	push   eax
c00088d2:	e8 5d 0e 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c00088d7:	83 c4 10             	add    esp,0x10
c00088da:	90                   	nop
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <VgaText::~VgaText()>:
c00088e0:	83 ec 0c             	sub    esp,0xc
c00088e3:	83 ec 0c             	sub    esp,0xc
c00088e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088ea:	e8 cd ff ff ff       	call   c00088bc <VgaText::~VgaText()>
c00088ef:	83 c4 10             	add    esp,0x10
c00088f2:	83 ec 08             	sub    esp,0x8
c00088f5:	68 34 01 00 00       	push   0x134
c00088fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fe:	e8 ef 21 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	83 c4 0c             	add    esp,0xc
c0008909:	c3                   	ret    

c000890a <VgaText::read(unsigned long long, void*, int*)>:
c000890a:	83 ec 10             	sub    esp,0x10
c000890d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008919:	e8 24 45 00 00       	call   c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>
c000891e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008922:	89 02                	mov    DWORD PTR [edx],eax
c0008924:	31 c0                	xor    eax,eax
c0008926:	83 c4 1c             	add    esp,0x1c
c0008929:	c3                   	ret    

c000892a <setTerminalScrollLock(bool)>:
c000892a:	c3                   	ret    

c000892b <doTerminalCycle()>:
c000892b:	c3                   	ret    

c000892c <addToTerminalCycle(VgaText*)>:
c000892c:	c3                   	ret    

c000892d <scrollTerminalScrollLock(int)>:
c000892d:	c3                   	ret    

c000892e <VgaText::updateTitle()>:
c000892e:	c3                   	ret    
c000892f:	90                   	nop

c0008930 <VgaText::load()>:
c0008930:	c3                   	ret    
c0008931:	90                   	nop

c0008932 <VgaText::updateCursor()>:
c0008932:	83 ec 14             	sub    esp,0x14
c0008935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008939:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000893c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000893f:	e8 fc db 00 00       	call   c0016540 <HalConsoleCursorUpdate(int, int)>
c0008944:	83 c4 1c             	add    esp,0x1c
c0008947:	c3                   	ret    

c0008948 <VgaText::doANSI_SGR(int)>:
c0008948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000894c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008950:	85 d2                	test   edx,edx
c0008952:	75 0b                	jne    c000895f <VgaText::doANSI_SGR(int)+0x17>
c0008954:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008957:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000895a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000895d:	eb 59                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000895f:	83 fa 07             	cmp    edx,0x7
c0008962:	75 0b                	jne    c000896f <VgaText::doANSI_SGR(int)+0x27>
c0008964:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008967:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000896a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000896d:	eb 49                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000896f:	83 fa 1b             	cmp    edx,0x1b
c0008972:	74 e0                	je     c0008954 <VgaText::doANSI_SGR(int)+0xc>
c0008974:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008977:	83 f9 07             	cmp    ecx,0x7
c000897a:	77 09                	ja     c0008985 <VgaText::doANSI_SGR(int)+0x3d>
c000897c:	8b 14 8d e0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0720]
c0008983:	eb 20                	jmp    c00089a5 <VgaText::doANSI_SGR(int)+0x5d>
c0008985:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008988:	83 f9 07             	cmp    ecx,0x7
c000898b:	77 09                	ja     c0008996 <VgaText::doANSI_SGR(int)+0x4e>
c000898d:	8b 14 8d e0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0720]
c0008994:	eb 22                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c0008996:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008999:	83 f9 07             	cmp    ecx,0x7
c000899c:	77 0b                	ja     c00089a9 <VgaText::doANSI_SGR(int)+0x61>
c000899e:	8b 14 95 98 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0868]
c00089a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089a8:	c3                   	ret    
c00089a9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089ac:	83 f9 07             	cmp    ecx,0x7
c00089af:	77 0a                	ja     c00089bb <VgaText::doANSI_SGR(int)+0x73>
c00089b1:	8b 14 95 70 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0890]
c00089b8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089bb:	c3                   	ret    

c00089bc <VgaText::setDefaultBgColour(VgaColour)>:
c00089bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089c7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089ca:	c3                   	ret    
c00089cb:	90                   	nop

c00089cc <VgaText::setDefaultFgColour(VgaColour)>:
c00089cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089da:	c3                   	ret    
c00089db:	90                   	nop

c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089dc:	53                   	push   ebx
c00089dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089e9:	51                   	push   ecx
c00089ea:	e8 cd ff ff ff       	call   c00089bc <VgaText::setDefaultBgColour(VgaColour)>
c00089ef:	58                   	pop    eax
c00089f0:	5a                   	pop    edx
c00089f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089f9:	5b                   	pop    ebx
c00089fa:	eb d0                	jmp    c00089cc <VgaText::setDefaultFgColour(VgaColour)>

c00089fc <VgaText::setTitleTextColour(VgaColour)>:
c00089fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a04:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a07:	c3                   	ret    

c0008a08 <VgaText::setTitleColour(VgaColour)>:
c0008a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a10:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a13:	c3                   	ret    

c0008a14 <VgaText::setTitle(char*)>:
c0008a14:	c3                   	ret    
c0008a15:	90                   	nop

c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a16:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a1f:	83 e0 0f             	and    eax,0xf
c0008a22:	c1 e2 04             	shl    edx,0x4
c0008a25:	09 d0                	or     eax,edx
c0008a27:	c3                   	ret    

c0008a28 <VgaText::scrollScreen()>:
c0008a28:	55                   	push   ebp
c0008a29:	b9 01 00 00 00       	mov    ecx,0x1
c0008a2e:	57                   	push   edi
c0008a2f:	56                   	push   esi
c0008a30:	53                   	push   ebx
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a3e:	31 ff                	xor    edi,edi
c0008a40:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a43:	83 f9 18             	cmp    ecx,0x18
c0008a46:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a49:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a50:	75 27                	jne    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a52:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a55:	01 f5                	add    ebp,esi
c0008a57:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a5d:	74 16                	je     c0008a75 <VgaText::scrollScreen()+0x4d>
c0008a5f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a63:	50                   	push   eax
c0008a64:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a68:	50                   	push   eax
c0008a69:	e8 a8 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a6e:	5a                   	pop    edx
c0008a6f:	5a                   	pop    edx
c0008a70:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a73:	eb 04                	jmp    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a75:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a79:	47                   	inc    edi
c0008a7a:	46                   	inc    esi
c0008a7b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a81:	75 bd                	jne    c0008a40 <VgaText::scrollScreen()+0x18>
c0008a83:	41                   	inc    ecx
c0008a84:	83 f9 19             	cmp    ecx,0x19
c0008a87:	75 af                	jne    c0008a38 <VgaText::scrollScreen()+0x10>
c0008a89:	39 1d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebx
c0008a8f:	75 1f                	jne    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a91:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a95:	74 05                	je     c0008a9c <VgaText::scrollScreen()+0x74>
c0008a97:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a9a:	eb 14                	jmp    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aa2:	50                   	push   eax
c0008aa3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aa7:	50                   	push   eax
c0008aa8:	e8 1f d9 00 00       	call   c00163cc <HalConsoleScroll(int, int)>
c0008aad:	83 c4 10             	add    esp,0x10
c0008ab0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ab4:	83 c4 0c             	add    esp,0xc
c0008ab7:	5b                   	pop    ebx
c0008ab8:	5e                   	pop    esi
c0008ab9:	5f                   	pop    edi
c0008aba:	5d                   	pop    ebp
c0008abb:	e9 72 fe ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ac5:	c1 e0 08             	shl    eax,0x8
c0008ac8:	89 c2                	mov    edx,eax
c0008aca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008acf:	09 d0                	or     eax,edx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 1c             	sub    esp,0x1c
c0008ad9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008add:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ae9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008aed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af1:	0f b6 c3             	movzx  eax,bl
c0008af4:	50                   	push   eax
c0008af5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008afa:	50                   	push   eax
c0008afb:	e8 16 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b00:	5a                   	pop    edx
c0008b01:	0f b6 c0             	movzx  eax,al
c0008b04:	59                   	pop    ecx
c0008b05:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b0e:	50                   	push   eax
c0008b0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b13:	e8 a8 ff ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b18:	5a                   	pop    edx
c0008b19:	66 6b d7 50          	imul   dx,di,0x50
c0008b1d:	59                   	pop    ecx
c0008b1e:	01 f2                	add    edx,esi
c0008b20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b23:	0f b7 d2             	movzx  edx,dx
c0008b26:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b2a:	39 2d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebp
c0008b30:	75 28                	jne    c0008b5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b36:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b3a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b3e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b4e:	83 c4 1c             	add    esp,0x1c
c0008b51:	5b                   	pop    ebx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	5d                   	pop    ebp
c0008b55:	e9 7a d9 00 00       	jmp    c00164d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b5a:	83 c4 1c             	add    esp,0x1c
c0008b5d:	5b                   	pop    ebx
c0008b5e:	5e                   	pop    esi
c0008b5f:	5f                   	pop    edi
c0008b60:	5d                   	pop    ebp
c0008b61:	c3                   	ret    

c0008b62 <VgaText::getCursorX()>:
c0008b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b66:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b69:	c3                   	ret    

c0008b6a <VgaText::getCursorY()>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b71:	c3                   	ret    

c0008b72 <VgaText::setCursor(int, int)>:
c0008b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b7a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b84:	e9 a9 fd ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008b89 <setActiveTerminal(VgaText*)>:
c0008b89:	53                   	push   ebx
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b91:	85 db                	test   ebx,ebx
c0008b93:	75 11                	jne    c0008ba6 <setActiveTerminal(VgaText*)+0x1d>
c0008b95:	c7 44 24 10 4c d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d94c
c0008b9d:	83 c4 08             	add    esp,0x8
c0008ba0:	5b                   	pop    ebx
c0008ba1:	e9 d1 7b 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c0008ba6:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c0008bab:	85 c0                	test   eax,eax
c0008bad:	74 0c                	je     c0008bbb <setActiveTerminal(VgaText*)+0x32>
c0008baf:	83 ec 0c             	sub    esp,0xc
c0008bb2:	50                   	push   eax
c0008bb3:	e8 7a fd ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008bb8:	83 c4 10             	add    esp,0x10
c0008bbb:	89 1d 24 0a 02 c0    	mov    DWORD PTR ds:0xc0020a24,ebx
c0008bc1:	50                   	push   eax
c0008bc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc8:	53                   	push   ebx
c0008bc9:	e8 a4 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008bce:	83 c4 18             	add    esp,0x18
c0008bd1:	5b                   	pop    ebx
c0008bd2:	c3                   	ret    
c0008bd3:	90                   	nop

c0008bd4 <VgaText::clearScreen()>:
c0008bd4:	57                   	push   edi
c0008bd5:	56                   	push   esi
c0008bd6:	31 f6                	xor    esi,esi
c0008bd8:	53                   	push   ebx
c0008bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bdd:	52                   	push   edx
c0008bde:	6a 00                	push   0x0
c0008be0:	6a 00                	push   0x0
c0008be2:	53                   	push   ebx
c0008be3:	e8 8a ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008be8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bf5:	7e 20                	jle    c0008c17 <VgaText::clearScreen()+0x43>
c0008bf7:	31 ff                	xor    edi,edi
c0008bf9:	50                   	push   eax
c0008bfa:	50                   	push   eax
c0008bfb:	56                   	push   esi
c0008bfc:	57                   	push   edi
c0008bfd:	47                   	inc    edi
c0008bfe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c01:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c04:	6a 20                	push   0x20
c0008c06:	53                   	push   ebx
c0008c07:	e8 c6 fe ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 ff 50             	cmp    edi,0x50
c0008c12:	75 e5                	jne    c0008bf9 <VgaText::clearScreen()+0x25>
c0008c14:	46                   	inc    esi
c0008c15:	eb db                	jmp    c0008bf2 <VgaText::clearScreen()+0x1e>
c0008c17:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c1e:	5b                   	pop    ebx
c0008c1f:	5e                   	pop    esi
c0008c20:	5f                   	pop    edi
c0008c21:	c3                   	ret    

c0008c22 <VgaText::setCursorX(int)>:
c0008c22:	83 ec 10             	sub    esp,0x10
c0008c25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c30:	50                   	push   eax
c0008c31:	e8 3c ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c36:	83 c4 1c             	add    esp,0x1c
c0008c39:	c3                   	ret    

c0008c3a <VgaText::setCursorY(int)>:
c0008c3a:	83 ec 10             	sub    esp,0x10
c0008c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c48:	50                   	push   eax
c0008c49:	e8 24 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c4e:	83 c4 1c             	add    esp,0x1c
c0008c51:	c3                   	ret    

c0008c52 <VgaText::incrementCursor(bool)>:
c0008c52:	56                   	push   esi
c0008c53:	53                   	push   ebx
c0008c54:	51                   	push   ecx
c0008c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c60:	40                   	inc    eax
c0008c61:	83 f8 50             	cmp    eax,0x50
c0008c64:	74 05                	je     c0008c6b <VgaText::incrementCursor(bool)+0x19>
c0008c66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c69:	eb 24                	jmp    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c75:	8d 50 01             	lea    edx,[eax+0x1]
c0008c78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c7e:	75 0f                	jne    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c86:	53                   	push   ebx
c0008c87:	e8 9c fd ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008c8c:	83 c4 10             	add    esp,0x10
c0008c8f:	89 f0                	mov    eax,esi
c0008c91:	84 c0                	test   al,al
c0008c93:	74 0c                	je     c0008ca1 <VgaText::incrementCursor(bool)+0x4f>
c0008c95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c99:	5a                   	pop    edx
c0008c9a:	5b                   	pop    ebx
c0008c9b:	5e                   	pop    esi
c0008c9c:	e9 91 fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008ca1:	58                   	pop    eax
c0008ca2:	5b                   	pop    ebx
c0008ca3:	5e                   	pop    esi
c0008ca4:	c3                   	ret    
c0008ca5:	90                   	nop

c0008ca6 <VgaText::decrementCursor(bool)>:
c0008ca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008caa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb1:	85 c0                	test   eax,eax
c0008cb3:	74 04                	je     c0008cb9 <VgaText::decrementCursor(bool)+0x13>
c0008cb5:	48                   	dec    eax
c0008cb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cb9:	84 c9                	test   cl,cl
c0008cbb:	74 09                	je     c0008cc6 <VgaText::decrementCursor(bool)+0x20>
c0008cbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc1:	e9 6c fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008cc6:	c3                   	ret    
c0008cc7:	90                   	nop

c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cc8:	53                   	push   ebx
c0008cc9:	83 ec 08             	sub    esp,0x8
c0008ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008cdc:	3c 07                	cmp    al,0x7
c0008cde:	75 21                	jne    c0008d01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ce8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	e9 3e 2d 00 00       	jmp    c000ba3f <Krnl::beep(int, int, bool)>
c0008d01:	3c 0d                	cmp    al,0xd
c0008d03:	75 09                	jne    c0008d0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d0c:	eb 2c                	jmp    c0008d3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d0e:	3c 0a                	cmp    al,0xa
c0008d10:	75 31                	jne    c0008d43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008d1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d25:	75 0f                	jne    c0008d36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d27:	83 ec 0c             	sub    esp,0xc
c0008d2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d2d:	53                   	push   ebx
c0008d2e:	e8 f5 fc ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d3a:	83 c4 08             	add    esp,0x8
c0008d3d:	5b                   	pop    ebx
c0008d3e:	e9 ef fb ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008d43:	3c 08                	cmp    al,0x8
c0008d45:	75 25                	jne    c0008d6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d47:	50                   	push   eax
c0008d48:	50                   	push   eax
c0008d49:	6a 01                	push   0x1
c0008d4b:	53                   	push   ebx
c0008d4c:	e8 55 ff ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008d51:	5a                   	pop    edx
c0008d52:	59                   	pop    ecx
c0008d53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d5f:	6a 20                	push   0x20
c0008d61:	53                   	push   ebx
c0008d62:	e8 6b fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d67:	83 c4 28             	add    esp,0x28
c0008d6a:	5b                   	pop    ebx
c0008d6b:	c3                   	ret    
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	0f be c0             	movsx  eax,al
c0008d72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d78:	51                   	push   ecx
c0008d79:	52                   	push   edx
c0008d7a:	50                   	push   eax
c0008d7b:	53                   	push   ebx
c0008d7c:	e8 51 fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d8d:	83 c4 28             	add    esp,0x28
c0008d90:	5b                   	pop    ebx
c0008d91:	e9 bc fe ff ff       	jmp    c0008c52 <VgaText::incrementCursor(bool)>

c0008d96 <VgaText::putchar(char)>:
c0008d96:	56                   	push   esi
c0008d97:	53                   	push   ebx
c0008d98:	83 ec 14             	sub    esp,0x14
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008da3:	3c 5b                	cmp    al,0x5b
c0008da5:	75 18                	jne    c0008dbf <VgaText::putchar(char)+0x29>
c0008da7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008dab:	74 1f                	je     c0008dcc <VgaText::putchar(char)+0x36>
c0008dad:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008db3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dba:	e9 bd 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dbf:	3c 1b                	cmp    al,0x1b
c0008dc1:	75 09                	jne    c0008dcc <VgaText::putchar(char)+0x36>
c0008dc3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dc7:	e9 b0 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dcc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dcf:	84 c9                	test   cl,cl
c0008dd1:	0f 84 92 00 00 00    	je     c0008e69 <VgaText::putchar(char)+0xd3>
c0008dd7:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dda:	80 fa 3e             	cmp    dl,0x3e
c0008ddd:	77 76                	ja     c0008e55 <VgaText::putchar(char)+0xbf>
c0008ddf:	3c 6d                	cmp    al,0x6d
c0008de1:	75 47                	jne    c0008e2a <VgaText::putchar(char)+0x94>
c0008de3:	31 f6                	xor    esi,esi
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	31 c0                	xor    eax,eax
c0008de9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008dec:	7e 2d                	jle    c0008e1b <VgaText::putchar(char)+0x85>
c0008dee:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008df3:	80 fa 3b             	cmp    dl,0x3b
c0008df6:	75 17                	jne    c0008e0f <VgaText::putchar(char)+0x79>
c0008df8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008dfc:	50                   	push   eax
c0008dfd:	53                   	push   ebx
c0008dfe:	e8 45 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e03:	59                   	pop    ecx
c0008e04:	31 d2                	xor    edx,edx
c0008e06:	58                   	pop    eax
c0008e07:	31 c0                	xor    eax,eax
c0008e09:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e0d:	eb 09                	jmp    c0008e18 <VgaText::putchar(char)+0x82>
c0008e0f:	6b c0 0a             	imul   eax,eax,0xa
c0008e12:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e16:	88 ca                	mov    dl,cl
c0008e18:	46                   	inc    esi
c0008e19:	eb ce                	jmp    c0008de9 <VgaText::putchar(char)+0x53>
c0008e1b:	84 d2                	test   dl,dl
c0008e1d:	74 2e                	je     c0008e4d <VgaText::putchar(char)+0xb7>
c0008e1f:	50                   	push   eax
c0008e20:	53                   	push   ebx
c0008e21:	e8 22 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e26:	58                   	pop    eax
c0008e27:	5a                   	pop    edx
c0008e28:	eb 23                	jmp    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2a:	3c 4a                	cmp    al,0x4a
c0008e2c:	75 1f                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e32:	75 19                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e34:	83 ec 0c             	sub    esp,0xc
c0008e37:	53                   	push   ebx
c0008e38:	e8 97 fd ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0008e3d:	83 c4 0c             	add    esp,0xc
c0008e40:	6a 00                	push   0x0
c0008e42:	6a 00                	push   0x0
c0008e44:	53                   	push   ebx
c0008e45:	e8 28 fd ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008e4a:	83 c4 10             	add    esp,0x10
c0008e4d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e53:	eb 27                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e55:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e58:	83 fa 0e             	cmp    edx,0xe
c0008e5b:	7f 1f                	jg     c0008e7c <VgaText::putchar(char)+0xe6>
c0008e5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e60:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e63:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e67:	eb 13                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e69:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e6c:	0f be c0             	movsx  eax,al
c0008e6f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e72:	50                   	push   eax
c0008e73:	53                   	push   ebx
c0008e74:	e8 4f fe ff ff       	call   c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	83 c4 14             	add    esp,0x14
c0008e7f:	5b                   	pop    ebx
c0008e80:	5e                   	pop    esi
c0008e81:	c3                   	ret    

c0008e82 <VgaText::putx(unsigned int)>:
c0008e82:	57                   	push   edi
c0008e83:	b9 11 00 00 00       	mov    ecx,0x11
c0008e88:	56                   	push   esi
c0008e89:	be 5a d9 01 c0       	mov    esi,0xc001d95a
c0008e8e:	53                   	push   ebx
c0008e8f:	83 ec 20             	sub    esp,0x20
c0008e92:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e96:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e9a:	fc                   	cld    
c0008e9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008e9d:	be 08 00 00 00       	mov    esi,0x8
c0008ea2:	50                   	push   eax
c0008ea3:	50                   	push   eax
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	c1 e3 04             	shl    ebx,0x4
c0008ea9:	c1 e8 1c             	shr    eax,0x1c
c0008eac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb1:	50                   	push   eax
c0008eb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eb6:	e8 db fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	4e                   	dec    esi
c0008ebf:	75 e1                	jne    c0008ea2 <VgaText::putx(unsigned int)+0x20>
c0008ec1:	83 c4 20             	add    esp,0x20
c0008ec4:	5b                   	pop    ebx
c0008ec5:	5e                   	pop    esi
c0008ec6:	5f                   	pop    edi
c0008ec7:	c3                   	ret    

c0008ec8 <VgaText::puts(char const*)>:
c0008ec8:	53                   	push   ebx
c0008ec9:	83 ec 08             	sub    esp,0x8
c0008ecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ed3:	84 c0                	test   al,al
c0008ed5:	74 12                	je     c0008ee9 <VgaText::puts(char const*)+0x21>
c0008ed7:	43                   	inc    ebx
c0008ed8:	51                   	push   ecx
c0008ed9:	51                   	push   ecx
c0008eda:	50                   	push   eax
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 b2 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	eb e7                	jmp    c0008ed0 <VgaText::puts(char const*)+0x8>
c0008ee9:	83 c4 08             	add    esp,0x8
c0008eec:	5b                   	pop    ebx
c0008eed:	c3                   	ret    

c0008eee <VgaText::write(unsigned long long, void*, int*)>:
c0008eee:	55                   	push   ebp
c0008eef:	57                   	push   edi
c0008ef0:	56                   	push   esi
c0008ef1:	53                   	push   ebx
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ef9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008efd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f01:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f08:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f0b:	39 eb                	cmp    ebx,ebp
c0008f0d:	74 13                	je     c0008f22 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f0f:	43                   	inc    ebx
c0008f10:	50                   	push   eax
c0008f11:	50                   	push   eax
c0008f12:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f16:	50                   	push   eax
c0008f17:	56                   	push   esi
c0008f18:	e8 79 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008f1d:	83 c4 10             	add    esp,0x10
c0008f20:	eb e9                	jmp    c0008f0b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f22:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f2d:	89 38                	mov    DWORD PTR [eax],edi
c0008f2f:	83 c4 0c             	add    esp,0xc
c0008f32:	31 c0                	xor    eax,eax
c0008f34:	5b                   	pop    ebx
c0008f35:	5e                   	pop    esi
c0008f36:	5f                   	pop    edi
c0008f37:	5d                   	pop    ebp
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop

c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f3a:	55                   	push   ebp
c0008f3b:	57                   	push   edi
c0008f3c:	56                   	push   esi
c0008f3d:	53                   	push   ebx
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f51:	50                   	push   eax
c0008f52:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f57:	50                   	push   eax
c0008f58:	e8 b9 fa ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008f5d:	5a                   	pop    edx
c0008f5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f63:	59                   	pop    ecx
c0008f64:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f67:	89 c5                	mov    ebp,eax
c0008f69:	0f b7 f6             	movzx  esi,si
c0008f6c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f70:	01 f6                	add    esi,esi
c0008f72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f78:	84 c0                	test   al,al
c0008f7a:	0f 84 f4 00 00 00    	je     c0009074 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f80:	3c 0d                	cmp    al,0xd
c0008f82:	75 0c                	jne    c0008f90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f8b:	e9 de 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f90:	3c 0a                	cmp    al,0xa
c0008f92:	75 45                	jne    c0008fd9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f97:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fa4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fa7:	75 0f                	jne    c0008fb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fa9:	83 ec 0c             	sub    esp,0xc
c0008fac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008faf:	53                   	push   ebx
c0008fb0:	e8 73 fa ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008fb5:	83 c4 10             	add    esp,0x10
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	53                   	push   ebx
c0008fbc:	e8 71 f9 ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008fc1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fcc:	0f b7 f6             	movzx  esi,si
c0008fcf:	01 f6                	add    esi,esi
c0008fd1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd4:	e9 95 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fd9:	3c 08                	cmp    al,0x8
c0008fdb:	75 35                	jne    c0009012 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fdd:	51                   	push   ecx
c0008fde:	51                   	push   ecx
c0008fdf:	6a 01                	push   0x1
c0008fe1:	53                   	push   ebx
c0008fe2:	e8 bf fc ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008fe7:	5e                   	pop    esi
c0008fe8:	58                   	pop    eax
c0008fe9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008fef:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ff2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ff5:	6a 20                	push   0x20
c0008ff7:	53                   	push   ebx
c0008ff8:	e8 d5 fa ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008ffd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009002:	83 c4 20             	add    esp,0x20
c0009005:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009008:	0f b7 f6             	movzx  esi,si
c000900b:	01 f6                	add    esi,esi
c000900d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009010:	eb 5c                	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009012:	52                   	push   edx
c0009013:	52                   	push   edx
c0009014:	89 ea                	mov    edx,ebp
c0009016:	0f b6 ca             	movzx  ecx,dl
c0009019:	51                   	push   ecx
c000901a:	50                   	push   eax
c000901b:	e8 a0 fa ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0009020:	83 c4 10             	add    esp,0x10
c0009023:	66 89 06             	mov    WORD PTR [esi],ax
c0009026:	39 1d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebx
c000902c:	75 1d                	jne    c000904b <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000902e:	83 ec 0c             	sub    esp,0xc
c0009031:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009034:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009037:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009042:	50                   	push   eax
c0009043:	e8 8c d4 00 00       	call   c00164d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009048:	83 c4 20             	add    esp,0x20
c000904b:	83 c6 02             	add    esi,0x2
c000904e:	50                   	push   eax
c000904f:	50                   	push   eax
c0009050:	6a 00                	push   0x0
c0009052:	53                   	push   ebx
c0009053:	e8 fa fb ff ff       	call   c0008c52 <VgaText::incrementCursor(bool)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000905f:	75 0d                	jne    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009061:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009066:	0f b7 f6             	movzx  esi,si
c0009069:	01 f6                	add    esi,esi
c000906b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000906e:	47                   	inc    edi
c000906f:	e9 01 ff ff ff       	jmp    c0008f75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009074:	83 ec 0c             	sub    esp,0xc
c0009077:	53                   	push   ebx
c0009078:	e8 b5 f8 ff ff       	call   c0008932 <VgaText::updateCursor()>
c000907d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009084:	83 c4 1c             	add    esp,0x1c
c0009087:	5b                   	pop    ebx
c0009088:	5e                   	pop    esi
c0009089:	5f                   	pop    edi
c000908a:	5d                   	pop    ebp
c000908b:	c3                   	ret    

c000908c <VgaText::VgaText(char const*)>:
c000908c:	56                   	push   esi
c000908d:	53                   	push   ebx
c000908e:	83 ec 04             	sub    esp,0x4
c0009091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009095:	83 ec 08             	sub    esp,0x8
c0009098:	6a 00                	push   0x0
c000909a:	50                   	push   eax
c000909b:	e8 b2 04 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	ba c0 d9 01 c0       	mov    edx,0xc001d9c0
c00090a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ac:	89 10                	mov    DWORD PTR [eax],edx
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ee:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009104:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	6a 01                	push   0x1
c0009110:	e8 80 08 00 00       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0009115:	83 c4 10             	add    esp,0x10
c0009118:	89 c2                	mov    edx,eax
c000911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009121:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c0009127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000912b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000912e:	89 c6                	mov    esi,eax
c0009130:	e8 f1 f0 ff ff       	call   c0008226 <Phys::allocatePage()>
c0009135:	68 05 0c 00 00       	push   0xc05
c000913a:	56                   	push   esi
c000913b:	50                   	push   eax
c000913c:	53                   	push   ebx
c000913d:	e8 e8 0e 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009142:	83 c4 10             	add    esp,0x10
c0009145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000914c:	83 ec 04             	sub    esp,0x4
c000914f:	68 a0 0f 00 00       	push   0xfa0
c0009154:	6a 00                	push   0x0
c0009156:	50                   	push   eax
c0009157:	e8 94 73 ff ff       	call   c00004f0 <memset>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	83 ec 04             	sub    esp,0x4
c0009162:	6a 00                	push   0x0
c0009164:	6a 07                	push   0x7
c0009166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000916a:	e8 6d f8 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	83 ec 04             	sub    esp,0x4
c0009175:	6a 00                	push   0x0
c0009177:	6a 00                	push   0x0
c0009179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917d:	e8 f0 f9 ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0009182:	83 c4 10             	add    esp,0x10
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918c:	e8 43 fa ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0009191:	83 c4 10             	add    esp,0x10
c0009194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009198:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a0:	05 82 00 00 00       	add    eax,0x82
c00091a5:	83 ec 04             	sub    esp,0x4
c00091a8:	6a 30                	push   0x30
c00091aa:	6a 00                	push   0x0
c00091ac:	50                   	push   eax
c00091ad:	e8 3e 73 ff ff       	call   c00004f0 <memset>
c00091b2:	83 c4 10             	add    esp,0x10
c00091b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b9:	05 b2 00 00 00       	add    eax,0xb2
c00091be:	83 ec 04             	sub    esp,0x4
c00091c1:	68 80 00 00 00       	push   0x80
c00091c6:	6a 00                	push   0x0
c00091c8:	50                   	push   eax
c00091c9:	e8 22 73 ff ff       	call   c00004f0 <memset>
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	90                   	nop
c00091d2:	83 c4 04             	add    esp,0x4
c00091d5:	5b                   	pop    ebx
c00091d6:	5e                   	pop    esi
c00091d7:	c3                   	ret    

c00091d8 <VgaText::receiveKey(unsigned char)>:
c00091d8:	57                   	push   edi
c00091d9:	56                   	push   esi
c00091da:	53                   	push   ebx
c00091db:	83 ec 10             	sub    esp,0x10
c00091de:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091e6:	84 db                	test   bl,bl
c00091e8:	0f 84 ba 00 00 00    	je     c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c00091ee:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091f4:	80 fb 08             	cmp    bl,0x8
c00091f7:	75 2c                	jne    c0009225 <VgaText::receiveKey(unsigned char)+0x4d>
c00091f9:	83 ec 0c             	sub    esp,0xc
c00091fc:	57                   	push   edi
c00091fd:	e8 5e 73 ff ff       	call   c0000560 <strlen>
c0009202:	83 c4 10             	add    esp,0x10
c0009205:	85 c0                	test   eax,eax
c0009207:	74 41                	je     c000924a <VgaText::receiveKey(unsigned char)+0x72>
c0009209:	50                   	push   eax
c000920a:	50                   	push   eax
c000920b:	6a 08                	push   0x8
c000920d:	56                   	push   esi
c000920e:	e8 83 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009213:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009216:	e8 45 73 ff ff       	call   c0000560 <strlen>
c000921b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009223:	eb 22                	jmp    c0009247 <VgaText::receiveKey(unsigned char)+0x6f>
c0009225:	0f be c3             	movsx  eax,bl
c0009228:	52                   	push   edx
c0009229:	52                   	push   edx
c000922a:	50                   	push   eax
c000922b:	56                   	push   esi
c000922c:	e8 65 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009231:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009235:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000923a:	59                   	pop    ecx
c000923b:	58                   	pop    eax
c000923c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009240:	50                   	push   eax
c0009241:	57                   	push   edi
c0009242:	e8 99 75 ff ff       	call   c00007e0 <strcat>
c0009247:	83 c4 10             	add    esp,0x10
c000924a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009251:	75 05                	jne    c0009258 <VgaText::receiveKey(unsigned char)+0x80>
c0009253:	80 fb 0a             	cmp    bl,0xa
c0009256:	75 50                	jne    c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009261:	56                   	push   esi
c0009262:	e8 f9 72 ff ff       	call   c0000560 <strlen>
c0009267:	89 3c 24             	mov    DWORD PTR [esp],edi
c000926a:	89 c3                	mov    ebx,eax
c000926c:	e8 ef 72 ff ff       	call   c0000560 <strlen>
c0009271:	83 c4 10             	add    esp,0x10
c0009274:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009278:	3d 80 00 00 00       	cmp    eax,0x80
c000927d:	76 10                	jbe    c000928f <VgaText::receiveKey(unsigned char)+0xb7>
c000927f:	83 ec 0c             	sub    esp,0xc
c0009282:	68 6b d9 01 c0       	push   0xc001d96b
c0009287:	e8 eb 74 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000928c:	83 c4 10             	add    esp,0x10
c000928f:	50                   	push   eax
c0009290:	50                   	push   eax
c0009291:	57                   	push   edi
c0009292:	56                   	push   esi
c0009293:	e8 48 75 ff ff       	call   c00007e0 <strcat>
c0009298:	83 c4 0c             	add    esp,0xc
c000929b:	6a 30                	push   0x30
c000929d:	6a 00                	push   0x0
c000929f:	57                   	push   edi
c00092a0:	e8 4b 72 ff ff       	call   c00004f0 <memset>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	5b                   	pop    ebx
c00092ac:	5e                   	pop    esi
c00092ad:	5f                   	pop    edi
c00092ae:	c3                   	ret    
c00092af:	90                   	nop

c00092b0 <VgaText::doUpdate()>:
c00092b0:	c3                   	ret    

c00092b1 <newTerminal(char*)>:
c00092b1:	83 ec 28             	sub    esp,0x28
c00092b4:	68 34 01 00 00       	push   0x134
c00092b9:	e8 9b eb ff ff       	call   c0007e59 <malloc>
c00092be:	5a                   	pop    edx
c00092bf:	59                   	pop    ecx
c00092c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c4:	50                   	push   eax
c00092c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092c9:	e8 be fd ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c00092ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d2:	83 c4 2c             	add    esp,0x2c
c00092d5:	c3                   	ret    
c00092d6:	66 90                	xchg   ax,ax

c00092d8 <TSS::TSS()>:
c00092d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092e3:	90                   	nop
c00092e4:	c3                   	ret    
c00092e5:	90                   	nop
c00092e6:	66 90                	xchg   ax,ax

c00092e8 <TSS::setESP(unsigned long)>:
c00092e8:	55                   	push   ebp
c00092e9:	89 e5                	mov    ebp,esp
c00092eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092f7:	90                   	nop
c00092f8:	5d                   	pop    ebp
c00092f9:	c3                   	ret    
c00092fa:	66 90                	xchg   ax,ax

c00092fc <TSS::flush()>:
c00092fc:	55                   	push   ebp
c00092fd:	89 e5                	mov    ebp,esp
c00092ff:	83 ec 10             	sub    esp,0x10
c0009302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009305:	8b 00                	mov    eax,DWORD PTR [eax]
c0009307:	83 c8 03             	or     eax,0x3
c000930a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000930e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009312:	66 89 d0             	mov    ax,dx
c0009315:	0f 00 d8             	ltr    ax
c0009318:	90                   	nop
c0009319:	c9                   	leave  
c000931a:	c3                   	ret    
c000931b:	90                   	nop

c000931c <TSS::setup(unsigned long, unsigned long)>:
c000931c:	55                   	push   ebp
c000931d:	89 e5                	mov    ebp,esp
c000931f:	83 ec 18             	sub    esp,0x18
c0009322:	83 ec 0c             	sub    esp,0xc
c0009325:	6a 68                	push   0x68
c0009327:	e8 2d eb ff ff       	call   c0007e59 <malloc>
c000932c:	83 c4 10             	add    esp,0x10
c000932f:	89 c2                	mov    edx,eax
c0009331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000933d:	83 ec 04             	sub    esp,0x4
c0009340:	6a 68                	push   0x68
c0009342:	6a 00                	push   0x0
c0009344:	50                   	push   eax
c0009345:	e8 a6 71 ff ff       	call   c00004f0 <memset>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009353:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000935c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000935f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000936e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009377:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000937d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009383:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000938c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093c2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e4:	0f 20 da             	mov    edx,cr3
c00093e7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093ed:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	50                   	push   eax
c00093fa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093fd:	50                   	push   eax
c00093fe:	e8 e1 e2 ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	6a 68                	push   0x68
c000940b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000940e:	50                   	push   eax
c000940f:	e8 ec e2 ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c0009414:	83 c4 10             	add    esp,0x10
c0009417:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000941b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000941e:	83 e0 0f             	and    eax,0xf
c0009421:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009424:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009427:	83 c8 40             	or     eax,0x40
c000942a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000942d:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0009432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009438:	05 78 01 00 00       	add    eax,0x178
c000943d:	83 ec 04             	sub    esp,0x4
c0009440:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009443:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009446:	50                   	push   eax
c0009447:	e8 e8 e2 ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	89 c2                	mov    edx,eax
c0009451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009454:	89 10                	mov    DWORD PTR [eax],edx
c0009456:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000945b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009461:	05 78 01 00 00       	add    eax,0x178
c0009466:	83 ec 0c             	sub    esp,0xc
c0009469:	50                   	push   eax
c000946a:	e8 ef e2 ff ff       	call   c000775e <GDT::flush()>
c000946f:	83 c4 10             	add    esp,0x10
c0009472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009475:	8b 00                	mov    eax,DWORD PTR [eax]
c0009477:	c9                   	leave  
c0009478:	c3                   	ret    
c0009479:	90                   	nop

c000947a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009485:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000948a:	75 08                	jne    c0009494 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000948c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009492:	eb 38                	jmp    c00094cc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009494:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009499:	75 17                	jne    c00094b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000949b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094af:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094b2:	89 c1                	mov    ecx,eax
c00094b4:	83 e1 fd             	and    ecx,0xfffffffd
c00094b7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094bd:	74 cd                	je     c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094bf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094c4:	83 e0 ef             	and    eax,0xffffffef
c00094c7:	83 f8 08             	cmp    eax,0x8
c00094ca:	76 c0                	jbe    c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094cc:	31 c0                	xor    eax,eax
c00094ce:	c3                   	ret    
c00094cf:	90                   	nop

c00094d0 <ReservedFilename::isAtty()>:
c00094d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094d7:	31 c0                	xor    eax,eax
c00094d9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094df:	74 09                	je     c00094ea <ReservedFilename::isAtty()+0x1a>
c00094e1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094e7:	0f 94 c0             	sete   al
c00094ea:	c3                   	ret    
c00094eb:	90                   	nop

c00094ec <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094fb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009500:	75 08                	jne    c000950a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009502:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009508:	eb 3d                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000950a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000950f:	75 17                	jne    c0009528 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009516:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009519:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000951f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009525:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009528:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000952d:	75 04                	jne    c0009533 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000952f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009531:	eb 14                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009533:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009538:	74 c8                	je     c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000953f:	83 e0 ef             	and    eax,0xffffffef
c0009542:	83 f8 08             	cmp    eax,0x8
c0009545:	76 bb                	jbe    c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009547:	31 c0                	xor    eax,eax
c0009549:	c3                   	ret    

c000954a <UnixFile::getFileDescriptor()>:
c000954a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009551:	c3                   	ret    

c0009552 <UnixFile::UnixFile(int)>:
c0009552:	53                   	push   ebx
c0009553:	83 ec 28             	sub    esp,0x28
c0009556:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000955b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000955f:	89 10                	mov    DWORD PTR [eax],edx
c0009561:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009569:	0f 8f 8c 01 00 00    	jg     c00096fb <UnixFile::UnixFile(int)+0x1a9>
c000956f:	a1 20 f9 01 c0       	mov    eax,ds:0xc001f920
c0009574:	8d 50 01             	lea    edx,[eax+0x1]
c0009577:	89 15 20 f9 01 c0    	mov    DWORD PTR ds:0xc001f920,edx
c000957d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009581:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009584:	83 ec 08             	sub    esp,0x8
c0009587:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000958b:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009590:	e8 93 2f 01 00       	call   c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009595:	83 c4 10             	add    esp,0x10
c0009598:	a0 b4 0a 02 c0       	mov    al,ds:0xc0020ab4
c000959d:	83 f0 01             	xor    eax,0x1
c00095a0:	84 c0                	test   al,al
c00095a2:	0f 84 54 01 00 00    	je     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c00095a8:	c6 05 b4 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020ab4,0x1
c00095af:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095b7:	83 ec 0c             	sub    esp,0xc
c00095ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095be:	e8 96 e8 ff ff       	call   c0007e59 <malloc>
c00095c3:	83 c4 10             	add    esp,0x10
c00095c6:	89 c3                	mov    ebx,eax
c00095c8:	83 ec 08             	sub    esp,0x8
c00095cb:	68 03 ff ff 0f       	push   0xfffff03
c00095d0:	53                   	push   ebx
c00095d1:	e8 2c 01 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00095d6:	83 c4 10             	add    esp,0x10
c00095d9:	89 1d ac 0a 02 c0    	mov    DWORD PTR ds:0xc0020aac,ebx
c00095df:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095e7:	83 ec 0c             	sub    esp,0xc
c00095ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ee:	e8 66 e8 ff ff       	call   c0007e59 <malloc>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	89 c3                	mov    ebx,eax
c00095f8:	83 ec 08             	sub    esp,0x8
c00095fb:	68 01 ff ff 0f       	push   0xfffff01
c0009600:	53                   	push   ebx
c0009601:	e8 fc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009606:	83 c4 10             	add    esp,0x10
c0009609:	89 1d b0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ab0,ebx
c000960f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000961e:	e8 36 e8 ff ff       	call   c0007e59 <malloc>
c0009623:	83 c4 10             	add    esp,0x10
c0009626:	89 c3                	mov    ebx,eax
c0009628:	83 ec 08             	sub    esp,0x8
c000962b:	68 00 ff ff 0f       	push   0xfffff00
c0009630:	53                   	push   ebx
c0009631:	e8 cc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	89 1d a4 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa4,ebx
c000963f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000964e:	e8 06 e8 ff ff       	call   c0007e59 <malloc>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 c3                	mov    ebx,eax
c0009658:	83 ec 08             	sub    esp,0x8
c000965b:	68 02 ff ff 0f       	push   0xfffff02
c0009660:	53                   	push   ebx
c0009661:	e8 9c 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009666:	83 c4 10             	add    esp,0x10
c0009669:	89 1d a8 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa8,ebx
c000966f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009677:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000967c:	7f 7e                	jg     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c000967e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009686:	83 ec 0c             	sub    esp,0xc
c0009689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000968d:	e8 c7 e7 ff ff       	call   c0007e59 <malloc>
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	89 c3                	mov    ebx,eax
c0009697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969b:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a0:	83 ec 08             	sub    esp,0x8
c00096a3:	50                   	push   eax
c00096a4:	53                   	push   ebx
c00096a5:	e8 58 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b1:	89 1c 85 80 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf580],ebx
c00096b8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 8d e7 ff ff       	call   c0007e59 <malloc>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	89 c3                	mov    ebx,eax
c00096d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096da:	83 ec 08             	sub    esp,0x8
c00096dd:	50                   	push   eax
c00096de:	53                   	push   ebx
c00096df:	e8 1e 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096eb:	89 1c 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],ebx
c00096f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096f6:	e9 7c ff ff ff       	jmp    c0009677 <UnixFile::UnixFile(int)+0x125>
c00096fb:	90                   	nop
c00096fc:	83 c4 28             	add    esp,0x28
c00096ff:	5b                   	pop    ebx
c0009700:	c3                   	ret    
c0009701:	90                   	nop

c0009702 <ReservedFilename::ReservedFilename(int)>:
c0009702:	83 ec 0c             	sub    esp,0xc
c0009705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009709:	83 ec 08             	sub    esp,0x8
c000970c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009710:	50                   	push   eax
c0009711:	e8 3c fe ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	ba a4 da 01 c0       	mov    edx,0xc001daa4
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	89 10                	mov    DWORD PTR [eax],edx
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000972c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000972f:	90                   	nop
c0009730:	83 c4 0c             	add    esp,0xc
c0009733:	c3                   	ret    

c0009734 <UnixFile::~UnixFile()>:
c0009734:	83 ec 1c             	sub    esp,0x1c
c0009737:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000973c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009740:	89 10                	mov    DWORD PTR [eax],edx
c0009742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009749:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000974e:	7f 73                	jg     c00097c3 <UnixFile::~UnixFile()+0x8f>
c0009750:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009758:	83 ec 0c             	sub    esp,0xc
c000975b:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009760:	e8 97 2e 01 00       	call   c001c5fc <LinkedList<UnixFile>::getFirstElement()>
c0009765:	83 c4 10             	add    esp,0x10
c0009768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000976c:	83 ec 0c             	sub    esp,0xc
c000976f:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009774:	e8 8b 2e 01 00       	call   c001c604 <LinkedList<UnixFile>::removeFirst()>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009780:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009784:	74 40                	je     c00097c6 <UnixFile::~UnixFile()+0x92>
c0009786:	83 ec 08             	sub    esp,0x8
c0009789:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000978d:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009792:	e8 91 2d 01 00       	call   c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000979e:	8d 50 01             	lea    edx,[eax+0x1]
c00097a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a5:	3d 88 13 00 00       	cmp    eax,0x1388
c00097aa:	0f 94 c0             	sete   al
c00097ad:	84 c0                	test   al,al
c00097af:	74 a7                	je     c0009758 <UnixFile::~UnixFile()+0x24>
c00097b1:	83 ec 0c             	sub    esp,0xc
c00097b4:	68 60 da 01 c0       	push   0xc001da60
c00097b9:	e8 b9 6f 00 00       	call   c0010777 <Krnl::panic(char const*)>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	eb 95                	jmp    c0009758 <UnixFile::~UnixFile()+0x24>
c00097c3:	90                   	nop
c00097c4:	eb 01                	jmp    c00097c7 <UnixFile::~UnixFile()+0x93>
c00097c6:	90                   	nop
c00097c7:	90                   	nop
c00097c8:	83 c4 1c             	add    esp,0x1c
c00097cb:	c3                   	ret    

c00097cc <UnixFile::~UnixFile()>:
c00097cc:	83 ec 0c             	sub    esp,0xc
c00097cf:	83 ec 0c             	sub    esp,0xc
c00097d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d6:	e8 59 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c00097db:	83 c4 10             	add    esp,0x10
c00097de:	83 ec 08             	sub    esp,0x8
c00097e1:	6a 0c                	push   0xc
c00097e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097e7:	e8 06 13 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	83 c4 0c             	add    esp,0xc
c00097f2:	c3                   	ret    
c00097f3:	90                   	nop

c00097f4 <ReservedFilename::~ReservedFilename()>:
c00097f4:	83 ec 0c             	sub    esp,0xc
c00097f7:	ba a4 da 01 c0       	mov    edx,0xc001daa4
c00097fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009800:	89 10                	mov    DWORD PTR [eax],edx
c0009802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009806:	83 ec 0c             	sub    esp,0xc
c0009809:	50                   	push   eax
c000980a:	e8 25 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	90                   	nop
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    
c0009817:	90                   	nop

c0009818 <ReservedFilename::~ReservedFilename()>:
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009822:	e8 cd ff ff ff       	call   c00097f4 <ReservedFilename::~ReservedFilename()>
c0009827:	83 c4 10             	add    esp,0x10
c000982a:	83 ec 08             	sub    esp,0x8
c000982d:	6a 0c                	push   0xc
c000982f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009833:	e8 ba 12 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0009838:	83 c4 10             	add    esp,0x10
c000983b:	83 c4 0c             	add    esp,0xc
c000983e:	c3                   	ret    

c000983f <getFromFileDescriptor(int)>:
c000983f:	53                   	push   ebx
c0009840:	83 ec 08             	sub    esp,0x8
c0009843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009847:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000984d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009853:	7f 2c                	jg     c0009881 <getFromFileDescriptor(int)+0x42>
c0009855:	83 ec 0c             	sub    esp,0xc
c0009858:	68 b8 0a 02 c0       	push   0xc0020ab8
c000985d:	e8 9a 2d 01 00       	call   c001c5fc <LinkedList<UnixFile>::getFirstElement()>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	85 c0                	test   eax,eax
c0009867:	75 04                	jne    c000986d <getFromFileDescriptor(int)+0x2e>
c0009869:	31 c0                	xor    eax,eax
c000986b:	eb 6e                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c000986d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009870:	74 69                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c0009872:	52                   	push   edx
c0009873:	52                   	push   edx
c0009874:	50                   	push   eax
c0009875:	68 b8 0a 02 c0       	push   0xc0020ab8
c000987a:	e8 27 2e 01 00       	call   c001c6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000987f:	eb e1                	jmp    c0009862 <getFromFileDescriptor(int)+0x23>
c0009881:	a1 ac 0a 02 c0       	mov    eax,ds:0xc0020aac
c0009886:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000988c:	74 4d                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000988e:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0009893:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009899:	74 40                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000989b:	a1 a8 0a 02 c0       	mov    eax,ds:0xc0020aa8
c00098a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098a6:	74 33                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098a8:	a1 a4 0a 02 c0       	mov    eax,ds:0xc0020aa4
c00098ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098b3:	74 26                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098bb:	83 f8 08             	cmp    eax,0x8
c00098be:	77 09                	ja     c00098c9 <getFromFileDescriptor(int)+0x8a>
c00098c0:	8b 04 85 80 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf580]
c00098c7:	eb 12                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c00098c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098cf:	83 fb 08             	cmp    ebx,0x8
c00098d2:	77 95                	ja     c0009869 <getFromFileDescriptor(int)+0x2a>
c00098d4:	8b 04 9d 40 0a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf5c0]
c00098db:	83 c4 08             	add    esp,0x8
c00098de:	5b                   	pop    ebx
c00098df:	c3                   	ret    

c00098e0 <__static_initialization_and_destruction_0(int, int)>:
c00098e0:	83 ec 0c             	sub    esp,0xc
c00098e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098e8:	75 34                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098f2:	75 2a                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	68 b8 0a 02 c0       	push   0xc0020ab8
c00098fc:	e8 e5 2b 01 00       	call   c001c4e6 <LinkedList<UnixFile>::LinkedList()>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	83 ec 04             	sub    esp,0x4
c0009907:	68 58 f7 01 c0       	push   0xc001f758
c000990c:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009911:	68 e4 c4 01 c0       	push   0xc001c4e4
c0009916:	e8 87 11 00 00       	call   c000aaa2 <__cxa_atexit>
c000991b:	83 c4 10             	add    esp,0x10
c000991e:	90                   	nop
c000991f:	83 c4 0c             	add    esp,0xc
c0009922:	c3                   	ret    

c0009923 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009923:	83 ec 0c             	sub    esp,0xc
c0009926:	83 ec 08             	sub    esp,0x8
c0009929:	68 ff ff 00 00       	push   0xffff
c000992e:	6a 01                	push   0x1
c0009930:	e8 ab ff ff ff       	call   c00098e0 <__static_initialization_and_destruction_0(int, int)>
c0009935:	83 c4 10             	add    esp,0x10
c0009938:	83 c4 0c             	add    esp,0xc
c000993b:	c3                   	ret    

c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000993c:	53                   	push   ebx
c000993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009941:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009945:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000994b:	89 c8                	mov    eax,ecx
c000994d:	d1 e8                	shr    eax,1
c000994f:	03 05 28 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f928
c0009955:	83 e1 01             	and    ecx,0x1
c0009958:	8a 10                	mov    dl,BYTE PTR [eax]
c000995a:	75 09                	jne    c0009965 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000995c:	83 e2 f0             	and    edx,0xfffffff0
c000995f:	09 da                	or     edx,ebx
c0009961:	88 10                	mov    BYTE PTR [eax],dl
c0009963:	5b                   	pop    ebx
c0009964:	c3                   	ret    
c0009965:	c1 e3 04             	shl    ebx,0x4
c0009968:	83 e2 0f             	and    edx,0xf
c000996b:	09 da                	or     edx,ebx
c000996d:	88 10                	mov    BYTE PTR [eax],dl
c000996f:	5b                   	pop    ebx
c0009970:	c3                   	ret    

c0009971 <Virt::getPageState(unsigned long)>:
c0009971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009975:	8b 0d 28 f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f928
c000997b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009981:	89 d0                	mov    eax,edx
c0009983:	d1 e8                	shr    eax,1
c0009985:	83 e2 01             	and    edx,0x1
c0009988:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000998b:	75 04                	jne    c0009991 <Virt::getPageState(unsigned long)+0x20>
c000998d:	83 e0 0f             	and    eax,0xf
c0009990:	c3                   	ret    
c0009991:	c0 e8 04             	shr    al,0x4
c0009994:	c3                   	ret    

c0009995 <Virt::allocateKernelVirtualPages(int)>:
c0009995:	55                   	push   ebp
c0009996:	31 ed                	xor    ebp,ebp
c0009998:	57                   	push   edi
c0009999:	56                   	push   esi
c000999a:	53                   	push   ebx
c000999b:	31 db                	xor    ebx,ebx
c000999d:	83 ec 1c             	sub    esp,0x1c
c00099a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099a4:	8b 3d 24 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f924
c00099aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099af:	57                   	push   edi
c00099b0:	e8 bc ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099b5:	5a                   	pop    edx
c00099b6:	84 c0                	test   al,al
c00099b8:	75 3a                	jne    c00099f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099ba:	85 db                	test   ebx,ebx
c00099bc:	75 02                	jne    c00099c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099be:	89 fd                	mov    ebp,edi
c00099c0:	43                   	inc    ebx
c00099c1:	39 f3                	cmp    ebx,esi
c00099c3:	74 5a                	je     c0009a1f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099c5:	47                   	inc    edi
c00099c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099cc:	76 31                	jbe    c00099ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099ce:	c7 05 24 f9 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f924,0xc8000
c00099d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099dd:	75 28                	jne    c0009a07 <Virt::allocateKernelVirtualPages(int)+0x72>
c00099df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099e9:	57                   	push   edi
c00099ea:	e8 82 ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099ef:	5a                   	pop    edx
c00099f0:	84 c0                	test   al,al
c00099f2:	74 c6                	je     c00099ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00099f4:	31 db                	xor    ebx,ebx
c00099f6:	47                   	inc    edi
c00099f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099fd:	77 cf                	ja     c00099ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00099ff:	89 3d 24 f9 01 c0    	mov    DWORD PTR ds:0xc001f924,edi
c0009a05:	eb a8                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	68 b8 da 01 c0       	push   0xc001dab8
c0009a0f:	e8 63 6d 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0009a14:	8b 3d 24 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f924
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	eb 90                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a1f:	89 2d 24 f9 01 c0    	mov    DWORD PTR ds:0xc001f924,ebp
c0009a25:	4b                   	dec    ebx
c0009a26:	74 5f                	je     c0009a87 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a28:	85 f6                	test   esi,esi
c0009a2a:	74 3d                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a2c:	89 e8                	mov    eax,ebp
c0009a2e:	31 db                	xor    ebx,ebx
c0009a30:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a33:	eb 14                	jmp    c0009a49 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a35:	6a 01                	push   0x1
c0009a37:	43                   	inc    ebx
c0009a38:	50                   	push   eax
c0009a39:	e8 fe fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3e:	58                   	pop    eax
c0009a3f:	39 f3                	cmp    ebx,esi
c0009a41:	5a                   	pop    edx
c0009a42:	74 25                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a44:	a1 24 f9 01 c0       	mov    eax,ds:0xc001f924
c0009a49:	8d 50 01             	lea    edx,[eax+0x1]
c0009a4c:	85 db                	test   ebx,ebx
c0009a4e:	89 15 24 f9 01 c0    	mov    DWORD PTR ds:0xc001f924,edx
c0009a54:	74 20                	je     c0009a76 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a56:	39 df                	cmp    edi,ebx
c0009a58:	75 db                	jne    c0009a35 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a5a:	6a 03                	push   0x3
c0009a5c:	43                   	inc    ebx
c0009a5d:	50                   	push   eax
c0009a5e:	e8 d9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a63:	59                   	pop    ecx
c0009a64:	39 f3                	cmp    ebx,esi
c0009a66:	58                   	pop    eax
c0009a67:	75 db                	jne    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	89 e8                	mov    eax,ebp
c0009a6e:	5b                   	pop    ebx
c0009a6f:	c1 e0 0c             	shl    eax,0xc
c0009a72:	5e                   	pop    esi
c0009a73:	5f                   	pop    edi
c0009a74:	5d                   	pop    ebp
c0009a75:	c3                   	ret    
c0009a76:	6a 02                	push   0x2
c0009a78:	bb 01 00 00 00       	mov    ebx,0x1
c0009a7d:	50                   	push   eax
c0009a7e:	e8 b9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a83:	58                   	pop    eax
c0009a84:	5a                   	pop    edx
c0009a85:	eb bd                	jmp    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a87:	6a 04                	push   0x4
c0009a89:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a8c:	55                   	push   ebp
c0009a8d:	a3 24 f9 01 c0       	mov    ds:0xc001f924,eax
c0009a92:	e8 a5 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a97:	59                   	pop    ecx
c0009a98:	89 e8                	mov    eax,ebp
c0009a9a:	5b                   	pop    ebx
c0009a9b:	c1 e0 0c             	shl    eax,0xc
c0009a9e:	83 c4 1c             	add    esp,0x1c
c0009aa1:	5b                   	pop    ebx
c0009aa2:	5e                   	pop    esi
c0009aa3:	5f                   	pop    edi
c0009aa4:	5d                   	pop    ebp
c0009aa5:	c3                   	ret    

c0009aa6 <Virt::freeSwapfilePage(unsigned long)>:
c0009aa6:	53                   	push   ebx
c0009aa7:	8b 15 cc 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020acc
c0009aad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab1:	b8 01 00 00 00       	mov    eax,0x1
c0009ab6:	89 cb                	mov    ebx,ecx
c0009ab8:	d3 e0                	shl    eax,cl
c0009aba:	c1 eb 05             	shr    ebx,0x5
c0009abd:	f7 d0                	not    eax
c0009abf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ac2:	5b                   	pop    ebx
c0009ac3:	c3                   	ret    

c0009ac4 <Virt::swapIDToSector(unsigned long)>:
c0009ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac8:	0f af 05 2c f9 01 c0 	imul   eax,DWORD PTR ds:0xc001f92c
c0009acf:	03 05 34 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f934
c0009ad5:	c3                   	ret    

c0009ad6 <Virt::allocateSwapfilePage()>:
c0009ad6:	55                   	push   ebp
c0009ad7:	31 d2                	xor    edx,edx
c0009ad9:	57                   	push   edi
c0009ada:	56                   	push   esi
c0009adb:	53                   	push   ebx
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	8b 0d 2c f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f92c
c0009ae5:	a1 30 f9 01 c0       	mov    eax,ds:0xc001f930
c0009aea:	f7 f1                	div    ecx
c0009aec:	39 0d 30 f9 01 c0    	cmp    DWORD PTR ds:0xc001f930,ecx
c0009af2:	72 2d                	jb     c0009b21 <Virt::allocateSwapfilePage()+0x4b>
c0009af4:	8b 35 cc 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020acc
c0009afa:	8b 16                	mov    edx,DWORD PTR [esi]
c0009afc:	f6 c2 01             	test   dl,0x1
c0009aff:	74 3c                	je     c0009b3d <Virt::allocateSwapfilePage()+0x67>
c0009b01:	31 c9                	xor    ecx,ecx
c0009b03:	bf 01 00 00 00       	mov    edi,0x1
c0009b08:	eb 12                	jmp    c0009b1c <Virt::allocateSwapfilePage()+0x46>
c0009b0a:	89 fd                	mov    ebp,edi
c0009b0c:	89 ca                	mov    edx,ecx
c0009b0e:	d3 e5                	shl    ebp,cl
c0009b10:	c1 ea 05             	shr    edx,0x5
c0009b13:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b16:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b18:	85 ea                	test   edx,ebp
c0009b1a:	74 2a                	je     c0009b46 <Virt::allocateSwapfilePage()+0x70>
c0009b1c:	41                   	inc    ecx
c0009b1d:	39 c8                	cmp    eax,ecx
c0009b1f:	77 e9                	ja     c0009b0a <Virt::allocateSwapfilePage()+0x34>
c0009b21:	83 ec 0c             	sub    esp,0xc
c0009b24:	68 1f dc 01 c0       	push   0xc001dc1f
c0009b29:	e8 49 6c 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	31 c9                	xor    ecx,ecx
c0009b33:	83 c4 0c             	add    esp,0xc
c0009b36:	89 c8                	mov    eax,ecx
c0009b38:	5b                   	pop    ebx
c0009b39:	5e                   	pop    esi
c0009b3a:	5f                   	pop    edi
c0009b3b:	5d                   	pop    ebp
c0009b3c:	c3                   	ret    
c0009b3d:	89 f3                	mov    ebx,esi
c0009b3f:	bd 01 00 00 00       	mov    ebp,0x1
c0009b44:	31 c9                	xor    ecx,ecx
c0009b46:	09 ea                	or     edx,ebp
c0009b48:	89 c8                	mov    eax,ecx
c0009b4a:	89 13                	mov    DWORD PTR [ebx],edx
c0009b4c:	83 c4 0c             	add    esp,0xc
c0009b4f:	5b                   	pop    ebx
c0009b50:	5e                   	pop    esi
c0009b51:	5f                   	pop    edi
c0009b52:	5d                   	pop    ebp
c0009b53:	c3                   	ret    

c0009b54 <Virt::virtualMemorySetup()>:
c0009b54:	53                   	push   ebx
c0009b55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b5a:	6a 0f                	push   0xf
c0009b5c:	53                   	push   ebx
c0009b5d:	43                   	inc    ebx
c0009b5e:	e8 d9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b63:	58                   	pop    eax
c0009b64:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b6a:	5a                   	pop    edx
c0009b6b:	75 ed                	jne    c0009b5a <Virt::virtualMemorySetup()+0x6>
c0009b6d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b72:	6a 00                	push   0x0
c0009b74:	53                   	push   ebx
c0009b75:	43                   	inc    ebx
c0009b76:	e8 c1 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b7b:	59                   	pop    ecx
c0009b7c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b82:	58                   	pop    eax
c0009b83:	75 ed                	jne    c0009b72 <Virt::virtualMemorySetup()+0x1e>
c0009b85:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b8a:	6a 0f                	push   0xf
c0009b8c:	53                   	push   ebx
c0009b8d:	43                   	inc    ebx
c0009b8e:	e8 a9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b93:	58                   	pop    eax
c0009b94:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b9a:	5a                   	pop    edx
c0009b9b:	75 ed                	jne    c0009b8a <Virt::virtualMemorySetup()+0x36>
c0009b9d:	5b                   	pop    ebx
c0009b9e:	c3                   	ret    

c0009b9f <Virt::setupPageSwapping(int)>:
c0009b9f:	53                   	push   ebx
c0009ba0:	83 ec 0c             	sub    esp,0xc
c0009ba3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009ba7:	a1 48 2f 02 c0       	mov    eax,ds:0xc0022f48
c0009bac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bb4:	53                   	push   ebx
c0009bb5:	c1 e3 0b             	shl    ebx,0xb
c0009bb8:	68 36 dc 01 c0       	push   0xc001dc36
c0009bbd:	50                   	push   eax
c0009bbe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc1:	89 1d 30 f9 01 c0    	mov    DWORD PTR ds:0xc001f930,ebx
c0009bc7:	c6 05 38 f9 01 c0 43 	mov    BYTE PTR ds:0xc001f938,0x43
c0009bce:	c1 eb 08             	shr    ebx,0x8
c0009bd1:	a3 34 f9 01 c0       	mov    ds:0xc001f934,eax
c0009bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bd9:	c7 05 2c f9 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f92c,0x8
c0009be3:	e8 71 e2 ff ff       	call   c0007e59 <malloc>
c0009be8:	83 c4 0c             	add    esp,0xc
c0009beb:	89 c1                	mov    ecx,eax
c0009bed:	a3 cc 0a 02 c0       	mov    ds:0xc0020acc,eax
c0009bf2:	31 d2                	xor    edx,edx
c0009bf4:	a1 30 f9 01 c0       	mov    eax,ds:0xc001f930
c0009bf9:	f7 35 2c f9 01 c0    	div    DWORD PTR ds:0xc001f92c
c0009bff:	c1 e8 05             	shr    eax,0x5
c0009c02:	50                   	push   eax
c0009c03:	6a 00                	push   0x0
c0009c05:	51                   	push   ecx
c0009c06:	e8 e5 68 ff ff       	call   c00004f0 <memset>
c0009c0b:	83 c4 18             	add    esp,0x18
c0009c0e:	5b                   	pop    ebx
c0009c0f:	c3                   	ret    

c0009c10 <VAS::VAS()>:
c0009c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2a:	a3 d0 0a 02 c0       	mov    ds:0xc0020ad0,eax
c0009c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c33:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c42:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c49:	90                   	nop
c0009c4a:	c3                   	ret    
c0009c4b:	90                   	nop

c0009c4c <VAS::VAS(VAS*)>:
c0009c4c:	83 ec 0c             	sub    esp,0xc
c0009c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 d8 da 01 c0       	push   0xc001dad8
c0009c6d:	e8 05 6b 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	90                   	nop
c0009c76:	83 c4 0c             	add    esp,0xc
c0009c79:	c3                   	ret    

c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c7e:	89 c2                	mov    edx,eax
c0009c80:	c1 e8 0a             	shr    eax,0xa
c0009c83:	c1 ea 16             	shr    edx,0x16
c0009c86:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c8b:	19 c9                	sbb    ecx,ecx
c0009c8d:	c1 e2 0c             	shl    edx,0xc
c0009c90:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c96:	25 fc 0f 00 00       	and    eax,0xffc
c0009c9b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009ca2:	01 d0                	add    eax,edx
c0009ca4:	c3                   	ret    
c0009ca5:	90                   	nop

c0009ca6 <VAS::getPageTableEntry(unsigned long)>:
c0009ca6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009caa:	89 ca                	mov    edx,ecx
c0009cac:	c1 e9 0a             	shr    ecx,0xa
c0009caf:	c1 ea 16             	shr    edx,0x16
c0009cb2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cb8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cbe:	c1 e0 0c             	shl    eax,0xc
c0009cc1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cc4:	c3                   	ret    

c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cc5:	57                   	push   edi
c0009cc6:	56                   	push   esi
c0009cc7:	be 01 00 00 00       	mov    esi,0x1
c0009ccc:	53                   	push   ebx
c0009ccd:	83 ec 10             	sub    esp,0x10
c0009cd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cd4:	c1 eb 0c             	shr    ebx,0xc
c0009cd7:	eb 3f                	jmp    c0009d18 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cd9:	83 ec 08             	sub    esp,0x8
c0009cdc:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0009ce1:	57                   	push   edi
c0009ce2:	50                   	push   eax
c0009ce3:	e8 be ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ced:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf1:	f6 c4 04             	test   ah,0x4
c0009cf4:	75 60                	jne    c0009d56 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cf6:	80 fa 04             	cmp    dl,0x4
c0009cf9:	74 79                	je     c0009d74 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cfb:	80 fa 02             	cmp    dl,0x2
c0009cfe:	0f 84 89 00 00 00    	je     c0009d8d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d04:	80 fa 03             	cmp    dl,0x3
c0009d07:	0f 84 ae 00 00 00    	je     c0009dbb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d0d:	fe ca                	dec    dl
c0009d0f:	0f 84 93 00 00 00    	je     c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d15:	43                   	inc    ebx
c0009d16:	31 f6                	xor    esi,esi
c0009d18:	53                   	push   ebx
c0009d19:	89 df                	mov    edi,ebx
c0009d1b:	e8 51 fc ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c0009d20:	c1 e7 0c             	shl    edi,0xc
c0009d23:	5a                   	pop    edx
c0009d24:	84 c0                	test   al,al
c0009d26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d2a:	75 ad                	jne    c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	68 4d dc 01 c0       	push   0xc001dc4d
c0009d34:	e8 3e 6a 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0009d39:	5a                   	pop    edx
c0009d3a:	59                   	pop    ecx
c0009d3b:	57                   	push   edi
c0009d3c:	8b 3d d0 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020ad0
c0009d42:	57                   	push   edi
c0009d43:	e8 5e ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d51:	f6 c4 04             	test   ah,0x4
c0009d54:	74 bf                	je     c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d56:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d5f:	83 ec 0c             	sub    esp,0xc
c0009d62:	50                   	push   eax
c0009d63:	e8 5c e4 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d6f:	80 fa 04             	cmp    dl,0x4
c0009d72:	75 87                	jne    c0009cfb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d74:	89 f0                	mov    eax,esi
c0009d76:	84 c0                	test   al,al
c0009d78:	75 47                	jne    c0009dc1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d7a:	c7 44 24 20 fc da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dafc
c0009d82:	83 c4 10             	add    esp,0x10
c0009d85:	5b                   	pop    ebx
c0009d86:	5e                   	pop    esi
c0009d87:	5f                   	pop    edi
c0009d88:	e9 ea 69 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c0009d8d:	89 f0                	mov    eax,esi
c0009d8f:	84 c0                	test   al,al
c0009d91:	75 15                	jne    c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d93:	83 ec 0c             	sub    esp,0xc
c0009d96:	68 69 dc 01 c0       	push   0xc001dc69
c0009d9b:	e8 d7 69 00 00       	call   c0010777 <Krnl::panic(char const*)>
c0009da0:	83 c4 10             	add    esp,0x10
c0009da3:	e9 6d ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009da8:	83 ec 08             	sub    esp,0x8
c0009dab:	6a 00                	push   0x0
c0009dad:	53                   	push   ebx
c0009dae:	e8 89 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	e9 5a ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbb:	89 f0                	mov    eax,esi
c0009dbd:	84 c0                	test   al,al
c0009dbf:	75 15                	jne    c0009dd6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc1:	83 ec 08             	sub    esp,0x8
c0009dc4:	6a 00                	push   0x0
c0009dc6:	53                   	push   ebx
c0009dc7:	e8 70 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dcc:	83 c4 10             	add    esp,0x10
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	5b                   	pop    ebx
c0009dd3:	5e                   	pop    esi
c0009dd4:	5f                   	pop    edi
c0009dd5:	c3                   	ret    
c0009dd6:	c7 44 24 20 85 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc85
c0009dde:	83 c4 10             	add    esp,0x10
c0009de1:	5b                   	pop    ebx
c0009de2:	5e                   	pop    esi
c0009de3:	5f                   	pop    edi
c0009de4:	e9 8e 69 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c0009de9:	90                   	nop

c0009dea <VAS::freeAllocatedPages(unsigned long)>:
c0009dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009dee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009df2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009df6:	74 09                	je     c0009e01 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009df8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009dfc:	e9 c4 fe ff ff       	jmp    c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e01:	c7 44 24 04 20 db 01 c0 	mov    DWORD PTR [esp+0x4],0xc001db20
c0009e09:	e9 da 0d 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>

c0009e0e <VAS::virtualToPhysical(unsigned long)>:
c0009e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e12:	50                   	push   eax
c0009e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e17:	52                   	push   edx
c0009e18:	e8 89 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e1d:	59                   	pop    ecx
c0009e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e20:	5a                   	pop    edx
c0009e21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e26:	c3                   	ret    
c0009e27:	90                   	nop

c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e28:	55                   	push   ebp
c0009e29:	57                   	push   edi
c0009e2a:	56                   	push   esi
c0009e2b:	53                   	push   ebx
c0009e2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e30:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e3c:	85 db                	test   ebx,ebx
c0009e3e:	7e 22                	jle    c0009e62 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e40:	c1 e3 0c             	shl    ebx,0xc
c0009e43:	01 f3                	add    ebx,esi
c0009e45:	56                   	push   esi
c0009e46:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e4c:	55                   	push   ebp
c0009e4d:	e8 54 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e52:	5a                   	pop    edx
c0009e53:	59                   	pop    ecx
c0009e54:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e56:	21 f9                	and    ecx,edi
c0009e58:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e5c:	39 f3                	cmp    ebx,esi
c0009e5e:	89 08                	mov    DWORD PTR [eax],ecx
c0009e60:	75 e3                	jne    c0009e45 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e62:	5b                   	pop    ebx
c0009e63:	5e                   	pop    esi
c0009e64:	5f                   	pop    edi
c0009e65:	5d                   	pop    ebp
c0009e66:	c3                   	ret    
c0009e67:	90                   	nop

c0009e68 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e68:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0009e6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e73:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e7a:	75 01                	jne    c0009e7d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e7c:	c3                   	ret    
c0009e7d:	68 80 00 00 00       	push   0x80
c0009e82:	6a ff                	push   0xffffffff
c0009e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e88:	50                   	push   eax
c0009e89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e8d:	52                   	push   edx
c0009e8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e92:	51                   	push   ecx
c0009e93:	e8 90 ff ff ff       	call   c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>
c0009e98:	83 c4 14             	add    esp,0x14
c0009e9b:	c3                   	ret    

c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>:
c0009e9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eaf:	19 c0                	sbb    eax,eax
c0009eb1:	83 ca 03             	or     edx,0x3
c0009eb4:	83 e0 fc             	and    eax,0xfffffffc
c0009eb7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ebe:	0f 20 d8             	mov    eax,cr3
c0009ec1:	0f 22 d8             	mov    cr3,eax
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <VAS::~VAS()>:
c0009ec6:	83 ec 2c             	sub    esp,0x2c
c0009ec9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed1:	fa                   	cli    
c0009ed2:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0009ed7:	40                   	inc    eax
c0009ed8:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0009edd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ee7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009eed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef1:	6a 01                	push   0x1
c0009ef3:	50                   	push   eax
c0009ef4:	e8 a3 ff ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c0009ef9:	83 c4 0c             	add    esp,0xc
c0009efc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f04:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f0c:	0f 8f d4 00 00 00    	jg     c0009fe6 <VAS::~VAS()+0x120>
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f1d:	c1 e2 02             	shl    edx,0x2
c0009f20:	01 d0                	add    eax,edx
c0009f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f2c:	83 e0 01             	and    eax,0x1
c0009f2f:	0f 84 a8 00 00 00    	je     c0009fdd <VAS::~VAS()+0x117>
c0009f35:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f3d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f45:	7f 72                	jg     c0009fb9 <VAS::~VAS()+0xf3>
c0009f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4b:	c1 e0 0a             	shl    eax,0xa
c0009f4e:	89 c2                	mov    edx,eax
c0009f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c1 e0 0c             	shl    eax,0xc
c0009f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f5d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f71:	6a 01                	push   0x1
c0009f73:	50                   	push   eax
c0009f74:	e8 01 fd ff ff       	call   c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f79:	83 c4 0c             	add    esp,0xc
c0009f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f8e:	25 01 04 00 00       	and    eax,0x401
c0009f93:	3d 01 04 00 00       	cmp    eax,0x401
c0009f98:	75 19                	jne    c0009fb3 <VAS::~VAS()+0xed>
c0009f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa3:	83 ec 0c             	sub    esp,0xc
c0009fa6:	50                   	push   eax
c0009fa7:	e8 18 e2 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fac:	83 c4 10             	add    esp,0x10
c0009faf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fb3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fb7:	eb 84                	jmp    c0009f3d <VAS::~VAS()+0x77>
c0009fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fbd:	25 00 04 00 00       	and    eax,0x400
c0009fc2:	74 19                	je     c0009fdd <VAS::~VAS()+0x117>
c0009fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fcd:	83 ec 0c             	sub    esp,0xc
c0009fd0:	50                   	push   eax
c0009fd1:	e8 ee e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fd6:	83 c4 10             	add    esp,0x10
c0009fd9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fdd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe1:	e9 1e ff ff ff       	jmp    c0009f04 <VAS::~VAS()+0x3e>
c0009fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fed:	83 ec 0c             	sub    esp,0xc
c0009ff0:	50                   	push   eax
c0009ff1:	e8 cf fc ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ff6:	83 c4 10             	add    esp,0x10
c0009ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a000:	83 ec 0c             	sub    esp,0xc
c000a003:	50                   	push   eax
c000a004:	e8 bb e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a010:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a015:	48                   	dec    eax
c000a016:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000a01b:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a020:	85 c0                	test   eax,eax
c000a022:	75 01                	jne    c000a025 <VAS::~VAS()+0x15f>
c000a024:	fb                   	sti    
c000a025:	90                   	nop
c000a026:	83 c4 2c             	add    esp,0x2c
c000a029:	c3                   	ret    

c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a02a:	55                   	push   ebp
c000a02b:	57                   	push   edi
c000a02c:	56                   	push   esi
c000a02d:	53                   	push   ebx
c000a02e:	83 ec 1c             	sub    esp,0x1c
c000a031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a035:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a039:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a03f:	77 0b                	ja     c000a04c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a041:	0f 20 d8             	mov    eax,cr3
c000a044:	0f 20 d8             	mov    eax,cr3
c000a047:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a04a:	75 47                	jne    c000a093 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a050:	09 d8                	or     eax,ebx
c000a052:	a9 ff 0f 00 00       	test   eax,0xfff
c000a057:	75 57                	jne    c000a0b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a059:	89 de                	mov    esi,ebx
c000a05b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a05e:	c1 ee 16             	shr    esi,0x16
c000a061:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a068:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a06c:	74 54                	je     c000a0c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a06e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a072:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a078:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a07c:	c1 e6 0c             	shl    esi,0xc
c000a07f:	c1 eb 0a             	shr    ebx,0xa
c000a082:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a088:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a08b:	83 c4 1c             	add    esp,0x1c
c000a08e:	5b                   	pop    ebx
c000a08f:	5e                   	pop    esi
c000a090:	5f                   	pop    edi
c000a091:	5d                   	pop    ebp
c000a092:	c3                   	ret    
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 44 db 01 c0       	push   0xc001db44
c000a09b:	e8 48 0b 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a0a0:	83 c4 10             	add    esp,0x10
c000a0a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a7:	09 d8                	or     eax,ebx
c000a0a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0ae:	74 a9                	je     c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b0:	83 ec 0c             	sub    esp,0xc
c000a0b3:	68 ac db 01 c0       	push   0xc001dbac
c000a0b8:	e8 ba 66 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	eb 97                	jmp    c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0c6:	e8 5b e1 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a0cb:	83 ec 0c             	sub    esp,0xc
c000a0ce:	89 c5                	mov    ebp,eax
c000a0d0:	8b 0d d0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ad0
c000a0d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0da:	6a 01                	push   0x1
c000a0dc:	e8 b4 f8 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a0e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0e8:	6a 01                	push   0x1
c000a0ea:	50                   	push   eax
c000a0eb:	55                   	push   ebp
c000a0ec:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0f6:	51                   	push   ecx
c000a0f7:	e8 28 02 00 00       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	68 00 10 00 00       	push   0x1000
c000a104:	6a 00                	push   0x0
c000a106:	50                   	push   eax
c000a107:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a10b:	e8 e0 63 ff ff       	call   c00004f0 <memset>
c000a110:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a114:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a117:	e8 a9 fb ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a11c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a120:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a129:	e9 40 ff ff ff       	jmp    c000a06e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a12e <VAS::allocatePages(int, int)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a139:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a13e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a144:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a14a:	83 e0 01             	and    eax,0x1
c000a14d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a151:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a155:	0f 85 cc 00 00 00    	jne    c000a227 <VAS::allocatePages(int, int)+0xf9>
c000a15b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a15e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a162:	85 c0                	test   eax,eax
c000a164:	0f 84 a1 00 00 00    	je     c000a20b <VAS::allocatePages(int, int)+0xdd>
c000a16a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a16e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a172:	c1 e6 0c             	shl    esi,0xc
c000a175:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a179:	85 c0                	test   eax,eax
c000a17b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a17e:	7e 33                	jle    c000a1b3 <VAS::allocatePages(int, int)+0x85>
c000a180:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a184:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a188:	81 cd 00 04 00 00    	or     ebp,0x400
c000a18e:	e8 93 e0 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a193:	55                   	push   ebp
c000a194:	53                   	push   ebx
c000a195:	50                   	push   eax
c000a196:	57                   	push   edi
c000a197:	e8 8e fe ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a19c:	83 c4 10             	add    esp,0x10
c000a19f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1a4:	74 03                	je     c000a1a9 <VAS::allocatePages(int, int)+0x7b>
c000a1a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1af:	39 de                	cmp    esi,ebx
c000a1b1:	75 db                	jne    c000a18e <VAS::allocatePages(int, int)+0x60>
c000a1b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1b8:	75 12                	jne    c000a1cc <VAS::allocatePages(int, int)+0x9e>
c000a1ba:	0f 20 d8             	mov    eax,cr3
c000a1bd:	0f 22 d8             	mov    cr3,eax
c000a1c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c4:	83 c4 1c             	add    esp,0x1c
c000a1c7:	5b                   	pop    ebx
c000a1c8:	5e                   	pop    esi
c000a1c9:	5f                   	pop    edi
c000a1ca:	5d                   	pop    ebp
c000a1cb:	c3                   	ret    
c000a1cc:	c1 ee 0a             	shr    esi,0xa
c000a1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1d3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1d9:	c1 eb 0a             	shr    ebx,0xa
c000a1dc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1e8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1ee:	39 c3                	cmp    ebx,eax
c000a1f0:	77 ce                	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a1f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1fb:	39 d8                	cmp    eax,ebx
c000a1fd:	73 f3                	jae    c000a1f2 <VAS::allocatePages(int, int)+0xc4>
c000a1ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a203:	83 c4 1c             	add    esp,0x1c
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	5d                   	pop    ebp
c000a20a:	c3                   	ret    
c000a20b:	83 ec 0c             	sub    esp,0xc
c000a20e:	68 d0 db 01 c0       	push   0xc001dbd0
c000a213:	e8 5f 65 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000a218:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a21b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	e9 43 ff ff ff       	jmp    c000a16a <VAS::allocatePages(int, int)+0x3c>
c000a227:	83 ec 0c             	sub    esp,0xc
c000a22a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a22e:	51                   	push   ecx
c000a22f:	e8 61 f7 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a240:	0f 87 9b 00 00 00    	ja     c000a2e1 <VAS::allocatePages(int, int)+0x1b3>
c000a246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a24a:	85 d2                	test   edx,edx
c000a24c:	7e 3c                	jle    c000a28a <VAS::allocatePages(int, int)+0x15c>
c000a24e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a252:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a256:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a25a:	c1 e5 0c             	shl    ebp,0xc
c000a25d:	81 ce 00 04 00 00    	or     esi,0x400
c000a263:	01 dd                	add    ebp,ebx
c000a265:	e8 bc df ff ff       	call   c0008226 <Phys::allocatePage()>
c000a26a:	56                   	push   esi
c000a26b:	53                   	push   ebx
c000a26c:	50                   	push   eax
c000a26d:	57                   	push   edi
c000a26e:	e8 b7 fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a27b:	74 03                	je     c000a280 <VAS::allocatePages(int, int)+0x152>
c000a27d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a280:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a286:	39 dd                	cmp    ebp,ebx
c000a288:	75 db                	jne    c000a265 <VAS::allocatePages(int, int)+0x137>
c000a28a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a28f:	0f 84 25 ff ff ff    	je     c000a1ba <VAS::allocatePages(int, int)+0x8c>
c000a295:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a299:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a29d:	89 d3                	mov    ebx,edx
c000a29f:	c1 e0 0c             	shl    eax,0xc
c000a2a2:	c1 eb 0a             	shr    ebx,0xa
c000a2a5:	01 d0                	add    eax,edx
c000a2a7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2ad:	c1 e8 0a             	shr    eax,0xa
c000a2b0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bb:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c0:	39 c3                	cmp    ebx,eax
c000a2c2:	0f 87 f8 fe ff ff    	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a2c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d1:	39 d8                	cmp    eax,ebx
c000a2d3:	73 f3                	jae    c000a2c8 <VAS::allocatePages(int, int)+0x19a>
c000a2d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d9:	83 c4 1c             	add    esp,0x1c
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	5d                   	pop    ebp
c000a2e0:	c3                   	ret    
c000a2e1:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a2e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ec:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2f3:	0f 84 4d ff ff ff    	je     c000a246 <VAS::allocatePages(int, int)+0x118>
c000a2f9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a301:	e9 40 ff ff ff       	jmp    c000a246 <VAS::allocatePages(int, int)+0x118>

c000a306 <VAS::setCPUSpecific(unsigned long)>:
c000a306:	83 ec 0c             	sub    esp,0xc
c000a309:	6a 05                	push   0x5
c000a30b:	68 00 00 40 c2       	push   0xc2400000
c000a310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a314:	50                   	push   eax
c000a315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a319:	52                   	push   edx
c000a31a:	e8 0b fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a31f:	83 c4 1c             	add    esp,0x1c
c000a322:	c3                   	ret    
c000a323:	90                   	nop

c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a324:	55                   	push   ebp
c000a325:	57                   	push   edi
c000a326:	56                   	push   esi
c000a327:	53                   	push   ebx
c000a328:	83 ec 1c             	sub    esp,0x1c
c000a32b:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a330:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a334:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a33e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a344:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a348:	83 e0 01             	and    eax,0x1
c000a34b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a34f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a353:	85 c0                	test   eax,eax
c000a355:	7e 39                	jle    c000a390 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35b:	89 f3                	mov    ebx,esi
c000a35d:	c1 e0 0c             	shl    eax,0xc
c000a360:	01 f0                	add    eax,esi
c000a362:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a366:	55                   	push   ebp
c000a367:	53                   	push   ebx
c000a368:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a36c:	29 f0                	sub    eax,esi
c000a36e:	01 d8                	add    eax,ebx
c000a370:	50                   	push   eax
c000a371:	57                   	push   edi
c000a372:	e8 b3 fc ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a37f:	74 03                	je     c000a384 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a381:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a384:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a38e:	75 d6                	jne    c000a366 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a395:	75 10                	jne    c000a3a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a397:	0f 20 d8             	mov    eax,cr3
c000a39a:	0f 22 d8             	mov    cr3,eax
c000a39d:	83 c4 1c             	add    esp,0x1c
c000a3a0:	89 f0                	mov    eax,esi
c000a3a2:	5b                   	pop    ebx
c000a3a3:	5e                   	pop    esi
c000a3a4:	5f                   	pop    edi
c000a3a5:	5d                   	pop    ebp
c000a3a6:	c3                   	ret    
c000a3a7:	89 f3                	mov    ebx,esi
c000a3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3ad:	c1 eb 0a             	shr    ebx,0xa
c000a3b0:	c1 e0 0c             	shl    eax,0xc
c000a3b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3b9:	01 f0                	add    eax,esi
c000a3bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c1:	c1 e8 0a             	shr    eax,0xa
c000a3c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3c9:	2d 00 00 40 00       	sub    eax,0x400000
c000a3ce:	39 c3                	cmp    ebx,eax
c000a3d0:	77 cb                	ja     c000a39d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3db:	39 d8                	cmp    eax,ebx
c000a3dd:	73 f3                	jae    c000a3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3df:	83 c4 1c             	add    esp,0x1c
c000a3e2:	89 f0                	mov    eax,esi
c000a3e4:	5b                   	pop    ebx
c000a3e5:	5e                   	pop    esi
c000a3e6:	5f                   	pop    edi
c000a3e7:	5d                   	pop    ebp
c000a3e8:	c3                   	ret    
c000a3e9:	90                   	nop

c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3ea:	55                   	push   ebp
c000a3eb:	57                   	push   edi
c000a3ec:	56                   	push   esi
c000a3ed:	53                   	push   ebx
c000a3ee:	83 ec 1c             	sub    esp,0x1c
c000a3f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a3fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a401:	a9 ff 0f 00 00       	test   eax,0xfff
c000a406:	75 4a                	jne    c000a452 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a40c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a40f:	c1 eb 16             	shr    ebx,0x16
c000a412:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a419:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a41d:	74 4d                	je     c000a46c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a423:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a427:	c1 e8 0a             	shr    eax,0xa
c000a42a:	80 fa 01             	cmp    dl,0x1
c000a42d:	19 d2                	sbb    edx,edx
c000a42f:	c1 e3 0c             	shl    ebx,0xc
c000a432:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a436:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a43c:	25 fc 0f 00 00       	and    eax,0xffc
c000a441:	01 d8                	add    eax,ebx
c000a443:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a44a:	83 c4 1c             	add    esp,0x1c
c000a44d:	5b                   	pop    ebx
c000a44e:	5e                   	pop    esi
c000a44f:	5f                   	pop    edi
c000a450:	5d                   	pop    ebp
c000a451:	c3                   	ret    
c000a452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	68 fc db 01 c0       	push   0xc001dbfc
c000a45e:	e8 14 63 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a46a:	eb 9c                	jmp    c000a408 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a46c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a470:	e8 b1 dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a475:	83 ec 0c             	sub    esp,0xc
c000a478:	89 c5                	mov    ebp,eax
c000a47a:	8b 0d d0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ad0
c000a480:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a484:	6a 01                	push   0x1
c000a486:	e8 0a f5 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a48b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a492:	6a 01                	push   0x1
c000a494:	50                   	push   eax
c000a495:	55                   	push   ebp
c000a496:	81 cd 07 04 00 00    	or     ebp,0x407
c000a49c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a0:	51                   	push   ecx
c000a4a1:	e8 7e fe ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4a6:	83 c4 1c             	add    esp,0x1c
c000a4a9:	68 00 10 00 00       	push   0x1000
c000a4ae:	6a 00                	push   0x0
c000a4b0:	50                   	push   eax
c000a4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4b5:	e8 36 60 ff ff       	call   c00004f0 <memset>
c000a4ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c1:	e8 ff f7 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4c6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4c9:	83 c4 10             	add    esp,0x10
c000a4cc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4d3:	e9 47 ff ff ff       	jmp    c000a41f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4d8 <VAS::VAS(bool)>:
c000a4d8:	53                   	push   ebx
c000a4d9:	83 ec 28             	sub    esp,0x28
c000a4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a502:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a505:	e8 1c dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a50a:	89 c2                	mov    edx,eax
c000a50c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a510:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a513:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000a519:	83 ec 0c             	sub    esp,0xc
c000a51c:	6a 01                	push   0x1
c000a51e:	e8 72 f4 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	89 c2                	mov    edx,eax
c000a528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a52f:	83 ec 0c             	sub    esp,0xc
c000a532:	6a 03                	push   0x3
c000a534:	6a 01                	push   0x1
c000a536:	52                   	push   edx
c000a537:	50                   	push   eax
c000a538:	53                   	push   ebx
c000a539:	e8 e6 fd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a53e:	83 c4 20             	add    esp,0x20
c000a541:	89 c2                	mov    edx,eax
c000a543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a547:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a54a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a552:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a55a:	7f 1c                	jg     c000a578 <VAS::VAS(bool)+0xa0>
c000a55c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a560:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a567:	c1 e2 02             	shl    edx,0x2
c000a56a:	01 d0                	add    eax,edx
c000a56c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a572:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a576:	eb da                	jmp    c000a552 <VAS::VAS(bool)+0x7a>
c000a578:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a580:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a588:	7f 7a                	jg     c000a604 <VAS::VAS(bool)+0x12c>
c000a58a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a58e:	2d 00 02 00 00       	sub    eax,0x200
c000a593:	c1 e0 0c             	shl    eax,0xc
c000a596:	83 c8 03             	or     eax,0x3
c000a599:	89 c2                	mov    edx,eax
c000a59b:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a5a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5a6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5ac:	83 e0 10             	and    eax,0x10
c000a5af:	84 c0                	test   al,al
c000a5b1:	74 07                	je     c000a5ba <VAS::VAS(bool)+0xe2>
c000a5b3:	b8 00 01 00 00       	mov    eax,0x100
c000a5b8:	eb 05                	jmp    c000a5bf <VAS::VAS(bool)+0xe7>
c000a5ba:	b8 00 00 00 00       	mov    eax,0x0
c000a5bf:	09 d0                	or     eax,edx
c000a5c1:	89 c1                	mov    ecx,eax
c000a5c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5ce:	c1 e2 02             	shl    edx,0x2
c000a5d1:	01 d0                	add    eax,edx
c000a5d3:	89 ca                	mov    edx,ecx
c000a5d5:	89 10                	mov    DWORD PTR [eax],edx
c000a5d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5db:	2d 40 03 00 00       	sub    eax,0x340
c000a5e0:	83 f8 7f             	cmp    eax,0x7f
c000a5e3:	77 16                	ja     c000a5fb <VAS::VAS(bool)+0x123>
c000a5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f0:	c1 e2 02             	shl    edx,0x2
c000a5f3:	01 d0                	add    eax,edx
c000a5f5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a5ff:	e9 7c ff ff ff       	jmp    c000a580 <VAS::VAS(bool)+0xa8>
c000a604:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a609:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a60f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a615:	83 e0 10             	and    eax,0x10
c000a618:	84 c0                	test   al,al
c000a61a:	74 07                	je     c000a623 <VAS::VAS(bool)+0x14b>
c000a61c:	b8 03 41 00 00       	mov    eax,0x4103
c000a621:	eb 05                	jmp    c000a628 <VAS::VAS(bool)+0x150>
c000a623:	b8 03 40 00 00       	mov    eax,0x4003
c000a628:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a62c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a62f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a635:	89 02                	mov    DWORD PTR [edx],eax
c000a637:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a63c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a642:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a648:	83 ec 08             	sub    esp,0x8
c000a64b:	50                   	push   eax
c000a64c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a650:	e8 b1 fc ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c000a655:	83 c4 10             	add    esp,0x10
c000a658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a65c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a65f:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a664:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a66a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a670:	83 e0 10             	and    eax,0x10
c000a673:	84 c0                	test   al,al
c000a675:	74 07                	je     c000a67e <VAS::VAS(bool)+0x1a6>
c000a677:	b8 00 01 00 00       	mov    eax,0x100
c000a67c:	eb 05                	jmp    c000a683 <VAS::VAS(bool)+0x1ab>
c000a67e:	b8 00 00 00 00       	mov    eax,0x0
c000a683:	09 c2                	or     edx,eax
c000a685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a689:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a68c:	05 fc 0f 00 00       	add    eax,0xffc
c000a691:	83 ca 03             	or     edx,0x3
c000a694:	89 10                	mov    DWORD PTR [eax],edx
c000a696:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a69b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a1:	83 ec 0c             	sub    esp,0xc
c000a6a4:	50                   	push   eax
c000a6a5:	e8 12 1c 00 00       	call   c000c2bc <Device::getName()>
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	68 9f dc 01 c0       	push   0xc001dc9f
c000a6b5:	50                   	push   eax
c000a6b6:	e8 45 60 ff ff       	call   c0000700 <strcmp>
c000a6bb:	83 c4 10             	add    esp,0x10
c000a6be:	85 c0                	test   eax,eax
c000a6c0:	0f 94 c0             	sete   al
c000a6c3:	84 c0                	test   al,al
c000a6c5:	0f 84 87 00 00 00    	je     c000a752 <VAS::VAS(bool)+0x27a>
c000a6cb:	fa                   	cli    
c000a6cc:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a6d1:	40                   	inc    eax
c000a6d2:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000a6d7:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a6dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6e2:	05 7c 09 00 00       	add    eax,0x97c
c000a6e7:	83 ec 0c             	sub    esp,0xc
c000a6ea:	50                   	push   eax
c000a6eb:	e8 66 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6f8:	89 c3                	mov    ebx,eax
c000a6fa:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a6ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a705:	05 7c 09 00 00       	add    eax,0x97c
c000a70a:	83 ec 0c             	sub    esp,0xc
c000a70d:	50                   	push   eax
c000a70e:	e8 43 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	83 ec 08             	sub    esp,0x8
c000a719:	50                   	push   eax
c000a71a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a71e:	e8 83 f5 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a723:	83 c4 10             	add    esp,0x10
c000a726:	8b 00                	mov    eax,DWORD PTR [eax]
c000a728:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a72d:	6a 11                	push   0x11
c000a72f:	53                   	push   ebx
c000a730:	50                   	push   eax
c000a731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a735:	e8 f0 f8 ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a73a:	83 c4 10             	add    esp,0x10
c000a73d:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a742:	48                   	dec    eax
c000a743:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000a748:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a74d:	85 c0                	test   eax,eax
c000a74f:	75 01                	jne    c000a752 <VAS::VAS(bool)+0x27a>
c000a751:	fb                   	sti    
c000a752:	90                   	nop
c000a753:	83 c4 28             	add    esp,0x28
c000a756:	5b                   	pop    ebx
c000a757:	c3                   	ret    

c000a758 <VAS::evict(unsigned long)>:
c000a758:	55                   	push   ebp
c000a759:	57                   	push   edi
c000a75a:	56                   	push   esi
c000a75b:	53                   	push   ebx
c000a75c:	83 ec 1c             	sub    esp,0x1c
c000a75f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a763:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a76b:	e8 66 f3 ff ff       	call   c0009ad6 <Virt::allocateSwapfilePage()>
c000a770:	8b 0d 2c f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f92c
c000a776:	89 c7                	mov    edi,eax
c000a778:	85 c9                	test   ecx,ecx
c000a77a:	7e 3e                	jle    c000a7ba <VAS::evict(unsigned long)+0x62>
c000a77c:	89 ee                	mov    esi,ebp
c000a77e:	31 db                	xor    ebx,ebx
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	57                   	push   edi
c000a784:	e8 3b f3 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a789:	89 34 24             	mov    DWORD PTR [esp],esi
c000a78c:	01 d8                	add    eax,ebx
c000a78e:	6a 01                	push   0x1
c000a790:	31 d2                	xor    edx,edx
c000a792:	43                   	inc    ebx
c000a793:	52                   	push   edx
c000a794:	81 c6 00 02 00 00    	add    esi,0x200
c000a79a:	50                   	push   eax
c000a79b:	0f be 05 38 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f938
c000a7a2:	8b 14 85 3c 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1c4]
c000a7a9:	52                   	push   edx
c000a7aa:	e8 8d 2b 00 00       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c000a7af:	83 c4 20             	add    esp,0x20
c000a7b2:	39 1d 2c f9 01 c0    	cmp    DWORD PTR ds:0xc001f92c,ebx
c000a7b8:	7f c6                	jg     c000a780 <VAS::evict(unsigned long)+0x28>
c000a7ba:	83 ec 08             	sub    esp,0x8
c000a7bd:	c1 e7 0b             	shl    edi,0xb
c000a7c0:	55                   	push   ebp
c000a7c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7c5:	50                   	push   eax
c000a7c6:	e8 db f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a7cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7cd:	89 d1                	mov    ecx,edx
c000a7cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7d5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7db:	09 cf                	or     edi,ecx
c000a7dd:	89 38                	mov    DWORD PTR [eax],edi
c000a7df:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7e2:	ff 05 c8 0a 02 c0    	inc    DWORD PTR ds:0xc0020ac8
c000a7e8:	e8 d7 d9 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a7ed:	0f 20 d8             	mov    eax,cr3
c000a7f0:	0f 22 d8             	mov    cr3,eax
c000a7f3:	a1 c4 0a 02 c0       	mov    eax,ds:0xc0020ac4
c000a7f8:	c7 44 24 40 ad dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dcad
c000a800:	8d 50 01             	lea    edx,[eax+0x1]
c000a803:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a807:	89 15 c4 0a 02 c0    	mov    DWORD PTR ds:0xc0020ac4,edx
c000a80d:	83 c4 2c             	add    esp,0x2c
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	5f                   	pop    edi
c000a813:	5d                   	pop    ebp
c000a814:	e9 cf 03 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000a819:	90                   	nop

c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a81a:	55                   	push   ebp
c000a81b:	57                   	push   edi
c000a81c:	56                   	push   esi
c000a81d:	53                   	push   ebx
c000a81e:	83 ec 14             	sub    esp,0x14
c000a821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a825:	53                   	push   ebx
c000a826:	68 be dc 01 c0       	push   0xc001dcbe
c000a82b:	e8 b8 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a839:	74 21                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	53                   	push   ebx
c000a83f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a843:	57                   	push   edi
c000a844:	e8 5d f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	89 c6                	mov    esi,eax
c000a84e:	85 c0                	test   eax,eax
c000a850:	74 0a                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a852:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a854:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a85a:	74 0a                	je     c000a866 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	83 c4 0c             	add    esp,0xc
c000a861:	5b                   	pop    ebx
c000a862:	5e                   	pop    esi
c000a863:	5f                   	pop    edi
c000a864:	5d                   	pop    ebp
c000a865:	c3                   	ret    
c000a866:	e8 bb d9 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a86b:	c1 ed 0b             	shr    ebp,0xb
c000a86e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a870:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a876:	09 c2                	or     edx,eax
c000a878:	81 ca 01 08 00 00    	or     edx,0x801
c000a87e:	89 16                	mov    DWORD PTR [esi],edx
c000a880:	8b 35 2c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f92c
c000a886:	85 f6                	test   esi,esi
c000a888:	7e 3e                	jle    c000a8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a88a:	89 df                	mov    edi,ebx
c000a88c:	31 f6                	xor    esi,esi
c000a88e:	83 ec 0c             	sub    esp,0xc
c000a891:	55                   	push   ebp
c000a892:	e8 2d f2 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a897:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89a:	01 f0                	add    eax,esi
c000a89c:	6a 01                	push   0x1
c000a89e:	31 d2                	xor    edx,edx
c000a8a0:	46                   	inc    esi
c000a8a1:	52                   	push   edx
c000a8a2:	81 c7 00 02 00 00    	add    edi,0x200
c000a8a8:	50                   	push   eax
c000a8a9:	0f be 05 38 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f938
c000a8b0:	8b 0c 85 3c 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1c4]
c000a8b7:	51                   	push   ecx
c000a8b8:	e8 13 2a 00 00       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8bd:	83 c4 20             	add    esp,0x20
c000a8c0:	39 35 2c f9 01 c0    	cmp    DWORD PTR ds:0xc001f92c,esi
c000a8c6:	7f c6                	jg     c000a88e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8c8:	a1 c8 0a 02 c0       	mov    eax,ds:0xc0020ac8
c000a8cd:	48                   	dec    eax
c000a8ce:	52                   	push   edx
c000a8cf:	a3 c8 0a 02 c0       	mov    ds:0xc0020ac8,eax
c000a8d4:	50                   	push   eax
c000a8d5:	53                   	push   ebx
c000a8d6:	68 d1 dc 01 c0       	push   0xc001dcd1
c000a8db:	e8 08 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a8e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8e3:	e8 be f1 ff ff       	call   c0009aa6 <Virt::freeSwapfilePage(unsigned long)>
c000a8e8:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	48                   	dec    eax
c000a8f1:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	75 01                	jne    c000a8fb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8fa:	fb                   	sti    
c000a8fb:	0f 20 d8             	mov    eax,cr3
c000a8fe:	0f 22 d8             	mov    cr3,eax
c000a901:	b0 01                	mov    al,0x1
c000a903:	e9 56 ff ff ff       	jmp    c000a85e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a908 <VAS::scanForEviction()>:
c000a908:	57                   	push   edi
c000a909:	31 ff                	xor    edi,edi
c000a90b:	56                   	push   esi
c000a90c:	53                   	push   ebx
c000a90d:	83 ec 10             	sub    esp,0x10
c000a910:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a914:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a917:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a91d:	75 0e                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a91f:	89 da                	mov    edx,ebx
c000a921:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a924:	c1 ea 16             	shr    edx,0x16
c000a927:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a92b:	74 4e                	je     c000a97b <VAS::scanForEviction()+0x73>
c000a92d:	53                   	push   ebx
c000a92e:	56                   	push   esi
c000a92f:	e8 72 f3 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a934:	5a                   	pop    edx
c000a935:	8b 10                	mov    edx,DWORD PTR [eax]
c000a937:	59                   	pop    ecx
c000a938:	89 d1                	mov    ecx,edx
c000a93a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a940:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a946:	74 3e                	je     c000a986 <VAS::scanForEviction()+0x7e>
c000a948:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a94e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a954:	76 2b                	jbe    c000a981 <VAS::scanForEviction()+0x79>
c000a956:	47                   	inc    edi
c000a957:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a95e:	83 ff 03             	cmp    edi,0x3
c000a961:	74 32                	je     c000a995 <VAS::scanForEviction()+0x8d>
c000a963:	31 db                	xor    ebx,ebx
c000a965:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a96b:	75 c0                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a96d:	89 da                	mov    edx,ebx
c000a96f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a972:	c1 ea 16             	shr    edx,0x16
c000a975:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a979:	75 b2                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a97b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a981:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a984:	eb 91                	jmp    c000a917 <VAS::scanForEviction()+0xf>
c000a986:	f6 c2 20             	test   dl,0x20
c000a989:	74 13                	je     c000a99e <VAS::scanForEviction()+0x96>
c000a98b:	83 e2 df             	and    edx,0xffffffdf
c000a98e:	89 10                	mov    DWORD PTR [eax],edx
c000a990:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a993:	eb b3                	jmp    c000a948 <VAS::scanForEviction()+0x40>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	31 c0                	xor    eax,eax
c000a99a:	5b                   	pop    ebx
c000a99b:	5e                   	pop    esi
c000a99c:	5f                   	pop    edi
c000a99d:	c3                   	ret    
c000a99e:	83 ec 08             	sub    esp,0x8
c000a9a1:	89 d0                	mov    eax,edx
c000a9a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9ac:	53                   	push   ebx
c000a9ad:	68 e6 dc 01 c0       	push   0xc001dce6
c000a9b2:	e8 31 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9b7:	58                   	pop    eax
c000a9b8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9bb:	5a                   	pop    edx
c000a9bc:	51                   	push   ecx
c000a9bd:	56                   	push   esi
c000a9be:	e8 95 fd ff ff       	call   c000a758 <VAS::evict(unsigned long)>
c000a9c3:	5b                   	pop    ebx
c000a9c4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9c7:	5f                   	pop    edi
c000a9c8:	50                   	push   eax
c000a9c9:	68 fa dc 01 c0       	push   0xc001dcfa
c000a9ce:	e8 15 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9da:	83 c4 10             	add    esp,0x10
c000a9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	5b                   	pop    ebx
c000a9e5:	5e                   	pop    esi
c000a9e6:	5f                   	pop    edi
c000a9e7:	c3                   	ret    

c000a9e8 <mapVASFirstTime>:
c000a9e8:	55                   	push   ebp
c000a9e9:	57                   	push   edi
c000a9ea:	56                   	push   esi
c000a9eb:	53                   	push   ebx
c000a9ec:	83 ec 0c             	sub    esp,0xc
c000a9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9f7:	4a                   	dec    edx
c000a9f8:	0f 84 8c 00 00 00    	je     c000aa8a <mapVASFirstTime+0xa2>
c000a9fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa01:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa04:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa09:	c1 e5 15             	shl    ebp,0x15
c000aa0c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa11:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa17:	29 eb                	sub    ebx,ebp
c000aa19:	29 ef                	sub    edi,ebp
c000aa1b:	e8 06 d8 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa20:	83 ec 0c             	sub    esp,0xc
c000aa23:	68 03 04 00 00       	push   0x403
c000aa28:	6a 01                	push   0x1
c000aa2a:	53                   	push   ebx
c000aa2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa31:	50                   	push   eax
c000aa32:	56                   	push   esi
c000aa33:	e8 ec f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa38:	83 c4 20             	add    esp,0x20
c000aa3b:	39 fb                	cmp    ebx,edi
c000aa3d:	75 dc                	jne    c000aa1b <mapVASFirstTime+0x33>
c000aa3f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa44:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa49:	29 eb                	sub    ebx,ebp
c000aa4b:	29 ef                	sub    edi,ebp
c000aa4d:	e8 d4 d7 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa52:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa56:	19 d2                	sbb    edx,edx
c000aa58:	83 ec 0c             	sub    esp,0xc
c000aa5b:	83 e2 04             	and    edx,0x4
c000aa5e:	81 c2 03 04 00 00    	add    edx,0x403
c000aa64:	52                   	push   edx
c000aa65:	6a 01                	push   0x1
c000aa67:	53                   	push   ebx
c000aa68:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa6e:	50                   	push   eax
c000aa6f:	56                   	push   esi
c000aa70:	e8 af f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa75:	83 c4 20             	add    esp,0x20
c000aa78:	39 df                	cmp    edi,ebx
c000aa7a:	75 d1                	jne    c000aa4d <mapVASFirstTime+0x65>
c000aa7c:	0f 20 d8             	mov    eax,cr3
c000aa7f:	0f 22 d8             	mov    cr3,eax
c000aa82:	83 c4 0c             	add    esp,0xc
c000aa85:	5b                   	pop    ebx
c000aa86:	5e                   	pop    esi
c000aa87:	5f                   	pop    edi
c000aa88:	5d                   	pop    ebp
c000aa89:	c3                   	ret    
c000aa8a:	83 ec 0c             	sub    esp,0xc
c000aa8d:	68 0d dd 01 c0       	push   0xc001dd0d
c000aa92:	e8 51 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	83 c4 0c             	add    esp,0xc
c000aa9d:	5b                   	pop    ebx
c000aa9e:	5e                   	pop    esi
c000aa9f:	5f                   	pop    edi
c000aaa0:	5d                   	pop    ebp
c000aaa1:	c3                   	ret    

c000aaa2 <__cxa_atexit>:
c000aaa2:	31 c0                	xor    eax,eax
c000aaa4:	c3                   	ret    

c000aaa5 <__cxa_finalize>:
c000aaa5:	c3                   	ret    

c000aaa6 <__stack_chk_fail>:
c000aaa6:	55                   	push   ebp
c000aaa7:	89 e5                	mov    ebp,esp
c000aaa9:	83 ec 10             	sub    esp,0x10
c000aaac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aaaf:	68 26 dd 01 c0       	push   0xc001dd26
c000aab4:	e8 2f 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aab9:	58                   	pop    eax
c000aaba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aabd:	5a                   	pop    edx
c000aabe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac1:	68 26 dd 01 c0       	push   0xc001dd26
c000aac6:	e8 1d 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aacb:	c7 04 24 2e dd 01 c0 	mov    DWORD PTR [esp],0xc001dd2e
c000aad2:	e8 a0 5c 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	c9                   	leave  
c000aadb:	c3                   	ret    

c000aadc <__cxa_pure_virtual>:
c000aadc:	83 ec 18             	sub    esp,0x18
c000aadf:	68 46 dd 01 c0       	push   0xc001dd46
c000aae4:	e8 8e 5c 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000aae9:	83 c4 1c             	add    esp,0x1c
c000aaec:	c3                   	ret    

c000aaed <operator new[](unsigned long)>:
c000aaed:	e9 67 d3 ff ff       	jmp    c0007e59 <malloc>

c000aaf2 <operator delete(void*, unsigned long)>:
c000aaf2:	e9 82 d3 ff ff       	jmp    c0007e79 <rfree>

c000aaf7 <operator delete[](void*)>:
c000aaf7:	e9 7d d3 ff ff       	jmp    c0007e79 <rfree>

c000aafc <operator delete[](void*, unsigned long)>:
c000aafc:	e9 78 d3 ff ff       	jmp    c0007e79 <rfree>

c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab01:	55                   	push   ebp
c000ab02:	b9 04 00 00 00       	mov    ecx,0x4
c000ab07:	57                   	push   edi
c000ab08:	56                   	push   esi
c000ab09:	be 5b d9 01 c0       	mov    esi,0xc001d95b
c000ab0e:	53                   	push   ebx
c000ab0f:	83 ec 20             	sub    esp,0x20
c000ab12:	a1 5a d9 01 c0       	mov    eax,ds:0xc001d95a
c000ab17:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab1b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab1f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab23:	a1 67 d9 01 c0       	mov    eax,ds:0xc001d967
c000ab28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	fc                   	cld    
c000ab31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab33:	89 ee                	mov    esi,ebp
c000ab35:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab39:	eb 02                	jmp    c000ab3d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab3b:	89 c6                	mov    esi,eax
c000ab3d:	31 d2                	xor    edx,edx
c000ab3f:	41                   	inc    ecx
c000ab40:	89 f0                	mov    eax,esi
c000ab42:	f7 f3                	div    ebx
c000ab44:	39 de                	cmp    esi,ebx
c000ab46:	73 f3                	jae    c000ab3b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab48:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab4b:	eb 02                	jmp    c000ab4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab4d:	89 c5                	mov    ebp,eax
c000ab4f:	31 d2                	xor    edx,edx
c000ab51:	49                   	dec    ecx
c000ab52:	89 e8                	mov    eax,ebp
c000ab54:	f7 f3                	div    ebx
c000ab56:	39 dd                	cmp    ebp,ebx
c000ab58:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab5c:	88 11                	mov    BYTE PTR [ecx],dl
c000ab5e:	73 ed                	jae    c000ab4d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab64:	83 c4 20             	add    esp,0x20
c000ab67:	5b                   	pop    ebx
c000ab68:	5e                   	pop    esi
c000ab69:	5f                   	pop    edi
c000ab6a:	5d                   	pop    ebp
c000ab6b:	c3                   	ret    

c000ab6c <Dbg::logc(char)>:
c000ab6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab70:	f6 05 f0 09 02 c0 10 	test   BYTE PTR ds:0xc00209f0,0x10
c000ab77:	75 12                	jne    c000ab8b <Dbg::logc(char)+0x1f>
c000ab79:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab7e:	ec                   	in     al,dx
c000ab7f:	a8 20                	test   al,0x20
c000ab81:	74 fb                	je     c000ab7e <Dbg::logc(char)+0x12>
c000ab83:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab88:	88 c8                	mov    al,cl
c000ab8a:	ee                   	out    dx,al
c000ab8b:	c3                   	ret    

c000ab8c <Dbg::logs(char*)>:
c000ab8c:	53                   	push   ebx
c000ab8d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab94:	84 c0                	test   al,al
c000ab96:	74 0f                	je     c000aba7 <Dbg::logs(char*)+0x1b>
c000ab98:	50                   	push   eax
c000ab99:	43                   	inc    ebx
c000ab9a:	e8 cd ff ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ab9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba2:	5a                   	pop    edx
c000aba3:	84 c0                	test   al,al
c000aba5:	75 f1                	jne    c000ab98 <Dbg::logs(char*)+0xc>
c000aba7:	5b                   	pop    ebx
c000aba8:	c3                   	ret    

c000aba9 <Dbg::logWriteInt(unsigned int)>:
c000aba9:	83 ec 10             	sub    esp,0x10
c000abac:	6a 0a                	push   0xa
c000abae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abb2:	50                   	push   eax
c000abb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abb7:	50                   	push   eax
c000abb8:	e8 44 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abbd:	50                   	push   eax
c000abbe:	e8 c9 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abc3:	83 c4 20             	add    esp,0x20
c000abc6:	c3                   	ret    

c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000abc7:	83 ec 10             	sub    esp,0x10
c000abca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abce:	50                   	push   eax
c000abcf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abd3:	50                   	push   eax
c000abd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abd8:	52                   	push   edx
c000abd9:	e8 23 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abde:	50                   	push   eax
c000abdf:	e8 a8 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abe4:	83 c4 20             	add    esp,0x20
c000abe7:	c3                   	ret    

c000abe8 <Dbg::kprintf(char const*, ...)>:
c000abe8:	55                   	push   ebp
c000abe9:	57                   	push   edi
c000abea:	56                   	push   esi
c000abeb:	53                   	push   ebx
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abf3:	f6 05 f0 09 02 c0 10 	test   BYTE PTR ds:0xc00209f0,0x10
c000abfa:	74 08                	je     c000ac04 <Dbg::kprintf(char const*, ...)+0x1c>
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	5b                   	pop    ebx
c000ac00:	5e                   	pop    esi
c000ac01:	5f                   	pop    edi
c000ac02:	5d                   	pop    ebp
c000ac03:	c3                   	ret    
c000ac04:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac08:	31 ff                	xor    edi,edi
c000ac0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac11:	84 c0                	test   al,al
c000ac13:	74 e7                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac15:	8d 77 01             	lea    esi,[edi+0x1]
c000ac18:	3c 25                	cmp    al,0x25
c000ac1a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac1d:	75 47                	jne    c000ac66 <Dbg::kprintf(char const*, ...)+0x7e>
c000ac1f:	83 c7 02             	add    edi,0x2
c000ac22:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac25:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac28:	83 e8 25             	sub    eax,0x25
c000ac2b:	3c 53                	cmp    al,0x53
c000ac2d:	0f 87 d2 00 00 00    	ja     c000ad05 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac33:	25 ff 00 00 00       	and    eax,0xff
c000ac38:	ff 24 85 5c dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22a4]
c000ac3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac43:	89 c8                	mov    eax,ecx
c000ac45:	83 c1 04             	add    ecx,0x4
c000ac48:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac4c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac4e:	55                   	push   ebp
c000ac4f:	e8 55 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000ac54:	58                   	pop    eax
c000ac55:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac58:	84 c0                	test   al,al
c000ac5a:	74 a0                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac5c:	8d 77 01             	lea    esi,[edi+0x1]
c000ac5f:	3c 25                	cmp    al,0x25
c000ac61:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac64:	74 b9                	je     c000ac1f <Dbg::kprintf(char const*, ...)+0x37>
c000ac66:	50                   	push   eax
c000ac67:	89 f7                	mov    edi,esi
c000ac69:	e8 fe fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ac6e:	89 ee                	mov    esi,ebp
c000ac70:	58                   	pop    eax
c000ac71:	eb e2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac77:	89 c8                	mov    eax,ecx
c000ac79:	83 c1 04             	add    ecx,0x4
c000ac7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac7e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac82:	50                   	push   eax
c000ac83:	e8 04 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000ac88:	58                   	pop    eax
c000ac89:	eb ca                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac8f:	89 d0                	mov    eax,edx
c000ac91:	83 c2 04             	add    edx,0x4
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac9a:	50                   	push   eax
c000ac9b:	e8 09 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000aca0:	58                   	pop    eax
c000aca1:	eb b2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000aca3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aca7:	89 d0                	mov    eax,edx
c000aca9:	83 c2 04             	add    edx,0x4
c000acac:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acaf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb3:	50                   	push   eax
c000acb4:	e8 b3 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acb9:	58                   	pop    eax
c000acba:	eb 99                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc0:	89 c8                	mov    eax,ecx
c000acc2:	83 c1 04             	add    ecx,0x4
c000acc5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acc9:	6a 10                	push   0x10
c000accb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000accd:	51                   	push   ecx
c000acce:	e8 f4 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acd3:	5d                   	pop    ebp
c000acd4:	58                   	pop    eax
c000acd5:	e9 7b ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acde:	89 d0                	mov    eax,edx
c000ace0:	83 c2 08             	add    edx,0x8
c000ace3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace7:	6a 10                	push   0x10
c000ace9:	8b 00                	mov    eax,DWORD PTR [eax]
c000aceb:	50                   	push   eax
c000acec:	e8 d6 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acf1:	58                   	pop    eax
c000acf2:	5a                   	pop    edx
c000acf3:	e9 5d ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acf8:	6a 25                	push   0x25
c000acfa:	e8 6d fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acff:	5a                   	pop    edx
c000ad00:	e9 50 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad05:	6a 25                	push   0x25
c000ad07:	e8 60 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad0c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad10:	50                   	push   eax
c000ad11:	e8 56 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad16:	5a                   	pop    edx
c000ad17:	59                   	pop    ecx
c000ad18:	e9 38 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad1d:	90                   	nop

c000ad1e <File::read(unsigned long long, void*, int*)>:
c000ad1e:	53                   	push   ebx
c000ad1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad2e:	3c 19                	cmp    al,0x19
c000ad30:	77 35                	ja     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad32:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ad39:	85 c0                	test   eax,eax
c000ad3b:	74 2a                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 20                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad4b:	74 21                	je     c000ad6e <File::read(unsigned long long, void*, int*)+0x50>
c000ad4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad61:	5b                   	pop    ebx
c000ad62:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad65:	ff e0                	jmp    eax
c000ad67:	b8 0b 00 00 00       	mov    eax,0xb
c000ad6c:	eb 05                	jmp    c000ad73 <File::read(unsigned long long, void*, int*)+0x55>
c000ad6e:	b8 05 00 00 00       	mov    eax,0x5
c000ad73:	5b                   	pop    ebx
c000ad74:	c3                   	ret    
c000ad75:	90                   	nop

c000ad76 <File::write(unsigned long long, void*, int*)>:
c000ad76:	53                   	push   ebx
c000ad77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad86:	3c 19                	cmp    al,0x19
c000ad88:	77 35                	ja     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad8a:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ad91:	85 c0                	test   eax,eax
c000ad93:	74 2a                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad95:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad9b:	85 c0                	test   eax,eax
c000ad9d:	74 20                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada3:	74 21                	je     c000adc6 <File::write(unsigned long long, void*, int*)+0x50>
c000ada5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ada7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adb9:	5b                   	pop    ebx
c000adba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adbd:	ff e0                	jmp    eax
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	eb 05                	jmp    c000adcb <File::write(unsigned long long, void*, int*)+0x55>
c000adc6:	b8 05 00 00 00       	mov    eax,0x5
c000adcb:	5b                   	pop    ebx
c000adcc:	c3                   	ret    
c000adcd:	90                   	nop

c000adce <Directory::read(unsigned long long, void*, int*)>:
c000adce:	53                   	push   ebx
c000adcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000add3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000add7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adde:	3c 19                	cmp    al,0x19
c000ade0:	77 35                	ja     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade2:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ade9:	85 c0                	test   eax,eax
c000adeb:	74 2a                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000aded:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adf3:	85 c0                	test   eax,eax
c000adf5:	74 20                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfb:	74 21                	je     c000ae1e <Directory::read(unsigned long long, void*, int*)+0x50>
c000adfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae03:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae11:	5b                   	pop    ebx
c000ae12:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae15:	ff e0                	jmp    eax
c000ae17:	b8 0b 00 00 00       	mov    eax,0xb
c000ae1c:	eb 05                	jmp    c000ae23 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae1e:	b8 05 00 00 00       	mov    eax,0x5
c000ae23:	5b                   	pop    ebx
c000ae24:	c3                   	ret    
c000ae25:	90                   	nop

c000ae26 <Directory::write(unsigned long long, void*, int*)>:
c000ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae31:	b8 0b 00 00 00       	mov    eax,0xb
c000ae36:	80 fa 19             	cmp    dl,0x19
c000ae39:	77 18                	ja     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3b:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000ae42:	85 d2                	test   edx,edx
c000ae44:	74 0d                	je     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae46:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae4d:	19 c0                	sbb    eax,eax
c000ae4f:	83 e0 0a             	and    eax,0xa
c000ae52:	40                   	inc    eax
c000ae53:	c3                   	ret    

c000ae54 <File::isAtty()>:
c000ae54:	31 c0                	xor    eax,eax
c000ae56:	c3                   	ret    
c000ae57:	90                   	nop

c000ae58 <Directory::isAtty()>:
c000ae58:	31 c0                	xor    eax,eax
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae5c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae61:	c3                   	ret    

c000ae62 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae62:	b8 0a 00 00 00       	mov    eax,0xa
c000ae67:	c3                   	ret    

c000ae68 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae68:	31 c0                	xor    eax,eax
c000ae6a:	31 d2                	xor    edx,edx
c000ae6c:	c3                   	ret    
c000ae6d:	90                   	nop

c000ae6e <File::~File()>:
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	89 10                	mov    DWORD PTR [eax],edx
c000ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	50                   	push   eax
c000ae84:	e8 ab e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	90                   	nop
c000ae8d:	83 c4 0c             	add    esp,0xc
c000ae90:	c3                   	ret    
c000ae91:	90                   	nop

c000ae92 <File::~File()>:
c000ae92:	83 ec 0c             	sub    esp,0xc
c000ae95:	83 ec 0c             	sub    esp,0xc
c000ae98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9c:	e8 cd ff ff ff       	call   c000ae6e <File::~File()>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	83 ec 08             	sub    esp,0x8
c000aea7:	68 14 01 00 00       	push   0x114
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 3d fc ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	83 c4 0c             	add    esp,0xc
c000aebb:	c3                   	ret    

c000aebc <Directory::~Directory()>:
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	ba 38 df 01 c0       	mov    edx,0xc001df38
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	89 10                	mov    DWORD PTR [eax],edx
c000aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	50                   	push   eax
c000aed2:	e8 5d e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	90                   	nop
c000aedb:	83 c4 0c             	add    esp,0xc
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Directory::~Directory()>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	83 ec 0c             	sub    esp,0xc
c000aee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeea:	e8 cd ff ff ff       	call   c000aebc <Directory::~Directory()>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	83 ec 08             	sub    esp,0x8
c000aef5:	68 14 01 00 00       	push   0x114
c000aefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aefe:	e8 ef fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 c4 0c             	add    esp,0xc
c000af09:	c3                   	ret    

c000af0a <Filesystem::Filesystem()>:
c000af0a:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000af0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af13:	89 10                	mov    DWORD PTR [eax],edx
c000af15:	8b 15 d4 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020ad4
c000af1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af26:	a3 d4 0a 02 c0       	mov    ds:0xc0020ad4,eax
c000af2b:	90                   	nop
c000af2c:	c3                   	ret    
c000af2d:	90                   	nop

c000af2e <Filesystem::~Filesystem()>:
c000af2e:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000af33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af37:	89 10                	mov    DWORD PTR [eax],edx
c000af39:	90                   	nop
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Filesystem::~Filesystem()>:
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af43:	e8 e6 ff ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c000af48:	83 c4 04             	add    esp,0x4
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	6a 08                	push   0x8
c000af50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af54:	e8 99 fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af59:	83 c4 10             	add    esp,0x10
c000af5c:	83 c4 0c             	add    esp,0xc
c000af5f:	c3                   	ret    

c000af60 <Fs::getcwd(Process*, char*, int)>:
c000af60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af64:	31 c0                	xor    eax,eax
c000af66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af6d:	7d 15                	jge    c000af84 <Fs::getcwd(Process*, char*, int)+0x24>
c000af6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af73:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af7a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af7d:	84 c9                	test   cl,cl
c000af7f:	74 06                	je     c000af87 <Fs::getcwd(Process*, char*, int)+0x27>
c000af81:	40                   	inc    eax
c000af82:	eb e2                	jmp    c000af66 <Fs::getcwd(Process*, char*, int)+0x6>
c000af84:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af87:	31 c0                	xor    eax,eax
c000af89:	c3                   	ret    

c000af8a <Fs::initVFS()>:
c000af8a:	83 ec 18             	sub    esp,0x18
c000af8d:	6a 08                	push   0x8
c000af8f:	e8 c5 ce ff ff       	call   c0007e59 <malloc>
c000af94:	89 04 24             	mov    DWORD PTR [esp],eax
c000af97:	e8 e4 c2 00 00       	call   c0017280 <FAT::FAT()>
c000af9c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afa3:	e8 b1 ce ff ff       	call   c0007e59 <malloc>
c000afa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000afab:	e8 c8 cf 00 00       	call   c0017f78 <ISO9660::ISO9660()>
c000afb0:	83 c4 1c             	add    esp,0x1c
c000afb3:	c3                   	ret    

c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afb4:	55                   	push   ebp
c000afb5:	57                   	push   edi
c000afb6:	56                   	push   esi
c000afb7:	53                   	push   ebx
c000afb8:	81 ec 10 04 00 00    	sub    esp,0x410
c000afbe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afc5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afcc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afd3:	68 00 04 00 00       	push   0x400
c000afd8:	6a 00                	push   0x0
c000afda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afde:	56                   	push   esi
c000afdf:	e8 0c 55 ff ff       	call   c00004f0 <memset>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afeb:	75 0b                	jne    c000aff8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afed:	50                   	push   eax
c000afee:	50                   	push   eax
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	e8 2a 56 ff ff       	call   c0000620 <strcpy>
c000aff6:	eb 41                	jmp    c000b039 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aff8:	8a 07                	mov    al,BYTE PTR [edi]
c000affa:	3c 5c                	cmp    al,0x5c
c000affc:	74 04                	je     c000b002 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000affe:	3c 2f                	cmp    al,0x2f
c000b000:	75 18                	jne    c000b01a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b002:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b005:	3c 60                	cmp    al,0x60
c000b007:	7e 03                	jle    c000b00c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b009:	83 e8 20             	sub    eax,0x20
c000b00c:	88 04 24             	mov    BYTE PTR [esp],al
c000b00f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b016:	50                   	push   eax
c000b017:	50                   	push   eax
c000b018:	eb 18                	jmp    c000b032 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b01a:	50                   	push   eax
c000b01b:	50                   	push   eax
c000b01c:	55                   	push   ebp
c000b01d:	56                   	push   esi
c000b01e:	e8 fd 55 ff ff       	call   c0000620 <strcpy>
c000b023:	5a                   	pop    edx
c000b024:	59                   	pop    ecx
c000b025:	68 5f eb 01 c0       	push   0xc001eb5f
c000b02a:	56                   	push   esi
c000b02b:	e8 b0 57 ff ff       	call   c00007e0 <strcat>
c000b030:	5d                   	pop    ebp
c000b031:	58                   	pop    eax
c000b032:	57                   	push   edi
c000b033:	56                   	push   esi
c000b034:	e8 a7 57 ff ff       	call   c00007e0 <strcat>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b03f:	3c 60                	cmp    al,0x60
c000b041:	7e 03                	jle    c000b046 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b043:	83 e8 20             	sub    eax,0x20
c000b046:	88 04 24             	mov    BYTE PTR [esp],al
c000b049:	88 03                	mov    BYTE PTR [ebx],al
c000b04b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b052:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b058:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b05c:	bf 03 00 00 00       	mov    edi,0x3
c000b061:	b8 03 00 00 00       	mov    eax,0x3
c000b066:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b069:	84 d2                	test   dl,dl
c000b06b:	0f 84 91 00 00 00    	je     c000b102 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b071:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b074:	80 fa 5c             	cmp    dl,0x5c
c000b077:	74 05                	je     c000b07e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b079:	80 fa 2f             	cmp    dl,0x2f
c000b07c:	75 12                	jne    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b07e:	89 c5                	mov    ebp,eax
c000b080:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b085:	74 09                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b087:	40                   	inc    eax
c000b088:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b08c:	89 cf                	mov    edi,ecx
c000b08e:	eb d6                	jmp    c000b066 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b090:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b095:	75 5b                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b097:	80 fa 2e             	cmp    dl,0x2e
c000b09a:	75 56                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a0:	74 19                	je     c000b0bb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0a7:	74 53                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0a9:	89 f9                	mov    ecx,edi
c000b0ab:	41                   	inc    ecx
c000b0ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0af:	80 fa 2f             	cmp    dl,0x2f
c000b0b2:	74 f7                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b4:	80 fa 5c             	cmp    dl,0x5c
c000b0b7:	74 f2                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b9:	eb d1                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c0:	74 3a                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0c2:	83 f8 03             	cmp    eax,0x3
c000b0c5:	74 c5                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0c7:	41                   	inc    ecx
c000b0c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0cb:	80 fa 2f             	cmp    dl,0x2f
c000b0ce:	74 f7                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d0:	80 fa 5c             	cmp    dl,0x5c
c000b0d3:	74 f2                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d5:	48                   	dec    eax
c000b0d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0da:	75 06                	jne    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e0:	eb f3                	jmp    c000b0d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0e6:	74 07                	je     c000b0ef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ec:	48                   	dec    eax
c000b0ed:	eb f3                	jmp    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0ef:	40                   	inc    eax
c000b0f0:	eb 9a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f2:	80 fa 2f             	cmp    dl,0x2f
c000b0f5:	74 95                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f7:	80 fa 5c             	cmp    dl,0x5c
c000b0fa:	74 90                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b0ff:	40                   	inc    eax
c000b100:	eb 8a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b102:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	53                   	push   ebx
c000b10a:	e8 51 54 ff ff       	call   c0000560 <strlen>
c000b10f:	83 c4 10             	add    esp,0x10
c000b112:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b117:	75 26                	jne    c000b13f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 3e 54 ff ff       	call   c0000560 <strlen>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b12a:	74 26                	je     c000b152 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	53                   	push   ebx
c000b130:	e8 2b 54 ff ff       	call   c0000560 <strlen>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b13d:	eb c7                	jmp    c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	53                   	push   ebx
c000b143:	e8 18 54 ff ff       	call   c0000560 <strlen>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b150:	74 c7                	je     c000b119 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b152:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b158:	5b                   	pop    ebx
c000b159:	5e                   	pop    esi
c000b15a:	5f                   	pop    edi
c000b15b:	5d                   	pop    ebp
c000b15c:	c3                   	ret    
c000b15d:	90                   	nop

c000b15e <File::File(char const*, Process*)>:
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b165:	83 ec 08             	sub    esp,0x8
c000b168:	6a 00                	push   0x0
c000b16a:	50                   	push   eax
c000b16b:	e8 e2 e3 ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c000b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17c:	89 10                	mov    DWORD PTR [eax],edx
c000b17e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b182:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18c:	83 c0 0d             	add    eax,0xd
c000b18f:	83 ec 04             	sub    esp,0x4
c000b192:	52                   	push   edx
c000b193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b197:	50                   	push   eax
c000b198:	e8 17 fe ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1a7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1c6:	25 ff 00 00 00       	and    eax,0xff
c000b1cb:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b1d2:	85 c0                	test   eax,eax
c000b1d4:	74 42                	je     c000b218 <File::File(char const*, Process*)+0xba>
c000b1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e0:	25 ff 00 00 00       	and    eax,0xff
c000b1e5:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b1ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f2:	85 c0                	test   eax,eax
c000b1f4:	75 22                	jne    c000b218 <File::File(char const*, Process*)+0xba>
c000b1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b200:	25 ff 00 00 00       	and    eax,0xff
c000b205:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 f9 1f 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <File::open(FileOpenMode)>:
c000b21e:	53                   	push   ebx
c000b21f:	b8 0b 00 00 00       	mov    eax,0xb
c000b224:	83 ec 08             	sub    esp,0x8
c000b227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b232:	80 fa 19             	cmp    dl,0x19
c000b235:	77 40                	ja     c000b277 <File::open(FileOpenMode)+0x59>
c000b237:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b23e:	85 d2                	test   edx,edx
c000b240:	74 35                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b242:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b248:	85 d2                	test   edx,edx
c000b24a:	74 2b                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b24c:	b8 06 00 00 00       	mov    eax,0x6
c000b251:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b255:	75 20                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b257:	8b 02                	mov    eax,DWORD PTR [edx]
c000b259:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	51                   	push   ecx
c000b264:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b267:	51                   	push   ecx
c000b268:	52                   	push   edx
c000b269:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	85 c0                	test   eax,eax
c000b271:	75 04                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b273:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b277:	83 c4 08             	add    esp,0x8
c000b27a:	5b                   	pop    ebx
c000b27b:	c3                   	ret    

c000b27c <File::close()>:
c000b27c:	53                   	push   ebx
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	83 ec 08             	sub    esp,0x8
c000b285:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b289:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b290:	80 fa 19             	cmp    dl,0x19
c000b293:	77 41                	ja     c000b2d6 <File::close()+0x5a>
c000b295:	8b 1c 95 40 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b29c:	85 db                	test   ebx,ebx
c000b29e:	74 36                	je     c000b2d6 <File::close()+0x5a>
c000b2a0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2a7:	74 2d                	je     c000b2d6 <File::close()+0x5a>
c000b2a9:	b8 05 00 00 00       	mov    eax,0x5
c000b2ae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2b2:	74 22                	je     c000b2d6 <File::close()+0x5a>
c000b2b4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2b8:	8b 04 95 40 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0c0]
c000b2bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2c5:	53                   	push   ebx
c000b2c6:	53                   	push   ebx
c000b2c7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2cf:	50                   	push   eax
c000b2d0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	83 c4 08             	add    esp,0x8
c000b2d9:	5b                   	pop    ebx
c000b2da:	c3                   	ret    
c000b2db:	90                   	nop

c000b2dc <File::seek(unsigned long long)>:
c000b2dc:	56                   	push   esi
c000b2dd:	53                   	push   ebx
c000b2de:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e3:	51                   	push   ecx
c000b2e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2ec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2f7:	80 fa 19             	cmp    dl,0x19
c000b2fa:	77 31                	ja     c000b32d <File::seek(unsigned long long)+0x51>
c000b2fc:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b303:	85 d2                	test   edx,edx
c000b305:	74 26                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b307:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b30d:	85 d2                	test   edx,edx
c000b30f:	74 1c                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b311:	b8 05 00 00 00       	mov    eax,0x5
c000b316:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b31a:	74 11                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b31c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b31e:	53                   	push   ebx
c000b31f:	51                   	push   ecx
c000b320:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b326:	52                   	push   edx
c000b327:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	5a                   	pop    edx
c000b32e:	5b                   	pop    ebx
c000b32f:	5e                   	pop    esi
c000b330:	c3                   	ret    
c000b331:	90                   	nop

c000b332 <File::tell(unsigned long long*)>:
c000b332:	83 ec 0c             	sub    esp,0xc
c000b335:	b8 0b 00 00 00       	mov    eax,0xb
c000b33a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b33e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b345:	80 fa 19             	cmp    dl,0x19
c000b348:	77 34                	ja     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b34a:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b351:	85 d2                	test   edx,edx
c000b353:	74 29                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b355:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b35b:	85 d2                	test   edx,edx
c000b35d:	74 1f                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b35f:	b8 05 00 00 00       	mov    eax,0x5
c000b364:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b368:	74 14                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b36a:	50                   	push   eax
c000b36b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b36d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b371:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b377:	52                   	push   edx
c000b378:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	83 c4 0c             	add    esp,0xc
c000b381:	c3                   	ret    

c000b382 <File::rewind()>:
c000b382:	83 ec 10             	sub    esp,0x10
c000b385:	6a 00                	push   0x0
c000b387:	6a 00                	push   0x0
c000b389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b38d:	e8 4a ff ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c000b392:	83 c4 1c             	add    esp,0x1c
c000b395:	c3                   	ret    

c000b396 <File::unlink()>:
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	b8 0b 00 00 00       	mov    eax,0xb
c000b39e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a9:	80 f9 19             	cmp    cl,0x19
c000b3ac:	77 2f                	ja     c000b3dd <File::unlink()+0x47>
c000b3ae:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b3b5:	85 c9                	test   ecx,ecx
c000b3b7:	74 24                	je     c000b3dd <File::unlink()+0x47>
c000b3b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3bf:	85 c9                	test   ecx,ecx
c000b3c1:	74 1a                	je     c000b3dd <File::unlink()+0x47>
c000b3c3:	b8 06 00 00 00       	mov    eax,0x6
c000b3c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3cc:	75 0f                	jne    c000b3dd <File::unlink()+0x47>
c000b3ce:	83 c2 0d             	add    edx,0xd
c000b3d1:	50                   	push   eax
c000b3d2:	50                   	push   eax
c000b3d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d5:	52                   	push   edx
c000b3d6:	51                   	push   ecx
c000b3d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	83 c4 0c             	add    esp,0xc
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop

c000b3e2 <File::rename(char const*)>:
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3f5:	80 f9 19             	cmp    cl,0x19
c000b3f8:	77 32                	ja     c000b42c <File::rename(char const*)+0x4a>
c000b3fa:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b401:	85 c9                	test   ecx,ecx
c000b403:	74 27                	je     c000b42c <File::rename(char const*)+0x4a>
c000b405:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b40b:	85 c9                	test   ecx,ecx
c000b40d:	74 1d                	je     c000b42c <File::rename(char const*)+0x4a>
c000b40f:	b8 06 00 00 00       	mov    eax,0x6
c000b414:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b418:	75 12                	jne    c000b42c <File::rename(char const*)+0x4a>
c000b41a:	83 c2 0d             	add    edx,0xd
c000b41d:	50                   	push   eax
c000b41e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b424:	52                   	push   edx
c000b425:	51                   	push   ecx
c000b426:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	83 c4 0c             	add    esp,0xc
c000b42f:	c3                   	ret    

c000b430 <File::chfatattr(unsigned char, unsigned char)>:
c000b430:	57                   	push   edi
c000b431:	b8 0b 00 00 00       	mov    eax,0xb
c000b436:	56                   	push   esi
c000b437:	53                   	push   ebx
c000b438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b43c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b447:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b44b:	80 f9 19             	cmp    cl,0x19
c000b44e:	77 37                	ja     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b450:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b457:	85 c9                	test   ecx,ecx
c000b459:	74 2c                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b461:	85 c9                	test   ecx,ecx
c000b463:	74 22                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b465:	b8 06 00 00 00       	mov    eax,0x6
c000b46a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b46e:	75 17                	jne    c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b470:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b472:	89 f0                	mov    eax,esi
c000b474:	83 c2 0d             	add    edx,0xd
c000b477:	0f b6 f0             	movzx  esi,al
c000b47a:	0f b6 db             	movzx  ebx,bl
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	52                   	push   edx
c000b480:	51                   	push   ecx
c000b481:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	5b                   	pop    ebx
c000b488:	5e                   	pop    esi
c000b489:	5f                   	pop    edi
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <File::exists()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	31 c0                	xor    eax,eax
c000b491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b495:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b49c:	80 f9 19             	cmp    cl,0x19
c000b49f:	77 24                	ja     c000b4c5 <File::exists()+0x39>
c000b4a1:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b4a8:	85 c9                	test   ecx,ecx
c000b4aa:	74 19                	je     c000b4c5 <File::exists()+0x39>
c000b4ac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4b2:	85 c9                	test   ecx,ecx
c000b4b4:	74 0f                	je     c000b4c5 <File::exists()+0x39>
c000b4b6:	83 c2 0d             	add    edx,0xd
c000b4b9:	50                   	push   eax
c000b4ba:	50                   	push   eax
c000b4bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4bd:	52                   	push   edx
c000b4be:	51                   	push   ecx
c000b4bf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	83 c4 0c             	add    esp,0xc
c000b4c8:	c3                   	ret    
c000b4c9:	90                   	nop

c000b4ca <File::stat(unsigned long long*, bool*)>:
c000b4ca:	56                   	push   esi
c000b4cb:	53                   	push   ebx
c000b4cc:	50                   	push   eax
c000b4cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4e5:	80 f9 19             	cmp    cl,0x19
c000b4e8:	77 3d                	ja     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ea:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b4f1:	85 c9                	test   ecx,ecx
c000b4f3:	74 32                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4fb:	85 c9                	test   ecx,ecx
c000b4fd:	74 28                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b501:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b505:	74 13                	je     c000b51a <File::stat(unsigned long long*, bool*)+0x50>
c000b507:	83 ec 04             	sub    esp,0x4
c000b50a:	56                   	push   esi
c000b50b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b511:	51                   	push   ecx
c000b512:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b515:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b518:	eb 0a                	jmp    c000b524 <File::stat(unsigned long long*, bool*)+0x5a>
c000b51a:	53                   	push   ebx
c000b51b:	83 c2 0d             	add    edx,0xd
c000b51e:	56                   	push   esi
c000b51f:	52                   	push   edx
c000b520:	51                   	push   ecx
c000b521:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	5a                   	pop    edx
c000b528:	5b                   	pop    ebx
c000b529:	5e                   	pop    esi
c000b52a:	c3                   	ret    

c000b52b <Fs::setcwd(Process*, char*)>:
c000b52b:	55                   	push   ebp
c000b52c:	57                   	push   edi
c000b52d:	56                   	push   esi
c000b52e:	53                   	push   ebx
c000b52f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b535:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b53c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b542:	57                   	push   edi
c000b543:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b54a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b54e:	56                   	push   esi
c000b54f:	e8 60 fa ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b554:	89 34 24             	mov    DWORD PTR [esp],esi
c000b557:	e8 04 50 ff ff       	call   c0000560 <strlen>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	83 f8 02             	cmp    eax,0x2
c000b562:	77 15                	ja     c000b579 <Fs::setcwd(Process*, char*)+0x4e>
c000b564:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b569:	83 eb 41             	sub    ebx,0x41
c000b56c:	8b 04 9d 40 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0c0]
c000b573:	85 c0                	test   eax,eax
c000b575:	75 1c                	jne    c000b593 <Fs::setcwd(Process*, char*)+0x68>
c000b577:	eb 2f                	jmp    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b579:	83 ec 0c             	sub    esp,0xc
c000b57c:	56                   	push   esi
c000b57d:	e8 de 4f ff ff       	call   c0000560 <strlen>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	83 f8 03             	cmp    eax,0x3
c000b588:	75 57                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b58a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b58f:	75 50                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b591:	eb d1                	jmp    c000b564 <Fs::setcwd(Process*, char*)+0x39>
c000b593:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b59a:	75 0c                	jne    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b59c:	83 ec 0c             	sub    esp,0xc
c000b59f:	50                   	push   eax
c000b5a0:	e8 69 1c 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	b8 03 00 00 00       	mov    eax,0x3
c000b5ad:	83 fb 19             	cmp    ebx,0x19
c000b5b0:	0f 87 c6 00 00 00    	ja     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5b6:	8b 14 9d 40 2f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd0c0]
c000b5bd:	b8 05 00 00 00       	mov    eax,0x5
c000b5c2:	85 d2                	test   edx,edx
c000b5c4:	0f 84 b2 00 00 00    	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5ca:	b8 06 00 00 00       	mov    eax,0x6
c000b5cf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5d6:	0f 85 92 00 00 00    	jne    c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b5dc:	e9 9b 00 00 00       	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5e1:	83 ec 0c             	sub    esp,0xc
c000b5e4:	68 14 01 00 00       	push   0x114
c000b5e9:	e8 6b c8 ff ff       	call   c0007e59 <malloc>
c000b5ee:	83 c4 0c             	add    esp,0xc
c000b5f1:	89 c3                	mov    ebx,eax
c000b5f3:	55                   	push   ebp
c000b5f4:	56                   	push   esi
c000b5f5:	50                   	push   eax
c000b5f6:	e8 63 fb ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000b5fb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b600:	83 c4 0c             	add    esp,0xc
c000b603:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b607:	50                   	push   eax
c000b608:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b60c:	50                   	push   eax
c000b60d:	53                   	push   ebx
c000b60e:	e8 b7 fe ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	83 f8 02             	cmp    eax,0x2
c000b619:	74 04                	je     c000b61f <Fs::setcwd(Process*, char*)+0xf4>
c000b61b:	85 c0                	test   eax,eax
c000b61d:	74 1c                	je     c000b63b <Fs::setcwd(Process*, char*)+0x110>
c000b61f:	b8 01 00 00 00       	mov    eax,0x1
c000b624:	85 db                	test   ebx,ebx
c000b626:	74 54                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b628:	83 ec 0c             	sub    esp,0xc
c000b62b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b62d:	53                   	push   ebx
c000b62e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	b8 01 00 00 00       	mov    eax,0x1
c000b639:	eb 41                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b63b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b640:	75 1c                	jne    c000b65e <Fs::setcwd(Process*, char*)+0x133>
c000b642:	b8 02 00 00 00       	mov    eax,0x2
c000b647:	85 db                	test   ebx,ebx
c000b649:	74 31                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b64b:	83 ec 0c             	sub    esp,0xc
c000b64e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b650:	53                   	push   ebx
c000b651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	b8 02 00 00 00       	mov    eax,0x2
c000b65c:	eb 1e                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b65e:	85 db                	test   ebx,ebx
c000b660:	74 0c                	je     c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b662:	83 ec 0c             	sub    esp,0xc
c000b665:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b667:	53                   	push   ebx
c000b668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66b:	83 c4 10             	add    esp,0x10
c000b66e:	50                   	push   eax
c000b66f:	50                   	push   eax
c000b670:	56                   	push   esi
c000b671:	57                   	push   edi
c000b672:	e8 a9 4f ff ff       	call   c0000620 <strcpy>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	31 c0                	xor    eax,eax
c000b67c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b682:	5b                   	pop    ebx
c000b683:	5e                   	pop    esi
c000b684:	5f                   	pop    edi
c000b685:	5d                   	pop    ebp
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <Directory::Directory(char const*, Process*)>:
c000b688:	83 ec 0c             	sub    esp,0xc
c000b68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68f:	83 ec 08             	sub    esp,0x8
c000b692:	6a 00                	push   0x0
c000b694:	50                   	push   eax
c000b695:	e8 b8 de ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b69a:	83 c4 10             	add    esp,0x10
c000b69d:	ba 38 df 01 c0       	mov    edx,0xc001df38
c000b6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a6:	89 10                	mov    DWORD PTR [eax],edx
c000b6a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b6:	83 c0 0d             	add    eax,0xd
c000b6b9:	83 ec 04             	sub    esp,0x4
c000b6bc:	52                   	push   edx
c000b6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c1:	50                   	push   eax
c000b6c2:	e8 ed f8 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6c7:	83 c4 10             	add    esp,0x10
c000b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ce:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d1:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f0:	25 ff 00 00 00       	and    eax,0xff
c000b6f5:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b6fc:	85 c0                	test   eax,eax
c000b6fe:	74 42                	je     c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70a:	25 ff 00 00 00       	and    eax,0xff
c000b70f:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b716:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b71c:	85 c0                	test   eax,eax
c000b71e:	75 22                	jne    c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b72a:	25 ff 00 00 00       	and    eax,0xff
c000b72f:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	50                   	push   eax
c000b73a:	e8 cf 1a 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	90                   	nop
c000b743:	83 c4 0c             	add    esp,0xc
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Directory::open()>:
c000b748:	53                   	push   ebx
c000b749:	b8 0b 00 00 00       	mov    eax,0xb
c000b74e:	83 ec 08             	sub    esp,0x8
c000b751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b755:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b75c:	80 fa 19             	cmp    dl,0x19
c000b75f:	77 3d                	ja     c000b79e <Directory::open()+0x56>
c000b761:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b768:	85 d2                	test   edx,edx
c000b76a:	74 32                	je     c000b79e <Directory::open()+0x56>
c000b76c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b772:	85 d2                	test   edx,edx
c000b774:	74 28                	je     c000b79e <Directory::open()+0x56>
c000b776:	b8 06 00 00 00       	mov    eax,0x6
c000b77b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b77f:	75 1d                	jne    c000b79e <Directory::open()+0x56>
c000b781:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b787:	50                   	push   eax
c000b788:	8b 02                	mov    eax,DWORD PTR [edx]
c000b78a:	51                   	push   ecx
c000b78b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b78e:	51                   	push   ecx
c000b78f:	52                   	push   edx
c000b790:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	85 c0                	test   eax,eax
c000b798:	75 04                	jne    c000b79e <Directory::open()+0x56>
c000b79a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b79e:	83 c4 08             	add    esp,0x8
c000b7a1:	5b                   	pop    ebx
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Directory::close()>:
c000b7a4:	53                   	push   ebx
c000b7a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7aa:	83 ec 08             	sub    esp,0x8
c000b7ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7b8:	80 fa 19             	cmp    dl,0x19
c000b7bb:	77 41                	ja     c000b7fe <Directory::close()+0x5a>
c000b7bd:	8b 1c 95 40 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b7c4:	85 db                	test   ebx,ebx
c000b7c6:	74 36                	je     c000b7fe <Directory::close()+0x5a>
c000b7c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7cf:	74 2d                	je     c000b7fe <Directory::close()+0x5a>
c000b7d1:	b8 05 00 00 00       	mov    eax,0x5
c000b7d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7da:	74 22                	je     c000b7fe <Directory::close()+0x5a>
c000b7dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e0:	8b 04 95 40 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0c0]
c000b7e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7ed:	53                   	push   ebx
c000b7ee:	53                   	push   ebx
c000b7ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7f7:	50                   	push   eax
c000b7f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	83 c4 08             	add    esp,0x8
c000b801:	5b                   	pop    ebx
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Directory::unlink()>:
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	b8 0b 00 00 00       	mov    eax,0xb
c000b80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b817:	80 f9 19             	cmp    cl,0x19
c000b81a:	77 2f                	ja     c000b84b <Directory::unlink()+0x47>
c000b81c:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b823:	85 c9                	test   ecx,ecx
c000b825:	74 24                	je     c000b84b <Directory::unlink()+0x47>
c000b827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b82d:	85 c9                	test   ecx,ecx
c000b82f:	74 1a                	je     c000b84b <Directory::unlink()+0x47>
c000b831:	b8 06 00 00 00       	mov    eax,0x6
c000b836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83a:	75 0f                	jne    c000b84b <Directory::unlink()+0x47>
c000b83c:	83 c2 0d             	add    edx,0xd
c000b83f:	50                   	push   eax
c000b840:	50                   	push   eax
c000b841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b843:	52                   	push   edx
c000b844:	51                   	push   ecx
c000b845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Directory::rename(char const*)>:
c000b850:	83 ec 0c             	sub    esp,0xc
c000b853:	b8 0b 00 00 00       	mov    eax,0xb
c000b858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b863:	80 f9 19             	cmp    cl,0x19
c000b866:	77 32                	ja     c000b89a <Directory::rename(char const*)+0x4a>
c000b868:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b86f:	85 c9                	test   ecx,ecx
c000b871:	74 27                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b879:	85 c9                	test   ecx,ecx
c000b87b:	74 1d                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b87d:	b8 06 00 00 00       	mov    eax,0x6
c000b882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b886:	75 12                	jne    c000b89a <Directory::rename(char const*)+0x4a>
c000b888:	83 c2 0d             	add    edx,0xd
c000b88b:	50                   	push   eax
c000b88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	52                   	push   edx
c000b893:	51                   	push   ecx
c000b894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	c3                   	ret    

c000b89e <Directory::exists()>:
c000b89e:	83 ec 0c             	sub    esp,0xc
c000b8a1:	31 c0                	xor    eax,eax
c000b8a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8ae:	80 f9 19             	cmp    cl,0x19
c000b8b1:	77 24                	ja     c000b8d7 <Directory::exists()+0x39>
c000b8b3:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b8ba:	85 c9                	test   ecx,ecx
c000b8bc:	74 19                	je     c000b8d7 <Directory::exists()+0x39>
c000b8be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8c4:	85 c9                	test   ecx,ecx
c000b8c6:	74 0f                	je     c000b8d7 <Directory::exists()+0x39>
c000b8c8:	83 c2 0d             	add    edx,0xd
c000b8cb:	50                   	push   eax
c000b8cc:	50                   	push   eax
c000b8cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8cf:	52                   	push   edx
c000b8d0:	51                   	push   ecx
c000b8d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	83 c4 0c             	add    esp,0xc
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <Directory::read(dirent*)>:
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	b8 0b 00 00 00       	mov    eax,0xb
c000b8e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8ef:	80 fa 19             	cmp    dl,0x19
c000b8f2:	77 30                	ja     c000b924 <Directory::read(dirent*)+0x48>
c000b8f4:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b8fb:	85 d2                	test   edx,edx
c000b8fd:	74 25                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b8ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b906:	74 1c                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b90d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b911:	52                   	push   edx
c000b912:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b916:	6a 00                	push   0x0
c000b918:	68 10 01 00 00       	push   0x110
c000b91d:	51                   	push   ecx
c000b91e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b921:	83 c4 20             	add    esp,0x20
c000b924:	83 c4 1c             	add    esp,0x1c
c000b927:	c3                   	ret    

c000b928 <Directory::create()>:
c000b928:	83 ec 0c             	sub    esp,0xc
c000b92b:	b8 0b 00 00 00       	mov    eax,0xb
c000b930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b934:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93b:	80 f9 19             	cmp    cl,0x19
c000b93e:	77 2f                	ja     c000b96f <Directory::create()+0x47>
c000b940:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b947:	85 c9                	test   ecx,ecx
c000b949:	74 24                	je     c000b96f <Directory::create()+0x47>
c000b94b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b951:	85 c9                	test   ecx,ecx
c000b953:	74 1a                	je     c000b96f <Directory::create()+0x47>
c000b955:	b8 06 00 00 00       	mov    eax,0x6
c000b95a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b95e:	75 0f                	jne    c000b96f <Directory::create()+0x47>
c000b960:	83 c2 0d             	add    edx,0xd
c000b963:	50                   	push   eax
c000b964:	50                   	push   eax
c000b965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b967:	52                   	push   edx
c000b968:	51                   	push   ecx
c000b969:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b96c:	83 c4 10             	add    esp,0x10
c000b96f:	83 c4 0c             	add    esp,0xc
c000b972:	c3                   	ret    
c000b973:	90                   	nop

c000b974 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b974:	b8 0a 00 00 00       	mov    eax,0xa
c000b979:	c3                   	ret    
c000b97a:	66 90                	xchg   ax,ax

c000b97c <Bus::Bus(char const*)>:
c000b97c:	83 ec 0c             	sub    esp,0xc
c000b97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b983:	83 ec 08             	sub    esp,0x8
c000b986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b98a:	50                   	push   eax
c000b98b:	e8 30 08 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	ba 54 df 01 c0       	mov    edx,0xc001df54
c000b998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b99c:	89 10                	mov    DWORD PTR [eax],edx
c000b99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9ac:	90                   	nop
c000b9ad:	83 c4 0c             	add    esp,0xc
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop
c000b9b2:	66 90                	xchg   ax,ax

c000b9b4 <Bus::~Bus()>:
c000b9b4:	83 ec 0c             	sub    esp,0xc
c000b9b7:	ba 54 df 01 c0       	mov    edx,0xc001df54
c000b9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c0:	89 10                	mov    DWORD PTR [eax],edx
c000b9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 5b 05 00 00       	call   c000bf2a <Device::~Device()>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	90                   	nop
c000b9d3:	83 c4 0c             	add    esp,0xc
c000b9d6:	c3                   	ret    
c000b9d7:	90                   	nop

c000b9d8 <Bus::~Bus()>:
c000b9d8:	83 ec 0c             	sub    esp,0xc
c000b9db:	83 ec 0c             	sub    esp,0xc
c000b9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e2:	e8 cd ff ff ff       	call   c000b9b4 <Bus::~Bus()>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	83 ec 08             	sub    esp,0x8
c000b9ed:	68 58 01 00 00       	push   0x158
c000b9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f6:	e8 f7 f0 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	83 c4 0c             	add    esp,0xc
c000ba01:	c3                   	ret    

c000ba02 <beepThread(void*)>:
c000ba02:	83 ec 0c             	sub    esp,0xc
c000ba05:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000ba0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba0e:	48                   	dec    eax
c000ba0f:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000ba14:	75 01                	jne    c000ba17 <beepThread(void*)+0x15>
c000ba16:	fb                   	sti    
c000ba17:	83 ec 0c             	sub    esp,0xc
c000ba1a:	6b c2 0a             	imul   eax,edx,0xa
c000ba1d:	50                   	push   eax
c000ba1e:	e8 a9 83 00 00       	call   c0013dcc <milliTenthSleep(unsigned int)>
c000ba23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba2a:	e8 e5 9f 00 00       	call   c0015a14 <HalMakeBeep(int)>
c000ba2f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba37:	83 c4 1c             	add    esp,0x1c
c000ba3a:	e9 89 82 00 00       	jmp    c0013cc8 <blockTask(TaskState)>

c000ba3f <Krnl::beep(int, int, bool)>:
c000ba3f:	56                   	push   esi
c000ba40:	53                   	push   ebx
c000ba41:	83 ec 10             	sub    esp,0x10
c000ba44:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba50:	e8 bf 9f 00 00       	call   c0015a14 <HalMakeBeep(int)>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	89 f0                	mov    eax,esi
c000ba5a:	84 c0                	test   al,al
c000ba5c:	74 1e                	je     c000ba7c <Krnl::beep(int, int, bool)+0x3d>
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	6b db 0a             	imul   ebx,ebx,0xa
c000ba64:	53                   	push   ebx
c000ba65:	e8 62 83 00 00       	call   c0013dcc <milliTenthSleep(unsigned int)>
c000ba6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba72:	83 c4 14             	add    esp,0x14
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	e9 98 9f 00 00       	jmp    c0015a14 <HalMakeBeep(int)>
c000ba7c:	68 e6 00 00 00       	push   0xe6
c000ba81:	53                   	push   ebx
c000ba82:	68 02 ba 00 c0       	push   0xc000ba02
c000ba87:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c000ba8d:	e8 1a 7e 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c000ba92:	83 c4 14             	add    esp,0x14
c000ba95:	5b                   	pop    ebx
c000ba96:	5e                   	pop    esi
c000ba97:	c3                   	ret    

c000ba98 <User::loadClockSettings(int)>:
c000ba98:	53                   	push   ebx
c000ba99:	83 ec 14             	sub    esp,0x14
c000ba9c:	68 14 01 00 00       	push   0x114
c000baa1:	e8 b3 c3 ff ff       	call   c0007e59 <malloc>
c000baa6:	83 c4 0c             	add    esp,0xc
c000baa9:	89 c3                	mov    ebx,eax
c000baab:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c000bab1:	68 78 df 01 c0       	push   0xc001df78
c000bab6:	50                   	push   eax
c000bab7:	e8 a2 f6 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000babc:	58                   	pop    eax
c000babd:	5a                   	pop    edx
c000babe:	6a 01                	push   0x1
c000bac0:	53                   	push   ebx
c000bac1:	e8 58 f7 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000bac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bac9:	e8 ae f7 ff ff       	call   c000b27c <File::close()>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	85 db                	test   ebx,ebx
c000bad3:	74 0f                	je     c000bae4 <User::loadClockSettings(int)+0x4c>
c000bad5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000badb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bade:	83 c4 08             	add    esp,0x8
c000bae1:	5b                   	pop    ebx
c000bae2:	ff e0                	jmp    eax
c000bae4:	83 c4 08             	add    esp,0x8
c000bae7:	5b                   	pop    ebx
c000bae8:	c3                   	ret    
c000bae9:	90                   	nop

c000baea <Clock::Clock(char const*)>:
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf1:	83 ec 08             	sub    esp,0x8
c000baf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf8:	50                   	push   eax
c000baf9:	e8 c2 06 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000bafe:	83 c4 10             	add    esp,0x10
c000bb01:	ba a0 df 01 c0       	mov    edx,0xc001dfa0
c000bb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0a:	89 10                	mov    DWORD PTR [eax],edx
c000bb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb10:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb1a:	90                   	nop
c000bb1b:	83 c4 0c             	add    esp,0xc
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <Clock::~Clock()>:
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	ba a0 df 01 c0       	mov    edx,0xc001dfa0
c000bb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2c:	89 10                	mov    DWORD PTR [eax],edx
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	50                   	push   eax
c000bb36:	e8 ef 03 00 00       	call   c000bf2a <Device::~Device()>
c000bb3b:	83 c4 10             	add    esp,0x10
c000bb3e:	90                   	nop
c000bb3f:	83 c4 0c             	add    esp,0xc
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Clock::~Clock()>:
c000bb44:	83 ec 0c             	sub    esp,0xc
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4e:	e8 cd ff ff ff       	call   c000bb20 <Clock::~Clock()>
c000bb53:	83 c4 10             	add    esp,0x10
c000bb56:	83 ec 08             	sub    esp,0x8
c000bb59:	68 58 01 00 00       	push   0x158
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 8b ef ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 c4 0c             	add    esp,0xc
c000bb6d:	c3                   	ret    

c000bb6e <Clock::timeInSecondsLocal()>:
c000bb6e:	53                   	push   ebx
c000bb6f:	83 ec 14             	sub    esp,0x14
c000bb72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb76:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb78:	50                   	push   eax
c000bb79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb7c:	0f b6 0d d8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ad8
c000bb83:	03 0d dc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020adc
c000bb89:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb8f:	89 cb                	mov    ebx,ecx
c000bb91:	c1 fb 1f             	sar    ebx,0x1f
c000bb94:	01 c8                	add    eax,ecx
c000bb96:	11 da                	adc    edx,ebx
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	31 c9                	xor    ecx,ecx
c000bb9d:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bba4:	74 05                	je     c000bbab <Clock::timeInSecondsLocal()+0x3d>
c000bba6:	b9 08 07 00 00       	mov    ecx,0x708
c000bbab:	31 db                	xor    ebx,ebx
c000bbad:	01 c8                	add    eax,ecx
c000bbaf:	11 da                	adc    edx,ebx
c000bbb1:	83 c4 08             	add    esp,0x8
c000bbb4:	5b                   	pop    ebx
c000bbb5:	c3                   	ret    

c000bbb6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbb6:	57                   	push   edi
c000bbb7:	56                   	push   esi
c000bbb8:	53                   	push   ebx
c000bbb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbc7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbca:	0f b6 05 d8 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020ad8
c000bbd1:	03 05 dc 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020adc
c000bbd7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbdd:	99                   	cdq    
c000bbde:	29 c6                	sub    esi,eax
c000bbe0:	19 d7                	sbb    edi,edx
c000bbe2:	89 f0                	mov    eax,esi
c000bbe4:	89 fa                	mov    edx,edi
c000bbe6:	31 f6                	xor    esi,esi
c000bbe8:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bbef:	74 05                	je     c000bbf6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf1:	be 08 07 00 00       	mov    esi,0x708
c000bbf6:	31 ff                	xor    edi,edi
c000bbf8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bbfc:	29 f0                	sub    eax,esi
c000bbfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc02:	19 fa                	sbb    edx,edi
c000bc04:	89 d8                	mov    eax,ebx
c000bc06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0a:	5b                   	pop    ebx
c000bc0b:	5e                   	pop    esi
c000bc0c:	5f                   	pop    edi
c000bc0d:	ff e0                	jmp    eax

c000bc0f <datetimeToSeconds(datetime_t)>:
c000bc0f:	55                   	push   ebp
c000bc10:	57                   	push   edi
c000bc11:	56                   	push   esi
c000bc12:	53                   	push   ebx
c000bc13:	83 ec 14             	sub    esp,0x14
c000bc16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc1e:	89 d3                	mov    ebx,edx
c000bc20:	0f b6 c6             	movzx  eax,dh
c000bc23:	c1 eb 10             	shr    ebx,0x10
c000bc26:	48                   	dec    eax
c000bc27:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc30:	0f b6 f5             	movzx  esi,ch
c000bc33:	89 cf                	mov    edi,ecx
c000bc35:	6b f6 3c             	imul   esi,esi,0x3c
c000bc38:	c1 ef 10             	shr    edi,0x10
c000bc3b:	0f b6 c9             	movzx  ecx,cl
c000bc3e:	89 f8                	mov    eax,edi
c000bc40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc46:	0f b6 f8             	movzx  edi,al
c000bc49:	0f b6 d2             	movzx  edx,dl
c000bc4c:	01 fe                	add    esi,edi
c000bc4e:	01 f1                	add    ecx,esi
c000bc50:	0f b7 f3             	movzx  esi,bx
c000bc53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc57:	c1 f9 1f             	sar    ecx,0x1f
c000bc5a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc63:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc68:	8b 0c 8d e0 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2020]
c000bc6f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc73:	76 29                	jbe    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc75:	f6 c3 03             	test   bl,0x3
c000bc78:	75 24                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc7a:	31 d2                	xor    edx,edx
c000bc7c:	bf 64 00 00 00       	mov    edi,0x64
c000bc81:	89 d8                	mov    eax,ebx
c000bc83:	66 f7 f7             	div    di
c000bc86:	66 85 d2             	test   dx,dx
c000bc89:	75 12                	jne    c000bc9d <datetimeToSeconds(datetime_t)+0x8e>
c000bc8b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc91:	bf 90 01 00 00       	mov    edi,0x190
c000bc96:	99                   	cdq    
c000bc97:	f7 ff                	idiv   edi
c000bc99:	85 d2                	test   edx,edx
c000bc9b:	75 01                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc9d:	41                   	inc    ecx
c000bc9e:	66 83 fb 46          	cmp    bx,0x46
c000bca2:	76 45                	jbe    c000bce9 <datetimeToSeconds(datetime_t)+0xda>
c000bca4:	bb 46 00 00 00       	mov    ebx,0x46
c000bca9:	bf 64 00 00 00       	mov    edi,0x64
c000bcae:	bd 90 01 00 00       	mov    ebp,0x190
c000bcb3:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcb8:	f6 c3 03             	test   bl,0x3
c000bcbb:	75 23                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bcbd:	89 d8                	mov    eax,ebx
c000bcbf:	99                   	cdq    
c000bcc0:	f7 ff                	idiv   edi
c000bcc2:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcc7:	85 d2                	test   edx,edx
c000bcc9:	75 15                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd1:	99                   	cdq    
c000bcd2:	f7 fd                	idiv   ebp
c000bcd4:	31 c0                	xor    eax,eax
c000bcd6:	85 d2                	test   edx,edx
c000bcd8:	0f 94 c0             	sete   al
c000bcdb:	05 6d 01 00 00       	add    eax,0x16d
c000bce0:	01 c1                	add    ecx,eax
c000bce2:	43                   	inc    ebx
c000bce3:	39 f3                	cmp    ebx,esi
c000bce5:	7c cc                	jl     c000bcb3 <datetimeToSeconds(datetime_t)+0xa4>
c000bce7:	eb 3b                	jmp    c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bce9:	74 39                	je     c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bceb:	b8 45 00 00 00       	mov    eax,0x45
c000bcf0:	89 c2                	mov    edx,eax
c000bcf2:	83 e2 03             	and    edx,0x3
c000bcf5:	39 f0                	cmp    eax,esi
c000bcf7:	7e 13                	jle    c000bd0c <datetimeToSeconds(datetime_t)+0xfd>
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	0f 94 c2             	sete   dl
c000bcfe:	48                   	dec    eax
c000bcff:	0f b6 d2             	movzx  edx,dl
c000bd02:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd08:	29 d1                	sub    ecx,edx
c000bd0a:	eb e4                	jmp    c000bcf0 <datetimeToSeconds(datetime_t)+0xe1>
c000bd0c:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd11:	85 d2                	test   edx,edx
c000bd13:	75 0d                	jne    c000bd22 <datetimeToSeconds(datetime_t)+0x113>
c000bd15:	31 c0                	xor    eax,eax
c000bd17:	66 85 db             	test   bx,bx
c000bd1a:	0f 95 c0             	setne  al
c000bd1d:	05 6d 01 00 00       	add    eax,0x16d
c000bd22:	29 c1                	sub    ecx,eax
c000bd24:	b8 80 51 01 00       	mov    eax,0x15180
c000bd29:	f7 e9                	imul   ecx
c000bd2b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd2f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd33:	83 c4 14             	add    esp,0x14
c000bd36:	5b                   	pop    ebx
c000bd37:	5e                   	pop    esi
c000bd38:	5f                   	pop    edi
c000bd39:	5d                   	pop    ebp
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd3c:	57                   	push   edi
c000bd3d:	56                   	push   esi
c000bd3e:	53                   	push   ebx
c000bd3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd43:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd45:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd50:	e8 ba fe ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c000bd55:	59                   	pop    ecx
c000bd56:	0f b6 0d d8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ad8
c000bd5d:	5b                   	pop    ebx
c000bd5e:	03 0d dc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020adc
c000bd64:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd6a:	89 cb                	mov    ebx,ecx
c000bd6c:	c1 fb 1f             	sar    ebx,0x1f
c000bd6f:	29 c8                	sub    eax,ecx
c000bd71:	19 da                	sbb    edx,ebx
c000bd73:	31 c9                	xor    ecx,ecx
c000bd75:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bd7c:	74 05                	je     c000bd83 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd7e:	b9 08 07 00 00       	mov    ecx,0x708
c000bd83:	31 db                	xor    ebx,ebx
c000bd85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd89:	29 c8                	sub    eax,ecx
c000bd8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd8f:	19 da                	sbb    edx,ebx
c000bd91:	89 f8                	mov    eax,edi
c000bd93:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd97:	5b                   	pop    ebx
c000bd98:	5e                   	pop    esi
c000bd99:	5f                   	pop    edi
c000bd9a:	ff e0                	jmp    eax

c000bd9c <secondsToDatetime(unsigned long long)>:
c000bd9c:	55                   	push   ebp
c000bd9d:	57                   	push   edi
c000bd9e:	56                   	push   esi
c000bd9f:	53                   	push   ebx
c000bda0:	83 ec 1c             	sub    esp,0x1c
c000bda3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bda7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdaf:	6a 00                	push   0x0
c000bdb1:	68 80 51 01 00       	push   0x15180
c000bdb6:	55                   	push   ebp
c000bdb7:	57                   	push   edi
c000bdb8:	e8 83 04 01 00       	call   c001c240 <__udivdi3>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdca:	6a 00                	push   0x0
c000bdcc:	68 80 51 01 00       	push   0x15180
c000bdd1:	55                   	push   ebp
c000bdd2:	57                   	push   edi
c000bdd3:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdd8:	e8 63 05 01 00       	call   c001c340 <__umoddi3>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	99                   	cdq    
c000bde1:	f7 ff                	idiv   edi
c000bde3:	bf 3c 00 00 00       	mov    edi,0x3c
c000bde8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdeb:	89 d0                	mov    eax,edx
c000bded:	99                   	cdq    
c000bdee:	f7 ff                	idiv   edi
c000bdf0:	85 db                	test   ebx,ebx
c000bdf2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdf5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdf8:	79 11                	jns    c000be0b <secondsToDatetime(unsigned long long)+0x6f>
c000bdfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdfe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be04:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be09:	eb 07                	jmp    c000be12 <secondsToDatetime(unsigned long long)+0x76>
c000be0b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be10:	89 d8                	mov    eax,ebx
c000be12:	bf b4 05 00 00       	mov    edi,0x5b4
c000be17:	99                   	cdq    
c000be18:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be1d:	f7 f9                	idiv   ecx
c000be1f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be28:	31 d2                	xor    edx,edx
c000be2a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be32:	01 c3                	add    ebx,eax
c000be34:	89 d8                	mov    eax,ebx
c000be36:	f7 f1                	div    ecx
c000be38:	31 d2                	xor    edx,edx
c000be3a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be3d:	89 d8                	mov    eax,ebx
c000be3f:	f7 f7                	div    edi
c000be41:	31 d2                	xor    edx,edx
c000be43:	29 c1                	sub    ecx,eax
c000be45:	89 d8                	mov    eax,ebx
c000be47:	f7 f5                	div    ebp
c000be49:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be4e:	29 c1                	sub    ecx,eax
c000be50:	31 d2                	xor    edx,edx
c000be52:	89 c8                	mov    eax,ecx
c000be54:	f7 f5                	div    ebp
c000be56:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be5f:	31 d2                	xor    edx,edx
c000be61:	89 c8                	mov    eax,ecx
c000be63:	f7 f5                	div    ebp
c000be65:	31 d2                	xor    edx,edx
c000be67:	01 c3                	add    ebx,eax
c000be69:	89 c8                	mov    eax,ecx
c000be6b:	f7 f7                	div    edi
c000be6d:	bf 99 00 00 00       	mov    edi,0x99
c000be72:	29 c3                	sub    ebx,eax
c000be74:	31 d2                	xor    edx,edx
c000be76:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be7e:	29 c3                	sub    ebx,eax
c000be80:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be83:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be86:	bb 05 00 00 00       	mov    ebx,0x5
c000be8b:	83 c1 02             	add    ecx,0x2
c000be8e:	89 c8                	mov    eax,ecx
c000be90:	f7 f7                	div    edi
c000be92:	31 d2                	xor    edx,edx
c000be94:	89 c7                	mov    edi,eax
c000be96:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000be9c:	83 c0 02             	add    eax,0x2
c000be9f:	f7 f3                	div    ebx
c000bea1:	89 eb                	mov    ebx,ebp
c000bea3:	29 c3                	sub    ebx,eax
c000bea5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beab:	88 1e                	mov    BYTE PTR [esi],bl
c000bead:	19 c0                	sbb    eax,eax
c000beaf:	31 d2                	xor    edx,edx
c000beb1:	83 e0 0c             	and    eax,0xc
c000beb4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000beb8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec4:	83 f9 01             	cmp    ecx,0x1
c000bec7:	0f 96 c2             	setbe  dl
c000beca:	41                   	inc    ecx
c000becb:	01 d0                	add    eax,edx
c000becd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bed4:	83 c4 1c             	add    esp,0x1c
c000bed7:	89 f0                	mov    eax,esi
c000bed9:	5b                   	pop    ebx
c000beda:	5e                   	pop    esi
c000bedb:	5f                   	pop    edi
c000bedc:	5d                   	pop    ebp
c000bedd:	c2 04 00             	ret    0x4

c000bee0 <Clock::timeInDatetimeLocal()>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 14             	sub    esp,0x14
c000bee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000beec:	e8 7d fc ff ff       	call   c000bb6e <Clock::timeInSecondsLocal()>
c000bef1:	83 c4 0c             	add    esp,0xc
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	53                   	push   ebx
c000bef7:	e8 a0 fe ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c000befc:	89 d8                	mov    eax,ebx
c000befe:	83 c4 14             	add    esp,0x14
c000bf01:	5b                   	pop    ebx
c000bf02:	c2 04 00             	ret    0x4
c000bf05:	90                   	nop

c000bf06 <Device::hibernate()>:
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <Device::wake()>:
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop

c000bf0a <Device::detect()>:
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <Device::disableLegacy()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Device::powerSaving(PowerSavingLevel)>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <DriverlessDevice::close(int, int, void*)>:
c000bf10:	31 c0                	xor    eax,eax
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <DriverlessDevice::detect()>:
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <DriverlessDevice::open(int, int, void*)>:
c000bf16:	83 ec 18             	sub    esp,0x18
c000bf19:	68 10 e0 01 c0       	push   0xc001e010
c000bf1e:	e8 54 48 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000bf23:	83 c8 ff             	or     eax,0xffffffff
c000bf26:	83 c4 1c             	add    esp,0x1c
c000bf29:	c3                   	ret    

c000bf2a <Device::~Device()>:
c000bf2a:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c000bf2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf33:	89 10                	mov    DWORD PTR [eax],edx
c000bf35:	90                   	nop
c000bf36:	c3                   	ret    
c000bf37:	90                   	nop

c000bf38 <Device::~Device()>:
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf3f:	e8 e6 ff ff ff       	call   c000bf2a <Device::~Device()>
c000bf44:	83 c4 04             	add    esp,0x4
c000bf47:	83 ec 08             	sub    esp,0x8
c000bf4a:	68 58 01 00 00       	push   0x158
c000bf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf53:	e8 9a eb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	83 c4 0c             	add    esp,0xc
c000bf5e:	c3                   	ret    
c000bf5f:	90                   	nop

c000bf60 <Device::findAndLoadDriver()>:
c000bf60:	c7 44 24 04 2e e0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e02e
c000bf68:	e9 7b ec ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000bf6d:	90                   	nop

c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf6e:	57                   	push   edi
c000bf6f:	b9 09 00 00 00       	mov    ecx,0x9
c000bf74:	56                   	push   esi
c000bf75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf79:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf7d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf87:	81 c7 18 01 00 00    	add    edi,0x118
c000bf8d:	fc                   	cld    
c000bf8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf90:	5e                   	pop    esi
c000bf91:	5f                   	pop    edi
c000bf92:	c3                   	ret    
c000bf93:	90                   	nop

c000bf94 <Device::preOpenACPI(void*, char*, char*)>:
c000bf94:	57                   	push   edi
c000bf95:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf9a:	56                   	push   esi
c000bf9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfb3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfbf:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfc4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd0:	5e                   	pop    esi
c000bfd1:	5f                   	pop    edi
c000bfd2:	c3                   	ret    
c000bfd3:	90                   	nop

c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd4:	53                   	push   ebx
c000bfd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfe5:	0f b6 c0             	movzx  eax,al
c000bfe8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bfec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bff4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bff8:	5b                   	pop    ebx
c000bff9:	e9 a6 05 00 00       	jmp    c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bffe <Device::getParent()>:
c000bffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c002:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c008:	c3                   	ret    
c000c009:	90                   	nop

c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c00a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c00e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c012:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c017:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c01b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c01f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c023:	e9 e8 06 00 00       	jmp    c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c028 <Device::addChild(Device*)>:
c000c028:	53                   	push   ebx
c000c029:	83 ec 08             	sub    esp,0x8
c000c02c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c034:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c03a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c040:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c042:	85 d2                	test   edx,edx
c000c044:	74 04                	je     c000c04a <Device::addChild(Device*)+0x22>
c000c046:	89 d3                	mov    ebx,edx
c000c048:	eb f6                	jmp    c000c040 <Device::addChild(Device*)+0x18>
c000c04a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c04d:	83 ec 0c             	sub    esp,0xc
c000c050:	6a 08                	push   0x8
c000c052:	e8 02 be ff ff       	call   c0007e59 <malloc>
c000c057:	89 03                	mov    DWORD PTR [ebx],eax
c000c059:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c05f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c066:	83 c4 18             	add    esp,0x18
c000c069:	5b                   	pop    ebx
c000c06a:	c3                   	ret    
c000c06b:	90                   	nop

c000c06c <Device::removeAllChildren()>:
c000c06c:	56                   	push   esi
c000c06d:	53                   	push   ebx
c000c06e:	52                   	push   edx
c000c06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c073:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c079:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c07c:	74 17                	je     c000c095 <Device::removeAllChildren()+0x29>
c000c07e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c081:	85 c0                	test   eax,eax
c000c083:	74 0c                	je     c000c091 <Device::removeAllChildren()+0x25>
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	8b 10                	mov    edx,DWORD PTR [eax]
c000c08a:	50                   	push   eax
c000c08b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c08e:	83 c4 10             	add    esp,0x10
c000c091:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c093:	eb e4                	jmp    c000c079 <Device::removeAllChildren()+0xd>
c000c095:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0ae:	58                   	pop    eax
c000c0af:	5b                   	pop    ebx
c000c0b0:	5e                   	pop    esi
c000c0b1:	c3                   	ret    

c000c0b2 <Device::hibernateAll()>:
c000c0b2:	53                   	push   ebx
c000c0b3:	83 ec 14             	sub    esp,0x14
c000c0b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0bc:	53                   	push   ebx
c000c0bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0cc:	74 0f                	je     c000c0dd <Device::hibernateAll()+0x2b>
c000c0ce:	83 ec 0c             	sub    esp,0xc
c000c0d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d4:	e8 d9 ff ff ff       	call   c000c0b2 <Device::hibernateAll()>
c000c0d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0db:	eb e9                	jmp    c000c0c6 <Device::hibernateAll()+0x14>
c000c0dd:	83 c4 08             	add    esp,0x8
c000c0e0:	5b                   	pop    ebx
c000c0e1:	c3                   	ret    

c000c0e2 <Device::wakeAll()>:
c000c0e2:	53                   	push   ebx
c000c0e3:	83 ec 14             	sub    esp,0x14
c000c0e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0ec:	53                   	push   ebx
c000c0ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0f6:	83 c4 10             	add    esp,0x10
c000c0f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0fc:	74 0f                	je     c000c10d <Device::wakeAll()+0x2b>
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c104:	e8 d9 ff ff ff       	call   c000c0e2 <Device::wakeAll()>
c000c109:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10b:	eb e9                	jmp    c000c0f6 <Device::wakeAll()+0x14>
c000c10d:	83 c4 08             	add    esp,0x8
c000c110:	5b                   	pop    ebx
c000c111:	c3                   	ret    

c000c112 <Device::detectAll()>:
c000c112:	53                   	push   ebx
c000c113:	83 ec 14             	sub    esp,0x14
c000c116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c11c:	53                   	push   ebx
c000c11d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c120:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c12c:	74 0f                	je     c000c13d <Device::detectAll()+0x2b>
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c134:	e8 d9 ff ff ff       	call   c000c112 <Device::detectAll()>
c000c139:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13b:	eb e9                	jmp    c000c126 <Device::detectAll()+0x14>
c000c13d:	83 c4 08             	add    esp,0x8
c000c140:	5b                   	pop    ebx
c000c141:	c3                   	ret    

c000c142 <Device::disableLegacyAll()>:
c000c142:	c3                   	ret    
c000c143:	90                   	nop

c000c144 <Device::loadDriversForAll()>:
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <Device::closeAll()>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 08             	sub    esp,0x8
c000c14a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c14e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c150:	6a 00                	push   0x0
c000c152:	6a 00                	push   0x0
c000c154:	6a 00                	push   0x0
c000c156:	53                   	push   ebx
c000c157:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c15a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c166:	74 0f                	je     c000c177 <Device::closeAll()+0x31>
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c16e:	e8 d3 ff ff ff       	call   c000c146 <Device::closeAll()>
c000c173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c175:	eb e9                	jmp    c000c160 <Device::closeAll()+0x1a>
c000c177:	83 c4 08             	add    esp,0x8
c000c17a:	5b                   	pop    ebx
c000c17b:	c3                   	ret    

c000c17c <Device::powerSavingAll(PowerSavingLevel)>:
c000c17c:	56                   	push   esi
c000c17d:	53                   	push   ebx
c000c17e:	83 ec 0c             	sub    esp,0xc
c000c181:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c185:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c189:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18b:	56                   	push   esi
c000c18c:	53                   	push   ebx
c000c18d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c190:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c19c:	74 0f                	je     c000c1ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c19e:	52                   	push   edx
c000c19f:	52                   	push   edx
c000c1a0:	56                   	push   esi
c000c1a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a4:	e8 d3 ff ff ff       	call   c000c17c <Device::powerSavingAll(PowerSavingLevel)>
c000c1a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1ab:	eb e9                	jmp    c000c196 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1ad:	58                   	pop    eax
c000c1ae:	5b                   	pop    ebx
c000c1af:	5e                   	pop    esi
c000c1b0:	c3                   	ret    
c000c1b1:	90                   	nop

c000c1b2 <Device::setName(char const*)>:
c000c1b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1ba:	e9 61 44 ff ff       	jmp    c0000620 <strcpy>
c000c1bf:	90                   	nop

c000c1c0 <Device::Device(char const*)>:
c000c1c0:	83 ec 1c             	sub    esp,0x1c
c000c1c3:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c000c1c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cc:	89 10                	mov    DWORD PTR [eax],edx
c000c1ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c206:	83 ec 08             	sub    esp,0x8
c000c209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c211:	e8 9c ff ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c221:	83 ec 0c             	sub    esp,0xc
c000c224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c228:	e8 2c bc ff ff       	call   c0007e59 <malloc>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c236:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c23d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c241:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c251:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c261:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c277:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c282:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c290:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2b6:	90                   	nop
c000c2b7:	83 c4 1c             	add    esp,0x1c
c000c2ba:	c3                   	ret    
c000c2bb:	90                   	nop

c000c2bc <Device::getName()>:
c000c2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c0:	05 d0 00 00 00       	add    eax,0xd0
c000c2c5:	c3                   	ret    

c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2c6:	83 ec 0c             	sub    esp,0xc
c000c2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2cd:	83 ec 08             	sub    esp,0x8
c000c2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d4:	50                   	push   eax
c000c2d5:	e8 e6 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c2da:	83 c4 10             	add    esp,0x10
c000c2dd:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c000c2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e6:	89 10                	mov    DWORD PTR [eax],edx
c000c2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2f6:	90                   	nop
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	c3                   	ret    
c000c2fb:	90                   	nop

c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c2fc:	57                   	push   edi
c000c2fd:	56                   	push   esi
c000c2fe:	53                   	push   ebx
c000c2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c303:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c307:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c311:	75 0c                	jne    c000c31f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c313:	52                   	push   edx
c000c314:	52                   	push   edx
c000c315:	53                   	push   ebx
c000c316:	56                   	push   esi
c000c317:	e8 d6 03 01 00       	call   c001c6f2 <LinkedList<Device>::addElement(Device*)>
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c325:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c328:	74 12                	je     c000c33c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c32a:	50                   	push   eax
c000c32b:	57                   	push   edi
c000c32c:	56                   	push   esi
c000c32d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c330:	e8 c7 ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c335:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c337:	83 c4 10             	add    esp,0x10
c000c33a:	eb e9                	jmp    c000c325 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c33c:	5b                   	pop    ebx
c000c33d:	5e                   	pop    esi
c000c33e:	5f                   	pop    edi
c000c33f:	c3                   	ret    

c000c340 <getDevicesOfType(DeviceType)>:
c000c340:	53                   	push   ebx
c000c341:	83 ec 14             	sub    esp,0x14
c000c344:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c348:	53                   	push   ebx
c000c349:	e8 80 04 01 00       	call   c001c7ce <LinkedList<Device>::LinkedList()>
c000c34e:	83 c4 0c             	add    esp,0xc
c000c351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c355:	53                   	push   ebx
c000c356:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000c35c:	e8 9b ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c361:	89 d8                	mov    eax,ebx
c000c363:	83 c4 18             	add    esp,0x18
c000c366:	5b                   	pop    ebx
c000c367:	c2 04 00             	ret    0x4
c000c36a:	66 90                	xchg   ax,ax

c000c36c <HardDiskController::HardDiskController(char const*)>:
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c373:	83 ec 08             	sub    esp,0x8
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	50                   	push   eax
c000c37b:	e8 40 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c380:	83 c4 10             	add    esp,0x10
c000c383:	ba c8 e0 01 c0       	mov    edx,0xc001e0c8
c000c388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38c:	89 10                	mov    DWORD PTR [eax],edx
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c39c:	90                   	nop
c000c39d:	83 c4 0c             	add    esp,0xc
c000c3a0:	c3                   	ret    
c000c3a1:	90                   	nop
c000c3a2:	66 90                	xchg   ax,ax

c000c3a4 <HardDiskController::~HardDiskController()>:
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ba c8 e0 01 c0       	mov    edx,0xc001e0c8
c000c3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b0:	89 10                	mov    DWORD PTR [eax],edx
c000c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	50                   	push   eax
c000c3ba:	e8 6b fb ff ff       	call   c000bf2a <Device::~Device()>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	90                   	nop
c000c3c3:	83 c4 0c             	add    esp,0xc
c000c3c6:	c3                   	ret    
c000c3c7:	90                   	nop

c000c3c8 <HardDiskController::~HardDiskController()>:
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	83 ec 0c             	sub    esp,0xc
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	e8 cd ff ff ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	83 ec 08             	sub    esp,0x8
c000c3dd:	68 58 01 00 00       	push   0x158
c000c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e6:	e8 07 e7 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	83 c4 0c             	add    esp,0xc
c000c3f1:	c3                   	ret    

c000c3f2 <PhysicalDisk::eject()>:
c000c3f2:	83 c8 ff             	or     eax,0xffffffff
c000c3f5:	c3                   	ret    

c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3f6:	83 ec 0c             	sub    esp,0xc
c000c3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fd:	83 ec 08             	sub    esp,0x8
c000c400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c404:	50                   	push   eax
c000c405:	e8 b6 fd ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c40a:	83 c4 10             	add    esp,0x10
c000c40d:	ba f4 e0 01 c0       	mov    edx,0xc001e0f4
c000c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c416:	89 10                	mov    DWORD PTR [eax],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c427:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c432:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c444:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c458:	90                   	nop
c000c459:	83 c4 0c             	add    esp,0xc
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <PhysicalDisk::startCache()>:
c000c45e:	56                   	push   esi
c000c45f:	53                   	push   ebx
c000c460:	83 ec 10             	sub    esp,0x10
c000c463:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c467:	6a 44                	push   0x44
c000c469:	e8 eb b9 ff ff       	call   c0007e59 <malloc>
c000c46e:	89 c6                	mov    esi,eax
c000c470:	58                   	pop    eax
c000c471:	5a                   	pop    edx
c000c472:	53                   	push   ebx
c000c473:	56                   	push   esi
c000c474:	e8 ab 15 00 00       	call   c000da24 <VCache::VCache(PhysicalDisk*)>
c000c479:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c47f:	83 c4 14             	add    esp,0x14
c000c482:	5b                   	pop    ebx
c000c483:	5e                   	pop    esi
c000c484:	c3                   	ret    
c000c485:	90                   	nop

c000c486 <PhysicalDisk::~PhysicalDisk()>:
c000c486:	83 ec 0c             	sub    esp,0xc
c000c489:	ba f4 e0 01 c0       	mov    edx,0xc001e0f4
c000c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c492:	89 10                	mov    DWORD PTR [eax],edx
c000c494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c498:	83 ec 0c             	sub    esp,0xc
c000c49b:	50                   	push   eax
c000c49c:	e8 89 fa ff ff       	call   c000bf2a <Device::~Device()>
c000c4a1:	83 c4 10             	add    esp,0x10
c000c4a4:	90                   	nop
c000c4a5:	83 c4 0c             	add    esp,0xc
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <PhysicalDisk::~PhysicalDisk()>:
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	83 ec 0c             	sub    esp,0xc
c000c4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b4:	e8 cd ff ff ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	83 ec 08             	sub    esp,0x8
c000c4bf:	68 6c 01 00 00       	push   0x16c
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	e8 25 e6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	83 c4 0c             	add    esp,0xc
c000c4d3:	c3                   	ret    

c000c4d4 <int_handler>:
c000c4d4:	55                   	push   ebp
c000c4d5:	57                   	push   edi
c000c4d6:	56                   	push   esi
c000c4d7:	53                   	push   ebx
c000c4d8:	83 ec 0c             	sub    esp,0xc
c000c4db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4df:	80 3d 60 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023460,0x0
c000c4e6:	74 0b                	je     c000c4f3 <int_handler+0x1f>
c000c4e8:	fa                   	cli    
c000c4e9:	f4                   	hlt    
c000c4ea:	80 3d 60 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023460,0x0
c000c4f1:	75 f5                	jne    c000c4e8 <int_handler+0x14>
c000c4f3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4f6:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4f9:	83 f8 17             	cmp    eax,0x17
c000c4fc:	76 3e                	jbe    c000c53c <int_handler+0x68>
c000c4fe:	c1 e6 04             	shl    esi,0x4
c000c501:	31 db                	xor    ebx,ebx
c000c503:	8d ae e0 1a 02 c0    	lea    ebp,[esi-0x3ffde520]
c000c509:	81 c6 e0 0a 02 c0    	add    esi,0xc0020ae0
c000c50f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c513:	85 c0                	test   eax,eax
c000c515:	74 13                	je     c000c52a <int_handler+0x56>
c000c517:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c51a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c51e:	74 2a                	je     c000c54a <int_handler+0x76>
c000c520:	83 ec 08             	sub    esp,0x8
c000c523:	52                   	push   edx
c000c524:	57                   	push   edi
c000c525:	ff d0                	call   eax
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	43                   	inc    ebx
c000c52b:	83 fb 04             	cmp    ebx,0x4
c000c52e:	75 df                	jne    c000c50f <int_handler+0x3b>
c000c530:	83 c4 0c             	add    esp,0xc
c000c533:	31 c0                	xor    eax,eax
c000c535:	5b                   	pop    ebx
c000c536:	31 d2                	xor    edx,edx
c000c538:	5e                   	pop    esi
c000c539:	5f                   	pop    edi
c000c53a:	5d                   	pop    ebp
c000c53b:	c3                   	ret    
c000c53c:	83 ec 0c             	sub    esp,0xc
c000c53f:	50                   	push   eax
c000c540:	e8 0c 95 00 00       	call   c0015a51 <HalEndOfInterrupt(int)>
c000c545:	83 c4 10             	add    esp,0x10
c000c548:	eb b4                	jmp    c000c4fe <int_handler+0x2a>
c000c54a:	83 ec 08             	sub    esp,0x8
c000c54d:	52                   	push   edx
c000c54e:	57                   	push   edi
c000c54f:	ff d0                	call   eax
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	83 c4 0c             	add    esp,0xc
c000c557:	5b                   	pop    ebx
c000c558:	5e                   	pop    esi
c000c559:	5f                   	pop    edi
c000c55a:	5d                   	pop    ebp
c000c55b:	c3                   	ret    

c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c55c:	56                   	push   esi
c000c55d:	31 c0                	xor    eax,eax
c000c55f:	53                   	push   ebx
c000c560:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c568:	89 ca                	mov    edx,ecx
c000c56a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c56e:	c1 e2 04             	shl    edx,0x4
c000c571:	83 bc 82 e0 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde520],0x0
c000c579:	74 15                	je     c000c590 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c57b:	40                   	inc    eax
c000c57c:	83 f8 04             	cmp    eax,0x4
c000c57f:	75 f0                	jne    c000c571 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c581:	c7 44 24 0c 24 e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e124
c000c589:	5b                   	pop    ebx
c000c58a:	5e                   	pop    esi
c000c58b:	e9 e7 41 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c000c590:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c593:	89 1c 85 e0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde520],ebx
c000c59a:	89 34 85 e0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf520],esi
c000c5a1:	5b                   	pop    ebx
c000c5a2:	5e                   	pop    esi
c000c5a3:	c3                   	ret    

c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a4:	57                   	push   edi
c000c5a5:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000c5ab:	56                   	push   esi
c000c5ac:	53                   	push   ebx
c000c5ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5b5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5bc:	74 5b                	je     c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5be:	89 c7                	mov    edi,eax
c000c5c0:	84 c0                	test   al,al
c000c5c2:	74 24                	je     c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c4:	83 fe 0f             	cmp    esi,0xf
c000c5c7:	0f 8f d9 00 00 00    	jg     c000c6a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5cd:	8a 86 40 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe06c0]
c000c5d3:	25 ff 00 00 00       	and    eax,0xff
c000c5d8:	66 8b bc 00 80 32 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcd80]
c000c5e0:	89 c6                	mov    esi,eax
c000c5e2:	66 d1 ef             	shr    di,1
c000c5e5:	83 e7 01             	and    edi,0x1
c000c5e8:	83 ec 08             	sub    esp,0x8
c000c5eb:	a1 a0 48 02 c0       	mov    eax,ds:0xc00248a0
c000c5f0:	31 db                	xor    ebx,ebx
c000c5f2:	50                   	push   eax
c000c5f3:	68 31 e1 01 c0       	push   0xc001e131
c000c5f8:	e8 eb e5 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	a1 a0 48 02 c0       	mov    eax,ds:0xc00248a0
c000c605:	85 c0                	test   eax,eax
c000c607:	7f 51                	jg     c000c65a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	68 48 e1 01 c0       	push   0xc001e148
c000c611:	e8 61 41 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c61c:	31 d2                	xor    edx,edx
c000c61e:	89 c8                	mov    eax,ecx
c000c620:	c1 e0 04             	shl    eax,0x4
c000c623:	8b 9c 90 e0 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde520]
c000c62a:	85 db                	test   ebx,ebx
c000c62c:	0f 84 8b 00 00 00    	je     c000c6bd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c632:	42                   	inc    edx
c000c633:	83 fa 04             	cmp    edx,0x4
c000c636:	75 eb                	jne    c000c623 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c638:	83 ec 0c             	sub    esp,0xc
c000c63b:	68 9c e1 01 c0       	push   0xc001e19c
c000c640:	e8 32 41 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c64d:	5b                   	pop    ebx
c000c64e:	5e                   	pop    esi
c000c64f:	5f                   	pop    edi
c000c650:	c3                   	ret    
c000c651:	43                   	inc    ebx
c000c652:	39 1d a0 48 02 c0    	cmp    DWORD PTR ds:0xc00248a0,ebx
c000c658:	7e af                	jle    c000c609 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c65a:	83 ec 08             	sub    esp,0x8
c000c65d:	8b 04 9d c0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb740]
c000c664:	56                   	push   esi
c000c665:	50                   	push   eax
c000c666:	e8 b7 f0 00 00       	call   c001b722 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	84 c0                	test   al,al
c000c670:	74 df                	je     c000c651 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c672:	81 e7 ff 00 00 00    	and    edi,0xff
c000c678:	50                   	push   eax
c000c679:	8d 46 20             	lea    eax,[esi+0x20]
c000c67c:	57                   	push   edi
c000c67d:	25 ff 00 00 00       	and    eax,0xff
c000c682:	6a 00                	push   0x0
c000c684:	50                   	push   eax
c000c685:	89 f0                	mov    eax,esi
c000c687:	6a 00                	push   0x0
c000c689:	25 ff 00 00 00       	and    eax,0xff
c000c68e:	6a 00                	push   0x0
c000c690:	50                   	push   eax
c000c691:	8b 04 9d c0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb740]
c000c698:	50                   	push   eax
c000c699:	e8 fe f1 00 00       	call   c001b89c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c69e:	83 c4 20             	add    esp,0x20
c000c6a1:	e9 73 ff ff ff       	jmp    c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6a6:	83 ec 0c             	sub    esp,0xc
c000c6a9:	31 ff                	xor    edi,edi
c000c6ab:	68 64 e1 01 c0       	push   0xc001e164
c000c6b0:	e8 c2 40 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	e9 2b ff ff ff       	jmp    c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6bd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6c4:	89 14 85 e0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde520],edx
c000c6cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6cf:	5b                   	pop    ebx
c000c6d0:	89 14 85 e0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf520],edx
c000c6d7:	89 f0                	mov    eax,esi
c000c6d9:	5e                   	pop    esi
c000c6da:	5f                   	pop    edi
c000c6db:	c3                   	ret    

c000c6dc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6e4:	c1 e0 04             	shl    eax,0x4
c000c6e7:	8d 50 10             	lea    edx,[eax+0x10]
c000c6ea:	39 88 e0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde520],ecx
c000c6f0:	74 08                	je     c000c6fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6f2:	83 c0 04             	add    eax,0x4
c000c6f5:	39 d0                	cmp    eax,edx
c000c6f7:	75 f1                	jne    c000c6ea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6f9:	c3                   	ret    
c000c6fa:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c704:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c70e:	eb e2                	jmp    c000c6f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c710:	53                   	push   ebx
c000c711:	83 ec 08             	sub    esp,0x8
c000c714:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c718:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c71d:	74 0e                	je     c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c71f:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000c724:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c72b:	75 37                	jne    c000c764 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c731:	83 c0 20             	add    eax,0x20
c000c734:	c1 e0 04             	shl    eax,0x4
c000c737:	8d 50 10             	lea    edx,[eax+0x10]
c000c73a:	39 98 e0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde520],ebx
c000c740:	74 0c                	je     c000c74e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c742:	83 c0 04             	add    eax,0x4
c000c745:	39 d0                	cmp    eax,edx
c000c747:	75 f1                	jne    c000c73a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c749:	83 c4 08             	add    esp,0x8
c000c74c:	5b                   	pop    ebx
c000c74d:	c3                   	ret    
c000c74e:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c758:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c762:	eb de                	jmp    c000c742 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c764:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c769:	7f 12                	jg     c000c77d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c76b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c76f:	31 c0                	xor    eax,eax
c000c771:	8a 81 40 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe06c0]
c000c777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77b:	eb b0                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c77d:	83 ec 0c             	sub    esp,0xc
c000c780:	68 55 e1 01 c0       	push   0xc001e155
c000c785:	e8 ed 3f 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	eb 9e                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c78f <setupINTS()>:
c000c78f:	31 c0                	xor    eax,eax
c000c791:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c79b:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c7a5:	c7 80 e4 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde51c],0x0
c000c7af:	c7 80 e4 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf51c],0x0
c000c7b9:	c7 80 e8 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde518],0x0
c000c7c3:	c7 80 e8 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf518],0x0
c000c7cd:	c7 80 ec 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde514],0x0
c000c7d7:	c7 80 ec 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf514],0x0
c000c7e1:	83 c0 10             	add    eax,0x10
c000c7e4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7e9:	75 a6                	jne    c000c791 <setupINTS()+0x2>
c000c7eb:	c3                   	ret    

c000c7ec <convertLegacyIRQNumber(int)>:
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000c7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c800:	74 0f                	je     c000c811 <convertLegacyIRQNumber(int)+0x25>
c000c802:	83 f8 0f             	cmp    eax,0xf
c000c805:	7f 0e                	jg     c000c815 <convertLegacyIRQNumber(int)+0x29>
c000c807:	31 c9                	xor    ecx,ecx
c000c809:	8a 88 40 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe06c0]
c000c80f:	89 c8                	mov    eax,ecx
c000c811:	83 c4 0c             	add    esp,0xc
c000c814:	c3                   	ret    
c000c815:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c819:	83 ec 0c             	sub    esp,0xc
c000c81c:	68 64 e1 01 c0       	push   0xc001e164
c000c821:	e8 51 3f 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82d:	83 c4 0c             	add    esp,0xc
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <startGUI(void*)>:
c000c832:	55                   	push   ebp
c000c833:	89 e5                	mov    ebp,esp
c000c835:	53                   	push   ebx
c000c836:	83 ec 04             	sub    esp,0x4
c000c839:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c83e:	48                   	dec    eax
c000c83f:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000c844:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c849:	85 c0                	test   eax,eax
c000c84b:	75 01                	jne    c000c84e <startGUI(void*)+0x1c>
c000c84d:	fb                   	sti    
c000c84e:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c854:	83 ec 08             	sub    esp,0x8
c000c857:	6a 01                	push   0x1
c000c859:	68 c1 e1 01 c0       	push   0xc001e1c1
c000c85e:	e8 77 68 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	83 ec 08             	sub    esp,0x8
c000c869:	53                   	push   ebx
c000c86a:	50                   	push   eax
c000c86b:	e8 9b 6a 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c879:	83 ec 08             	sub    esp,0x8
c000c87c:	6a 01                	push   0x1
c000c87e:	68 db e1 01 c0       	push   0xc001e1db
c000c883:	e8 52 68 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000c888:	83 c4 10             	add    esp,0x10
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	53                   	push   ebx
c000c88f:	50                   	push   eax
c000c890:	e8 76 6a 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	90                   	nop
c000c899:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c89c:	c9                   	leave  
c000c89d:	c3                   	ret    

c000c89e <startGUIVESA(void*)>:
c000c89e:	55                   	push   ebp
c000c89f:	89 e5                	mov    ebp,esp
c000c8a1:	53                   	push   ebx
c000c8a2:	83 ec 04             	sub    esp,0x4
c000c8a5:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c8aa:	48                   	dec    eax
c000c8ab:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000c8b0:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	75 01                	jne    c000c8ba <startGUIVESA(void*)+0x1c>
c000c8b9:	fb                   	sti    
c000c8ba:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c8c0:	83 ec 08             	sub    esp,0x8
c000c8c3:	6a 01                	push   0x1
c000c8c5:	68 f9 e1 01 c0       	push   0xc001e1f9
c000c8ca:	e8 0b 68 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	83 ec 08             	sub    esp,0x8
c000c8d5:	53                   	push   ebx
c000c8d6:	50                   	push   eax
c000c8d7:	e8 2f 6a 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c8e5:	83 ec 08             	sub    esp,0x8
c000c8e8:	6a 01                	push   0x1
c000c8ea:	68 db e1 01 c0       	push   0xc001e1db
c000c8ef:	e8 e6 67 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	83 ec 08             	sub    esp,0x8
c000c8fa:	53                   	push   ebx
c000c8fb:	50                   	push   eax
c000c8fc:	e8 0a 6a 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	90                   	nop
c000c905:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c908:	c9                   	leave  
c000c909:	c3                   	ret    

c000c90a <sendKeyToTerminal(unsigned char)>:
c000c90a:	55                   	push   ebp
c000c90b:	89 e5                	mov    ebp,esp
c000c90d:	83 ec 28             	sub    esp,0x28
c000c910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c913:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c916:	8b 15 24 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a24
c000c91c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c91f:	25 ff 00 00 00       	and    eax,0xff
c000c924:	83 ec 08             	sub    esp,0x8
c000c927:	50                   	push   eax
c000c928:	52                   	push   edx
c000c929:	e8 aa c8 ff ff       	call   c00091d8 <VgaText::receiveKey(unsigned char)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c935:	0f 85 8f 00 00 00    	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c93b:	fa                   	cli    
c000c93c:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c941:	40                   	inc    eax
c000c942:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000c947:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c000c94c:	40                   	inc    eax
c000c94d:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000c952:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000c957:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c95a:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c000c964:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c968:	74 1f                	je     c000c989 <sendKeyToTerminal(unsigned char)+0x7f>
c000c96a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c96d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c970:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c973:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c976:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c979:	83 ec 0c             	sub    esp,0xc
c000c97c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c97f:	e8 0c 76 00 00       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb db                	jmp    c000c964 <sendKeyToTerminal(unsigned char)+0x5a>
c000c989:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c000c98e:	48                   	dec    eax
c000c98f:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000c994:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c000c999:	85 c0                	test   eax,eax
c000c99b:	75 18                	jne    c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c99d:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c000c9a2:	85 c0                	test   eax,eax
c000c9a4:	74 0f                	je     c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c9a6:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c000c9b0:	e8 17 71 00 00       	call   c0013acc <schedule()>
c000c9b5:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c9ba:	48                   	dec    eax
c000c9bb:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000c9c0:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	75 01                	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c9c9:	fb                   	sti    
c000c9ca:	90                   	nop
c000c9cb:	c9                   	leave  
c000c9cc:	c3                   	ret    

c000c9cd <sendKeyboardToken(KeyboardToken)>:
c000c9cd:	55                   	push   ebp
c000c9ce:	89 e5                	mov    ebp,esp
c000c9d0:	83 ec 18             	sub    esp,0x18
c000c9d3:	e8 eb 3e 00 00       	call   c00108c3 <Krnl::userIOReceived()>
c000c9d8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9de:	25 ff ff 00 00       	and    eax,0xffff
c000c9e3:	83 f2 01             	xor    edx,0x1
c000c9e6:	88 90 00 2b 02 c0    	mov    BYTE PTR [eax-0x3ffdd500],dl
c000c9ec:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 24                	je     c000ca19 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9f5:	8b 0d e8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae8
c000c9fb:	83 ec 04             	sub    esp,0x4
c000c9fe:	68 00 2b 02 c0       	push   0xc0022b00
c000ca03:	83 ec 08             	sub    esp,0x8
c000ca06:	89 e2                	mov    edx,esp
c000ca08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0b:	89 02                	mov    DWORD PTR [edx],eax
c000ca0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca10:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca14:	ff d1                	call   ecx
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca1d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca20:	a0 08 2f 02 c0       	mov    al,ds:0xc0022f08
c000ca25:	38 c2                	cmp    dl,al
c000ca27:	74 1e                	je     c000ca47 <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca29:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca2c:	a2 08 2f 02 c0       	mov    ds:0xc0022f08,al
c000ca31:	a0 08 2f 02 c0       	mov    al,ds:0xc0022f08
c000ca36:	25 ff 00 00 00       	and    eax,0xff
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 e6 be ff ff       	call   c000892a <setTerminalScrollLock(bool)>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca4a:	84 c0                	test   al,al
c000ca4c:	0f 84 ae 00 00 00    	je     c000cb00 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca55:	66 3d 10 03          	cmp    ax,0x310
c000ca59:	75 06                	jne    c000ca61 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca5b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca64:	66 3d 11 03          	cmp    ax,0x311
c000ca68:	75 06                	jne    c000ca70 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca6a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca73:	66 3d 12 03          	cmp    ax,0x312
c000ca77:	75 06                	jne    c000ca7f <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca79:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca82:	66 3d 13 03          	cmp    ax,0x313
c000ca86:	75 06                	jne    c000ca8e <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca88:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca91:	66 3d 14 03          	cmp    ax,0x314
c000ca95:	75 06                	jne    c000ca9d <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca97:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ca9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa0:	66 3d 15 03          	cmp    ax,0x315
c000caa4:	75 06                	jne    c000caac <sendKeyboardToken(KeyboardToken)+0xdf>
c000caa6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaf:	66 3d 16 03          	cmp    ax,0x316
c000cab3:	75 06                	jne    c000cabb <sendKeyboardToken(KeyboardToken)+0xee>
c000cab5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabe:	66 3d 17 03          	cmp    ax,0x317
c000cac2:	75 06                	jne    c000caca <sendKeyboardToken(KeyboardToken)+0xfd>
c000cac4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000caca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacd:	66 3d 18 03          	cmp    ax,0x318
c000cad1:	75 06                	jne    c000cad9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000cad3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cadc:	66 3d 19 03          	cmp    ax,0x319
c000cae0:	75 06                	jne    c000cae8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000cae2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caeb:	66 3d 1a 03          	cmp    ax,0x31a
c000caef:	0f 85 c9 00 00 00    	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cafb:	e9 be 00 00 00       	jmp    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb03:	66 3d 10 03          	cmp    ax,0x310
c000cb07:	75 0a                	jne    c000cb13 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb09:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb16:	66 3d 11 03          	cmp    ax,0x311
c000cb1a:	75 0a                	jne    c000cb26 <sendKeyboardToken(KeyboardToken)+0x159>
c000cb1c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb29:	66 3d 12 03          	cmp    ax,0x312
c000cb2d:	75 0a                	jne    c000cb39 <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb2f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb3c:	66 3d 13 03          	cmp    ax,0x313
c000cb40:	75 0a                	jne    c000cb4c <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb42:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4f:	66 3d 14 03          	cmp    ax,0x314
c000cb53:	75 0a                	jne    c000cb5f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb55:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb62:	66 3d 15 03          	cmp    ax,0x315
c000cb66:	75 0a                	jne    c000cb72 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb68:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb75:	66 3d 16 03          	cmp    ax,0x316
c000cb79:	75 0a                	jne    c000cb85 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb7b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb88:	66 3d 17 03          	cmp    ax,0x317
c000cb8c:	75 0a                	jne    c000cb98 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb8e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9b:	66 3d 18 03          	cmp    ax,0x318
c000cb9f:	75 0a                	jne    c000cbab <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cba7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbae:	66 3d 19 03          	cmp    ax,0x319
c000cbb2:	75 0a                	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbb4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc1:	66 3d 00 02          	cmp    ax,0x200
c000cbc5:	75 2c                	jne    c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbc7:	a0 00 2f 02 c0       	mov    al,ds:0xc0022f00
c000cbcc:	83 f0 01             	xor    eax,0x1
c000cbcf:	84 c0                	test   al,al
c000cbd1:	74 20                	je     c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbd3:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000cbd8:	6a 01                	push   0x1
c000cbda:	6a 00                	push   0x0
c000cbdc:	68 32 c8 00 c0       	push   0xc000c832
c000cbe1:	50                   	push   eax
c000cbe2:	e8 c5 6c 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c000cbe7:	83 c4 10             	add    esp,0x10
c000cbea:	c6 05 00 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f00,0x1
c000cbf1:	eb 33                	jmp    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf6:	66 3d 01 02          	cmp    ax,0x201
c000cbfa:	75 2a                	jne    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbfc:	a0 00 2f 02 c0       	mov    al,ds:0xc0022f00
c000cc01:	83 f0 01             	xor    eax,0x1
c000cc04:	84 c0                	test   al,al
c000cc06:	74 1e                	je     c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cc08:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000cc0d:	6a 01                	push   0x1
c000cc0f:	6a 00                	push   0x0
c000cc11:	68 9e c8 00 c0       	push   0xc000c89e
c000cc16:	50                   	push   eax
c000cc17:	e8 90 6c 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	c6 05 00 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f00,0x1
c000cc26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc29:	66 3d 1d 03          	cmp    ax,0x31d
c000cc2d:	75 06                	jne    c000cc35 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc2f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc38:	66 3d 1c 03          	cmp    ax,0x31c
c000cc3c:	75 06                	jne    c000cc44 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc3e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc47:	66 3d 1b 03          	cmp    ax,0x31b
c000cc4b:	75 06                	jne    c000cc53 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc4d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	66 3d 1e 03          	cmp    ax,0x31e
c000cc5a:	75 06                	jne    c000cc62 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc5c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc65:	66 3d 1f 03          	cmp    ax,0x31f
c000cc69:	75 06                	jne    c000cc71 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc6b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc74:	66 3d 1a 03          	cmp    ax,0x31a
c000cc78:	75 06                	jne    c000cc80 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc7a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc80:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc84:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc87:	83 f0 01             	xor    eax,0x1
c000cc8a:	84 c0                	test   al,al
c000cc8c:	74 7b                	je     c000cd09 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc8e:	a0 01 2c 02 c0       	mov    al,ds:0xc0022c01
c000cc93:	84 c0                	test   al,al
c000cc95:	74 43                	je     c000ccda <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc97:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc9b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cc9f:	74 2d                	je     c000ccce <sendKeyboardToken(KeyboardToken)+0x301>
c000cca1:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000cca7:	89 d0                	mov    eax,edx
c000cca9:	c1 e0 02             	shl    eax,0x2
c000ccac:	01 d0                	add    eax,edx
c000ccae:	01 c0                	add    eax,eax
c000ccb0:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000ccb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb8:	25 ff ff 00 00       	and    eax,0xffff
c000ccbd:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc0:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000ccc5:	01 d0                	add    eax,edx
c000ccc7:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000cccc:	eb 71                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccce:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000ccd8:	eb 65                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccda:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	74 1a                	je     c000ccfd <sendKeyboardToken(KeyboardToken)+0x330>
c000cce3:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cce8:	25 ff 00 00 00       	and    eax,0xff
c000cced:	83 ec 0c             	sub    esp,0xc
c000ccf0:	50                   	push   eax
c000ccf1:	e8 14 fc ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccfd:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000cd07:	eb 36                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	66 3d 01 01          	cmp    ax,0x101
c000cd10:	75 2d                	jne    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd12:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cd17:	85 c0                	test   eax,eax
c000cd19:	74 1a                	je     c000cd35 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd1b:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cd20:	25 ff 00 00 00       	and    eax,0xff
c000cd25:	83 ec 0c             	sub    esp,0xc
c000cd28:	50                   	push   eax
c000cd29:	e8 dc fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd35:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000cd3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd42:	83 f0 01             	xor    eax,0x1
c000cd45:	84 c0                	test   al,al
c000cd47:	74 4e                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd4c:	83 f0 01             	xor    eax,0x1
c000cd4f:	84 c0                	test   al,al
c000cd51:	74 44                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd53:	a0 00 2c 02 c0       	mov    al,ds:0xc0022c00
c000cd58:	83 f0 01             	xor    eax,0x1
c000cd5b:	84 c0                	test   al,al
c000cd5d:	74 38                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd62:	66 83 f8 1f          	cmp    ax,0x1f
c000cd66:	76 09                	jbe    c000cd71 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6b:	66 83 f8 7e          	cmp    ax,0x7e
c000cd6f:	76 12                	jbe    c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd74:	66 83 f8 0a          	cmp    ax,0xa
c000cd78:	74 09                	je     c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7d:	66 83 f8 08          	cmp    ax,0x8
c000cd81:	75 14                	jne    c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd86:	25 ff 00 00 00       	and    eax,0xff
c000cd8b:	83 ec 0c             	sub    esp,0xc
c000cd8e:	50                   	push   eax
c000cd8f:	e8 76 fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd9a:	83 f0 01             	xor    eax,0x1
c000cd9d:	84 c0                	test   al,al
c000cd9f:	74 51                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cda1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cda4:	83 f0 01             	xor    eax,0x1
c000cda7:	84 c0                	test   al,al
c000cda9:	74 47                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdab:	a0 00 2c 02 c0       	mov    al,ds:0xc0022c00
c000cdb0:	84 c0                	test   al,al
c000cdb2:	74 3e                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb7:	66 83 f8 3f          	cmp    ax,0x3f
c000cdbb:	76 35                	jbe    c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc0:	66 83 f8 7f          	cmp    ax,0x7f
c000cdc4:	77 2c                	ja     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc9:	88 c2                	mov    dl,al
c000cdcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdce:	66 83 f8 5f          	cmp    ax,0x5f
c000cdd2:	76 04                	jbe    c000cdd8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdd4:	b0 20                	mov    al,0x20
c000cdd6:	eb 02                	jmp    c000cdda <sendKeyboardToken(KeyboardToken)+0x40d>
c000cdd8:	b0 00                	mov    al,0x0
c000cdda:	29 c2                	sub    edx,eax
c000cddc:	88 d0                	mov    al,dl
c000cdde:	83 e8 40             	sub    eax,0x40
c000cde1:	25 ff 00 00 00       	and    eax,0xff
c000cde6:	83 ec 0c             	sub    esp,0xc
c000cde9:	50                   	push   eax
c000cdea:	e8 1b fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf5:	66 3d 00 03          	cmp    ax,0x300
c000cdf9:	75 0f                	jne    c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdfe:	83 f0 01             	xor    eax,0x1
c000ce01:	84 c0                	test   al,al
c000ce03:	74 05                	je     c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce05:	e8 21 bb ff ff       	call   c000892b <doTerminalCycle()>
c000ce0a:	90                   	nop
c000ce0b:	c9                   	leave  
c000ce0c:	c3                   	ret    

c000ce0d <clearInternalKeybuffer(VgaText*)>:
c000ce0d:	55                   	push   ebp
c000ce0e:	89 e5                	mov    ebp,esp
c000ce10:	83 ec 08             	sub    esp,0x8
c000ce13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce16:	05 b2 00 00 00       	add    eax,0xb2
c000ce1b:	83 ec 0c             	sub    esp,0xc
c000ce1e:	50                   	push   eax
c000ce1f:	e8 3c 37 ff ff       	call   c0000560 <strlen>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce30:	83 ec 04             	sub    esp,0x4
c000ce33:	50                   	push   eax
c000ce34:	6a 00                	push   0x0
c000ce36:	52                   	push   edx
c000ce37:	e8 b4 36 ff ff       	call   c00004f0 <memset>
c000ce3c:	83 c4 10             	add    esp,0x10
c000ce3f:	90                   	nop
c000ce40:	c9                   	leave  
c000ce41:	c3                   	ret    

c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce42:	55                   	push   ebp
c000ce43:	89 e5                	mov    ebp,esp
c000ce45:	83 ec 18             	sub    esp,0x18
c000ce48:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000ce4d:	85 c0                	test   eax,eax
c000ce4f:	74 2a                	je     c000ce7b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce51:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce57:	8b 0d e8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae8
c000ce5d:	83 ec 04             	sub    esp,0x4
c000ce60:	68 00 2b 02 c0       	push   0xc0022b00
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	89 e2                	mov    edx,esp
c000ce6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce6d:	89 02                	mov    DWORD PTR [edx],eax
c000ce6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce72:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce76:	ff d1                	call   ecx
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	fb                   	sti    
c000ce7c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce87:	0f 84 a1 00 00 00    	je     c000cf2e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce90:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce96:	84 c0                	test   al,al
c000ce98:	75 28                	jne    c000cec2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce9a:	fa                   	cli    
c000ce9b:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000cea0:	40                   	inc    eax
c000cea1:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000cea6:	e8 21 6c 00 00       	call   c0013acc <schedule()>
c000ceab:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000ceb0:	48                   	dec    eax
c000ceb1:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000ceb6:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000cebb:	85 c0                	test   eax,eax
c000cebd:	75 ce                	jne    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cebf:	fb                   	sti    
c000cec0:	eb cb                	jmp    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cec5:	8d 50 01             	lea    edx,[eax+0x1]
c000cec8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cece:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ced4:	88 10                	mov    BYTE PTR [eax],dl
c000ced6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced9:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cedf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee5:	05 b2 00 00 00       	add    eax,0xb2
c000ceea:	83 ec 0c             	sub    esp,0xc
c000ceed:	50                   	push   eax
c000ceee:	e8 6d 36 ff ff       	call   c0000560 <strlen>
c000cef3:	83 c4 10             	add    esp,0x10
c000cef6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cef9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ceff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf05:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf0b:	83 ec 04             	sub    esp,0x4
c000cf0e:	50                   	push   eax
c000cf0f:	51                   	push   ecx
c000cf10:	52                   	push   edx
c000cf11:	e8 ea 34 ff ff       	call   c0000400 <memmove>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf1f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf23:	0f 85 5a ff ff ff    	jne    c000ce83 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf2c:	eb 03                	jmp    c000cf31 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf31:	c9                   	leave  
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <Keyboard::Keyboard(char const*)>:
c000cf34:	83 ec 0c             	sub    esp,0xc
c000cf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3b:	83 ec 08             	sub    esp,0x8
c000cf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf42:	50                   	push   eax
c000cf43:	e8 78 f2 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000cf48:	83 c4 10             	add    esp,0x10
c000cf4b:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	89 10                	mov    DWORD PTR [eax],edx
c000cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf64:	c6 05 e4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ae4,0x1
c000cf6b:	90                   	nop
c000cf6c:	83 c4 0c             	add    esp,0xc
c000cf6f:	c3                   	ret    

c000cf70 <Keyboard::~Keyboard()>:
c000cf70:	83 ec 0c             	sub    esp,0xc
c000cf73:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c000cf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf7c:	89 10                	mov    DWORD PTR [eax],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	50                   	push   eax
c000cf86:	e8 9f ef ff ff       	call   c000bf2a <Device::~Device()>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	90                   	nop
c000cf8f:	83 c4 0c             	add    esp,0xc
c000cf92:	c3                   	ret    
c000cf93:	90                   	nop

c000cf94 <Keyboard::~Keyboard()>:
c000cf94:	83 ec 0c             	sub    esp,0xc
c000cf97:	83 ec 0c             	sub    esp,0xc
c000cf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9e:	e8 cd ff ff ff       	call   c000cf70 <Keyboard::~Keyboard()>
c000cfa3:	83 c4 10             	add    esp,0x10
c000cfa6:	83 ec 08             	sub    esp,0x8
c000cfa9:	68 5c 01 00 00       	push   0x15c
c000cfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb2:	e8 3b db ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	83 c4 0c             	add    esp,0xc
c000cfbd:	c3                   	ret    

c000cfbe <LogicalDisk::close(int, int, void*)>:
c000cfbe:	83 c8 ff             	or     eax,0xffffffff
c000cfc1:	c3                   	ret    

c000cfc2 <LogicalDisk::~LogicalDisk()>:
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	ba 94 e2 01 c0       	mov    edx,0xc001e294
c000cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfce:	89 10                	mov    DWORD PTR [eax],edx
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	50                   	push   eax
c000cfd8:	e8 4d ef ff ff       	call   c000bf2a <Device::~Device()>
c000cfdd:	83 c4 10             	add    esp,0x10
c000cfe0:	90                   	nop
c000cfe1:	83 c4 0c             	add    esp,0xc
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <LogicalDisk::~LogicalDisk()>:
c000cfe6:	83 ec 0c             	sub    esp,0xc
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff0:	e8 cd ff ff ff       	call   c000cfc2 <LogicalDisk::~LogicalDisk()>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	83 ec 08             	sub    esp,0x8
c000cffb:	68 74 01 00 00       	push   0x174
c000d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d004:	e8 e9 da ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 c4 0c             	add    esp,0xc
c000d00f:	c3                   	ret    

c000d010 <LogicalDisk::open(int, int, void*)>:
c000d010:	83 ec 18             	sub    esp,0x18
c000d013:	68 48 e2 01 c0       	push   0xc001e248
c000d018:	e8 5a 37 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000d01d:	83 c8 ff             	or     eax,0xffffffff
c000d020:	83 c4 1c             	add    esp,0x1c
c000d023:	c3                   	ret    

c000d024 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d024:	53                   	push   ebx
c000d025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d02d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d031:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d037:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d03d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d043:	77 10                	ja     c000d055 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d045:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d04b:	89 d3                	mov    ebx,edx
c000d04d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d053:	72 05                	jb     c000d05a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d055:	83 c8 ff             	or     eax,0xffffffff
c000d058:	89 c2                	mov    edx,eax
c000d05a:	5b                   	pop    ebx
c000d05b:	c3                   	ret    

c000d05c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d05c:	56                   	push   esi
c000d05d:	83 c8 ff             	or     eax,0xffffffff
c000d060:	53                   	push   ebx
c000d061:	89 c2                	mov    edx,eax
c000d063:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d067:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d06b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d06f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d075:	77 27                	ja     c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d077:	89 d8                	mov    eax,ebx
c000d079:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d07f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d085:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08a:	89 c2                	mov    edx,eax
c000d08c:	73 10                	jae    c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d08e:	89 c8                	mov    eax,ecx
c000d090:	89 da                	mov    edx,ebx
c000d092:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d098:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d09e:	5b                   	pop    ebx
c000d09f:	5e                   	pop    esi
c000d0a0:	c3                   	ret    
c000d0a1:	90                   	nop

c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0a2:	83 ec 1c             	sub    esp,0x1c
c000d0a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0c8:	83 ec 08             	sub    esp,0x8
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	50                   	push   eax
c000d0d0:	e8 eb f0 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d0d5:	83 c4 10             	add    esp,0x10
c000d0d8:	ba 94 e2 01 c0       	mov    edx,0xc001e294
c000d0dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e1:	89 10                	mov    DWORD PTR [eax],edx
c000d0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d107:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d10f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d113:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d119:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d11f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d130:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d13a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d13e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d148:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d152:	90                   	nop
c000d153:	83 c4 1c             	add    esp,0x1c
c000d156:	c3                   	ret    
c000d157:	90                   	nop

c000d158 <LogicalDisk::assignDriveLetter()>:
c000d158:	55                   	push   ebp
c000d159:	57                   	push   edi
c000d15a:	56                   	push   esi
c000d15b:	53                   	push   ebx
c000d15c:	83 ec 14             	sub    esp,0x14
c000d15f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d163:	8b 3d 20 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f20
c000d169:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d16f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d173:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d179:	8b 3d 24 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f24
c000d17f:	3c 01                	cmp    al,0x1
c000d181:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d189:	19 c0                	sbb    eax,eax
c000d18b:	83 e0 02             	and    eax,0x2
c000d18e:	83 c0 41             	add    eax,0x41
c000d191:	0f be e8             	movsx  ebp,al
c000d194:	3c 43                	cmp    al,0x43
c000d196:	75 10                	jne    c000d1a8 <LogicalDisk::assignDriveLetter()+0x50>
c000d198:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d19f:	75 5d                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1a6:	75 56                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1ab:	ba 01 00 00 00       	mov    edx,0x1
c000d1b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1b8:	d3 e2                	shl    edx,cl
c000d1ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1be:	89 d7                	mov    edi,edx
c000d1c0:	89 d6                	mov    esi,edx
c000d1c2:	c1 ff 1f             	sar    edi,0x1f
c000d1c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1c9:	21 f9                	and    ecx,edi
c000d1cb:	09 d1                	or     ecx,edx
c000d1cd:	75 2f                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1dd:	09 f2                	or     edx,esi
c000d1df:	89 15 20 2f 02 c0    	mov    DWORD PTR ds:0xc0022f20,edx
c000d1e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e9:	09 fa                	or     edx,edi
c000d1eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1ef:	89 15 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,edx
c000d1f5:	89 1c bd 40 2f 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd0c0],ebx
c000d1fc:	eb 08                	jmp    c000d206 <LogicalDisk::assignDriveLetter()+0xae>
c000d1fe:	45                   	inc    ebp
c000d1ff:	40                   	inc    eax
c000d200:	3c 5b                	cmp    al,0x5b
c000d202:	75 90                	jne    c000d194 <LogicalDisk::assignDriveLetter()+0x3c>
c000d204:	31 c0                	xor    eax,eax
c000d206:	83 c4 14             	add    esp,0x14
c000d209:	5b                   	pop    ebx
c000d20a:	5e                   	pop    esi
c000d20b:	5f                   	pop    edi
c000d20c:	5d                   	pop    ebp
c000d20d:	c3                   	ret    

c000d20e <LogicalDisk::mount()>:
c000d20e:	56                   	push   esi
c000d20f:	53                   	push   ebx
c000d210:	53                   	push   ebx
c000d211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d215:	8b 1d d4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad4
c000d21b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d225:	85 db                	test   ebx,ebx
c000d227:	74 27                	je     c000d250 <LogicalDisk::mount()+0x42>
c000d229:	51                   	push   ecx
c000d22a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d231:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d233:	83 e8 41             	sub    eax,0x41
c000d236:	50                   	push   eax
c000d237:	56                   	push   esi
c000d238:	53                   	push   ebx
c000d239:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d23c:	83 c4 10             	add    esp,0x10
c000d23f:	84 c0                	test   al,al
c000d241:	74 08                	je     c000d24b <LogicalDisk::mount()+0x3d>
c000d243:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d249:	eb 07                	jmp    c000d252 <LogicalDisk::mount()+0x44>
c000d24b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d24e:	eb d5                	jmp    c000d225 <LogicalDisk::mount()+0x17>
c000d250:	31 c0                	xor    eax,eax
c000d252:	5a                   	pop    edx
c000d253:	5b                   	pop    ebx
c000d254:	5e                   	pop    esi
c000d255:	c3                   	ret    

c000d256 <LogicalDisk::unmount()>:
c000d256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <LogicalDisk::eject()>:
c000d266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d270:	8b 10                	mov    edx,DWORD PTR [eax]
c000d272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d276:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d279:	90                   	nop

c000d27a <LogicalDisk::unassignDriveLetter()>:
c000d27a:	57                   	push   edi
c000d27b:	56                   	push   esi
c000d27c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d280:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d287:	84 c9                	test   cl,cl
c000d289:	75 0f                	jne    c000d29a <LogicalDisk::unassignDriveLetter()+0x20>
c000d28b:	c7 44 24 0c 6c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e26c
c000d293:	5e                   	pop    esi
c000d294:	5f                   	pop    edi
c000d295:	e9 dd 34 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c000d29a:	83 e9 41             	sub    ecx,0x41
c000d29d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2a4:	b8 01 00 00 00       	mov    eax,0x1
c000d2a9:	c7 04 8d 40 2f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd0c0],0x0
c000d2b4:	d3 e0                	shl    eax,cl
c000d2b6:	89 c7                	mov    edi,eax
c000d2b8:	f7 d0                	not    eax
c000d2ba:	c1 ff 1f             	sar    edi,0x1f
c000d2bd:	21 05 20 2f 02 c0    	and    DWORD PTR ds:0xc0022f20,eax
c000d2c3:	89 fe                	mov    esi,edi
c000d2c5:	f7 d6                	not    esi
c000d2c7:	21 35 24 2f 02 c0    	and    DWORD PTR ds:0xc0022f24,esi
c000d2cd:	5e                   	pop    esi
c000d2ce:	5f                   	pop    edi
c000d2cf:	c3                   	ret    

c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d0:	57                   	push   edi
c000d2d1:	56                   	push   esi
c000d2d2:	53                   	push   ebx
c000d2d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2e9:	77 41                	ja     c000d32c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2eb:	99                   	cdq    
c000d2ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2f2:	01 c8                	add    eax,ecx
c000d2f4:	11 da                	adc    edx,ebx
c000d2f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2fc:	19 d7                	sbb    edi,edx
c000d2fe:	72 33                	jb     c000d333 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d300:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d306:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d30c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d310:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d314:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d31a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d320:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d324:	5b                   	pop    ebx
c000d325:	5e                   	pop    esi
c000d326:	5f                   	pop    edi
c000d327:	e9 4e 0a 00 00       	jmp    c000dd7a <VCache::read(unsigned long long, int, void*)>
c000d32c:	b8 05 00 00 00       	mov    eax,0x5
c000d331:	eb 05                	jmp    c000d338 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d333:	b8 07 00 00 00       	mov    eax,0x7
c000d338:	5b                   	pop    ebx
c000d339:	5e                   	pop    esi
c000d33a:	5f                   	pop    edi
c000d33b:	c3                   	ret    

c000d33c <LogicalDisk::write(unsigned long long, int, void*)>:
c000d33c:	57                   	push   edi
c000d33d:	56                   	push   esi
c000d33e:	53                   	push   ebx
c000d33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d347:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d34f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d355:	77 41                	ja     c000d398 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d357:	99                   	cdq    
c000d358:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d35e:	01 c8                	add    eax,ecx
c000d360:	11 da                	adc    edx,ebx
c000d362:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d368:	19 d7                	sbb    edi,edx
c000d36a:	72 33                	jb     c000d39f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d36c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d372:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d378:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d37c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d380:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d386:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d390:	5b                   	pop    ebx
c000d391:	5e                   	pop    esi
c000d392:	5f                   	pop    edi
c000d393:	e9 cc 08 00 00       	jmp    c000dc64 <VCache::write(unsigned long long, int, void*)>
c000d398:	b8 05 00 00 00       	mov    eax,0x5
c000d39d:	eb 05                	jmp    c000d3a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d39f:	b8 07 00 00 00       	mov    eax,0x7
c000d3a4:	5b                   	pop    ebx
c000d3a5:	5e                   	pop    esi
c000d3a6:	5f                   	pop    edi
c000d3a7:	c3                   	ret    

c000d3a8 <Mouse::Mouse(char const*)>:
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3af:	83 ec 08             	sub    esp,0x8
c000d3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b6:	50                   	push   eax
c000d3b7:	e8 04 ee ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d3bc:	83 c4 10             	add    esp,0x10
c000d3bf:	ba c0 e2 01 c0       	mov    edx,0xc001e2c0
c000d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c8:	89 10                	mov    DWORD PTR [eax],edx
c000d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3d8:	90                   	nop
c000d3d9:	83 c4 0c             	add    esp,0xc
c000d3dc:	c3                   	ret    
c000d3dd:	90                   	nop
c000d3de:	66 90                	xchg   ax,ax

c000d3e0 <Mouse::~Mouse()>:
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	ba c0 e2 01 c0       	mov    edx,0xc001e2c0
c000d3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ec:	89 10                	mov    DWORD PTR [eax],edx
c000d3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f2:	83 ec 0c             	sub    esp,0xc
c000d3f5:	50                   	push   eax
c000d3f6:	e8 2f eb ff ff       	call   c000bf2a <Device::~Device()>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	90                   	nop
c000d3ff:	83 c4 0c             	add    esp,0xc
c000d402:	c3                   	ret    
c000d403:	90                   	nop

c000d404 <Mouse::~Mouse()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d40e:	e8 cd ff ff ff       	call   c000d3e0 <Mouse::~Mouse()>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	83 ec 08             	sub    esp,0x8
c000d419:	68 58 01 00 00       	push   0x158
c000d41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d422:	e8 cb d6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 c4 0c             	add    esp,0xc
c000d42d:	c3                   	ret    

c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	81 ec 28 01 00 00    	sub    esp,0x128
c000d438:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d43f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d446:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d44d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d458:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d45c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d463:	e8 54 ee ff ff       	call   c000c2bc <Device::getName()>
c000d468:	5a                   	pop    edx
c000d469:	59                   	pop    ecx
c000d46a:	50                   	push   eax
c000d46b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d46f:	55                   	push   ebp
c000d470:	e8 ab 31 ff ff       	call   c0000620 <strcpy>
c000d475:	5b                   	pop    ebx
c000d476:	58                   	pop    eax
c000d477:	68 e4 e2 01 c0       	push   0xc001e2e4
c000d47c:	55                   	push   ebp
c000d47d:	e8 5e 33 ff ff       	call   c00007e0 <strcat>
c000d482:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d489:	e8 cb a9 ff ff       	call   c0007e59 <malloc>
c000d48e:	83 c4 0c             	add    esp,0xc
c000d491:	89 c3                	mov    ebx,eax
c000d493:	57                   	push   edi
c000d494:	56                   	push   esi
c000d495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4a4:	55                   	push   ebp
c000d4a5:	50                   	push   eax
c000d4a6:	e8 f7 fb ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4ab:	83 c4 14             	add    esp,0x14
c000d4ae:	53                   	push   ebx
c000d4af:	e8 a4 fc ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c000d4b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4b7:	e8 52 fd ff ff       	call   c000d20e <LogicalDisk::mount()>
c000d4bc:	58                   	pop    eax
c000d4bd:	5a                   	pop    edx
c000d4be:	53                   	push   ebx
c000d4bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4c6:	e8 5d eb ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d4cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d1:	5b                   	pop    ebx
c000d4d2:	5e                   	pop    esi
c000d4d3:	5f                   	pop    edi
c000d4d4:	5d                   	pop    ebp
c000d4d5:	c3                   	ret    

c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d4d6:	55                   	push   ebp
c000d4d7:	57                   	push   edi
c000d4d8:	56                   	push   esi
c000d4d9:	53                   	push   ebx
c000d4da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4ed:	3d 00 02 00 00       	cmp    eax,0x200
c000d4f2:	74 27                	je     c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4fa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d500:	83 ec 10             	sub    esp,0x10
c000d503:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d507:	99                   	cdq    
c000d508:	c1 e6 0a             	shl    esi,0xa
c000d50b:	52                   	push   edx
c000d50c:	89 fd                	mov    ebp,edi
c000d50e:	50                   	push   eax
c000d50f:	55                   	push   ebp
c000d510:	56                   	push   esi
c000d511:	e8 2a ed 00 00       	call   c001c240 <__udivdi3>
c000d516:	e9 b1 00 00 00       	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d51b:	83 ec 0c             	sub    esp,0xc
c000d51e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d520:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d524:	56                   	push   esi
c000d525:	6a 01                	push   0x1
c000d527:	6a 00                	push   0x0
c000d529:	6a 00                	push   0x0
c000d52b:	53                   	push   ebx
c000d52c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d52f:	83 c4 20             	add    esp,0x20
c000d532:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d53a:	75 0a                	jne    c000d546 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d53c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d544:	74 2c                	je     c000d572 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d546:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d54c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d552:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d558:	83 ec 10             	sub    esp,0x10
c000d55b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d55f:	89 f7                	mov    edi,esi
c000d561:	c1 e0 0a             	shl    eax,0xa
c000d564:	c1 ff 1f             	sar    edi,0x1f
c000d567:	57                   	push   edi
c000d568:	56                   	push   esi
c000d569:	52                   	push   edx
c000d56a:	50                   	push   eax
c000d56b:	e8 d0 ec 00 00       	call   c001c240 <__udivdi3>
c000d570:	eb 5a                	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d572:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d579:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d580:	83 e1 7f             	and    ecx,0x7f
c000d583:	83 e0 7f             	and    eax,0x7f
c000d586:	01 c1                	add    ecx,eax
c000d588:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d58f:	83 e0 7f             	and    eax,0x7f
c000d592:	01 c1                	add    ecx,eax
c000d594:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d59b:	83 e0 7f             	and    eax,0x7f
c000d59e:	00 c1                	add    cl,al
c000d5a0:	74 41                	je     c000d5e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b4:	83 ec 10             	sub    esp,0x10
c000d5b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bb:	89 f7                	mov    edi,esi
c000d5bd:	c1 e0 0a             	shl    eax,0xa
c000d5c0:	c1 ff 1f             	sar    edi,0x1f
c000d5c3:	57                   	push   edi
c000d5c4:	56                   	push   esi
c000d5c5:	52                   	push   edx
c000d5c6:	50                   	push   eax
c000d5c7:	e8 74 ec 00 00       	call   c001c240 <__udivdi3>
c000d5cc:	83 c4 14             	add    esp,0x14
c000d5cf:	52                   	push   edx
c000d5d0:	50                   	push   eax
c000d5d1:	6a 00                	push   0x0
c000d5d3:	6a 00                	push   0x0
c000d5d5:	53                   	push   ebx
c000d5d6:	e8 53 fe ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5db:	83 c4 20             	add    esp,0x20
c000d5de:	e9 79 01 00 00       	jmp    c000d75c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5e3:	89 f0                	mov    eax,esi
c000d5e5:	31 f6                	xor    esi,esi
c000d5e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5ee:	75 02                	jne    c000d5f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f0:	89 f1                	mov    ecx,esi
c000d5f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d600:	c1 e2 08             	shl    edx,0x8
c000d603:	c1 e7 10             	shl    edi,0x10
c000d606:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d60e:	09 fa                	or     edx,edi
c000d610:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d618:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d61f:	83 c0 10             	add    eax,0x10
c000d622:	09 fa                	or     edx,edi
c000d624:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d62b:	c1 e7 18             	shl    edi,0x18
c000d62e:	09 fa                	or     edx,edi
c000d630:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d637:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d63b:	c1 e7 10             	shl    edi,0x10
c000d63e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d645:	c1 e2 08             	shl    edx,0x8
c000d648:	09 fa                	or     edx,edi
c000d64a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d651:	09 fa                	or     edx,edi
c000d653:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d65a:	c1 e7 18             	shl    edi,0x18
c000d65d:	09 fa                	or     edx,edi
c000d65f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d663:	46                   	inc    esi
c000d664:	83 fe 04             	cmp    esi,0x4
c000d667:	0f 85 7a ff ff ff    	jne    c000d5e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d671:	83 f0 01             	xor    eax,0x1
c000d674:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d678:	75 57                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d67e:	83 f0 01             	xor    eax,0x1
c000d681:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d685:	75 4a                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d687:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d68b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d693:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d69b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b1:	89 f7                	mov    edi,esi
c000d6b3:	c1 e0 0a             	shl    eax,0xa
c000d6b6:	c1 ff 1f             	sar    edi,0x1f
c000d6b9:	57                   	push   edi
c000d6ba:	56                   	push   esi
c000d6bb:	52                   	push   edx
c000d6bc:	50                   	push   eax
c000d6bd:	e8 7e eb 00 00       	call   c001c240 <__udivdi3>
c000d6c2:	83 c4 10             	add    esp,0x10
c000d6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d1:	84 c9                	test   cl,cl
c000d6d3:	74 53                	je     c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6d5:	0f b6 c9             	movzx  ecx,cl
c000d6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d708:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d70c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d710:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d714:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d718:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d71c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d720:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d724:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d728:	31 ed                	xor    ebp,ebp
c000d72a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d72e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d732:	89 f8                	mov    eax,edi
c000d734:	09 f0                	or     eax,esi
c000d736:	74 1e                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d738:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d73c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d740:	89 d1                	mov    ecx,edx
c000d742:	09 c1                	or     ecx,eax
c000d744:	74 10                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	57                   	push   edi
c000d74a:	56                   	push   esi
c000d74b:	52                   	push   edx
c000d74c:	50                   	push   eax
c000d74d:	53                   	push   ebx
c000d74e:	e8 db fc ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d753:	83 c4 20             	add    esp,0x20
c000d756:	45                   	inc    ebp
c000d757:	83 fd 04             	cmp    ebp,0x4
c000d75a:	75 ce                	jne    c000d72a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d75c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d762:	5b                   	pop    ebx
c000d763:	5e                   	pop    esi
c000d764:	5f                   	pop    edi
c000d765:	5d                   	pop    ebp
c000d766:	c3                   	ret    
c000d767:	90                   	nop

c000d768 <Serial::Serial(char const*)>:
c000d768:	83 ec 0c             	sub    esp,0xc
c000d76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	50                   	push   eax
c000d777:	e8 44 ea ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	ba f8 e2 01 c0       	mov    edx,0xc001e2f8
c000d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d788:	89 10                	mov    DWORD PTR [eax],edx
c000d78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d798:	90                   	nop
c000d799:	83 c4 0c             	add    esp,0xc
c000d79c:	c3                   	ret    
c000d79d:	90                   	nop
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Serial::~Serial()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba f8 e2 01 c0       	mov    edx,0xc001e2f8
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 6f e7 ff ff       	call   c000bf2a <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Serial::~Serial()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Serial::~Serial()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 58 01 00 00       	push   0x158
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 0b d3 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    
c000d7ee:	66 90                	xchg   ax,ax

c000d7f0 <Timer::Timer(char const*)>:
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f7:	83 ec 08             	sub    esp,0x8
c000d7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fe:	50                   	push   eax
c000d7ff:	e8 bc e9 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d804:	83 c4 10             	add    esp,0x10
c000d807:	ba 3c e3 01 c0       	mov    edx,0xc001e33c
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	89 10                	mov    DWORD PTR [eax],edx
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d820:	90                   	nop
c000d821:	83 c4 0c             	add    esp,0xc
c000d824:	c3                   	ret    
c000d825:	90                   	nop
c000d826:	66 90                	xchg   ax,ax

c000d828 <Timer::~Timer()>:
c000d828:	83 ec 0c             	sub    esp,0xc
c000d82b:	ba 3c e3 01 c0       	mov    edx,0xc001e33c
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	89 10                	mov    DWORD PTR [eax],edx
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	83 ec 0c             	sub    esp,0xc
c000d83d:	50                   	push   eax
c000d83e:	e8 e7 e6 ff ff       	call   c000bf2a <Device::~Device()>
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	90                   	nop
c000d847:	83 c4 0c             	add    esp,0xc
c000d84a:	c3                   	ret    
c000d84b:	90                   	nop

c000d84c <Timer::~Timer()>:
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d856:	e8 cd ff ff ff       	call   c000d828 <Timer::~Timer()>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	83 ec 08             	sub    esp,0x8
c000d861:	68 5c 01 00 00       	push   0x15c
c000d866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86a:	e8 83 d2 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	83 c4 0c             	add    esp,0xc
c000d875:	c3                   	ret    

c000d876 <Timer::read()>:
c000d876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d87a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d880:	c3                   	ret    

c000d881 <setupTimer(int)>:
c000d881:	53                   	push   ebx
c000d882:	83 ec 14             	sub    esp,0x14
c000d885:	68 5c 01 00 00       	push   0x15c
c000d88a:	e8 ca a5 ff ff       	call   c0007e59 <malloc>
c000d88f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d892:	89 c3                	mov    ebx,eax
c000d894:	e8 23 e3 00 00       	call   c001bbbc <PIT::PIT()>
c000d899:	58                   	pop    eax
c000d89a:	5a                   	pop    edx
c000d89b:	53                   	push   ebx
c000d89c:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000d8a2:	e8 81 e7 ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d8a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8a9:	6a 00                	push   0x0
c000d8ab:	6a 00                	push   0x0
c000d8ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b1:	53                   	push   ebx
c000d8b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8b5:	89 d8                	mov    eax,ebx
c000d8b7:	83 c4 28             	add    esp,0x28
c000d8ba:	5b                   	pop    ebx
c000d8bb:	c3                   	ret    

c000d8bc <timerHandler(unsigned int)>:
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	51                   	push   ecx
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	01 05 ac 2f 02 c0    	add    DWORD PTR ds:0xc0022fac,eax
c000d8c9:	80 3d dd 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209dd,0x0
c000d8d0:	0f 84 4a 01 00 00    	je     c000da20 <timerHandler(unsigned int)+0x164>
c000d8d6:	fa                   	cli    
c000d8d7:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c000d8dd:	83 ec 0c             	sub    esp,0xc
c000d8e0:	ff 05 a4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea4
c000d8e6:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d8eb:	e8 20 ef 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	84 c0                	test   al,al
c000d8f5:	0f 85 a1 00 00 00    	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d903:	e8 24 ef 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 c6                	mov    esi,eax
c000d90d:	8d 76 00             	lea    esi,[esi+0x0]
c000d910:	83 ec 0c             	sub    esp,0xc
c000d913:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d918:	e8 0f ef 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d91d:	c7 04 24 b8 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eb8
c000d924:	89 c3                	mov    ebx,eax
c000d926:	e8 09 ef 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d92b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c000d937:	77 23                	ja     c000d95c <timerHandler(unsigned int)+0xa0>
c000d939:	83 ec 0c             	sub    esp,0xc
c000d93c:	53                   	push   ebx
c000d93d:	e8 4e 66 00 00       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	39 de                	cmp    esi,ebx
c000d947:	75 27                	jne    c000d970 <timerHandler(unsigned int)+0xb4>
c000d949:	83 ec 0c             	sub    esp,0xc
c000d94c:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d951:	e8 d6 ee 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d956:	89 c6                	mov    esi,eax
c000d958:	eb 12                	jmp    c000d96c <timerHandler(unsigned int)+0xb0>
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	52                   	push   edx
c000d95d:	52                   	push   edx
c000d95e:	53                   	push   ebx
c000d95f:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d964:	e8 83 ef 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	90                   	nop
c000d970:	83 ec 0c             	sub    esp,0xc
c000d973:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d978:	e8 93 ee 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	84 c0                	test   al,al
c000d982:	75 18                	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	68 b8 3e 02 c0       	push   0xc0023eb8
c000d98c:	e8 9b ee 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	39 f0                	cmp    eax,esi
c000d996:	0f 85 74 ff ff ff    	jne    c000d910 <timerHandler(unsigned int)+0x54>
c000d99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9a5:	74 41                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9a7:	80 3d dc 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209dc,0x0
c000d9ae:	74 38                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9b0:	fa                   	cli    
c000d9b1:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c000d9b7:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000d9bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9ce:	72 08                	jb     c000d9d8 <timerHandler(unsigned int)+0x11c>
c000d9d0:	e8 f7 60 00 00       	call   c0013acc <schedule()>
c000d9d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d8:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000d9dd:	48                   	dec    eax
c000d9de:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000d9e3:	75 03                	jne    c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9e5:	fb                   	sti    
c000d9e6:	66 90                	xchg   ax,ax
c000d9e8:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c000d9ed:	48                   	dec    eax
c000d9ee:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000d9f3:	75 1b                	jne    c000da10 <timerHandler(unsigned int)+0x154>
c000d9f5:	83 3d a0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ea0,0x0
c000d9fc:	74 12                	je     c000da10 <timerHandler(unsigned int)+0x154>
c000d9fe:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c000da08:	e8 bf 60 00 00       	call   c0013acc <schedule()>
c000da0d:	8d 76 00             	lea    esi,[esi+0x0]
c000da10:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c000da15:	48                   	dec    eax
c000da16:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000da1b:	75 03                	jne    c000da20 <timerHandler(unsigned int)+0x164>
c000da1d:	fb                   	sti    
c000da1e:	66 90                	xchg   ax,ax
c000da20:	58                   	pop    eax
c000da21:	5b                   	pop    ebx
c000da22:	5e                   	pop    esi
c000da23:	c3                   	ret    

c000da24 <VCache::VCache(PhysicalDisk*)>:
c000da24:	53                   	push   ebx
c000da25:	83 ec 18             	sub    esp,0x18
c000da28:	ba 6c e3 01 c0       	mov    edx,0xc001e36c
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	89 10                	mov    DWORD PTR [eax],edx
c000da33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da37:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da84:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da8b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dabd:	83 ec 0c             	sub    esp,0xc
c000dac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dac4:	e8 90 a3 ff ff       	call   c0007e59 <malloc>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	89 c3                	mov    ebx,eax
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	53                   	push   ebx
c000dad2:	e8 c1 5d 00 00       	call   c0013898 <Mutex::Mutex()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dade:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dafb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db0c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db1c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db1f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db26:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db34:	05 00 01 00 00       	add    eax,0x100
c000db39:	c1 e0 04             	shl    eax,0x4
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	50                   	push   eax
c000db40:	e8 14 a3 ff ff       	call   c0007e59 <malloc>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	89 c2                	mov    edx,eax
c000db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db55:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db6e:	c1 e0 06             	shl    eax,0x6
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	50                   	push   eax
c000db75:	e8 df a2 ff ff       	call   c0007e59 <malloc>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	89 c2                	mov    edx,eax
c000db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db83:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db86:	90                   	nop
c000db87:	83 c4 18             	add    esp,0x18
c000db8a:	5b                   	pop    ebx
c000db8b:	c3                   	ret    

c000db8c <VCache::invalidateReadBuffer()>:
c000db8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db90:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db96:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <VCache::writeWriteBuffer()>:
c000db9c:	53                   	push   ebx
c000db9d:	83 ec 08             	sub    esp,0x8
c000dba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dba4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dba8:	74 1e                	je     c000dbc8 <VCache::writeWriteBuffer()+0x2c>
c000dbaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbad:	83 ec 0c             	sub    esp,0xc
c000dbb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbb5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbbb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbbe:	50                   	push   eax
c000dbbf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbc2:	83 c4 20             	add    esp,0x20
c000dbc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbcf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbd6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbda:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe1:	83 c4 08             	add    esp,0x8
c000dbe4:	5b                   	pop    ebx
c000dbe5:	c3                   	ret    
c000dbe6:	66 90                	xchg   ax,ax

c000dbe8 <VCache::~VCache()>:
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	ba 6c e3 01 c0       	mov    edx,0xc001e36c
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	89 10                	mov    DWORD PTR [eax],edx
c000dbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbfd:	84 c0                	test   al,al
c000dbff:	74 0f                	je     c000dc10 <VCache::~VCache()+0x28>
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc08:	e8 8f ff ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc14:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	50                   	push   eax
c000dc1b:	e8 49 a2 ff ff       	call   c0007e69 <free>
c000dc20:	83 c4 10             	add    esp,0x10
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	50                   	push   eax
c000dc2e:	e8 36 a2 ff ff       	call   c0007e69 <free>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	90                   	nop
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <VCache::~VCache()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	83 ec 0c             	sub    esp,0xc
c000dc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc46:	e8 9d ff ff ff       	call   c000dbe8 <VCache::~VCache()>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	6a 44                	push   0x44
c000dc53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc57:	e8 96 ce ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	83 c4 0c             	add    esp,0xc
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <VCache::write(unsigned long long, int, void*)>:
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	56                   	push   esi
c000dc67:	53                   	push   ebx
c000dc68:	83 ec 1c             	sub    esp,0x1c
c000dc6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc7f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc87:	31 c0                	xor    eax,eax
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	39 e8                	cmp    eax,ebp
c000dc8e:	7d 18                	jge    c000dca8 <VCache::write(unsigned long long, int, void*)+0x44>
c000dc90:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc93:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc99:	0f af c8             	imul   ecx,eax
c000dc9c:	89 ca                	mov    edx,ecx
c000dc9e:	01 f2                	add    edx,esi
c000dca0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dca2:	40                   	inc    eax
c000dca3:	eb e7                	jmp    c000dc8c <VCache::write(unsigned long long, int, void*)+0x28>
c000dca5:	8d 76 00             	lea    esi,[esi+0x0]
c000dca8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dcac:	74 0a                	je     c000dcb8 <VCache::write(unsigned long long, int, void*)+0x54>
c000dcae:	53                   	push   ebx
c000dcaf:	e8 d8 fe ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000dcb4:	58                   	pop    eax
c000dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcbc:	74 5a                	je     c000dd18 <VCache::write(unsigned long long, int, void*)+0xb4>
c000dcbe:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dcc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc5:	89 f8                	mov    eax,edi
c000dcc7:	99                   	cdq    
c000dcc8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dccb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcce:	31 c1                	xor    ecx,eax
c000dcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd4:	31 d0                	xor    eax,edx
c000dcd6:	09 c1                	or     ecx,eax
c000dcd8:	75 32                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcda:	83 fd 01             	cmp    ebp,0x1
c000dcdd:	75 2d                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcdf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce8:	0f af f9             	imul   edi,ecx
c000dceb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcf3:	40                   	inc    eax
c000dcf4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcf7:	83 f8 40             	cmp    eax,0x40
c000dcfa:	75 74                	jne    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	53                   	push   ebx
c000dd00:	e8 97 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	eb 66                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	53                   	push   ebx
c000dd10:	e8 87 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd15:	83 c4 10             	add    esp,0x10
c000dd18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd1b:	83 fd 3f             	cmp    ebp,0x3f
c000dd1e:	7f 24                	jg     c000dd44 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd24:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dd27:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dd2a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd32:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd35:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dd38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd40:	eb 2e                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd46:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd4a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd56:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd5a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd5e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dd62:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd65:	83 c4 1c             	add    esp,0x1c
c000dd68:	5b                   	pop    ebx
c000dd69:	5e                   	pop    esi
c000dd6a:	5f                   	pop    edi
c000dd6b:	5d                   	pop    ebp
c000dd6c:	ff e0                	jmp    eax
c000dd6e:	66 90                	xchg   ax,ax
c000dd70:	83 c4 1c             	add    esp,0x1c
c000dd73:	31 c0                	xor    eax,eax
c000dd75:	5b                   	pop    ebx
c000dd76:	5e                   	pop    esi
c000dd77:	5f                   	pop    edi
c000dd78:	5d                   	pop    ebp
c000dd79:	c3                   	ret    

c000dd7a <VCache::read(unsigned long long, int, void*)>:
c000dd7a:	55                   	push   ebp
c000dd7b:	57                   	push   edi
c000dd7c:	56                   	push   esi
c000dd7d:	53                   	push   ebx
c000dd7e:	83 ec 2c             	sub    esp,0x2c
c000dd81:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd85:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000dd89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd8d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000dd91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd95:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd9d:	31 c0                	xor    eax,eax
c000dd9f:	90                   	nop
c000dda0:	39 f0                	cmp    eax,esi
c000dda2:	7d 18                	jge    c000ddbc <VCache::read(unsigned long long, int, void*)+0x42>
c000dda4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000dda7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ddad:	0f af c8             	imul   ecx,eax
c000ddb0:	89 ca                	mov    edx,ecx
c000ddb2:	01 fa                	add    edx,edi
c000ddb4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ddb6:	40                   	inc    eax
c000ddb7:	eb e7                	jmp    c000dda0 <VCache::read(unsigned long long, int, void*)+0x26>
c000ddb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddbc:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ddc0:	74 0e                	je     c000ddd0 <VCache::read(unsigned long long, int, void*)+0x56>
c000ddc2:	83 ec 0c             	sub    esp,0xc
c000ddc5:	55                   	push   ebp
c000ddc6:	e8 d1 fd ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	66 90                	xchg   ax,ax
c000ddd0:	83 fe 01             	cmp    esi,0x1
c000ddd3:	0f 85 8b 00 00 00    	jne    c000de64 <VCache::read(unsigned long long, int, void*)+0xea>
c000ddd9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000dddc:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000dde3:	75 7f                	jne    c000de64 <VCache::read(unsigned long long, int, void*)+0xea>
c000dde5:	8b 75 40             	mov    esi,DWORD PTR [ebp+0x40]
c000dde8:	89 f0                	mov    eax,esi
c000ddea:	f7 d8                	neg    eax
c000ddec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ddf8:	c1 f8 1f             	sar    eax,0x1f
c000ddfb:	23 5c 24 0c          	and    ebx,DWORD PTR [esp+0xc]
c000ddff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de03:	89 d8                	mov    eax,ebx
c000de05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000de09:	23 5c 24 14          	and    ebx,DWORD PTR [esp+0x14]
c000de0d:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000de11:	89 da                	mov    edx,ebx
c000de13:	74 2b                	je     c000de40 <VCache::read(unsigned long long, int, void*)+0xc6>
c000de15:	39 5d 34             	cmp    DWORD PTR [ebp+0x34],ebx
c000de18:	75 26                	jne    c000de40 <VCache::read(unsigned long long, int, void*)+0xc6>
c000de1a:	39 45 30             	cmp    DWORD PTR [ebp+0x30],eax
c000de1d:	75 21                	jne    c000de40 <VCache::read(unsigned long long, int, void*)+0xc6>
c000de1f:	90                   	nop
c000de20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000de23:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000de29:	8b 45 40             	mov    eax,DWORD PTR [ebp+0x40]
c000de2c:	8d 70 ff             	lea    esi,[eax-0x1]
c000de2f:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000de33:	0f af f1             	imul   esi,ecx
c000de36:	03 75 38             	add    esi,DWORD PTR [ebp+0x38]
c000de39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de3b:	31 c0                	xor    eax,eax
c000de3d:	eb 5d                	jmp    c000de9c <VCache::read(unsigned long long, int, void*)+0x122>
c000de3f:	90                   	nop
c000de40:	83 ec 0c             	sub    esp,0xc
c000de43:	c6 45 3c 01          	mov    BYTE PTR [ebp+0x3c],0x1
c000de47:	89 45 30             	mov    DWORD PTR [ebp+0x30],eax
c000de4a:	89 55 34             	mov    DWORD PTR [ebp+0x34],edx
c000de4d:	8b 19                	mov    ebx,DWORD PTR [ecx]
c000de4f:	ff 75 38             	push   DWORD PTR [ebp+0x38]
c000de52:	56                   	push   esi
c000de53:	52                   	push   edx
c000de54:	50                   	push   eax
c000de55:	51                   	push   ecx
c000de56:	ff 53 28             	call   DWORD PTR [ebx+0x28]
c000de59:	83 c4 20             	add    esp,0x20
c000de5c:	85 c0                	test   eax,eax
c000de5e:	75 3c                	jne    c000de9c <VCache::read(unsigned long long, int, void*)+0x122>
c000de60:	eb be                	jmp    c000de20 <VCache::read(unsigned long long, int, void*)+0xa6>
c000de62:	66 90                	xchg   ax,ax
c000de64:	83 ec 0c             	sub    esp,0xc
c000de67:	55                   	push   ebp
c000de68:	e8 1f fd ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000de6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000de70:	8b 10                	mov    edx,DWORD PTR [eax]
c000de72:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
c000de76:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
c000de7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000de7e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de82:	89 7c 24 54          	mov    DWORD PTR [esp+0x54],edi
c000de86:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000de8a:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
c000de8e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de91:	83 c4 3c             	add    esp,0x3c
c000de94:	5b                   	pop    ebx
c000de95:	5e                   	pop    esi
c000de96:	5f                   	pop    edi
c000de97:	5d                   	pop    ebp
c000de98:	ff e0                	jmp    eax
c000de9a:	66 90                	xchg   ax,ax
c000de9c:	83 c4 2c             	add    esp,0x2c
c000de9f:	5b                   	pop    ebx
c000dea0:	5e                   	pop    esi
c000dea1:	5f                   	pop    edi
c000dea2:	5d                   	pop    ebp
c000dea3:	c3                   	ret    

c000dea4 <Video::putrect(int, int, int, int, unsigned int)>:
c000dea4:	55                   	push   ebp
c000dea5:	57                   	push   edi
c000dea6:	56                   	push   esi
c000dea7:	53                   	push   ebx
c000dea8:	83 ec 1c             	sub    esp,0x1c
c000deab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000deaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000deb3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000deb7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000debb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000debf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dec3:	01 df                	add    edi,ebx
c000dec5:	39 fb                	cmp    ebx,edi
c000dec7:	7d 1f                	jge    c000dee8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dec9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000decd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ded1:	7d 12                	jge    c000dee5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ded3:	8b 16                	mov    edx,DWORD PTR [esi]
c000ded5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ded9:	53                   	push   ebx
c000deda:	55                   	push   ebp
c000dedb:	45                   	inc    ebp
c000dedc:	56                   	push   esi
c000dedd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	eb e8                	jmp    c000decd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dee5:	43                   	inc    ebx
c000dee6:	eb dd                	jmp    c000dec5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dee8:	83 c4 1c             	add    esp,0x1c
c000deeb:	5b                   	pop    ebx
c000deec:	5e                   	pop    esi
c000deed:	5f                   	pop    edi
c000deee:	5d                   	pop    ebp
c000deef:	c3                   	ret    

c000def0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000def0:	55                   	push   ebp
c000def1:	57                   	push   edi
c000def2:	31 ff                	xor    edi,edi
c000def4:	56                   	push   esi
c000def5:	53                   	push   ebx
c000def6:	83 ec 1c             	sub    esp,0x1c
c000def9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000defd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000df01:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000df08:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000df0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df11:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000df15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df19:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000df1c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df20:	01 f9                	add    ecx,edi
c000df22:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000df26:	7d 2f                	jge    c000df57 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000df28:	31 f6                	xor    esi,esi
c000df2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df2e:	01 f2                	add    edx,esi
c000df30:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000df34:	7d 1a                	jge    c000df50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000df36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000df39:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000df3c:	46                   	inc    esi
c000df3d:	51                   	push   ecx
c000df3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000df42:	52                   	push   edx
c000df43:	55                   	push   ebp
c000df44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df4e:	eb da                	jmp    c000df2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000df50:	47                   	inc    edi
c000df51:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000df55:	eb c5                	jmp    c000df1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000df57:	83 c4 1c             	add    esp,0x1c
c000df5a:	5b                   	pop    ebx
c000df5b:	5e                   	pop    esi
c000df5c:	5f                   	pop    edi
c000df5d:	5d                   	pop    ebp
c000df5e:	c3                   	ret    
c000df5f:	90                   	nop

c000df60 <Video::blit(unsigned int*, int, int, int, int)>:
c000df60:	55                   	push   ebp
c000df61:	57                   	push   edi
c000df62:	56                   	push   esi
c000df63:	53                   	push   ebx
c000df64:	83 ec 1c             	sub    esp,0x1c
c000df67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df6f:	85 c0                	test   eax,eax
c000df71:	79 02                	jns    c000df75 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df73:	31 c0                	xor    eax,eax
c000df75:	c1 e0 02             	shl    eax,0x2
c000df78:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df84:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df88:	39 d8                	cmp    eax,ebx
c000df8a:	7e 49                	jle    c000dfd5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df8c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df92:	7c 41                	jl     c000dfd5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df94:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df98:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df9c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dfa0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dfa4:	39 f9                	cmp    ecx,edi
c000dfa6:	7e 22                	jle    c000dfca <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dfa8:	83 c5 04             	add    ebp,0x4
c000dfab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dfb1:	7c 14                	jl     c000dfc7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dfb3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dfb5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dfb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dfbc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dfc0:	56                   	push   esi
c000dfc1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dfc4:	83 c4 10             	add    esp,0x10
c000dfc7:	47                   	inc    edi
c000dfc8:	eb d2                	jmp    c000df9c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000dfca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfce:	43                   	inc    ebx
c000dfcf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dfd3:	eb ab                	jmp    c000df80 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dfd5:	83 c4 1c             	add    esp,0x1c
c000dfd8:	5b                   	pop    ebx
c000dfd9:	5e                   	pop    esi
c000dfda:	5f                   	pop    edi
c000dfdb:	5d                   	pop    ebp
c000dfdc:	c3                   	ret    
c000dfdd:	90                   	nop

c000dfde <Video::clearScreen(unsigned int)>:
c000dfde:	57                   	push   edi
c000dfdf:	56                   	push   esi
c000dfe0:	53                   	push   ebx
c000dfe1:	31 db                	xor    ebx,ebx
c000dfe3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfe7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dfed:	7e 1f                	jle    c000e00e <Video::clearScreen(unsigned int)+0x30>
c000dfef:	31 ff                	xor    edi,edi
c000dff1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dff7:	7e 12                	jle    c000e00b <Video::clearScreen(unsigned int)+0x2d>
c000dff9:	8b 06                	mov    eax,DWORD PTR [esi]
c000dffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfff:	53                   	push   ebx
c000e000:	57                   	push   edi
c000e001:	47                   	inc    edi
c000e002:	56                   	push   esi
c000e003:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	eb e6                	jmp    c000dff1 <Video::clearScreen(unsigned int)+0x13>
c000e00b:	43                   	inc    ebx
c000e00c:	eb d9                	jmp    c000dfe7 <Video::clearScreen(unsigned int)+0x9>
c000e00e:	5b                   	pop    ebx
c000e00f:	5e                   	pop    esi
c000e010:	5f                   	pop    edi
c000e011:	c3                   	ret    

c000e012 <Video::putpixel(int, int, unsigned int)>:
c000e012:	c7 44 24 04 74 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e374
c000e01a:	e9 58 27 00 00       	jmp    c0010777 <Krnl::panic(char const*)>
c000e01f:	90                   	nop

c000e020 <Video::Video(char const*)>:
c000e020:	83 ec 0c             	sub    esp,0xc
c000e023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e027:	83 ec 08             	sub    esp,0x8
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	50                   	push   eax
c000e02f:	e8 8c e1 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	ba e4 e3 01 c0       	mov    edx,0xc001e3e4
c000e03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e040:	89 10                	mov    DWORD PTR [eax],edx
c000e042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e046:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e050:	90                   	nop
c000e051:	83 c4 0c             	add    esp,0xc
c000e054:	c3                   	ret    
c000e055:	90                   	nop

c000e056 <Video::~Video()>:
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	ba e4 e3 01 c0       	mov    edx,0xc001e3e4
c000e05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e062:	89 10                	mov    DWORD PTR [eax],edx
c000e064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e068:	83 ec 0c             	sub    esp,0xc
c000e06b:	50                   	push   eax
c000e06c:	e8 b9 de ff ff       	call   c000bf2a <Device::~Device()>
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	90                   	nop
c000e075:	83 c4 0c             	add    esp,0xc
c000e078:	c3                   	ret    
c000e079:	90                   	nop

c000e07a <Video::~Video()>:
c000e07a:	83 ec 0c             	sub    esp,0xc
c000e07d:	83 ec 0c             	sub    esp,0xc
c000e080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e084:	e8 cd ff ff ff       	call   c000e056 <Video::~Video()>
c000e089:	83 c4 10             	add    esp,0x10
c000e08c:	83 ec 08             	sub    esp,0x8
c000e08f:	68 64 01 00 00       	push   0x164
c000e094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e098:	e8 55 ca ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000e09d:	83 c4 10             	add    esp,0x10
c000e0a0:	83 c4 0c             	add    esp,0xc
c000e0a3:	c3                   	ret    

c000e0a4 <Video::isMonochrome()>:
c000e0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e0ae:	c3                   	ret    
c000e0af:	90                   	nop

c000e0b0 <Video::getWidth()>:
c000e0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e0ba:	c3                   	ret    
c000e0bb:	90                   	nop

c000e0bc <Video::getHeight()>:
c000e0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e0c6:	c3                   	ret    
c000e0c7:	90                   	nop

c000e0c8 <Video::drawCursor(int, int, unsigned char*, int)>:
c000e0c8:	55                   	push   ebp
c000e0c9:	57                   	push   edi
c000e0ca:	56                   	push   esi
c000e0cb:	53                   	push   ebx
c000e0cc:	83 ec 2c             	sub    esp,0x2c
c000e0cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e0d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e0d7:	83 f8 01             	cmp    eax,0x1
c000e0da:	19 c9                	sbb    ecx,ecx
c000e0dc:	31 db                	xor    ebx,ebx
c000e0de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e0e2:	89 cd                	mov    ebp,ecx
c000e0e4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e0ec:	f7 d5                	not    ebp
c000e0ee:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0f8:	01 d8                	add    eax,ebx
c000e0fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0fe:	56                   	push   esi
c000e0ff:	e8 b8 ff ff ff       	call   c000e0bc <Video::getHeight()>
c000e104:	59                   	pop    ecx
c000e105:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e109:	7e 70                	jle    c000e17b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e10b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e10f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e113:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e116:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e11a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e11e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e125:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e129:	89 f8                	mov    eax,edi
c000e12b:	83 c0 20             	add    eax,0x20
c000e12e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e132:	56                   	push   esi
c000e133:	e8 78 ff ff ff       	call   c000e0b0 <Video::getWidth()>
c000e138:	5a                   	pop    edx
c000e139:	39 c7                	cmp    edi,eax
c000e13b:	7d 34                	jge    c000e171 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e13d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e142:	74 05                	je     c000e149 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e144:	8b 06                	mov    eax,DWORD PTR [esi]
c000e146:	55                   	push   ebp
c000e147:	eb 0d                	jmp    c000e156 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e149:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e14e:	74 12                	je     c000e162 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e150:	8b 06                	mov    eax,DWORD PTR [esi]
c000e152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e156:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e15a:	57                   	push   edi
c000e15b:	56                   	push   esi
c000e15c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e166:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e16a:	47                   	inc    edi
c000e16b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e16f:	75 c1                	jne    c000e132 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e171:	43                   	inc    ebx
c000e172:	83 fb 20             	cmp    ebx,0x20
c000e175:	0f 85 79 ff ff ff    	jne    c000e0f4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e17b:	83 c4 2c             	add    esp,0x2c
c000e17e:	5b                   	pop    ebx
c000e17f:	5e                   	pop    esi
c000e180:	5f                   	pop    edi
c000e181:	5d                   	pop    ebp
c000e182:	c3                   	ret    
c000e183:	90                   	nop

c000e184 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e184:	55                   	push   ebp
c000e185:	57                   	push   edi
c000e186:	56                   	push   esi
c000e187:	53                   	push   ebx
c000e188:	83 ec 28             	sub    esp,0x28
c000e18b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e18f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e193:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e197:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e19b:	c1 e6 08             	shl    esi,0x8
c000e19e:	01 c6                	add    esi,eax
c000e1a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e1a4:	c1 e0 08             	shl    eax,0x8
c000e1a7:	01 d0                	add    eax,edx
c000e1a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e1ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1b1:	0f af c6             	imul   eax,esi
c000e1b4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e1bb:	50                   	push   eax
c000e1bc:	e8 98 9c ff ff       	call   c0007e59 <malloc>
c000e1c1:	83 c4 10             	add    esp,0x10
c000e1c4:	89 c7                	mov    edi,eax
c000e1c6:	85 c0                	test   eax,eax
c000e1c8:	75 10                	jne    c000e1da <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e1ca:	83 ec 0c             	sub    esp,0xc
c000e1cd:	68 95 e3 01 c0       	push   0xc001e395
c000e1d2:	e8 a0 25 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e1dd:	ba 12 00 00 00       	mov    edx,0x12
c000e1e2:	84 c0                	test   al,al
c000e1e4:	74 11                	je     c000e1f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e1e6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e1ea:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1ee:	c1 fa 03             	sar    edx,0x3
c000e1f1:	0f af d1             	imul   edx,ecx
c000e1f4:	83 c2 12             	add    edx,0x12
c000e1f7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1fb:	74 04                	je     c000e201 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e1fd:	85 f6                	test   esi,esi
c000e1ff:	75 12                	jne    c000e213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e201:	83 ec 0c             	sub    esp,0xc
c000e204:	68 a5 e3 01 c0       	push   0xc001e3a5
c000e209:	e8 da c9 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e20e:	e9 b8 00 00 00       	jmp    c000e2cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e213:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e217:	80 f9 02             	cmp    cl,0x2
c000e21a:	0f 85 96 00 00 00    	jne    c000e2b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e220:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e225:	75 0e                	jne    c000e235 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e227:	84 c0                	test   al,al
c000e229:	75 0a                	jne    c000e235 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e22b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e22e:	83 e8 18             	sub    eax,0x18
c000e231:	a8 f7                	test   al,0xf7
c000e233:	74 0a                	je     c000e23f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e235:	83 ec 0c             	sub    esp,0xc
c000e238:	68 ba e3 01 c0       	push   0xc001e3ba
c000e23d:	eb 7f                	jmp    c000e2be <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e23f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e247:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e24f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e253:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e25b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e25f:	75 0c                	jne    c000e26d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e261:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e266:	c1 e0 18             	shl    eax,0x18
c000e269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e26d:	45                   	inc    ebp
c000e26e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e273:	c1 e1 10             	shl    ecx,0x10
c000e276:	89 c8                	mov    eax,ecx
c000e278:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e27d:	c1 e1 08             	shl    ecx,0x8
c000e280:	09 c1                	or     ecx,eax
c000e282:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e286:	09 c1                	or     ecx,eax
c000e288:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e28c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e290:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e294:	c1 f8 03             	sar    eax,0x3
c000e297:	01 c2                	add    edx,eax
c000e299:	89 e8                	mov    eax,ebp
c000e29b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e29f:	39 c6                	cmp    esi,eax
c000e2a1:	7f b0                	jg     c000e253 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e2a3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e2a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e2ae:	7e 22                	jle    c000e2d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e2b0:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e2b4:	eb 99                	jmp    c000e24f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e2b6:	50                   	push   eax
c000e2b7:	50                   	push   eax
c000e2b8:	51                   	push   ecx
c000e2b9:	68 c8 e3 01 c0       	push   0xc001e3c8
c000e2be:	e8 25 c9 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e2c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e2c6:	e8 9e 9b ff ff       	call   c0007e69 <free>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	31 ff                	xor    edi,edi
c000e2d0:	eb 0f                	jmp    c000e2e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e2d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e2d6:	89 30                	mov    DWORD PTR [eax],esi
c000e2d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2dc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e2df:	89 30                	mov    DWORD PTR [eax],esi
c000e2e1:	83 c4 1c             	add    esp,0x1c
c000e2e4:	89 f8                	mov    eax,edi
c000e2e6:	5b                   	pop    ebx
c000e2e7:	5e                   	pop    esi
c000e2e8:	5f                   	pop    edi
c000e2e9:	5d                   	pop    ebp
c000e2ea:	c3                   	ret    
c000e2eb:	90                   	nop

c000e2ec <Video::putTGA(int, int, unsigned char*, int)>:
c000e2ec:	55                   	push   ebp
c000e2ed:	57                   	push   edi
c000e2ee:	56                   	push   esi
c000e2ef:	53                   	push   ebx
c000e2f0:	83 ec 28             	sub    esp,0x28
c000e2f3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2fb:	50                   	push   eax
c000e2fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e300:	50                   	push   eax
c000e301:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e305:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e309:	56                   	push   esi
c000e30a:	e8 75 fe ff ff       	call   c000e184 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e30f:	83 c4 20             	add    esp,0x20
c000e312:	85 c0                	test   eax,eax
c000e314:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e318:	74 35                	je     c000e34f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e31a:	89 c7                	mov    edi,eax
c000e31c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e320:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e324:	39 d8                	cmp    eax,ebx
c000e326:	7e 27                	jle    c000e34f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e328:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e32c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e330:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e334:	39 e8                	cmp    eax,ebp
c000e336:	7e 14                	jle    c000e34c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e338:	8b 06                	mov    eax,DWORD PTR [esi]
c000e33a:	83 c7 04             	add    edi,0x4
c000e33d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e340:	53                   	push   ebx
c000e341:	55                   	push   ebp
c000e342:	45                   	inc    ebp
c000e343:	56                   	push   esi
c000e344:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e347:	83 c4 10             	add    esp,0x10
c000e34a:	eb e0                	jmp    c000e32c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e34c:	43                   	inc    ebx
c000e34d:	eb cd                	jmp    c000e31c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e34f:	83 c4 1c             	add    esp,0x1c
c000e352:	5b                   	pop    ebx
c000e353:	5e                   	pop    esi
c000e354:	5f                   	pop    edi
c000e355:	5d                   	pop    ebp
c000e356:	c3                   	ret    
c000e357:	90                   	nop

c000e358 <ACPI::close(int, int, void*)>:
c000e358:	83 ec 1c             	sub    esp,0x1c
c000e35b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e363:	74 0b                	je     c000e370 <ACPI::close(int, int, void*)+0x18>
c000e365:	b8 00 00 00 00       	mov    eax,0x0
c000e36a:	e9 9d 00 00 00       	jmp    c000e40c <ACPI::close(int, int, void*)+0xb4>
c000e36f:	90                   	nop
c000e370:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e375:	75 29                	jne    c000e3a0 <ACPI::close(int, int, void*)+0x48>
c000e377:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000e37c:	85 c0                	test   eax,eax
c000e37e:	74 08                	je     c000e388 <ACPI::close(int, int, void*)+0x30>
c000e380:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000e385:	ff d0                	call   eax
c000e387:	90                   	nop
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	68 24 e4 01 c0       	push   0xc001e424
c000e390:	e8 e2 23 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e39d:	eb 6d                	jmp    c000e40c <ACPI::close(int, int, void*)+0xb4>
c000e39f:	90                   	nop
c000e3a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e3a5:	75 5d                	jne    c000e404 <ACPI::close(int, int, void*)+0xac>
c000e3a7:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c000e3ac:	85 c0                	test   eax,eax
c000e3ae:	74 08                	je     c000e3b8 <ACPI::close(int, int, void*)+0x60>
c000e3b0:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c000e3b5:	ff d0                	call   eax
c000e3b7:	90                   	nop
c000e3b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e3c4:	25 ff 00 00 00       	and    eax,0xff
c000e3c9:	83 e0 02             	and    eax,0x2
c000e3cc:	74 1e                	je     c000e3ec <ACPI::close(int, int, void*)+0x94>
c000e3ce:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e3d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d9:	89 c2                	mov    edx,eax
c000e3db:	ec                   	in     al,dx
c000e3dc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e3e0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e3e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e3e8:	eb d6                	jmp    c000e3c0 <ACPI::close(int, int, void*)+0x68>
c000e3ea:	66 90                	xchg   ax,ax
c000e3ec:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3f3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3f8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e400:	ee                   	out    dx,al
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e409:	8d 76 00             	lea    esi,[esi+0x0]
c000e40c:	83 c4 1c             	add    esp,0x1c
c000e40f:	c3                   	ret    

c000e410 <findRSDP()>:
c000e410:	83 ec 1c             	sub    esp,0x1c
c000e413:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e418:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e41e:	83 e0 04             	and    eax,0x4
c000e421:	84 c0                	test   al,al
c000e423:	75 07                	jne    c000e42c <findRSDP()+0x1c>
c000e425:	b8 00 00 00 00       	mov    eax,0x0
c000e42a:	eb 70                	jmp    c000e49c <findRSDP()+0x8c>
c000e42c:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c000e431:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e436:	7f 1c                	jg     c000e454 <findRSDP()+0x44>
c000e438:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e43d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e443:	83 e2 fb             	and    edx,0xfffffffb
c000e446:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e44c:	b8 00 00 00 00       	mov    eax,0x0
c000e451:	eb 49                	jmp    c000e49c <findRSDP()+0x8c>
c000e453:	90                   	nop
c000e454:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e45c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e464:	77 2e                	ja     c000e494 <findRSDP()+0x84>
c000e466:	83 ec 04             	sub    esp,0x4
c000e469:	6a 08                	push   0x8
c000e46b:	68 bf e4 01 c0       	push   0xc001e4bf
c000e470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e474:	e8 37 1f ff ff       	call   c00003b0 <memcmp>
c000e479:	83 c4 10             	add    esp,0x10
c000e47c:	85 c0                	test   eax,eax
c000e47e:	0f 94 c0             	sete   al
c000e481:	84 c0                	test   al,al
c000e483:	74 07                	je     c000e48c <findRSDP()+0x7c>
c000e485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e489:	eb 11                	jmp    c000e49c <findRSDP()+0x8c>
c000e48b:	90                   	nop
c000e48c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e491:	eb c9                	jmp    c000e45c <findRSDP()+0x4c>
c000e493:	90                   	nop
c000e494:	b8 00 00 00 00       	mov    eax,0x0
c000e499:	8d 76 00             	lea    esi,[esi+0x0]
c000e49c:	83 c4 1c             	add    esp,0x1c
c000e49f:	c3                   	ret    

c000e4a0 <loadACPITables(unsigned char*)>:
c000e4a0:	57                   	push   edi
c000e4a1:	56                   	push   esi
c000e4a2:	53                   	push   ebx
c000e4a3:	83 ec 60             	sub    esp,0x60
c000e4a6:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e4ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e4b1:	83 e0 04             	and    eax,0x4
c000e4b4:	84 c0                	test   al,al
c000e4b6:	0f 84 3c 02 00 00    	je     c000e6f8 <loadACPITables(unsigned char*)+0x258>
c000e4bc:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c000e4c1:	84 c0                	test   al,al
c000e4c3:	74 77                	je     c000e53c <loadACPITables(unsigned char*)+0x9c>
c000e4c5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e4cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4d4:	83 e8 24             	sub    eax,0x24
c000e4d7:	c1 e8 03             	shr    eax,0x3
c000e4da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4de:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e4e6:	66 90                	xchg   ax,ax
c000e4e8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4ec:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4f0:	0f 8d b6 00 00 00    	jge    c000e5ac <loadACPITables(unsigned char*)+0x10c>
c000e4f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4fa:	83 c0 24             	add    eax,0x24
c000e4fd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e501:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e505:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e509:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e50d:	c1 e0 03             	shl    eax,0x3
c000e510:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e514:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e51b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e51d:	89 c1                	mov    ecx,eax
c000e51f:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e524:	8d 50 01             	lea    edx,[eax+0x1]
c000e527:	89 15 cc 2f 02 c0    	mov    DWORD PTR ds:0xc0022fcc,edx
c000e52d:	89 ca                	mov    edx,ecx
c000e52f:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e536:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e53a:	eb ac                	jmp    c000e4e8 <loadACPITables(unsigned char*)+0x48>
c000e53c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e540:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e54b:	83 e8 24             	sub    eax,0x24
c000e54e:	c1 e8 02             	shr    eax,0x2
c000e551:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e555:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e55d:	8d 76 00             	lea    esi,[esi+0x0]
c000e560:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e564:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e568:	7d 42                	jge    c000e5ac <loadACPITables(unsigned char*)+0x10c>
c000e56a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e56e:	83 c0 24             	add    eax,0x24
c000e571:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e579:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e57d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e581:	c1 e0 02             	shl    eax,0x2
c000e584:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e58c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e58e:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e593:	8d 50 01             	lea    edx,[eax+0x1]
c000e596:	89 15 cc 2f 02 c0    	mov    DWORD PTR ds:0xc0022fcc,edx
c000e59c:	89 ca                	mov    edx,ecx
c000e59e:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e5a5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e5a9:	eb b5                	jmp    c000e560 <loadACPITables(unsigned char*)+0xc0>
c000e5ab:	90                   	nop
c000e5ac:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e5b4:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e5b9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e5bd:	0f 8d 39 01 00 00    	jge    c000e6fc <loadACPITables(unsigned char*)+0x25c>
c000e5c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5c7:	8b 04 c5 e4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd01c]
c000e5ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5de:	25 ff 0f 00 00       	and    eax,0xfff
c000e5e3:	89 c6                	mov    esi,eax
c000e5e5:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e5eb:	83 ec 0c             	sub    esp,0xc
c000e5ee:	6a 01                	push   0x1
c000e5f0:	e8 a0 b3 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	6a 01                	push   0x1
c000e607:	6a 01                	push   0x1
c000e609:	50                   	push   eax
c000e60a:	52                   	push   edx
c000e60b:	53                   	push   ebx
c000e60c:	e8 13 bd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e611:	83 c4 20             	add    esp,0x20
c000e614:	09 f0                	or     eax,esi
c000e616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e61a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e61e:	c1 e0 03             	shl    eax,0x3
c000e621:	05 e0 2f 02 c0       	add    eax,0xc0022fe0
c000e626:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e62a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e62e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e632:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e63a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e646:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e64a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e64e:	89 c6                	mov    esi,eax
c000e650:	89 d7                	mov    edi,edx
c000e652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e654:	89 c8                	mov    eax,ecx
c000e656:	89 fa                	mov    edx,edi
c000e658:	89 f3                	mov    ebx,esi
c000e65a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e65e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e662:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e666:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e66a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e66d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e675:	05 00 10 00 00       	add    eax,0x1000
c000e67a:	c1 e8 0c             	shr    eax,0xc
c000e67d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e68d:	25 ff 0f 00 00       	and    eax,0xfff
c000e692:	89 c6                	mov    esi,eax
c000e694:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e69a:	83 ec 0c             	sub    esp,0xc
c000e69d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e6a1:	e8 ef b2 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e6a6:	83 c4 10             	add    esp,0x10
c000e6a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6b3:	83 ec 0c             	sub    esp,0xc
c000e6b6:	6a 01                	push   0x1
c000e6b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6bc:	50                   	push   eax
c000e6bd:	52                   	push   edx
c000e6be:	53                   	push   ebx
c000e6bf:	e8 60 bc ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6c4:	83 c4 20             	add    esp,0x20
c000e6c7:	09 f0                	or     eax,esi
c000e6c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	83 ec 0c             	sub    esp,0xc
c000e6d4:	50                   	push   eax
c000e6d5:	e8 eb b5 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e6da:	83 c4 10             	add    esp,0x10
c000e6dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e6e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6e5:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e6ec:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e6f0:	e9 bf fe ff ff       	jmp    c000e5b4 <loadACPITables(unsigned char*)+0x114>
c000e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6f8:	90                   	nop
c000e6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6fc:	83 c4 60             	add    esp,0x60
c000e6ff:	5b                   	pop    ebx
c000e700:	5e                   	pop    esi
c000e701:	5f                   	pop    edi
c000e702:	c3                   	ret    
c000e703:	90                   	nop

c000e704 <findRSDT(unsigned char*)>:
c000e704:	57                   	push   edi
c000e705:	56                   	push   esi
c000e706:	53                   	push   ebx
c000e707:	83 ec 50             	sub    esp,0x50
c000e70a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e70f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e715:	83 e0 04             	and    eax,0x4
c000e718:	84 c0                	test   al,al
c000e71a:	75 0c                	jne    c000e728 <findRSDT(unsigned char*)+0x24>
c000e71c:	b8 00 00 00 00       	mov    eax,0x0
c000e721:	e9 26 01 00 00       	jmp    c000e84c <findRSDT(unsigned char*)+0x148>
c000e726:	66 90                	xchg   ax,ax
c000e728:	89 e0                	mov    eax,esp
c000e72a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e72e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e732:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e736:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e73e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e742:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e74a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e74e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e752:	89 c6                	mov    esi,eax
c000e754:	89 d7                	mov    edi,edx
c000e756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e758:	89 c8                	mov    eax,ecx
c000e75a:	89 fa                	mov    edx,edi
c000e75c:	89 f3                	mov    ebx,esi
c000e75e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e762:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e766:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e76a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e76e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e772:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e77a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e77e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e782:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e78e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e792:	25 ff 0f 00 00       	and    eax,0xfff
c000e797:	89 c6                	mov    esi,eax
c000e799:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e79f:	83 ec 0c             	sub    esp,0xc
c000e7a2:	6a 02                	push   0x2
c000e7a4:	e8 ec b1 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e7b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7b6:	83 ec 0c             	sub    esp,0xc
c000e7b9:	6a 01                	push   0x1
c000e7bb:	6a 02                	push   0x2
c000e7bd:	50                   	push   eax
c000e7be:	52                   	push   edx
c000e7bf:	53                   	push   ebx
c000e7c0:	e8 5f bb ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c5:	83 c4 20             	add    esp,0x20
c000e7c8:	09 f0                	or     eax,esi
c000e7ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e7ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7d2:	25 ff 0f 00 00       	and    eax,0xfff
c000e7d7:	89 c6                	mov    esi,eax
c000e7d9:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e7df:	83 ec 0c             	sub    esp,0xc
c000e7e2:	6a 02                	push   0x2
c000e7e4:	e8 ac b1 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e7e9:	83 c4 10             	add    esp,0x10
c000e7ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7f6:	83 ec 0c             	sub    esp,0xc
c000e7f9:	6a 01                	push   0x1
c000e7fb:	6a 02                	push   0x2
c000e7fd:	50                   	push   eax
c000e7fe:	52                   	push   edx
c000e7ff:	53                   	push   ebx
c000e800:	e8 1f bb ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e805:	83 c4 20             	add    esp,0x20
c000e808:	09 f0                	or     eax,esi
c000e80a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e80e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e813:	75 13                	jne    c000e828 <findRSDT(unsigned char*)+0x124>
c000e815:	c6 05 e0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231e0,0x0
c000e81c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e820:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e824:	eb 22                	jmp    c000e848 <findRSDT(unsigned char*)+0x144>
c000e826:	66 90                	xchg   ax,ax
c000e828:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e82d:	75 11                	jne    c000e840 <findRSDT(unsigned char*)+0x13c>
c000e82f:	c6 05 e0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231e0,0x1
c000e836:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e83a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e83e:	eb 08                	jmp    c000e848 <findRSDT(unsigned char*)+0x144>
c000e840:	b8 00 00 00 00       	mov    eax,0x0
c000e845:	eb 05                	jmp    c000e84c <findRSDT(unsigned char*)+0x148>
c000e847:	90                   	nop
c000e848:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e84c:	83 c4 50             	add    esp,0x50
c000e84f:	5b                   	pop    ebx
c000e850:	5e                   	pop    esi
c000e851:	5f                   	pop    edi
c000e852:	c3                   	ret    
c000e853:	90                   	nop

c000e854 <findDataTable(unsigned char*, char*)>:
c000e854:	83 ec 1c             	sub    esp,0x1c
c000e857:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e85c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e862:	83 e0 04             	and    eax,0x4
c000e865:	84 c0                	test   al,al
c000e867:	75 07                	jne    c000e870 <findDataTable(unsigned char*, char*)+0x1c>
c000e869:	b8 00 00 00 00       	mov    eax,0x0
c000e86e:	eb 58                	jmp    c000e8c8 <findDataTable(unsigned char*, char*)+0x74>
c000e870:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e878:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e87d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e881:	7d 3d                	jge    c000e8c0 <findDataTable(unsigned char*, char*)+0x6c>
c000e883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e887:	c1 e0 03             	shl    eax,0x3
c000e88a:	05 e0 2f 02 c0       	add    eax,0xc0022fe0
c000e88f:	83 ec 04             	sub    esp,0x4
c000e892:	6a 04                	push   0x4
c000e894:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e898:	50                   	push   eax
c000e899:	e8 12 1b ff ff       	call   c00003b0 <memcmp>
c000e89e:	83 c4 10             	add    esp,0x10
c000e8a1:	85 c0                	test   eax,eax
c000e8a3:	0f 94 c0             	sete   al
c000e8a6:	84 c0                	test   al,al
c000e8a8:	74 0e                	je     c000e8b8 <findDataTable(unsigned char*, char*)+0x64>
c000e8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ae:	8b 04 c5 e4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd01c]
c000e8b5:	eb 11                	jmp    c000e8c8 <findDataTable(unsigned char*, char*)+0x74>
c000e8b7:	90                   	nop
c000e8b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8bc:	eb ba                	jmp    c000e878 <findDataTable(unsigned char*, char*)+0x24>
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	b8 00 00 00 00       	mov    eax,0x0
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	83 c4 1c             	add    esp,0x1c
c000e8cb:	c3                   	ret    

c000e8cc <scanMADT()>:
c000e8cc:	53                   	push   ebx
c000e8cd:	83 ec 38             	sub    esp,0x38
c000e8d0:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c000e8d5:	25 00 04 00 00       	and    eax,0x400
c000e8da:	74 14                	je     c000e8f0 <scanMADT()+0x24>
c000e8dc:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e8e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8e7:	83 e2 fb             	and    edx,0xfffffffb
c000e8ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f0:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e8f5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8fb:	83 e0 04             	and    eax,0x4
c000e8fe:	84 c0                	test   al,al
c000e900:	0f 84 8a 04 00 00    	je     c000ed90 <scanMADT()+0x4c4>
c000e906:	e8 05 fb ff ff       	call   c000e410 <findRSDP()>
c000e90b:	a3 ec 31 02 c0       	mov    ds:0xc00231ec,eax
c000e910:	a1 ec 31 02 c0       	mov    eax,ds:0xc00231ec
c000e915:	85 c0                	test   eax,eax
c000e917:	75 1b                	jne    c000e934 <scanMADT()+0x68>
c000e919:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e91e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e924:	83 e2 fb             	and    edx,0xfffffffb
c000e927:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92d:	e9 66 04 00 00       	jmp    c000ed98 <scanMADT()+0x4cc>
c000e932:	66 90                	xchg   ax,ax
c000e934:	a1 ec 31 02 c0       	mov    eax,ds:0xc00231ec
c000e939:	83 ec 0c             	sub    esp,0xc
c000e93c:	50                   	push   eax
c000e93d:	e8 c2 fd ff ff       	call   c000e704 <findRSDT(unsigned char*)>
c000e942:	83 c4 10             	add    esp,0x10
c000e945:	a3 e8 31 02 c0       	mov    ds:0xc00231e8,eax
c000e94a:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e94f:	85 c0                	test   eax,eax
c000e951:	75 19                	jne    c000e96c <scanMADT()+0xa0>
c000e953:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e958:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e95e:	83 e2 fb             	and    edx,0xfffffffb
c000e961:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e967:	e9 2c 04 00 00       	jmp    c000ed98 <scanMADT()+0x4cc>
c000e96c:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e971:	83 ec 0c             	sub    esp,0xc
c000e974:	50                   	push   eax
c000e975:	e8 26 fb ff ff       	call   c000e4a0 <loadACPITables(unsigned char*)>
c000e97a:	83 c4 10             	add    esp,0x10
c000e97d:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e982:	83 ec 08             	sub    esp,0x8
c000e985:	68 c8 e4 01 c0       	push   0xc001e4c8
c000e98a:	50                   	push   eax
c000e98b:	e8 c4 fe ff ff       	call   c000e854 <findDataTable(unsigned char*, char*)>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e997:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e99c:	75 1a                	jne    c000e9b8 <scanMADT()+0xec>
c000e99e:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e9a3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e9a9:	83 e2 fe             	and    edx,0xfffffffe
c000e9ac:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e9b2:	e9 e1 03 00 00       	jmp    c000ed98 <scanMADT()+0x4cc>
c000e9b7:	90                   	nop
c000e9b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e9c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e9cb:	0f 87 c7 03 00 00    	ja     c000ed98 <scanMADT()+0x4cc>
c000e9d1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9d9:	0f 87 b9 03 00 00    	ja     c000ed98 <scanMADT()+0x4cc>
c000e9df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9fa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea02:	8d 50 01             	lea    edx,[eax+0x1]
c000ea05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea0d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea11:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ea15:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000ea1a:	0f 86 74 03 00 00    	jbe    c000ed94 <scanMADT()+0x4c8>
c000ea20:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000ea25:	75 5d                	jne    c000ea84 <scanMADT()+0x1b8>
c000ea27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea2b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea32:	8a 15 e0 33 02 c0    	mov    dl,BYTE PTR ds:0xc00233e0
c000ea38:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea42:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea46:	88 82 20 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcbe0],al
c000ea4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea50:	8d 42 01             	lea    eax,[edx+0x1]
c000ea53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea57:	a0 e0 33 02 c0       	mov    al,ds:0xc00233e0
c000ea5c:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea5f:	88 0d e0 33 02 c0    	mov    BYTE PTR ds:0xc00233e0,cl
c000ea65:	25 ff 00 00 00       	and    eax,0xff
c000ea6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea6e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000ea72:	88 90 00 34 02 c0    	mov    BYTE PTR [eax-0x3ffdcc00],dl
c000ea78:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea7d:	e9 f6 02 00 00       	jmp    c000ed78 <scanMADT()+0x4ac>
c000ea82:	66 90                	xchg   ax,ax
c000ea84:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea89:	0f 85 29 01 00 00    	jne    c000ebb8 <scanMADT()+0x2ec>
c000ea8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea93:	8d 50 01             	lea    edx,[eax+0x1]
c000ea96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea9a:	8a 15 a0 32 02 c0    	mov    dl,BYTE PTR ds:0xc00232a0
c000eaa0:	81 e2 ff 00 00 00    	and    edx,0xff
c000eaa6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eaaa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000eaae:	88 82 c0 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd40],al
c000eab4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000eab8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eabc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac0:	01 d0                	add    eax,edx
c000eac2:	83 c0 2c             	add    eax,0x2c
c000eac5:	8a 00                	mov    al,BYTE PTR [eax]
c000eac7:	31 d2                	xor    edx,edx
c000eac9:	88 c2                	mov    dl,al
c000eacb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eacf:	8d 48 01             	lea    ecx,[eax+0x1]
c000ead2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ead6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eada:	25 ff 00 00 00       	and    eax,0xff
c000eadf:	c1 e0 08             	shl    eax,0x8
c000eae2:	89 d1                	mov    ecx,edx
c000eae4:	09 c1                	or     ecx,eax
c000eae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaea:	8d 50 02             	lea    edx,[eax+0x2]
c000eaed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaf5:	25 ff 00 00 00       	and    eax,0xff
c000eafa:	c1 e0 10             	shl    eax,0x10
c000eafd:	09 c1                	or     ecx,eax
c000eaff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb03:	8d 50 03             	lea    edx,[eax+0x3]
c000eb06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb0e:	25 ff 00 00 00       	and    eax,0xff
c000eb13:	c1 e0 18             	shl    eax,0x18
c000eb16:	09 c1                	or     ecx,eax
c000eb18:	89 ca                	mov    edx,ecx
c000eb1a:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000eb1f:	25 ff 00 00 00       	and    eax,0xff
c000eb24:	89 14 85 e0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd20],edx
c000eb2b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb38:	01 d0                	add    eax,edx
c000eb3a:	83 c0 2c             	add    eax,0x2c
c000eb3d:	8a 00                	mov    al,BYTE PTR [eax]
c000eb3f:	31 d2                	xor    edx,edx
c000eb41:	88 c2                	mov    dl,al
c000eb43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb47:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb4e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb52:	25 ff 00 00 00       	and    eax,0xff
c000eb57:	c1 e0 08             	shl    eax,0x8
c000eb5a:	89 d1                	mov    ecx,edx
c000eb5c:	09 c1                	or     ecx,eax
c000eb5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb62:	8d 50 02             	lea    edx,[eax+0x2]
c000eb65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb69:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb6d:	25 ff 00 00 00       	and    eax,0xff
c000eb72:	c1 e0 10             	shl    eax,0x10
c000eb75:	09 c1                	or     ecx,eax
c000eb77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7b:	8d 50 03             	lea    edx,[eax+0x3]
c000eb7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb82:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb86:	25 ff 00 00 00       	and    eax,0xff
c000eb8b:	c1 e0 18             	shl    eax,0x18
c000eb8e:	09 c1                	or     ecx,eax
c000eb90:	89 ca                	mov    edx,ecx
c000eb92:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000eb97:	25 ff 00 00 00       	and    eax,0xff
c000eb9c:	89 14 85 60 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcca0],edx
c000eba3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eba8:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000ebad:	40                   	inc    eax
c000ebae:	a2 a0 32 02 c0       	mov    ds:0xc00232a0,al
c000ebb3:	e9 c0 01 00 00       	jmp    c000ed78 <scanMADT()+0x4ac>
c000ebb8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000ebbd:	0f 85 fd 00 00 00    	jne    c000ecc0 <scanMADT()+0x3f4>
c000ebc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc7:	8d 50 01             	lea    edx,[eax+0x1]
c000ebca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebd2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebd6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ebda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebde:	8d 50 01             	lea    edx,[eax+0x1]
c000ebe1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebe5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebe9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf9:	01 d0                	add    eax,edx
c000ebfb:	83 c0 2c             	add    eax,0x2c
c000ebfe:	8a 00                	mov    al,BYTE PTR [eax]
c000ec00:	31 d2                	xor    edx,edx
c000ec02:	88 c2                	mov    dl,al
c000ec04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec08:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec0f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec13:	25 ff 00 00 00       	and    eax,0xff
c000ec18:	c1 e0 08             	shl    eax,0x8
c000ec1b:	89 d1                	mov    ecx,edx
c000ec1d:	09 c1                	or     ecx,eax
c000ec1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec23:	8d 50 02             	lea    edx,[eax+0x2]
c000ec26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec2e:	25 ff 00 00 00       	and    eax,0xff
c000ec33:	c1 e0 10             	shl    eax,0x10
c000ec36:	09 c1                	or     ecx,eax
c000ec38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3c:	8d 50 03             	lea    edx,[eax+0x3]
c000ec3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec47:	25 ff 00 00 00       	and    eax,0xff
c000ec4c:	c1 e0 18             	shl    eax,0x18
c000ec4f:	09 c8                	or     eax,ecx
c000ec51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec55:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec62:	01 d0                	add    eax,edx
c000ec64:	83 c0 2c             	add    eax,0x2c
c000ec67:	8a 00                	mov    al,BYTE PTR [eax]
c000ec69:	25 ff 00 00 00       	and    eax,0xff
c000ec6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec72:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec79:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec7d:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec83:	c1 e2 08             	shl    edx,0x8
c000ec86:	09 d0                	or     eax,edx
c000ec88:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec8d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec92:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec96:	25 ff 00 00 00       	and    eax,0xff
c000ec9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec9f:	88 90 40 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe06c0],dl
c000eca5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000eca9:	31 d2                	xor    edx,edx
c000ecab:	88 c2                	mov    dl,al
c000ecad:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ecb2:	66 89 84 12 80 32 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcd80],ax
c000ecba:	e9 b9 00 00 00       	jmp    c000ed78 <scanMADT()+0x4ac>
c000ecbf:	90                   	nop
c000ecc0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ecc5:	0f 85 a1 00 00 00    	jne    c000ed6c <scanMADT()+0x4a0>
c000eccb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eccf:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecda:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecde:	25 ff 00 00 00       	and    eax,0xff
c000ece3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ece7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecef:	01 d0                	add    eax,edx
c000ecf1:	83 c0 2c             	add    eax,0x2c
c000ecf4:	8a 00                	mov    al,BYTE PTR [eax]
c000ecf6:	31 d2                	xor    edx,edx
c000ecf8:	88 c2                	mov    dl,al
c000ecfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecfe:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed05:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed09:	25 ff 00 00 00       	and    eax,0xff
c000ed0e:	c1 e0 08             	shl    eax,0x8
c000ed11:	09 d0                	or     eax,edx
c000ed13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ed17:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ed1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed20:	8d 50 01             	lea    edx,[eax+0x1]
c000ed23:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ed27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed2b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ed2f:	25 ff 00 00 00       	and    eax,0xff
c000ed34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3c:	c1 e0 08             	shl    eax,0x8
c000ed3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ed43:	89 c1                	mov    ecx,eax
c000ed45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed49:	c1 e0 18             	shl    eax,0x18
c000ed4c:	89 c3                	mov    ebx,eax
c000ed4e:	a1 f0 31 02 c0       	mov    eax,ds:0xc00231f0
c000ed53:	8d 50 01             	lea    edx,[eax+0x1]
c000ed56:	89 15 f0 31 02 c0    	mov    DWORD PTR ds:0xc00231f0,edx
c000ed5c:	09 d9                	or     ecx,ebx
c000ed5e:	89 ca                	mov    edx,ecx
c000ed60:	89 14 85 00 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce00],edx
c000ed67:	eb 0f                	jmp    c000ed78 <scanMADT()+0x4ac>
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]
c000ed6c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ed71:	75 05                	jne    c000ed78 <scanMADT()+0x4ac>
c000ed73:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed78:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ed7c:	31 d2                	xor    edx,edx
c000ed7e:	88 c2                	mov    dl,al
c000ed80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed84:	01 d0                	add    eax,edx
c000ed86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed8a:	e9 31 fc ff ff       	jmp    c000e9c0 <scanMADT()+0xf4>
c000ed8f:	90                   	nop
c000ed90:	90                   	nop
c000ed91:	eb 05                	jmp    c000ed98 <scanMADT()+0x4cc>
c000ed93:	90                   	nop
c000ed94:	90                   	nop
c000ed95:	8d 76 00             	lea    esi,[esi+0x0]
c000ed98:	83 c4 38             	add    esp,0x38
c000ed9b:	5b                   	pop    ebx
c000ed9c:	c3                   	ret    
c000ed9d:	90                   	nop
c000ed9e:	66 90                	xchg   ax,ax

c000eda0 <ACPI::ACPI()>:
c000eda0:	83 ec 0c             	sub    esp,0xc
c000eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda7:	83 ec 08             	sub    esp,0x8
c000edaa:	68 cd e4 01 c0       	push   0xc001e4cd
c000edaf:	50                   	push   eax
c000edb0:	e8 0b d4 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000edb5:	83 c4 10             	add    esp,0x10
c000edb8:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c000edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edc1:	89 10                	mov    DWORD PTR [eax],edx
c000edc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000edce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ede0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000edea:	e8 dd fa ff ff       	call   c000e8cc <scanMADT()>
c000edef:	90                   	nop
c000edf0:	83 c4 0c             	add    esp,0xc
c000edf3:	c3                   	ret    

c000edf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000edf4:	83 ec 2c             	sub    esp,0x2c
c000edf7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000edfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ee03:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ee07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee0c:	88 d0                	mov    al,dl
c000ee0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ee17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ee1f:	90                   	nop
c000ee20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ee2e:	0f 8d 9c 00 00 00    	jge    c000eed0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000ee34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee3c:	83 c2 2a             	add    edx,0x2a
c000ee3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ee43:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ee48:	75 7a                	jne    c000eec4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee52:	83 c2 2a             	add    edx,0x2a
c000ee55:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee59:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ee5d:	75 65                	jne    c000eec4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ee64:	74 3a                	je     c000eea0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ee66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee6e:	83 c2 2a             	add    edx,0x2a
c000ee71:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee7c:	39 c2                	cmp    edx,eax
c000ee7e:	74 10                	je     c000ee90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	68 48 e4 01 c0       	push   0xc001e448
c000ee88:	e8 ea 18 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	68 d2 e4 01 c0       	push   0xc001e4d2
c000ee98:	e8 da 18 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eea8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eeac:	83 c2 2a             	add    edx,0x2a
c000eeaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000eeb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000eeb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000eeb8:	89 01                	mov    DWORD PTR [ecx],eax
c000eeba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000eebd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eec2:	66 90                	xchg   ax,ax
c000eec4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eec8:	e9 53 ff ff ff       	jmp    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000eecd:	8d 76 00             	lea    esi,[esi+0x0]
c000eed0:	90                   	nop
c000eed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed5:	83 c4 2c             	add    esp,0x2c
c000eed8:	c2 04 00             	ret    0x4
c000eedb:	90                   	nop

c000eedc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eedc:	83 ec 1c             	sub    esp,0x1c
c000eedf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eee3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eee7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eef0:	88 c8                	mov    al,cl
c000eef2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eef6:	88 d0                	mov    al,dl
c000eef8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eefc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ef11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ef15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ef23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ef26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ef2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ef3d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef44:	83 c2 2a             	add    edx,0x2a
c000ef47:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef59:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef60:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef68:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef6e:	8d 50 01             	lea    edx,[eax+0x1]
c000ef71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef75:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef7f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef85:	3d 00 02 00 00       	cmp    eax,0x200
c000ef8a:	75 10                	jne    c000ef9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef8c:	83 ec 0c             	sub    esp,0xc
c000ef8f:	68 e1 e4 01 c0       	push   0xc001e4e1
c000ef94:	e8 de 17 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000ef99:	83 c4 10             	add    esp,0x10
c000ef9c:	90                   	nop
c000ef9d:	83 c4 1c             	add    esp,0x1c
c000efa0:	c3                   	ret    
c000efa1:	90                   	nop
c000efa2:	66 90                	xchg   ax,ax

c000efa4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000efa4:	b8 00 00 00 00       	mov    eax,0x0
c000efa9:	c3                   	ret    
c000efaa:	66 90                	xchg   ax,ax

c000efac <ACPI::detectPCI()>:
c000efac:	53                   	push   ebx
c000efad:	83 ec 28             	sub    esp,0x28
c000efb0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000efb5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000efba:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000efbf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efc5:	83 e0 04             	and    eax,0x4
c000efc8:	84 c0                	test   al,al
c000efca:	74 2c                	je     c000eff8 <ACPI::detectPCI()+0x4c>
c000efcc:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000efd1:	83 ec 08             	sub    esp,0x8
c000efd4:	68 fe e4 01 c0       	push   0xc001e4fe
c000efd9:	50                   	push   eax
c000efda:	e8 75 f8 ff ff       	call   c000e854 <findDataTable(unsigned char*, char*)>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efe6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efeb:	74 0b                	je     c000eff8 <ACPI::detectPCI()+0x4c>
c000efed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eff7:	90                   	nop
c000eff8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f000:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f004:	8a 00                	mov    al,BYTE PTR [eax]
c000f006:	3c 01                	cmp    al,0x1
c000f008:	75 0e                	jne    c000f018 <ACPI::detectPCI()+0x6c>
c000f00a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f00f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f014:	eb 2a                	jmp    c000f040 <ACPI::detectPCI()+0x94>
c000f016:	66 90                	xchg   ax,ax
c000f018:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f01c:	8a 00                	mov    al,BYTE PTR [eax]
c000f01e:	3c 02                	cmp    al,0x2
c000f020:	75 1e                	jne    c000f040 <ACPI::detectPCI()+0x94>
c000f022:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f027:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f02c:	74 12                	je     c000f040 <ACPI::detectPCI()+0x94>
c000f02e:	83 ec 0c             	sub    esp,0xc
c000f031:	68 78 e4 01 c0       	push   0xc001e478
c000f036:	e8 3c 17 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	66 90                	xchg   ax,ax
c000f040:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f044:	83 f0 01             	xor    eax,0x1
c000f047:	84 c0                	test   al,al
c000f049:	74 41                	je     c000f08c <ACPI::detectPCI()+0xe0>
c000f04b:	e8 00 11 ff ff       	call   c0000150 <manualPCIProbe>
c000f050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f054:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f059:	75 0d                	jne    c000f068 <ACPI::detectPCI()+0xbc>
c000f05b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f060:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f065:	eb 25                	jmp    c000f08c <ACPI::detectPCI()+0xe0>
c000f067:	90                   	nop
c000f068:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f06d:	75 1d                	jne    c000f08c <ACPI::detectPCI()+0xe0>
c000f06f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f074:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f079:	74 11                	je     c000f08c <ACPI::detectPCI()+0xe0>
c000f07b:	83 ec 0c             	sub    esp,0xc
c000f07e:	68 78 e4 01 c0       	push   0xc001e478
c000f083:	e8 ef 16 00 00       	call   c0010777 <Krnl::panic(char const*)>
c000f088:	83 c4 10             	add    esp,0x10
c000f08b:	90                   	nop
c000f08c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f091:	0f 84 85 00 00 00    	je     c000f11c <ACPI::detectPCI()+0x170>
c000f097:	83 ec 0c             	sub    esp,0xc
c000f09a:	68 03 e5 01 c0       	push   0xc001e503
c000f09f:	e8 0f 8e ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f0a4:	83 c4 10             	add    esp,0x10
c000f0a7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f0af:	83 ec 0c             	sub    esp,0xc
c000f0b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0b6:	e8 9e 8d ff ff       	call   c0007e59 <malloc>
c000f0bb:	83 c4 10             	add    esp,0x10
c000f0be:	89 c3                	mov    ebx,eax
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	53                   	push   ebx
c000f0c4:	e8 dd 94 00 00       	call   c00185a6 <PCI::PCI()>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0d4:	83 ec 08             	sub    esp,0x8
c000f0d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0db:	50                   	push   eax
c000f0dc:	e8 47 cf ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ea:	83 c0 08             	add    eax,0x8
c000f0ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f0f4:	74 0a                	je     c000f100 <ACPI::detectPCI()+0x154>
c000f0f6:	ba 01 00 00 00       	mov    edx,0x1
c000f0fb:	eb 0b                	jmp    c000f108 <ACPI::detectPCI()+0x15c>
c000f0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f100:	ba 02 00 00 00       	mov    edx,0x2
c000f105:	8d 76 00             	lea    esi,[esi+0x0]
c000f108:	6a 00                	push   0x0
c000f10a:	6a 00                	push   0x0
c000f10c:	52                   	push   edx
c000f10d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f111:	ff d0                	call   eax
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	e9 91 00 00 00       	jmp    c000f1ac <ACPI::detectPCI()+0x200>
c000f11b:	90                   	nop
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	68 1b e5 01 c0       	push   0xc001e51b
c000f124:	e8 8a 8d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f129:	83 c4 10             	add    esp,0x10
c000f12c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f133:	83 ec 0c             	sub    esp,0xc
c000f136:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f13a:	e8 1a 8d ff ff       	call   c0007e59 <malloc>
c000f13f:	83 c4 10             	add    esp,0x10
c000f142:	89 c3                	mov    ebx,eax
c000f144:	83 ec 0c             	sub    esp,0xc
c000f147:	53                   	push   ebx
c000f148:	e8 85 9f 00 00       	call   c00190d2 <IDE::IDE()>
c000f14d:	83 c4 10             	add    esp,0x10
c000f150:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f154:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f158:	83 ec 08             	sub    esp,0x8
c000f15b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f15f:	50                   	push   eax
c000f160:	e8 c3 ce ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f165:	83 c4 10             	add    esp,0x10
c000f168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f16c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f176:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f17a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f183:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f187:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f194:	8b 00                	mov    eax,DWORD PTR [eax]
c000f196:	83 c0 08             	add    eax,0x8
c000f199:	8b 00                	mov    eax,DWORD PTR [eax]
c000f19b:	6a 00                	push   0x0
c000f19d:	6a 00                	push   0x0
c000f19f:	6a 00                	push   0x0
c000f1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f1a5:	ff d0                	call   eax
c000f1a7:	83 c4 10             	add    esp,0x10
c000f1aa:	66 90                	xchg   ax,ax
c000f1ac:	90                   	nop
c000f1ad:	83 c4 28             	add    esp,0x28
c000f1b0:	5b                   	pop    ebx
c000f1b1:	c3                   	ret    
c000f1b2:	66 90                	xchg   ax,ax

c000f1b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f1b4:	83 ec 1c             	sub    esp,0x1c
c000f1b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f1be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f1c2:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000f1c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1cc:	25 ff 00 00 00       	and    eax,0xff
c000f1d1:	83 ec 08             	sub    esp,0x8
c000f1d4:	50                   	push   eax
c000f1d5:	52                   	push   edx
c000f1d6:	e8 6f 83 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c000f1db:	83 c4 10             	add    esp,0x10
c000f1de:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1e2:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000f1e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1ec:	25 ff 00 00 00       	and    eax,0xff
c000f1f1:	83 ec 04             	sub    esp,0x4
c000f1f4:	6a 01                	push   0x1
c000f1f6:	50                   	push   eax
c000f1f7:	52                   	push   edx
c000f1f8:	e8 63 84 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1fd:	83 c4 10             	add    esp,0x10
c000f200:	90                   	nop
c000f201:	83 c4 1c             	add    esp,0x1c
c000f204:	c3                   	ret    
c000f205:	90                   	nop
c000f206:	66 90                	xchg   ax,ax

c000f208 <ACPI::sleep()>:
c000f208:	83 ec 0c             	sub    esp,0xc
c000f20b:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c000f210:	85 c0                	test   eax,eax
c000f212:	74 08                	je     c000f21c <ACPI::sleep()+0x14>
c000f214:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c000f219:	ff d0                	call   eax
c000f21b:	90                   	nop
c000f21c:	90                   	nop
c000f21d:	83 c4 0c             	add    esp,0xc
c000f220:	c3                   	ret    
c000f221:	90                   	nop
c000f222:	66 90                	xchg   ax,ax

c000f224 <ACPI::open(int, int, void*)>:
c000f224:	57                   	push   edi
c000f225:	56                   	push   esi
c000f226:	53                   	push   ebx
c000f227:	81 ec 70 01 00 00    	sub    esp,0x170
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f237:	e8 70 fd ff ff       	call   c000efac <ACPI::detectPCI()>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	83 ec 0c             	sub    esp,0xc
c000f242:	68 a0 e4 01 c0       	push   0xc001e4a0
c000f247:	e8 67 8c ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f24c:	83 c4 10             	add    esp,0x10
c000f24f:	83 ec 0c             	sub    esp,0xc
c000f252:	68 30 e5 01 c0       	push   0xc001e530
c000f257:	e8 07 34 00 00       	call   c0012663 <Thr::loadKernelSymbolTable(char const*)>
c000f25c:	83 c4 10             	add    esp,0x10
c000f25f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f267:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f272:	83 ec 0c             	sub    esp,0xc
c000f275:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f27c:	e8 d8 8b ff ff       	call   c0007e59 <malloc>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	89 c3                	mov    ebx,eax
c000f286:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000f28b:	83 ec 04             	sub    esp,0x4
c000f28e:	50                   	push   eax
c000f28f:	68 4e e5 01 c0       	push   0xc001e54e
c000f294:	53                   	push   ebx
c000f295:	e8 c4 be ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f29a:	83 c4 10             	add    esp,0x10
c000f29d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f2a4:	83 ec 08             	sub    esp,0x8
c000f2a7:	6a 01                	push   0x1
c000f2a9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2b0:	e8 69 bf ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000f2b5:	83 c4 10             	add    esp,0x10
c000f2b8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f2bf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f2c7:	75 17                	jne    c000f2e0 <ACPI::open(int, int, void*)+0xbc>
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2d3:	e8 a4 bf ff ff       	call   c000b27c <File::close()>
c000f2d8:	83 c4 10             	add    esp,0x10
c000f2db:	eb 0b                	jmp    c000f2e8 <ACPI::open(int, int, void*)+0xc4>
c000f2dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2e8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2f0:	74 1e                	je     c000f310 <ACPI::open(int, int, void*)+0xec>
c000f2f2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2fb:	83 c0 08             	add    eax,0x8
c000f2fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f300:	83 ec 0c             	sub    esp,0xc
c000f303:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f30a:	ff d0                	call   eax
c000f30c:	83 c4 10             	add    esp,0x10
c000f30f:	90                   	nop
c000f310:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f317:	83 f0 01             	xor    eax,0x1
c000f31a:	84 c0                	test   al,al
c000f31c:	74 42                	je     c000f360 <ACPI::open(int, int, void*)+0x13c>
c000f31e:	83 ec 0c             	sub    esp,0xc
c000f321:	68 6c e5 01 c0       	push   0xc001e56c
c000f326:	e8 88 8b ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f32b:	83 c4 10             	add    esp,0x10
c000f32e:	83 ec 04             	sub    esp,0x4
c000f331:	6a 0c                	push   0xc
c000f333:	68 87 e5 01 c0       	push   0xc001e587
c000f338:	68 98 e5 01 c0       	push   0xc001e598
c000f33d:	e8 20 1b 00 00       	call   c0010e62 <Reg::readIntWithDefault(char*, char*, int)>
c000f342:	83 c4 10             	add    esp,0x10
c000f345:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f34c:	83 ec 0c             	sub    esp,0xc
c000f34f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f356:	e8 44 a8 ff ff       	call   c0009b9f <Virt::setupPageSwapping(int)>
c000f35b:	83 c4 10             	add    esp,0x10
c000f35e:	66 90                	xchg   ax,ax
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	68 20 d6 01 c0       	push   0xc001d620
c000f368:	e8 46 8b ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f36d:	83 c4 10             	add    esp,0x10
c000f370:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f377:	83 ec 08             	sub    esp,0x8
c000f37a:	6a 12                	push   0x12
c000f37c:	50                   	push   eax
c000f37d:	e8 be cf ff ff       	call   c000c340 <getDevicesOfType(DeviceType)>
c000f382:	83 c4 0c             	add    esp,0xc
c000f385:	8d 76 00             	lea    esi,[esi+0x0]
c000f388:	83 ec 0c             	sub    esp,0xc
c000f38b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f392:	50                   	push   eax
c000f393:	e8 84 d6 00 00       	call   c001ca1c <LinkedList<Device>::isEmpty()>
c000f398:	83 c4 10             	add    esp,0x10
c000f39b:	83 f0 01             	xor    eax,0x1
c000f39e:	84 c0                	test   al,al
c000f3a0:	0f 84 46 01 00 00    	je     c000f4ec <ACPI::open(int, int, void*)+0x2c8>
c000f3a6:	83 ec 0c             	sub    esp,0xc
c000f3a9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3b0:	50                   	push   eax
c000f3b1:	e8 82 d6 00 00       	call   c001ca38 <LinkedList<Device>::getFirstElement()>
c000f3b6:	83 c4 10             	add    esp,0x10
c000f3b9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f3c0:	83 ec 0c             	sub    esp,0xc
c000f3c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3ca:	50                   	push   eax
c000f3cb:	e8 70 d6 00 00       	call   c001ca40 <LinkedList<Device>::removeFirst()>
c000f3d0:	83 c4 10             	add    esp,0x10
c000f3d3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3da:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3e1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3ec:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3f2:	ba 09 00 00 00       	mov    edx,0x9
c000f3f7:	fc                   	cld    
c000f3f8:	89 c7                	mov    edi,eax
c000f3fa:	89 de                	mov    esi,ebx
c000f3fc:	89 d1                	mov    ecx,edx
c000f3fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f400:	83 ec 08             	sub    esp,0x8
c000f403:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f407:	50                   	push   eax
c000f408:	83 ec 24             	sub    esp,0x24
c000f40b:	89 e0                	mov    eax,esp
c000f40d:	89 c3                	mov    ebx,eax
c000f40f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f413:	ba 09 00 00 00       	mov    edx,0x9
c000f418:	89 df                	mov    edi,ebx
c000f41a:	89 c6                	mov    esi,eax
c000f41c:	89 d1                	mov    ecx,edx
c000f41e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f420:	e8 63 96 00 00       	call   c0018a88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f425:	83 c4 30             	add    esp,0x30
c000f428:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f42f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f437:	0f 84 4b ff ff ff    	je     c000f388 <ACPI::open(int, int, void*)+0x164>
c000f43d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f452:	e8 02 8a ff ff       	call   c0007e59 <malloc>
c000f457:	83 c4 10             	add    esp,0x10
c000f45a:	89 c3                	mov    ebx,eax
c000f45c:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000f461:	83 ec 04             	sub    esp,0x4
c000f464:	50                   	push   eax
c000f465:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f46c:	53                   	push   ebx
c000f46d:	e8 ec bc ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f486:	e8 01 c0 ff ff       	call   c000b48c <File::exists()>
c000f48b:	83 c4 10             	add    esp,0x10
c000f48e:	84 c0                	test   al,al
c000f490:	74 2a                	je     c000f4bc <ACPI::open(int, int, void*)+0x298>
c000f492:	83 ec 08             	sub    esp,0x8
c000f495:	6a 01                	push   0x1
c000f497:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f49e:	e8 37 3c 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	83 ec 08             	sub    esp,0x8
c000f4a9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4b0:	50                   	push   eax
c000f4b1:	e8 55 3e 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4bc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f4c4:	0f 84 be fe ff ff    	je     c000f388 <ACPI::open(int, int, void*)+0x164>
c000f4ca:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d3:	83 c0 08             	add    eax,0x8
c000f4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d8:	83 ec 0c             	sub    esp,0xc
c000f4db:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4e2:	ff d0                	call   eax
c000f4e4:	83 c4 10             	add    esp,0x10
c000f4e7:	e9 9c fe ff ff       	jmp    c000f388 <ACPI::open(int, int, void*)+0x164>
c000f4ec:	83 ec 0c             	sub    esp,0xc
c000f4ef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4f6:	50                   	push   eax
c000f4f7:	e8 1c d5 00 00       	call   c001ca18 <LinkedList<Device>::~LinkedList()>
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000f505:	83 ec 08             	sub    esp,0x8
c000f508:	6a 01                	push   0x1
c000f50a:	68 9f e5 01 c0       	push   0xc001e59f
c000f50f:	e8 c6 3b 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	83 ec 08             	sub    esp,0x8
c000f51a:	53                   	push   ebx
c000f51b:	50                   	push   eax
c000f51c:	e8 ea 3d 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000f521:	83 c4 10             	add    esp,0x10
c000f524:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000f529:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f52f:	83 e0 04             	and    eax,0x4
c000f532:	84 c0                	test   al,al
c000f534:	0f 84 16 01 00 00    	je     c000f650 <ACPI::open(int, int, void*)+0x42c>
c000f53a:	83 ec 0c             	sub    esp,0xc
c000f53d:	68 bc e5 01 c0       	push   0xc001e5bc
c000f542:	e8 6c 89 ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f547:	83 c4 10             	add    esp,0x10
c000f54a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f55f:	e8 f5 88 ff ff       	call   c0007e59 <malloc>
c000f564:	83 c4 10             	add    esp,0x10
c000f567:	89 c3                	mov    ebx,eax
c000f569:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000f56e:	83 ec 04             	sub    esp,0x4
c000f571:	50                   	push   eax
c000f572:	68 d9 e5 01 c0       	push   0xc001e5d9
c000f577:	53                   	push   ebx
c000f578:	e8 e1 bb ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f587:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f58f:	74 1b                	je     c000f5ac <ACPI::open(int, int, void*)+0x388>
c000f591:	83 ec 0c             	sub    esp,0xc
c000f594:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f59b:	e8 ec be ff ff       	call   c000b48c <File::exists()>
c000f5a0:	83 c4 10             	add    esp,0x10
c000f5a3:	84 c0                	test   al,al
c000f5a5:	74 05                	je     c000f5ac <ACPI::open(int, int, void*)+0x388>
c000f5a7:	b0 01                	mov    al,0x1
c000f5a9:	eb 05                	jmp    c000f5b0 <ACPI::open(int, int, void*)+0x38c>
c000f5ab:	90                   	nop
c000f5ac:	b0 00                	mov    al,0x0
c000f5ae:	66 90                	xchg   ax,ax
c000f5b0:	84 c0                	test   al,al
c000f5b2:	74 28                	je     c000f5dc <ACPI::open(int, int, void*)+0x3b8>
c000f5b4:	83 ec 08             	sub    esp,0x8
c000f5b7:	6a 01                	push   0x1
c000f5b9:	68 d9 e5 01 c0       	push   0xc001e5d9
c000f5be:	e8 17 3b 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c000f5c3:	83 c4 10             	add    esp,0x10
c000f5c6:	83 ec 08             	sub    esp,0x8
c000f5c9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f5d0:	50                   	push   eax
c000f5d1:	e8 35 3d 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c000f5d6:	83 c4 10             	add    esp,0x10
c000f5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5dc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5e4:	74 2a                	je     c000f610 <ACPI::open(int, int, void*)+0x3ec>
c000f5e6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5ee:	74 20                	je     c000f610 <ACPI::open(int, int, void*)+0x3ec>
c000f5f0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f9:	83 c0 08             	add    eax,0x8
c000f5fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5fe:	83 ec 0c             	sub    esp,0xc
c000f601:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f608:	ff d0                	call   eax
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	8d 76 00             	lea    esi,[esi+0x0]
c000f610:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000f615:	83 ec 08             	sub    esp,0x8
c000f618:	68 f6 e5 01 c0       	push   0xc001e5f6
c000f61d:	50                   	push   eax
c000f61e:	e8 31 f2 ff ff       	call   c000e854 <findDataTable(unsigned char*, char*)>
c000f623:	83 c4 10             	add    esp,0x10
c000f626:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f62d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f635:	74 19                	je     c000f650 <ACPI::open(int, int, void*)+0x42c>
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f641:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f648:	e8 67 fb ff ff       	call   c000f1b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f64d:	83 c4 10             	add    esp,0x10
c000f650:	b8 00 00 00 00       	mov    eax,0x0
c000f655:	81 c4 70 01 00 00    	add    esp,0x170
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    
c000f65f:	90                   	nop

c000f660 <CPU::close(int, int, void*)>:
c000f660:	31 c0                	xor    eax,eax
c000f662:	c3                   	ret    
c000f663:	90                   	nop

c000f664 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f664:	60                   	pusha  
c000f665:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f669:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f66d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f671:	9c                   	pushf  
c000f672:	fa                   	cli    
c000f673:	0f 09                	wbinvd 
c000f675:	0f 30                	wrmsr  
c000f677:	9d                   	popf   
c000f678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f67c:	89 02                	mov    DWORD PTR [edx],eax
c000f67e:	61                   	popa   
c000f67f:	c3                   	ret    

c000f680 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f680:	60                   	pusha  
c000f681:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f685:	9c                   	pushf  
c000f686:	fa                   	cli    
c000f687:	0f 09                	wbinvd 
c000f689:	31 c0                	xor    eax,eax
c000f68b:	31 d2                	xor    edx,edx
c000f68d:	0f 32                	rdmsr  
c000f68f:	9d                   	popf   
c000f690:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f694:	89 02                	mov    DWORD PTR [edx],eax
c000f696:	61                   	popa   
c000f697:	c3                   	ret    

c000f698 <CPU::AMD_K6_writeback(int, int, int)>:
c000f698:	56                   	push   esi
c000f699:	53                   	push   ebx
c000f69a:	83 ec 10             	sub    esp,0x10
c000f69d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f6a6:	75 5d                	jne    c000f705 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6a8:	83 f8 08             	cmp    eax,0x8
c000f6ab:	75 09                	jne    c000f6b6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f6ad:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f6b2:	7e 13                	jle    c000f6c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6b4:	eb 30                	jmp    c000f6e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6b6:	83 f8 06             	cmp    eax,0x6
c000f6b9:	7c 4a                	jl     c000f705 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6bb:	83 f8 07             	cmp    eax,0x7
c000f6be:	7e 07                	jle    c000f6c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6c0:	83 f8 09             	cmp    eax,0x9
c000f6c3:	74 21                	je     c000f6e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6c5:	eb 3e                	jmp    c000f705 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6c7:	89 e6                	mov    esi,esp
c000f6c9:	8b 1d fc 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209fc
c000f6cf:	56                   	push   esi
c000f6d0:	c1 eb 15             	shr    ebx,0x15
c000f6d3:	68 82 00 00 c0       	push   0xc0000082
c000f6d8:	83 e3 7e             	and    ebx,0x7e
c000f6db:	e8 a0 ff ff ff       	call   c000f680 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6e0:	56                   	push   esi
c000f6e1:	6a 00                	push   0x0
c000f6e3:	53                   	push   ebx
c000f6e4:	eb 12                	jmp    c000f6f8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f6e6:	89 e3                	mov    ebx,esp
c000f6e8:	53                   	push   ebx
c000f6e9:	68 82 00 00 c0       	push   0xc0000082
c000f6ee:	e8 8d ff ff ff       	call   c000f680 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6f3:	53                   	push   ebx
c000f6f4:	6a 00                	push   0x0
c000f6f6:	6a 00                	push   0x0
c000f6f8:	68 82 00 00 c0       	push   0xc0000082
c000f6fd:	e8 62 ff ff ff       	call   c000f664 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f702:	83 c4 18             	add    esp,0x18
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	5b                   	pop    ebx
c000f709:	5e                   	pop    esi
c000f70a:	c3                   	ret    
c000f70b:	90                   	nop

c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f70c:	55                   	push   ebp
c000f70d:	57                   	push   edi
c000f70e:	56                   	push   esi
c000f70f:	53                   	push   ebx
c000f710:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f714:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f718:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f71c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f720:	39 05 50 f9 01 c0    	cmp    DWORD PTR ds:0xc001f950,eax
c000f726:	75 23                	jne    c000f74b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f728:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000f72d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f731:	89 06                	mov    DWORD PTR [esi],eax
c000f733:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000f738:	89 07                	mov    DWORD PTR [edi],eax
c000f73a:	a1 44 34 02 c0       	mov    eax,ds:0xc0023444
c000f73f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f742:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c000f747:	89 02                	mov    DWORD PTR [edx],eax
c000f749:	eb 3f                	jmp    c000f78a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f74b:	31 c9                	xor    ecx,ecx
c000f74d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f751:	0f a2                	cpuid  
c000f753:	89 06                	mov    DWORD PTR [esi],eax
c000f755:	89 1f                	mov    DWORD PTR [edi],ebx
c000f757:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f75b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f75e:	89 10                	mov    DWORD PTR [eax],edx
c000f760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f764:	a3 50 f9 01 c0       	mov    ds:0xc001f950,eax
c000f769:	8b 06                	mov    eax,DWORD PTR [esi]
c000f76b:	a3 4c 34 02 c0       	mov    ds:0xc002344c,eax
c000f770:	8b 07                	mov    eax,DWORD PTR [edi]
c000f772:	a3 48 34 02 c0       	mov    ds:0xc0023448,eax
c000f777:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f77a:	a3 44 34 02 c0       	mov    ds:0xc0023444,eax
c000f77f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f783:	8b 00                	mov    eax,DWORD PTR [eax]
c000f785:	a3 40 34 02 c0       	mov    ds:0xc0023440,eax
c000f78a:	5b                   	pop    ebx
c000f78b:	5e                   	pop    esi
c000f78c:	5f                   	pop    edi
c000f78d:	5d                   	pop    ebp
c000f78e:	c3                   	ret    
c000f78f:	90                   	nop

c000f790 <CPU::cpuidCheckEDX(unsigned int)>:
c000f790:	83 ec 10             	sub    esp,0x10
c000f793:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f797:	50                   	push   eax
c000f798:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79c:	50                   	push   eax
c000f79d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a1:	50                   	push   eax
c000f7a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a6:	50                   	push   eax
c000f7a7:	6a 01                	push   0x1
c000f7a9:	e8 5e ff ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f7b6:	0f 95 c0             	setne  al
c000f7b9:	83 c4 24             	add    esp,0x24
c000f7bc:	c3                   	ret    
c000f7bd:	90                   	nop

c000f7be <CPU::cpuidCheckECX(unsigned int)>:
c000f7be:	83 ec 10             	sub    esp,0x10
c000f7c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c5:	50                   	push   eax
c000f7c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ca:	50                   	push   eax
c000f7cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7cf:	50                   	push   eax
c000f7d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d4:	50                   	push   eax
c000f7d5:	6a 01                	push   0x1
c000f7d7:	e8 30 ff ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7e4:	0f 95 c0             	setne  al
c000f7e7:	83 c4 24             	add    esp,0x24
c000f7ea:	c3                   	ret    
c000f7eb:	90                   	nop

c000f7ec <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7ec:	83 ec 10             	sub    esp,0x10
c000f7ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f3:	50                   	push   eax
c000f7f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f8:	50                   	push   eax
c000f7f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7fd:	50                   	push   eax
c000f7fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f802:	50                   	push   eax
c000f803:	6a 07                	push   0x7
c000f805:	e8 02 ff ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f80a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f812:	0f 95 c0             	setne  al
c000f815:	83 c4 24             	add    esp,0x24
c000f818:	c3                   	ret    
c000f819:	90                   	nop

c000f81a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f81a:	83 ec 10             	sub    esp,0x10
c000f81d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f821:	50                   	push   eax
c000f822:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f826:	50                   	push   eax
c000f827:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f82b:	50                   	push   eax
c000f82c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f830:	50                   	push   eax
c000f831:	6a 07                	push   0x7
c000f833:	e8 d4 fe ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f838:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f83c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f840:	0f 95 c0             	setne  al
c000f843:	83 c4 24             	add    esp,0x24
c000f846:	c3                   	ret    
c000f847:	90                   	nop

c000f848 <CPU::CPU()>:
c000f848:	83 ec 0c             	sub    esp,0xc
c000f84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f84f:	83 ec 08             	sub    esp,0x8
c000f852:	68 19 e7 01 c0       	push   0xc001e719
c000f857:	50                   	push   eax
c000f858:	e8 63 c9 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000f85d:	83 c4 10             	add    esp,0x10
c000f860:	ba a0 e7 01 c0       	mov    edx,0xc001e7a0
c000f865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f869:	89 10                	mov    DWORD PTR [eax],edx
c000f86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f87d:	05 78 01 00 00       	add    eax,0x178
c000f882:	83 ec 0c             	sub    esp,0xc
c000f885:	50                   	push   eax
c000f886:	e8 93 7e ff ff       	call   c000771e <GDT::GDT()>
c000f88b:	83 c4 10             	add    esp,0x10
c000f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f892:	05 7c 09 00 00       	add    eax,0x97c
c000f897:	83 ec 0c             	sub    esp,0xc
c000f89a:	50                   	push   eax
c000f89b:	e8 b4 80 ff ff       	call   c0007954 <IDT::IDT()>
c000f8a0:	83 c4 10             	add    esp,0x10
c000f8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a7:	05 7c 11 00 00       	add    eax,0x117c
c000f8ac:	83 ec 0c             	sub    esp,0xc
c000f8af:	50                   	push   eax
c000f8b0:	e8 23 9a ff ff       	call   c00092d8 <TSS::TSS()>
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f8d1:	90                   	nop
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	c3                   	ret    

c000f8d6 <CPU::displayFeatures()>:
c000f8d6:	c3                   	ret    
c000f8d7:	90                   	nop

c000f8d8 <CPU::detectFeatures()>:
c000f8d8:	55                   	push   ebp
c000f8d9:	57                   	push   edi
c000f8da:	56                   	push   esi
c000f8db:	53                   	push   ebx
c000f8dc:	83 ec 30             	sub    esp,0x30
c000f8df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f8e3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8ed:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8f4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8fa:	6a 0d                	push   0xd
c000f8fc:	6a 00                	push   0x0
c000f8fe:	55                   	push   ebp
c000f8ff:	e8 ec 0b ff ff       	call   c00004f0 <memset>
c000f904:	83 c4 10             	add    esp,0x10
c000f907:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000f90c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f913:	0f 84 d5 05 00 00    	je     c000feee <CPU::detectFeatures()+0x616>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	89 ef                	mov    edi,ebp
c000f91e:	6a 10                	push   0x10
c000f920:	e8 6b fe ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f925:	83 e0 01             	and    eax,0x1
c000f928:	8d 14 00             	lea    edx,[eax+eax*1]
c000f92b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f931:	83 e0 fd             	and    eax,0xfffffffd
c000f934:	09 d0                	or     eax,edx
c000f936:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f93c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f943:	e8 48 fe ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f948:	83 e0 01             	and    eax,0x1
c000f94b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f952:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f958:	83 e0 fb             	and    eax,0xfffffffb
c000f95b:	09 d0                	or     eax,edx
c000f95d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f963:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f96a:	e8 21 fe ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f96f:	83 e0 01             	and    eax,0x1
c000f972:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f979:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f97f:	83 e0 f7             	and    eax,0xfffffff7
c000f982:	09 d0                	or     eax,edx
c000f984:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f98a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f991:	e8 fa fd ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f996:	83 e0 01             	and    eax,0x1
c000f999:	c1 e0 04             	shl    eax,0x4
c000f99c:	88 c2                	mov    dl,al
c000f99e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9a4:	83 e0 ef             	and    eax,0xffffffef
c000f9a7:	09 d0                	or     eax,edx
c000f9a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9af:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f9b6:	e8 d5 fd ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f9bb:	83 e0 01             	and    eax,0x1
c000f9be:	c1 e0 05             	shl    eax,0x5
c000f9c1:	88 c2                	mov    dl,al
c000f9c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9c9:	83 e0 df             	and    eax,0xffffffdf
c000f9cc:	09 d0                	or     eax,edx
c000f9ce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9d4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f9db:	e8 b0 fd ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000f9e0:	83 e0 01             	and    eax,0x1
c000f9e3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9e6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9ec:	83 e0 fd             	and    eax,0xfffffffd
c000f9ef:	09 d0                	or     eax,edx
c000f9f1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9f7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9fe:	e8 8d fd ff ff       	call   c000f790 <CPU::cpuidCheckEDX(unsigned int)>
c000fa03:	83 e0 01             	and    eax,0x1
c000fa06:	c1 e0 06             	shl    eax,0x6
c000fa09:	88 c2                	mov    dl,al
c000fa0b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa11:	83 e0 bf             	and    eax,0xffffffbf
c000fa14:	09 d0                	or     eax,edx
c000fa16:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa1c:	58                   	pop    eax
c000fa1d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa21:	50                   	push   eax
c000fa22:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa26:	50                   	push   eax
c000fa27:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa2b:	56                   	push   esi
c000fa2c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa30:	50                   	push   eax
c000fa31:	6a 00                	push   0x0
c000fa33:	e8 d4 fc ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa38:	b8 04 00 00 00       	mov    eax,0x4
c000fa3d:	89 c1                	mov    ecx,eax
c000fa3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa41:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa47:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa4b:	89 c1                	mov    ecx,eax
c000fa4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa4f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa55:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa59:	89 c1                	mov    ecx,eax
c000fa5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa5d:	83 c4 18             	add    esp,0x18
c000fa60:	68 28 e6 01 c0       	push   0xc001e628
c000fa65:	55                   	push   ebp
c000fa66:	e8 95 0c ff ff       	call   c0000700 <strcmp>
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	85 c0                	test   eax,eax
c000fa70:	75 0f                	jne    c000fa81 <CPU::detectFeatures()+0x1a9>
c000fa72:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa7c:	e9 22 02 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fa81:	50                   	push   eax
c000fa82:	50                   	push   eax
c000fa83:	68 35 e6 01 c0       	push   0xc001e635
c000fa88:	55                   	push   ebp
c000fa89:	e8 72 0c ff ff       	call   c0000700 <strcmp>
c000fa8e:	83 c4 10             	add    esp,0x10
c000fa91:	85 c0                	test   eax,eax
c000fa93:	74 dd                	je     c000fa72 <CPU::detectFeatures()+0x19a>
c000fa95:	50                   	push   eax
c000fa96:	50                   	push   eax
c000fa97:	68 42 e6 01 c0       	push   0xc001e642
c000fa9c:	55                   	push   ebp
c000fa9d:	e8 5e 0c ff ff       	call   c0000700 <strcmp>
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	85 c0                	test   eax,eax
c000faa7:	74 2a                	je     c000fad3 <CPU::detectFeatures()+0x1fb>
c000faa9:	50                   	push   eax
c000faaa:	50                   	push   eax
c000faab:	68 4f e6 01 c0       	push   0xc001e64f
c000fab0:	55                   	push   ebp
c000fab1:	e8 4a 0c ff ff       	call   c0000700 <strcmp>
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	85 c0                	test   eax,eax
c000fabb:	74 16                	je     c000fad3 <CPU::detectFeatures()+0x1fb>
c000fabd:	50                   	push   eax
c000fabe:	50                   	push   eax
c000fabf:	68 5c e6 01 c0       	push   0xc001e65c
c000fac4:	55                   	push   ebp
c000fac5:	e8 36 0c ff ff       	call   c0000700 <strcmp>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	85 c0                	test   eax,eax
c000facf:	74 48                	je     c000fb19 <CPU::detectFeatures()+0x241>
c000fad1:	eb 0f                	jmp    c000fae2 <CPU::detectFeatures()+0x20a>
c000fad3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fadd:	e9 c1 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fae2:	50                   	push   eax
c000fae3:	50                   	push   eax
c000fae4:	68 69 e6 01 c0       	push   0xc001e669
c000fae9:	55                   	push   ebp
c000faea:	e8 11 0c ff ff       	call   c0000700 <strcmp>
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	85 c0                	test   eax,eax
c000faf4:	74 23                	je     c000fb19 <CPU::detectFeatures()+0x241>
c000faf6:	57                   	push   edi
c000faf7:	57                   	push   edi
c000faf8:	68 76 e6 01 c0       	push   0xc001e676
c000fafd:	55                   	push   ebp
c000fafe:	e8 fd 0b ff ff       	call   c0000700 <strcmp>
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	85 c0                	test   eax,eax
c000fb08:	75 1e                	jne    c000fb28 <CPU::detectFeatures()+0x250>
c000fb0a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fb14:	e9 8a 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fb19:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fb23:	e9 7b 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fb28:	56                   	push   esi
c000fb29:	56                   	push   esi
c000fb2a:	68 83 e6 01 c0       	push   0xc001e683
c000fb2f:	55                   	push   ebp
c000fb30:	e8 cb 0b ff ff       	call   c0000700 <strcmp>
c000fb35:	83 c4 10             	add    esp,0x10
c000fb38:	85 c0                	test   eax,eax
c000fb3a:	75 0f                	jne    c000fb4b <CPU::detectFeatures()+0x273>
c000fb3c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb46:	e9 58 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fb4b:	51                   	push   ecx
c000fb4c:	51                   	push   ecx
c000fb4d:	68 42 e6 01 c0       	push   0xc001e642
c000fb52:	55                   	push   ebp
c000fb53:	e8 a8 0b ff ff       	call   c0000700 <strcmp>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	85 c0                	test   eax,eax
c000fb5d:	75 0f                	jne    c000fb6e <CPU::detectFeatures()+0x296>
c000fb5f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb69:	e9 35 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fb6e:	52                   	push   edx
c000fb6f:	52                   	push   edx
c000fb70:	68 90 e6 01 c0       	push   0xc001e690
c000fb75:	55                   	push   ebp
c000fb76:	e8 85 0b ff ff       	call   c0000700 <strcmp>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	85 c0                	test   eax,eax
c000fb80:	75 0f                	jne    c000fb91 <CPU::detectFeatures()+0x2b9>
c000fb82:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb8c:	e9 12 01 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fb91:	50                   	push   eax
c000fb92:	50                   	push   eax
c000fb93:	68 9d e6 01 c0       	push   0xc001e69d
c000fb98:	55                   	push   ebp
c000fb99:	e8 62 0b ff ff       	call   c0000700 <strcmp>
c000fb9e:	83 c4 10             	add    esp,0x10
c000fba1:	85 c0                	test   eax,eax
c000fba3:	75 0f                	jne    c000fbb4 <CPU::detectFeatures()+0x2dc>
c000fba5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fbaf:	e9 ef 00 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fbb4:	50                   	push   eax
c000fbb5:	50                   	push   eax
c000fbb6:	68 aa e6 01 c0       	push   0xc001e6aa
c000fbbb:	55                   	push   ebp
c000fbbc:	e8 3f 0b ff ff       	call   c0000700 <strcmp>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	85 c0                	test   eax,eax
c000fbc6:	75 0f                	jne    c000fbd7 <CPU::detectFeatures()+0x2ff>
c000fbc8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fbd2:	e9 cc 00 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fbd7:	50                   	push   eax
c000fbd8:	50                   	push   eax
c000fbd9:	68 b7 e6 01 c0       	push   0xc001e6b7
c000fbde:	55                   	push   ebp
c000fbdf:	e8 1c 0b ff ff       	call   c0000700 <strcmp>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	85 c0                	test   eax,eax
c000fbe9:	75 0f                	jne    c000fbfa <CPU::detectFeatures()+0x322>
c000fbeb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbf5:	e9 a9 00 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fbfa:	50                   	push   eax
c000fbfb:	50                   	push   eax
c000fbfc:	68 c4 e6 01 c0       	push   0xc001e6c4
c000fc01:	55                   	push   ebp
c000fc02:	e8 f9 0a ff ff       	call   c0000700 <strcmp>
c000fc07:	83 c4 10             	add    esp,0x10
c000fc0a:	85 c0                	test   eax,eax
c000fc0c:	75 0f                	jne    c000fc1d <CPU::detectFeatures()+0x345>
c000fc0e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fc18:	e9 86 00 00 00       	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fc1d:	50                   	push   eax
c000fc1e:	50                   	push   eax
c000fc1f:	68 d1 e6 01 c0       	push   0xc001e6d1
c000fc24:	55                   	push   ebp
c000fc25:	e8 d6 0a ff ff       	call   c0000700 <strcmp>
c000fc2a:	83 c4 10             	add    esp,0x10
c000fc2d:	85 c0                	test   eax,eax
c000fc2f:	75 0c                	jne    c000fc3d <CPU::detectFeatures()+0x365>
c000fc31:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc3b:	eb 66                	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fc3d:	50                   	push   eax
c000fc3e:	50                   	push   eax
c000fc3f:	68 de e6 01 c0       	push   0xc001e6de
c000fc44:	55                   	push   ebp
c000fc45:	e8 b6 0a ff ff       	call   c0000700 <strcmp>
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	85 c0                	test   eax,eax
c000fc4f:	75 0c                	jne    c000fc5d <CPU::detectFeatures()+0x385>
c000fc51:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc5b:	eb 46                	jmp    c000fca3 <CPU::detectFeatures()+0x3cb>
c000fc5d:	57                   	push   edi
c000fc5e:	57                   	push   edi
c000fc5f:	68 eb e6 01 c0       	push   0xc001e6eb
c000fc64:	55                   	push   ebp
c000fc65:	e8 96 0a ff ff       	call   c0000700 <strcmp>
c000fc6a:	83 c4 10             	add    esp,0x10
c000fc6d:	85 c0                	test   eax,eax
c000fc6f:	74 e0                	je     c000fc51 <CPU::detectFeatures()+0x379>
c000fc71:	56                   	push   esi
c000fc72:	56                   	push   esi
c000fc73:	68 f8 e6 01 c0       	push   0xc001e6f8
c000fc78:	55                   	push   ebp
c000fc79:	e8 82 0a ff ff       	call   c0000700 <strcmp>
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	85 c0                	test   eax,eax
c000fc83:	74 cc                	je     c000fc51 <CPU::detectFeatures()+0x379>
c000fc85:	51                   	push   ecx
c000fc86:	51                   	push   ecx
c000fc87:	68 05 e7 01 c0       	push   0xc001e705
c000fc8c:	55                   	push   ebp
c000fc8d:	e8 6e 0a ff ff       	call   c0000700 <strcmp>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	85 c0                	test   eax,eax
c000fc97:	74 b8                	je     c000fc51 <CPU::detectFeatures()+0x379>
c000fc99:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fca3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fca8:	0f 86 be 00 00 00    	jbe    c000fd6c <CPU::detectFeatures()+0x494>
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	68 80 00 00 00       	push   0x80
c000fcb6:	e8 31 fb ff ff       	call   c000f7ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcbb:	83 e0 01             	and    eax,0x1
c000fcbe:	c1 e0 06             	shl    eax,0x6
c000fcc1:	88 c2                	mov    dl,al
c000fcc3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcc9:	83 e0 bf             	and    eax,0xffffffbf
c000fccc:	09 d0                	or     eax,edx
c000fcce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcd4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fcdb:	e8 0c fb ff ff       	call   c000f7ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fce0:	83 e0 01             	and    eax,0x1
c000fce3:	c1 e0 04             	shl    eax,0x4
c000fce6:	88 c2                	mov    dl,al
c000fce8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcee:	83 e0 ef             	and    eax,0xffffffef
c000fcf1:	09 d0                	or     eax,edx
c000fcf3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcf9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fd00:	e8 e7 fa ff ff       	call   c000f7ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd05:	c1 e0 07             	shl    eax,0x7
c000fd08:	88 c2                	mov    dl,al
c000fd0a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fd10:	83 e0 7f             	and    eax,0x7f
c000fd13:	09 d0                	or     eax,edx
c000fd15:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd1b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fd22:	e8 f3 fa ff ff       	call   c000f81a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd27:	83 e0 01             	and    eax,0x1
c000fd2a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd31:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd37:	83 e0 f7             	and    eax,0xfffffff7
c000fd3a:	09 d0                	or     eax,edx
c000fd3c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd42:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd49:	e8 cc fa ff ff       	call   c000f81a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	83 e0 01             	and    eax,0x1
c000fd54:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd5b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd61:	83 e0 fb             	and    eax,0xfffffffb
c000fd64:	09 d0                	or     eax,edx
c000fd66:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd6c:	83 ec 0c             	sub    esp,0xc
c000fd6f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd73:	50                   	push   eax
c000fd74:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd78:	50                   	push   eax
c000fd79:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd7d:	56                   	push   esi
c000fd7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd82:	50                   	push   eax
c000fd83:	6a 01                	push   0x1
c000fd85:	e8 82 f9 ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd8a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd8e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd94:	88 ca                	mov    dl,cl
c000fd96:	83 e0 f0             	and    eax,0xfffffff0
c000fd99:	83 e2 0f             	and    edx,0xf
c000fd9c:	09 d0                	or     eax,edx
c000fd9e:	88 ca                	mov    dl,cl
c000fda0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fda6:	c0 ea 04             	shr    dl,0x4
c000fda9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fdad:	0f b6 c2             	movzx  eax,dl
c000fdb0:	83 c4 20             	add    esp,0x20
c000fdb3:	c1 e0 06             	shl    eax,0x6
c000fdb6:	89 c7                	mov    edi,eax
c000fdb8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fdbe:	66 25 3f c0          	and    ax,0xc03f
c000fdc2:	09 f8                	or     eax,edi
c000fdc4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fdcb:	89 c8                	mov    eax,ecx
c000fdcd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fdd4:	c1 e8 08             	shr    eax,0x8
c000fdd7:	83 e5 3f             	and    ebp,0x3f
c000fdda:	83 e0 0f             	and    eax,0xf
c000fddd:	89 c7                	mov    edi,eax
c000fddf:	c1 e7 06             	shl    edi,0x6
c000fde2:	09 ef                	or     edi,ebp
c000fde4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fdeb:	89 fa                	mov    edx,edi
c000fded:	83 e5 c0             	and    ebp,0xffffffc0
c000fdf0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdf6:	88 c2                	mov    dl,al
c000fdf8:	c0 ea 02             	shr    dl,0x2
c000fdfb:	89 d7                	mov    edi,edx
c000fdfd:	09 ef                	or     edi,ebp
c000fdff:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fe05:	89 fa                	mov    edx,edi
c000fe07:	83 e5 cf             	and    ebp,0xffffffcf
c000fe0a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fe10:	89 cf                	mov    edi,ecx
c000fe12:	c1 ef 0c             	shr    edi,0xc
c000fe15:	83 e7 03             	and    edi,0x3
c000fe18:	c1 e7 04             	shl    edi,0x4
c000fe1b:	09 ef                	or     edi,ebp
c000fe1d:	3c 06                	cmp    al,0x6
c000fe1f:	89 fa                	mov    edx,edi
c000fe21:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fe27:	74 04                	je     c000fe2d <CPU::detectFeatures()+0x555>
c000fe29:	3c 0f                	cmp    al,0xf
c000fe2b:	75 5c                	jne    c000fe89 <CPU::detectFeatures()+0x5b1>
c000fe2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fe31:	89 cf                	mov    edi,ecx
c000fe33:	c1 ef 10             	shr    edi,0x10
c000fe36:	c1 e7 04             	shl    edi,0x4
c000fe39:	09 fa                	or     edx,edi
c000fe3b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fe41:	0f b6 d2             	movzx  edx,dl
c000fe44:	66 81 e7 3f c0       	and    di,0xc03f
c000fe49:	c1 e2 06             	shl    edx,0x6
c000fe4c:	09 fa                	or     edx,edi
c000fe4e:	3c 0f                	cmp    al,0xf
c000fe50:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fe57:	75 30                	jne    c000fe89 <CPU::detectFeatures()+0x5b1>
c000fe59:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fe5f:	c1 e9 14             	shr    ecx,0x14
c000fe62:	83 e0 3f             	and    eax,0x3f
c000fe65:	83 c1 0f             	add    ecx,0xf
c000fe68:	88 ca                	mov    dl,cl
c000fe6a:	c0 e9 02             	shr    cl,0x2
c000fe6d:	c1 e2 06             	shl    edx,0x6
c000fe70:	09 d0                	or     eax,edx
c000fe72:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fe78:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fe7e:	83 e0 c0             	and    eax,0xffffffc0
c000fe81:	09 c1                	or     ecx,eax
c000fe83:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe89:	83 ec 0c             	sub    esp,0xc
c000fe8c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe93:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe97:	50                   	push   eax
c000fe98:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe9c:	55                   	push   ebp
c000fe9d:	56                   	push   esi
c000fe9e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fea2:	57                   	push   edi
c000fea3:	68 00 00 00 80       	push   0x80000000
c000fea8:	e8 5f f8 ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fead:	83 c4 20             	add    esp,0x20
c000feb0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000feb8:	76 22                	jbe    c000fedc <CPU::detectFeatures()+0x604>
c000feba:	83 ec 0c             	sub    esp,0xc
c000febd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fec1:	50                   	push   eax
c000fec2:	55                   	push   ebp
c000fec3:	56                   	push   esi
c000fec4:	57                   	push   edi
c000fec5:	68 01 00 00 80       	push   0x80000001
c000feca:	e8 3d f8 ff ff       	call   c000f70c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fecf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fed9:	83 c4 20             	add    esp,0x20
c000fedc:	52                   	push   edx
c000fedd:	52                   	push   edx
c000fede:	68 11 e7 01 c0       	push   0xc001e711
c000fee3:	53                   	push   ebx
c000fee4:	e8 c9 c2 ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	eb 67                	jmp    c000ff55 <CPU::detectFeatures()+0x67d>
c000feee:	50                   	push   eax
c000feef:	50                   	push   eax
c000fef0:	68 76 e6 01 c0       	push   0xc001e676
c000fef5:	55                   	push   ebp
c000fef6:	e8 25 07 ff ff       	call   c0000620 <strcpy>
c000fefb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ff05:	e8 d9 02 ff ff       	call   c00001e3 <is486>
c000ff0a:	83 c4 10             	add    esp,0x10
c000ff0d:	85 c0                	test   eax,eax
c000ff0f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff15:	74 1d                	je     c000ff34 <CPU::detectFeatures()+0x65c>
c000ff17:	83 c8 07             	or     eax,0x7
c000ff1a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff20:	0f 20 c0             	mov    eax,cr0
c000ff23:	83 e0 14             	and    eax,0x14
c000ff26:	83 f8 04             	cmp    eax,0x4
c000ff29:	75 0e                	jne    c000ff39 <CPU::detectFeatures()+0x661>
c000ff2b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ff32:	eb 21                	jmp    c000ff55 <CPU::detectFeatures()+0x67d>
c000ff34:	83 e0 f8             	and    eax,0xfffffff8
c000ff37:	eb e1                	jmp    c000ff1a <CPU::detectFeatures()+0x642>
c000ff39:	e8 80 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff3e:	83 e0 01             	and    eax,0x1
c000ff41:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff44:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff4a:	83 e0 fd             	and    eax,0xfffffffd
c000ff4d:	09 d0                	or     eax,edx
c000ff4f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff55:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff5c:	74 0e                	je     c000ff6c <CPU::detectFeatures()+0x694>
c000ff5e:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000ff63:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ff6a:	eb 20                	jmp    c000ff8c <CPU::detectFeatures()+0x6b4>
c000ff6c:	e8 4d 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff71:	83 e0 01             	and    eax,0x1
c000ff74:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff77:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff7d:	83 e0 fd             	and    eax,0xfffffffd
c000ff80:	09 d0                	or     eax,edx
c000ff82:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff88:	a8 02                	test   al,0x2
c000ff8a:	75 d2                	jne    c000ff5e <CPU::detectFeatures()+0x686>
c000ff8c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff93:	83 c4 2c             	add    esp,0x2c
c000ff96:	5b                   	pop    ebx
c000ff97:	5e                   	pop    esi
c000ff98:	5f                   	pop    edi
c000ff99:	5d                   	pop    ebp
c000ff9a:	c3                   	ret    
c000ff9b:	90                   	nop

c000ff9c <CPU::setupSMEP()>:
c000ff9c:	0f 20 e0             	mov    eax,cr4
c000ff9f:	0d 00 00 10 00       	or     eax,0x100000
c000ffa4:	0f 22 e0             	mov    cr4,eax
c000ffa7:	c3                   	ret    

c000ffa8 <CPU::setupUMIP()>:
c000ffa8:	0f 20 e0             	mov    eax,cr4
c000ffab:	80 cc 08             	or     ah,0x8
c000ffae:	0f 22 e0             	mov    cr4,eax
c000ffb1:	c3                   	ret    

c000ffb2 <CPU::setupTSC()>:
c000ffb2:	0f 20 e0             	mov    eax,cr4
c000ffb5:	83 c8 04             	or     eax,0x4
c000ffb8:	0f 22 e0             	mov    cr4,eax
c000ffbb:	c3                   	ret    

c000ffbc <CPU::setupLargePages()>:
c000ffbc:	0f 20 e0             	mov    eax,cr4
c000ffbf:	83 c8 10             	or     eax,0x10
c000ffc2:	0f 22 e0             	mov    cr4,eax
c000ffc5:	c3                   	ret    

c000ffc6 <CPU::setupPAT()>:
c000ffc6:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000ffcb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ffd2:	74 2c                	je     c0010000 <CPU::setupPAT()+0x3a>
c000ffd4:	53                   	push   ebx
c000ffd5:	83 ec 10             	sub    esp,0x10
c000ffd8:	68 77 02 00 00       	push   0x277
c000ffdd:	50                   	push   eax
c000ffde:	e8 b3 74 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c000ffe3:	83 e2 f8             	and    edx,0xfffffff8
c000ffe6:	83 ca 01             	or     edx,0x1
c000ffe9:	52                   	push   edx
c000ffea:	50                   	push   eax
c000ffeb:	68 77 02 00 00       	push   0x277
c000fff0:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000fff6:	e8 c7 74 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fffb:	83 c4 28             	add    esp,0x28
c000fffe:	5b                   	pop    ebx
c000ffff:	c3                   	ret    
c0010000:	c3                   	ret    
c0010001:	90                   	nop

c0010002 <CPU::setupMTRR()>:
c0010002:	c3                   	ret    
c0010003:	90                   	nop

c0010004 <CPU::setupGlobalPages()>:
c0010004:	0f 20 e0             	mov    eax,cr4
c0010007:	0c 80                	or     al,0x80
c0010009:	0f 22 e0             	mov    cr4,eax
c001000c:	c3                   	ret    
c001000d:	90                   	nop

c001000e <CPU::allowUsermodeDataAccess()>:
c001000e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010012:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010019:	74 03                	je     c001001e <CPU::allowUsermodeDataAccess()+0x10>
c001001b:	0f 01 cb             	stac   
c001001e:	c3                   	ret    
c001001f:	90                   	nop

c0010020 <CPU::prohibitUsermodeDataAccess()>:
c0010020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010024:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001002b:	74 03                	je     c0010030 <CPU::prohibitUsermodeDataAccess()+0x10>
c001002d:	0f 01 ca             	clac   
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <CPU::setupSMAP()>:
c0010032:	0f 20 e0             	mov    eax,cr4
c0010035:	0d 00 00 20 00       	or     eax,0x200000
c001003a:	0f 22 e0             	mov    cr4,eax
c001003d:	eb e1                	jmp    c0010020 <CPU::prohibitUsermodeDataAccess()>
c001003f:	90                   	nop

c0010040 <CPU::setupFeatures()>:
c0010040:	53                   	push   ebx
c0010041:	83 ec 08             	sub    esp,0x8
c0010044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010048:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001004f:	74 18                	je     c0010069 <CPU::setupFeatures()+0x29>
c0010051:	83 ec 0c             	sub    esp,0xc
c0010054:	68 1d e7 01 c0       	push   0xc001e71d
c0010059:	e8 8a ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001005e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010061:	e8 42 ff ff ff       	call   c000ffa8 <CPU::setupUMIP()>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010070:	74 18                	je     c001008a <CPU::setupFeatures()+0x4a>
c0010072:	83 ec 0c             	sub    esp,0xc
c0010075:	68 27 e7 01 c0       	push   0xc001e727
c001007a:	e8 69 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001007f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010082:	e8 2b ff ff ff       	call   c000ffb2 <CPU::setupTSC()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010091:	74 18                	je     c00100ab <CPU::setupFeatures()+0x6b>
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	68 30 e7 01 c0       	push   0xc001e730
c001009b:	e8 48 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00100a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100a3:	e8 14 ff ff ff       	call   c000ffbc <CPU::setupLargePages()>
c00100a8:	83 c4 10             	add    esp,0x10
c00100ab:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00100b2:	74 18                	je     c00100cc <CPU::setupFeatures()+0x8c>
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	68 39 e7 01 c0       	push   0xc001e739
c00100bc:	e8 27 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00100c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100c4:	e8 3b ff ff ff       	call   c0010004 <CPU::setupGlobalPages()>
c00100c9:	83 c4 10             	add    esp,0x10
c00100cc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00100d3:	74 18                	je     c00100ed <CPU::setupFeatures()+0xad>
c00100d5:	83 ec 0c             	sub    esp,0xc
c00100d8:	68 4b e7 01 c0       	push   0xc001e74b
c00100dd:	e8 06 ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00100e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100e5:	e8 dc fe ff ff       	call   c000ffc6 <CPU::setupPAT()>
c00100ea:	83 c4 10             	add    esp,0x10
c00100ed:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100f4:	74 11                	je     c0010107 <CPU::setupFeatures()+0xc7>
c00100f6:	c7 44 24 10 54 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e754
c00100fe:	83 c4 08             	add    esp,0x8
c0010101:	5b                   	pop    ebx
c0010102:	e9 e1 aa ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c0010107:	83 c4 08             	add    esp,0x8
c001010a:	5b                   	pop    ebx
c001010b:	c3                   	ret    

c001010c <CPU::open(int, int, void*)>:
c001010c:	57                   	push   edi
c001010d:	56                   	push   esi
c001010e:	53                   	push   ebx
c001010f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010113:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010117:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001011d:	83 ec 0c             	sub    esp,0xc
c0010120:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010126:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001012c:	50                   	push   eax
c001012d:	e8 4e 76 ff ff       	call   c0007780 <GDT::setup()>
c0010132:	83 c4 0c             	add    esp,0xc
c0010135:	6a 00                	push   0x0
c0010137:	68 ef be ad de       	push   0xdeadbeef
c001013c:	57                   	push   edi
c001013d:	e8 da 91 ff ff       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c0010142:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010145:	e8 b2 91 ff ff       	call   c00092fc <TSS::flush()>
c001014a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010150:	89 04 24             	mov    DWORD PTR [esp],eax
c0010153:	e8 72 78 ff ff       	call   c00079ca <IDT::setup()>
c0010158:	b8 00 04 00 00       	mov    eax,0x400
c001015d:	0f 23 f8             	mov    db7,eax
c0010160:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001016a:	e8 b7 80 ff ff       	call   c0008226 <Phys::allocatePage()>
c001016f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010175:	89 30                	mov    DWORD PTR [eax],esi
c0010177:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001017d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010180:	58                   	pop    eax
c0010181:	5a                   	pop    edx
c0010182:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001018c:	e8 75 a1 ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c0010191:	c7 04 24 5e e7 01 c0 	mov    DWORD PTR [esp],0xc001e75e
c0010198:	e8 16 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c001019d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101a0:	e8 33 f7 ff ff       	call   c000f8d8 <CPU::detectFeatures()>
c00101a5:	c7 04 24 81 e7 01 c0 	mov    DWORD PTR [esp],0xc001e781
c00101ac:	e8 02 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00101b1:	e8 b8 56 00 00       	call   c001586e <HalInitialise()>
c00101b6:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c00101bb:	83 e0 10             	and    eax,0x10
c00101be:	83 f8 01             	cmp    eax,0x1
c00101c1:	19 c0                	sbb    eax,eax
c00101c3:	83 e0 46             	and    eax,0x46
c00101c6:	83 c0 1e             	add    eax,0x1e
c00101c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00101cc:	e8 b0 d6 ff ff       	call   c000d881 <setupTimer(int)>
c00101d1:	83 c4 10             	add    esp,0x10
c00101d4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00101da:	f6 05 f0 09 02 c0 20 	test   BYTE PTR ds:0xc00209f0,0x20
c00101e1:	74 0c                	je     c00101ef <CPU::open(int, int, void*)+0xe3>
c00101e3:	83 ec 0c             	sub    esp,0xc
c00101e6:	53                   	push   ebx
c00101e7:	e8 54 fe ff ff       	call   c0010040 <CPU::setupFeatures()>
c00101ec:	83 c4 10             	add    esp,0x10
c00101ef:	5b                   	pop    ebx
c00101f0:	31 c0                	xor    eax,eax
c00101f2:	5e                   	pop    esi
c00101f3:	5f                   	pop    edi
c00101f4:	c3                   	ret    
c00101f5:	90                   	nop

c00101f6 <EnvVarContainer::getEnv(char const*)>:
c00101f6:	57                   	push   edi
c00101f7:	56                   	push   esi
c00101f8:	53                   	push   ebx
c00101f9:	31 db                	xor    ebx,ebx
c00101fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101ff:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010201:	7e 2b                	jle    c001022e <EnvVarContainer::getEnv(char const*)+0x38>
c0010203:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001020a:	50                   	push   eax
c001020b:	50                   	push   eax
c001020c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001020f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010212:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010216:	e8 e5 04 ff ff       	call   c0000700 <strcmp>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	85 c0                	test   eax,eax
c0010220:	75 09                	jne    c001022b <EnvVarContainer::getEnv(char const*)+0x35>
c0010222:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010225:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010229:	eb 05                	jmp    c0010230 <EnvVarContainer::getEnv(char const*)+0x3a>
c001022b:	43                   	inc    ebx
c001022c:	eb d1                	jmp    c00101ff <EnvVarContainer::getEnv(char const*)+0x9>
c001022e:	31 c0                	xor    eax,eax
c0010230:	5b                   	pop    ebx
c0010231:	5e                   	pop    esi
c0010232:	5f                   	pop    edi
c0010233:	c3                   	ret    

c0010234 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010234:	55                   	push   ebp
c0010235:	57                   	push   edi
c0010236:	56                   	push   esi
c0010237:	53                   	push   ebx
c0010238:	83 ec 28             	sub    esp,0x28
c001023b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001023f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010243:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010247:	56                   	push   esi
c0010248:	e8 13 03 ff ff       	call   c0000560 <strlen>
c001024d:	40                   	inc    eax
c001024e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010251:	e8 03 7c ff ff       	call   c0007e59 <malloc>
c0010256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010259:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001025d:	e8 fe 02 ff ff       	call   c0000560 <strlen>
c0010262:	40                   	inc    eax
c0010263:	89 04 24             	mov    DWORD PTR [esp],eax
c0010266:	e8 ee 7b ff ff       	call   c0007e59 <malloc>
c001026b:	89 34 24             	mov    DWORD PTR [esp],esi
c001026e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010272:	e8 e9 02 ff ff       	call   c0000560 <strlen>
c0010277:	83 c4 0c             	add    esp,0xc
c001027a:	40                   	inc    eax
c001027b:	50                   	push   eax
c001027c:	6a 00                	push   0x0
c001027e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010282:	e8 69 02 ff ff       	call   c00004f0 <memset>
c0010287:	89 34 24             	mov    DWORD PTR [esp],esi
c001028a:	e8 d1 02 ff ff       	call   c0000560 <strlen>
c001028f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010293:	8d 48 01             	lea    ecx,[eax+0x1]
c0010296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001029b:	89 de                	mov    esi,ebx
c001029d:	e8 be 02 ff ff       	call   c0000560 <strlen>
c00102a2:	83 c4 0c             	add    esp,0xc
c00102a5:	40                   	inc    eax
c00102a6:	50                   	push   eax
c00102a7:	6a 00                	push   0x0
c00102a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ad:	e8 3e 02 ff ff       	call   c00004f0 <memset>
c00102b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b5:	e8 a6 02 ff ff       	call   c0000560 <strlen>
c00102ba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102be:	8d 48 01             	lea    ecx,[eax+0x1]
c00102c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102c6:	40                   	inc    eax
c00102c7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102ca:	c1 e0 03             	shl    eax,0x3
c00102cd:	5a                   	pop    edx
c00102ce:	59                   	pop    ecx
c00102cf:	50                   	push   eax
c00102d0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102d3:	e8 6d 7b ff ff       	call   c0007e45 <realloc>
c00102d8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102df:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102e2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102e6:	b9 08 00 00 00       	mov    ecx,0x8
c00102eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ed:	83 c4 2c             	add    esp,0x2c
c00102f0:	5b                   	pop    ebx
c00102f1:	5e                   	pop    esi
c00102f2:	5f                   	pop    edi
c00102f3:	5d                   	pop    ebp
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <EnvVarContainer::deleteEnv(char const*)>:
c00102f6:	c3                   	ret    
c00102f7:	90                   	nop

c00102f8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102f8:	55                   	push   ebp
c00102f9:	57                   	push   edi
c00102fa:	56                   	push   esi
c00102fb:	53                   	push   ebx
c00102fc:	81 ec 38 01 00 00    	sub    esp,0x138
c0010302:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010309:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010310:	68 14 01 00 00       	push   0x114
c0010315:	e8 3f 7b ff ff       	call   c0007e59 <malloc>
c001031a:	83 c4 0c             	add    esp,0xc
c001031d:	89 c3                	mov    ebx,eax
c001031f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010322:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010329:	50                   	push   eax
c001032a:	e8 2f ae ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001032f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010332:	e8 55 b1 ff ff       	call   c000b48c <File::exists()>
c0010337:	83 c4 10             	add    esp,0x10
c001033a:	84 c0                	test   al,al
c001033c:	75 31                	jne    c001036f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001033e:	50                   	push   eax
c001033f:	50                   	push   eax
c0010340:	6a 12                	push   0x12
c0010342:	53                   	push   ebx
c0010343:	e8 d6 ae ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0010348:	8b 03                	mov    eax,DWORD PTR [ebx]
c001034a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001034d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010350:	e8 0b 02 ff ff       	call   c0000560 <strlen>
c0010355:	5a                   	pop    edx
c0010356:	31 d2                	xor    edx,edx
c0010358:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001035c:	51                   	push   ecx
c001035d:	56                   	push   esi
c001035e:	52                   	push   edx
c001035f:	50                   	push   eax
c0010360:	53                   	push   ebx
c0010361:	ff d7                	call   edi
c0010363:	83 c4 14             	add    esp,0x14
c0010366:	53                   	push   ebx
c0010367:	e8 10 af ff ff       	call   c000b27c <File::close()>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	56                   	push   esi
c0010370:	31 f6                	xor    esi,esi
c0010372:	68 00 01 00 00       	push   0x100
c0010377:	6a 00                	push   0x0
c0010379:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001037d:	50                   	push   eax
c001037e:	e8 6d 01 ff ff       	call   c00004f0 <memset>
c0010383:	5f                   	pop    edi
c0010384:	58                   	pop    eax
c0010385:	6a 01                	push   0x1
c0010387:	53                   	push   ebx
c0010388:	e8 91 ae ff ff       	call   c000b21e <File::open(FileOpenMode)>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010398:	83 ec 0c             	sub    esp,0xc
c001039b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001039d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103a1:	51                   	push   ecx
c00103a2:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103a6:	52                   	push   edx
c00103a7:	6a 00                	push   0x0
c00103a9:	6a 01                	push   0x1
c00103ab:	53                   	push   ebx
c00103ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103af:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00103b3:	83 c4 20             	add    esp,0x20
c00103b6:	3c 0d                	cmp    al,0xd
c00103b8:	0f 84 09 01 00 00    	je     c00104c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103be:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103c3:	0f 84 ef 00 00 00    	je     c00104b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103c9:	3c 0a                	cmp    al,0xa
c00103cb:	74 13                	je     c00103e0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103d2:	74 0c                	je     c00103e0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103d4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103da:	0f 8e d8 00 00 00    	jle    c00104b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	8d 78 01             	lea    edi,[eax+0x1]
c00103ea:	57                   	push   edi
c00103eb:	e8 69 7a ff ff       	call   c0007e59 <malloc>
c00103f0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103f8:	8d 56 04             	lea    edx,[esi+0x4]
c00103fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00103fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010402:	e8 52 7a ff ff       	call   c0007e59 <malloc>
c0010407:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001040b:	83 c4 0c             	add    esp,0xc
c001040e:	57                   	push   edi
c001040f:	6a 00                	push   0x0
c0010411:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010415:	e8 d6 00 ff ff       	call   c00004f0 <memset>
c001041a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001041e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010422:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010426:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010428:	83 c4 0c             	add    esp,0xc
c001042b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001042f:	52                   	push   edx
c0010430:	6a 00                	push   0x0
c0010432:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010436:	e8 b5 00 ff ff       	call   c00004f0 <memset>
c001043b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001043f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010443:	89 34 24             	mov    DWORD PTR [esp],esi
c0010446:	e8 15 01 ff ff       	call   c0000560 <strlen>
c001044b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001044f:	89 c1                	mov    ecx,eax
c0010451:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010453:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010456:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010459:	40                   	inc    eax
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010460:	85 d2                	test   edx,edx
c0010462:	75 0c                	jne    c0010470 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010464:	83 ec 0c             	sub    esp,0xc
c0010467:	6a 08                	push   0x8
c0010469:	e8 eb 79 ff ff       	call   c0007e59 <malloc>
c001046e:	eb 0c                	jmp    c001047c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010470:	c1 e0 03             	shl    eax,0x3
c0010473:	51                   	push   ecx
c0010474:	51                   	push   ecx
c0010475:	50                   	push   eax
c0010476:	52                   	push   edx
c0010477:	e8 c9 79 ff ff       	call   c0007e45 <realloc>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010482:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010485:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010488:	8d 74 24 18          	lea    esi,[esp+0x18]
c001048c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010490:	b9 08 00 00 00       	mov    ecx,0x8
c0010495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010497:	31 f6                	xor    esi,esi
c0010499:	50                   	push   eax
c001049a:	68 00 01 00 00       	push   0x100
c001049f:	6a 00                	push   0x0
c00104a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104a5:	50                   	push   eax
c00104a6:	e8 45 00 ff ff       	call   c00004f0 <memset>
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104b6:	eb 0f                	jmp    c00104c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104b8:	3c 3d                	cmp    al,0x3d
c00104ba:	74 07                	je     c00104c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00104bc:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104c0:	46                   	inc    esi
c00104c1:	eb 04                	jmp    c00104c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104cc:	0f 85 c6 fe ff ff    	jne    c0010398 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104d2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104d8:	5b                   	pop    ebx
c00104d9:	5e                   	pop    esi
c00104da:	5f                   	pop    edi
c00104db:	5d                   	pop    ebp
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop

c00104de <EnvVarContainer::__loadSystem()>:
c00104de:	83 ec 10             	sub    esp,0x10
c00104e1:	68 60 f9 01 c0       	push   0xc001f960
c00104e6:	68 c4 e7 01 c0       	push   0xc001e7c4
c00104eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ef:	e8 04 fe ff ff       	call   c00102f8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00104f4:	83 c4 1c             	add    esp,0x1c
c00104f7:	c3                   	ret    

c00104f8 <EnvVarContainer::__loadUser()>:
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <EnvVarContainer::EnvVarContainer(Process*)>:
c00104fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001050c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001050f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010513:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001051a:	90                   	nop
c001051b:	c3                   	ret    

c001051c <EnvVarContainer::~EnvVarContainer()>:
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010526:	85 c0                	test   eax,eax
c0010528:	74 1d                	je     c0010547 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010530:	85 c0                	test   eax,eax
c0010532:	74 13                	je     c0010547 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001053b:	83 ec 0c             	sub    esp,0xc
c001053e:	50                   	push   eax
c001053f:	e8 25 79 ff ff       	call   c0007e69 <free>
c0010544:	83 c4 10             	add    esp,0x10
c0010547:	90                   	nop
c0010548:	83 c4 0c             	add    esp,0xc
c001054b:	c3                   	ret    

c001054c <Krnl::getEnv(Process*, char const*)>:
c001054c:	53                   	push   ebx
c001054d:	83 ec 08             	sub    esp,0x8
c0010550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010554:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010558:	39 05 d0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023ed0,eax
c001055e:	74 04                	je     c0010564 <Krnl::getEnv(Process*, char const*)+0x18>
c0010560:	85 c0                	test   eax,eax
c0010562:	75 0b                	jne    c001056f <Krnl::getEnv(Process*, char const*)+0x23>
c0010564:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c0010569:	85 c0                	test   eax,eax
c001056b:	75 19                	jne    c0010586 <Krnl::getEnv(Process*, char const*)+0x3a>
c001056d:	eb 27                	jmp    c0010596 <Krnl::getEnv(Process*, char const*)+0x4a>
c001056f:	52                   	push   edx
c0010570:	52                   	push   edx
c0010571:	53                   	push   ebx
c0010572:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010578:	e8 79 fc ff ff       	call   c00101f6 <EnvVarContainer::getEnv(char const*)>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	85 c0                	test   eax,eax
c0010582:	75 28                	jne    c00105ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010584:	eb de                	jmp    c0010564 <Krnl::getEnv(Process*, char const*)+0x18>
c0010586:	52                   	push   edx
c0010587:	52                   	push   edx
c0010588:	53                   	push   ebx
c0010589:	50                   	push   eax
c001058a:	e8 67 fc ff ff       	call   c00101f6 <EnvVarContainer::getEnv(char const*)>
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	85 c0                	test   eax,eax
c0010594:	75 16                	jne    c00105ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010596:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001059a:	a1 54 34 02 c0       	mov    eax,ds:0xc0023454
c001059f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105a3:	83 c4 08             	add    esp,0x8
c00105a6:	5b                   	pop    ebx
c00105a7:	e9 4a fc ff ff       	jmp    c00101f6 <EnvVarContainer::getEnv(char const*)>
c00105ac:	83 c4 08             	add    esp,0x8
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    

c00105b1 <Krnl::setEnvSystem(char const*, char const*)>:
c00105b1:	83 ec 10             	sub    esp,0x10
c00105b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105bc:	ff 35 54 34 02 c0    	push   DWORD PTR ds:0xc0023454
c00105c2:	e8 6d fc ff ff       	call   c0010234 <EnvVarContainer::setEnv(char const*, char const*)>
c00105c7:	83 c4 1c             	add    esp,0x1c
c00105ca:	c3                   	ret    

c00105cb <Krnl::setEnvUser(char const*, char const*)>:
c00105cb:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c00105d0:	85 c0                	test   eax,eax
c00105d2:	74 15                	je     c00105e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105d4:	83 ec 10             	sub    esp,0x10
c00105d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105df:	50                   	push   eax
c00105e0:	e8 4f fc ff ff       	call   c0010234 <EnvVarContainer::setEnv(char const*, char const*)>
c00105e5:	83 c4 1c             	add    esp,0x1c
c00105e8:	c3                   	ret    
c00105e9:	c3                   	ret    

c00105ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105f8:	e9 37 fc ff ff       	jmp    c0010234 <EnvVarContainer::setEnv(char const*, char const*)>

c00105fd <Krnl::deleteEnvSystem(char const*)>:
c00105fd:	c3                   	ret    

c00105fe <Krnl::deleteEnvUser(char const*)>:
c00105fe:	c3                   	ret    

c00105ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105ff:	c3                   	ret    

c0010600 <Krnl::newProcessEnv(Process*)>:
c0010600:	83 ec 28             	sub    esp,0x28
c0010603:	6a 0c                	push   0xc
c0010605:	e8 4f 78 ff ff       	call   c0007e59 <malloc>
c001060a:	5a                   	pop    edx
c001060b:	59                   	pop    ecx
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	50                   	push   eax
c0010611:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010615:	e8 e0 fe ff ff       	call   c00104fa <EnvVarContainer::EnvVarContainer(Process*)>
c001061a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001061e:	83 c4 2c             	add    esp,0x2c
c0010621:	c3                   	ret    

c0010622 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010622:	57                   	push   edi
c0010623:	56                   	push   esi
c0010624:	53                   	push   ebx
c0010625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010629:	83 ec 0c             	sub    esp,0xc
c001062c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010632:	6a 0c                	push   0xc
c0010634:	e8 20 78 ff ff       	call   c0007e59 <malloc>
c0010639:	89 c3                	mov    ebx,eax
c001063b:	58                   	pop    eax
c001063c:	5a                   	pop    edx
c001063d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010641:	53                   	push   ebx
c0010642:	e8 b3 fe ff ff       	call   c00104fa <EnvVarContainer::EnvVarContainer(Process*)>
c0010647:	8b 07                	mov    eax,DWORD PTR [edi]
c0010649:	89 03                	mov    DWORD PTR [ebx],eax
c001064b:	c1 e0 03             	shl    eax,0x3
c001064e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010651:	e8 03 78 ff ff       	call   c0007e59 <malloc>
c0010656:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010659:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001065b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001065e:	c1 e1 03             	shl    ecx,0x3
c0010661:	89 c7                	mov    edi,eax
c0010663:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	89 d8                	mov    eax,ebx
c001066a:	5b                   	pop    ebx
c001066b:	5e                   	pop    esi
c001066c:	5f                   	pop    edi
c001066d:	c3                   	ret    

c001066e <Krnl::loadSystemEnv()>:
c001066e:	53                   	push   ebx
c001066f:	83 ec 14             	sub    esp,0x14
c0010672:	6a 0c                	push   0xc
c0010674:	e8 e0 77 ff ff       	call   c0007e59 <malloc>
c0010679:	89 c3                	mov    ebx,eax
c001067b:	58                   	pop    eax
c001067c:	5a                   	pop    edx
c001067d:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c0010683:	53                   	push   ebx
c0010684:	e8 71 fe ff ff       	call   c00104fa <EnvVarContainer::EnvVarContainer(Process*)>
c0010689:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001068c:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0010692:	e8 47 fe ff ff       	call   c00104de <EnvVarContainer::__loadSystem()>
c0010697:	83 c4 18             	add    esp,0x18
c001069a:	5b                   	pop    ebx
c001069b:	c3                   	ret    

c001069c <Krnl::loadUserEnv()>:
c001069c:	53                   	push   ebx
c001069d:	83 ec 14             	sub    esp,0x14
c00106a0:	6a 0c                	push   0xc
c00106a2:	e8 b2 77 ff ff       	call   c0007e59 <malloc>
c00106a7:	89 c3                	mov    ebx,eax
c00106a9:	58                   	pop    eax
c00106aa:	5a                   	pop    edx
c00106ab:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c00106b1:	53                   	push   ebx
c00106b2:	e8 43 fe ff ff       	call   c00104fa <EnvVarContainer::EnvVarContainer(Process*)>
c00106b7:	89 1d 50 34 02 c0    	mov    DWORD PTR ds:0xc0023450,ebx
c00106bd:	83 c4 18             	add    esp,0x18
c00106c0:	5b                   	pop    ebx
c00106c1:	c3                   	ret    

c00106c2 <Krnl::flushEnv()>:
c00106c2:	c3                   	ret    

c00106c3 <Krnl::getProcessTotalEnvCount(Process*)>:
c00106c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c7:	8b 15 50 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023450
c00106cd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106d3:	a1 54 34 02 c0       	mov    eax,ds:0xc0023454
c00106d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00106da:	03 01                	add    eax,DWORD PTR [ecx]
c00106dc:	85 d2                	test   edx,edx
c00106de:	74 02                	je     c00106e2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106e0:	03 02                	add    eax,DWORD PTR [edx]
c00106e2:	c3                   	ret    

c00106e3 <Krnl::getProcessEnvPair(Process*, int)>:
c00106e3:	57                   	push   edi
c00106e4:	56                   	push   esi
c00106e5:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c00106eb:	53                   	push   ebx
c00106ec:	85 f6                	test   esi,esi
c00106ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010700:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010702:	75 16                	jne    c001071a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010704:	39 c2                	cmp    edx,eax
c0010706:	7c 16                	jl     c001071e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010708:	8b 0d 54 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023454
c001070e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010710:	01 c6                	add    esi,eax
c0010712:	39 d6                	cmp    esi,edx
c0010714:	7e 3c                	jle    c0010752 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010716:	29 c2                	sub    edx,eax
c0010718:	eb 04                	jmp    c001071e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001071a:	39 c2                	cmp    edx,eax
c001071c:	7d 05                	jge    c0010723 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001071e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010721:	eb 20                	jmp    c0010743 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010723:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010725:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010728:	39 d1                	cmp    ecx,edx
c001072a:	7e 04                	jle    c0010730 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001072c:	29 c2                	sub    edx,eax
c001072e:	eb 10                	jmp    c0010740 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010730:	8b 35 54 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023454
c0010736:	03 0e                	add    ecx,DWORD PTR [esi]
c0010738:	39 d1                	cmp    ecx,edx
c001073a:	7e 16                	jle    c0010752 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001073c:	29 c2                	sub    edx,eax
c001073e:	29 fa                	sub    edx,edi
c0010740:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010743:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010746:	8b 02                	mov    eax,DWORD PTR [edx]
c0010748:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001074b:	89 03                	mov    DWORD PTR [ebx],eax
c001074d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010750:	eb 1d                	jmp    c001076f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010752:	83 ec 0c             	sub    esp,0xc
c0010755:	68 e6 e7 01 c0       	push   0xc001e7e6
c001075a:	e8 18 00 00 00       	call   c0010777 <Krnl::panic(char const*)>
c001075f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010765:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001076c:	83 c4 10             	add    esp,0x10
c001076f:	89 d8                	mov    eax,ebx
c0010771:	5b                   	pop    ebx
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	c2 04 00             	ret    0x4

c0010777 <Krnl::panic(char const*)>:
c0010777:	53                   	push   ebx
c0010778:	83 ec 10             	sub    esp,0x10
c001077b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001077f:	fa                   	cli    
c0010780:	c6 05 60 34 02 c0 01 	mov    BYTE PTR ds:0xc0023460,0x1
c0010787:	53                   	push   ebx
c0010788:	68 00 e8 01 c0       	push   0xc001e800
c001078d:	e8 56 a4 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0010792:	83 c4 0c             	add    esp,0xc
c0010795:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c001079a:	6a 01                	push   0x1
c001079c:	6a 0f                	push   0xf
c001079e:	50                   	push   eax
c001079f:	e8 38 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107a4:	5a                   	pop    edx
c00107a5:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c00107ab:	51                   	push   ecx
c00107ac:	e8 23 84 ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c00107b1:	58                   	pop    eax
c00107b2:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c00107b8:	5a                   	pop    edx
c00107b9:	68 31 e8 01 c0       	push   0xc001e831
c00107be:	51                   	push   ecx
c00107bf:	e8 50 82 ff ff       	call   c0008a14 <VgaText::setTitle(char*)>
c00107c4:	83 c4 0c             	add    esp,0xc
c00107c7:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c00107cc:	6a 01                	push   0x1
c00107ce:	6a 0f                	push   0xf
c00107d0:	50                   	push   eax
c00107d1:	e8 06 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107d6:	58                   	pop    eax
c00107d7:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c00107dd:	5a                   	pop    edx
c00107de:	68 19 e8 01 c0       	push   0xc001e819
c00107e3:	51                   	push   ecx
c00107e4:	e8 df 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107e9:	83 c4 0c             	add    esp,0xc
c00107ec:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c00107f1:	6a 0f                	push   0xf
c00107f3:	6a 01                	push   0x1
c00107f5:	50                   	push   eax
c00107f6:	e8 e1 81 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107fb:	58                   	pop    eax
c00107fc:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c0010802:	5a                   	pop    edx
c0010803:	68 22 e8 01 c0       	push   0xc001e822
c0010808:	51                   	push   ecx
c0010809:	e8 ba 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001080e:	83 c4 0c             	add    esp,0xc
c0010811:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c0010816:	6a 01                	push   0x1
c0010818:	6a 0f                	push   0xf
c001081a:	50                   	push   eax
c001081b:	e8 bc 81 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010820:	58                   	pop    eax
c0010821:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c0010827:	5a                   	pop    edx
c0010828:	68 2f e8 01 c0       	push   0xc001e82f
c001082d:	51                   	push   ecx
c001082e:	e8 95 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010833:	58                   	pop    eax
c0010834:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c001083a:	5a                   	pop    edx
c001083b:	68 40 e8 01 c0       	push   0xc001e840
c0010840:	51                   	push   ecx
c0010841:	e8 82 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010846:	58                   	pop    eax
c0010847:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c001084d:	5a                   	pop    edx
c001084e:	68 32 e8 01 c0       	push   0xc001e832
c0010853:	51                   	push   ecx
c0010854:	e8 6f 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010859:	58                   	pop    eax
c001085a:	8b 0d 24 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a24
c0010860:	5a                   	pop    edx
c0010861:	53                   	push   ebx
c0010862:	51                   	push   ecx
c0010863:	e8 60 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010868:	5b                   	pop    ebx
c0010869:	58                   	pop    eax
c001086a:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c001086f:	68 2f e8 01 c0       	push   0xc001e82f
c0010874:	50                   	push   eax
c0010875:	e8 4e 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	eb fe                	jmp    c001087d <Krnl::panic(char const*)+0x106>

c001087f <Krnl::powerThread(void*)>:
c001087f:	83 ec 0c             	sub    esp,0xc
c0010882:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0010887:	48                   	dec    eax
c0010888:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001088d:	75 01                	jne    c0010890 <Krnl::powerThread(void*)+0x11>
c001088f:	fb                   	sti    
c0010890:	83 ec 0c             	sub    esp,0xc
c0010893:	c6 05 80 34 02 c0 00 	mov    BYTE PTR ds:0xc0023480,0x0
c001089a:	6a 0a                	push   0xa
c001089c:	e8 3b 35 00 00       	call   c0013ddc <sleep(unsigned int)>
c00108a1:	83 05 c4 34 02 c0 0a 	add    DWORD PTR ds:0xc00234c4,0xa
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	eb e3                	jmp    c0010890 <Krnl::powerThread(void*)+0x11>

c00108ad <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00108ad:	57                   	push   edi
c00108ae:	b9 09 00 00 00       	mov    ecx,0x9
c00108b3:	56                   	push   esi
c00108b4:	bf a0 34 02 c0       	mov    edi,0xc00234a0
c00108b9:	fc                   	cld    
c00108ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108c0:	5e                   	pop    esi
c00108c1:	5f                   	pop    edi
c00108c2:	c3                   	ret    

c00108c3 <Krnl::userIOReceived()>:
c00108c3:	c7 05 c4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234c4,0x0
c00108cd:	c3                   	ret    

c00108ce <Krnl::handlePowerButton()>:
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	a1 a0 34 02 c0       	mov    eax,ds:0xc00234a0
c00108d6:	83 f8 02             	cmp    eax,0x2
c00108d9:	75 10                	jne    c00108eb <Krnl::handlePowerButton()+0x1d>
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00108e4:	e8 11 6c ff ff       	call   c00074fa <Computer::shutdown()>
c00108e9:	eb 11                	jmp    c00108fc <Krnl::handlePowerButton()+0x2e>
c00108eb:	48                   	dec    eax
c00108ec:	75 11                	jne    c00108ff <Krnl::handlePowerButton()+0x31>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00108f7:	e8 2e 6c ff ff       	call   c000752a <Computer::sleep()>
c00108fc:	83 c4 10             	add    esp,0x10
c00108ff:	83 c4 0c             	add    esp,0xc
c0010902:	c3                   	ret    

c0010903 <Krnl::handleSleepButton()>:
c0010903:	83 ec 0c             	sub    esp,0xc
c0010906:	a1 a4 34 02 c0       	mov    eax,ds:0xc00234a4
c001090b:	83 f8 02             	cmp    eax,0x2
c001090e:	75 10                	jne    c0010920 <Krnl::handleSleepButton()+0x1d>
c0010910:	83 ec 0c             	sub    esp,0xc
c0010913:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0010919:	e8 dc 6b ff ff       	call   c00074fa <Computer::shutdown()>
c001091e:	eb 11                	jmp    c0010931 <Krnl::handleSleepButton()+0x2e>
c0010920:	48                   	dec    eax
c0010921:	75 11                	jne    c0010934 <Krnl::handleSleepButton()+0x31>
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001092c:	e8 f9 6b ff ff       	call   c000752a <Computer::sleep()>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	83 c4 0c             	add    esp,0xc
c0010937:	c3                   	ret    

c0010938 <Krnl::setupPowerManager()>:
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	c7 05 c4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234c4,0x0
c0010945:	68 f0 00 00 00       	push   0xf0
c001094a:	c6 05 80 34 02 c0 00 	mov    BYTE PTR ds:0xc0023480,0x0
c0010951:	6a 00                	push   0x0
c0010953:	68 7f 08 01 c0       	push   0xc001087f
c0010958:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c001095e:	e8 49 2f 00 00       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c0010963:	c7 05 a0 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00234a0,0x2
c001096d:	c7 05 a4 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00234a4,0x1
c0010977:	c7 05 a8 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00234a8,0x3
c0010981:	c7 05 ac 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234ac,0x0
c001098b:	c7 05 b8 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234b8,0x0
c0010995:	c7 05 b0 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234b0,0x0
c001099f:	c7 05 bc 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234bc,0x0
c00109a9:	c7 05 b4 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00234b4,0x3c
c00109b3:	c7 05 c0 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00234c0,0x3c
c00109bd:	83 c4 1c             	add    esp,0x1c
c00109c0:	c3                   	ret    

c00109c1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00109c1:	55                   	push   ebp
c00109c2:	57                   	push   edi
c00109c3:	56                   	push   esi
c00109c4:	53                   	push   ebx
c00109c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00109cb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00109d2:	8a 1e                	mov    bl,BYTE PTR [esi]
c00109d4:	8d 6e 01             	lea    ebp,[esi+0x1]
c00109d7:	80 fb 40             	cmp    bl,0x40
c00109da:	75 1b                	jne    c00109f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00109dc:	8a 16                	mov    dl,BYTE PTR [esi]
c00109de:	84 d2                	test   dl,dl
c00109e0:	0f 84 f1 00 00 00    	je     c0010ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109e6:	8d 46 01             	lea    eax,[esi+0x1]
c00109e9:	80 fa 3a             	cmp    dl,0x3a
c00109ec:	74 04                	je     c00109f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00109ee:	89 c6                	mov    esi,eax
c00109f0:	eb ea                	jmp    c00109dc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00109f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109f5:	89 c6                	mov    esi,eax
c00109f7:	50                   	push   eax
c00109f8:	6a 40                	push   0x40
c00109fa:	6a 00                	push   0x0
c00109fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a00:	50                   	push   eax
c0010a01:	e8 ea fa fe ff       	call   c00004f0 <memset>
c0010a06:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0010a0d:	31 c0                	xor    eax,eax
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010a14:	84 c9                	test   cl,cl
c0010a16:	0f 84 bb 00 00 00    	je     c0010ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a1c:	3d c7 00 00 00       	cmp    eax,0xc7
c0010a21:	0f 8f b0 00 00 00    	jg     c0010ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a27:	80 f9 0a             	cmp    cl,0xa
c0010a2a:	0f 85 98 00 00 00    	jne    c0010ac8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0010a30:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0010a35:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010a39:	a8 df                	test   al,0xdf
c0010a3b:	0f 94 c1             	sete   cl
c0010a3e:	3c 23                	cmp    al,0x23
c0010a40:	0f 94 c2             	sete   dl
c0010a43:	08 d1                	or     cl,dl
c0010a45:	75 4a                	jne    c0010a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a47:	8d 50 f7             	lea    edx,[eax-0x9]
c0010a4a:	80 fa 01             	cmp    dl,0x1
c0010a4d:	76 42                	jbe    c0010a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a4f:	3c 5b                	cmp    al,0x5b
c0010a51:	75 42                	jne    c0010a95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010a53:	80 fb 40             	cmp    bl,0x40
c0010a56:	75 39                	jne    c0010a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	8d 54 24 65          	lea    edx,[esp+0x65]
c0010a5f:	52                   	push   edx
c0010a60:	e8 fb fa fe ff       	call   c0000560 <strlen>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	83 f8 3f             	cmp    eax,0x3f
c0010a6b:	77 6a                	ja     c0010ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a6d:	50                   	push   eax
c0010a6e:	50                   	push   eax
c0010a6f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010a73:	52                   	push   edx
c0010a74:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a78:	52                   	push   edx
c0010a79:	e8 a2 fb fe ff       	call   c0000620 <strcpy>
c0010a7e:	58                   	pop    eax
c0010a7f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a83:	52                   	push   edx
c0010a84:	e8 d7 fa fe ff       	call   c0000560 <strlen>
c0010a89:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a8e:	83 c4 10             	add    esp,0x10
c0010a91:	31 d2                	xor    edx,edx
c0010a93:	eb 3a                	jmp    c0010acf <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a95:	80 fb 40             	cmp    bl,0x40
c0010a98:	74 06                	je     c0010aa0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a9a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a9e:	eb 20                	jmp    c0010ac0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010aa0:	50                   	push   eax
c0010aa1:	50                   	push   eax
c0010aa2:	55                   	push   ebp
c0010aa3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010aa7:	50                   	push   eax
c0010aa8:	e8 53 fc fe ff       	call   c0000700 <strcmp>
c0010aad:	83 c4 10             	add    esp,0x10
c0010ab0:	85 c0                	test   eax,eax
c0010ab2:	75 dd                	jne    c0010a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010ab4:	eb e4                	jmp    c0010a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010ab6:	8d 50 01             	lea    edx,[eax+0x1]
c0010ab9:	80 f9 3d             	cmp    cl,0x3d
c0010abc:	74 1d                	je     c0010adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010abe:	89 d0                	mov    eax,edx
c0010ac0:	8a 08                	mov    cl,BYTE PTR [eax]
c0010ac2:	84 c9                	test   cl,cl
c0010ac4:	75 f0                	jne    c0010ab6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010ac6:	eb 0f                	jmp    c0010ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010ac8:	8d 50 01             	lea    edx,[eax+0x1]
c0010acb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010acf:	47                   	inc    edi
c0010ad0:	89 d0                	mov    eax,edx
c0010ad2:	e9 3b ff ff ff       	jmp    c0010a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010ad7:	31 c0                	xor    eax,eax
c0010ad9:	eb 33                	jmp    c0010b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010adb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010adf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010ae2:	50                   	push   eax
c0010ae3:	50                   	push   eax
c0010ae4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010ae8:	50                   	push   eax
c0010ae9:	56                   	push   esi
c0010aea:	e8 11 fc fe ff       	call   c0000700 <strcmp>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	85 c0                	test   eax,eax
c0010af4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010af8:	75 97                	jne    c0010a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010afa:	51                   	push   ecx
c0010afb:	51                   	push   ecx
c0010afc:	52                   	push   edx
c0010afd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010b04:	e8 17 fb fe ff       	call   c0000620 <strcpy>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	b0 01                	mov    al,0x1
c0010b0e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010b14:	5b                   	pop    ebx
c0010b15:	5e                   	pop    esi
c0010b16:	5f                   	pop    edi
c0010b17:	5d                   	pop    ebp
c0010b18:	c3                   	ret    

c0010b19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010b19:	57                   	push   edi
c0010b1a:	56                   	push   esi
c0010b1b:	53                   	push   ebx
c0010b1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010b22:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010b29:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010b30:	53                   	push   ebx
c0010b31:	e8 2a fa fe ff       	call   c0000560 <strlen>
c0010b36:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b39:	89 c7                	mov    edi,eax
c0010b3b:	e8 20 fa fe ff       	call   c0000560 <strlen>
c0010b40:	83 c4 10             	add    esp,0x10
c0010b43:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010b47:	3d ff 00 00 00       	cmp    eax,0xff
c0010b4c:	0f 87 d3 00 00 00    	ja     c0010c25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b52:	57                   	push   edi
c0010b53:	57                   	push   edi
c0010b54:	56                   	push   esi
c0010b55:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010b59:	56                   	push   esi
c0010b5a:	e8 c1 fa fe ff       	call   c0000620 <strcpy>
c0010b5f:	58                   	pop    eax
c0010b60:	5a                   	pop    edx
c0010b61:	68 5f eb 01 c0       	push   0xc001eb5f
c0010b66:	56                   	push   esi
c0010b67:	e8 74 fc fe ff       	call   c00007e0 <strcat>
c0010b6c:	59                   	pop    ecx
c0010b6d:	5f                   	pop    edi
c0010b6e:	53                   	push   ebx
c0010b6f:	56                   	push   esi
c0010b70:	e8 6b fc fe ff       	call   c00007e0 <strcat>
c0010b75:	58                   	pop    eax
c0010b76:	5a                   	pop    edx
c0010b77:	68 7a e8 01 c0       	push   0xc001e87a
c0010b7c:	56                   	push   esi
c0010b7d:	e8 5e fc fe ff       	call   c00007e0 <strcat>
c0010b82:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b89:	e8 cb 72 ff ff       	call   c0007e59 <malloc>
c0010b8e:	83 c4 0c             	add    esp,0xc
c0010b91:	89 c3                	mov    ebx,eax
c0010b93:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c0010b99:	56                   	push   esi
c0010b9a:	50                   	push   eax
c0010b9b:	e8 be a5 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	85 db                	test   ebx,ebx
c0010ba5:	74 7e                	je     c0010c25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010ba7:	51                   	push   ecx
c0010ba8:	51                   	push   ecx
c0010ba9:	6a 01                	push   0x1
c0010bab:	53                   	push   ebx
c0010bac:	e8 6d a6 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 08                	je     c0010bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bbd:	53                   	push   ebx
c0010bbe:	eb 5f                	jmp    c0010c1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010bc0:	52                   	push   edx
c0010bc1:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010bc5:	50                   	push   eax
c0010bc6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010bca:	50                   	push   eax
c0010bcb:	53                   	push   ebx
c0010bcc:	e8 f9 a8 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0010bd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	89 c1                	mov    ecx,eax
c0010bda:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010bde:	74 31                	je     c0010c11 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010be0:	83 ec 0c             	sub    esp,0xc
c0010be3:	50                   	push   eax
c0010be4:	e8 70 72 ff ff       	call   c0007e59 <malloc>
c0010be9:	89 c6                	mov    esi,eax
c0010beb:	58                   	pop    eax
c0010bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bee:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010bf2:	52                   	push   edx
c0010bf3:	56                   	push   esi
c0010bf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bf8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bfc:	53                   	push   ebx
c0010bfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010c00:	83 c4 20             	add    esp,0x20
c0010c03:	85 c0                	test   eax,eax
c0010c05:	75 0a                	jne    c0010c11 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c0b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010c0f:	74 18                	je     c0010c29 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010c11:	83 ec 0c             	sub    esp,0xc
c0010c14:	53                   	push   ebx
c0010c15:	e8 62 a6 ff ff       	call   c000b27c <File::close()>
c0010c1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c22:	83 c4 10             	add    esp,0x10
c0010c25:	31 c0                	xor    eax,eax
c0010c27:	eb 3b                	jmp    c0010c64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	53                   	push   ebx
c0010c2d:	e8 4a a6 ff ff       	call   c000b27c <File::close()>
c0010c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c3a:	83 c4 0c             	add    esp,0xc
c0010c3d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c44:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c4b:	56                   	push   esi
c0010c4c:	e8 70 fd ff ff       	call   c00109c1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010c51:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c54:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010c58:	e8 0c 72 ff ff       	call   c0007e69 <free>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c64:	81 c4 20 01 00 00    	add    esp,0x120
c0010c6a:	5b                   	pop    ebx
c0010c6b:	5e                   	pop    esi
c0010c6c:	5f                   	pop    edi
c0010c6d:	c3                   	ret    

c0010c6e <Reg::getLine(char*, char*, char*)>:
c0010c6e:	57                   	push   edi
c0010c6f:	56                   	push   esi
c0010c70:	53                   	push   ebx
c0010c71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c79:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c7d:	57                   	push   edi
c0010c7e:	56                   	push   esi
c0010c7f:	53                   	push   ebx
c0010c80:	68 7f e8 01 c0       	push   0xc001e87f
c0010c85:	e8 8f fe ff ff       	call   c0010b19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	84 c0                	test   al,al
c0010c8f:	75 10                	jne    c0010ca1 <Reg::getLine(char*, char*, char*)+0x33>
c0010c91:	57                   	push   edi
c0010c92:	56                   	push   esi
c0010c93:	53                   	push   ebx
c0010c94:	68 a4 e8 01 c0       	push   0xc001e8a4
c0010c99:	e8 7b fe ff ff       	call   c0010b19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	5b                   	pop    ebx
c0010ca2:	5e                   	pop    esi
c0010ca3:	5f                   	pop    edi
c0010ca4:	c3                   	ret    

c0010ca5 <Reg::readInt(char*, char*, int*)>:
c0010ca5:	55                   	push   ebp
c0010ca6:	57                   	push   edi
c0010ca7:	56                   	push   esi
c0010ca8:	53                   	push   ebx
c0010ca9:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010caf:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010cb3:	57                   	push   edi
c0010cb4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010cbb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010cc2:	e8 a7 ff ff ff       	call   c0010c6e <Reg::getLine(char*, char*, char*)>
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	84 c0                	test   al,al
c0010ccc:	0f 84 b3 00 00 00    	je     c0010d85 <Reg::readInt(char*, char*, int*)+0xe0>
c0010cd2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010cd6:	80 fa 2b             	cmp    dl,0x2b
c0010cd9:	74 0c                	je     c0010ce7 <Reg::readInt(char*, char*, int*)+0x42>
c0010cdb:	80 fa 2d             	cmp    dl,0x2d
c0010cde:	75 0e                	jne    c0010cee <Reg::readInt(char*, char*, int*)+0x49>
c0010ce0:	ba 01 00 00 00       	mov    edx,0x1
c0010ce5:	eb 0b                	jmp    c0010cf2 <Reg::readInt(char*, char*, int*)+0x4d>
c0010ce7:	ba 01 00 00 00       	mov    edx,0x1
c0010cec:	eb 02                	jmp    c0010cf0 <Reg::readInt(char*, char*, int*)+0x4b>
c0010cee:	31 d2                	xor    edx,edx
c0010cf0:	31 c0                	xor    eax,eax
c0010cf2:	be 0a 00 00 00       	mov    esi,0xa
c0010cf7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010cfc:	75 20                	jne    c0010d1e <Reg::readInt(char*, char*, int*)+0x79>
c0010cfe:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010d02:	80 f9 78             	cmp    cl,0x78
c0010d05:	75 0a                	jne    c0010d11 <Reg::readInt(char*, char*, int*)+0x6c>
c0010d07:	83 c2 02             	add    edx,0x2
c0010d0a:	be 10 00 00 00       	mov    esi,0x10
c0010d0f:	eb 0d                	jmp    c0010d1e <Reg::readInt(char*, char*, int*)+0x79>
c0010d11:	80 f9 62             	cmp    cl,0x62
c0010d14:	75 08                	jne    c0010d1e <Reg::readInt(char*, char*, int*)+0x79>
c0010d16:	83 c2 02             	add    edx,0x2
c0010d19:	be 02 00 00 00       	mov    esi,0x2
c0010d1e:	01 d7                	add    edi,edx
c0010d20:	31 d2                	xor    edx,edx
c0010d22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010d24:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010d28:	80 fb 0d             	cmp    bl,0xd
c0010d2b:	0f 94 c3             	sete   bl
c0010d2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010d33:	0f 94 c1             	sete   cl
c0010d36:	08 cb                	or     bl,cl
c0010d38:	75 3a                	jne    c0010d74 <Reg::readInt(char*, char*, int*)+0xcf>
c0010d3a:	0f af d6             	imul   edx,esi
c0010d3d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010d42:	83 fe 10             	cmp    esi,0x10
c0010d45:	75 26                	jne    c0010d6d <Reg::readInt(char*, char*, int*)+0xc8>
c0010d47:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d4b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010d4e:	89 e9                	mov    ecx,ebp
c0010d50:	80 f9 05             	cmp    cl,0x5
c0010d53:	77 06                	ja     c0010d5b <Reg::readInt(char*, char*, int*)+0xb6>
c0010d55:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010d59:	eb 16                	jmp    c0010d71 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d5b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d5f:	83 e9 61             	sub    ecx,0x61
c0010d62:	80 f9 05             	cmp    cl,0x5
c0010d65:	77 06                	ja     c0010d6d <Reg::readInt(char*, char*, int*)+0xc8>
c0010d67:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010d6b:	eb 04                	jmp    c0010d71 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d6d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010d71:	47                   	inc    edi
c0010d72:	eb ae                	jmp    c0010d22 <Reg::readInt(char*, char*, int*)+0x7d>
c0010d74:	84 c0                	test   al,al
c0010d76:	74 02                	je     c0010d7a <Reg::readInt(char*, char*, int*)+0xd5>
c0010d78:	f7 da                	neg    edx
c0010d7a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d81:	89 10                	mov    DWORD PTR [eax],edx
c0010d83:	88 d8                	mov    al,bl
c0010d85:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d8b:	5b                   	pop    ebx
c0010d8c:	5e                   	pop    esi
c0010d8d:	5f                   	pop    edi
c0010d8e:	5d                   	pop    ebp
c0010d8f:	c3                   	ret    

c0010d90 <Reg::readString(char*, char*, char*, int)>:
c0010d90:	57                   	push   edi
c0010d91:	56                   	push   esi
c0010d92:	53                   	push   ebx
c0010d93:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d99:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010da0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010da4:	57                   	push   edi
c0010da5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010dac:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010db3:	e8 b6 fe ff ff       	call   c0010c6e <Reg::getLine(char*, char*, char*)>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	89 c6                	mov    esi,eax
c0010dbd:	84 c0                	test   al,al
c0010dbf:	74 44                	je     c0010e05 <Reg::readString(char*, char*, char*, int)+0x75>
c0010dc1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010dc8:	31 c0                	xor    eax,eax
c0010dca:	4a                   	dec    edx
c0010dcb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010dce:	84 c9                	test   cl,cl
c0010dd0:	74 0f                	je     c0010de1 <Reg::readString(char*, char*, char*, int)+0x51>
c0010dd2:	39 c2                	cmp    edx,eax
c0010dd4:	7e 0b                	jle    c0010de1 <Reg::readString(char*, char*, char*, int)+0x51>
c0010dd6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010dd9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010dde:	40                   	inc    eax
c0010ddf:	eb ea                	jmp    c0010dcb <Reg::readString(char*, char*, char*, int)+0x3b>
c0010de1:	83 ec 0c             	sub    esp,0xc
c0010de4:	53                   	push   ebx
c0010de5:	e8 76 f7 fe ff       	call   c0000560 <strlen>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010df2:	75 11                	jne    c0010e05 <Reg::readString(char*, char*, char*, int)+0x75>
c0010df4:	83 ec 0c             	sub    esp,0xc
c0010df7:	53                   	push   ebx
c0010df8:	e8 63 f7 fe ff       	call   c0000560 <strlen>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010e05:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010e0b:	89 f0                	mov    eax,esi
c0010e0d:	5b                   	pop    ebx
c0010e0e:	5e                   	pop    esi
c0010e0f:	5f                   	pop    edi
c0010e10:	c3                   	ret    

c0010e11 <Reg::readBool(char*, char*, bool*)>:
c0010e11:	83 ec 20             	sub    esp,0x20
c0010e14:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e18:	50                   	push   eax
c0010e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e21:	e8 7f fe ff ff       	call   c0010ca5 <Reg::readInt(char*, char*, int*)>
c0010e26:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010e2b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010e2f:	0f 95 02             	setne  BYTE PTR [edx]
c0010e32:	83 c4 2c             	add    esp,0x2c
c0010e35:	c3                   	ret    

c0010e36 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010e36:	53                   	push   ebx
c0010e37:	83 ec 1c             	sub    esp,0x1c
c0010e3a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010e3e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e42:	50                   	push   eax
c0010e43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e4b:	e8 c1 ff ff ff       	call   c0010e11 <Reg::readBool(char*, char*, bool*)>
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	84 c0                	test   al,al
c0010e55:	74 04                	je     c0010e5b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010e57:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010e5b:	88 d8                	mov    al,bl
c0010e5d:	83 c4 18             	add    esp,0x18
c0010e60:	5b                   	pop    ebx
c0010e61:	c3                   	ret    

c0010e62 <Reg::readIntWithDefault(char*, char*, int)>:
c0010e62:	53                   	push   ebx
c0010e63:	83 ec 1c             	sub    esp,0x1c
c0010e66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e6e:	50                   	push   eax
c0010e6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e77:	e8 29 fe ff ff       	call   c0010ca5 <Reg::readInt(char*, char*, int*)>
c0010e7c:	83 c4 10             	add    esp,0x10
c0010e7f:	84 c0                	test   al,al
c0010e81:	74 04                	je     c0010e87 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e87:	89 d8                	mov    eax,ebx
c0010e89:	83 c4 18             	add    esp,0x18
c0010e8c:	5b                   	pop    ebx
c0010e8d:	c3                   	ret    

c0010e8e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e8e:	57                   	push   edi
c0010e8f:	56                   	push   esi
c0010e90:	56                   	push   esi
c0010e91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e99:	56                   	push   esi
c0010e9a:	57                   	push   edi
c0010e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea3:	e8 e8 fe ff ff       	call   c0010d90 <Reg::readString(char*, char*, char*, int)>
c0010ea8:	83 c4 10             	add    esp,0x10
c0010eab:	84 c0                	test   al,al
c0010ead:	75 1a                	jne    c0010ec9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010eaf:	51                   	push   ecx
c0010eb0:	56                   	push   esi
c0010eb1:	6a 00                	push   0x0
c0010eb3:	57                   	push   edi
c0010eb4:	e8 37 f6 fe ff       	call   c00004f0 <memset>
c0010eb9:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010ebc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010ec9:	89 f8                	mov    eax,edi
c0010ecb:	5a                   	pop    edx
c0010ecc:	5e                   	pop    esi
c0010ecd:	5f                   	pop    edi
c0010ece:	c3                   	ret    

c0010ecf <Sys::eject(regs*)>:
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	83 ca ff             	or     edx,0xffffffff
c0010ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010edc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010ee1:	83 e9 41             	sub    ecx,0x41
c0010ee4:	83 f9 19             	cmp    ecx,0x19
c0010ee7:	77 18                	ja     c0010f01 <Sys::eject(regs*)+0x32>
c0010ee9:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c0010ef0:	85 c9                	test   ecx,ecx
c0010ef2:	74 0d                	je     c0010f01 <Sys::eject(regs*)+0x32>
c0010ef4:	83 ec 0c             	sub    esp,0xc
c0010ef7:	51                   	push   ecx
c0010ef8:	e8 69 c3 ff ff       	call   c000d266 <LogicalDisk::eject()>
c0010efd:	83 c4 10             	add    esp,0x10
c0010f00:	99                   	cdq    
c0010f01:	83 c4 0c             	add    esp,0xc
c0010f04:	c3                   	ret    

c0010f05 <Sys::exit(regs*)>:
c0010f05:	83 ec 18             	sub    esp,0x18
c0010f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010f0f:	e8 dc 34 00 00       	call   c00143f0 <terminateTask(int)>
c0010f14:	83 c8 ff             	or     eax,0xffffffff
c0010f17:	83 c4 1c             	add    esp,0x1c
c0010f1a:	89 c2                	mov    edx,eax
c0010f1c:	c3                   	ret    

c0010f1d <Sys::getCwd(regs*)>:
c0010f1d:	83 ec 10             	sub    esp,0x10
c0010f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f24:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010f27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f2f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f32:	e8 29 a0 ff ff       	call   c000af60 <Fs::getcwd(Process*, char*, int)>
c0010f37:	83 c4 1c             	add    esp,0x1c
c0010f3a:	99                   	cdq    
c0010f3b:	c3                   	ret    

c0010f3c <Sys::getPID(regs*)>:
c0010f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f46:	99                   	cdq    
c0010f47:	c3                   	ret    

c0010f48 <Sys::getRAMData(regs*)>:
c0010f48:	8b 0d 08 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a08
c0010f4e:	69 05 04 0a 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020a04,0xc8
c0010f58:	99                   	cdq    
c0010f59:	f7 f9                	idiv   ecx
c0010f5b:	c1 e0 18             	shl    eax,0x18
c0010f5e:	09 c8                	or     eax,ecx
c0010f60:	99                   	cdq    
c0010f61:	c3                   	ret    

c0010f62 <Sys::getVGAPtr(regs*)>:
c0010f62:	55                   	push   ebp
c0010f63:	57                   	push   edi
c0010f64:	56                   	push   esi
c0010f65:	53                   	push   ebx
c0010f66:	83 ec 18             	sub    esp,0x18
c0010f69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f70:	e8 7b 2f 00 00       	call   c0013ef0 <Thr::processFromPID(int)>
c0010f75:	83 c4 10             	add    esp,0x10
c0010f78:	89 c1                	mov    ecx,eax
c0010f7a:	b8 01 00 00 00       	mov    eax,0x1
c0010f7f:	85 c9                	test   ecx,ecx
c0010f81:	74 57                	je     c0010fda <Sys::getVGAPtr(regs*)+0x78>
c0010f83:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f89:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f8d:	74 0c                	je     c0010f9b <Sys::getVGAPtr(regs*)+0x39>
c0010f8f:	83 ec 0c             	sub    esp,0xc
c0010f92:	55                   	push   ebp
c0010f93:	e8 f1 7b ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f9e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010fa1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010fa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fa8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010fab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fae:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010fb4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fb7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010fba:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010fc0:	50                   	push   eax
c0010fc1:	50                   	push   eax
c0010fc2:	68 bf e8 01 c0       	push   0xc001e8bf
c0010fc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fca:	05 a8 0f 00 00       	add    eax,0xfa8
c0010fcf:	50                   	push   eax
c0010fd0:	e8 4b f6 fe ff       	call   c0000620 <strcpy>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	31 c0                	xor    eax,eax
c0010fda:	83 c4 0c             	add    esp,0xc
c0010fdd:	31 d2                	xor    edx,edx
c0010fdf:	5b                   	pop    ebx
c0010fe0:	5e                   	pop    esi
c0010fe1:	5f                   	pop    edi
c0010fe2:	5d                   	pop    ebp
c0010fe3:	c3                   	ret    

c0010fe4 <Sys::loadDLL(regs*)>:
c0010fe4:	56                   	push   esi
c0010fe5:	53                   	push   ebx
c0010fe6:	31 d2                	xor    edx,edx
c0010fe8:	51                   	push   ecx
c0010fe9:	b8 01 00 00 00       	mov    eax,0x1
c0010fee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ff2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010ff6:	0f 84 8c 00 00 00    	je     c0011088 <Sys::loadDLL(regs*)+0xa4>
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	68 14 01 00 00       	push   0x114
c0011004:	e8 50 6e ff ff       	call   c0007e59 <malloc>
c0011009:	83 c4 0c             	add    esp,0xc
c001100c:	89 c3                	mov    ebx,eax
c001100e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011013:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011016:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011019:	53                   	push   ebx
c001101a:	e8 3f a1 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	31 d2                	xor    edx,edx
c0011024:	b8 02 00 00 00       	mov    eax,0x2
c0011029:	85 db                	test   ebx,ebx
c001102b:	74 5b                	je     c0011088 <Sys::loadDLL(regs*)+0xa4>
c001102d:	83 ec 0c             	sub    esp,0xc
c0011030:	53                   	push   ebx
c0011031:	e8 56 a4 ff ff       	call   c000b48c <File::exists()>
c0011036:	83 c4 10             	add    esp,0x10
c0011039:	84 c0                	test   al,al
c001103b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001103d:	75 11                	jne    c0011050 <Sys::loadDLL(regs*)+0x6c>
c001103f:	83 ec 0c             	sub    esp,0xc
c0011042:	53                   	push   ebx
c0011043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	b8 03 00 00 00       	mov    eax,0x3
c001104e:	eb 36                	jmp    c0011086 <Sys::loadDLL(regs*)+0xa2>
c0011050:	83 ec 0c             	sub    esp,0xc
c0011053:	53                   	push   ebx
c0011054:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011057:	58                   	pop    eax
c0011058:	5a                   	pop    edx
c0011059:	6a 00                	push   0x0
c001105b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001105e:	e8 77 20 00 00       	call   c00130da <Thr::loadDLL(char const*, bool)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	89 c1                	mov    ecx,eax
c0011068:	31 d2                	xor    edx,edx
c001106a:	b8 04 00 00 00       	mov    eax,0x4
c001106f:	85 c9                	test   ecx,ecx
c0011071:	74 15                	je     c0011088 <Sys::loadDLL(regs*)+0xa4>
c0011073:	53                   	push   ebx
c0011074:	53                   	push   ebx
c0011075:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001107b:	51                   	push   ecx
c001107c:	e8 8a 22 00 00       	call   c001330b <Thr::executeDLL(unsigned long, void*)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	31 c0                	xor    eax,eax
c0011086:	31 d2                	xor    edx,edx
c0011088:	59                   	pop    ecx
c0011089:	5b                   	pop    ebx
c001108a:	5e                   	pop    esi
c001108b:	c3                   	ret    

c001108c <Sys::read(regs*)>:
c001108c:	57                   	push   edi
c001108d:	56                   	push   esi
c001108e:	53                   	push   ebx
c001108f:	83 ec 10             	sub    esp,0x10
c0011092:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011096:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011099:	83 f8 02             	cmp    eax,0x2
c001109c:	77 10                	ja     c00110ae <Sys::read(regs*)+0x22>
c001109e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110a6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00110ac:	eb 0e                	jmp    c00110bc <Sys::read(regs*)+0x30>
c00110ae:	83 ec 0c             	sub    esp,0xc
c00110b1:	50                   	push   eax
c00110b2:	e8 88 87 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	89 c1                	mov    ecx,eax
c00110bc:	83 c8 ff             	or     eax,0xffffffff
c00110bf:	85 c9                	test   ecx,ecx
c00110c1:	89 c2                	mov    edx,eax
c00110c3:	74 28                	je     c00110ed <Sys::read(regs*)+0x61>
c00110c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110cd:	31 ff                	xor    edi,edi
c00110cf:	83 ec 0c             	sub    esp,0xc
c00110d2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110d4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00110d8:	52                   	push   edx
c00110d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110dc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00110df:	57                   	push   edi
c00110e0:	56                   	push   esi
c00110e1:	51                   	push   ecx
c00110e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110e9:	83 c4 20             	add    esp,0x20
c00110ec:	99                   	cdq    
c00110ed:	83 c4 10             	add    esp,0x10
c00110f0:	5b                   	pop    ebx
c00110f1:	5e                   	pop    esi
c00110f2:	5f                   	pop    edi
c00110f3:	c3                   	ret    

c00110f4 <Sys::sbrk(regs*)>:
c00110f4:	56                   	push   esi
c00110f5:	53                   	push   ebx
c00110f6:	50                   	push   eax
c00110f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011103:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011106:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001110c:	85 db                	test   ebx,ebx
c001110e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011111:	74 02                	je     c0011115 <Sys::sbrk(regs*)+0x21>
c0011113:	79 06                	jns    c001111b <Sys::sbrk(regs*)+0x27>
c0011115:	89 f0                	mov    eax,esi
c0011117:	31 d2                	xor    edx,edx
c0011119:	eb 2a                	jmp    c0011145 <Sys::sbrk(regs*)+0x51>
c001111b:	83 c8 ff             	or     eax,0xffffffff
c001111e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011124:	89 c2                	mov    edx,eax
c0011126:	77 1d                	ja     c0011145 <Sys::sbrk(regs*)+0x51>
c0011128:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001112e:	50                   	push   eax
c001112f:	c1 ea 0c             	shr    edx,0xc
c0011132:	68 07 0c 00 00       	push   0xc07
c0011137:	52                   	push   edx
c0011138:	51                   	push   ecx
c0011139:	e8 f0 8f ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c001113e:	89 f0                	mov    eax,esi
c0011140:	31 d2                	xor    edx,edx
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	59                   	pop    ecx
c0011146:	5b                   	pop    ebx
c0011147:	5e                   	pop    esi
c0011148:	c3                   	ret    

c0011149 <Sys::setCwd(regs*)>:
c0011149:	83 ec 14             	sub    esp,0x14
c001114c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011150:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011158:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001115b:	e8 cb a3 ff ff       	call   c000b52b <Fs::setcwd(Process*, char*)>
c0011160:	83 c4 1c             	add    esp,0x1c
c0011163:	99                   	cdq    
c0011164:	c3                   	ret    

c0011165 <Sys::setTime(regs*)>:
c0011165:	55                   	push   ebp
c0011166:	31 c9                	xor    ecx,ecx
c0011168:	57                   	push   edi
c0011169:	bd 0c 00 00 00       	mov    ebp,0xc
c001116e:	56                   	push   esi
c001116f:	53                   	push   ebx
c0011170:	31 db                	xor    ebx,ebx
c0011172:	83 ec 10             	sub    esp,0x10
c0011175:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011179:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001117c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001117f:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011182:	89 c2                	mov    edx,eax
c0011184:	66 81 ef 6c 07       	sub    di,0x76c
c0011189:	83 e2 1f             	and    edx,0x1f
c001118c:	c1 e7 10             	shl    edi,0x10
c001118f:	42                   	inc    edx
c0011190:	c1 e8 05             	shr    eax,0x5
c0011193:	88 d1                	mov    cl,dl
c0011195:	31 d2                	xor    edx,edx
c0011197:	f7 f5                	div    ebp
c0011199:	89 dd                	mov    ebp,ebx
c001119b:	88 d5                	mov    ch,dl
c001119d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00111a3:	0f b7 c1             	movzx  eax,cx
c00111a6:	31 d2                	xor    edx,edx
c00111a8:	09 f8                	or     eax,edi
c00111aa:	bf 3c 00 00 00       	mov    edi,0x3c
c00111af:	89 c1                	mov    ecx,eax
c00111b1:	89 f0                	mov    eax,esi
c00111b3:	f7 f7                	div    edi
c00111b5:	c1 e2 10             	shl    edx,0x10
c00111b8:	09 d5                	or     ebp,edx
c00111ba:	31 d2                	xor    edx,edx
c00111bc:	89 eb                	mov    ebx,ebp
c00111be:	f7 f7                	div    edi
c00111c0:	bf 10 0e 00 00       	mov    edi,0xe10
c00111c5:	88 d7                	mov    bh,dl
c00111c7:	89 f0                	mov    eax,esi
c00111c9:	31 d2                	xor    edx,edx
c00111cb:	f7 f7                	div    edi
c00111cd:	bf 18 00 00 00       	mov    edi,0x18
c00111d2:	31 d2                	xor    edx,edx
c00111d4:	f7 f7                	div    edi
c00111d6:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00111db:	88 d3                	mov    bl,dl
c00111dd:	53                   	push   ebx
c00111de:	51                   	push   ecx
c00111df:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00111e5:	e8 52 ab ff ff       	call   c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00111ea:	83 c4 1c             	add    esp,0x1c
c00111ed:	83 f0 01             	xor    eax,0x1
c00111f0:	5b                   	pop    ebx
c00111f1:	0f b6 c0             	movzx  eax,al
c00111f4:	5e                   	pop    esi
c00111f5:	31 d2                	xor    edx,edx
c00111f7:	5f                   	pop    edi
c00111f8:	5d                   	pop    ebp
c00111f9:	c3                   	ret    

c00111fa <Sys::timezone(regs*)>:
c00111fa:	53                   	push   ebx
c00111fb:	83 ec 08             	sub    esp,0x8
c00111fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011202:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011206:	75 17                	jne    c001121f <Sys::timezone(regs*)+0x25>
c0011208:	83 ec 0c             	sub    esp,0xc
c001120b:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011210:	e8 d3 99 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0011215:	83 c8 ff             	or     eax,0xffffffff
c0011218:	83 c4 10             	add    esp,0x10
c001121b:	89 c2                	mov    edx,eax
c001121d:	eb 20                	jmp    c001123f <Sys::timezone(regs*)+0x45>
c001121f:	83 ec 0c             	sub    esp,0xc
c0011222:	68 de e8 01 c0       	push   0xc001e8de
c0011227:	e8 bc 99 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001122c:	58                   	pop    eax
c001122d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011230:	e8 63 a8 ff ff       	call   c000ba98 <User::loadClockSettings(int)>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	b8 01 00 00 00       	mov    eax,0x1
c001123d:	31 d2                	xor    edx,edx
c001123f:	83 c4 08             	add    esp,0x8
c0011242:	5b                   	pop    ebx
c0011243:	c3                   	ret    

c0011244 <Sys::write(regs*)>:
c0011244:	57                   	push   edi
c0011245:	56                   	push   esi
c0011246:	53                   	push   ebx
c0011247:	83 ec 10             	sub    esp,0x10
c001124a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001124e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011251:	83 f8 02             	cmp    eax,0x2
c0011254:	77 10                	ja     c0011266 <Sys::write(regs*)+0x22>
c0011256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001125b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001125e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011264:	eb 0e                	jmp    c0011274 <Sys::write(regs*)+0x30>
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	50                   	push   eax
c001126a:	e8 d0 85 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	89 c1                	mov    ecx,eax
c0011274:	83 c8 ff             	or     eax,0xffffffff
c0011277:	85 c9                	test   ecx,ecx
c0011279:	89 c2                	mov    edx,eax
c001127b:	74 28                	je     c00112a5 <Sys::write(regs*)+0x61>
c001127d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011285:	31 ff                	xor    edi,edi
c0011287:	83 ec 0c             	sub    esp,0xc
c001128a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001128c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011290:	52                   	push   edx
c0011291:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011294:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011297:	57                   	push   edi
c0011298:	56                   	push   esi
c0011299:	51                   	push   ecx
c001129a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001129d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00112a1:	83 c4 20             	add    esp,0x20
c00112a4:	99                   	cdq    
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	5b                   	pop    ebx
c00112a9:	5e                   	pop    esi
c00112aa:	5f                   	pop    edi
c00112ab:	c3                   	ret    

c00112ac <Sys::wsbe(regs*)>:
c00112ac:	57                   	push   edi
c00112ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00112b2:	56                   	push   esi
c00112b3:	be 1d e9 01 c0       	mov    esi,0xc001e91d
c00112b8:	53                   	push   ebx
c00112b9:	83 ec 30             	sub    esp,0x30
c00112bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00112c0:	fc                   	cld    
c00112c1:	83 ec 0c             	sub    esp,0xc
c00112c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112c6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00112ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112d2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00112d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00112da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00112dd:	57                   	push   edi
c00112de:	e8 7d f2 fe ff       	call   c0000560 <strlen>
c00112e3:	5a                   	pop    edx
c00112e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00112e8:	52                   	push   edx
c00112e9:	31 d2                	xor    edx,edx
c00112eb:	57                   	push   edi
c00112ec:	52                   	push   edx
c00112ed:	50                   	push   eax
c00112ee:	56                   	push   esi
c00112ef:	ff d3                	call   ebx
c00112f1:	83 c4 14             	add    esp,0x14
c00112f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112f8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00112fb:	e8 f0 30 00 00       	call   c00143f0 <terminateTask(int)>
c0011300:	83 c4 40             	add    esp,0x40
c0011303:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011308:	5b                   	pop    ebx
c0011309:	31 d2                	xor    edx,edx
c001130b:	5e                   	pop    esi
c001130c:	5f                   	pop    edi
c001130d:	c3                   	ret    

c001130e <Sys::yield(regs*)>:
c001130e:	83 ec 0c             	sub    esp,0xc
c0011311:	fa                   	cli    
c0011312:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0011318:	e8 af 27 00 00       	call   c0013acc <schedule()>
c001131d:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0011322:	48                   	dec    eax
c0011323:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0011328:	75 01                	jne    c001132b <Sys::yield(regs*)+0x1d>
c001132a:	fb                   	sti    
c001132b:	31 c0                	xor    eax,eax
c001132d:	31 d2                	xor    edx,edx
c001132f:	83 c4 0c             	add    esp,0xc
c0011332:	c3                   	ret    

c0011333 <sysCallSeekDir(regs*)>:
c0011333:	31 c0                	xor    eax,eax
c0011335:	31 d2                	xor    edx,edx
c0011337:	c3                   	ret    

c0011338 <sysCallTellDir(regs*)>:
c0011338:	31 c0                	xor    eax,eax
c001133a:	31 d2                	xor    edx,edx
c001133c:	c3                   	ret    

c001133d <sysCallVerify(regs*)>:
c001133d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011341:	31 d2                	xor    edx,edx
c0011343:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011346:	c3                   	ret    

c0011347 <sysCallGetArgc(regs*)>:
c0011347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001134c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001134f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011355:	99                   	cdq    
c0011356:	c3                   	ret    

c0011357 <sysCallTTYName(regs*)>:
c0011357:	b8 01 00 00 00       	mov    eax,0x1
c001135c:	31 d2                	xor    edx,edx
c001135e:	c3                   	ret    

c001135f <sysFormatDisk(regs*)>:
c001135f:	56                   	push   esi
c0011360:	53                   	push   ebx
c0011361:	50                   	push   eax
c0011362:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011366:	8b 1d d4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad4
c001136c:	eb 28                	jmp    c0011396 <sysFormatDisk(regs*)+0x37>
c001136e:	83 ec 0c             	sub    esp,0xc
c0011371:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011374:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011377:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011379:	51                   	push   ecx
c001137a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001137d:	51                   	push   ecx
c001137e:	50                   	push   eax
c001137f:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c0011386:	50                   	push   eax
c0011387:	53                   	push   ebx
c0011388:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001138b:	83 c4 20             	add    esp,0x20
c001138e:	83 f8 08             	cmp    eax,0x8
c0011391:	75 12                	jne    c00113a5 <sysFormatDisk(regs*)+0x46>
c0011393:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011396:	85 db                	test   ebx,ebx
c0011398:	75 d4                	jne    c001136e <sysFormatDisk(regs*)+0xf>
c001139a:	59                   	pop    ecx
c001139b:	b8 03 00 00 00       	mov    eax,0x3
c00113a0:	31 d2                	xor    edx,edx
c00113a2:	5b                   	pop    ebx
c00113a3:	5e                   	pop    esi
c00113a4:	c3                   	ret    
c00113a5:	85 c0                	test   eax,eax
c00113a7:	74 1b                	je     c00113c4 <sysFormatDisk(regs*)+0x65>
c00113a9:	83 f8 09             	cmp    eax,0x9
c00113ac:	74 0b                	je     c00113b9 <sysFormatDisk(regs*)+0x5a>
c00113ae:	59                   	pop    ecx
c00113af:	b8 02 00 00 00       	mov    eax,0x2
c00113b4:	31 d2                	xor    edx,edx
c00113b6:	5b                   	pop    ebx
c00113b7:	5e                   	pop    esi
c00113b8:	c3                   	ret    
c00113b9:	59                   	pop    ecx
c00113ba:	b8 01 00 00 00       	mov    eax,0x1
c00113bf:	31 d2                	xor    edx,edx
c00113c1:	5b                   	pop    ebx
c00113c2:	5e                   	pop    esi
c00113c3:	c3                   	ret    
c00113c4:	59                   	pop    ecx
c00113c5:	31 c0                	xor    eax,eax
c00113c7:	31 d2                	xor    edx,edx
c00113c9:	5b                   	pop    ebx
c00113ca:	5e                   	pop    esi
c00113cb:	c3                   	ret    

c00113cc <sysSetDiskVolumeLabel(regs*)>:
c00113cc:	56                   	push   esi
c00113cd:	53                   	push   ebx
c00113ce:	53                   	push   ebx
c00113cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113d3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00113d6:	83 f8 19             	cmp    eax,0x19
c00113d9:	77 2d                	ja     c0011408 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113db:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00113e2:	85 c9                	test   ecx,ecx
c00113e4:	74 22                	je     c0011408 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113e6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113e9:	85 db                	test   ebx,ebx
c00113eb:	74 1b                	je     c0011408 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113ed:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00113f3:	85 d2                	test   edx,edx
c00113f5:	74 11                	je     c0011408 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113f7:	8b 32                	mov    esi,DWORD PTR [edx]
c00113f9:	53                   	push   ebx
c00113fa:	50                   	push   eax
c00113fb:	51                   	push   ecx
c00113fc:	52                   	push   edx
c00113fd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	99                   	cdq    
c0011404:	59                   	pop    ecx
c0011405:	5b                   	pop    ebx
c0011406:	5e                   	pop    esi
c0011407:	c3                   	ret    
c0011408:	59                   	pop    ecx
c0011409:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001140e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011413:	5b                   	pop    ebx
c0011414:	5e                   	pop    esi
c0011415:	c3                   	ret    

c0011416 <sysGetDiskVolumeLabel(regs*)>:
c0011416:	57                   	push   edi
c0011417:	56                   	push   esi
c0011418:	53                   	push   ebx
c0011419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001141d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011420:	83 fa 19             	cmp    edx,0x19
c0011423:	77 38                	ja     c001145d <sysGetDiskVolumeLabel(regs*)+0x47>
c0011425:	8b 0c 95 40 2f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd0c0]
c001142c:	85 c9                	test   ecx,ecx
c001142e:	74 2d                	je     c001145d <sysGetDiskVolumeLabel(regs*)+0x47>
c0011430:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011433:	85 db                	test   ebx,ebx
c0011435:	74 26                	je     c001145d <sysGetDiskVolumeLabel(regs*)+0x47>
c0011437:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001143a:	85 f6                	test   esi,esi
c001143c:	74 1f                	je     c001145d <sysGetDiskVolumeLabel(regs*)+0x47>
c001143e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0011444:	85 c0                	test   eax,eax
c0011446:	74 15                	je     c001145d <sysGetDiskVolumeLabel(regs*)+0x47>
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	8b 38                	mov    edi,DWORD PTR [eax]
c001144d:	56                   	push   esi
c001144e:	53                   	push   ebx
c001144f:	52                   	push   edx
c0011450:	51                   	push   ecx
c0011451:	50                   	push   eax
c0011452:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011455:	83 c4 20             	add    esp,0x20
c0011458:	99                   	cdq    
c0011459:	5b                   	pop    ebx
c001145a:	5e                   	pop    esi
c001145b:	5f                   	pop    edi
c001145c:	c3                   	ret    
c001145d:	5b                   	pop    ebx
c001145e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011463:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011468:	5e                   	pop    esi
c0011469:	5f                   	pop    edi
c001146a:	c3                   	ret    

c001146b <sysShutdown(regs*)>:
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011472:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011475:	85 c0                	test   eax,eax
c0011477:	74 18                	je     c0011491 <sysShutdown(regs*)+0x26>
c0011479:	83 f8 01             	cmp    eax,0x1
c001147c:	74 38                	je     c00114b6 <sysShutdown(regs*)+0x4b>
c001147e:	83 f8 02             	cmp    eax,0x2
c0011481:	74 24                	je     c00114a7 <sysShutdown(regs*)+0x3c>
c0011483:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011488:	ba ff ff ff ff       	mov    edx,0xffffffff
c001148d:	83 c4 0c             	add    esp,0xc
c0011490:	c3                   	ret    
c0011491:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0011496:	8b 10                	mov    edx,DWORD PTR [eax]
c0011498:	6a 00                	push   0x0
c001149a:	6a 00                	push   0x0
c001149c:	6a 00                	push   0x0
c001149e:	50                   	push   eax
c001149f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	eb dc                	jmp    c0011483 <sysShutdown(regs*)+0x18>
c00114a7:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00114ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00114ae:	6a 00                	push   0x0
c00114b0:	6a 00                	push   0x0
c00114b2:	6a 01                	push   0x1
c00114b4:	eb e8                	jmp    c001149e <sysShutdown(regs*)+0x33>
c00114b6:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c00114bb:	85 c0                	test   eax,eax
c00114bd:	74 02                	je     c00114c1 <sysShutdown(regs*)+0x56>
c00114bf:	ff d0                	call   eax
c00114c1:	31 c0                	xor    eax,eax
c00114c3:	31 d2                	xor    edx,edx
c00114c5:	83 c4 0c             	add    esp,0xc
c00114c8:	c3                   	ret    

c00114c9 <sysCallRealpath(regs*)>:
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114d3:	85 d2                	test   edx,edx
c00114d5:	74 07                	je     c00114de <sysCallRealpath(regs*)+0x15>
c00114d7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114da:	85 c0                	test   eax,eax
c00114dc:	75 0b                	jne    c00114e9 <sysCallRealpath(regs*)+0x20>
c00114de:	b8 01 00 00 00       	mov    eax,0x1
c00114e3:	31 d2                	xor    edx,edx
c00114e5:	83 c4 0c             	add    esp,0xc
c00114e8:	c3                   	ret    
c00114e9:	51                   	push   ecx
c00114ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114f0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114f3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114f9:	51                   	push   ecx
c00114fa:	52                   	push   edx
c00114fb:	50                   	push   eax
c00114fc:	e8 b3 9a ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	31 c0                	xor    eax,eax
c0011506:	31 d2                	xor    edx,edx
c0011508:	83 c4 0c             	add    esp,0xc
c001150b:	c3                   	ret    

c001150c <sysCallReadDir(regs*)>:
c001150c:	53                   	push   ebx
c001150d:	83 ec 18             	sub    esp,0x18
c0011510:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011514:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011517:	83 f8 02             	cmp    eax,0x2
c001151a:	76 61                	jbe    c001157d <sysCallReadDir(regs*)+0x71>
c001151c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011523:	77 49                	ja     c001156e <sysCallReadDir(regs*)+0x62>
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	50                   	push   eax
c0011529:	e8 11 83 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	85 c0                	test   eax,eax
c0011533:	74 39                	je     c001156e <sysCallReadDir(regs*)+0x62>
c0011535:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001153d:	83 ec 0c             	sub    esp,0xc
c0011540:	8b 10                	mov    edx,DWORD PTR [eax]
c0011542:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011546:	51                   	push   ecx
c0011547:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001154a:	51                   	push   ecx
c001154b:	6a 00                	push   0x0
c001154d:	68 10 01 00 00       	push   0x110
c0011552:	50                   	push   eax
c0011553:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011556:	83 c4 20             	add    esp,0x20
c0011559:	85 c0                	test   eax,eax
c001155b:	74 29                	je     c0011586 <sysCallReadDir(regs*)+0x7a>
c001155d:	83 f8 07             	cmp    eax,0x7
c0011560:	74 1b                	je     c001157d <sysCallReadDir(regs*)+0x71>
c0011562:	b8 02 00 00 00       	mov    eax,0x2
c0011567:	31 d2                	xor    edx,edx
c0011569:	83 c4 18             	add    esp,0x18
c001156c:	5b                   	pop    ebx
c001156d:	c3                   	ret    
c001156e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011573:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011578:	83 c4 18             	add    esp,0x18
c001157b:	5b                   	pop    ebx
c001157c:	c3                   	ret    
c001157d:	b8 01 00 00 00       	mov    eax,0x1
c0011582:	31 d2                	xor    edx,edx
c0011584:	eb e3                	jmp    c0011569 <sysCallReadDir(regs*)+0x5d>
c0011586:	31 c0                	xor    eax,eax
c0011588:	31 d2                	xor    edx,edx
c001158a:	eb dd                	jmp    c0011569 <sysCallReadDir(regs*)+0x5d>

c001158c <sysCallIsATTY(regs*)>:
c001158c:	83 ec 0c             	sub    esp,0xc
c001158f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011593:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011596:	83 f8 02             	cmp    eax,0x2
c0011599:	76 07                	jbe    c00115a2 <sysCallIsATTY(regs*)+0x16>
c001159b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115a0:	75 28                	jne    c00115ca <sysCallIsATTY(regs*)+0x3e>
c00115a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00115b0:	85 c0                	test   eax,eax
c00115b2:	74 26                	je     c00115da <sysCallIsATTY(regs*)+0x4e>
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00115b9:	50                   	push   eax
c00115ba:	ff 12                	call   DWORD PTR [edx]
c00115bc:	31 d2                	xor    edx,edx
c00115be:	25 ff 00 00 00       	and    eax,0xff
c00115c3:	83 c4 10             	add    esp,0x10
c00115c6:	83 c4 0c             	add    esp,0xc
c00115c9:	c3                   	ret    
c00115ca:	83 ec 0c             	sub    esp,0xc
c00115cd:	50                   	push   eax
c00115ce:	e8 6c 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	85 c0                	test   eax,eax
c00115d8:	75 da                	jne    c00115b4 <sysCallIsATTY(regs*)+0x28>
c00115da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115e4:	83 c4 0c             	add    esp,0xc
c00115e7:	c3                   	ret    

c00115e8 <sysCallSeek(regs*)>:
c00115e8:	53                   	push   ebx
c00115e9:	83 ec 08             	sub    esp,0x8
c00115ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115f3:	8d 50 fd             	lea    edx,[eax-0x3]
c00115f6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115fc:	77 34                	ja     c0011632 <sysCallSeek(regs*)+0x4a>
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	50                   	push   eax
c0011602:	e8 38 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011607:	83 c4 0c             	add    esp,0xc
c001160a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001160d:	31 db                	xor    ebx,ebx
c001160f:	53                   	push   ebx
c0011610:	51                   	push   ecx
c0011611:	50                   	push   eax
c0011612:	e8 c5 9c ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0011617:	83 c4 10             	add    esp,0x10
c001161a:	85 c0                	test   eax,eax
c001161c:	0f 95 c0             	setne  al
c001161f:	31 d2                	xor    edx,edx
c0011621:	25 ff 00 00 00       	and    eax,0xff
c0011626:	f7 d8                	neg    eax
c0011628:	83 d2 00             	adc    edx,0x0
c001162b:	83 c4 08             	add    esp,0x8
c001162e:	f7 da                	neg    edx
c0011630:	5b                   	pop    ebx
c0011631:	c3                   	ret    
c0011632:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011637:	ba ff ff ff ff       	mov    edx,0xffffffff
c001163c:	83 c4 08             	add    esp,0x8
c001163f:	5b                   	pop    ebx
c0011640:	c3                   	ret    

c0011641 <sysCallTell(regs*)>:
c0011641:	53                   	push   ebx
c0011642:	83 ec 08             	sub    esp,0x8
c0011645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011649:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001164c:	83 f8 02             	cmp    eax,0x2
c001164f:	76 50                	jbe    c00116a1 <sysCallTell(regs*)+0x60>
c0011651:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011656:	76 19                	jbe    c0011671 <sysCallTell(regs*)+0x30>
c0011658:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001165b:	31 d2                	xor    edx,edx
c001165d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011663:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001166a:	31 c0                	xor    eax,eax
c001166c:	83 c4 08             	add    esp,0x8
c001166f:	5b                   	pop    ebx
c0011670:	c3                   	ret    
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	50                   	push   eax
c0011675:	e8 c5 81 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001167a:	5a                   	pop    edx
c001167b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001167e:	59                   	pop    ecx
c001167f:	53                   	push   ebx
c0011680:	50                   	push   eax
c0011681:	e8 ac 9c ff ff       	call   c000b332 <File::tell(unsigned long long*)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	85 c0                	test   eax,eax
c001168b:	0f 95 c0             	setne  al
c001168e:	31 d2                	xor    edx,edx
c0011690:	25 ff 00 00 00       	and    eax,0xff
c0011695:	f7 d8                	neg    eax
c0011697:	83 d2 00             	adc    edx,0x0
c001169a:	83 c4 08             	add    esp,0x8
c001169d:	f7 da                	neg    edx
c001169f:	5b                   	pop    ebx
c00116a0:	c3                   	ret    
c00116a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116ab:	83 c4 08             	add    esp,0x8
c00116ae:	5b                   	pop    ebx
c00116af:	c3                   	ret    

c00116b0 <sysCallSize(regs*)>:
c00116b0:	53                   	push   ebx
c00116b1:	83 ec 18             	sub    esp,0x18
c00116b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116bb:	83 f8 02             	cmp    eax,0x2
c00116be:	76 56                	jbe    c0011716 <sysCallSize(regs*)+0x66>
c00116c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116c5:	76 19                	jbe    c00116e0 <sysCallSize(regs*)+0x30>
c00116c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00116ca:	31 d2                	xor    edx,edx
c00116cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116d9:	31 c0                	xor    eax,eax
c00116db:	83 c4 18             	add    esp,0x18
c00116de:	5b                   	pop    ebx
c00116df:	c3                   	ret    
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	50                   	push   eax
c00116e4:	e8 56 81 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00116e9:	83 c4 0c             	add    esp,0xc
c00116ec:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116f0:	52                   	push   edx
c00116f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116f4:	52                   	push   edx
c00116f5:	50                   	push   eax
c00116f6:	e8 cf 9d ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	85 c0                	test   eax,eax
c0011700:	0f 95 c0             	setne  al
c0011703:	31 d2                	xor    edx,edx
c0011705:	25 ff 00 00 00       	and    eax,0xff
c001170a:	f7 d8                	neg    eax
c001170c:	83 d2 00             	adc    edx,0x0
c001170f:	83 c4 18             	add    esp,0x18
c0011712:	f7 da                	neg    edx
c0011714:	5b                   	pop    ebx
c0011715:	c3                   	ret    
c0011716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001171b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011720:	83 c4 18             	add    esp,0x18
c0011723:	5b                   	pop    ebx
c0011724:	c3                   	ret    

c0011725 <sysCallSizeFromFilename(regs*)>:
c0011725:	57                   	push   edi
c0011726:	56                   	push   esi
c0011727:	53                   	push   ebx
c0011728:	83 ec 20             	sub    esp,0x20
c001172b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001172f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011732:	83 fb 02             	cmp    ebx,0x2
c0011735:	0f 86 8c 00 00 00    	jbe    c00117c7 <sysCallSizeFromFilename(regs*)+0xa2>
c001173b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011741:	76 1b                	jbe    c001175e <sysCallSizeFromFilename(regs*)+0x39>
c0011743:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011746:	31 d2                	xor    edx,edx
c0011748:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001174e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011755:	83 c4 20             	add    esp,0x20
c0011758:	31 c0                	xor    eax,eax
c001175a:	5b                   	pop    ebx
c001175b:	5e                   	pop    esi
c001175c:	5f                   	pop    edi
c001175d:	c3                   	ret    
c001175e:	83 ec 0c             	sub    esp,0xc
c0011761:	68 14 01 00 00       	push   0x114
c0011766:	e8 ee 66 ff ff       	call   c0007e59 <malloc>
c001176b:	83 c4 0c             	add    esp,0xc
c001176e:	89 c7                	mov    edi,eax
c0011770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011775:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011778:	50                   	push   eax
c0011779:	53                   	push   ebx
c001177a:	57                   	push   edi
c001177b:	e8 de 99 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011780:	83 c4 0c             	add    esp,0xc
c0011783:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011787:	50                   	push   eax
c0011788:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001178b:	52                   	push   edx
c001178c:	57                   	push   edi
c001178d:	e8 38 9d ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0011792:	83 c4 10             	add    esp,0x10
c0011795:	85 ff                	test   edi,edi
c0011797:	74 14                	je     c00117ad <sysCallSizeFromFilename(regs*)+0x88>
c0011799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001179d:	8b 17                	mov    edx,DWORD PTR [edi]
c001179f:	83 ec 0c             	sub    esp,0xc
c00117a2:	57                   	push   edi
c00117a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117ad:	85 c0                	test   eax,eax
c00117af:	0f 95 c0             	setne  al
c00117b2:	31 d2                	xor    edx,edx
c00117b4:	25 ff 00 00 00       	and    eax,0xff
c00117b9:	f7 d8                	neg    eax
c00117bb:	83 d2 00             	adc    edx,0x0
c00117be:	83 c4 20             	add    esp,0x20
c00117c1:	f7 da                	neg    edx
c00117c3:	5b                   	pop    ebx
c00117c4:	5e                   	pop    esi
c00117c5:	5f                   	pop    edi
c00117c6:	c3                   	ret    
c00117c7:	83 c4 20             	add    esp,0x20
c00117ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117cf:	5b                   	pop    ebx
c00117d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	c3                   	ret    

c00117d8 <sysCallClose(regs*)>:
c00117d8:	53                   	push   ebx
c00117d9:	83 ec 08             	sub    esp,0x8
c00117dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117e3:	83 f8 02             	cmp    eax,0x2
c00117e6:	76 41                	jbe    c0011829 <sysCallClose(regs*)+0x51>
c00117e8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117ee:	83 fa 01             	cmp    edx,0x1
c00117f1:	76 2d                	jbe    c0011820 <sysCallClose(regs*)+0x48>
c00117f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117f8:	77 2f                	ja     c0011829 <sysCallClose(regs*)+0x51>
c00117fa:	83 ec 0c             	sub    esp,0xc
c00117fd:	50                   	push   eax
c00117fe:	e8 3c 80 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011803:	89 c3                	mov    ebx,eax
c0011805:	89 04 24             	mov    DWORD PTR [esp],eax
c0011808:	e8 6f 9a ff ff       	call   c000b27c <File::close()>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	85 db                	test   ebx,ebx
c0011812:	74 0c                	je     c0011820 <sysCallClose(regs*)+0x48>
c0011814:	83 ec 0c             	sub    esp,0xc
c0011817:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011819:	53                   	push   ebx
c001181a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	31 c0                	xor    eax,eax
c0011822:	31 d2                	xor    edx,edx
c0011824:	83 c4 08             	add    esp,0x8
c0011827:	5b                   	pop    ebx
c0011828:	c3                   	ret    
c0011829:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001182e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011833:	83 c4 08             	add    esp,0x8
c0011836:	5b                   	pop    ebx
c0011837:	c3                   	ret    

c0011838 <sysCallOpenDir(regs*)>:
c0011838:	56                   	push   esi
c0011839:	53                   	push   ebx
c001183a:	50                   	push   eax
c001183b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001183f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011842:	85 c0                	test   eax,eax
c0011844:	74 5b                	je     c00118a1 <sysCallOpenDir(regs*)+0x69>
c0011846:	83 ec 0c             	sub    esp,0xc
c0011849:	68 14 01 00 00       	push   0x114
c001184e:	e8 06 66 ff ff       	call   c0007e59 <malloc>
c0011853:	83 c4 0c             	add    esp,0xc
c0011856:	89 c6                	mov    esi,eax
c0011858:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001185d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011860:	50                   	push   eax
c0011861:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011864:	50                   	push   eax
c0011865:	56                   	push   esi
c0011866:	e8 1d 9e ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	85 f6                	test   esi,esi
c0011870:	74 2f                	je     c00118a1 <sysCallOpenDir(regs*)+0x69>
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	56                   	push   esi
c0011876:	e8 cd 9e ff ff       	call   c000b748 <Directory::open()>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	85 c0                	test   eax,eax
c0011880:	75 1f                	jne    c00118a1 <sysCallOpenDir(regs*)+0x69>
c0011882:	83 ec 0c             	sub    esp,0xc
c0011885:	56                   	push   esi
c0011886:	e8 bf 7c ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c001188b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	89 02                	mov    DWORD PTR [edx],eax
c0011893:	c1 f8 1f             	sar    eax,0x1f
c0011896:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011899:	31 c0                	xor    eax,eax
c001189b:	59                   	pop    ecx
c001189c:	31 d2                	xor    edx,edx
c001189e:	5b                   	pop    ebx
c001189f:	5e                   	pop    esi
c00118a0:	c3                   	ret    
c00118a1:	59                   	pop    ecx
c00118a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118ac:	5b                   	pop    ebx
c00118ad:	5e                   	pop    esi
c00118ae:	c3                   	ret    

c00118af <sysCallCloseDir(regs*)>:
c00118af:	53                   	push   ebx
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118ba:	8d 50 fd             	lea    edx,[eax-0x3]
c00118bd:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118c3:	77 2f                	ja     c00118f4 <sysCallCloseDir(regs*)+0x45>
c00118c5:	83 ec 0c             	sub    esp,0xc
c00118c8:	50                   	push   eax
c00118c9:	e8 71 7f ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00118ce:	89 c3                	mov    ebx,eax
c00118d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00118d3:	e8 cc 9e ff ff       	call   c000b7a4 <Directory::close()>
c00118d8:	83 c4 10             	add    esp,0x10
c00118db:	85 db                	test   ebx,ebx
c00118dd:	74 0c                	je     c00118eb <sysCallCloseDir(regs*)+0x3c>
c00118df:	83 ec 0c             	sub    esp,0xc
c00118e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118e4:	53                   	push   ebx
c00118e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	31 c0                	xor    eax,eax
c00118ed:	31 d2                	xor    edx,edx
c00118ef:	83 c4 08             	add    esp,0x8
c00118f2:	5b                   	pop    ebx
c00118f3:	c3                   	ret    
c00118f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118fe:	83 c4 08             	add    esp,0x8
c0011901:	5b                   	pop    ebx
c0011902:	c3                   	ret    

c0011903 <sysCallMakeDir(regs*)>:
c0011903:	56                   	push   esi
c0011904:	53                   	push   ebx
c0011905:	83 ec 10             	sub    esp,0x10
c0011908:	68 14 01 00 00       	push   0x114
c001190d:	e8 47 65 ff ff       	call   c0007e59 <malloc>
c0011912:	83 c4 0c             	add    esp,0xc
c0011915:	89 c3                	mov    ebx,eax
c0011917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001191c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001191f:	56                   	push   esi
c0011920:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011924:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011927:	50                   	push   eax
c0011928:	53                   	push   ebx
c0011929:	e8 5a 9d ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	85 db                	test   ebx,ebx
c0011933:	74 32                	je     c0011967 <sysCallMakeDir(regs*)+0x64>
c0011935:	83 ec 0c             	sub    esp,0xc
c0011938:	53                   	push   ebx
c0011939:	e8 ea 9f ff ff       	call   c000b928 <Directory::create()>
c001193e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011941:	89 c6                	mov    esi,eax
c0011943:	e8 5c 9e ff ff       	call   c000b7a4 <Directory::close()>
c0011948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001194a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001194d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	31 c0                	xor    eax,eax
c0011955:	59                   	pop    ecx
c0011956:	85 f6                	test   esi,esi
c0011958:	5b                   	pop    ebx
c0011959:	0f 95 c0             	setne  al
c001195c:	5e                   	pop    esi
c001195d:	31 d2                	xor    edx,edx
c001195f:	f7 d8                	neg    eax
c0011961:	83 d2 00             	adc    edx,0x0
c0011964:	f7 da                	neg    edx
c0011966:	c3                   	ret    
c0011967:	59                   	pop    ecx
c0011968:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001196d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011972:	5b                   	pop    ebx
c0011973:	5e                   	pop    esi
c0011974:	c3                   	ret    

c0011975 <sysCallWait(regs*)>:
c0011975:	83 ec 10             	sub    esp,0x10
c0011978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001197c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001197f:	52                   	push   edx
c0011980:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011983:	51                   	push   ecx
c0011984:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011987:	50                   	push   eax
c0011988:	e8 6b 23 00 00       	call   c0013cf8 <waitTask(int, int*, int)>
c001198d:	83 c4 1c             	add    esp,0x1c
c0011990:	99                   	cdq    
c0011991:	c3                   	ret    

c0011992 <sysCallNotImpl(regs*)>:
c0011992:	83 ec 18             	sub    esp,0x18
c0011995:	68 49 e9 01 c0       	push   0xc001e949
c001199a:	e8 d8 ed ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001199f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119a9:	83 c4 1c             	add    esp,0x1c
c00119ac:	c3                   	ret    

c00119ad <sysPanic(regs*)>:
c00119ad:	83 ec 18             	sub    esp,0x18
c00119b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00119b7:	50                   	push   eax
c00119b8:	e8 ba ed ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00119bd:	b8 01 00 00 00       	mov    eax,0x1
c00119c2:	31 d2                	xor    edx,edx
c00119c4:	83 c4 1c             	add    esp,0x1c
c00119c7:	c3                   	ret    

c00119c8 <sysCallRmdir(regs*)>:
c00119c8:	56                   	push   esi
c00119c9:	53                   	push   ebx
c00119ca:	83 ec 20             	sub    esp,0x20
c00119cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119d1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119d4:	68 14 01 00 00       	push   0x114
c00119d9:	e8 7b 64 ff ff       	call   c0007e59 <malloc>
c00119de:	83 c4 0c             	add    esp,0xc
c00119e1:	89 c3                	mov    ebx,eax
c00119e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119eb:	50                   	push   eax
c00119ec:	56                   	push   esi
c00119ed:	53                   	push   ebx
c00119ee:	e8 6b 97 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00119f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119f6:	e8 9b 99 ff ff       	call   c000b396 <File::unlink()>
c00119fb:	83 c4 10             	add    esp,0x10
c00119fe:	85 db                	test   ebx,ebx
c0011a00:	74 14                	je     c0011a16 <sysCallRmdir(regs*)+0x4e>
c0011a02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a08:	83 ec 0c             	sub    esp,0xc
c0011a0b:	53                   	push   ebx
c0011a0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a16:	85 c0                	test   eax,eax
c0011a18:	0f 95 c0             	setne  al
c0011a1b:	31 d2                	xor    edx,edx
c0011a1d:	25 ff 00 00 00       	and    eax,0xff
c0011a22:	f7 d8                	neg    eax
c0011a24:	83 d2 00             	adc    edx,0x0
c0011a27:	83 c4 14             	add    esp,0x14
c0011a2a:	f7 da                	neg    edx
c0011a2c:	5b                   	pop    ebx
c0011a2d:	5e                   	pop    esi
c0011a2e:	c3                   	ret    

c0011a2f <sysCallUnlink(regs*)>:
c0011a2f:	56                   	push   esi
c0011a30:	53                   	push   ebx
c0011a31:	83 ec 20             	sub    esp,0x20
c0011a34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a38:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a3b:	68 14 01 00 00       	push   0x114
c0011a40:	e8 14 64 ff ff       	call   c0007e59 <malloc>
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	89 c3                	mov    ebx,eax
c0011a4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a52:	50                   	push   eax
c0011a53:	56                   	push   esi
c0011a54:	53                   	push   ebx
c0011a55:	e8 04 97 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011a5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a5d:	e8 34 99 ff ff       	call   c000b396 <File::unlink()>
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	85 db                	test   ebx,ebx
c0011a67:	74 14                	je     c0011a7d <sysCallUnlink(regs*)+0x4e>
c0011a69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a6f:	83 ec 0c             	sub    esp,0xc
c0011a72:	53                   	push   ebx
c0011a73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a7d:	85 c0                	test   eax,eax
c0011a7f:	0f 95 c0             	setne  al
c0011a82:	31 d2                	xor    edx,edx
c0011a84:	25 ff 00 00 00       	and    eax,0xff
c0011a89:	f7 d8                	neg    eax
c0011a8b:	83 d2 00             	adc    edx,0x0
c0011a8e:	83 c4 14             	add    esp,0x14
c0011a91:	f7 da                	neg    edx
c0011a93:	5b                   	pop    ebx
c0011a94:	5e                   	pop    esi
c0011a95:	c3                   	ret    

c0011a96 <sysCallGetArgv(regs*)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a9d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011aa0:	85 c0                	test   eax,eax
c0011aa2:	78 2c                	js     c0011ad0 <sysCallGetArgv(regs*)+0x3a>
c0011aa4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011aaa:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011aad:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011ab3:	7d 1b                	jge    c0011ad0 <sysCallGetArgv(regs*)+0x3a>
c0011ab5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011abc:	85 c0                	test   eax,eax
c0011abe:	74 18                	je     c0011ad8 <sysCallGetArgv(regs*)+0x42>
c0011ac0:	83 ec 08             	sub    esp,0x8
c0011ac3:	50                   	push   eax
c0011ac4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011ac7:	50                   	push   eax
c0011ac8:	e8 53 eb fe ff       	call   c0000620 <strcpy>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	31 c0                	xor    eax,eax
c0011ad2:	31 d2                	xor    edx,edx
c0011ad4:	83 c4 0c             	add    esp,0xc
c0011ad7:	c3                   	ret    
c0011ad8:	b8 01 00 00 00       	mov    eax,0x1
c0011add:	31 d2                	xor    edx,edx
c0011adf:	83 c4 0c             	add    esp,0xc
c0011ae2:	c3                   	ret    

c0011ae3 <sysCallUSleep(regs*)>:
c0011ae3:	83 ec 1c             	sub    esp,0x1c
c0011ae6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011aea:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011aed:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011af0:	6a 00                	push   0x0
c0011af2:	6a 64                	push   0x64
c0011af4:	52                   	push   edx
c0011af5:	50                   	push   eax
c0011af6:	e8 45 a7 00 00       	call   c001c240 <__udivdi3>
c0011afb:	83 c4 14             	add    esp,0x14
c0011afe:	50                   	push   eax
c0011aff:	e8 c8 22 00 00       	call   c0013dcc <milliTenthSleep(unsigned int)>
c0011b04:	31 c0                	xor    eax,eax
c0011b06:	31 d2                	xor    edx,edx
c0011b08:	83 c4 1c             	add    esp,0x1c
c0011b0b:	c3                   	ret    

c0011b0c <sysCallSpawn(regs*)>:
c0011b0c:	56                   	push   esi
c0011b0d:	53                   	push   ebx
c0011b0e:	50                   	push   eax
c0011b0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b16:	85 c0                	test   eax,eax
c0011b18:	75 08                	jne    c0011b22 <sysCallSpawn(regs*)+0x16>
c0011b1a:	59                   	pop    ecx
c0011b1b:	31 c0                	xor    eax,eax
c0011b1d:	31 d2                	xor    edx,edx
c0011b1f:	5b                   	pop    ebx
c0011b20:	5e                   	pop    esi
c0011b21:	c3                   	ret    
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	68 1f 07 00 00       	push   0x71f
c0011b2a:	e8 2a 63 ff ff       	call   c0007e59 <malloc>
c0011b2f:	83 c4 10             	add    esp,0x10
c0011b32:	89 c6                	mov    esi,eax
c0011b34:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b3a:	85 c0                	test   eax,eax
c0011b3c:	75 33                	jne    c0011b71 <sysCallSpawn(regs*)+0x65>
c0011b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b46:	52                   	push   edx
c0011b47:	50                   	push   eax
c0011b48:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011b4b:	53                   	push   ebx
c0011b4c:	56                   	push   esi
c0011b4d:	e8 5e 19 00 00       	call   c00134b0 <Process::Process(char const*, Process*, char**)>
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b5c:	75 bc                	jne    c0011b1a <sysCallSpawn(regs*)+0xe>
c0011b5e:	83 ec 0c             	sub    esp,0xc
c0011b61:	56                   	push   esi
c0011b62:	e8 3d 1e 00 00       	call   c00139a4 <Process::createUserThread()>
c0011b67:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	99                   	cdq    
c0011b6d:	59                   	pop    ecx
c0011b6e:	5b                   	pop    ebx
c0011b6f:	5e                   	pop    esi
c0011b70:	c3                   	ret    
c0011b71:	31 c0                	xor    eax,eax
c0011b73:	eb d1                	jmp    c0011b46 <sysCallSpawn(regs*)+0x3a>

c0011b75 <sysCallGetEnv(regs*)>:
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 1c             	sub    esp,0x1c
c0011b7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b84:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b87:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8d:	50                   	push   eax
c0011b8e:	e8 30 eb ff ff       	call   c00106c3 <Krnl::getProcessTotalEnvCount(Process*)>
c0011b93:	83 c4 10             	add    esp,0x10
c0011b96:	39 c7                	cmp    edi,eax
c0011b98:	7c 14                	jl     c0011bae <sysCallGetEnv(regs*)+0x39>
c0011b9a:	85 f6                	test   esi,esi
c0011b9c:	75 0b                	jne    c0011ba9 <sysCallGetEnv(regs*)+0x34>
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	31 c0                	xor    eax,eax
c0011ba3:	5b                   	pop    ebx
c0011ba4:	31 d2                	xor    edx,edx
c0011ba6:	5e                   	pop    esi
c0011ba7:	5f                   	pop    edi
c0011ba8:	c3                   	ret    
c0011ba9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bac:	eb f0                	jmp    c0011b9e <sysCallGetEnv(regs*)+0x29>
c0011bae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011bb2:	52                   	push   edx
c0011bb3:	57                   	push   edi
c0011bb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bba:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011bbd:	51                   	push   ecx
c0011bbe:	50                   	push   eax
c0011bbf:	e8 1f eb ff ff       	call   c00106e3 <Krnl::getProcessEnvPair(Process*, int)>
c0011bc4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011bc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bcb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011bcf:	83 c4 0c             	add    esp,0xc
c0011bd2:	85 db                	test   ebx,ebx
c0011bd4:	75 23                	jne    c0011bf9 <sysCallGetEnv(regs*)+0x84>
c0011bd6:	83 ec 0c             	sub    esp,0xc
c0011bd9:	50                   	push   eax
c0011bda:	e8 81 e9 fe ff       	call   c0000560 <strlen>
c0011bdf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011be2:	89 c3                	mov    ebx,eax
c0011be4:	e8 77 e9 fe ff       	call   c0000560 <strlen>
c0011be9:	31 d2                	xor    edx,edx
c0011beb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011bef:	83 c4 10             	add    esp,0x10
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	5b                   	pop    ebx
c0011bf6:	5e                   	pop    esi
c0011bf7:	5f                   	pop    edi
c0011bf8:	c3                   	ret    
c0011bf9:	83 ec 08             	sub    esp,0x8
c0011bfc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bff:	50                   	push   eax
c0011c00:	56                   	push   esi
c0011c01:	e8 1a ea fe ff       	call   c0000620 <strcpy>
c0011c06:	58                   	pop    eax
c0011c07:	5a                   	pop    edx
c0011c08:	68 63 e9 01 c0       	push   0xc001e963
c0011c0d:	56                   	push   esi
c0011c0e:	e8 cd eb fe ff       	call   c00007e0 <strcat>
c0011c13:	59                   	pop    ecx
c0011c14:	5b                   	pop    ebx
c0011c15:	57                   	push   edi
c0011c16:	56                   	push   esi
c0011c17:	e8 c4 eb fe ff       	call   c00007e0 <strcat>
c0011c1c:	83 c4 10             	add    esp,0x10
c0011c1f:	e9 7a ff ff ff       	jmp    c0011b9e <sysCallGetEnv(regs*)+0x29>

c0011c24 <sysSetFatAttrib(regs*)>:
c0011c24:	57                   	push   edi
c0011c25:	56                   	push   esi
c0011c26:	53                   	push   ebx
c0011c27:	83 ec 1c             	sub    esp,0x1c
c0011c2a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011c2e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011c31:	68 14 01 00 00       	push   0x114
c0011c36:	e8 1e 62 ff ff       	call   c0007e59 <malloc>
c0011c3b:	83 c4 0c             	add    esp,0xc
c0011c3e:	89 c3                	mov    ebx,eax
c0011c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c48:	50                   	push   eax
c0011c49:	57                   	push   edi
c0011c4a:	53                   	push   ebx
c0011c4b:	e8 0e 95 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011c50:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c53:	83 c4 0c             	add    esp,0xc
c0011c56:	0f b6 d4             	movzx  edx,ah
c0011c59:	25 ff 00 00 00       	and    eax,0xff
c0011c5e:	52                   	push   edx
c0011c5f:	50                   	push   eax
c0011c60:	53                   	push   ebx
c0011c61:	e8 ca 97 ff ff       	call   c000b430 <File::chfatattr(unsigned char, unsigned char)>
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	85 db                	test   ebx,ebx
c0011c6b:	74 14                	je     c0011c81 <sysSetFatAttrib(regs*)+0x5d>
c0011c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c71:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	53                   	push   ebx
c0011c77:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c81:	85 c0                	test   eax,eax
c0011c83:	0f 95 c0             	setne  al
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	25 ff 00 00 00       	and    eax,0xff
c0011c8d:	f7 d8                	neg    eax
c0011c8f:	83 d2 00             	adc    edx,0x0
c0011c92:	83 c4 10             	add    esp,0x10
c0011c95:	f7 da                	neg    edx
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	c3                   	ret    

c0011c9b <sysPipe(regs*)>:
c0011c9b:	57                   	push   edi
c0011c9c:	56                   	push   esi
c0011c9d:	53                   	push   ebx
c0011c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca2:	83 ec 0c             	sub    esp,0xc
c0011ca5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011ca8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011cab:	6a 20                	push   0x20
c0011cad:	e8 a7 61 ff ff       	call   c0007e59 <malloc>
c0011cb2:	89 c3                	mov    ebx,eax
c0011cb4:	58                   	pop    eax
c0011cb5:	5a                   	pop    edx
c0011cb6:	68 00 50 00 00       	push   0x5000
c0011cbb:	53                   	push   ebx
c0011cbc:	e8 8f 6b ff ff       	call   c0008850 <Pipe::Pipe(int)>
c0011cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cc4:	e8 81 78 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011cc9:	89 07                	mov    DWORD PTR [edi],eax
c0011ccb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cce:	e8 77 78 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	89 06                	mov    DWORD PTR [esi],eax
c0011cd8:	31 d2                	xor    edx,edx
c0011cda:	5b                   	pop    ebx
c0011cdb:	31 c0                	xor    eax,eax
c0011cdd:	5e                   	pop    esi
c0011cde:	5f                   	pop    edi
c0011cdf:	c3                   	ret    

c0011ce0 <sysGetUnixTime(regs*)>:
c0011ce0:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0011ce5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011ceb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cef:	e9 7a 9e ff ff       	jmp    c000bb6e <Clock::timeInSecondsLocal()>

c0011cf4 <string_ends_with(char const*, char const*)>:
c0011cf4:	57                   	push   edi
c0011cf5:	56                   	push   esi
c0011cf6:	53                   	push   ebx
c0011cf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cfb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cff:	83 ec 0c             	sub    esp,0xc
c0011d02:	53                   	push   ebx
c0011d03:	e8 58 e8 fe ff       	call   c0000560 <strlen>
c0011d08:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d0b:	89 c6                	mov    esi,eax
c0011d0d:	e8 4e e8 fe ff       	call   c0000560 <strlen>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	39 c6                	cmp    esi,eax
c0011d17:	7d 06                	jge    c0011d1f <string_ends_with(char const*, char const*)+0x2b>
c0011d19:	5b                   	pop    ebx
c0011d1a:	31 c0                	xor    eax,eax
c0011d1c:	5e                   	pop    esi
c0011d1d:	5f                   	pop    edi
c0011d1e:	c3                   	ret    
c0011d1f:	83 ec 08             	sub    esp,0x8
c0011d22:	29 c6                	sub    esi,eax
c0011d24:	57                   	push   edi
c0011d25:	01 f3                	add    ebx,esi
c0011d27:	53                   	push   ebx
c0011d28:	e8 d3 e9 fe ff       	call   c0000700 <strcmp>
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	85 c0                	test   eax,eax
c0011d32:	5b                   	pop    ebx
c0011d33:	0f 94 c0             	sete   al
c0011d36:	5e                   	pop    esi
c0011d37:	25 ff 00 00 00       	and    eax,0xff
c0011d3c:	5f                   	pop    edi
c0011d3d:	c3                   	ret    

c0011d3e <sysCallOpen(regs*)>:
c0011d3e:	56                   	push   esi
c0011d3f:	53                   	push   ebx
c0011d40:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d46:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d4d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d50:	85 c9                	test   ecx,ecx
c0011d52:	0f 84 b9 01 00 00    	je     c0011f11 <sysCallOpen(regs*)+0x1d3>
c0011d58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d5b:	85 c0                	test   eax,eax
c0011d5d:	0f 84 ae 01 00 00    	je     c0011f11 <sysCallOpen(regs*)+0x1d3>
c0011d63:	52                   	push   edx
c0011d64:	68 65 e9 01 c0       	push   0xc001e965
c0011d69:	50                   	push   eax
c0011d6a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d6e:	56                   	push   esi
c0011d6f:	e8 40 92 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d74:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d77:	e8 e4 e7 fe ff       	call   c0000560 <strlen>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	48                   	dec    eax
c0011d80:	74 1d                	je     c0011d9f <sysCallOpen(regs*)+0x61>
c0011d82:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d85:	eb 0f                	jmp    c0011d96 <sysCallOpen(regs*)+0x58>
c0011d87:	80 fa 3a             	cmp    dl,0x3a
c0011d8a:	74 0f                	je     c0011d9b <sysCallOpen(regs*)+0x5d>
c0011d8c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d90:	48                   	dec    eax
c0011d91:	74 0c                	je     c0011d9f <sysCallOpen(regs*)+0x61>
c0011d93:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d96:	80 fa 2e             	cmp    dl,0x2e
c0011d99:	75 ec                	jne    c0011d87 <sysCallOpen(regs*)+0x49>
c0011d9b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d9f:	83 ec 08             	sub    esp,0x8
c0011da2:	68 69 e9 01 c0       	push   0xc001e969
c0011da7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011daa:	50                   	push   eax
c0011dab:	e8 44 ff ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011db0:	83 c4 10             	add    esp,0x10
c0011db3:	85 c0                	test   eax,eax
c0011db5:	74 1d                	je     c0011dd4 <sysCallOpen(regs*)+0x96>
c0011db7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011dba:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011dc0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dc7:	81 c4 04 01 00 00    	add    esp,0x104
c0011dcd:	31 c0                	xor    eax,eax
c0011dcf:	31 d2                	xor    edx,edx
c0011dd1:	5b                   	pop    ebx
c0011dd2:	5e                   	pop    esi
c0011dd3:	c3                   	ret    
c0011dd4:	83 ec 08             	sub    esp,0x8
c0011dd7:	68 6e e9 01 c0       	push   0xc001e96e
c0011ddc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ddf:	50                   	push   eax
c0011de0:	e8 0f ff ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011de5:	83 c4 10             	add    esp,0x10
c0011de8:	85 c0                	test   eax,eax
c0011dea:	75 cb                	jne    c0011db7 <sysCallOpen(regs*)+0x79>
c0011dec:	83 ec 08             	sub    esp,0x8
c0011def:	68 6a e9 01 c0       	push   0xc001e96a
c0011df4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011df7:	50                   	push   eax
c0011df8:	e8 03 e9 fe ff       	call   c0000700 <strcmp>
c0011dfd:	83 c4 10             	add    esp,0x10
c0011e00:	85 c0                	test   eax,eax
c0011e02:	74 b3                	je     c0011db7 <sysCallOpen(regs*)+0x79>
c0011e04:	83 ec 08             	sub    esp,0x8
c0011e07:	68 69 e9 01 c0       	push   0xc001e969
c0011e0c:	56                   	push   esi
c0011e0d:	e8 e2 fe ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	85 c0                	test   eax,eax
c0011e17:	75 9e                	jne    c0011db7 <sysCallOpen(regs*)+0x79>
c0011e19:	83 ec 08             	sub    esp,0x8
c0011e1c:	68 73 e9 01 c0       	push   0xc001e973
c0011e21:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e24:	50                   	push   eax
c0011e25:	e8 ca fe ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011e2a:	83 c4 10             	add    esp,0x10
c0011e2d:	85 c0                	test   eax,eax
c0011e2f:	0f 85 ef 00 00 00    	jne    c0011f24 <sysCallOpen(regs*)+0x1e6>
c0011e35:	83 ec 08             	sub    esp,0x8
c0011e38:	68 78 e9 01 c0       	push   0xc001e978
c0011e3d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e40:	50                   	push   eax
c0011e41:	e8 ae fe ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	85 c0                	test   eax,eax
c0011e4b:	0f 85 d3 00 00 00    	jne    c0011f24 <sysCallOpen(regs*)+0x1e6>
c0011e51:	83 ec 08             	sub    esp,0x8
c0011e54:	68 74 e9 01 c0       	push   0xc001e974
c0011e59:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e5c:	51                   	push   ecx
c0011e5d:	e8 9e e8 fe ff       	call   c0000700 <strcmp>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	85 c0                	test   eax,eax
c0011e67:	0f 84 b7 00 00 00    	je     c0011f24 <sysCallOpen(regs*)+0x1e6>
c0011e6d:	83 ec 08             	sub    esp,0x8
c0011e70:	68 73 e9 01 c0       	push   0xc001e973
c0011e75:	56                   	push   esi
c0011e76:	e8 79 fe ff ff       	call   c0011cf4 <string_ends_with(char const*, char const*)>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	85 c0                	test   eax,eax
c0011e80:	0f 85 9e 00 00 00    	jne    c0011f24 <sysCallOpen(regs*)+0x1e6>
c0011e86:	83 ec 0c             	sub    esp,0xc
c0011e89:	68 14 01 00 00       	push   0x114
c0011e8e:	e8 c6 5f ff ff       	call   c0007e59 <malloc>
c0011e93:	83 c4 0c             	add    esp,0xc
c0011e96:	89 c6                	mov    esi,eax
c0011e98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ea0:	50                   	push   eax
c0011ea1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ea4:	52                   	push   edx
c0011ea5:	56                   	push   esi
c0011ea6:	e8 b3 92 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	85 f6                	test   esi,esi
c0011eb0:	74 5f                	je     c0011f11 <sysCallOpen(regs*)+0x1d3>
c0011eb2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011eb5:	89 d0                	mov    eax,edx
c0011eb7:	25 ff 00 00 00       	and    eax,0xff
c0011ebc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ebf:	89 d0                	mov    eax,edx
c0011ec1:	83 e0 01             	and    eax,0x1
c0011ec4:	f6 c2 02             	test   dl,0x2
c0011ec7:	74 03                	je     c0011ecc <sysCallOpen(regs*)+0x18e>
c0011ec9:	83 c8 02             	or     eax,0x2
c0011ecc:	f6 c2 04             	test   dl,0x4
c0011ecf:	74 03                	je     c0011ed4 <sysCallOpen(regs*)+0x196>
c0011ed1:	83 c8 04             	or     eax,0x4
c0011ed4:	f6 c2 08             	test   dl,0x8
c0011ed7:	74 03                	je     c0011edc <sysCallOpen(regs*)+0x19e>
c0011ed9:	83 c8 0a             	or     eax,0xa
c0011edc:	83 e2 10             	and    edx,0x10
c0011edf:	74 03                	je     c0011ee4 <sysCallOpen(regs*)+0x1a6>
c0011ee1:	83 c8 12             	or     eax,0x12
c0011ee4:	83 ec 08             	sub    esp,0x8
c0011ee7:	50                   	push   eax
c0011ee8:	56                   	push   esi
c0011ee9:	e8 30 93 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	85 c0                	test   eax,eax
c0011ef3:	75 1c                	jne    c0011f11 <sysCallOpen(regs*)+0x1d3>
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	56                   	push   esi
c0011ef9:	e8 4c 76 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011efe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	89 02                	mov    DWORD PTR [edx],eax
c0011f06:	c1 f8 1f             	sar    eax,0x1f
c0011f09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f0c:	e9 b6 fe ff ff       	jmp    c0011dc7 <sysCallOpen(regs*)+0x89>
c0011f11:	81 c4 04 01 00 00    	add    esp,0x104
c0011f17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f21:	5b                   	pop    ebx
c0011f22:	5e                   	pop    esi
c0011f23:	c3                   	ret    
c0011f24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f27:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011f2d:	e9 8e fe ff ff       	jmp    c0011dc0 <sysCallOpen(regs*)+0x82>

c0011f32 <Sys::loadSyscalls()>:
c0011f32:	c7 05 e0 34 02 c0 0e 13 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc001130e
c0011f3c:	c7 05 e4 34 02 c0 05 0f 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0010f05
c0011f46:	c7 05 e8 34 02 c0 f4 10 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc00110f4
c0011f50:	c7 05 ec 34 02 c0 44 12 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0011244
c0011f5a:	c7 05 f0 34 02 c0 8c 10 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc001108c
c0011f64:	c7 05 f4 34 02 c0 3c 0f 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc0010f3c
c0011f6e:	c7 05 f8 34 02 c0 1d 0f 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010f1d
c0011f78:	c7 05 fc 34 02 c0 49 11 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0011149
c0011f82:	c7 05 04 35 02 c0 d8 17 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc00117d8
c0011f8c:	c7 05 00 35 02 c0 3e 1d 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0011d3e
c0011f96:	c7 05 08 35 02 c0 38 18 01 c0 	mov    DWORD PTR ds:0xc0023508,0xc0011838
c0011fa0:	c7 05 0c 35 02 c0 0c 15 01 c0 	mov    DWORD PTR ds:0xc002350c,0xc001150c
c0011faa:	c7 05 10 35 02 c0 33 13 01 c0 	mov    DWORD PTR ds:0xc0023510,0xc0011333
c0011fb4:	c7 05 14 35 02 c0 38 13 01 c0 	mov    DWORD PTR ds:0xc0023514,0xc0011338
c0011fbe:	c7 05 18 35 02 c0 03 19 01 c0 	mov    DWORD PTR ds:0xc0023518,0xc0011903
c0011fc8:	c7 05 1c 35 02 c0 af 18 01 c0 	mov    DWORD PTR ds:0xc002351c,0xc00118af
c0011fd2:	c7 05 20 35 02 c0 e8 15 01 c0 	mov    DWORD PTR ds:0xc0023520,0xc00115e8
c0011fdc:	c7 05 24 35 02 c0 41 16 01 c0 	mov    DWORD PTR ds:0xc0023524,0xc0011641
c0011fe6:	c7 05 28 35 02 c0 b0 16 01 c0 	mov    DWORD PTR ds:0xc0023528,0xc00116b0
c0011ff0:	c7 05 2c 35 02 c0 3d 13 01 c0 	mov    DWORD PTR ds:0xc002352c,0xc001133d
c0011ffa:	c7 05 30 35 02 c0 75 19 01 c0 	mov    DWORD PTR ds:0xc0023530,0xc0011975
c0012004:	c7 05 34 35 02 c0 92 19 01 c0 	mov    DWORD PTR ds:0xc0023534,0xc0011992
c001200e:	c7 05 38 35 02 c0 92 19 01 c0 	mov    DWORD PTR ds:0xc0023538,0xc0011992
c0012018:	c7 05 3c 35 02 c0 c8 19 01 c0 	mov    DWORD PTR ds:0xc002353c,0xc00119c8
c0012022:	c7 05 40 35 02 c0 2f 1a 01 c0 	mov    DWORD PTR ds:0xc0023540,0xc0011a2f
c001202c:	c7 05 44 35 02 c0 47 13 01 c0 	mov    DWORD PTR ds:0xc0023544,0xc0011347
c0012036:	c7 05 48 35 02 c0 96 1a 01 c0 	mov    DWORD PTR ds:0xc0023548,0xc0011a96
c0012040:	c7 05 4c 35 02 c0 c9 14 01 c0 	mov    DWORD PTR ds:0xc002354c,0xc00114c9
c001204a:	c7 05 50 35 02 c0 57 13 01 c0 	mov    DWORD PTR ds:0xc0023550,0xc0011357
c0012054:	c7 05 54 35 02 c0 8c 15 01 c0 	mov    DWORD PTR ds:0xc0023554,0xc001158c
c001205e:	c7 05 58 35 02 c0 e3 1a 01 c0 	mov    DWORD PTR ds:0xc0023558,0xc0011ae3
c0012068:	c7 05 5c 35 02 c0 25 17 01 c0 	mov    DWORD PTR ds:0xc002355c,0xc0011725
c0012072:	c7 05 60 35 02 c0 0c 1b 01 c0 	mov    DWORD PTR ds:0xc0023560,0xc0011b0c
c001207c:	c7 05 64 35 02 c0 75 1b 01 c0 	mov    DWORD PTR ds:0xc0023564,0xc0011b75
c0012086:	c7 05 6c 35 02 c0 5f 13 01 c0 	mov    DWORD PTR ds:0xc002356c,0xc001135f
c0012090:	c7 05 70 35 02 c0 cc 13 01 c0 	mov    DWORD PTR ds:0xc0023570,0xc00113cc
c001209a:	c7 05 74 35 02 c0 16 14 01 c0 	mov    DWORD PTR ds:0xc0023574,0xc0011416
c00120a4:	c7 05 78 35 02 c0 24 1c 01 c0 	mov    DWORD PTR ds:0xc0023578,0xc0011c24
c00120ae:	c7 05 7c 35 02 c0 ad 19 01 c0 	mov    DWORD PTR ds:0xc002357c,0xc00119ad
c00120b8:	c7 05 80 35 02 c0 6b 14 01 c0 	mov    DWORD PTR ds:0xc0023580,0xc001146b
c00120c2:	c7 05 84 35 02 c0 9b 1c 01 c0 	mov    DWORD PTR ds:0xc0023584,0xc0011c9b
c00120cc:	c7 05 88 35 02 c0 e0 1c 01 c0 	mov    DWORD PTR ds:0xc0023588,0xc0011ce0
c00120d6:	c7 05 8c 35 02 c0 e4 0f 01 c0 	mov    DWORD PTR ds:0xc002358c,0xc0010fe4
c00120e0:	c7 05 90 35 02 c0 65 11 01 c0 	mov    DWORD PTR ds:0xc0023590,0xc0011165
c00120ea:	c7 05 94 35 02 c0 fa 11 01 c0 	mov    DWORD PTR ds:0xc0023594,0xc00111fa
c00120f4:	c7 05 98 35 02 c0 cf 0e 01 c0 	mov    DWORD PTR ds:0xc0023598,0xc0010ecf
c00120fe:	c7 05 9c 35 02 c0 ac 12 01 c0 	mov    DWORD PTR ds:0xc002359c,0xc00112ac
c0012108:	c7 05 a0 35 02 c0 48 0f 01 c0 	mov    DWORD PTR ds:0xc00235a0,0xc0010f48
c0012112:	c7 05 a4 35 02 c0 62 0f 01 c0 	mov    DWORD PTR ds:0xc00235a4,0xc0010f62
c001211c:	c3                   	ret    

c001211d <Sys::systemCall(regs*, void*)>:
c001211d:	53                   	push   ebx
c001211e:	83 ec 08             	sub    esp,0x8
c0012121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012125:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012128:	83 f8 7f             	cmp    eax,0x7f
c001212b:	77 16                	ja     c0012143 <Sys::systemCall(regs*, void*)+0x26>
c001212d:	8b 14 85 e0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb20]
c0012134:	85 d2                	test   edx,edx
c0012136:	74 0b                	je     c0012143 <Sys::systemCall(regs*, void*)+0x26>
c0012138:	83 ec 0c             	sub    esp,0xc
c001213b:	53                   	push   ebx
c001213c:	ff d2                	call   edx
c001213e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012141:	eb 0d                	jmp    c0012150 <Sys::systemCall(regs*, void*)+0x33>
c0012143:	52                   	push   edx
c0012144:	52                   	push   edx
c0012145:	50                   	push   eax
c0012146:	68 7d e9 01 c0       	push   0xc001e97d
c001214b:	e8 98 8a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012150:	83 c4 10             	add    esp,0x10
c0012153:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012158:	31 d2                	xor    edx,edx
c001215a:	83 c4 08             	add    esp,0x8
c001215d:	5b                   	pop    ebx
c001215e:	c3                   	ret    

c001215f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001215f:	55                   	push   ebp
c0012160:	57                   	push   edi
c0012161:	56                   	push   esi
c0012162:	53                   	push   ebx
c0012163:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012169:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012171:	0f 95 c2             	setne  dl
c0012174:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001217c:	0f 94 c0             	sete   al
c001217f:	84 c2                	test   dl,al
c0012181:	74 34                	je     c00121b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012183:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001218e:	74 27                	je     c00121b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012190:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012197:	05 00 10 00 00       	add    eax,0x1000
c001219c:	89 c1                	mov    ecx,eax
c001219e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121a3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00121a9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00121b0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00121b7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00121be:	83 ec 0c             	sub    esp,0xc
c00121c1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00121c7:	6a 01                	push   0x1
c00121c9:	e8 c7 77 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c00121ce:	83 c4 10             	add    esp,0x10
c00121d1:	89 c3                	mov    ebx,eax
c00121d3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00121d9:	0f 86 25 01 00 00    	jbe    c0012304 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00121df:	c1 ee 0c             	shr    esi,0xc
c00121e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00121e9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00121ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121f5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00121fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012200:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012207:	29 ef                	sub    edi,ebp
c0012209:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001220d:	0f 83 f8 00 00 00    	jae    c001230b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012213:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012219:	76 05                	jbe    c0012220 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001221b:	bf 00 10 00 00       	mov    edi,0x1000
c0012220:	83 ec 0c             	sub    esp,0xc
c0012223:	31 d2                	xor    edx,edx
c0012225:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001222c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001222e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012232:	50                   	push   eax
c0012233:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012237:	56                   	push   esi
c0012238:	52                   	push   edx
c0012239:	57                   	push   edi
c001223a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012241:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012244:	83 c4 20             	add    esp,0x20
c0012247:	85 c0                	test   eax,eax
c0012249:	75 06                	jne    c0012251 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001224b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001224f:	74 13                	je     c0012264 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012251:	83 ec 0c             	sub    esp,0xc
c0012254:	53                   	push   ebx
c0012255:	e8 6b 7a ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c001225a:	83 c4 10             	add    esp,0x10
c001225d:	31 c0                	xor    eax,eax
c001225f:	e9 7c 01 00 00       	jmp    c00123e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012264:	fa                   	cli    
c0012265:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001226b:	e8 b6 5f ff ff       	call   c0008226 <Phys::allocatePage()>
c0012270:	6a 07                	push   0x7
c0012272:	89 c7                	mov    edi,eax
c0012274:	53                   	push   ebx
c0012275:	50                   	push   eax
c0012276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001227b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001227e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012284:	e8 a1 7d ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012289:	83 c4 0c             	add    esp,0xc
c001228c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012293:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012299:	6a 00                	push   0x0
c001229b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122a9:	e8 ee 7b ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c00122ae:	58                   	pop    eax
c00122af:	5a                   	pop    edx
c00122b0:	68 07 0c 00 00       	push   0xc07
c00122b5:	55                   	push   ebp
c00122b6:	57                   	push   edi
c00122b7:	89 df                	mov    edi,ebx
c00122b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00122c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122c6:	6a 00                	push   0x0
c00122c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122d6:	e8 0f 81 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00122db:	b9 00 10 00 00       	mov    ecx,0x1000
c00122e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122e2:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00122e7:	83 c4 20             	add    esp,0x20
c00122ea:	48                   	dec    eax
c00122eb:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00122f0:	85 c0                	test   eax,eax
c00122f2:	75 01                	jne    c00122f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00122f4:	fb                   	sti    
c00122f5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122fb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00122ff:	e9 f1 fe ff ff       	jmp    c00121f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012304:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001230b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012312:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012318:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001231e:	0f 86 ae 00 00 00    	jbe    c00123d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012324:	fa                   	cli    
c0012325:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001232b:	c1 ee 0c             	shr    esi,0xc
c001232e:	51                   	push   ecx
c001232f:	31 ff                	xor    edi,edi
c0012331:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012338:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001233e:	6a 00                	push   0x0
c0012340:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012345:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012348:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001234e:	e8 49 7b ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	e8 cb 5e ff ff       	call   c0008226 <Phys::allocatePage()>
c001235b:	47                   	inc    edi
c001235c:	6a 07                	push   0x7
c001235e:	53                   	push   ebx
c001235f:	50                   	push   eax
c0012360:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012364:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001236a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001236d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012373:	e8 b2 7c ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012378:	58                   	pop    eax
c0012379:	5a                   	pop    edx
c001237a:	68 07 0c 00 00       	push   0xc07
c001237f:	55                   	push   ebp
c0012380:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001238a:	50                   	push   eax
c001238b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012392:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012398:	6a 00                	push   0x0
c001239a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001239f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00123a8:	e8 3d 80 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00123ad:	83 c4 1c             	add    esp,0x1c
c00123b0:	68 00 10 00 00       	push   0x1000
c00123b5:	6a 00                	push   0x0
c00123b7:	53                   	push   ebx
c00123b8:	e8 33 e1 fe ff       	call   c00004f0 <memset>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	39 fe                	cmp    esi,edi
c00123c2:	77 92                	ja     c0012356 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00123c4:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00123c9:	48                   	dec    eax
c00123ca:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00123cf:	75 01                	jne    c00123d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00123d1:	fb                   	sti    
c00123d2:	83 ec 0c             	sub    esp,0xc
c00123d5:	53                   	push   ebx
c00123d6:	e8 ea 78 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	b0 01                	mov    al,0x1
c00123e0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00123e6:	5b                   	pop    ebx
c00123e7:	5e                   	pop    esi
c00123e8:	5f                   	pop    edi
c00123e9:	5d                   	pop    ebp
c00123ea:	c3                   	ret    

c00123eb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00123eb:	55                   	push   ebp
c00123ec:	57                   	push   edi
c00123ed:	56                   	push   esi
c00123ee:	53                   	push   ebx
c00123ef:	83 ec 48             	sub    esp,0x48
c00123f2:	68 14 01 00 00       	push   0x114
c00123f7:	e8 5d 5a ff ff       	call   c0007e59 <malloc>
c00123fc:	83 c4 0c             	add    esp,0xc
c00123ff:	89 c6                	mov    esi,eax
c0012401:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012405:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012409:	50                   	push   eax
c001240a:	e8 4f 8d ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001240f:	58                   	pop    eax
c0012410:	5a                   	pop    edx
c0012411:	6a 01                	push   0x1
c0012413:	56                   	push   esi
c0012414:	e8 05 8e ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	85 c0                	test   eax,eax
c001241e:	0f 85 47 01 00 00    	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012424:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	6a 34                	push   0x34
c0012431:	e8 23 5a ff ff       	call   c0007e59 <malloc>
c0012436:	89 c3                	mov    ebx,eax
c0012438:	58                   	pop    eax
c0012439:	8b 06                	mov    eax,DWORD PTR [esi]
c001243b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001243f:	57                   	push   edi
c0012440:	53                   	push   ebx
c0012441:	6a 00                	push   0x0
c0012443:	6a 34                	push   0x34
c0012445:	56                   	push   esi
c0012446:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012449:	83 c4 20             	add    esp,0x20
c001244c:	85 c0                	test   eax,eax
c001244e:	0f 85 17 01 00 00    	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012454:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001245a:	0f 85 0b 01 00 00    	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012460:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012463:	85 c0                	test   eax,eax
c0012465:	0f 84 00 01 00 00    	je     c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001246b:	31 d2                	xor    edx,edx
c001246d:	55                   	push   ebp
c001246e:	52                   	push   edx
c001246f:	50                   	push   eax
c0012470:	56                   	push   esi
c0012471:	e8 66 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	85 c0                	test   eax,eax
c001247b:	0f 85 ea 00 00 00    	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012481:	83 ec 0c             	sub    esp,0xc
c0012484:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012487:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001248b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001248f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012493:	0f af c2             	imul   eax,edx
c0012496:	50                   	push   eax
c0012497:	e8 bd 59 ff ff       	call   c0007e59 <malloc>
c001249c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001249e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00124a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124a9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00124ad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00124b1:	0f af c2             	imul   eax,edx
c00124b4:	99                   	cdq    
c00124b5:	52                   	push   edx
c00124b6:	50                   	push   eax
c00124b7:	56                   	push   esi
c00124b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124bb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00124be:	83 c4 20             	add    esp,0x20
c00124c1:	85 c0                	test   eax,eax
c00124c3:	0f 84 a2 00 00 00    	je     c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00124c9:	31 d2                	xor    edx,edx
c00124cb:	51                   	push   ecx
c00124cc:	52                   	push   edx
c00124cd:	50                   	push   eax
c00124ce:	56                   	push   esi
c00124cf:	e8 08 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	85 c0                	test   eax,eax
c00124d9:	0f 85 8c 00 00 00    	jne    c001256b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00124df:	83 ec 0c             	sub    esp,0xc
c00124e2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124e6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124ea:	31 ed                	xor    ebp,ebp
c00124ec:	0f af c2             	imul   eax,edx
c00124ef:	50                   	push   eax
c00124f0:	e8 64 59 ff ff       	call   c0007e59 <malloc>
c00124f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00124f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012506:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001250a:	0f af c2             	imul   eax,edx
c001250d:	99                   	cdq    
c001250e:	52                   	push   edx
c001250f:	50                   	push   eax
c0012510:	56                   	push   esi
c0012511:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012514:	83 c4 20             	add    esp,0x20
c0012517:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001251f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012523:	0f 86 80 00 00 00    	jbe    c00125a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012529:	0f b7 fd             	movzx  edi,bp
c001252c:	c1 e7 05             	shl    edi,0x5
c001252f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012533:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012536:	75 6b                	jne    c00125a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012538:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001253b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001253f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012542:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012546:	52                   	push   edx
c0012547:	31 d2                	xor    edx,edx
c0012549:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254c:	52                   	push   edx
c001254d:	50                   	push   eax
c001254e:	56                   	push   esi
c001254f:	e8 88 8d ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012554:	83 c4 10             	add    esp,0x10
c0012557:	85 c0                	test   eax,eax
c0012559:	74 17                	je     c0012572 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	68 91 e9 01 c0       	push   0xc001e991
c0012563:	e8 80 86 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	31 c0                	xor    eax,eax
c001256d:	e9 87 00 00 00       	jmp    c00125f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012572:	83 ec 0c             	sub    esp,0xc
c0012575:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012578:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001257b:	50                   	push   eax
c001257c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012580:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012584:	56                   	push   esi
c0012585:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012589:	e8 d1 fb ff ff       	call   c001215f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001258e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012592:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012596:	83 c4 20             	add    esp,0x20
c0012599:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001259d:	73 04                	jae    c00125a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125a3:	45                   	inc    ebp
c00125a4:	e9 76 ff ff ff       	jmp    c001251f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00125a9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00125ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00125b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125b5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00125bb:	83 ec 0c             	sub    esp,0xc
c00125be:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00125c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125c9:	05 00 10 00 00       	add    eax,0x1000
c00125ce:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d5:	e8 8f 58 ff ff       	call   c0007e69 <free>
c00125da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125dd:	e8 87 58 ff ff       	call   c0007e69 <free>
c00125e2:	58                   	pop    eax
c00125e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125e7:	e8 7d 58 ff ff       	call   c0007e69 <free>
c00125ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00125ef:	e8 88 8c ff ff       	call   c000b27c <File::close()>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	b0 01                	mov    al,0x1
c00125f9:	83 c4 3c             	add    esp,0x3c
c00125fc:	5b                   	pop    ebx
c00125fd:	5e                   	pop    esi
c00125fe:	5f                   	pop    edi
c00125ff:	5d                   	pop    ebp
c0012600:	c3                   	ret    

c0012601 <Thr::runtimeReferenceHelper()>:
c0012601:	83 ec 18             	sub    esp,0x18
c0012604:	68 99 e9 01 c0       	push   0xc001e999
c0012609:	e8 da 85 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001260e:	fa                   	cli    
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	eb fe                	jmp    c0012612 <Thr::runtimeReferenceHelper()+0x11>

c0012614 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012614:	57                   	push   edi
c0012615:	56                   	push   esi
c0012616:	53                   	push   ebx
c0012617:	31 db                	xor    ebx,ebx
c0012619:	39 1d 80 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e80,ebx
c001261f:	7e 3c                	jle    c001265d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012621:	8b 34 9d 00 3e 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc200]
c0012628:	31 ff                	xor    edi,edi
c001262a:	39 3c 9d 00 3d 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc300],edi
c0012631:	7e 27                	jle    c001265a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012633:	50                   	push   eax
c0012634:	50                   	push   eax
c0012635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012639:	8b 06                	mov    eax,DWORD PTR [esi]
c001263b:	03 04 9d 80 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc280]
c0012642:	50                   	push   eax
c0012643:	e8 b8 e0 fe ff       	call   c0000700 <strcmp>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	85 c0                	test   eax,eax
c001264d:	75 05                	jne    c0012654 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001264f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012652:	eb 0b                	jmp    c001265f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012654:	83 c6 10             	add    esi,0x10
c0012657:	47                   	inc    edi
c0012658:	eb d0                	jmp    c001262a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001265a:	43                   	inc    ebx
c001265b:	eb bc                	jmp    c0012619 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001265d:	31 c0                	xor    eax,eax
c001265f:	5b                   	pop    ebx
c0012660:	5e                   	pop    esi
c0012661:	5f                   	pop    edi
c0012662:	c3                   	ret    

c0012663 <Thr::loadKernelSymbolTable(char const*)>:
c0012663:	55                   	push   ebp
c0012664:	57                   	push   edi
c0012665:	56                   	push   esi
c0012666:	53                   	push   ebx
c0012667:	83 ec 68             	sub    esp,0x68
c001266a:	8b 35 d0 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed0
c0012670:	68 14 01 00 00       	push   0x114
c0012675:	e8 df 57 ff ff       	call   c0007e59 <malloc>
c001267a:	83 c4 0c             	add    esp,0xc
c001267d:	89 c3                	mov    ebx,eax
c001267f:	56                   	push   esi
c0012680:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012684:	50                   	push   eax
c0012685:	e8 d4 8a ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001268a:	5e                   	pop    esi
c001268b:	5f                   	pop    edi
c001268c:	6a 01                	push   0x1
c001268e:	53                   	push   ebx
c001268f:	e8 8a 8b ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	85 c0                	test   eax,eax
c0012699:	74 0a                	je     c00126a5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001269b:	83 ec 0c             	sub    esp,0xc
c001269e:	68 bb e9 01 c0       	push   0xc001e9bb
c00126a3:	eb 34                	jmp    c00126d9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00126a5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00126ad:	83 ec 0c             	sub    esp,0xc
c00126b0:	6a 34                	push   0x34
c00126b2:	e8 a2 57 ff ff       	call   c0007e59 <malloc>
c00126b7:	59                   	pop    ecx
c00126b8:	89 c7                	mov    edi,eax
c00126ba:	8d 74 24 34          	lea    esi,[esp+0x34]
c00126be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c0:	56                   	push   esi
c00126c1:	57                   	push   edi
c00126c2:	6a 00                	push   0x0
c00126c4:	6a 34                	push   0x34
c00126c6:	53                   	push   ebx
c00126c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126ca:	83 c4 20             	add    esp,0x20
c00126cd:	85 c0                	test   eax,eax
c00126cf:	74 17                	je     c00126e8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	68 d2 e9 01 c0       	push   0xc001e9d2
c00126d9:	e8 99 e0 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	31 c0                	xor    eax,eax
c00126e3:	e9 31 02 00 00       	jmp    c0012919 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00126e8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126ee:	75 e1                	jne    c00126d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126f0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126f3:	85 c0                	test   eax,eax
c00126f5:	74 da                	je     c00126d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126f7:	52                   	push   edx
c00126f8:	31 d2                	xor    edx,edx
c00126fa:	52                   	push   edx
c00126fb:	50                   	push   eax
c00126fc:	53                   	push   ebx
c00126fd:	e8 da 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	85 c0                	test   eax,eax
c0012707:	75 c8                	jne    c00126d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012710:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012714:	31 ed                	xor    ebp,ebp
c0012716:	0f af c2             	imul   eax,edx
c0012719:	50                   	push   eax
c001271a:	e8 3a 57 ff ff       	call   c0007e59 <malloc>
c001271f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012721:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012725:	89 34 24             	mov    DWORD PTR [esp],esi
c0012728:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001272c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012730:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012734:	0f af c2             	imul   eax,edx
c0012737:	99                   	cdq    
c0012738:	52                   	push   edx
c0012739:	50                   	push   eax
c001273a:	53                   	push   ebx
c001273b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001273e:	83 c4 20             	add    esp,0x20
c0012741:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012749:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012751:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012759:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012761:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012765:	0f 86 aa 00 00 00    	jbe    c0012815 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001276b:	0f b7 f5             	movzx  esi,bp
c001276e:	6b f6 28             	imul   esi,esi,0x28
c0012771:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012775:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001277c:	50                   	push   eax
c001277d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012781:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012785:	8b 16                	mov    edx,DWORD PTR [esi]
c0012787:	6b c0 28             	imul   eax,eax,0x28
c001278a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001278e:	89 d0                	mov    eax,edx
c0012790:	31 d2                	xor    edx,edx
c0012792:	52                   	push   edx
c0012793:	50                   	push   eax
c0012794:	53                   	push   ebx
c0012795:	e8 42 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c001279a:	83 c4 0c             	add    esp,0xc
c001279d:	6a 20                	push   0x20
c001279f:	6a 00                	push   0x0
c00127a1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00127a5:	52                   	push   edx
c00127a6:	e8 45 dd fe ff       	call   c00004f0 <memset>
c00127ab:	58                   	pop    eax
c00127ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ae:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00127b2:	51                   	push   ecx
c00127b3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00127b7:	52                   	push   edx
c00127b8:	6a 00                	push   0x0
c00127ba:	6a 1f                	push   0x1f
c00127bc:	53                   	push   ebx
c00127bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127c0:	83 c4 18             	add    esp,0x18
c00127c3:	68 e9 e9 01 c0       	push   0xc001e9e9
c00127c8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00127cc:	52                   	push   edx
c00127cd:	e8 2e df fe ff       	call   c0000700 <strcmp>
c00127d2:	83 c4 10             	add    esp,0x10
c00127d5:	85 c0                	test   eax,eax
c00127d7:	75 0f                	jne    c00127e8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00127d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127e8:	50                   	push   eax
c00127e9:	50                   	push   eax
c00127ea:	68 f1 e9 01 c0       	push   0xc001e9f1
c00127ef:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00127f3:	50                   	push   eax
c00127f4:	e8 07 df fe ff       	call   c0000700 <strcmp>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	85 c0                	test   eax,eax
c00127fe:	75 0f                	jne    c001280f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012800:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012803:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012807:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001280f:	45                   	inc    ebp
c0012810:	e9 4c ff ff ff       	jmp    c0012761 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012815:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001281a:	75 10                	jne    c001282c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001281c:	83 ec 0c             	sub    esp,0xc
c001281f:	68 f9 e9 01 c0       	push   0xc001e9f9
c0012824:	e8 4e df ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012829:	83 c4 10             	add    esp,0x10
c001282c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012831:	75 10                	jne    c0012843 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012833:	83 ec 0c             	sub    esp,0xc
c0012836:	68 f9 e9 01 c0       	push   0xc001e9f9
c001283b:	e8 37 df ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	31 d2                	xor    edx,edx
c0012845:	50                   	push   eax
c0012846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284a:	52                   	push   edx
c001284b:	50                   	push   eax
c001284c:	53                   	push   ebx
c001284d:	e8 8a 8a ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012852:	5a                   	pop    edx
c0012853:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012857:	e8 fd 55 ff ff       	call   c0007e59 <malloc>
c001285c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012860:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012864:	31 c9                	xor    ecx,ecx
c0012866:	5e                   	pop    esi
c0012867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012869:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001286d:	55                   	push   ebp
c001286e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012872:	51                   	push   ecx
c0012873:	52                   	push   edx
c0012874:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012878:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001287c:	53                   	push   ebx
c001287d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012880:	83 c4 14             	add    esp,0x14
c0012883:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012887:	e8 cd 55 ff ff       	call   c0007e59 <malloc>
c001288c:	89 c6                	mov    esi,eax
c001288e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012890:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012893:	56                   	push   esi
c0012894:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012898:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001289c:	51                   	push   ecx
c001289d:	52                   	push   edx
c001289e:	53                   	push   ebx
c001289f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128a6:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c00128ac:	83 c4 1c             	add    esp,0x1c
c00128af:	c1 e8 04             	shr    eax,0x4
c00128b2:	89 04 95 00 3d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc300],eax
c00128b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128bd:	31 d2                	xor    edx,edx
c00128bf:	52                   	push   edx
c00128c0:	50                   	push   eax
c00128c1:	53                   	push   ebx
c00128c2:	e8 15 8a ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00128c7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00128c9:	31 d2                	xor    edx,edx
c00128cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128ce:	56                   	push   esi
c00128cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128d3:	52                   	push   edx
c00128d4:	50                   	push   eax
c00128d5:	53                   	push   ebx
c00128d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128d9:	83 c4 14             	add    esp,0x14
c00128dc:	53                   	push   ebx
c00128dd:	e8 9a 89 ff ff       	call   c000b27c <File::close()>
c00128e2:	5d                   	pop    ebp
c00128e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128e7:	e8 7d 55 ff ff       	call   c0007e69 <free>
c00128ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128ef:	e8 75 55 ff ff       	call   c0007e69 <free>
c00128f4:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c00128f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00128fd:	8d 50 01             	lea    edx,[eax+0x1]
c0012900:	89 0c 85 00 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc200],ecx
c0012907:	89 34 85 80 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc280],esi
c001290e:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	b0 01                	mov    al,0x1
c0012919:	83 c4 5c             	add    esp,0x5c
c001291c:	5b                   	pop    ebx
c001291d:	5e                   	pop    esi
c001291e:	5f                   	pop    edi
c001291f:	5d                   	pop    ebp
c0012920:	c3                   	ret    

c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012921:	55                   	push   ebp
c0012922:	57                   	push   edi
c0012923:	56                   	push   esi
c0012924:	53                   	push   ebx
c0012925:	81 ec 68 03 00 00    	sub    esp,0x368
c001292b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012932:	8b 1d d0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed0
c0012938:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001293c:	68 14 01 00 00       	push   0x114
c0012941:	e8 13 55 ff ff       	call   c0007e59 <malloc>
c0012946:	83 c4 0c             	add    esp,0xc
c0012949:	89 c5                	mov    ebp,eax
c001294b:	53                   	push   ebx
c001294c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012953:	50                   	push   eax
c0012954:	e8 05 88 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0012959:	5e                   	pop    esi
c001295a:	5f                   	pop    edi
c001295b:	6a 01                	push   0x1
c001295d:	55                   	push   ebp
c001295e:	e8 bb 88 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012963:	83 c4 10             	add    esp,0x10
c0012966:	85 c0                	test   eax,eax
c0012968:	0f 85 a7 06 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001296e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012976:	83 ec 0c             	sub    esp,0xc
c0012979:	6a 34                	push   0x34
c001297b:	e8 d9 54 ff ff       	call   c0007e59 <malloc>
c0012980:	5b                   	pop    ebx
c0012981:	89 c7                	mov    edi,eax
c0012983:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012987:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001298a:	53                   	push   ebx
c001298b:	57                   	push   edi
c001298c:	6a 00                	push   0x0
c001298e:	6a 34                	push   0x34
c0012990:	55                   	push   ebp
c0012991:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012994:	83 c4 20             	add    esp,0x20
c0012997:	85 c0                	test   eax,eax
c0012999:	0f 85 76 06 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001299f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00129a5:	0f 85 6a 06 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129ab:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00129ae:	85 c0                	test   eax,eax
c00129b0:	0f 84 5f 06 00 00    	je     c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129b6:	31 d2                	xor    edx,edx
c00129b8:	51                   	push   ecx
c00129b9:	52                   	push   edx
c00129ba:	50                   	push   eax
c00129bb:	55                   	push   ebp
c00129bc:	e8 1b 89 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00129c1:	83 c4 10             	add    esp,0x10
c00129c4:	85 c0                	test   eax,eax
c00129c6:	0f 85 49 06 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129cc:	83 ec 0c             	sub    esp,0xc
c00129cf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00129d2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00129da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129de:	0f af c2             	imul   eax,edx
c00129e1:	50                   	push   eax
c00129e2:	e8 72 54 ff ff       	call   c0007e59 <malloc>
c00129e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129f9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129fd:	0f af c2             	imul   eax,edx
c0012a00:	99                   	cdq    
c0012a01:	52                   	push   edx
c0012a02:	50                   	push   eax
c0012a03:	55                   	push   ebp
c0012a04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a07:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012a0a:	83 c4 20             	add    esp,0x20
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	0f 84 00 06 00 00    	je     c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a15:	52                   	push   edx
c0012a16:	31 d2                	xor    edx,edx
c0012a18:	52                   	push   edx
c0012a19:	50                   	push   eax
c0012a1a:	55                   	push   ebp
c0012a1b:	e8 bc 88 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012a20:	83 c4 10             	add    esp,0x10
c0012a23:	85 c0                	test   eax,eax
c0012a25:	0f 85 ea 05 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a2b:	83 ec 0c             	sub    esp,0xc
c0012a2e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a32:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a36:	31 f6                	xor    esi,esi
c0012a38:	0f af c2             	imul   eax,edx
c0012a3b:	50                   	push   eax
c0012a3c:	e8 18 54 ff ff       	call   c0007e59 <malloc>
c0012a41:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a4f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a53:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a57:	0f af c2             	imul   eax,edx
c0012a5a:	99                   	cdq    
c0012a5b:	52                   	push   edx
c0012a5c:	50                   	push   eax
c0012a5d:	55                   	push   ebp
c0012a5e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a61:	83 c4 20             	add    esp,0x20
c0012a64:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012a68:	0f 86 8a 00 00 00    	jbe    c0012af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012a6e:	0f b7 de             	movzx  ebx,si
c0012a71:	c1 e3 05             	shl    ebx,0x5
c0012a74:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012a78:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012a7b:	75 75                	jne    c0012af2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012a7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a80:	31 d2                	xor    edx,edx
c0012a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	50                   	push   eax
c0012a8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a91:	52                   	push   edx
c0012a92:	50                   	push   eax
c0012a93:	55                   	push   ebp
c0012a94:	e8 43 88 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012a99:	83 c4 10             	add    esp,0x10
c0012a9c:	85 c0                	test   eax,eax
c0012a9e:	0f 85 71 05 00 00    	jne    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012aa4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012aab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012aae:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012ab2:	31 d2                	xor    edx,edx
c0012ab4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012ab8:	83 ec 0c             	sub    esp,0xc
c0012abb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012abf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac6:	50                   	push   eax
c0012ac7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012acf:	52                   	push   edx
c0012ad0:	50                   	push   eax
c0012ad1:	55                   	push   ebp
c0012ad2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012ad5:	83 c4 1c             	add    esp,0x1c
c0012ad8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012adb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012ade:	50                   	push   eax
c0012adf:	6a 00                	push   0x0
c0012ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012ae9:	50                   	push   eax
c0012aea:	e8 01 da fe ff       	call   c00004f0 <memset>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	46                   	inc    esi
c0012af3:	e9 6c ff ff ff       	jmp    c0012a64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012af8:	53                   	push   ebx
c0012af9:	31 db                	xor    ebx,ebx
c0012afb:	68 00 01 00 00       	push   0x100
c0012b00:	6a 00                	push   0x0
c0012b02:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012b06:	50                   	push   eax
c0012b07:	e8 e4 d9 fe ff       	call   c00004f0 <memset>
c0012b0c:	83 c4 0c             	add    esp,0xc
c0012b0f:	68 00 01 00 00       	push   0x100
c0012b14:	6a 00                	push   0x0
c0012b16:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012b1d:	50                   	push   eax
c0012b1e:	e8 cd d9 fe ff       	call   c00004f0 <memset>
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012b2e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012b36:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012b3e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b46:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b4e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012b52:	0f 86 30 01 00 00    	jbe    c0012c88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012b58:	0f b7 f3             	movzx  esi,bx
c0012b5b:	6b f6 28             	imul   esi,esi,0x28
c0012b5e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012b62:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b69:	52                   	push   edx
c0012b6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b6e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012b72:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b74:	6b d2 28             	imul   edx,edx,0x28
c0012b77:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012b7b:	31 d2                	xor    edx,edx
c0012b7d:	52                   	push   edx
c0012b7e:	50                   	push   eax
c0012b7f:	55                   	push   ebp
c0012b80:	e8 57 87 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012b85:	83 c4 0c             	add    esp,0xc
c0012b88:	6a 20                	push   0x20
c0012b8a:	6a 00                	push   0x0
c0012b8c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b93:	51                   	push   ecx
c0012b94:	e8 57 d9 fe ff       	call   c00004f0 <memset>
c0012b99:	59                   	pop    ecx
c0012b9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b9d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012ba1:	52                   	push   edx
c0012ba2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012ba9:	51                   	push   ecx
c0012baa:	6a 00                	push   0x0
c0012bac:	6a 1f                	push   0x1f
c0012bae:	55                   	push   ebp
c0012baf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012bb2:	83 c4 1c             	add    esp,0x1c
c0012bb5:	6a 09                	push   0x9
c0012bb7:	68 13 ea 01 c0       	push   0xc001ea13
c0012bbc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012bc3:	51                   	push   ecx
c0012bc4:	e8 e7 d7 fe ff       	call   c00003b0 <memcmp>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	85 c0                	test   eax,eax
c0012bce:	75 21                	jne    c0012bf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bd8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012bdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012be3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bea:	89 d0                	mov    eax,edx
c0012bec:	40                   	inc    eax
c0012bed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bf1:	50                   	push   eax
c0012bf2:	6a 09                	push   0x9
c0012bf4:	68 1d ea 01 c0       	push   0xc001ea1d
c0012bf9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c00:	50                   	push   eax
c0012c01:	e8 aa d7 fe ff       	call   c00003b0 <memcmp>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	85 c0                	test   eax,eax
c0012c0b:	75 21                	jne    c0012c2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012c0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c15:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012c19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c20:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012c27:	89 d0                	mov    eax,edx
c0012c29:	40                   	inc    eax
c0012c2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c2e:	50                   	push   eax
c0012c2f:	50                   	push   eax
c0012c30:	68 e9 e9 01 c0       	push   0xc001e9e9
c0012c35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c3c:	50                   	push   eax
c0012c3d:	e8 be da fe ff       	call   c0000700 <strcmp>
c0012c42:	83 c4 10             	add    esp,0x10
c0012c45:	85 c0                	test   eax,eax
c0012c47:	75 0f                	jne    c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012c49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c58:	50                   	push   eax
c0012c59:	50                   	push   eax
c0012c5a:	68 f1 e9 01 c0       	push   0xc001e9f1
c0012c5f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c66:	50                   	push   eax
c0012c67:	e8 94 da fe ff       	call   c0000700 <strcmp>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	85 c0                	test   eax,eax
c0012c71:	75 0f                	jne    c0012c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012c73:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c82:	43                   	inc    ebx
c0012c83:	e9 c6 fe ff ff       	jmp    c0012b4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c88:	31 d2                	xor    edx,edx
c0012c8a:	50                   	push   eax
c0012c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c8f:	52                   	push   edx
c0012c90:	50                   	push   eax
c0012c91:	55                   	push   ebp
c0012c92:	e8 45 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012c97:	58                   	pop    eax
c0012c98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c9c:	e8 b8 51 ff ff       	call   c0007e59 <malloc>
c0012ca1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ca4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012ca8:	31 d2                	xor    edx,edx
c0012caa:	58                   	pop    eax
c0012cab:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012caf:	53                   	push   ebx
c0012cb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012cb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cb8:	52                   	push   edx
c0012cb9:	50                   	push   eax
c0012cba:	55                   	push   ebp
c0012cbb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cbe:	83 c4 14             	add    esp,0x14
c0012cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cc5:	e8 8f 51 ff ff       	call   c0007e59 <malloc>
c0012cca:	31 d2                	xor    edx,edx
c0012ccc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012cd0:	83 c4 0c             	add    esp,0xc
c0012cd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cd7:	52                   	push   edx
c0012cd8:	50                   	push   eax
c0012cd9:	55                   	push   ebp
c0012cda:	e8 fd 85 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012cdf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ce2:	31 d2                	xor    edx,edx
c0012ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ce7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cef:	52                   	push   edx
c0012cf0:	50                   	push   eax
c0012cf1:	55                   	push   ebp
c0012cf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cf5:	83 c4 20             	add    esp,0x20
c0012cf8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d04:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012d08:	0f 84 0b 03 00 00    	je     c0013019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012d0e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012d15:	31 d2                	xor    edx,edx
c0012d17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d1b:	c1 e8 03             	shr    eax,0x3
c0012d1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012d22:	51                   	push   ecx
c0012d23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d27:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012d2b:	52                   	push   edx
c0012d2c:	50                   	push   eax
c0012d2d:	55                   	push   ebp
c0012d2e:	e8 a9 85 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012d33:	5b                   	pop    ebx
c0012d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d38:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012d3f:	e8 15 51 ff ff       	call   c0007e59 <malloc>
c0012d44:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d4b:	31 d2                	xor    edx,edx
c0012d4d:	5e                   	pop    esi
c0012d4e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012d52:	50                   	push   eax
c0012d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d5b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012d62:	52                   	push   edx
c0012d63:	50                   	push   eax
c0012d64:	55                   	push   ebp
c0012d65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d68:	83 c4 20             	add    esp,0x20
c0012d6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012d73:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012d77:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012d7b:	0f 8d 7c 02 00 00    	jge    c0012ffd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d89:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d8e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d99:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d9d:	89 d8                	mov    eax,ebx
c0012d9f:	c1 e8 08             	shr    eax,0x8
c0012da2:	89 c6                	mov    esi,eax
c0012da4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012da8:	c1 e6 04             	shl    esi,0x4
c0012dab:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012daf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012db2:	85 d2                	test   edx,edx
c0012db4:	0f 85 bf 00 00 00    	jne    c0012e79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012dc1:	03 06                	add    eax,DWORD PTR [esi]
c0012dc3:	50                   	push   eax
c0012dc4:	e8 4b f8 ff ff       	call   c0012614 <Thr::getAddressOfKernelSymbol(char const*)>
c0012dc9:	83 c4 10             	add    esp,0x10
c0012dcc:	89 c2                	mov    edx,eax
c0012dce:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012dd3:	85 c0                	test   eax,eax
c0012dd5:	0f 85 9e 00 00 00    	jne    c0012e79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ddb:	83 ec 0c             	sub    esp,0xc
c0012dde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012de2:	03 06                	add    eax,DWORD PTR [esi]
c0012de4:	50                   	push   eax
c0012de5:	e8 56 41 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	89 c2                	mov    edx,eax
c0012def:	85 c0                	test   eax,eax
c0012df1:	0f 85 82 00 00 00    	jne    c0012e79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012df7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012dfb:	50                   	push   eax
c0012dfc:	50                   	push   eax
c0012dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e01:	03 06                	add    eax,DWORD PTR [esi]
c0012e03:	50                   	push   eax
c0012e04:	68 27 ea 01 c0       	push   0xc001ea27
c0012e09:	e8 da 7d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012e0e:	58                   	pop    eax
c0012e0f:	5a                   	pop    edx
c0012e10:	68 41 ea 01 c0       	push   0xc001ea41
c0012e15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e1c:	50                   	push   eax
c0012e1d:	e8 fe d7 fe ff       	call   c0000620 <strcpy>
c0012e22:	59                   	pop    ecx
c0012e23:	58                   	pop    eax
c0012e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e28:	03 06                	add    eax,DWORD PTR [esi]
c0012e2a:	50                   	push   eax
c0012e2b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e32:	50                   	push   eax
c0012e33:	e8 a8 d9 fe ff       	call   c00007e0 <strcat>
c0012e38:	58                   	pop    eax
c0012e39:	5a                   	pop    edx
c0012e3a:	68 d7 ea 01 c0       	push   0xc001ead7
c0012e3f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e46:	50                   	push   eax
c0012e47:	e8 94 d9 fe ff       	call   c00007e0 <strcat>
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e54:	0f 84 5d 01 00 00    	je     c0012fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e64:	50                   	push   eax
c0012e65:	e8 0d d9 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012e71:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e75:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012e79:	80 fb 01             	cmp    bl,0x1
c0012e7c:	0f 85 88 00 00 00    	jne    c0012f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e82:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e89:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e8d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e91:	01 ce                	add    esi,ecx
c0012e93:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e99:	0f 94 c0             	sete   al
c0012e9c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012ea2:	0f 94 c3             	sete   bl
c0012ea5:	09 c3                	or     ebx,eax
c0012ea7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ea9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012eae:	74 41                	je     c0012ef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012eb0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012eb3:	84 db                	test   bl,bl
c0012eb5:	75 15                	jne    c0012ecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012eb7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ebb:	66 83 f8 0c          	cmp    ax,0xc
c0012ebf:	76 05                	jbe    c0012ec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012ec1:	b8 0c 00 00 00       	mov    eax,0xc
c0012ec6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012eca:	76 37                	jbe    c0012f03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ecc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012ed0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ed5:	0f 84 dc 00 00 00    	je     c0012fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012edb:	83 ec 0c             	sub    esp,0xc
c0012ede:	68 58 ea 01 c0       	push   0xc001ea58
c0012ee3:	e8 8f d8 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012eef:	eb 12                	jmp    c0012f03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ef1:	01 c1                	add    ecx,eax
c0012ef3:	84 db                	test   bl,bl
c0012ef5:	75 0c                	jne    c0012f03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ef7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012efb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012eff:	77 02                	ja     c0012f03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012f01:	01 d1                	add    ecx,edx
c0012f03:	89 0e                	mov    DWORD PTR [esi],ecx
c0012f05:	e9 ea 00 00 00       	jmp    c0012ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f0a:	80 fb 02             	cmp    bl,0x2
c0012f0d:	75 7c                	jne    c0012f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012f0f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012f16:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012f1a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012f1e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012f24:	74 20                	je     c0012f46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012f26:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012f2c:	74 18                	je     c0012f46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012f2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012f32:	b9 0a 00 00 00       	mov    ecx,0xa
c0012f37:	66 83 f8 0e          	cmp    ax,0xe
c0012f3b:	77 03                	ja     c0012f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012f3d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012f40:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012f44:	76 1f                	jbe    c0012f65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012f46:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012f4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f4f:	74 66                	je     c0012fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f51:	83 ec 0c             	sub    esp,0xc
c0012f54:	68 74 ea 01 c0       	push   0xc001ea74
c0012f59:	e8 19 d8 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f65:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f67:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012f6c:	74 13                	je     c0012f81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012f6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012f72:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012f79:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012f7d:	01 c8                	add    eax,ecx
c0012f7f:	eb 04                	jmp    c0012f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f81:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f85:	01 c2                	add    edx,eax
c0012f87:	89 16                	mov    DWORD PTR [esi],edx
c0012f89:	eb 69                	jmp    c0012ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f8b:	0f b6 db             	movzx  ebx,bl
c0012f8e:	50                   	push   eax
c0012f8f:	50                   	push   eax
c0012f90:	53                   	push   ebx
c0012f91:	68 90 ea 01 c0       	push   0xc001ea90
c0012f96:	e8 4d 7c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012fa3:	74 12                	je     c0012fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012fa5:	83 ec 0c             	sub    esp,0xc
c0012fa8:	68 9b ea 01 c0       	push   0xc001ea9b
c0012fad:	e8 c5 d7 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0012fb2:	83 c4 10             	add    esp,0x10
c0012fb5:	eb 3d                	jmp    c0012ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012fb7:	83 ec 0c             	sub    esp,0xc
c0012fba:	55                   	push   ebp
c0012fbb:	e8 bc 82 ff ff       	call   c000b27c <File::close()>
c0012fc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fc9:	59                   	pop    ecx
c0012fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fce:	e8 96 4e ff ff       	call   c0007e69 <free>
c0012fd3:	5b                   	pop    ebx
c0012fd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fd8:	e8 8c 4e ff ff       	call   c0007e69 <free>
c0012fdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fe0:	e8 84 4e ff ff       	call   c0007e69 <free>
c0012fe5:	5e                   	pop    esi
c0012fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fea:	e8 7a 4e ff ff       	call   c0007e69 <free>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	eb 21                	jmp    c0013015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012ff4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012ff8:	e9 76 fd ff ff       	jmp    c0012d73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012ffd:	83 ec 0c             	sub    esp,0xc
c0013000:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013004:	e8 60 4e ff ff       	call   c0007e69 <free>
c0013009:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	e9 eb fc ff ff       	jmp    c0012d00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013015:	31 c0                	xor    eax,eax
c0013017:	eb 33                	jmp    c001304c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013019:	83 ec 0c             	sub    esp,0xc
c001301c:	55                   	push   ebp
c001301d:	e8 5a 82 ff ff       	call   c000b27c <File::close()>
c0013022:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013028:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001302b:	58                   	pop    eax
c001302c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013030:	e8 34 4e ff ff       	call   c0007e69 <free>
c0013035:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013038:	e8 2c 4e ff ff       	call   c0007e69 <free>
c001303d:	5a                   	pop    edx
c001303e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013042:	e8 22 4e ff ff       	call   c0007e69 <free>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	b0 01                	mov    al,0x1
c001304c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013052:	5b                   	pop    ebx
c0013053:	5e                   	pop    esi
c0013054:	5f                   	pop    edi
c0013055:	5d                   	pop    ebp
c0013056:	c3                   	ret    

c0013057 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013057:	56                   	push   esi
c0013058:	31 d2                	xor    edx,edx
c001305a:	53                   	push   ebx
c001305b:	8b 1d e0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236e0
c0013061:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013065:	39 d3                	cmp    ebx,edx
c0013067:	7e 1b                	jle    c0013084 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013069:	8b 04 95 00 39 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc700]
c0013070:	39 c8                	cmp    eax,ecx
c0013072:	77 0d                	ja     c0013081 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013074:	8b 34 95 00 37 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc900]
c001307b:	01 c6                	add    esi,eax
c001307d:	39 ce                	cmp    esi,ecx
c001307f:	77 05                	ja     c0013086 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013081:	42                   	inc    edx
c0013082:	eb e1                	jmp    c0013065 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013084:	31 c0                	xor    eax,eax
c0013086:	5b                   	pop    ebx
c0013087:	5e                   	pop    esi
c0013088:	c3                   	ret    

c0013089 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013089:	53                   	push   ebx
c001308a:	31 c0                	xor    eax,eax
c001308c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013090:	8b 1d e0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236e0
c0013096:	39 c3                	cmp    ebx,eax
c0013098:	7e 22                	jle    c00130bc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001309a:	8b 14 85 00 39 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc700]
c00130a1:	39 ca                	cmp    edx,ecx
c00130a3:	77 14                	ja     c00130b9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00130a5:	03 14 85 00 37 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc900]
c00130ac:	39 ca                	cmp    edx,ecx
c00130ae:	76 09                	jbe    c00130b9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00130b0:	8b 04 85 00 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc500]
c00130b7:	eb 05                	jmp    c00130be <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00130b9:	40                   	inc    eax
c00130ba:	eb da                	jmp    c0013096 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00130bc:	31 c0                	xor    eax,eax
c00130be:	5b                   	pop    ebx
c00130bf:	c3                   	ret    

c00130c0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00130c0:	53                   	push   ebx
c00130c1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00130c5:	53                   	push   ebx
c00130c6:	e8 8c ff ff ff       	call   c0013057 <Thr::getDriverBaseFromAddress(unsigned long)>
c00130cb:	5a                   	pop    edx
c00130cc:	31 d2                	xor    edx,edx
c00130ce:	85 c0                	test   eax,eax
c00130d0:	74 04                	je     c00130d6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00130d2:	89 da                	mov    edx,ebx
c00130d4:	29 c2                	sub    edx,eax
c00130d6:	89 d0                	mov    eax,edx
c00130d8:	5b                   	pop    ebx
c00130d9:	c3                   	ret    

c00130da <Thr::loadDLL(char const*, bool)>:
c00130da:	55                   	push   ebp
c00130db:	57                   	push   edi
c00130dc:	56                   	push   esi
c00130dd:	53                   	push   ebx
c00130de:	81 ec 34 01 00 00    	sub    esp,0x134
c00130e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00130eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00130f2:	56                   	push   esi
c00130f3:	68 b3 ea 01 c0       	push   0xc001eab3
c00130f8:	e8 eb 7a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00130fd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013104:	e8 50 4d ff ff       	call   c0007e59 <malloc>
c0013109:	83 c4 0c             	add    esp,0xc
c001310c:	89 c3                	mov    ebx,eax
c001310e:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c0013114:	56                   	push   esi
c0013115:	50                   	push   eax
c0013116:	e8 43 80 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	85 db                	test   ebx,ebx
c0013120:	75 3c                	jne    c001315e <Thr::loadDLL(char const*, bool)+0x84>
c0013122:	89 f8                	mov    eax,edi
c0013124:	84 c0                	test   al,al
c0013126:	0f 84 d2 01 00 00    	je     c00132fe <Thr::loadDLL(char const*, bool)+0x224>
c001312c:	55                   	push   ebp
c001312d:	55                   	push   ebp
c001312e:	68 c4 ea 01 c0       	push   0xc001eac4
c0013133:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013137:	55                   	push   ebp
c0013138:	e8 e3 d4 fe ff       	call   c0000620 <strcpy>
c001313d:	58                   	pop    eax
c001313e:	5a                   	pop    edx
c001313f:	56                   	push   esi
c0013140:	55                   	push   ebp
c0013141:	e8 9a d6 fe ff       	call   c00007e0 <strcat>
c0013146:	59                   	pop    ecx
c0013147:	58                   	pop    eax
c0013148:	68 d7 ea 01 c0       	push   0xc001ead7
c001314d:	55                   	push   ebp
c001314e:	e8 8d d6 fe ff       	call   c00007e0 <strcat>
c0013153:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013156:	e8 1c d6 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	51                   	push   ecx
c001315f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013163:	50                   	push   eax
c0013164:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013168:	50                   	push   eax
c0013169:	53                   	push   ebx
c001316a:	e8 5b 83 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	85 db                	test   ebx,ebx
c0013174:	74 0c                	je     c0013182 <Thr::loadDLL(char const*, bool)+0xa8>
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	8b 03                	mov    eax,DWORD PTR [ebx]
c001317b:	53                   	push   ebx
c001317c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013187:	75 0a                	jne    c0013193 <Thr::loadDLL(char const*, bool)+0xb9>
c0013189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013191:	75 3c                	jne    c00131cf <Thr::loadDLL(char const*, bool)+0xf5>
c0013193:	89 f8                	mov    eax,edi
c0013195:	84 c0                	test   al,al
c0013197:	0f 84 49 01 00 00    	je     c00132e6 <Thr::loadDLL(char const*, bool)+0x20c>
c001319d:	51                   	push   ecx
c001319e:	51                   	push   ecx
c001319f:	68 c4 ea 01 c0       	push   0xc001eac4
c00131a4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00131a8:	53                   	push   ebx
c00131a9:	e8 72 d4 fe ff       	call   c0000620 <strcpy>
c00131ae:	5d                   	pop    ebp
c00131af:	58                   	pop    eax
c00131b0:	56                   	push   esi
c00131b1:	53                   	push   ebx
c00131b2:	e8 29 d6 fe ff       	call   c00007e0 <strcat>
c00131b7:	58                   	pop    eax
c00131b8:	5a                   	pop    edx
c00131b9:	68 d7 ea 01 c0       	push   0xc001ead7
c00131be:	53                   	push   ebx
c00131bf:	e8 1c d6 fe ff       	call   c00007e0 <strcat>
c00131c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00131c7:	e8 ab d5 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	52                   	push   edx
c00131d0:	6a 03                	push   0x3
c00131d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131da:	05 ff 0f 00 00       	add    eax,0xfff
c00131df:	83 d2 00             	adc    edx,0x0
c00131e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00131e6:	50                   	push   eax
c00131e7:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c00131ed:	e8 3c 6f ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c00131f2:	59                   	pop    ecx
c00131f3:	89 c3                	mov    ebx,eax
c00131f5:	5d                   	pop    ebp
c00131f6:	50                   	push   eax
c00131f7:	68 be d8 01 c0       	push   0xc001d8be
c00131fc:	e8 e7 79 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013201:	89 34 24             	mov    DWORD PTR [esp],esi
c0013204:	e8 57 d3 fe ff       	call   c0000560 <strlen>
c0013209:	8b 2d e0 36 02 c0    	mov    ebp,DWORD PTR ds:0xc00236e0
c001320f:	40                   	inc    eax
c0013210:	89 04 24             	mov    DWORD PTR [esp],eax
c0013213:	e8 41 4c ff ff       	call   c0007e59 <malloc>
c0013218:	89 04 ad 00 3b 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc500],eax
c001321f:	58                   	pop    eax
c0013220:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0013225:	5a                   	pop    edx
c0013226:	56                   	push   esi
c0013227:	ff 34 85 00 3b 02 c0 	push   DWORD PTR [eax*4-0x3ffdc500]
c001322e:	e8 ed d3 fe ff       	call   c0000620 <strcpy>
c0013233:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0013238:	8d 50 01             	lea    edx,[eax+0x1]
c001323b:	89 1c 85 00 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc700],ebx
c0013242:	89 15 e0 36 02 c0    	mov    DWORD PTR ds:0xc00236e0,edx
c0013248:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001324c:	83 c4 0c             	add    esp,0xc
c001324f:	89 14 85 00 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc900],edx
c0013256:	6a 01                	push   0x1
c0013258:	53                   	push   ebx
c0013259:	56                   	push   esi
c001325a:	e8 c2 f6 ff ff       	call   c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001325f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001326b:	0f 85 89 00 00 00    	jne    c00132fa <Thr::loadDLL(char const*, bool)+0x220>
c0013271:	89 f8                	mov    eax,edi
c0013273:	84 c0                	test   al,al
c0013275:	74 73                	je     c00132ea <Thr::loadDLL(char const*, bool)+0x210>
c0013277:	83 ec 0c             	sub    esp,0xc
c001327a:	68 d9 ea 01 c0       	push   0xc001ead9
c001327f:	e8 f3 d4 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	eb 61                	jmp    c00132ea <Thr::loadDLL(char const*, bool)+0x210>
c0013289:	50                   	push   eax
c001328a:	50                   	push   eax
c001328b:	89 e8                	mov    eax,ebp
c001328d:	c1 e0 0c             	shl    eax,0xc
c0013290:	01 d8                	add    eax,ebx
c0013292:	50                   	push   eax
c0013293:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0013299:	e8 08 6a ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c001329e:	83 c4 10             	add    esp,0x10
c00132a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00132a3:	a8 60                	test   al,0x60
c00132a5:	75 11                	jne    c00132b8 <Thr::loadDLL(char const*, bool)+0x1de>
c00132a7:	83 ec 0c             	sub    esp,0xc
c00132aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00132af:	50                   	push   eax
c00132b0:	e8 0f 4f ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	45                   	inc    ebp
c00132b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132c1:	05 ff 0f 00 00       	add    eax,0xfff
c00132c6:	bf 00 00 00 00       	mov    edi,0x0
c00132cb:	83 d2 00             	adc    edx,0x0
c00132ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00132d2:	c1 ea 0c             	shr    edx,0xc
c00132d5:	39 c5                	cmp    ebp,eax
c00132d7:	89 d1                	mov    ecx,edx
c00132d9:	89 f8                	mov    eax,edi
c00132db:	19 c8                	sbb    eax,ecx
c00132dd:	72 aa                	jb     c0013289 <Thr::loadDLL(char const*, bool)+0x1af>
c00132df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132e4:	75 18                	jne    c00132fe <Thr::loadDLL(char const*, bool)+0x224>
c00132e6:	31 db                	xor    ebx,ebx
c00132e8:	eb 14                	jmp    c00132fe <Thr::loadDLL(char const*, bool)+0x224>
c00132ea:	83 ec 0c             	sub    esp,0xc
c00132ed:	68 f8 ea 01 c0       	push   0xc001eaf8
c00132f2:	e8 80 d4 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00132f7:	83 c4 10             	add    esp,0x10
c00132fa:	31 ed                	xor    ebp,ebp
c00132fc:	eb bb                	jmp    c00132b9 <Thr::loadDLL(char const*, bool)+0x1df>
c00132fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013304:	89 d8                	mov    eax,ebx
c0013306:	5b                   	pop    ebx
c0013307:	5e                   	pop    esi
c0013308:	5f                   	pop    edi
c0013309:	5d                   	pop    ebp
c001330a:	c3                   	ret    

c001330b <Thr::executeDLL(unsigned long, void*)>:
c001330b:	56                   	push   esi
c001330c:	53                   	push   ebx
c001330d:	52                   	push   edx
c001330e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013312:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013316:	85 db                	test   ebx,ebx
c0013318:	75 10                	jne    c001332a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001331a:	83 ec 0c             	sub    esp,0xc
c001331d:	68 14 eb 01 c0       	push   0xc001eb14
c0013322:	e8 50 d4 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	50                   	push   eax
c001332b:	50                   	push   eax
c001332c:	53                   	push   ebx
c001332d:	68 3e eb 01 c0       	push   0xc001eb3e
c0013332:	e8 b1 78 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013337:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001333b:	89 d8                	mov    eax,ebx
c001333d:	83 c4 14             	add    esp,0x14
c0013340:	5b                   	pop    ebx
c0013341:	5e                   	pop    esi
c0013342:	ff e0                	jmp    eax

c0013344 <userModeEntryPoint(void*)>:
c0013344:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013349:	48                   	dec    eax
c001334a:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001334f:	75 03                	jne    c0013354 <userModeEntryPoint(void*)+0x10>
c0013351:	fb                   	sti    
c0013352:	66 90                	xchg   ax,ax
c0013354:	fb                   	sti    
c0013355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001335a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001335d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013367:	e9 f3 ce fe ff       	jmp    c000025f <goToUsermode>

c001336c <changeTSS>:
c001336c:	83 ec 14             	sub    esp,0x14
c001336f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013374:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013377:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001337c:	c1 e2 15             	shl    edx,0x15
c001337f:	29 d0                	sub    eax,edx
c0013381:	50                   	push   eax
c0013382:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0013387:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001338d:	05 7c 11 00 00       	add    eax,0x117c
c0013392:	50                   	push   eax
c0013393:	e8 50 5f ff ff       	call   c00092e8 <TSS::setESP(unsigned long)>
c0013398:	83 c4 1c             	add    esp,0x1c
c001339b:	c3                   	ret    

c001339c <switchToThread(ThreadControlBlock*)>:
c001339c:	57                   	push   edi
c001339d:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00133a2:	56                   	push   esi
c00133a3:	85 c0                	test   eax,eax
c00133a5:	53                   	push   ebx
c00133a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133aa:	0f 85 90 00 00 00    	jne    c0013440 <switchToThread(ThreadControlBlock*)+0xa4>
c00133b0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00133b3:	80 fa ff             	cmp    dl,0xff
c00133b6:	0f 84 80 00 00 00    	je     c001343c <switchToThread(ThreadControlBlock*)+0xa0>
c00133bc:	81 e2 ff 00 00 00    	and    edx,0xff
c00133c2:	b8 00 04 00 00       	mov    eax,0x400
c00133c7:	29 d0                	sub    eax,edx
c00133c9:	d1 f8                	sar    eax,1
c00133cb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00133ce:	66 90                	xchg   ax,ax
c00133d0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00133d3:	e8 7b 24 00 00       	call   c0015853 <HalQueryPerformanceCounter()>
c00133d8:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00133dd:	89 15 ec 3e 02 c0    	mov    DWORD PTR ds:0xc0023eec,edx
c00133e3:	89 c6                	mov    esi,eax
c00133e5:	89 d7                	mov    edi,edx
c00133e7:	2b 35 d8 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023ed8
c00133ed:	a3 d8 3e 02 c0       	mov    ds:0xc0023ed8,eax
c00133f2:	1b 3d dc 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023edc
c00133f8:	89 35 e0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee0,esi
c00133fe:	89 3d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,edi
c0013404:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001340a:	89 15 dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,edx
c0013410:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013413:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013416:	01 c6                	add    esi,eax
c0013418:	11 d7                	adc    edi,edx
c001341a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001341d:	83 ec 0c             	sub    esp,0xc
c0013420:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013423:	53                   	push   ebx
c0013424:	e8 6e ce fe ff       	call   c0000297 <switchToThreadASM>
c0013429:	0f 20 c0             	mov    eax,cr0
c001342c:	83 c8 08             	or     eax,0x8
c001342f:	0f 22 c0             	mov    cr0,eax
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	5b                   	pop    ebx
c0013436:	5e                   	pop    esi
c0013437:	5f                   	pop    edi
c0013438:	c3                   	ret    
c0013439:	8d 76 00             	lea    esi,[esi+0x0]
c001343c:	31 c0                	xor    eax,eax
c001343e:	eb 90                	jmp    c00133d0 <switchToThread(ThreadControlBlock*)+0x34>
c0013440:	5b                   	pop    ebx
c0013441:	c7 05 a0 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x1
c001344b:	5e                   	pop    esi
c001344c:	5f                   	pop    edi
c001344d:	c3                   	ret    
c001344e:	66 90                	xchg   ax,ax

c0013450 <Process::addArgs(char**)>:
c0013450:	57                   	push   edi
c0013451:	56                   	push   esi
c0013452:	53                   	push   ebx
c0013453:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013457:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001345b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013465:	85 ff                	test   edi,edi
c0013467:	74 43                	je     c00134ac <Process::addArgs(char**)+0x5c>
c0013469:	8b 07                	mov    eax,DWORD PTR [edi]
c001346b:	85 c0                	test   eax,eax
c001346d:	74 3d                	je     c00134ac <Process::addArgs(char**)+0x5c>
c001346f:	31 db                	xor    ebx,ebx
c0013471:	8d 76 00             	lea    esi,[esi+0x0]
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	50                   	push   eax
c0013478:	e8 e3 d0 fe ff       	call   c0000560 <strlen>
c001347d:	40                   	inc    eax
c001347e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013481:	e8 d3 49 ff ff       	call   c0007e59 <malloc>
c0013486:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001348d:	5a                   	pop    edx
c001348e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013491:	59                   	pop    ecx
c0013492:	43                   	inc    ebx
c0013493:	52                   	push   edx
c0013494:	50                   	push   eax
c0013495:	e8 86 d1 fe ff       	call   c0000620 <strcpy>
c001349a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00134a6:	85 c0                	test   eax,eax
c00134a8:	75 ca                	jne    c0013474 <Process::addArgs(char**)+0x24>
c00134aa:	66 90                	xchg   ax,ax
c00134ac:	5b                   	pop    ebx
c00134ad:	5e                   	pop    esi
c00134ae:	5f                   	pop    edi
c00134af:	c3                   	ret    

c00134b0 <Process::Process(char const*, Process*, char**)>:
c00134b0:	56                   	push   esi
c00134b1:	53                   	push   ebx
c00134b2:	83 ec 14             	sub    esp,0x14
c00134b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134b9:	05 0c 02 00 00       	add    eax,0x20c
c00134be:	bb 07 00 00 00       	mov    ebx,0x7
c00134c3:	89 c6                	mov    esi,eax
c00134c5:	8d 76 00             	lea    esi,[esi+0x0]
c00134c8:	85 db                	test   ebx,ebx
c00134ca:	78 14                	js     c00134e0 <Process::Process(char const*, Process*, char**)+0x30>
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	56                   	push   esi
c00134d0:	e8 77 96 00 00       	call   c001cb4c <ThreadControlBlock::ThreadControlBlock()>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	83 c6 5f             	add    esi,0x5f
c00134db:	4b                   	dec    ebx
c00134dc:	eb ea                	jmp    c00134c8 <Process::Process(char const*, Process*, char**)+0x18>
c00134de:	66 90                	xchg   ax,ax
c00134e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134e4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134eb:	83 ec 0c             	sub    esp,0xc
c00134ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134f2:	e8 09 d1 ff ff       	call   c0010600 <Krnl::newProcessEnv(Process*)>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	89 c2                	mov    edx,eax
c00134fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013500:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001350a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013513:	a1 b0 f9 01 c0       	mov    eax,ds:0xc001f9b0
c0013518:	8d 50 01             	lea    edx,[eax+0x1]
c001351b:	89 15 b0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9b0,edx
c0013521:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013525:	89 02                	mov    DWORD PTR [edx],eax
c0013527:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001352f:	83 ec 0c             	sub    esp,0xc
c0013532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013536:	e8 1e 49 ff ff       	call   c0007e59 <malloc>
c001353b:	83 c4 10             	add    esp,0x10
c001353e:	89 c3                	mov    ebx,eax
c0013540:	83 ec 08             	sub    esp,0x8
c0013543:	6a 00                	push   0x0
c0013545:	53                   	push   ebx
c0013546:	e8 8d 6f ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013552:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001355c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001356a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001356e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013578:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001357e:	85 c0                	test   eax,eax
c0013580:	74 42                	je     c00135c4 <Process::Process(char const*, Process*, char**)+0x114>
c0013582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013586:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001358c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013596:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001359c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b0:	05 0c 01 00 00       	add    eax,0x10c
c00135b5:	83 ec 08             	sub    esp,0x8
c00135b8:	52                   	push   edx
c00135b9:	50                   	push   eax
c00135ba:	e8 61 d0 fe ff       	call   c0000620 <strcpy>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	eb 64                	jmp    c0013628 <Process::Process(char const*, Process*, char**)+0x178>
c00135c4:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00135cc:	83 ec 0c             	sub    esp,0xc
c00135cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135d3:	e8 81 48 ff ff       	call   c0007e59 <malloc>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	89 c3                	mov    ebx,eax
c00135dd:	83 ec 08             	sub    esp,0x8
c00135e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135e4:	53                   	push   ebx
c00135e5:	e8 a2 5a ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013601:	83 ec 0c             	sub    esp,0xc
c0013604:	50                   	push   eax
c0013605:	e8 22 53 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013611:	05 0c 01 00 00       	add    eax,0x10c
c0013616:	83 ec 08             	sub    esp,0x8
c0013619:	68 5d eb 01 c0       	push   0xc001eb5d
c001361e:	50                   	push   eax
c001361f:	e8 fc cf fe ff       	call   c0000620 <strcpy>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	90                   	nop
c0013628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001362c:	83 c0 0c             	add    eax,0xc
c001362f:	83 ec 08             	sub    esp,0x8
c0013632:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013636:	50                   	push   eax
c0013637:	e8 e4 cf fe ff       	call   c0000620 <strcpy>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	83 ec 08             	sub    esp,0x8
c0013642:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013646:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001364a:	e8 01 fe ff ff       	call   c0013450 <Process::addArgs(char**)>
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	83 ec 08             	sub    esp,0x8
c0013655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001365d:	e8 89 ed ff ff       	call   c00123eb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013662:	83 c4 10             	add    esp,0x10
c0013665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013669:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001366d:	83 f0 01             	xor    eax,0x1
c0013670:	88 c2                	mov    dl,al
c0013672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013676:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001367c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013680:	25 ff 00 00 00       	and    eax,0xff
c0013685:	83 ec 08             	sub    esp,0x8
c0013688:	50                   	push   eax
c0013689:	68 b4 eb 01 c0       	push   0xc001ebb4
c001368e:	e8 55 75 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013693:	83 c4 10             	add    esp,0x10
c0013696:	90                   	nop
c0013697:	83 c4 14             	add    esp,0x14
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	c3                   	ret    
c001369d:	90                   	nop
c001369e:	66 90                	xchg   ax,ax

c00136a0 <Process::Process(bool, char const*, Process*, char**)>:
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	83 ec 24             	sub    esp,0x24
c00136a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00136ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b1:	05 0c 02 00 00       	add    eax,0x20c
c00136b6:	bb 07 00 00 00       	mov    ebx,0x7
c00136bb:	89 c6                	mov    esi,eax
c00136bd:	8d 76 00             	lea    esi,[esi+0x0]
c00136c0:	85 db                	test   ebx,ebx
c00136c2:	78 14                	js     c00136d8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	56                   	push   esi
c00136c8:	e8 7f 94 00 00       	call   c001cb4c <ThreadControlBlock::ThreadControlBlock()>
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	83 c6 5f             	add    esi,0x5f
c00136d3:	4b                   	dec    ebx
c00136d4:	eb ea                	jmp    c00136c0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00136d6:	66 90                	xchg   ax,ax
c00136d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136dc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136ea:	e8 11 cf ff ff       	call   c0010600 <Krnl::newProcessEnv(Process*)>
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	89 c2                	mov    edx,eax
c00136f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136f8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00136fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013702:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001370b:	a1 b0 f9 01 c0       	mov    eax,ds:0xc001f9b0
c0013710:	8d 50 01             	lea    edx,[eax+0x1]
c0013713:	89 15 b0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9b0,edx
c0013719:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001371d:	89 02                	mov    DWORD PTR [edx],eax
c001371f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013727:	83 ec 0c             	sub    esp,0xc
c001372a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001372e:	e8 26 47 ff ff       	call   c0007e59 <malloc>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	89 c3                	mov    ebx,eax
c0013738:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001373c:	25 ff 00 00 00       	and    eax,0xff
c0013741:	83 ec 08             	sub    esp,0x8
c0013744:	50                   	push   eax
c0013745:	53                   	push   ebx
c0013746:	e8 8d 6d ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c001374b:	83 c4 10             	add    esp,0x10
c001374e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013752:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001375c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001376a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001376e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013778:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001377e:	85 c0                	test   eax,eax
c0013780:	74 42                	je     c00137c4 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013786:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001378c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013796:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001379c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00137a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137b0:	05 0c 01 00 00       	add    eax,0x10c
c00137b5:	83 ec 08             	sub    esp,0x8
c00137b8:	52                   	push   edx
c00137b9:	50                   	push   eax
c00137ba:	e8 61 ce fe ff       	call   c0000620 <strcpy>
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	eb 64                	jmp    c0013828 <Process::Process(bool, char const*, Process*, char**)+0x188>
c00137c4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00137cc:	83 ec 0c             	sub    esp,0xc
c00137cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00137d3:	e8 81 46 ff ff       	call   c0007e59 <malloc>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	89 c3                	mov    ebx,eax
c00137dd:	83 ec 08             	sub    esp,0x8
c00137e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137e4:	53                   	push   ebx
c00137e5:	e8 a2 58 ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137f1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00137f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013801:	83 ec 0c             	sub    esp,0xc
c0013804:	50                   	push   eax
c0013805:	e8 22 51 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013811:	05 0c 01 00 00       	add    eax,0x10c
c0013816:	83 ec 08             	sub    esp,0x8
c0013819:	68 5d eb 01 c0       	push   0xc001eb5d
c001381e:	50                   	push   eax
c001381f:	e8 fc cd fe ff       	call   c0000620 <strcpy>
c0013824:	83 c4 10             	add    esp,0x10
c0013827:	90                   	nop
c0013828:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001382c:	83 c0 0c             	add    eax,0xc
c001382f:	83 ec 08             	sub    esp,0x8
c0013832:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013836:	50                   	push   eax
c0013837:	e8 e4 cd fe ff       	call   c0000620 <strcpy>
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	83 ec 08             	sub    esp,0x8
c0013842:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013846:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001384a:	e8 01 fc ff ff       	call   c0013450 <Process::addArgs(char**)>
c001384f:	83 c4 10             	add    esp,0x10
c0013852:	90                   	nop
c0013853:	83 c4 24             	add    esp,0x24
c0013856:	5b                   	pop    ebx
c0013857:	5e                   	pop    esi
c0013858:	c3                   	ret    
c0013859:	8d 76 00             	lea    esi,[esi+0x0]

c001385c <taskStartupFunction>:
c001385c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013861:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013864:	c3                   	ret    
c0013865:	90                   	nop
c0013866:	66 90                	xchg   ax,ax

c0013868 <Semaphore::Semaphore(int)>:
c0013868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001386c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013870:	89 10                	mov    DWORD PTR [eax],edx
c0013872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013876:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001387d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013881:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001388c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013893:	90                   	nop
c0013894:	c3                   	ret    
c0013895:	90                   	nop
c0013896:	66 90                	xchg   ax,ax

c0013898 <Mutex::Mutex()>:
c0013898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001389c:	6a 01                	push   0x1
c001389e:	50                   	push   eax
c001389f:	e8 c4 ff ff ff       	call   c0013868 <Semaphore::Semaphore(int)>
c00138a4:	83 c4 08             	add    esp,0x8
c00138a7:	90                   	nop
c00138a8:	c3                   	ret    
c00138a9:	90                   	nop
c00138aa:	66 90                	xchg   ax,ax

c00138ac <Process::createThread(void (*)(void*), void*, int)>:
c00138ac:	57                   	push   edi
c00138ad:	31 c9                	xor    ecx,ecx
c00138af:	56                   	push   esi
c00138b0:	53                   	push   ebx
c00138b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138b5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00138bc:	89 f2                	mov    edx,esi
c00138be:	66 90                	xchg   ax,ax
c00138c0:	31 c0                	xor    eax,eax
c00138c2:	66 89 d0             	mov    ax,dx
c00138c5:	83 e2 01             	and    edx,0x1
c00138c8:	74 12                	je     c00138dc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00138ca:	d1 f8                	sar    eax,1
c00138cc:	41                   	inc    ecx
c00138cd:	89 c2                	mov    edx,eax
c00138cf:	83 f9 10             	cmp    ecx,0x10
c00138d2:	75 ec                	jne    c00138c0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00138d4:	31 db                	xor    ebx,ebx
c00138d6:	89 d8                	mov    eax,ebx
c00138d8:	5b                   	pop    ebx
c00138d9:	5e                   	pop    esi
c00138da:	5f                   	pop    edi
c00138db:	c3                   	ret    
c00138dc:	b8 01 00 00 00       	mov    eax,0x1
c00138e1:	d3 e0                	shl    eax,cl
c00138e3:	09 c6                	or     esi,eax
c00138e5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138e8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00138ef:	01 c0                	add    eax,eax
c00138f1:	01 c8                	add    eax,ecx
c00138f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00138f6:	01 d8                	add    eax,ebx
c00138f8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00138ff:	75 0b                	jne    c001390c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013901:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001390b:	90                   	nop
c001390c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013912:	83 ec 08             	sub    esp,0x8
c0013915:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013918:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001391b:	01 c0                	add    eax,eax
c001391d:	01 c8                	add    eax,ecx
c001391f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013922:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013925:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001392b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013931:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013935:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001393b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013941:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013948:	89 ca                	mov    edx,ecx
c001394a:	f7 da                	neg    edx
c001394c:	c1 e2 15             	shl    edx,0x15
c001394f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013955:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001395b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001395f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013969:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001396f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013973:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013979:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013983:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001398d:	53                   	push   ebx
c001398e:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013993:	e8 54 8f 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013998:	83 c4 10             	add    esp,0x10
c001399b:	89 d8                	mov    eax,ebx
c001399d:	5b                   	pop    ebx
c001399e:	5e                   	pop    esi
c001399f:	5f                   	pop    edi
c00139a0:	c3                   	ret    
c00139a1:	90                   	nop
c00139a2:	66 90                	xchg   ax,ax

c00139a4 <Process::createUserThread()>:
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	68 80 00 00 00       	push   0x80
c00139ac:	6a 00                	push   0x0
c00139ae:	68 44 33 01 c0       	push   0xc0013344
c00139b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139b7:	50                   	push   eax
c00139b8:	e8 ef fe ff ff       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c00139bd:	83 c4 1c             	add    esp,0x1c
c00139c0:	c3                   	ret    
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]

c00139c4 <setupMultitasking(void (*)())>:
c00139c4:	56                   	push   esi
c00139c5:	53                   	push   ebx
c00139c6:	53                   	push   ebx
c00139c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139cb:	eb 13                	jmp    c00139e0 <setupMultitasking(void (*)())+0x1c>
c00139cd:	8d 76 00             	lea    esi,[esi+0x0]
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	68 c4 3e 02 c0       	push   0xc0023ec4
c00139d8:	e8 57 8e 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00139dd:	83 c4 10             	add    esp,0x10
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	68 c4 3e 02 c0       	push   0xc0023ec4
c00139e8:	e8 23 8e 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139ed:	83 c4 10             	add    esp,0x10
c00139f0:	84 c0                	test   al,al
c00139f2:	74 dc                	je     c00139d0 <setupMultitasking(void (*)())+0xc>
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	68 1f 07 00 00       	push   0x71f
c00139fc:	e8 58 44 ff ff       	call   c0007e59 <malloc>
c0013a01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013a08:	89 c3                	mov    ebx,eax
c0013a0a:	6a 00                	push   0x0
c0013a0c:	68 61 eb 01 c0       	push   0xc001eb61
c0013a11:	6a 01                	push   0x1
c0013a13:	50                   	push   eax
c0013a14:	e8 87 fc ff ff       	call   c00136a0 <Process::Process(bool, char const*, Process*, char**)>
c0013a19:	83 c4 14             	add    esp,0x14
c0013a1c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013a22:	89 1d d0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed0,ebx
c0013a28:	50                   	push   eax
c0013a29:	e8 5b 51 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c0013a2e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013a36:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013a40:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013a46:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a49:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013a53:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013a59:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013a5f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013a69:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013a73:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013a7d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a83:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a89:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a93:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a99:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013aa3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013aa9:	5a                   	pop    edx
c0013aaa:	59                   	pop    ecx
c0013aab:	68 5d eb 01 c0       	push   0xc001eb5d
c0013ab0:	50                   	push   eax
c0013ab1:	e8 6a cb fe ff       	call   c0000620 <strcpy>
c0013ab6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013abd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013ac1:	83 c4 14             	add    esp,0x14
c0013ac4:	5b                   	pop    ebx
c0013ac5:	5e                   	pop    esi
c0013ac6:	e9 be c7 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013acb:	90                   	nop

c0013acc <schedule()>:
c0013acc:	8b 15 a4 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea4
c0013ad2:	85 d2                	test   edx,edx
c0013ad4:	74 0e                	je     c0013ae4 <schedule()+0x18>
c0013ad6:	c7 05 a0 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x1
c0013ae0:	c3                   	ret    
c0013ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae4:	53                   	push   ebx
c0013ae5:	83 ec 14             	sub    esp,0x14
c0013ae8:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013aed:	e8 1e 8d 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	84 c0                	test   al,al
c0013af7:	75 3b                	jne    c0013b34 <schedule()+0x68>
c0013af9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013afe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013b01:	4a                   	dec    edx
c0013b02:	74 38                	je     c0013b3c <schedule()+0x70>
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013b0c:	e8 1b 8d 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b11:	c7 04 24 c4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec4
c0013b18:	89 c3                	mov    ebx,eax
c0013b1a:	e8 15 8d 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b1f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b29:	e8 6e f8 ff ff       	call   c001339c <switchToThread(ThreadControlBlock*)>
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	8d 76 00             	lea    esi,[esi+0x0]
c0013b34:	83 c4 08             	add    esp,0x8
c0013b37:	5b                   	pop    ebx
c0013b38:	c3                   	ret    
c0013b39:	8d 76 00             	lea    esi,[esi+0x0]
c0013b3c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013b43:	83 ec 08             	sub    esp,0x8
c0013b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b4b:	50                   	push   eax
c0013b4c:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013b51:	e8 96 8d 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b56:	83 c4 10             	add    esp,0x10
c0013b59:	eb a9                	jmp    c0013b04 <schedule()+0x38>
c0013b5b:	90                   	nop

c0013b5c <Semaphore::tryAcquire()>:
c0013b5c:	53                   	push   ebx
c0013b5d:	83 ec 08             	sub    esp,0x8
c0013b60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b64:	fa                   	cli    
c0013b65:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013b6a:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6d:	89 15 a8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea8,edx
c0013b73:	8b 15 a4 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea4
c0013b79:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013b7c:	89 1d a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,ebx
c0013b82:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b85:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b87:	7c 33                	jl     c0013bbc <Semaphore::tryAcquire()+0x60>
c0013b89:	89 15 a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,edx
c0013b8f:	85 d2                	test   edx,edx
c0013b91:	75 0d                	jne    c0013ba0 <Semaphore::tryAcquire()+0x44>
c0013b93:	8b 15 a0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea0
c0013b99:	85 d2                	test   edx,edx
c0013b9b:	75 6b                	jne    c0013c08 <Semaphore::tryAcquire()+0xac>
c0013b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba0:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013ba5:	85 c0                	test   eax,eax
c0013ba7:	74 0b                	je     c0013bb4 <Semaphore::tryAcquire()+0x58>
c0013ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bac:	31 c0                	xor    eax,eax
c0013bae:	83 c4 08             	add    esp,0x8
c0013bb1:	5b                   	pop    ebx
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop
c0013bb4:	fb                   	sti    
c0013bb5:	83 c4 08             	add    esp,0x8
c0013bb8:	5b                   	pop    ebx
c0013bb9:	c3                   	ret    
c0013bba:	66 90                	xchg   ax,ax
c0013bbc:	43                   	inc    ebx
c0013bbd:	89 15 a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,edx
c0013bc3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013bc6:	85 d2                	test   edx,edx
c0013bc8:	75 22                	jne    c0013bec <Semaphore::tryAcquire()+0x90>
c0013bca:	8b 0d a0 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ea0
c0013bd0:	85 c9                	test   ecx,ecx
c0013bd2:	74 18                	je     c0013bec <Semaphore::tryAcquire()+0x90>
c0013bd4:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0013bde:	e8 e9 fe ff ff       	call   c0013acc <schedule()>
c0013be3:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013be8:	48                   	dec    eax
c0013be9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bec:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013bf1:	85 c0                	test   eax,eax
c0013bf3:	75 0b                	jne    c0013c00 <Semaphore::tryAcquire()+0xa4>
c0013bf5:	fb                   	sti    
c0013bf6:	b0 01                	mov    al,0x1
c0013bf8:	83 c4 08             	add    esp,0x8
c0013bfb:	5b                   	pop    ebx
c0013bfc:	c3                   	ret    
c0013bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0013c00:	b0 01                	mov    al,0x1
c0013c02:	83 c4 08             	add    esp,0x8
c0013c05:	5b                   	pop    ebx
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop
c0013c08:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0013c12:	e8 b5 fe ff ff       	call   c0013acc <schedule()>
c0013c17:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013c1c:	48                   	dec    eax
c0013c1d:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013c22:	85 c0                	test   eax,eax
c0013c24:	75 86                	jne    c0013bac <Semaphore::tryAcquire()+0x50>
c0013c26:	eb 8c                	jmp    c0013bb4 <Semaphore::tryAcquire()+0x58>

c0013c28 <Semaphore::assertLocked(char const*)>:
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c2f:	fa                   	cli    
c0013c30:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013c36:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0013c3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c3e:	89 0d a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,ecx
c0013c44:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c46:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013c49:	7c 29                	jl     c0013c74 <Semaphore::assertLocked(char const*)+0x4c>
c0013c4b:	90                   	nop
c0013c4c:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0013c51:	85 c0                	test   eax,eax
c0013c53:	75 0b                	jne    c0013c60 <Semaphore::assertLocked(char const*)+0x38>
c0013c55:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0013c5a:	85 c0                	test   eax,eax
c0013c5c:	75 2e                	jne    c0013c8c <Semaphore::assertLocked(char const*)+0x64>
c0013c5e:	66 90                	xchg   ax,ax
c0013c60:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013c65:	48                   	dec    eax
c0013c66:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013c6b:	75 03                	jne    c0013c70 <Semaphore::assertLocked(char const*)+0x48>
c0013c6d:	fb                   	sti    
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 0c             	add    esp,0xc
c0013c73:	c3                   	ret    
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c7b:	52                   	push   edx
c0013c7c:	e8 f6 ca ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0013c81:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0013c86:	83 c4 10             	add    esp,0x10
c0013c89:	48                   	dec    eax
c0013c8a:	eb c0                	jmp    c0013c4c <Semaphore::assertLocked(char const*)+0x24>
c0013c8c:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0013c96:	e8 31 fe ff ff       	call   c0013acc <schedule()>
c0013c9b:	eb c3                	jmp    c0013c60 <Semaphore::assertLocked(char const*)+0x38>
c0013c9d:	8d 76 00             	lea    esi,[esi+0x0]

c0013ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013ca0:	83 ec 0c             	sub    esp,0xc
c0013ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013caf:	e8 18 fe ff ff       	call   c0013acc <schedule()>
c0013cb4:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013cb9:	48                   	dec    eax
c0013cba:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013cbf:	75 03                	jne    c0013cc4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013cc1:	fb                   	sti    
c0013cc2:	66 90                	xchg   ax,ax
c0013cc4:	83 c4 0c             	add    esp,0xc
c0013cc7:	c3                   	ret    

c0013cc8 <blockTask(TaskState)>:
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	fa                   	cli    
c0013ccc:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013cd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cdb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013cde:	e8 e9 fd ff ff       	call   c0013acc <schedule()>
c0013ce3:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013ce8:	48                   	dec    eax
c0013ce9:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013cee:	75 04                	jne    c0013cf4 <blockTask(TaskState)+0x2c>
c0013cf0:	fb                   	sti    
c0013cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf4:	83 c4 0c             	add    esp,0xc
c0013cf7:	c3                   	ret    

c0013cf8 <waitTask(int, int*, int)>:
c0013cf8:	83 ec 18             	sub    esp,0x18
c0013cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d04:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013d07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d10:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013d13:	6a 07                	push   0x7
c0013d15:	e8 ae ff ff ff       	call   c0013cc8 <blockTask(TaskState)>
c0013d1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013d25:	85 d2                	test   edx,edx
c0013d27:	74 0b                	je     c0013d34 <waitTask(int, int*, int)+0x3c>
c0013d29:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013d2c:	89 02                	mov    DWORD PTR [edx],eax
c0013d2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d33:	90                   	nop
c0013d34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013d37:	83 c4 0c             	add    esp,0xc
c0013d3a:	c3                   	ret    
c0013d3b:	90                   	nop

c0013d3c <milliTenthSleepUntil(unsigned int)>:
c0013d3c:	83 ec 0c             	sub    esp,0xc
c0013d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d43:	39 05 ac 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fac,eax
c0013d49:	76 05                	jbe    c0013d50 <milliTenthSleepUntil(unsigned int)+0x14>
c0013d4b:	90                   	nop
c0013d4c:	83 c4 0c             	add    esp,0xc
c0013d4f:	c3                   	ret    
c0013d50:	fa                   	cli    
c0013d51:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013d57:	83 ec 08             	sub    esp,0x8
c0013d5a:	ff 05 a4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea4
c0013d60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d66:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013d69:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d6f:	52                   	push   edx
c0013d70:	68 b8 3e 02 c0       	push   0xc0023eb8
c0013d75:	e8 72 8b 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d7a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d81:	e8 42 ff ff ff       	call   c0013cc8 <blockTask(TaskState)>
c0013d86:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	48                   	dec    eax
c0013d8f:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0013d94:	85 c0                	test   eax,eax
c0013d96:	75 0c                	jne    c0013da4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d98:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0013d9d:	85 c0                	test   eax,eax
c0013d9f:	75 17                	jne    c0013db8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013da1:	8d 76 00             	lea    esi,[esi+0x0]
c0013da4:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013da9:	48                   	dec    eax
c0013daa:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013daf:	75 9b                	jne    c0013d4c <milliTenthSleepUntil(unsigned int)+0x10>
c0013db1:	fb                   	sti    
c0013db2:	83 c4 0c             	add    esp,0xc
c0013db5:	c3                   	ret    
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0013dc2:	e8 05 fd ff ff       	call   c0013acc <schedule()>
c0013dc7:	eb db                	jmp    c0013da4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013dc9:	8d 76 00             	lea    esi,[esi+0x0]

c0013dcc <milliTenthSleep(unsigned int)>:
c0013dcc:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c0013dd1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013dd5:	e9 62 ff ff ff       	jmp    c0013d3c <milliTenthSleepUntil(unsigned int)>
c0013dda:	66 90                	xchg   ax,ax

c0013ddc <sleep(unsigned int)>:
c0013ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013de0:	8d 04 80             	lea    eax,[eax+eax*4]
c0013de3:	8d 04 80             	lea    eax,[eax+eax*4]
c0013de6:	8d 04 80             	lea    eax,[eax+eax*4]
c0013de9:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dec:	c1 e0 04             	shl    eax,0x4
c0013def:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013df3:	eb d7                	jmp    c0013dcc <milliTenthSleep(unsigned int)>
c0013df5:	90                   	nop
c0013df6:	66 90                	xchg   ax,ax

c0013df8 <Semaphore::acquire()>:
c0013df8:	83 ec 0c             	sub    esp,0xc
c0013dfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dff:	fa                   	cli    
c0013e00:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0013e05:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013e0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e0e:	89 0d a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,ecx
c0013e14:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013e17:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013e19:	7d 2d                	jge    c0013e48 <Semaphore::acquire()+0x50>
c0013e1b:	41                   	inc    ecx
c0013e1c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013e1f:	90                   	nop
c0013e20:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0013e25:	85 c0                	test   eax,eax
c0013e27:	75 0b                	jne    c0013e34 <Semaphore::acquire()+0x3c>
c0013e29:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0013e2e:	85 c0                	test   eax,eax
c0013e30:	75 62                	jne    c0013e94 <Semaphore::acquire()+0x9c>
c0013e32:	66 90                	xchg   ax,ax
c0013e34:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013e39:	48                   	dec    eax
c0013e3a:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013e3f:	75 03                	jne    c0013e44 <Semaphore::acquire()+0x4c>
c0013e41:	fb                   	sti    
c0013e42:	66 90                	xchg   ax,ax
c0013e44:	83 c4 0c             	add    esp,0xc
c0013e47:	c3                   	ret    
c0013e48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013e54:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013e57:	85 c9                	test   ecx,ecx
c0013e59:	74 4d                	je     c0013ea8 <Semaphore::acquire()+0xb0>
c0013e5b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013e5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e64:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013e67:	90                   	nop
c0013e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e6d:	83 ec 0c             	sub    esp,0xc
c0013e70:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013e73:	68 dc eb 01 c0       	push   0xc001ebdc
c0013e78:	e8 6b 6d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013e7d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e84:	e8 3f fe ff ff       	call   c0013cc8 <blockTask(TaskState)>
c0013e89:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	48                   	dec    eax
c0013e92:	eb 8c                	jmp    c0013e20 <Semaphore::acquire()+0x28>
c0013e94:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0013e9e:	e8 29 fc ff ff       	call   c0013acc <schedule()>
c0013ea3:	eb 8f                	jmp    c0013e34 <Semaphore::acquire()+0x3c>
c0013ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ead:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013eb0:	eb b6                	jmp    c0013e68 <Semaphore::acquire()+0x70>
c0013eb2:	66 90                	xchg   ax,ax

c0013eb4 <taskReturned>:
c0013eb4:	83 ec 18             	sub    esp,0x18
c0013eb7:	68 fc eb 01 c0       	push   0xc001ebfc
c0013ebc:	e8 b6 c8 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	6a 02                	push   0x2
c0013ec9:	e8 fa fd ff ff       	call   c0013cc8 <blockTask(TaskState)>
c0013ece:	fa                   	cli    
c0013ecf:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013ed5:	e8 f2 fb ff ff       	call   c0013acc <schedule()>
c0013eda:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	48                   	dec    eax
c0013ee3:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013ee8:	85 c0                	test   eax,eax
c0013eea:	75 d8                	jne    c0013ec4 <taskReturned+0x10>
c0013eec:	fb                   	sti    
c0013eed:	eb d5                	jmp    c0013ec4 <taskReturned+0x10>
c0013eef:	90                   	nop

c0013ef0 <Thr::processFromPID(int)>:
c0013ef0:	57                   	push   edi
c0013ef1:	56                   	push   esi
c0013ef2:	53                   	push   ebx
c0013ef3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ef7:	fa                   	cli    
c0013ef8:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013f06:	e8 21 89 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	89 c7                	mov    edi,eax
c0013f10:	eb 16                	jmp    c0013f28 <Thr::processFromPID(int)+0x38>
c0013f12:	66 90                	xchg   ax,ax
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013f1c:	e8 0b 89 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	39 f8                	cmp    eax,edi
c0013f26:	74 4c                	je     c0013f74 <Thr::processFromPID(int)+0x84>
c0013f28:	83 ec 0c             	sub    esp,0xc
c0013f2b:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013f30:	e8 f7 88 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f35:	c7 04 24 c4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec4
c0013f3c:	89 c3                	mov    ebx,eax
c0013f3e:	e8 f1 88 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f43:	58                   	pop    eax
c0013f44:	5a                   	pop    edx
c0013f45:	53                   	push   ebx
c0013f46:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013f4b:	e8 9c 89 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	39 30                	cmp    DWORD PTR [eax],esi
c0013f58:	75 ba                	jne    c0013f14 <Thr::processFromPID(int)+0x24>
c0013f5a:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013f5f:	48                   	dec    eax
c0013f60:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013f65:	74 09                	je     c0013f70 <Thr::processFromPID(int)+0x80>
c0013f67:	90                   	nop
c0013f68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f6b:	5b                   	pop    ebx
c0013f6c:	5e                   	pop    esi
c0013f6d:	5f                   	pop    edi
c0013f6e:	c3                   	ret    
c0013f6f:	90                   	nop
c0013f70:	fb                   	sti    
c0013f71:	eb f5                	jmp    c0013f68 <Thr::processFromPID(int)+0x78>
c0013f73:	90                   	nop
c0013f74:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013f79:	48                   	dec    eax
c0013f7a:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013f7f:	75 07                	jne    c0013f88 <Thr::processFromPID(int)+0x98>
c0013f81:	fb                   	sti    
c0013f82:	5b                   	pop    ebx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	c3                   	ret    
c0013f86:	66 90                	xchg   ax,ax
c0013f88:	5b                   	pop    ebx
c0013f89:	31 c0                	xor    eax,eax
c0013f8b:	5e                   	pop    esi
c0013f8c:	5f                   	pop    edi
c0013f8d:	c3                   	ret    
c0013f8e:	66 90                	xchg   ax,ax

c0013f90 <unblockTask(ThreadControlBlock*)>:
c0013f90:	53                   	push   ebx
c0013f91:	83 ec 08             	sub    esp,0x8
c0013f94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f98:	fa                   	cli    
c0013f99:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0013f9f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013fa2:	85 c0                	test   eax,eax
c0013fa4:	74 66                	je     c001400c <unblockTask(ThreadControlBlock*)+0x7c>
c0013fa6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013fa9:	48                   	dec    eax
c0013faa:	74 38                	je     c0013fe4 <unblockTask(ThreadControlBlock*)+0x54>
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013fb4:	e8 73 88 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	85 c0                	test   eax,eax
c0013fbe:	75 1c                	jne    c0013fdc <unblockTask(ThreadControlBlock*)+0x4c>
c0013fc0:	eb 5e                	jmp    c0014020 <unblockTask(ThreadControlBlock*)+0x90>
c0013fc2:	66 90                	xchg   ax,ax
c0013fc4:	83 ec 08             	sub    esp,0x8
c0013fc7:	50                   	push   eax
c0013fc8:	68 c4 3e 02 c0       	push   0xc0023ec4
c0013fcd:	e8 0a 8c 00 00       	call   c001cbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fd2:	83 c4 10             	add    esp,0x10
c0013fd5:	85 c0                	test   eax,eax
c0013fd7:	74 47                	je     c0014020 <unblockTask(ThreadControlBlock*)+0x90>
c0013fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fdc:	39 c3                	cmp    ebx,eax
c0013fde:	75 e4                	jne    c0013fc4 <unblockTask(ThreadControlBlock*)+0x34>
c0013fe0:	eb 12                	jmp    c0013ff4 <unblockTask(ThreadControlBlock*)+0x64>
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	83 ec 0c             	sub    esp,0xc
c0013fe7:	68 7f eb 01 c0       	push   0xc001eb7f
c0013fec:	e8 f7 6b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0013ff9:	48                   	dec    eax
c0013ffa:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0013fff:	75 03                	jne    c0014004 <unblockTask(ThreadControlBlock*)+0x74>
c0014001:	fb                   	sti    
c0014002:	66 90                	xchg   ax,ax
c0014004:	83 c4 08             	add    esp,0x8
c0014007:	5b                   	pop    ebx
c0014008:	c3                   	ret    
c0014009:	8d 76 00             	lea    esi,[esi+0x0]
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	68 68 eb 01 c0       	push   0xc001eb68
c0014014:	e8 cf 6b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	eb d6                	jmp    c0013ff4 <unblockTask(ThreadControlBlock*)+0x64>
c001401e:	66 90                	xchg   ax,ax
c0014020:	83 ec 08             	sub    esp,0x8
c0014023:	53                   	push   ebx
c0014024:	68 c4 3e 02 c0       	push   0xc0023ec4
c0014029:	e8 be 88 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	eb c1                	jmp    c0013ff4 <unblockTask(ThreadControlBlock*)+0x64>
c0014033:	90                   	nop

c0014034 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014034:	55                   	push   ebp
c0014035:	57                   	push   edi
c0014036:	56                   	push   esi
c0014037:	53                   	push   ebx
c0014038:	83 ec 1c             	sub    esp,0x1c
c001403b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001403f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014042:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014048:	85 ed                	test   ebp,ebp
c001404a:	7e 24                	jle    c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c001404c:	31 f6                	xor    esi,esi
c001404e:	66 90                	xchg   ax,ax
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001405a:	46                   	inc    esi
c001405b:	57                   	push   edi
c001405c:	e8 08 3e ff ff       	call   c0007e69 <free>
c0014061:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001406d:	7f e1                	jg     c0014050 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001406f:	90                   	nop
c0014070:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001407a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001407f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014082:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014085:	d3 c0                	rol    eax,cl
c0014087:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001408e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014091:	89 f7                	mov    edi,esi
c0014093:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001409b:	0f 85 77 01 00 00    	jne    c0014218 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00140a1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00140a7:	85 ed                	test   ebp,ebp
c00140a9:	74 1d                	je     c00140c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00140ab:	83 ec 0c             	sub    esp,0xc
c00140ae:	55                   	push   ebp
c00140af:	e8 68 c4 ff ff       	call   c001051c <EnvVarContainer::~EnvVarContainer()>
c00140b4:	59                   	pop    ecx
c00140b5:	5e                   	pop    esi
c00140b6:	6a 0c                	push   0xc
c00140b8:	55                   	push   ebp
c00140b9:	e8 34 6a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00140be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	89 f7                	mov    edi,esi
c00140c6:	66 90                	xchg   ax,ax
c00140c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140ce:	85 c0                	test   eax,eax
c00140d0:	0f 84 b6 00 00 00    	je     c001418c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140d6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00140d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00140dd:	31 c9                	xor    ecx,ecx
c00140df:	eb 17                	jmp    c00140f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00140e1:	8d 76 00             	lea    esi,[esi+0x0]
c00140e4:	41                   	inc    ecx
c00140e5:	83 f9 10             	cmp    ecx,0x10
c00140e8:	0f 84 9e 00 00 00    	je     c001418c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140ee:	66 90                	xchg   ax,ax
c00140f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140f6:	66 90                	xchg   ax,ax
c00140f8:	31 d2                	xor    edx,edx
c00140fa:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014101:	d3 fa                	sar    edx,cl
c0014103:	83 e2 01             	and    edx,0x1
c0014106:	74 dc                	je     c00140e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014108:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001410b:	01 d2                	add    edx,edx
c001410d:	01 ca                	add    edx,ecx
c001410f:	8d 14 92             	lea    edx,[edx+edx*4]
c0014112:	01 d0                	add    eax,edx
c0014114:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001411a:	83 fd 07             	cmp    ebp,0x7
c001411d:	75 c5                	jne    c00140e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001411f:	05 40 02 00 00       	add    eax,0x240
c0014124:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014127:	83 fd ff             	cmp    ebp,0xffffffff
c001412a:	0f 8c f0 00 00 00    	jl     c0014220 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014130:	0f 84 ae 01 00 00    	je     c00142e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014136:	85 ed                	test   ebp,ebp
c0014138:	0f 84 92 01 00 00    	je     c00142d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001413e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014140:	75 a2                	jne    c00140e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014142:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014148:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001414c:	01 d0                	add    eax,edx
c001414e:	66 90                	xchg   ax,ax
c0014150:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014154:	83 ec 0c             	sub    esp,0xc
c0014157:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001415d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014160:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014166:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001416d:	50                   	push   eax
c001416e:	e8 1d fe ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c0014173:	83 c4 10             	add    esp,0x10
c0014176:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014179:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001417d:	89 f7                	mov    edi,esi
c001417f:	41                   	inc    ecx
c0014180:	83 f9 10             	cmp    ecx,0x10
c0014183:	0f 85 67 ff ff ff    	jne    c00140f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014189:	8d 76 00             	lea    esi,[esi+0x0]
c001418c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014192:	85 c0                	test   eax,eax
c0014194:	74 62                	je     c00141f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014196:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001419c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00141a2:	74 54                	je     c00141f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	68 c4 3e 02 c0       	push   0xc0023ec4
c00141ac:	e8 7b 86 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141b1:	c7 04 24 c4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec4
c00141b8:	89 c7                	mov    edi,eax
c00141ba:	e8 51 86 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	84 c0                	test   al,al
c00141c4:	0f 84 ce 00 00 00    	je     c0014298 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00141ca:	66 90                	xchg   ax,ax
c00141cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141cf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00141d5:	85 d2                	test   edx,edx
c00141d7:	74 0f                	je     c00141e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00141d9:	83 ec 0c             	sub    esp,0xc
c00141dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00141de:	52                   	push   edx
c00141df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141e5:	83 c4 10             	add    esp,0x10
c00141e8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00141f2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00141f5:	8d 76 00             	lea    esi,[esi+0x0]
c00141f8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00141fe:	85 db                	test   ebx,ebx
c0014200:	74 16                	je     c0014218 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	53                   	push   ebx
c0014206:	e8 bb 5c ff ff       	call   c0009ec6 <VAS::~VAS()>
c001420b:	58                   	pop    eax
c001420c:	5a                   	pop    edx
c001420d:	6a 14                	push   0x14
c001420f:	53                   	push   ebx
c0014210:	e8 dd 68 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	83 c4 1c             	add    esp,0x1c
c001421b:	5b                   	pop    ebx
c001421c:	5e                   	pop    esi
c001421d:	5f                   	pop    edi
c001421e:	5d                   	pop    ebp
c001421f:	c3                   	ret    
c0014220:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 30 ec 01 c0       	push   0xc001ec30
c001422c:	e8 46 c5 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0014231:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014234:	83 c4 10             	add    esp,0x10
c0014237:	89 f7                	mov    edi,esi
c0014239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001423d:	e9 a2 fe ff ff       	jmp    c00140e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014242:	66 90                	xchg   ax,ax
c0014244:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001424a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014250:	75 1e                	jne    c0014270 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014252:	83 ec 0c             	sub    esp,0xc
c0014255:	68 98 ec 01 c0       	push   0xc001ec98
c001425a:	e8 89 69 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001425f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014266:	e8 5d fa ff ff       	call   c0013cc8 <blockTask(TaskState)>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	66 90                	xchg   ax,ax
c0014270:	83 ec 08             	sub    esp,0x8
c0014273:	56                   	push   esi
c0014274:	68 c4 3e 02 c0       	push   0xc0023ec4
c0014279:	e8 6e 86 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001427e:	c7 04 24 c4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec4
c0014285:	e8 a2 85 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	39 f8                	cmp    eax,edi
c001428f:	0f 84 37 ff ff ff    	je     c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014295:	8d 76 00             	lea    esi,[esi+0x0]
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	68 c4 3e 02 c0       	push   0xc0023ec4
c00142a0:	e8 87 85 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00142a5:	c7 04 24 c4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec4
c00142ac:	89 c6                	mov    esi,eax
c00142ae:	e8 81 85 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00142b3:	83 c4 10             	add    esp,0x10
c00142b6:	39 f3                	cmp    ebx,esi
c00142b8:	74 b6                	je     c0014270 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00142ba:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00142bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142c0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00142c6:	75 a8                	jne    c0014270 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00142c8:	e9 77 ff ff ff       	jmp    c0014244 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00142cd:	8d 76 00             	lea    esi,[esi+0x0]
c00142d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	68 64 ec 01 c0       	push   0xc001ec64
c00142dc:	e9 4b ff ff ff       	jmp    c001422c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00142e1:	8d 76 00             	lea    esi,[esi+0x0]
c00142e4:	8b 36                	mov    esi,DWORD PTR [esi]
c00142e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142ea:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00142ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142f0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00142f6:	01 d7                	add    edi,edx
c00142f8:	89 f8                	mov    eax,edi
c00142fa:	e9 51 fe ff ff       	jmp    c0014150 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00142ff:	90                   	nop

c0014300 <cleanerTaskFunction(void*)>:
c0014300:	53                   	push   ebx
c0014301:	83 ec 08             	sub    esp,0x8
c0014304:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014309:	48                   	dec    eax
c001430a:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001430f:	75 03                	jne    c0014314 <cleanerTaskFunction(void*)+0x14>
c0014311:	fb                   	sti    
c0014312:	66 90                	xchg   ax,ax
c0014314:	fa                   	cli    
c0014315:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c001431a:	80 3d 8c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e8c,0x0
c0014321:	8d 50 01             	lea    edx,[eax+0x1]
c0014324:	89 15 a8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea8,edx
c001432a:	0f 84 ac 00 00 00    	je     c00143dc <cleanerTaskFunction(void*)+0xdc>
c0014330:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014335:	85 c0                	test   eax,eax
c0014337:	75 03                	jne    c001433c <cleanerTaskFunction(void*)+0x3c>
c0014339:	fb                   	sti    
c001433a:	66 90                	xchg   ax,ax
c001433c:	c6 05 8c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e8c,0x0
c0014343:	fa                   	cli    
c0014344:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001434a:	ff 05 a4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea4
c0014350:	fa                   	cli    
c0014351:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0014357:	eb 2b                	jmp    c0014384 <cleanerTaskFunction(void*)+0x84>
c0014359:	8d 76 00             	lea    esi,[esi+0x0]
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	68 ac 3e 02 c0       	push   0xc0023eac
c0014364:	e8 c3 84 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014369:	c7 04 24 ac 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eac
c0014370:	89 c3                	mov    ebx,eax
c0014372:	e8 bd 84 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014377:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001437a:	e8 b5 fc ff ff       	call   c0014034 <cleanupTerminatedTask(ThreadControlBlock*)>
c001437f:	83 c4 10             	add    esp,0x10
c0014382:	66 90                	xchg   ax,ax
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	68 ac 3e 02 c0       	push   0xc0023eac
c001438c:	e8 7f 84 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014391:	83 c4 10             	add    esp,0x10
c0014394:	84 c0                	test   al,al
c0014396:	74 c4                	je     c001435c <cleanerTaskFunction(void*)+0x5c>
c0014398:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c001439d:	48                   	dec    eax
c001439e:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00143a3:	75 03                	jne    c00143a8 <cleanerTaskFunction(void*)+0xa8>
c00143a5:	fb                   	sti    
c00143a6:	66 90                	xchg   ax,ax
c00143a8:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00143ad:	48                   	dec    eax
c00143ae:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c00143b3:	0f 85 4b ff ff ff    	jne    c0014304 <cleanerTaskFunction(void*)+0x4>
c00143b9:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c00143be:	85 c0                	test   eax,eax
c00143c0:	0f 84 3e ff ff ff    	je     c0014304 <cleanerTaskFunction(void*)+0x4>
c00143c6:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c00143d0:	e8 f7 f6 ff ff       	call   c0013acc <schedule()>
c00143d5:	e9 2a ff ff ff       	jmp    c0014304 <cleanerTaskFunction(void*)+0x4>
c00143da:	66 90                	xchg   ax,ax
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	6a 02                	push   0x2
c00143e1:	e8 ba f8 ff ff       	call   c0013ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143e6:	83 c4 10             	add    esp,0x10
c00143e9:	e9 4e ff ff ff       	jmp    c001433c <cleanerTaskFunction(void*)+0x3c>
c00143ee:	66 90                	xchg   ax,ax

c00143f0 <terminateTask(int)>:
c00143f0:	83 ec 14             	sub    esp,0x14
c00143f3:	fa                   	cli    
c00143f4:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c00143fa:	ff 05 a4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea4
c0014400:	fa                   	cli    
c0014401:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0014407:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001440b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014410:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014418:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001441b:	50                   	push   eax
c001441c:	68 ac 3e 02 c0       	push   0xc0023eac
c0014421:	e8 c6 84 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014435:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001443a:	85 c0                	test   eax,eax
c001443c:	74 5e                	je     c001449c <terminateTask(int)+0xac>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	c6 05 8c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e8c,0x1
c0014448:	50                   	push   eax
c0014449:	e8 42 fb ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	8d 76 00             	lea    esi,[esi+0x0]
c0014454:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014459:	48                   	dec    eax
c001445a:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001445f:	75 03                	jne    c0014464 <terminateTask(int)+0x74>
c0014461:	fb                   	sti    
c0014462:	66 90                	xchg   ax,ax
c0014464:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0014469:	48                   	dec    eax
c001446a:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c001446f:	75 0b                	jne    c001447c <terminateTask(int)+0x8c>
c0014471:	83 3d a0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ea0,0x0
c0014478:	75 36                	jne    c00144b0 <terminateTask(int)+0xc0>
c001447a:	66 90                	xchg   ax,ax
c001447c:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014481:	48                   	dec    eax
c0014482:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014487:	75 03                	jne    c001448c <terminateTask(int)+0x9c>
c0014489:	fb                   	sti    
c001448a:	66 90                	xchg   ax,ax
c001448c:	fa                   	cli    
c001448d:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0014493:	90                   	nop
c0014494:	e8 33 f6 ff ff       	call   c0013acc <schedule()>
c0014499:	eb e1                	jmp    c001447c <terminateTask(int)+0x8c>
c001449b:	90                   	nop
c001449c:	83 ec 0c             	sub    esp,0xc
c001449f:	68 96 eb 01 c0       	push   0xc001eb96
c00144a4:	e8 3f 67 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	eb a6                	jmp    c0014454 <terminateTask(int)+0x64>
c00144ae:	66 90                	xchg   ax,ax
c00144b0:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c00144ba:	eb d8                	jmp    c0014494 <terminateTask(int)+0xa4>

c00144bc <Thr::terminateFromIRQ(int)>:
c00144bc:	83 ec 18             	sub    esp,0x18
c00144bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144c3:	50                   	push   eax
c00144c4:	e8 27 ff ff ff       	call   c00143f0 <terminateTask(int)>
c00144c9:	90                   	nop
c00144ca:	66 90                	xchg   ax,ax

c00144cc <Semaphore::release()>:
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00144d3:	fa                   	cli    
c00144d4:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00144d9:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c00144df:	8d 48 01             	lea    ecx,[eax+0x1]
c00144e2:	89 0d a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,ecx
c00144e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00144eb:	85 c9                	test   ecx,ecx
c00144ed:	74 41                	je     c0014530 <Semaphore::release()+0x64>
c00144ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144f8:	51                   	push   ecx
c00144f9:	e8 92 fa ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c00144fe:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	48                   	dec    eax
c0014507:	90                   	nop
c0014508:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c001450d:	85 c0                	test   eax,eax
c001450f:	75 0b                	jne    c001451c <Semaphore::release()+0x50>
c0014511:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0014516:	85 c0                	test   eax,eax
c0014518:	75 1e                	jne    c0014538 <Semaphore::release()+0x6c>
c001451a:	66 90                	xchg   ax,ax
c001451c:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014521:	48                   	dec    eax
c0014522:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014527:	75 03                	jne    c001452c <Semaphore::release()+0x60>
c0014529:	fb                   	sti    
c001452a:	66 90                	xchg   ax,ax
c001452c:	83 c4 0c             	add    esp,0xc
c001452f:	c3                   	ret    
c0014530:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014533:	eb d3                	jmp    c0014508 <Semaphore::release()+0x3c>
c0014535:	8d 76 00             	lea    esi,[esi+0x0]
c0014538:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c0014542:	e8 85 f5 ff ff       	call   c0013acc <schedule()>
c0014547:	eb d3                	jmp    c001451c <Semaphore::release()+0x50>
c0014549:	8d 76 00             	lea    esi,[esi+0x0]

c001454c <__static_initialization_and_destruction_0(int, int)>:
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014554:	0f 85 8e 00 00 00    	jne    c00145e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001455a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014562:	0f 85 80 00 00 00    	jne    c00145e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	68 c4 3e 02 c0       	push   0xc0023ec4
c0014570:	e8 23 86 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	83 ec 04             	sub    esp,0x4
c001457b:	68 58 f7 01 c0       	push   0xc001f758
c0014580:	68 c4 3e 02 c0       	push   0xc0023ec4
c0014585:	68 48 cb 01 c0       	push   0xc001cb48
c001458a:	e8 13 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c001458f:	83 c4 10             	add    esp,0x10
c0014592:	83 ec 0c             	sub    esp,0xc
c0014595:	68 b8 3e 02 c0       	push   0xc0023eb8
c001459a:	e8 f9 85 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	83 ec 04             	sub    esp,0x4
c00145a5:	68 58 f7 01 c0       	push   0xc001f758
c00145aa:	68 b8 3e 02 c0       	push   0xc0023eb8
c00145af:	68 48 cb 01 c0       	push   0xc001cb48
c00145b4:	e8 e9 64 ff ff       	call   c000aaa2 <__cxa_atexit>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	68 ac 3e 02 c0       	push   0xc0023eac
c00145c4:	e8 cf 85 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	83 ec 04             	sub    esp,0x4
c00145cf:	68 58 f7 01 c0       	push   0xc001f758
c00145d4:	68 ac 3e 02 c0       	push   0xc0023eac
c00145d9:	68 48 cb 01 c0       	push   0xc001cb48
c00145de:	e8 bf 64 ff ff       	call   c000aaa2 <__cxa_atexit>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	66 90                	xchg   ax,ax
c00145e8:	90                   	nop
c00145e9:	83 c4 0c             	add    esp,0xc
c00145ec:	c3                   	ret    
c00145ed:	8d 76 00             	lea    esi,[esi+0x0]

c00145f0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00145f0:	83 ec 0c             	sub    esp,0xc
c00145f3:	83 ec 08             	sub    esp,0x8
c00145f6:	68 ff ff 00 00       	push   0xffff
c00145fb:	6a 01                	push   0x1
c00145fd:	e8 4a ff ff ff       	call   c001454c <__static_initialization_and_destruction_0(int, int)>
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	83 c4 0c             	add    esp,0xc
c0014608:	c3                   	ret    

c0014609 <Vm::inbv(unsigned short)>:
c0014609:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001460d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014612:	75 06                	jne    c001461a <Vm::inbv(unsigned short)+0x11>
c0014614:	a0 0c 3f 02 c0       	mov    al,ds:0xc0023f0c
c0014619:	c3                   	ret    
c001461a:	ec                   	in     al,dx
c001461b:	c3                   	ret    

c001461c <Vm::outbv(unsigned short, unsigned char)>:
c001461c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014624:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014629:	75 25                	jne    c0014650 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001462b:	8b 0d 0c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f0c
c0014631:	8d 51 01             	lea    edx,[ecx+0x1]
c0014634:	88 81 20 3f 02 c0    	mov    BYTE PTR [ecx-0x3ffdc0e0],al
c001463a:	89 15 0c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f0c,edx
c0014640:	83 fa 20             	cmp    edx,0x20
c0014643:	75 0c                	jne    c0014651 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014645:	c7 05 0c 3f 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023f0c,0x1f
c001464f:	c3                   	ret    
c0014650:	ee                   	out    dx,al
c0014651:	c3                   	ret    

c0014652 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014652:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014657:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001465c:	c1 e0 04             	shl    eax,0x4
c001465f:	01 d0                	add    eax,edx
c0014661:	c3                   	ret    

c0014662 <Vm::getSegment(unsigned int)>:
c0014662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014666:	c1 e8 10             	shr    eax,0x10
c0014669:	c3                   	ret    

c001466a <Vm::getOffset(unsigned int)>:
c001466a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001466e:	c3                   	ret    

c001466f <Vm::mainloop2()>:
c001466f:	83 ec 18             	sub    esp,0x18
c0014672:	fa                   	cli    
c0014673:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c0014679:	6a 02                	push   0x2
c001467b:	c6 05 05 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f05,0x1
c0014682:	e8 19 f6 ff ff       	call   c0013ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001468c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014690:	52                   	push   edx
c0014691:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014695:	52                   	push   edx
c0014696:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001469a:	52                   	push   edx
c001469b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001469f:	50                   	push   eax
c00146a0:	e8 8a bb fe ff       	call   c000022f <goToVM86>
c00146a5:	83 c4 2c             	add    esp,0x2c
c00146a8:	c3                   	ret    

c00146a9 <Vm::mainVm8086Loop(void*)>:
c00146a9:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00146ae:	48                   	dec    eax
c00146af:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00146b4:	75 01                	jne    c00146b7 <Vm::mainVm8086Loop(void*)+0xe>
c00146b6:	fb                   	sti    
c00146b7:	eb b6                	jmp    c001466f <Vm::mainloop2()>

c00146b9 <Vm::mainloop3(unsigned long)>:
c00146b9:	83 ec 18             	sub    esp,0x18
c00146bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146c0:	fa                   	cli    
c00146c1:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c00146c7:	6a 02                	push   0x2
c00146c9:	c6 05 04 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f04,0x1
c00146d0:	a3 00 3f 02 c0       	mov    ds:0xc0023f00,eax
c00146d5:	e8 c6 f5 ff ff       	call   c0013ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00146da:	83 c4 1c             	add    esp,0x1c
c00146dd:	eb 90                	jmp    c001466f <Vm::mainloop2()>

c00146df <Vm::initialise8086()>:
c00146df:	83 ec 0c             	sub    esp,0xc
c00146e2:	68 80 00 00 00       	push   0x80
c00146e7:	6a 00                	push   0x0
c00146e9:	68 a9 46 01 c0       	push   0xc00146a9
c00146ee:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c00146f4:	e8 b3 f1 ff ff       	call   c00138ac <Process::createThread(void (*)(void*), void*, int)>
c00146f9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014700:	a3 08 3f 02 c0       	mov    ds:0xc0023f08,eax
c0014705:	68 00 01 00 00       	push   0x100
c001470a:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001470f:	6a 00                	push   0x0
c0014711:	6a 00                	push   0x0
c0014713:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014719:	e8 06 5c ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001471e:	83 c4 2c             	add    esp,0x2c
c0014721:	c3                   	ret    

c0014722 <Vm::finish8086()>:
c0014722:	53                   	push   ebx
c0014723:	83 ec 08             	sub    esp,0x8
c0014726:	fa                   	cli    
c0014727:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001472d:	80 3d 04 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f04,0x0
c0014734:	75 15                	jne    c001474b <Vm::finish8086()+0x29>
c0014736:	e8 91 f3 ff ff       	call   c0013acc <schedule()>
c001473b:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014740:	48                   	dec    eax
c0014741:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014746:	75 de                	jne    c0014726 <Vm::finish8086()+0x4>
c0014748:	fb                   	sti    
c0014749:	eb db                	jmp    c0014726 <Vm::finish8086()+0x4>
c001474b:	83 ec 0c             	sub    esp,0xc
c001474e:	8b 1d 00 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f00
c0014754:	ff 35 08 3f 02 c0    	push   DWORD PTR ds:0xc0023f08
c001475a:	c6 05 04 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f04,0x0
c0014761:	e8 2a f8 ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c0014766:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c001476b:	83 c4 10             	add    esp,0x10
c001476e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014771:	89 15 a8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea8,edx
c0014777:	85 d2                	test   edx,edx
c0014779:	75 01                	jne    c001477c <Vm::finish8086()+0x5a>
c001477b:	fb                   	sti    
c001477c:	89 d8                	mov    eax,ebx
c001477e:	83 c4 08             	add    esp,0x8
c0014781:	5b                   	pop    ebx
c0014782:	c3                   	ret    

c0014783 <Vm::getOutput8086(unsigned char*)>:
c0014783:	57                   	push   edi
c0014784:	8b 0d 0c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f0c
c001478a:	56                   	push   esi
c001478b:	be 20 3f 02 c0       	mov    esi,0xc0023f20
c0014790:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014794:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014796:	a1 0c 3f 02 c0       	mov    eax,ds:0xc0023f0c
c001479b:	5e                   	pop    esi
c001479c:	c7 05 0c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f0c,0x0
c00147a6:	5f                   	pop    edi
c00147a7:	c3                   	ret    

c00147a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00147a8:	55                   	push   ebp
c00147a9:	57                   	push   edi
c00147aa:	56                   	push   esi
c00147ab:	53                   	push   ebx
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00147b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00147b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00147bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00147bf:	fa                   	cli    
c00147c0:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c00147c6:	80 3d 05 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f05,0x0
c00147cd:	75 15                	jne    c00147e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00147cf:	e8 f8 f2 ff ff       	call   c0013acc <schedule()>
c00147d4:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00147d9:	48                   	dec    eax
c00147da:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00147df:	75 de                	jne    c00147bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147e1:	fb                   	sti    
c00147e2:	eb db                	jmp    c00147bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147e4:	a1 08 3f 02 c0       	mov    eax,ds:0xc0023f08
c00147e9:	c7 05 0c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f0c,0x0
c00147f3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00147f7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00147fb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00147ff:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014803:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014807:	0f b7 ff             	movzx  edi,di
c001480a:	0f b7 f6             	movzx  esi,si
c001480d:	50                   	push   eax
c001480e:	6a 20                	push   0x20
c0014810:	6a 00                	push   0x0
c0014812:	68 20 3f 02 c0       	push   0xc0023f20
c0014817:	e8 d4 bc fe ff       	call   c00004f0 <memset>
c001481c:	5a                   	pop    edx
c001481d:	59                   	pop    ecx
c001481e:	57                   	push   edi
c001481f:	56                   	push   esi
c0014820:	e8 2d fe ff ff       	call   c0014652 <Vm::realToLinear(unsigned short, unsigned short)>
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	89 c7                	mov    edi,eax
c001482a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001482e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014832:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014834:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014839:	c6 05 05 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f05,0x0
c0014840:	48                   	dec    eax
c0014841:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0014846:	75 01                	jne    c0014849 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014848:	fb                   	sti    
c0014849:	83 ec 0c             	sub    esp,0xc
c001484c:	ff 35 08 3f 02 c0    	push   DWORD PTR ds:0xc0023f08
c0014852:	e8 39 f7 ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c0014857:	83 c4 1c             	add    esp,0x1c
c001485a:	b0 01                	mov    al,0x1
c001485c:	5b                   	pop    ebx
c001485d:	5e                   	pop    esi
c001485e:	5f                   	pop    edi
c001485f:	5d                   	pop    ebp
c0014860:	c3                   	ret    

c0014861 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014861:	55                   	push   ebp
c0014862:	57                   	push   edi
c0014863:	56                   	push   esi
c0014864:	53                   	push   ebx
c0014865:	83 ec 2c             	sub    esp,0x2c
c0014868:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001486c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014870:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014874:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014878:	fa                   	cli    
c0014879:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001487f:	0f b6 35 05 3f 02 c0 	movzx  esi,BYTE PTR ds:0xc0023f05
c0014886:	89 f0                	mov    eax,esi
c0014888:	84 c0                	test   al,al
c001488a:	75 1d                	jne    c00148a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001488c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014890:	e8 37 f2 ff ff       	call   c0013acc <schedule()>
c0014895:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c001489a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001489e:	48                   	dec    eax
c001489f:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00148a4:	75 d2                	jne    c0014878 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00148a6:	fb                   	sti    
c00148a7:	eb cf                	jmp    c0014878 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00148a9:	a1 08 3f 02 c0       	mov    eax,ds:0xc0023f08
c00148ae:	c7 05 0c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f0c,0x0
c00148b8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00148bc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00148c0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00148c4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00148c8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00148cc:	50                   	push   eax
c00148cd:	6a 20                	push   0x20
c00148cf:	6a 00                	push   0x0
c00148d1:	68 20 3f 02 c0       	push   0xc0023f20
c00148d6:	e8 15 bc fe ff       	call   c00004f0 <memset>
c00148db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148e2:	e8 72 35 ff ff       	call   c0007e59 <malloc>
c00148e7:	83 c4 0c             	add    esp,0xc
c00148ea:	89 c3                	mov    ebx,eax
c00148ec:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c00148f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148f6:	50                   	push   eax
c00148f7:	e8 62 68 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	85 db                	test   ebx,ebx
c0014901:	75 0a                	jne    c001490d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014903:	83 ec 0c             	sub    esp,0xc
c0014906:	68 c0 ec 01 c0       	push   0xc001ecc0
c001490b:	eb 3e                	jmp    c001494b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001490d:	50                   	push   eax
c001490e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014912:	50                   	push   eax
c0014913:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014917:	50                   	push   eax
c0014918:	53                   	push   ebx
c0014919:	e8 ac 6b ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014926:	74 0a                	je     c0014932 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	68 d4 ec 01 c0       	push   0xc001ecd4
c0014930:	eb 19                	jmp    c001494b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014932:	51                   	push   ecx
c0014933:	51                   	push   ecx
c0014934:	6a 01                	push   0x1
c0014936:	53                   	push   ebx
c0014937:	e8 e2 68 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	85 c0                	test   eax,eax
c0014941:	74 24                	je     c0014967 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014943:	83 ec 0c             	sub    esp,0xc
c0014946:	68 ed ec 01 c0       	push   0xc001eced
c001494b:	e8 27 be ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0014950:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	48                   	dec    eax
c0014959:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001495e:	85 c0                	test   eax,eax
c0014960:	75 01                	jne    c0014963 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014962:	fb                   	sti    
c0014963:	31 f6                	xor    esi,esi
c0014965:	eb 58                	jmp    c00149bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014967:	0f b7 ed             	movzx  ebp,bp
c001496a:	50                   	push   eax
c001496b:	0f b7 ff             	movzx  edi,di
c001496e:	50                   	push   eax
c001496f:	55                   	push   ebp
c0014970:	57                   	push   edi
c0014971:	e8 dc fc ff ff       	call   c0014652 <Vm::realToLinear(unsigned short, unsigned short)>
c0014976:	5a                   	pop    edx
c0014977:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014979:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001497d:	51                   	push   ecx
c001497e:	50                   	push   eax
c001497f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014983:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014987:	53                   	push   ebx
c0014988:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001498b:	83 c4 14             	add    esp,0x14
c001498e:	53                   	push   ebx
c001498f:	e8 e8 68 ff ff       	call   c000b27c <File::close()>
c0014994:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0014999:	83 c4 10             	add    esp,0x10
c001499c:	48                   	dec    eax
c001499d:	c6 05 05 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f05,0x0
c00149a4:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00149a9:	85 c0                	test   eax,eax
c00149ab:	75 01                	jne    c00149ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00149ad:	fb                   	sti    
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	ff 35 08 3f 02 c0    	push   DWORD PTR ds:0xc0023f08
c00149b7:	e8 d4 f5 ff ff       	call   c0013f90 <unblockTask(ThreadControlBlock*)>
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	83 c4 2c             	add    esp,0x2c
c00149c2:	89 f0                	mov    eax,esi
c00149c4:	5b                   	pop    ebx
c00149c5:	5e                   	pop    esi
c00149c6:	5f                   	pop    edi
c00149c7:	5d                   	pop    ebp
c00149c8:	c3                   	ret    

c00149c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00149c9:	57                   	push   edi
c00149ca:	56                   	push   esi
c00149cb:	53                   	push   ebx
c00149cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149d8:	83 e8 06             	sub    eax,0x6
c00149db:	0f b7 c0             	movzx  eax,ax
c00149de:	50                   	push   eax
c00149df:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00149e4:	50                   	push   eax
c00149e5:	e8 68 fc ff ff       	call   c0014652 <Vm::realToLinear(unsigned short, unsigned short)>
c00149ea:	5a                   	pop    edx
c00149eb:	5e                   	pop    esi
c00149ec:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00149ef:	8d 56 fa             	lea    edx,[esi-0x6]
c00149f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00149f8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00149fb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00149fe:	83 c2 02             	add    edx,0x2
c0014a01:	66 89 10             	mov    WORD PTR [eax],dx
c0014a04:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014a07:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014a0b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014a0e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014a12:	89 d6                	mov    esi,edx
c0014a14:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014a1a:	66 81 e6 ff fd       	and    si,0xfdff
c0014a1f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014a23:	74 07                	je     c0014a2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014a25:	89 d6                	mov    esi,edx
c0014a27:	66 81 ce 00 02       	or     si,0x200
c0014a2c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014a30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a35:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014a39:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014a41:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014a44:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014a4c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014a4f:	5b                   	pop    ebx
c0014a50:	5e                   	pop    esi
c0014a51:	5f                   	pop    edi
c0014a52:	c3                   	ret    

c0014a53 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014a53:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a58:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a5d:	c1 e0 04             	shl    eax,0x4
c0014a60:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014a63:	c3                   	ret    

c0014a64 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014a64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a6e:	c1 e0 04             	shl    eax,0x4
c0014a71:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014a75:	c3                   	ret    

c0014a76 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014a76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a80:	c1 e0 04             	shl    eax,0x4
c0014a83:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a86:	c3                   	ret    

c0014a87 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a8c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a91:	c1 e0 04             	shl    eax,0x4
c0014a94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a98:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a9b:	c3                   	ret    

c0014a9c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014aa1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014aa6:	c1 e0 04             	shl    eax,0x4
c0014aa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014ab1:	c3                   	ret    

c0014ab2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014ab2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014ab7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014abc:	c1 e0 04             	shl    eax,0x4
c0014abf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ac3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014ac6:	c3                   	ret    

c0014ac7 <Vm::faultHandler(regs*)>:
c0014ac7:	55                   	push   ebp
c0014ac8:	57                   	push   edi
c0014ac9:	56                   	push   esi
c0014aca:	53                   	push   ebx
c0014acb:	83 ec 1c             	sub    esp,0x1c
c0014ace:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014ad2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ad5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014ad9:	0f b7 f8             	movzx  edi,ax
c0014adc:	52                   	push   edx
c0014add:	0f b7 c0             	movzx  eax,ax
c0014ae0:	50                   	push   eax
c0014ae1:	e8 6c fb ff ff       	call   c0014652 <Vm::realToLinear(unsigned short, unsigned short)>
c0014ae6:	5a                   	pop    edx
c0014ae7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014aea:	59                   	pop    ecx
c0014aeb:	89 c1                	mov    ecx,eax
c0014aed:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014af0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014af4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014afd:	0f b7 c5             	movzx  eax,bp
c0014b00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014b08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b0c:	e8 41 fb ff ff       	call   c0014652 <Vm::realToLinear(unsigned short, unsigned short)>
c0014b11:	5e                   	pop    esi
c0014b12:	be 06 00 00 00       	mov    esi,0x6
c0014b17:	5a                   	pop    edx
c0014b18:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014b1d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014b22:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014b25:	80 fa 9d             	cmp    dl,0x9d
c0014b28:	0f 84 2c 02 00 00    	je     c0014d5a <Vm::faultHandler(regs*)+0x293>
c0014b2e:	0f 87 91 00 00 00    	ja     c0014bc5 <Vm::faultHandler(regs*)+0xfe>
c0014b34:	80 fa 66             	cmp    dl,0x66
c0014b37:	0f 84 98 01 00 00    	je     c0014cd5 <Vm::faultHandler(regs*)+0x20e>
c0014b3d:	77 47                	ja     c0014b86 <Vm::faultHandler(regs*)+0xbf>
c0014b3f:	80 fa 36             	cmp    dl,0x36
c0014b42:	0f 84 80 01 00 00    	je     c0014cc8 <Vm::faultHandler(regs*)+0x201>
c0014b48:	77 1a                	ja     c0014b64 <Vm::faultHandler(regs*)+0x9d>
c0014b4a:	80 fa 26             	cmp    dl,0x26
c0014b4d:	0f 84 4e 01 00 00    	je     c0014ca1 <Vm::faultHandler(regs*)+0x1da>
c0014b53:	80 fa 2e             	cmp    dl,0x2e
c0014b56:	0f 85 e2 05 00 00    	jne    c001513e <Vm::faultHandler(regs*)+0x677>
c0014b5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b5f:	31 f6                	xor    esi,esi
c0014b61:	41                   	inc    ecx
c0014b62:	eb be                	jmp    c0014b22 <Vm::faultHandler(regs*)+0x5b>
c0014b64:	80 fa 64             	cmp    dl,0x64
c0014b67:	0f 84 41 01 00 00    	je     c0014cae <Vm::faultHandler(regs*)+0x1e7>
c0014b6d:	0f 87 48 01 00 00    	ja     c0014cbb <Vm::faultHandler(regs*)+0x1f4>
c0014b73:	80 fa 3e             	cmp    dl,0x3e
c0014b76:	0f 85 c2 05 00 00    	jne    c001513e <Vm::faultHandler(regs*)+0x677>
c0014b7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b7f:	be 01 00 00 00       	mov    esi,0x1
c0014b84:	eb db                	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014b86:	80 fa 6d             	cmp    dl,0x6d
c0014b89:	0f 84 ec 02 00 00    	je     c0014e7b <Vm::faultHandler(regs*)+0x3b4>
c0014b8f:	77 17                	ja     c0014ba8 <Vm::faultHandler(regs*)+0xe1>
c0014b91:	80 fa 67             	cmp    dl,0x67
c0014b94:	0f 84 48 01 00 00    	je     c0014ce2 <Vm::faultHandler(regs*)+0x21b>
c0014b9a:	80 fa 6c             	cmp    dl,0x6c
c0014b9d:	0f 84 69 02 00 00    	je     c0014e0c <Vm::faultHandler(regs*)+0x345>
c0014ba3:	e9 96 05 00 00       	jmp    c001513e <Vm::faultHandler(regs*)+0x677>
c0014ba8:	80 fa 6f             	cmp    dl,0x6f
c0014bab:	0f 84 f4 03 00 00    	je     c0014fa5 <Vm::faultHandler(regs*)+0x4de>
c0014bb1:	0f 82 59 03 00 00    	jb     c0014f10 <Vm::faultHandler(regs*)+0x449>
c0014bb7:	80 fa 9c             	cmp    dl,0x9c
c0014bba:	0f 84 2f 01 00 00    	je     c0014cef <Vm::faultHandler(regs*)+0x228>
c0014bc0:	e9 79 05 00 00       	jmp    c001513e <Vm::faultHandler(regs*)+0x677>
c0014bc5:	80 fa ec             	cmp    dl,0xec
c0014bc8:	0f 84 14 05 00 00    	je     c00150e2 <Vm::faultHandler(regs*)+0x61b>
c0014bce:	77 7b                	ja     c0014c4b <Vm::faultHandler(regs*)+0x184>
c0014bd0:	80 fa e4             	cmp    dl,0xe4
c0014bd3:	0f 84 93 04 00 00    	je     c001506c <Vm::faultHandler(regs*)+0x5a5>
c0014bd9:	77 53                	ja     c0014c2e <Vm::faultHandler(regs*)+0x167>
c0014bdb:	80 fa cd             	cmp    dl,0xcd
c0014bde:	0f 84 d9 01 00 00    	je     c0014dbd <Vm::faultHandler(regs*)+0x2f6>
c0014be4:	80 fa cf             	cmp    dl,0xcf
c0014be7:	0f 85 51 05 00 00    	jne    c001513e <Vm::faultHandler(regs*)+0x677>
c0014bed:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bf0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014bf3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014bf7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014bfa:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014bfe:	81 ca 00 02 02 00    	or     edx,0x20200
c0014c04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014c07:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014c11:	66 c1 e8 09          	shr    ax,0x9
c0014c15:	83 e0 01             	and    eax,0x1
c0014c18:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014c1b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014c1e:	83 c0 06             	add    eax,0x6
c0014c21:	25 ff ff 00 00       	and    eax,0xffff
c0014c26:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014c29:	e9 0c 05 00 00       	jmp    c001513a <Vm::faultHandler(regs*)+0x673>
c0014c2e:	80 fa e6             	cmp    dl,0xe6
c0014c31:	0f 84 7f 04 00 00    	je     c00150b6 <Vm::faultHandler(regs*)+0x5ef>
c0014c37:	0f 82 4b 04 00 00    	jb     c0015088 <Vm::faultHandler(regs*)+0x5c1>
c0014c3d:	80 fa e7             	cmp    dl,0xe7
c0014c40:	0f 84 87 04 00 00    	je     c00150cd <Vm::faultHandler(regs*)+0x606>
c0014c46:	e9 f3 04 00 00       	jmp    c001513e <Vm::faultHandler(regs*)+0x677>
c0014c4b:	80 fa ef             	cmp    dl,0xef
c0014c4e:	0f 84 d1 04 00 00    	je     c0015125 <Vm::faultHandler(regs*)+0x65e>
c0014c54:	77 28                	ja     c0014c7e <Vm::faultHandler(regs*)+0x1b7>
c0014c56:	80 fa ed             	cmp    dl,0xed
c0014c59:	0f 84 9f 04 00 00    	je     c00150fe <Vm::faultHandler(regs*)+0x637>
c0014c5f:	80 fa ee             	cmp    dl,0xee
c0014c62:	0f 85 d6 04 00 00    	jne    c001513e <Vm::faultHandler(regs*)+0x677>
c0014c68:	50                   	push   eax
c0014c69:	50                   	push   eax
c0014c6a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014c6e:	50                   	push   eax
c0014c6f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c73:	50                   	push   eax
c0014c74:	e8 a3 f9 ff ff       	call   c001461c <Vm::outbv(unsigned short, unsigned char)>
c0014c79:	e9 9f 04 00 00       	jmp    c001511d <Vm::faultHandler(regs*)+0x656>
c0014c7e:	80 fa fa             	cmp    dl,0xfa
c0014c81:	0f 84 69 01 00 00    	je     c0014df0 <Vm::faultHandler(regs*)+0x329>
c0014c87:	80 fa fb             	cmp    dl,0xfb
c0014c8a:	0f 84 6e 01 00 00    	je     c0014dfe <Vm::faultHandler(regs*)+0x337>
c0014c90:	80 fa f3             	cmp    dl,0xf3
c0014c93:	0f 85 a5 04 00 00    	jne    c001513e <Vm::faultHandler(regs*)+0x677>
c0014c99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c9c:	e9 c0 fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014ca1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ca4:	be 02 00 00 00       	mov    esi,0x2
c0014ca9:	e9 b3 fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014cae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cb1:	be 03 00 00 00       	mov    esi,0x3
c0014cb6:	e9 a6 fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014cbb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cbe:	be 04 00 00 00       	mov    esi,0x4
c0014cc3:	e9 99 fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014cc8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ccb:	be 05 00 00 00       	mov    esi,0x5
c0014cd0:	e9 8c fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014cd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cd8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014cdd:	e9 7f fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014ce2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ce5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014cea:	e9 72 fe ff ff       	jmp    c0014b61 <Vm::faultHandler(regs*)+0x9a>
c0014cef:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014cf2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014cf6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cfb:	74 30                	je     c0014d2d <Vm::faultHandler(regs*)+0x266>
c0014cfd:	83 e9 04             	sub    ecx,0x4
c0014d00:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d06:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014d0c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014d0f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014d12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d18:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014d1c:	0f 84 15 04 00 00    	je     c0015137 <Vm::faultHandler(regs*)+0x670>
c0014d22:	80 ce 02             	or     dh,0x2
c0014d25:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014d28:	e9 0a 04 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014d2d:	83 e9 02             	sub    ecx,0x2
c0014d30:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014d36:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014d39:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d3d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d43:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014d47:	74 05                	je     c0014d4e <Vm::faultHandler(regs*)+0x287>
c0014d49:	80 ce 02             	or     dh,0x2
c0014d4c:	eb 03                	jmp    c0014d51 <Vm::faultHandler(regs*)+0x28a>
c0014d4e:	80 e6 fd             	and    dh,0xfd
c0014d51:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d55:	e9 dd 03 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014d5a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d5f:	74 2a                	je     c0014d8b <Vm::faultHandler(regs*)+0x2c4>
c0014d61:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d63:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d69:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d6f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d7a:	c1 e8 09             	shr    eax,0x9
c0014d7d:	83 e0 01             	and    eax,0x1
c0014d80:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d83:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d86:	83 c0 04             	add    eax,0x4
c0014d89:	eb 25                	jmp    c0014db0 <Vm::faultHandler(regs*)+0x2e9>
c0014d8b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d8e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d94:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014da0:	66 c1 e8 09          	shr    ax,0x9
c0014da4:	83 e0 01             	and    eax,0x1
c0014da7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014daa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014dad:	83 c0 02             	add    eax,0x2
c0014db0:	25 ff ff 00 00       	and    eax,0xffff
c0014db5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014db8:	e9 7a 03 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014dbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dc1:	3c ee                	cmp    al,0xee
c0014dc3:	75 10                	jne    c0014dd5 <Vm::faultHandler(regs*)+0x30e>
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dcb:	e8 e9 f8 ff ff       	call   c00146b9 <Vm::mainloop3(unsigned long)>
c0014dd0:	e9 4b 03 00 00       	jmp    c0015120 <Vm::faultHandler(regs*)+0x659>
c0014dd5:	83 ec 0c             	sub    esp,0xc
c0014dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014de0:	51                   	push   ecx
c0014de1:	50                   	push   eax
c0014de2:	53                   	push   ebx
c0014de3:	e8 e1 fb ff ff       	call   c00149c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014de8:	83 c4 20             	add    esp,0x20
c0014deb:	e9 4a 03 00 00       	jmp    c001513a <Vm::faultHandler(regs*)+0x673>
c0014df0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014df5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014df9:	e9 39 03 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014dfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e03:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014e07:	e9 2b 03 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014e0c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e0f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e14:	74 2b                	je     c0014e41 <Vm::faultHandler(regs*)+0x37a>
c0014e16:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014e1d:	76 22                	jbe    c0014e41 <Vm::faultHandler(regs*)+0x37a>
c0014e1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e23:	50                   	push   eax
c0014e24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e28:	50                   	push   eax
c0014e29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e2d:	50                   	push   eax
c0014e2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e32:	50                   	push   eax
c0014e33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e37:	50                   	push   eax
c0014e38:	6a 6c                	push   0x6c
c0014e3a:	6a 6c                	push   0x6c
c0014e3c:	e9 b9 01 00 00       	jmp    c0014ffa <Vm::faultHandler(regs*)+0x533>
c0014e41:	83 ec 0c             	sub    esp,0xc
c0014e44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e48:	0f b7 f6             	movzx  esi,si
c0014e4b:	50                   	push   eax
c0014e4c:	e8 b8 f7 ff ff       	call   c0014609 <Vm::inbv(unsigned short)>
c0014e51:	83 c4 0c             	add    esp,0xc
c0014e54:	0f b6 c0             	movzx  eax,al
c0014e57:	50                   	push   eax
c0014e58:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014e5c:	50                   	push   eax
c0014e5d:	56                   	push   esi
c0014e5e:	e8 24 fc ff ff       	call   c0014a87 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e6d:	74 03                	je     c0014e72 <Vm::faultHandler(regs*)+0x3ab>
c0014e6f:	48                   	dec    eax
c0014e70:	eb 01                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x3ac>
c0014e72:	40                   	inc    eax
c0014e73:	0f b7 c0             	movzx  eax,ax
c0014e76:	e9 8d 00 00 00       	jmp    c0014f08 <Vm::faultHandler(regs*)+0x441>
c0014e7b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e81:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e86:	74 29                	je     c0014eb1 <Vm::faultHandler(regs*)+0x3ea>
c0014e88:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e8d:	76 22                	jbe    c0014eb1 <Vm::faultHandler(regs*)+0x3ea>
c0014e8f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e93:	50                   	push   eax
c0014e94:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e98:	50                   	push   eax
c0014e99:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e9d:	50                   	push   eax
c0014e9e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ea2:	50                   	push   eax
c0014ea3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ea7:	50                   	push   eax
c0014ea8:	6a 6d                	push   0x6d
c0014eaa:	6a 6d                	push   0x6d
c0014eac:	e9 49 01 00 00       	jmp    c0014ffa <Vm::faultHandler(regs*)+0x533>
c0014eb1:	0f b7 c8             	movzx  ecx,ax
c0014eb4:	0f b7 f6             	movzx  esi,si
c0014eb7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014eba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ebf:	74 20                	je     c0014ee1 <Vm::faultHandler(regs*)+0x41a>
c0014ec1:	ed                   	in     eax,dx
c0014ec2:	55                   	push   ebp
c0014ec3:	50                   	push   eax
c0014ec4:	51                   	push   ecx
c0014ec5:	56                   	push   esi
c0014ec6:	e8 e7 fb ff ff       	call   c0014ab2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014ecb:	83 c4 10             	add    esp,0x10
c0014ece:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ed1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ed5:	74 05                	je     c0014edc <Vm::faultHandler(regs*)+0x415>
c0014ed7:	83 e8 04             	sub    eax,0x4
c0014eda:	eb 27                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x43c>
c0014edc:	83 c0 04             	add    eax,0x4
c0014edf:	eb 22                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x43c>
c0014ee1:	66 ed                	in     ax,dx
c0014ee3:	0f b7 c0             	movzx  eax,ax
c0014ee6:	57                   	push   edi
c0014ee7:	50                   	push   eax
c0014ee8:	51                   	push   ecx
c0014ee9:	56                   	push   esi
c0014eea:	e8 ad fb ff ff       	call   c0014a9c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ef5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ef9:	74 05                	je     c0014f00 <Vm::faultHandler(regs*)+0x439>
c0014efb:	83 e8 02             	sub    eax,0x2
c0014efe:	eb 03                	jmp    c0014f03 <Vm::faultHandler(regs*)+0x43c>
c0014f00:	83 c0 02             	add    eax,0x2
c0014f03:	25 ff ff 00 00       	and    eax,0xffff
c0014f08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014f0b:	e9 27 02 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014f10:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f13:	3c 05                	cmp    al,0x5
c0014f15:	77 24                	ja     c0014f3b <Vm::faultHandler(regs*)+0x474>
c0014f17:	0f b6 c0             	movzx  eax,al
c0014f1a:	ff 24 85 60 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12a0]
c0014f21:	0f b7 fd             	movzx  edi,bp
c0014f24:	eb 15                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x474>
c0014f26:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014f2a:	eb 0f                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x474>
c0014f2c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014f30:	eb 09                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x474>
c0014f32:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014f36:	eb 03                	jmp    c0014f3b <Vm::faultHandler(regs*)+0x474>
c0014f38:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014f3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f3e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f43:	74 29                	je     c0014f6e <Vm::faultHandler(regs*)+0x4a7>
c0014f45:	3d ff ff 00 00       	cmp    eax,0xffff
c0014f4a:	76 22                	jbe    c0014f6e <Vm::faultHandler(regs*)+0x4a7>
c0014f4c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f50:	50                   	push   eax
c0014f51:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f55:	50                   	push   eax
c0014f56:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f5a:	50                   	push   eax
c0014f5b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f5f:	50                   	push   eax
c0014f60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f64:	50                   	push   eax
c0014f65:	6a 6e                	push   0x6e
c0014f67:	6a 6e                	push   0x6e
c0014f69:	e9 8c 00 00 00       	jmp    c0014ffa <Vm::faultHandler(regs*)+0x533>
c0014f6e:	0f b7 c0             	movzx  eax,ax
c0014f71:	52                   	push   edx
c0014f72:	52                   	push   edx
c0014f73:	50                   	push   eax
c0014f74:	57                   	push   edi
c0014f75:	e8 d9 fa ff ff       	call   c0014a53 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014f7a:	59                   	pop    ecx
c0014f7b:	0f b6 c0             	movzx  eax,al
c0014f7e:	5e                   	pop    esi
c0014f7f:	50                   	push   eax
c0014f80:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f84:	50                   	push   eax
c0014f85:	e8 92 f6 ff ff       	call   c001461c <Vm::outbv(unsigned short, unsigned char)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f90:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f94:	74 03                	je     c0014f99 <Vm::faultHandler(regs*)+0x4d2>
c0014f96:	48                   	dec    eax
c0014f97:	eb 01                	jmp    c0014f9a <Vm::faultHandler(regs*)+0x4d3>
c0014f99:	40                   	inc    eax
c0014f9a:	0f b7 c0             	movzx  eax,ax
c0014f9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014fa0:	e9 92 01 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0014fa5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014fa8:	3c 05                	cmp    al,0x5
c0014faa:	77 1f                	ja     c0014fcb <Vm::faultHandler(regs*)+0x504>
c0014fac:	0f b6 c0             	movzx  eax,al
c0014faf:	ff 24 85 78 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1288]
c0014fb6:	89 ef                	mov    edi,ebp
c0014fb8:	eb 11                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x504>
c0014fba:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014fbd:	eb 0c                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x504>
c0014fbf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014fc2:	eb 07                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x504>
c0014fc4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014fc7:	eb 02                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x504>
c0014fc9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014fcb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014fce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014fd3:	74 37                	je     c001500c <Vm::faultHandler(regs*)+0x545>
c0014fd5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014fdb:	76 2f                	jbe    c001500c <Vm::faultHandler(regs*)+0x545>
c0014fdd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fe1:	50                   	push   eax
c0014fe2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014fe6:	50                   	push   eax
c0014fe7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014feb:	50                   	push   eax
c0014fec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ff0:	50                   	push   eax
c0014ff1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ff5:	50                   	push   eax
c0014ff6:	6a 6f                	push   0x6f
c0014ff8:	6a 6f                	push   0x6f
c0014ffa:	68 06 ed 01 c0       	push   0xc001ed06
c0014fff:	e8 e4 5b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015004:	83 c4 20             	add    esp,0x20
c0015007:	e9 86 01 00 00       	jmp    c0015192 <Vm::faultHandler(regs*)+0x6cb>
c001500c:	0f b7 d7             	movzx  edx,di
c001500f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015012:	0f b7 c6             	movzx  eax,si
c0015015:	81 e1 00 04 00 00    	and    ecx,0x400
c001501b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001501e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015023:	74 1d                	je     c0015042 <Vm::faultHandler(regs*)+0x57b>
c0015025:	55                   	push   ebp
c0015026:	55                   	push   ebp
c0015027:	50                   	push   eax
c0015028:	52                   	push   edx
c0015029:	e8 48 fa ff ff       	call   c0014a76 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001502e:	83 c4 10             	add    esp,0x10
c0015031:	89 fa                	mov    edx,edi
c0015033:	ef                   	out    dx,eax
c0015034:	85 c9                	test   ecx,ecx
c0015036:	74 05                	je     c001503d <Vm::faultHandler(regs*)+0x576>
c0015038:	83 ee 04             	sub    esi,0x4
c001503b:	eb 21                	jmp    c001505e <Vm::faultHandler(regs*)+0x597>
c001503d:	83 c6 04             	add    esi,0x4
c0015040:	eb 1c                	jmp    c001505e <Vm::faultHandler(regs*)+0x597>
c0015042:	55                   	push   ebp
c0015043:	55                   	push   ebp
c0015044:	50                   	push   eax
c0015045:	52                   	push   edx
c0015046:	e8 19 fa ff ff       	call   c0014a64 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	89 fa                	mov    edx,edi
c0015050:	66 ef                	out    dx,ax
c0015052:	85 c9                	test   ecx,ecx
c0015054:	74 05                	je     c001505b <Vm::faultHandler(regs*)+0x594>
c0015056:	83 ee 02             	sub    esi,0x2
c0015059:	eb 03                	jmp    c001505e <Vm::faultHandler(regs*)+0x597>
c001505b:	83 c6 02             	add    esi,0x2
c001505e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015064:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015067:	e9 cb 00 00 00       	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c001506c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015073:	83 ec 0c             	sub    esp,0xc
c0015076:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001507a:	50                   	push   eax
c001507b:	e8 89 f5 ff ff       	call   c0014609 <Vm::inbv(unsigned short)>
c0015080:	0f b6 c0             	movzx  eax,al
c0015083:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015086:	eb 3f                	jmp    c00150c7 <Vm::faultHandler(regs*)+0x600>
c0015088:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001508d:	74 07                	je     c0015096 <Vm::faultHandler(regs*)+0x5cf>
c001508f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015093:	ed                   	in     eax,dx
c0015094:	eb 14                	jmp    c00150aa <Vm::faultHandler(regs*)+0x5e3>
c0015096:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015099:	66 31 f6             	xor    si,si
c001509c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001509f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00150a3:	66 ed                	in     ax,dx
c00150a5:	0f b7 c0             	movzx  eax,ax
c00150a8:	09 f0                	or     eax,esi
c00150aa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00150ad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00150b1:	e9 84 00 00 00       	jmp    c001513a <Vm::faultHandler(regs*)+0x673>
c00150b6:	52                   	push   edx
c00150b7:	52                   	push   edx
c00150b8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00150bc:	50                   	push   eax
c00150bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00150c1:	50                   	push   eax
c00150c2:	e8 55 f5 ff ff       	call   c001461c <Vm::outbv(unsigned short, unsigned char)>
c00150c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00150cb:	eb 53                	jmp    c0015120 <Vm::faultHandler(regs*)+0x659>
c00150cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150d0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00150d4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150d9:	74 03                	je     c00150de <Vm::faultHandler(regs*)+0x617>
c00150db:	ef                   	out    dx,eax
c00150dc:	eb cf                	jmp    c00150ad <Vm::faultHandler(regs*)+0x5e6>
c00150de:	66 ef                	out    dx,ax
c00150e0:	eb cb                	jmp    c00150ad <Vm::faultHandler(regs*)+0x5e6>
c00150e2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00150e9:	83 ec 0c             	sub    esp,0xc
c00150ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00150f0:	50                   	push   eax
c00150f1:	e8 13 f5 ff ff       	call   c0014609 <Vm::inbv(unsigned short)>
c00150f6:	0f b6 c0             	movzx  eax,al
c00150f9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00150fc:	eb 1f                	jmp    c001511d <Vm::faultHandler(regs*)+0x656>
c00150fe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015101:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015106:	74 03                	je     c001510b <Vm::faultHandler(regs*)+0x644>
c0015108:	ed                   	in     eax,dx
c0015109:	eb 0d                	jmp    c0015118 <Vm::faultHandler(regs*)+0x651>
c001510b:	66 ed                	in     ax,dx
c001510d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015110:	0f b7 c0             	movzx  eax,ax
c0015113:	66 31 d2             	xor    dx,dx
c0015116:	09 d0                	or     eax,edx
c0015118:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001511b:	eb 1a                	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c001511d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	eb 15                	jmp    c001513a <Vm::faultHandler(regs*)+0x673>
c0015125:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015128:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001512b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015130:	74 03                	je     c0015135 <Vm::faultHandler(regs*)+0x66e>
c0015132:	ef                   	out    dx,eax
c0015133:	eb 02                	jmp    c0015137 <Vm::faultHandler(regs*)+0x670>
c0015135:	66 ef                	out    dx,ax
c0015137:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001513a:	b0 01                	mov    al,0x1
c001513c:	eb 56                	jmp    c0015194 <Vm::faultHandler(regs*)+0x6cd>
c001513e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015142:	50                   	push   eax
c0015143:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015147:	50                   	push   eax
c0015148:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001514c:	50                   	push   eax
c001514d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015151:	50                   	push   eax
c0015152:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015156:	50                   	push   eax
c0015157:	52                   	push   edx
c0015158:	52                   	push   edx
c0015159:	68 33 ed 01 c0       	push   0xc001ed33
c001515e:	e8 85 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015163:	83 c4 20             	add    esp,0x20
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	6a 60                	push   0x60
c001516b:	e8 99 f4 ff ff       	call   c0014609 <Vm::inbv(unsigned short)>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	3c 1c                	cmp    al,0x1c
c0015175:	74 04                	je     c001517b <Vm::faultHandler(regs*)+0x6b4>
c0015177:	3c 5a                	cmp    al,0x5a
c0015179:	75 eb                	jne    c0015166 <Vm::faultHandler(regs*)+0x69f>
c001517b:	3c 5a                	cmp    al,0x5a
c001517d:	74 04                	je     c0015183 <Vm::faultHandler(regs*)+0x6bc>
c001517f:	3c 1c                	cmp    al,0x1c
c0015181:	75 0f                	jne    c0015192 <Vm::faultHandler(regs*)+0x6cb>
c0015183:	83 ec 0c             	sub    esp,0xc
c0015186:	6a 60                	push   0x60
c0015188:	e8 7c f4 ff ff       	call   c0014609 <Vm::inbv(unsigned short)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	eb e9                	jmp    c001517b <Vm::faultHandler(regs*)+0x6b4>
c0015192:	31 c0                	xor    eax,eax
c0015194:	83 c4 1c             	add    esp,0x1c
c0015197:	5b                   	pop    ebx
c0015198:	5e                   	pop    esi
c0015199:	5f                   	pop    edi
c001519a:	5d                   	pop    ebp
c001519b:	c3                   	ret    

c001519c <noCopro(unsigned long)>:
c001519c:	c3                   	ret    

c001519d <nmiHandler(regs*, void*)>:
c001519d:	83 ec 0c             	sub    esp,0xc
c00151a0:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00151a5:	83 ec 0c             	sub    esp,0xc
c00151a8:	50                   	push   eax
c00151a9:	e8 d0 24 ff ff       	call   c000767e <Computer::handleNMI()>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	90                   	nop
c00151b2:	83 c4 0c             	add    esp,0xc
c00151b5:	c3                   	ret    

c00151b6 <doubleFault(regs*, void*)>:
c00151b6:	55                   	push   ebp
c00151b7:	89 e5                	mov    ebp,esp
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	83 ec 0c             	sub    esp,0xc
c00151bf:	68 90 ed 01 c0       	push   0xc001ed90
c00151c4:	e8 ae b5 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00151c9:	83 c4 10             	add    esp,0x10
c00151cc:	90                   	nop
c00151cd:	c9                   	leave  
c00151ce:	c3                   	ret    

c00151cf <displayDebugInfo(regs*)>:
c00151cf:	83 ec 1c             	sub    esp,0x1c
c00151d2:	0f 20 c0             	mov    eax,cr0
c00151d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151d9:	0f 20 d0             	mov    eax,cr2
c00151dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151e0:	0f 20 d8             	mov    eax,cr3
c00151e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151e7:	0f 20 e0             	mov    eax,cr4
c00151ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00151ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151f4:	83 ec 08             	sub    esp,0x8
c00151f7:	50                   	push   eax
c00151f8:	68 ac ed 01 c0       	push   0xc001edac
c00151fd:	e8 e6 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015209:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001520c:	83 ec 08             	sub    esp,0x8
c001520f:	50                   	push   eax
c0015210:	68 9d ed 01 c0       	push   0xc001ed9d
c0015215:	e8 ce 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015221:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015224:	83 ec 08             	sub    esp,0x8
c0015227:	50                   	push   eax
c0015228:	68 a8 ed 01 c0       	push   0xc001eda8
c001522d:	e8 b6 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015232:	83 c4 10             	add    esp,0x10
c0015235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015239:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001523c:	83 ec 08             	sub    esp,0x8
c001523f:	50                   	push   eax
c0015240:	68 b7 ed 01 c0       	push   0xc001edb7
c0015245:	e8 9e 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015251:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015254:	83 ec 08             	sub    esp,0x8
c0015257:	50                   	push   eax
c0015258:	68 c2 ed 01 c0       	push   0xc001edc2
c001525d:	e8 86 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	83 ec 08             	sub    esp,0x8
c0015268:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001526c:	68 cd ed 01 c0       	push   0xc001edcd
c0015271:	e8 72 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	83 ec 08             	sub    esp,0x8
c001527c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015280:	68 d8 ed 01 c0       	push   0xc001edd8
c0015285:	e8 5e 59 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015292:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	50                   	push   eax
c001529c:	e8 e8 38 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00152a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152af:	83 ec 08             	sub    esp,0x8
c00152b2:	68 e3 ed 01 c0       	push   0xc001ede3
c00152b7:	50                   	push   eax
c00152b8:	e8 0b 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00152c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152cb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00152d0:	8b 12                	mov    edx,DWORD PTR [edx]
c00152d2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00152d5:	83 c2 0c             	add    edx,0xc
c00152d8:	83 ec 08             	sub    esp,0x8
c00152db:	52                   	push   edx
c00152dc:	50                   	push   eax
c00152dd:	e8 e6 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00152ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f0:	83 ec 08             	sub    esp,0x8
c00152f3:	68 ec ed 01 c0       	push   0xc001edec
c00152f8:	50                   	push   eax
c00152f9:	e8 ca 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015306:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001530c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015310:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015313:	83 ec 08             	sub    esp,0x8
c0015316:	52                   	push   edx
c0015317:	50                   	push   eax
c0015318:	e8 65 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015325:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532b:	83 ec 08             	sub    esp,0x8
c001532e:	68 f4 ed 01 c0       	push   0xc001edf4
c0015333:	50                   	push   eax
c0015334:	e8 8f 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015341:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015347:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001534b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001534e:	83 ec 08             	sub    esp,0x8
c0015351:	52                   	push   edx
c0015352:	50                   	push   eax
c0015353:	e8 2a 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015360:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015366:	83 ec 08             	sub    esp,0x8
c0015369:	68 fc ed 01 c0       	push   0xc001edfc
c001536e:	50                   	push   eax
c001536f:	e8 54 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001537c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015382:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015386:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015389:	83 ec 08             	sub    esp,0x8
c001538c:	52                   	push   edx
c001538d:	50                   	push   eax
c001538e:	e8 ef 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001539b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a1:	83 ec 08             	sub    esp,0x8
c00153a4:	68 04 ee 01 c0       	push   0xc001ee04
c00153a9:	50                   	push   eax
c00153aa:	e8 19 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00153b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153c1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00153c4:	83 ec 08             	sub    esp,0x8
c00153c7:	52                   	push   edx
c00153c8:	50                   	push   eax
c00153c9:	e8 b4 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00153d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153dc:	83 ec 08             	sub    esp,0x8
c00153df:	68 0c ee 01 c0       	push   0xc001ee0c
c00153e4:	50                   	push   eax
c00153e5:	e8 de 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00153f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153fc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00153ff:	83 ec 08             	sub    esp,0x8
c0015402:	52                   	push   edx
c0015403:	50                   	push   eax
c0015404:	e8 79 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015411:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015417:	83 ec 08             	sub    esp,0x8
c001541a:	68 14 ee 01 c0       	push   0xc001ee14
c001541f:	50                   	push   eax
c0015420:	e8 a3 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001542d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015433:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015437:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001543a:	83 ec 08             	sub    esp,0x8
c001543d:	52                   	push   edx
c001543e:	50                   	push   eax
c001543f:	e8 3e 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001544c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015452:	83 ec 08             	sub    esp,0x8
c0015455:	68 1c ee 01 c0       	push   0xc001ee1c
c001545a:	50                   	push   eax
c001545b:	e8 68 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015468:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001546e:	83 ec 08             	sub    esp,0x8
c0015471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015475:	50                   	push   eax
c0015476:	e8 07 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0015483:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015489:	83 ec 08             	sub    esp,0x8
c001548c:	68 25 ee 01 c0       	push   0xc001ee25
c0015491:	50                   	push   eax
c0015492:	e8 31 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c001549f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a5:	83 ec 08             	sub    esp,0x8
c00154a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154ac:	50                   	push   eax
c00154ad:	e8 d0 39 ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00154ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154c0:	83 ec 08             	sub    esp,0x8
c00154c3:	68 2d ee 01 c0       	push   0xc001ee2d
c00154c8:	50                   	push   eax
c00154c9:	e8 fa 39 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00154d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154dc:	83 ec 08             	sub    esp,0x8
c00154df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00154e3:	50                   	push   eax
c00154e4:	e8 99 39 ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	fa                   	cli    
c00154ed:	f4                   	hlt    
c00154ee:	eb fe                	jmp    c00154ee <displayDebugInfo(regs*)+0x31f>

c00154f0 <displayProgramFault(char const*)>:
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	83 ec 0c             	sub    esp,0xc
c00154f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154fa:	e8 e9 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001550c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015512:	85 c0                	test   eax,eax
c0015514:	74 21                	je     c0015537 <displayProgramFault(char const*)+0x47>
c0015516:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001551b:	8b 00                	mov    eax,DWORD PTR [eax]
c001551d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015520:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015526:	6a 04                	push   0x4
c0015528:	6a 0f                	push   0xf
c001552a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001552e:	50                   	push   eax
c001552f:	e8 06 3a ff ff       	call   c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	90                   	nop
c0015538:	83 c4 0c             	add    esp,0xc
c001553b:	c3                   	ret    

c001553c <gpFault(regs*, void*)>:
c001553c:	83 ec 1c             	sub    esp,0x1c
c001553f:	c7 05 50 3f 02 c0 c7 4a 01 c0 	mov    DWORD PTR ds:0xc0023f50,0xc0014ac7
c0015549:	a1 50 3f 02 c0       	mov    eax,ds:0xc0023f50
c001554e:	85 c0                	test   eax,eax
c0015550:	74 1c                	je     c001556e <gpFault(regs*, void*)+0x32>
c0015552:	a1 50 3f 02 c0       	mov    eax,ds:0xc0023f50
c0015557:	83 ec 0c             	sub    esp,0xc
c001555a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001555e:	ff d0                	call   eax
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015567:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001556c:	75 2e                	jne    c001559c <gpFault(regs*, void*)+0x60>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015575:	e8 55 fc ff ff       	call   c00151cf <displayDebugInfo(regs*)>
c001557a:	83 c4 10             	add    esp,0x10
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	68 35 ee 01 c0       	push   0xc001ee35
c0015585:	e8 66 ff ff ff       	call   c00154f0 <displayProgramFault(char const*)>
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	83 ec 0c             	sub    esp,0xc
c0015590:	6a 00                	push   0x0
c0015592:	e8 25 ef ff ff       	call   c00144bc <Thr::terminateFromIRQ(int)>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	eb 01                	jmp    c001559d <gpFault(regs*, void*)+0x61>
c001559c:	90                   	nop
c001559d:	83 c4 1c             	add    esp,0x1c
c00155a0:	c3                   	ret    

c00155a1 <pgFault(regs*, void*)>:
c00155a1:	83 ec 1c             	sub    esp,0x1c
c00155a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00155ab:	0f 20 d0             	mov    eax,cr2
c00155ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00155b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155b6:	83 ec 04             	sub    esp,0x4
c00155b9:	52                   	push   edx
c00155ba:	50                   	push   eax
c00155bb:	68 a0 ee 01 c0       	push   0xc001eea0
c00155c0:	e8 23 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00155cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155d2:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00155d8:	0f 20 d2             	mov    edx,cr2
c00155db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155e3:	83 ec 08             	sub    esp,0x8
c00155e6:	52                   	push   edx
c00155e7:	50                   	push   eax
c00155e8:	e8 2d 52 ff ff       	call   c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	84 c0                	test   al,al
c00155f2:	75 2e                	jne    c0015622 <pgFault(regs*, void*)+0x81>
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155fb:	e8 cf fb ff ff       	call   c00151cf <displayDebugInfo(regs*)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	83 ec 0c             	sub    esp,0xc
c0015606:	68 4e ee 01 c0       	push   0xc001ee4e
c001560b:	e8 e0 fe ff ff       	call   c00154f0 <displayProgramFault(char const*)>
c0015610:	83 c4 10             	add    esp,0x10
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	6a 00                	push   0x0
c0015618:	e8 9f ee ff ff       	call   c00144bc <Thr::terminateFromIRQ(int)>
c001561d:	83 c4 10             	add    esp,0x10
c0015620:	eb 01                	jmp    c0015623 <pgFault(regs*, void*)+0x82>
c0015622:	90                   	nop
c0015623:	83 c4 1c             	add    esp,0x1c
c0015626:	c3                   	ret    

c0015627 <otherISRHandler(regs*, void*)>:
c0015627:	83 ec 0c             	sub    esp,0xc
c001562a:	83 ec 0c             	sub    esp,0xc
c001562d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015631:	e8 99 fb ff ff       	call   c00151cf <displayDebugInfo(regs*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	83 ec 0c             	sub    esp,0xc
c001563c:	68 c8 ee 01 c0       	push   0xc001eec8
c0015641:	e8 aa fe ff ff       	call   c00154f0 <displayProgramFault(char const*)>
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	83 ec 0c             	sub    esp,0xc
c001564c:	6a 00                	push   0x0
c001564e:	e8 69 ee ff ff       	call   c00144bc <Thr::terminateFromIRQ(int)>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	90                   	nop
c0015657:	83 c4 0c             	add    esp,0xc
c001565a:	c3                   	ret    

c001565b <opcodeFault(regs*, void*)>:
c001565b:	55                   	push   ebp
c001565c:	89 e5                	mov    ebp,esp
c001565e:	83 ec 08             	sub    esp,0x8
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015667:	83 ec 08             	sub    esp,0x8
c001566a:	50                   	push   eax
c001566b:	68 59 ee 01 c0       	push   0xc001ee59
c0015670:	e8 73 55 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001567d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015683:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015689:	84 c0                	test   al,al
c001568b:	74 21                	je     c00156ae <opcodeFault(regs*, void*)+0x53>
c001568d:	83 ec 0c             	sub    esp,0xc
c0015690:	68 f0 ee 01 c0       	push   0xc001eef0
c0015695:	e8 4e 55 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001569a:	83 c4 10             	add    esp,0x10
c001569d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a3:	8d 50 19             	lea    edx,[eax+0x19]
c00156a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ac:	eb 2b                	jmp    c00156d9 <opcodeFault(regs*, void*)+0x7e>
c00156ae:	83 ec 0c             	sub    esp,0xc
c00156b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156b4:	e8 16 fb ff ff       	call   c00151cf <displayDebugInfo(regs*)>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	68 67 ee 01 c0       	push   0xc001ee67
c00156c4:	e8 27 fe ff ff       	call   c00154f0 <displayProgramFault(char const*)>
c00156c9:	83 c4 10             	add    esp,0x10
c00156cc:	83 ec 0c             	sub    esp,0xc
c00156cf:	6a 00                	push   0x0
c00156d1:	e8 e6 ed ff ff       	call   c00144bc <Thr::terminateFromIRQ(int)>
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	c9                   	leave  
c00156da:	c3                   	ret    

c00156db <i386SaveCoprocessor(void*)>:
c00156db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156df:	83 c0 3f             	add    eax,0x3f
c00156e2:	83 e0 c0             	and    eax,0xffffffc0
c00156e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156e9:	ff 25 4c 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f4c

c00156ef <i386LoadCoprocessor(void*)>:
c00156ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156f3:	83 c0 3f             	add    eax,0x3f
c00156f6:	83 e0 c0             	and    eax,0xffffffc0
c00156f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156fd:	ff 25 48 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f48

c0015703 <x87EmulHandler(regs*, void*)>:
c0015703:	53                   	push   ebx
c0015704:	83 ec 08             	sub    esp,0x8
c0015707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001570c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015710:	74 10                	je     c0015722 <x87EmulHandler(regs*, void*)+0x1f>
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	68 74 ee 01 c0       	push   0xc001ee74
c001571a:	e8 58 b0 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	0f 20 c0             	mov    eax,cr0
c0015725:	a8 08                	test   al,0x8
c0015727:	74 59                	je     c0015782 <x87EmulHandler(regs*, void*)+0x7f>
c0015729:	0f 06                	clts   
c001572b:	a1 44 3f 02 c0       	mov    eax,ds:0xc0023f44
c0015730:	85 c0                	test   eax,eax
c0015732:	74 0e                	je     c0015742 <x87EmulHandler(regs*, void*)+0x3f>
c0015734:	83 ec 0c             	sub    esp,0xc
c0015737:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001573a:	e8 9c ff ff ff       	call   c00156db <i386SaveCoprocessor(void*)>
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015748:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001574c:	75 12                	jne    c0015760 <x87EmulHandler(regs*, void*)+0x5d>
c001574e:	83 ec 0c             	sub    esp,0xc
c0015751:	68 40 02 00 00       	push   0x240
c0015756:	e8 fe 26 ff ff       	call   c0007e59 <malloc>
c001575b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001575e:	eb 10                	jmp    c0015770 <x87EmulHandler(regs*, void*)+0x6d>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	a1 44 3f 02 c0       	mov    eax,ds:0xc0023f44
c0015768:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001576b:	e8 7f ff ff ff       	call   c00156ef <i386LoadCoprocessor(void*)>
c0015770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	a3 44 3f 02 c0       	mov    ds:0xc0023f44,eax
c001577d:	83 c4 08             	add    esp,0x8
c0015780:	5b                   	pop    ebx
c0015781:	c3                   	ret    
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	68 88 ee 01 c0       	push   0xc001ee88
c001578a:	e8 59 54 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001578f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015797:	83 c4 18             	add    esp,0x18
c001579a:	5b                   	pop    ebx
c001579b:	e9 1c ed ff ff       	jmp    c00144bc <Thr::terminateFromIRQ(int)>

c00157a0 <HalInitialiseCoprocessor()>:
c00157a0:	83 ec 10             	sub    esp,0x10
c00157a3:	c7 05 44 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f44,0x0
c00157ad:	6a 00                	push   0x0
c00157af:	68 03 57 01 c0       	push   0xc0015703
c00157b4:	6a 07                	push   0x7
c00157b6:	e8 a1 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157bb:	e8 80 64 00 00       	call   c001bc40 <avxDetect>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	85 c0                	test   eax,eax
c00157c5:	74 1c                	je     c00157e3 <HalInitialiseCoprocessor()+0x43>
c00157c7:	c7 05 4c 3f 02 c0 6a bc 01 c0 	mov    DWORD PTR ds:0xc0023f4c,0xc001bc6a
c00157d1:	c7 05 48 3f 02 c0 7b bc 01 c0 	mov    DWORD PTR ds:0xc0023f48,0xc001bc7b
c00157db:	83 c4 0c             	add    esp,0xc
c00157de:	e9 a9 64 00 00       	jmp    c001bc8c <avxInit>
c00157e3:	e8 d8 66 00 00       	call   c001bec0 <absolutelyNoChanceInHell>
c00157e8:	85 c0                	test   eax,eax
c00157ea:	74 1c                	je     c0015808 <HalInitialiseCoprocessor()+0x68>
c00157ec:	c7 05 4c 3f 02 c0 d8 be 01 c0 	mov    DWORD PTR ds:0xc0023f4c,0xc001bed8
c00157f6:	c7 05 48 3f 02 c0 e0 be 01 c0 	mov    DWORD PTR ds:0xc0023f48,0xc001bee0
c0015800:	83 c4 0c             	add    esp,0xc
c0015803:	e9 e0 66 00 00       	jmp    c001bee8 <sseInit>
c0015808:	e8 f9 66 00 00       	call   c001bf06 <x87Detect>
c001580d:	85 c0                	test   eax,eax
c001580f:	74 1c                	je     c001582d <HalInitialiseCoprocessor()+0x8d>
c0015811:	c7 05 4c 3f 02 c0 21 bf 01 c0 	mov    DWORD PTR ds:0xc0023f4c,0xc001bf21
c001581b:	c7 05 48 3f 02 c0 28 bf 01 c0 	mov    DWORD PTR ds:0xc0023f48,0xc001bf28
c0015825:	83 c4 0c             	add    esp,0xc
c0015828:	e9 02 67 00 00       	jmp    c001bf2f <x87Init>
c001582d:	c7 05 4c 3f 02 c0 9c 51 01 c0 	mov    DWORD PTR ds:0xc0023f4c,0xc001519c
c0015837:	c7 05 48 3f 02 c0 9c 51 01 c0 	mov    DWORD PTR ds:0xc0023f48,0xc001519c
c0015841:	0f 20 c0             	mov    eax,cr0
c0015844:	83 c8 04             	or     eax,0x4
c0015847:	0f 22 c0             	mov    cr0,eax
c001584a:	83 c4 0c             	add    esp,0xc
c001584d:	c3                   	ret    

c001584e <HalPanic(char const*)>:
c001584e:	e9 24 af ff ff       	jmp    c0010777 <Krnl::panic(char const*)>

c0015853 <HalQueryPerformanceCounter()>:
c0015853:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0015858:	31 d2                	xor    edx,edx
c001585a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015860:	31 c0                	xor    eax,eax
c0015862:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015869:	74 02                	je     c001586d <HalQueryPerformanceCounter()+0x1a>
c001586b:	0f 31                	rdtsc  
c001586d:	c3                   	ret    

c001586e <HalInitialise()>:
c001586e:	53                   	push   ebx
c001586f:	83 ec 08             	sub    esp,0x8
c0015872:	e8 18 6f ff ff       	call   c000c78f <setupINTS()>
c0015877:	80 3d a0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232a0,0x0
c001587e:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0015883:	75 07                	jne    c001588c <HalInitialise()+0x1e>
c0015885:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001588c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015892:	83 e0 01             	and    eax,0x1
c0015895:	a2 40 3f 02 c0       	mov    ds:0xc0023f40,al
c001589a:	e8 a9 02 00 00       	call   c0015b48 <picOpen()>
c001589f:	80 3d 40 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f40,0x0
c00158a6:	74 0a                	je     c00158b2 <HalInitialise()+0x44>
c00158a8:	e8 e3 01 00 00       	call   c0015a90 <picDisable()>
c00158ad:	e8 0a 5d 00 00       	call   c001b5bc <apicOpen()>
c00158b2:	bb 0f 00 00 00       	mov    ebx,0xf
c00158b7:	50                   	push   eax
c00158b8:	6a 00                	push   0x0
c00158ba:	68 27 56 01 c0       	push   0xc0015627
c00158bf:	6a 00                	push   0x0
c00158c1:	e8 96 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c6:	83 c4 0c             	add    esp,0xc
c00158c9:	6a 00                	push   0x0
c00158cb:	68 27 56 01 c0       	push   0xc0015627
c00158d0:	6a 01                	push   0x1
c00158d2:	e8 85 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d7:	83 c4 0c             	add    esp,0xc
c00158da:	6a 00                	push   0x0
c00158dc:	68 9d 51 01 c0       	push   0xc001519d
c00158e1:	6a 02                	push   0x2
c00158e3:	e8 74 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e8:	83 c4 0c             	add    esp,0xc
c00158eb:	6a 00                	push   0x0
c00158ed:	68 27 56 01 c0       	push   0xc0015627
c00158f2:	6a 03                	push   0x3
c00158f4:	e8 63 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f9:	83 c4 0c             	add    esp,0xc
c00158fc:	6a 00                	push   0x0
c00158fe:	68 27 56 01 c0       	push   0xc0015627
c0015903:	6a 04                	push   0x4
c0015905:	e8 52 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001590a:	83 c4 0c             	add    esp,0xc
c001590d:	6a 00                	push   0x0
c001590f:	68 27 56 01 c0       	push   0xc0015627
c0015914:	6a 05                	push   0x5
c0015916:	e8 41 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001591b:	83 c4 0c             	add    esp,0xc
c001591e:	6a 00                	push   0x0
c0015920:	68 5b 56 01 c0       	push   0xc001565b
c0015925:	6a 06                	push   0x6
c0015927:	e8 30 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592c:	83 c4 0c             	add    esp,0xc
c001592f:	6a 00                	push   0x0
c0015931:	68 b6 51 01 c0       	push   0xc00151b6
c0015936:	6a 08                	push   0x8
c0015938:	e8 1f 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593d:	83 c4 0c             	add    esp,0xc
c0015940:	6a 00                	push   0x0
c0015942:	68 27 56 01 c0       	push   0xc0015627
c0015947:	6a 09                	push   0x9
c0015949:	e8 0e 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594e:	83 c4 0c             	add    esp,0xc
c0015951:	6a 00                	push   0x0
c0015953:	68 27 56 01 c0       	push   0xc0015627
c0015958:	6a 0a                	push   0xa
c001595a:	e8 fd 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595f:	83 c4 0c             	add    esp,0xc
c0015962:	6a 00                	push   0x0
c0015964:	68 27 56 01 c0       	push   0xc0015627
c0015969:	6a 0b                	push   0xb
c001596b:	e8 ec 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015970:	83 c4 0c             	add    esp,0xc
c0015973:	6a 00                	push   0x0
c0015975:	68 3c 55 01 c0       	push   0xc001553c
c001597a:	6a 0d                	push   0xd
c001597c:	e8 db 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015981:	83 c4 0c             	add    esp,0xc
c0015984:	6a 00                	push   0x0
c0015986:	68 a1 55 01 c0       	push   0xc00155a1
c001598b:	6a 0e                	push   0xe
c001598d:	e8 ca 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	50                   	push   eax
c0015996:	6a 00                	push   0x0
c0015998:	68 27 56 01 c0       	push   0xc0015627
c001599d:	53                   	push   ebx
c001599e:	43                   	inc    ebx
c001599f:	e8 b8 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	83 fb 1e             	cmp    ebx,0x1e
c00159aa:	75 e9                	jne    c0015995 <HalInitialise()+0x127>
c00159ac:	50                   	push   eax
c00159ad:	6a 00                	push   0x0
c00159af:	68 1d 21 01 c0       	push   0xc001211d
c00159b4:	6a 60                	push   0x60
c00159b6:	e8 a1 6b ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00159bb:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00159c0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00159ca:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00159d1:	e8 83 24 ff ff       	call   c0007e59 <malloc>
c00159d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00159d9:	89 c3                	mov    ebx,eax
c00159db:	e8 30 09 00 00       	call   c0016310 <RTC::RTC()>
c00159e0:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159ea:	5a                   	pop    edx
c00159eb:	59                   	pop    ecx
c00159ec:	53                   	push   ebx
c00159ed:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00159f3:	e8 30 66 ff ff       	call   c000c028 <Device::addChild(Device*)>
c00159f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159fa:	6a 00                	push   0x0
c00159fc:	6a 00                	push   0x0
c00159fe:	6a 00                	push   0x0
c0015a00:	53                   	push   ebx
c0015a01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a04:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0015a09:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015a0f:	83 c4 28             	add    esp,0x28
c0015a12:	5b                   	pop    ebx
c0015a13:	c3                   	ret    

c0015a14 <HalMakeBeep(int)>:
c0015a14:	53                   	push   ebx
c0015a15:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015a19:	85 db                	test   ebx,ebx
c0015a1b:	75 07                	jne    c0015a24 <HalMakeBeep(int)+0x10>
c0015a1d:	e4 61                	in     al,0x61
c0015a1f:	83 e0 fc             	and    eax,0xfffffffc
c0015a22:	eb 26                	jmp    c0015a4a <HalMakeBeep(int)+0x36>
c0015a24:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015a29:	99                   	cdq    
c0015a2a:	f7 fb                	idiv   ebx
c0015a2c:	89 c1                	mov    ecx,eax
c0015a2e:	b0 b6                	mov    al,0xb6
c0015a30:	e6 43                	out    0x43,al
c0015a32:	88 c8                	mov    al,cl
c0015a34:	e6 42                	out    0x42,al
c0015a36:	89 c8                	mov    eax,ecx
c0015a38:	c1 e8 08             	shr    eax,0x8
c0015a3b:	e6 42                	out    0x42,al
c0015a3d:	e4 61                	in     al,0x61
c0015a3f:	88 c2                	mov    dl,al
c0015a41:	83 ca 03             	or     edx,0x3
c0015a44:	38 c2                	cmp    dl,al
c0015a46:	74 04                	je     c0015a4c <HalMakeBeep(int)+0x38>
c0015a48:	88 d0                	mov    al,dl
c0015a4a:	e6 61                	out    0x61,al
c0015a4c:	5b                   	pop    ebx
c0015a4d:	c3                   	ret    

c0015a4e <HalGetRand()>:
c0015a4e:	31 c0                	xor    eax,eax
c0015a50:	c3                   	ret    

c0015a51 <HalEndOfInterrupt(int)>:
c0015a51:	80 3d 40 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f40,0x0
c0015a58:	74 23                	je     c0015a7d <HalEndOfInterrupt(int)+0x2c>
c0015a5a:	83 ec 14             	sub    esp,0x14
c0015a5d:	6a 1b                	push   0x1b
c0015a5f:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015a65:	e8 2c 1a ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c0015a6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a6f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a79:	83 c4 1c             	add    esp,0x1c
c0015a7c:	c3                   	ret    
c0015a7d:	e9 56 02 00 00       	jmp    c0015cd8 <picEOI(int)>

c0015a82 <HalRestart()>:
c0015a82:	c3                   	ret    

c0015a83 <HalShutdown()>:
c0015a83:	c3                   	ret    

c0015a84 <HalSleep()>:
c0015a84:	c3                   	ret    
c0015a85:	66 90                	xchg   ax,ax
c0015a87:	90                   	nop

c0015a88 <picIoWait()>:
c0015a88:	eb 00                	jmp    c0015a8a <picIoWait()+0x2>
c0015a8a:	eb 00                	jmp    c0015a8c <picIoWait()+0x4>
c0015a8c:	90                   	nop
c0015a8d:	c3                   	ret    
c0015a8e:	66 90                	xchg   ax,ax

c0015a90 <picDisable()>:
c0015a90:	83 ec 10             	sub    esp,0x10
c0015a93:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a9a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015aa3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015aa8:	ee                   	out    dx,al
c0015aa9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015ab0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015ab5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015ab9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015abe:	ee                   	out    dx,al
c0015abf:	90                   	nop
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	c3                   	ret    

c0015ac4 <picGetIRQReg(int)>:
c0015ac4:	83 ec 10             	sub    esp,0x10
c0015ac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015acb:	25 ff 00 00 00       	and    eax,0xff
c0015ad0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ad7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015adb:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015adf:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ae4:	ee                   	out    dx,al
c0015ae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ae9:	25 ff 00 00 00       	and    eax,0xff
c0015aee:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015af5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015af9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015afd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b02:	ee                   	out    dx,al
c0015b03:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015b0a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015b0f:	89 c2                	mov    edx,eax
c0015b11:	ec                   	in     al,dx
c0015b12:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015b16:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b1a:	25 ff 00 00 00       	and    eax,0xff
c0015b1f:	c1 e0 08             	shl    eax,0x8
c0015b22:	89 c1                	mov    ecx,eax
c0015b24:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015b2b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b30:	89 c2                	mov    edx,eax
c0015b32:	ec                   	in     al,dx
c0015b33:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015b37:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b3b:	25 ff 00 00 00       	and    eax,0xff
c0015b40:	09 c8                	or     eax,ecx
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	c3                   	ret    
c0015b46:	66 90                	xchg   ax,ax

c0015b48 <picOpen()>:
c0015b48:	83 ec 50             	sub    esp,0x50
c0015b4b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b52:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b5f:	ee                   	out    dx,al
c0015b60:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b67:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b6c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b74:	ee                   	out    dx,al
c0015b75:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b7d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b85:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b90:	89 c2                	mov    edx,eax
c0015b92:	ec                   	in     al,dx
c0015b93:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b97:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b9b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b9f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015ba6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015baa:	89 c2                	mov    edx,eax
c0015bac:	ec                   	in     al,dx
c0015bad:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015bb1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015bb5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015bb9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015bc0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015bc5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015bc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bcd:	ee                   	out    dx,al
c0015bce:	e8 b5 fe ff ff       	call   c0015a88 <picIoWait()>
c0015bd3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015bda:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015bdf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015be3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015be7:	ee                   	out    dx,al
c0015be8:	e8 9b fe ff ff       	call   c0015a88 <picIoWait()>
c0015bed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bf1:	25 ff 00 00 00       	and    eax,0xff
c0015bf6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bfd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015c01:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015c05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c09:	ee                   	out    dx,al
c0015c0a:	e8 79 fe ff ff       	call   c0015a88 <picIoWait()>
c0015c0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015c13:	25 ff 00 00 00       	and    eax,0xff
c0015c18:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015c1f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015c23:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015c27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015c2b:	ee                   	out    dx,al
c0015c2c:	e8 57 fe ff ff       	call   c0015a88 <picIoWait()>
c0015c31:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c38:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c3d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c45:	ee                   	out    dx,al
c0015c46:	e8 3d fe ff ff       	call   c0015a88 <picIoWait()>
c0015c4b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c52:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c57:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c5f:	ee                   	out    dx,al
c0015c60:	e8 23 fe ff ff       	call   c0015a88 <picIoWait()>
c0015c65:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c6c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c71:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c75:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c79:	ee                   	out    dx,al
c0015c7a:	e8 09 fe ff ff       	call   c0015a88 <picIoWait()>
c0015c7f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c86:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c8b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c93:	ee                   	out    dx,al
c0015c94:	e8 ef fd ff ff       	call   c0015a88 <picIoWait()>
c0015c99:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c9d:	25 ff 00 00 00       	and    eax,0xff
c0015ca2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ca9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015cad:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015cb1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015cb5:	ee                   	out    dx,al
c0015cb6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015cba:	25 ff 00 00 00       	and    eax,0xff
c0015cbf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015cc6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015cca:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015cce:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015cd2:	ee                   	out    dx,al
c0015cd3:	90                   	nop
c0015cd4:	83 c4 50             	add    esp,0x50
c0015cd7:	c3                   	ret    

c0015cd8 <picEOI(int)>:
c0015cd8:	83 ec 10             	sub    esp,0x10
c0015cdb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ce0:	75 22                	jne    c0015d04 <picEOI(int)+0x2c>
c0015ce2:	6a 0b                	push   0xb
c0015ce4:	e8 db fd ff ff       	call   c0015ac4 <picGetIRQReg(int)>
c0015ce9:	83 c4 04             	add    esp,0x4
c0015cec:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cf1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cf6:	25 ff ff 00 00       	and    eax,0xffff
c0015cfb:	25 80 00 00 00       	and    eax,0x80
c0015d00:	74 72                	je     c0015d74 <picEOI(int)+0x9c>
c0015d02:	66 90                	xchg   ax,ax
c0015d04:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015d09:	75 31                	jne    c0015d3c <picEOI(int)+0x64>
c0015d0b:	6a 0b                	push   0xb
c0015d0d:	e8 b2 fd ff ff       	call   c0015ac4 <picGetIRQReg(int)>
c0015d12:	83 c4 04             	add    esp,0x4
c0015d15:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d1e:	66 85 c0             	test   ax,ax
c0015d21:	78 19                	js     c0015d3c <picEOI(int)+0x64>
c0015d23:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015d2a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015d2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015d33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d38:	ee                   	out    dx,al
c0015d39:	eb 3d                	jmp    c0015d78 <picEOI(int)+0xa0>
c0015d3b:	90                   	nop
c0015d3c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d41:	7e 19                	jle    c0015d5c <picEOI(int)+0x84>
c0015d43:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d4a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d4f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d53:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d58:	ee                   	out    dx,al
c0015d59:	8d 76 00             	lea    esi,[esi+0x0]
c0015d5c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d63:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d68:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d6c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d71:	ee                   	out    dx,al
c0015d72:	eb 04                	jmp    c0015d78 <picEOI(int)+0xa0>
c0015d74:	90                   	nop
c0015d75:	8d 76 00             	lea    esi,[esi+0x0]
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	c3                   	ret    

c0015d7c <RTC::open(int, int, void*)>:
c0015d7c:	31 c0                	xor    eax,eax
c0015d7e:	c3                   	ret    
c0015d7f:	90                   	nop

c0015d80 <RTC::close(int, int, void*)>:
c0015d80:	31 c0                	xor    eax,eax
c0015d82:	c3                   	ret    
c0015d83:	90                   	nop

c0015d84 <RTC::timeInSecondsUTC()>:
c0015d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d88:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d94:	c3                   	ret    
c0015d95:	90                   	nop

c0015d96 <RTC::timeInDatetimeUTC()>:
c0015d96:	53                   	push   ebx
c0015d97:	83 ec 14             	sub    esp,0x14
c0015d9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015da4:	50                   	push   eax
c0015da5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015da8:	83 c4 0c             	add    esp,0xc
c0015dab:	52                   	push   edx
c0015dac:	50                   	push   eax
c0015dad:	53                   	push   ebx
c0015dae:	e8 e9 5f ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015db3:	89 d8                	mov    eax,ebx
c0015db5:	83 c4 14             	add    esp,0x14
c0015db8:	5b                   	pop    ebx
c0015db9:	c2 04 00             	ret    0x4

c0015dbc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015dbc:	56                   	push   esi
c0015dbd:	53                   	push   ebx
c0015dbe:	83 ec 14             	sub    esp,0x14
c0015dc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015dc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dc7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015dca:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015dce:	52                   	push   edx
c0015dcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd7:	50                   	push   eax
c0015dd8:	e8 bf 5f ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015ddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015de1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015de5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015de9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015ded:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015df1:	89 f0                	mov    eax,esi
c0015df3:	83 c4 20             	add    esp,0x20
c0015df6:	5b                   	pop    ebx
c0015df7:	5e                   	pop    esi
c0015df8:	ff e0                	jmp    eax

c0015dfa <RTC::~RTC()>:
c0015dfa:	83 ec 0c             	sub    esp,0xc
c0015dfd:	ba 30 ef 01 c0       	mov    edx,0xc001ef30
c0015e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e06:	89 10                	mov    DWORD PTR [eax],edx
c0015e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	50                   	push   eax
c0015e10:	e8 0b 5d ff ff       	call   c000bb20 <Clock::~Clock()>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	90                   	nop
c0015e19:	83 c4 0c             	add    esp,0xc
c0015e1c:	c3                   	ret    
c0015e1d:	90                   	nop

c0015e1e <RTC::~RTC()>:
c0015e1e:	83 ec 0c             	sub    esp,0xc
c0015e21:	83 ec 0c             	sub    esp,0xc
c0015e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e28:	e8 cd ff ff ff       	call   c0015dfa <RTC::~RTC()>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	83 ec 08             	sub    esp,0x8
c0015e33:	68 60 01 00 00       	push   0x160
c0015e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e3c:	e8 b1 4c ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	83 c4 0c             	add    esp,0xc
c0015e47:	c3                   	ret    

c0015e48 <RTC::get_update_in_progress_flag()>:
c0015e48:	83 ec 14             	sub    esp,0x14
c0015e4b:	6a 0a                	push   0xa
c0015e4d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e53:	e8 f2 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e58:	83 c4 1c             	add    esp,0x1c
c0015e5b:	c0 e8 07             	shr    al,0x7
c0015e5e:	c3                   	ret    
c0015e5f:	90                   	nop

c0015e60 <RTC::completeRTCRefresh()>:
c0015e60:	55                   	push   ebp
c0015e61:	57                   	push   edi
c0015e62:	56                   	push   esi
c0015e63:	53                   	push   ebx
c0015e64:	83 ec 2c             	sub    esp,0x2c
c0015e67:	8b 1d ac 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fac
c0015e6d:	83 ec 0c             	sub    esp,0xc
c0015e70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e74:	e8 cf ff ff ff       	call   c0015e48 <RTC::get_update_in_progress_flag()>
c0015e79:	83 c4 10             	add    esp,0x10
c0015e7c:	84 c0                	test   al,al
c0015e7e:	74 0e                	je     c0015e8e <RTC::completeRTCRefresh()+0x2e>
c0015e80:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e86:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c0015e8c:	73 df                	jae    c0015e6d <RTC::completeRTCRefresh()+0xd>
c0015e8e:	55                   	push   ebp
c0015e8f:	55                   	push   ebp
c0015e90:	6a 00                	push   0x0
c0015e92:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e98:	e8 ad 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e9d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ea1:	58                   	pop    eax
c0015ea2:	5a                   	pop    edx
c0015ea3:	6a 02                	push   0x2
c0015ea5:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015eab:	e8 9a 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015eb0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015eb4:	59                   	pop    ecx
c0015eb5:	5b                   	pop    ebx
c0015eb6:	6a 04                	push   0x4
c0015eb8:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ebe:	e8 87 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ec3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015ec7:	5e                   	pop    esi
c0015ec8:	5f                   	pop    edi
c0015ec9:	6a 07                	push   0x7
c0015ecb:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ed1:	e8 74 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ed6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015eda:	5d                   	pop    ebp
c0015edb:	58                   	pop    eax
c0015edc:	6a 08                	push   0x8
c0015ede:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ee4:	e8 61 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ee9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015eed:	58                   	pop    eax
c0015eee:	5a                   	pop    edx
c0015eef:	6a 09                	push   0x9
c0015ef1:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ef7:	e8 4e 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	0f b6 e8             	movzx  ebp,al
c0015f02:	8b 1d ac 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fac
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015f0f:	e8 34 ff ff ff       	call   c0015e48 <RTC::get_update_in_progress_flag()>
c0015f14:	83 c4 10             	add    esp,0x10
c0015f17:	84 c0                	test   al,al
c0015f19:	74 0e                	je     c0015f29 <RTC::completeRTCRefresh()+0xc9>
c0015f1b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015f21:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c0015f27:	73 df                	jae    c0015f08 <RTC::completeRTCRefresh()+0xa8>
c0015f29:	50                   	push   eax
c0015f2a:	50                   	push   eax
c0015f2b:	6a 00                	push   0x0
c0015f2d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f33:	e8 12 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f38:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f3c:	58                   	pop    eax
c0015f3d:	5a                   	pop    edx
c0015f3e:	6a 02                	push   0x2
c0015f40:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f46:	e8 ff 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f4f:	59                   	pop    ecx
c0015f50:	5b                   	pop    ebx
c0015f51:	6a 04                	push   0x4
c0015f53:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f59:	e8 ec 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f5e:	5e                   	pop    esi
c0015f5f:	88 c3                	mov    bl,al
c0015f61:	5f                   	pop    edi
c0015f62:	6a 07                	push   0x7
c0015f64:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f6a:	e8 db 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f6f:	89 c6                	mov    esi,eax
c0015f71:	58                   	pop    eax
c0015f72:	5a                   	pop    edx
c0015f73:	6a 08                	push   0x8
c0015f75:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f7b:	e8 ca 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f80:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f84:	59                   	pop    ecx
c0015f85:	5f                   	pop    edi
c0015f86:	6a 09                	push   0x9
c0015f88:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f8e:	e8 b7 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f93:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f97:	0f b6 f8             	movzx  edi,al
c0015f9a:	83 c4 10             	add    esp,0x10
c0015f9d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015fa1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fa5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015fa9:	89 f1                	mov    ecx,esi
c0015fab:	0f 94 c0             	sete   al
c0015fae:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015fb2:	0f 94 c2             	sete   dl
c0015fb5:	21 d0                	and    eax,edx
c0015fb7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015fbb:	0f 94 c2             	sete   dl
c0015fbe:	21 c2                	and    edx,eax
c0015fc0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015fc4:	0f 94 c0             	sete   al
c0015fc7:	21 d0                	and    eax,edx
c0015fc9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fcd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015fd1:	0f 94 c1             	sete   cl
c0015fd4:	84 c8                	test   al,cl
c0015fd6:	75 29                	jne    c0016001 <RTC::completeRTCRefresh()+0x1a1>
c0015fd8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fdc:	89 fd                	mov    ebp,edi
c0015fde:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fe2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fe6:	89 f0                	mov    eax,esi
c0015fe8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ff0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ff4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ff8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ffc:	e9 01 ff ff ff       	jmp    c0015f02 <RTC::completeRTCRefresh()+0xa2>
c0016001:	39 fd                	cmp    ebp,edi
c0016003:	75 d3                	jne    c0015fd8 <RTC::completeRTCRefresh()+0x178>
c0016005:	55                   	push   ebp
c0016006:	55                   	push   ebp
c0016007:	6a 0b                	push   0xb
c0016009:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001600f:	e8 36 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	89 c5                	mov    ebp,eax
c0016019:	a8 04                	test   al,0x4
c001601b:	75 78                	jne    c0016095 <RTC::completeRTCRefresh()+0x235>
c001601d:	b1 0a                	mov    cl,0xa
c001601f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016023:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016027:	83 e2 0f             	and    edx,0xf
c001602a:	c0 e8 04             	shr    al,0x4
c001602d:	c1 ef 04             	shr    edi,0x4
c0016030:	f6 e1                	mul    cl
c0016032:	6b ff 0a             	imul   edi,edi,0xa
c0016035:	01 d0                	add    eax,edx
c0016037:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001603b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001603f:	83 e2 0f             	and    edx,0xf
c0016042:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016046:	c0 e8 04             	shr    al,0x4
c0016049:	f6 e1                	mul    cl
c001604b:	01 d0                	add    eax,edx
c001604d:	88 da                	mov    dl,bl
c001604f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016053:	83 e2 0f             	and    edx,0xf
c0016056:	88 d8                	mov    al,bl
c0016058:	83 e3 80             	and    ebx,0xffffff80
c001605b:	c0 e8 04             	shr    al,0x4
c001605e:	83 e0 07             	and    eax,0x7
c0016061:	f6 e1                	mul    cl
c0016063:	01 d0                	add    eax,edx
c0016065:	89 f2                	mov    edx,esi
c0016067:	09 c3                	or     ebx,eax
c0016069:	83 e2 0f             	and    edx,0xf
c001606c:	89 f0                	mov    eax,esi
c001606e:	c0 e8 04             	shr    al,0x4
c0016071:	f6 e1                	mul    cl
c0016073:	8d 34 02             	lea    esi,[edx+eax*1]
c0016076:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001607a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001607e:	83 e2 0f             	and    edx,0xf
c0016081:	c0 e8 04             	shr    al,0x4
c0016084:	f6 e1                	mul    cl
c0016086:	01 d0                	add    eax,edx
c0016088:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001608c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016090:	83 e0 0f             	and    eax,0xf
c0016093:	01 c7                	add    edi,eax
c0016095:	83 e5 02             	and    ebp,0x2
c0016098:	75 14                	jne    c00160ae <RTC::completeRTCRefresh()+0x24e>
c001609a:	84 db                	test   bl,bl
c001609c:	79 10                	jns    c00160ae <RTC::completeRTCRefresh()+0x24e>
c001609e:	83 e3 7f             	and    ebx,0x7f
c00160a1:	b9 18 00 00 00       	mov    ecx,0x18
c00160a6:	8d 43 0c             	lea    eax,[ebx+0xc]
c00160a9:	99                   	cdq    
c00160aa:	f7 f9                	idiv   ecx
c00160ac:	88 d3                	mov    bl,dl
c00160ae:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c00160b4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c00160ba:	77 06                	ja     c00160c2 <RTC::completeRTCRefresh()+0x262>
c00160bc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00160c2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c00160c7:	31 d2                	xor    edx,edx
c00160c9:	c1 e1 10             	shl    ecx,0x10
c00160cc:	89 d7                	mov    edi,edx
c00160ce:	c1 e5 10             	shl    ebp,0x10
c00160d1:	31 c0                	xor    eax,eax
c00160d3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160d9:	09 cf                	or     edi,ecx
c00160db:	89 fa                	mov    edx,edi
c00160dd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160e1:	88 da                	mov    dl,bl
c00160e3:	89 f3                	mov    ebx,esi
c00160e5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160e9:	88 d8                	mov    al,bl
c00160eb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160ef:	0f b7 c8             	movzx  ecx,ax
c00160f2:	09 e9                	or     ecx,ebp
c00160f4:	89 c8                	mov    eax,ecx
c00160f6:	51                   	push   ecx
c00160f7:	51                   	push   ecx
c00160f8:	52                   	push   edx
c00160f9:	50                   	push   eax
c00160fa:	e8 10 5b ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c00160ff:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016103:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016109:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001610f:	83 c4 3c             	add    esp,0x3c
c0016112:	5b                   	pop    ebx
c0016113:	5e                   	pop    esi
c0016114:	5f                   	pop    edi
c0016115:	5d                   	pop    ebp
c0016116:	c3                   	ret    
c0016117:	90                   	nop

c0016118 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016118:	55                   	push   ebp
c0016119:	57                   	push   edi
c001611a:	56                   	push   esi
c001611b:	53                   	push   ebx
c001611c:	83 ec 30             	sub    esp,0x30
c001611f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016123:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016127:	6a 00                	push   0x0
c0016129:	6a 00                	push   0x0
c001612b:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016131:	e8 2a 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016136:	83 c4 0c             	add    esp,0xc
c0016139:	6a 00                	push   0x0
c001613b:	6a 02                	push   0x2
c001613d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016143:	e8 18 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016148:	31 d2                	xor    edx,edx
c001614a:	89 f9                	mov    ecx,edi
c001614c:	89 f8                	mov    eax,edi
c001614e:	c1 e9 10             	shr    ecx,0x10
c0016151:	0f b6 c4             	movzx  eax,ah
c0016154:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016158:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001615c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016160:	b9 64 00 00 00       	mov    ecx,0x64
c0016165:	89 f0                	mov    eax,esi
c0016167:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001616b:	89 f0                	mov    eax,esi
c001616d:	0f b6 c4             	movzx  eax,ah
c0016170:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016174:	89 f0                	mov    eax,esi
c0016176:	c1 e8 10             	shr    eax,0x10
c0016179:	66 f7 f1             	div    cx
c001617c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016181:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016186:	59                   	pop    ecx
c0016187:	5b                   	pop    ebx
c0016188:	89 fb                	mov    ebx,edi
c001618a:	6a 0b                	push   0xb
c001618c:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016192:	e8 b3 13 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016197:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00161a3:	75 74                	jne    c0016219 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00161a5:	b2 0a                	mov    dl,0xa
c00161a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00161ab:	0f b6 c1             	movzx  eax,cl
c00161ae:	f6 f2                	div    dl
c00161b0:	88 c3                	mov    bl,al
c00161b2:	88 e0                	mov    al,ah
c00161b4:	c1 e3 04             	shl    ebx,0x4
c00161b7:	09 c3                	or     ebx,eax
c00161b9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00161be:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00161c2:	f6 f2                	div    dl
c00161c4:	88 c1                	mov    cl,al
c00161c6:	88 e0                	mov    al,ah
c00161c8:	c1 e1 04             	shl    ecx,0x4
c00161cb:	09 c1                	or     ecx,eax
c00161cd:	89 f8                	mov    eax,edi
c00161cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00161d3:	0f b6 c0             	movzx  eax,al
c00161d6:	f6 f2                	div    dl
c00161d8:	88 c3                	mov    bl,al
c00161da:	88 e0                	mov    al,ah
c00161dc:	c1 e3 04             	shl    ebx,0x4
c00161df:	09 c3                	or     ebx,eax
c00161e1:	89 f0                	mov    eax,esi
c00161e3:	0f b6 c0             	movzx  eax,al
c00161e6:	f6 f2                	div    dl
c00161e8:	88 c1                	mov    cl,al
c00161ea:	88 e0                	mov    al,ah
c00161ec:	c1 e1 04             	shl    ecx,0x4
c00161ef:	09 c1                	or     ecx,eax
c00161f1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161f6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161fa:	f6 f2                	div    dl
c00161fc:	88 c1                	mov    cl,al
c00161fe:	88 e0                	mov    al,ah
c0016200:	c1 e1 04             	shl    ecx,0x4
c0016203:	09 c1                	or     ecx,eax
c0016205:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001620a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001620e:	f6 f2                	div    dl
c0016210:	89 c5                	mov    ebp,eax
c0016212:	88 e0                	mov    al,ah
c0016214:	c1 e5 04             	shl    ebp,0x4
c0016217:	09 c5                	or     ebp,eax
c0016219:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001621e:	75 17                	jne    c0016237 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016220:	80 fb 0b             	cmp    bl,0xb
c0016223:	76 0c                	jbe    c0016231 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016225:	80 eb 0c             	sub    bl,0xc
c0016228:	75 02                	jne    c001622c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001622a:	b3 0c                	mov    bl,0xc
c001622c:	83 cb 80             	or     ebx,0xffffff80
c001622f:	eb 06                	jmp    c0016237 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016231:	84 db                	test   bl,bl
c0016233:	75 02                	jne    c0016237 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016235:	b3 0c                	mov    bl,0xc
c0016237:	0f b6 db             	movzx  ebx,bl
c001623a:	50                   	push   eax
c001623b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016240:	50                   	push   eax
c0016241:	6a 00                	push   0x0
c0016243:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016249:	e8 12 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001624e:	83 c4 0c             	add    esp,0xc
c0016251:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016256:	50                   	push   eax
c0016257:	6a 02                	push   0x2
c0016259:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001625f:	e8 fc 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016264:	83 c4 0c             	add    esp,0xc
c0016267:	53                   	push   ebx
c0016268:	6a 04                	push   0x4
c001626a:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016270:	e8 eb 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016275:	83 c4 0c             	add    esp,0xc
c0016278:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001627d:	50                   	push   eax
c001627e:	6a 07                	push   0x7
c0016280:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016286:	e8 d5 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001628b:	83 c4 0c             	add    esp,0xc
c001628e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016293:	50                   	push   eax
c0016294:	6a 08                	push   0x8
c0016296:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001629c:	e8 bf 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00162a1:	83 c4 0c             	add    esp,0xc
c00162a4:	89 e8                	mov    eax,ebp
c00162a6:	0f b6 e8             	movzx  ebp,al
c00162a9:	55                   	push   ebp
c00162aa:	6a 09                	push   0x9
c00162ac:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00162b2:	e8 a9 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00162b7:	5a                   	pop    edx
c00162b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00162bc:	e8 9f fb ff ff       	call   c0015e60 <RTC::completeRTCRefresh()>
c00162c1:	83 c4 3c             	add    esp,0x3c
c00162c4:	b0 01                	mov    al,0x1
c00162c6:	5b                   	pop    ebx
c00162c7:	5e                   	pop    esi
c00162c8:	5f                   	pop    edi
c00162c9:	5d                   	pop    ebp
c00162ca:	c3                   	ret    

c00162cb <rtcIRQHandler(regs*, void*)>:
c00162cb:	53                   	push   ebx
c00162cc:	83 ec 10             	sub    esp,0x10
c00162cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00162d3:	6a 0c                	push   0xc
c00162d5:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00162db:	e8 6a 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	84 c0                	test   al,al
c00162e5:	79 24                	jns    c001630b <rtcIRQHandler(regs*, void*)+0x40>
c00162e7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162ee:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162f5:	66 ff 05 54 3f 02 c0 	inc    WORD PTR ds:0xc0023f54
c00162fc:	75 0d                	jne    c001630b <rtcIRQHandler(regs*, void*)+0x40>
c00162fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016302:	83 c4 08             	add    esp,0x8
c0016305:	5b                   	pop    ebx
c0016306:	e9 55 fb ff ff       	jmp    c0015e60 <RTC::completeRTCRefresh()>
c001630b:	83 c4 08             	add    esp,0x8
c001630e:	5b                   	pop    ebx
c001630f:	c3                   	ret    

c0016310 <RTC::RTC()>:
c0016310:	83 ec 1c             	sub    esp,0x1c
c0016313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016317:	83 ec 08             	sub    esp,0x8
c001631a:	68 13 ef 01 c0       	push   0xc001ef13
c001631f:	50                   	push   eax
c0016320:	e8 c5 57 ff ff       	call   c000baea <Clock::Clock(char const*)>
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	ba 30 ef 01 c0       	mov    edx,0xc001ef30
c001632d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016331:	89 10                	mov    DWORD PTR [eax],edx
c0016333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016337:	83 ec 0c             	sub    esp,0xc
c001633a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001633e:	6a 01                	push   0x1
c0016340:	68 cb 62 01 c0       	push   0xc00162cb
c0016345:	6a 08                	push   0x8
c0016347:	50                   	push   eax
c0016348:	e8 87 5c ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001634d:	83 c4 20             	add    esp,0x20
c0016350:	89 c2                	mov    edx,eax
c0016352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016356:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001635c:	fa                   	cli    
c001635d:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c0016362:	40                   	inc    eax
c0016363:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c0016368:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001636d:	83 ec 08             	sub    esp,0x8
c0016370:	6a 0b                	push   0xb
c0016372:	50                   	push   eax
c0016373:	e8 d2 11 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001637f:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0016384:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016388:	83 ca 10             	or     edx,0x10
c001638b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016391:	83 ec 04             	sub    esp,0x4
c0016394:	52                   	push   edx
c0016395:	6a 0b                	push   0xb
c0016397:	50                   	push   eax
c0016398:	e8 c3 12 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163a7:	e8 b4 fa ff ff       	call   c0015e60 <RTC::completeRTCRefresh()>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00163b4:	48                   	dec    eax
c00163b5:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c00163ba:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c00163bf:	85 c0                	test   eax,eax
c00163c1:	75 01                	jne    c00163c4 <RTC::RTC()+0xb4>
c00163c3:	fb                   	sti    
c00163c4:	90                   	nop
c00163c5:	83 c4 1c             	add    esp,0x1c
c00163c8:	c3                   	ret    
c00163c9:	66 90                	xchg   ax,ax
c00163cb:	90                   	nop

c00163cc <HalConsoleScroll(int, int)>:
c00163cc:	83 ec 10             	sub    esp,0x10
c00163cf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00163d7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163df:	90                   	nop
c00163e0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163e5:	0f 8f e1 00 00 00    	jg     c00164cc <HalConsoleScroll(int, int)+0x100>
c00163eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163f3:	90                   	nop
c00163f4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163fc:	0f 8f be 00 00 00    	jg     c00164c0 <HalConsoleScroll(int, int)+0xf4>
c0016402:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016406:	89 d0                	mov    eax,edx
c0016408:	c1 e0 02             	shl    eax,0x2
c001640b:	01 d0                	add    eax,edx
c001640d:	c1 e0 05             	shl    eax,0x5
c0016410:	89 c2                	mov    edx,eax
c0016412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016416:	01 d0                	add    eax,edx
c0016418:	89 c2                	mov    edx,eax
c001641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001641e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016421:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016425:	89 d0                	mov    eax,edx
c0016427:	c1 e0 02             	shl    eax,0x2
c001642a:	01 d0                	add    eax,edx
c001642c:	c1 e0 05             	shl    eax,0x5
c001642f:	89 c2                	mov    edx,eax
c0016431:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016435:	01 d0                	add    eax,edx
c0016437:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001643d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016441:	01 c2                	add    edx,eax
c0016443:	8a 01                	mov    al,BYTE PTR [ecx]
c0016445:	88 02                	mov    BYTE PTR [edx],al
c0016447:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001644c:	75 66                	jne    c00164b4 <HalConsoleScroll(int, int)+0xe8>
c001644e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016452:	83 e0 01             	and    eax,0x1
c0016455:	74 39                	je     c0016490 <HalConsoleScroll(int, int)+0xc4>
c0016457:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001645b:	83 e0 0f             	and    eax,0xf
c001645e:	88 c2                	mov    dl,al
c0016460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016464:	c1 e0 04             	shl    eax,0x4
c0016467:	88 d1                	mov    cl,dl
c0016469:	09 c1                	or     ecx,eax
c001646b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001646f:	89 d0                	mov    eax,edx
c0016471:	c1 e0 02             	shl    eax,0x2
c0016474:	01 d0                	add    eax,edx
c0016476:	c1 e0 05             	shl    eax,0x5
c0016479:	89 c2                	mov    edx,eax
c001647b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001647f:	01 d0                	add    eax,edx
c0016481:	89 c2                	mov    edx,eax
c0016483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016487:	01 d0                	add    eax,edx
c0016489:	88 ca                	mov    dl,cl
c001648b:	88 10                	mov    BYTE PTR [eax],dl
c001648d:	eb 25                	jmp    c00164b4 <HalConsoleScroll(int, int)+0xe8>
c001648f:	90                   	nop
c0016490:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016494:	89 d0                	mov    eax,edx
c0016496:	c1 e0 02             	shl    eax,0x2
c0016499:	01 d0                	add    eax,edx
c001649b:	c1 e0 05             	shl    eax,0x5
c001649e:	89 c2                	mov    edx,eax
c00164a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164a4:	01 d0                	add    eax,edx
c00164a6:	89 c2                	mov    edx,eax
c00164a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164ac:	01 d0                	add    eax,edx
c00164ae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00164b1:	8d 76 00             	lea    esi,[esi+0x0]
c00164b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00164b8:	e9 37 ff ff ff       	jmp    c00163f4 <HalConsoleScroll(int, int)+0x28>
c00164bd:	8d 76 00             	lea    esi,[esi+0x0]
c00164c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00164c4:	e9 17 ff ff ff       	jmp    c00163e0 <HalConsoleScroll(int, int)+0x14>
c00164c9:	8d 76 00             	lea    esi,[esi+0x0]
c00164cc:	90                   	nop
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	c3                   	ret    
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]

c00164d4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00164d4:	83 ec 14             	sub    esp,0x14
c00164d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164db:	88 04 24             	mov    BYTE PTR [esp],al
c00164de:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164e1:	25 ff 00 00 00       	and    eax,0xff
c00164e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164ea:	89 d1                	mov    ecx,edx
c00164ec:	83 e1 0f             	and    ecx,0xf
c00164ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164f3:	c1 e2 04             	shl    edx,0x4
c00164f6:	81 e2 ff 00 00 00    	and    edx,0xff
c00164fc:	09 ca                	or     edx,ecx
c00164fe:	c1 e2 08             	shl    edx,0x8
c0016501:	09 d0                	or     eax,edx
c0016503:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016508:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016510:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016514:	89 d0                	mov    eax,edx
c0016516:	c1 e0 02             	shl    eax,0x2
c0016519:	01 d0                	add    eax,edx
c001651b:	c1 e0 04             	shl    eax,0x4
c001651e:	89 c2                	mov    edx,eax
c0016520:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016524:	01 d0                	add    eax,edx
c0016526:	01 c0                	add    eax,eax
c0016528:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001652c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016530:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016535:	66 89 02             	mov    WORD PTR [edx],ax
c0016538:	90                   	nop
c0016539:	83 c4 14             	add    esp,0x14
c001653c:	c3                   	ret    
c001653d:	8d 76 00             	lea    esi,[esi+0x0]

c0016540 <HalConsoleCursorUpdate(int, int)>:
c0016540:	83 ec 20             	sub    esp,0x20
c0016543:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016547:	89 c2                	mov    edx,eax
c0016549:	89 d0                	mov    eax,edx
c001654b:	c1 e0 02             	shl    eax,0x2
c001654e:	01 d0                	add    eax,edx
c0016550:	c1 e0 04             	shl    eax,0x4
c0016553:	89 c2                	mov    edx,eax
c0016555:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016559:	01 d0                	add    eax,edx
c001655b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016560:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016567:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001656c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016570:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016574:	ee                   	out    dx,al
c0016575:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001657a:	25 ff 00 00 00       	and    eax,0xff
c001657f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016586:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001658a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001658e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016592:	ee                   	out    dx,al
c0016593:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001659a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001659f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00165a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165a7:	ee                   	out    dx,al
c00165a8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00165ad:	66 c1 e8 08          	shr    ax,0x8
c00165b1:	25 ff 00 00 00       	and    eax,0xff
c00165b6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00165bd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00165c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00165c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165c9:	ee                   	out    dx,al
c00165ca:	90                   	nop
c00165cb:	83 c4 20             	add    esp,0x20
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <FAT::getName()>:
c00165d0:	b8 64 ef 01 c0       	mov    eax,0xc001ef64
c00165d5:	c3                   	ret    
c00165d6:	66 90                	xchg   ax,ax

c00165d8 <FAT::tell(void*, unsigned long long*)>:
c00165d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165dd:	75 09                	jne    c00165e8 <FAT::tell(void*, unsigned long long*)+0x10>
c00165df:	b8 04 00 00 00       	mov    eax,0x4
c00165e4:	c3                   	ret    
c00165e5:	8d 76 00             	lea    esi,[esi+0x0]
c00165e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165ed:	75 09                	jne    c00165f8 <FAT::tell(void*, unsigned long long*)+0x20>
c00165ef:	b8 04 00 00 00       	mov    eax,0x4
c00165f4:	c3                   	ret    
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165ff:	ba 00 00 00 00       	mov    edx,0x0
c0016604:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016608:	89 01                	mov    DWORD PTR [ecx],eax
c001660a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001660d:	b8 00 00 00 00       	mov    eax,0x0
c0016612:	c3                   	ret    
c0016613:	90                   	nop

c0016614 <FAT::stat(void*, unsigned long long*)>:
c0016614:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016619:	75 09                	jne    c0016624 <FAT::stat(void*, unsigned long long*)+0x10>
c001661b:	b8 04 00 00 00       	mov    eax,0x4
c0016620:	c3                   	ret    
c0016621:	8d 76 00             	lea    esi,[esi+0x0]
c0016624:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016629:	75 09                	jne    c0016634 <FAT::stat(void*, unsigned long long*)+0x20>
c001662b:	b8 04 00 00 00       	mov    eax,0x4
c0016630:	c3                   	ret    
c0016631:	8d 76 00             	lea    esi,[esi+0x0]
c0016634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016638:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001663b:	ba 00 00 00 00       	mov    edx,0x0
c0016640:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016644:	89 01                	mov    DWORD PTR [ecx],eax
c0016646:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016649:	b8 00 00 00 00       	mov    eax,0x0
c001664e:	c3                   	ret    
c001664f:	90                   	nop

c0016650 <FAT::~FAT()>:
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c0016658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665c:	89 10                	mov    DWORD PTR [eax],edx
c001665e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016662:	83 ec 0c             	sub    esp,0xc
c0016665:	50                   	push   eax
c0016666:	e8 c3 48 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	90                   	nop
c001666f:	83 c4 0c             	add    esp,0xc
c0016672:	c3                   	ret    
c0016673:	90                   	nop

c0016674 <FAT::~FAT()>:
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	83 ec 0c             	sub    esp,0xc
c001667a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667e:	e8 cd ff ff ff       	call   c0016650 <FAT::~FAT()>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	83 ec 08             	sub    esp,0x8
c0016689:	6a 08                	push   0x8
c001668b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668f:	e8 5e 44 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	83 c4 0c             	add    esp,0xc
c001669a:	c3                   	ret    
c001669b:	90                   	nop

c001669c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001669c:	83 ec 1c             	sub    esp,0x1c
c001669f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00166a6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00166ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166af:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c00166b6:	83 f8 ff             	cmp    eax,0xffffffff
c00166b9:	75 35                	jne    c00166f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00166bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166bf:	88 c2                	mov    dl,al
c00166c1:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c00166c6:	01 d0                	add    eax,edx
c00166c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166cc:	8b 15 60 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f60
c00166d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166d6:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c00166dd:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c00166e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166e6:	89 14 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],edx
c00166ed:	eb 19                	jmp    c0016708 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166ef:	90                   	nop
c00166f0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166f4:	88 c2                	mov    dl,al
c00166f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166fa:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c0016701:	01 d0                	add    eax,edx
c0016703:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016707:	90                   	nop
c0016708:	83 ec 04             	sub    esp,0x4
c001670b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001670f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016713:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016717:	50                   	push   eax
c0016718:	e8 57 e7 fe ff       	call   c0004e74 <f_getlabel>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016724:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016729:	75 09                	jne    c0016734 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001672b:	b8 00 00 00 00       	mov    eax,0x0
c0016730:	eb 0a                	jmp    c001673c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016732:	66 90                	xchg   ax,ax
c0016734:	b8 01 00 00 00       	mov    eax,0x1
c0016739:	8d 76 00             	lea    esi,[esi+0x0]
c001673c:	83 c4 1c             	add    esp,0x1c
c001673f:	c3                   	ret    

c0016740 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016740:	57                   	push   edi
c0016741:	83 ec 58             	sub    esp,0x58
c0016744:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001674c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016750:	b8 00 00 00 00       	mov    eax,0x0
c0016755:	b9 0f 00 00 00       	mov    ecx,0xf
c001675a:	fc                   	cld    
c001675b:	89 d7                	mov    edi,edx
c001675d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001675f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016763:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c001676a:	83 f8 ff             	cmp    eax,0xffffffff
c001676d:	75 35                	jne    c00167a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001676f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016773:	88 c2                	mov    dl,al
c0016775:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c001677a:	01 d0                	add    eax,edx
c001677c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016780:	8b 15 60 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f60
c0016786:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001678a:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c0016791:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0016796:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001679a:	89 14 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],edx
c00167a1:	eb 19                	jmp    c00167bc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00167a3:	90                   	nop
c00167a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00167a8:	88 c2                	mov    dl,al
c00167aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00167ae:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c00167b5:	01 d0                	add    eax,edx
c00167b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00167bb:	90                   	nop
c00167bc:	83 ec 08             	sub    esp,0x8
c00167bf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00167c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167c7:	50                   	push   eax
c00167c8:	e8 13 a0 fe ff       	call   c00007e0 <strcat>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167d7:	50                   	push   eax
c00167d8:	e8 e8 e7 fe ff       	call   c0004fc5 <f_setlabel>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167e4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167e9:	75 09                	jne    c00167f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167eb:	b8 00 00 00 00       	mov    eax,0x0
c00167f0:	eb 0a                	jmp    c00167fc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167f2:	66 90                	xchg   ax,ax
c00167f4:	b8 01 00 00 00       	mov    eax,0x1
c00167f9:	8d 76 00             	lea    esi,[esi+0x0]
c00167fc:	83 c4 58             	add    esp,0x58
c00167ff:	5f                   	pop    edi
c0016800:	c3                   	ret    
c0016801:	90                   	nop
c0016802:	66 90                	xchg   ax,ax

c0016804 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016804:	83 ec 2c             	sub    esp,0x2c
c0016807:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001680f:	83 ec 08             	sub    esp,0x8
c0016812:	68 88 ef 01 c0       	push   0xc001ef88
c0016817:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681b:	e8 e0 9e fe ff       	call   c0000700 <strcmp>
c0016820:	83 c4 10             	add    esp,0x10
c0016823:	85 c0                	test   eax,eax
c0016825:	0f 94 c0             	sete   al
c0016828:	84 c0                	test   al,al
c001682a:	74 10                	je     c001683c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001682c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016834:	e9 b3 00 00 00       	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016839:	8d 76 00             	lea    esi,[esi+0x0]
c001683c:	83 ec 08             	sub    esp,0x8
c001683f:	68 7a ef 01 c0       	push   0xc001ef7a
c0016844:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016848:	e8 b3 9e fe ff       	call   c0000700 <strcmp>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	85 c0                	test   eax,eax
c0016852:	0f 94 c0             	sete   al
c0016855:	84 c0                	test   al,al
c0016857:	74 0f                	je     c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016859:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016861:	e9 86 00 00 00       	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016866:	66 90                	xchg   ax,ax
c0016868:	83 ec 08             	sub    esp,0x8
c001686b:	68 80 ef 01 c0       	push   0xc001ef80
c0016870:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016874:	e8 87 9e fe ff       	call   c0000700 <strcmp>
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	85 c0                	test   eax,eax
c001687e:	0f 94 c0             	sete   al
c0016881:	84 c0                	test   al,al
c0016883:	74 0b                	je     c0016890 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016885:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001688d:	eb 5d                	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001688f:	90                   	nop
c0016890:	83 ec 08             	sub    esp,0x8
c0016893:	68 3c d0 01 c0       	push   0xc001d03c
c0016898:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001689c:	e8 5f 9e fe ff       	call   c0000700 <strcmp>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	85 c0                	test   eax,eax
c00168a6:	0f 94 c0             	sete   al
c00168a9:	84 c0                	test   al,al
c00168ab:	74 0b                	je     c00168b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00168ad:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00168b5:	eb 35                	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168b7:	90                   	nop
c00168b8:	83 ec 08             	sub    esp,0x8
c00168bb:	68 86 ef 01 c0       	push   0xc001ef86
c00168c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168c4:	e8 37 9e fe ff       	call   c0000700 <strcmp>
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	85 c0                	test   eax,eax
c00168ce:	0f 94 c0             	sete   al
c00168d1:	84 c0                	test   al,al
c00168d3:	74 0b                	je     c00168e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00168d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168dd:	eb 0d                	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168df:	90                   	nop
c00168e0:	b8 08 00 00 00       	mov    eax,0x8
c00168e5:	e9 ea 00 00 00       	jmp    c00169d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168ea:	66 90                	xchg   ax,ax
c00168ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168fc:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c0016903:	83 f8 ff             	cmp    eax,0xffffffff
c0016906:	75 34                	jne    c001693c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016908:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001690c:	88 c2                	mov    dl,al
c001690e:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0016913:	01 d0                	add    eax,edx
c0016915:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016919:	8b 15 60 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f60
c001691f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016923:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c001692a:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c001692f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016933:	89 14 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],edx
c001693a:	eb 18                	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001693c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016940:	88 c2                	mov    dl,al
c0016942:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016946:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c001694d:	01 d0                	add    eax,edx
c001694f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016953:	90                   	nop
c0016954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016958:	88 04 24             	mov    BYTE PTR [esp],al
c001695b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001695f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016963:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001696b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016970:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	68 00 20 00 00       	push   0x2000
c0016980:	e8 d4 14 ff ff       	call   c0007e59 <malloc>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001698c:	68 00 20 00 00       	push   0x2000
c0016991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016995:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016999:	50                   	push   eax
c001699a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001699e:	50                   	push   eax
c001699f:	e8 11 e9 fe ff       	call   c00052b5 <f_mkfs>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00169b0:	75 0a                	jne    c00169bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00169b2:	b8 00 00 00 00       	mov    eax,0x0
c00169b7:	eb 1b                	jmp    c00169d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00169b9:	8d 76 00             	lea    esi,[esi+0x0]
c00169bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00169c1:	75 09                	jne    c00169cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00169c3:	b8 09 00 00 00       	mov    eax,0x9
c00169c8:	eb 0a                	jmp    c00169d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00169ca:	66 90                	xchg   ax,ax
c00169cc:	b8 01 00 00 00       	mov    eax,0x1
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	83 c4 2c             	add    esp,0x2c
c00169d7:	c3                   	ret    

c00169d8 <FAT::tryMount(LogicalDisk*, int)>:
c00169d8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169de:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c00169e3:	83 f8 14             	cmp    eax,0x14
c00169e6:	75 18                	jne    c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169e8:	83 ec 0c             	sub    esp,0xc
c00169eb:	68 8c ef 01 c0       	push   0xc001ef8c
c00169f0:	e8 82 9d ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00169f5:	83 c4 10             	add    esp,0x10
c00169f8:	b0 00                	mov    al,0x0
c00169fa:	e9 e9 01 00 00       	jmp    c0016be8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169ff:	90                   	nop
c0016a00:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016a07:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016a0d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a13:	3d 00 02 00 00       	cmp    eax,0x200
c0016a18:	74 0a                	je     c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016a1a:	b0 00                	mov    al,0x0
c0016a1c:	e9 c7 01 00 00       	jmp    c0016be8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a21:	8d 76 00             	lea    esi,[esi+0x0]
c0016a24:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016a2c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a33:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c0016a3a:	83 f8 ff             	cmp    eax,0xffffffff
c0016a3d:	74 09                	je     c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a3f:	b0 01                	mov    al,0x1
c0016a41:	e9 a2 01 00 00       	jmp    c0016be8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a46:	66 90                	xchg   ax,ax
c0016a48:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a52:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a5a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a61:	88 c2                	mov    dl,al
c0016a63:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0016a68:	01 d0                	add    eax,edx
c0016a6a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a71:	8b 15 60 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f60
c0016a77:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a7e:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c0016a85:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0016a8a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a91:	89 14 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],edx
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	68 34 02 00 00       	push   0x234
c0016aa0:	e8 b4 13 ff ff       	call   c0007e59 <malloc>
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016aaf:	83 ec 04             	sub    esp,0x4
c0016ab2:	6a 00                	push   0x0
c0016ab4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016abb:	50                   	push   eax
c0016abc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ac3:	e8 13 d0 fe ff       	call   c0003adb <f_mount>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ad2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016ada:	74 1c                	je     c0016af8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ae6:	e8 8e 13 ff ff       	call   c0007e79 <rfree>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	b0 00                	mov    al,0x0
c0016af0:	e9 f3 00 00 00       	jmp    c0016be8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016af5:	8d 76 00             	lea    esi,[esi+0x0]
c0016af8:	83 ec 04             	sub    esp,0x4
c0016afb:	68 00 01 00 00       	push   0x100
c0016b00:	6a 00                	push   0x0
c0016b02:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b09:	50                   	push   eax
c0016b0a:	e8 e1 99 fe ff       	call   c00004f0 <memset>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	83 ec 08             	sub    esp,0x8
c0016b15:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b1c:	50                   	push   eax
c0016b1d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b24:	50                   	push   eax
c0016b25:	e8 b6 9c fe ff       	call   c00007e0 <strcat>
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	83 ec 08             	sub    esp,0x8
c0016b30:	68 9a ef 01 c0       	push   0xc001ef9a
c0016b35:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b3c:	50                   	push   eax
c0016b3d:	e8 9e 9c fe ff       	call   c00007e0 <strcat>
c0016b42:	83 c4 10             	add    esp,0x10
c0016b45:	83 ec 04             	sub    esp,0x4
c0016b48:	6a 01                	push   0x1
c0016b4a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b51:	50                   	push   eax
c0016b52:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b56:	50                   	push   eax
c0016b57:	e8 e1 cf fe ff       	call   c0003b3d <f_open>
c0016b5c:	83 c4 10             	add    esp,0x10
c0016b5f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b66:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b6d:	85 c0                	test   eax,eax
c0016b6f:	74 0b                	je     c0016b7c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b71:	78 31                	js     c0016ba4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b73:	83 e8 04             	sub    eax,0x4
c0016b76:	83 f8 01             	cmp    eax,0x1
c0016b79:	77 29                	ja     c0016ba4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b7b:	90                   	nop
c0016b7c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b8b:	50                   	push   eax
c0016b8c:	e8 5f d7 fe ff       	call   c00042f0 <f_close>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	90                   	nop
c0016b95:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b9d:	74 41                	je     c0016be0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b9f:	eb 33                	jmp    c0016bd4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba4:	83 ec 0c             	sub    esp,0xc
c0016ba7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016bae:	e8 c6 12 ff ff       	call   c0007e79 <rfree>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	83 ec 04             	sub    esp,0x4
c0016bb9:	6a 00                	push   0x0
c0016bbb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016bc2:	50                   	push   eax
c0016bc3:	6a 00                	push   0x0
c0016bc5:	e8 11 cf fe ff       	call   c0003adb <f_mount>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	b0 00                	mov    al,0x0
c0016bcf:	eb 17                	jmp    c0016be8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd4:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0016bd9:	40                   	inc    eax
c0016bda:	a3 60 3f 02 c0       	mov    ds:0xc0023f60,eax
c0016bdf:	90                   	nop
c0016be0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016be7:	90                   	nop
c0016be8:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bee:	c3                   	ret    
c0016bef:	90                   	nop

c0016bf0 <FAT::allocateSwapfile(char const*, int)>:
c0016bf0:	55                   	push   ebp
c0016bf1:	57                   	push   edi
c0016bf2:	56                   	push   esi
c0016bf3:	53                   	push   ebx
c0016bf4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bfa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016c0f:	e8 45 12 ff ff       	call   c0007e59 <malloc>
c0016c14:	83 c4 10             	add    esp,0x10
c0016c17:	89 c7                	mov    edi,eax
c0016c19:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c0016c1e:	83 ec 04             	sub    esp,0x4
c0016c21:	50                   	push   eax
c0016c22:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016c29:	57                   	push   edi
c0016c2a:	e8 2f 45 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c39:	83 ec 04             	sub    esp,0x4
c0016c3c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c40:	50                   	push   eax
c0016c41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c45:	50                   	push   eax
c0016c46:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c4d:	e8 78 48 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c5c:	c1 e0 14             	shl    eax,0x14
c0016c5f:	89 c7                	mov    edi,eax
c0016c61:	89 c5                	mov    ebp,eax
c0016c63:	c1 fd 1f             	sar    ebp,0x1f
c0016c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c6e:	89 f9                	mov    ecx,edi
c0016c70:	31 c1                	xor    ecx,eax
c0016c72:	89 cb                	mov    ebx,ecx
c0016c74:	89 e9                	mov    ecx,ebp
c0016c76:	31 d1                	xor    ecx,edx
c0016c78:	89 ce                	mov    esi,ecx
c0016c7a:	89 f0                	mov    eax,esi
c0016c7c:	09 d8                	or     eax,ebx
c0016c7e:	0f 84 9c 00 00 00    	je     c0016d20 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c8e:	e8 03 47 ff ff       	call   c000b396 <File::unlink()>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	83 ec 08             	sub    esp,0x8
c0016c99:	6a 12                	push   0x12
c0016c9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ca2:	e8 77 45 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cb1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016cb7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016cbe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016cc5:	c1 e0 14             	shl    eax,0x14
c0016cc8:	83 ec 04             	sub    esp,0x4
c0016ccb:	6a 01                	push   0x1
c0016ccd:	50                   	push   eax
c0016cce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016cd5:	e8 7b e4 fe ff       	call   c0005155 <f_expand>
c0016cda:	83 c4 10             	add    esp,0x10
c0016cdd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce6:	83 c0 10             	add    eax,0x10
c0016ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ceb:	83 ec 0c             	sub    esp,0xc
c0016cee:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cf2:	52                   	push   edx
c0016cf3:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cf7:	52                   	push   edx
c0016cf8:	6a 00                	push   0x0
c0016cfa:	68 00 04 00 00       	push   0x400
c0016cff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d06:	ff d0                	call   eax
c0016d08:	83 c4 20             	add    esp,0x20
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d15:	e8 62 45 ff ff       	call   c000b27c <File::close()>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d20:	83 ec 08             	sub    esp,0x8
c0016d23:	6a 01                	push   0x1
c0016d25:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d2c:	e8 ed 44 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d3d:	83 c0 0c             	add    eax,0xc
c0016d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d49:	52                   	push   edx
c0016d4a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d4e:	52                   	push   edx
c0016d4f:	6a 00                	push   0x0
c0016d51:	6a 04                	push   0x4
c0016d53:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d5a:	ff d0                	call   eax
c0016d5c:	83 c4 20             	add    esp,0x20
c0016d5f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d66:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d6c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d73:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d7a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d7d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d8e:	e8 e9 44 ff ff       	call   c000b27c <File::close()>
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d9d:	ba 00 00 00 00       	mov    edx,0x0
c0016da2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016da8:	5b                   	pop    ebx
c0016da9:	5e                   	pop    esi
c0016daa:	5f                   	pop    edi
c0016dab:	5d                   	pop    ebp
c0016dac:	c3                   	ret    
c0016dad:	90                   	nop
c0016dae:	66 90                	xchg   ax,ax

c0016db0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016db0:	57                   	push   edi
c0016db1:	56                   	push   esi
c0016db2:	53                   	push   ebx
c0016db3:	81 ec 50 02 00 00    	sub    esp,0x250
c0016db9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016dc1:	74 0d                	je     c0016dd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016dc3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016dcb:	75 0f                	jne    c0016ddc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd0:	b8 04 00 00 00       	mov    eax,0x4
c0016dd5:	e9 36 01 00 00       	jmp    c0016f10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dda:	66 90                	xchg   ax,ax
c0016ddc:	83 ec 08             	sub    esp,0x8
c0016ddf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016de6:	50                   	push   eax
c0016de7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016dee:	e8 c0 d7 fe ff       	call   c00045b3 <f_readdir>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016dfd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016e0e:	83 c0 16             	add    eax,0x16
c0016e11:	50                   	push   eax
c0016e12:	e8 49 97 fe ff       	call   c0000560 <strlen>
c0016e17:	83 c4 10             	add    esp,0x10
c0016e1a:	ba 00 00 00 00       	mov    edx,0x0
c0016e1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016e27:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016e2e:	25 ff 00 00 00       	and    eax,0xff
c0016e33:	83 e0 10             	and    eax,0x10
c0016e36:	74 08                	je     c0016e40 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e38:	b8 02 00 00 00       	mov    eax,0x2
c0016e3d:	eb 09                	jmp    c0016e48 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e3f:	90                   	nop
c0016e40:	b8 01 00 00 00       	mov    eax,0x1
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e4c:	83 ec 08             	sub    esp,0x8
c0016e4f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e56:	83 c0 16             	add    eax,0x16
c0016e59:	50                   	push   eax
c0016e5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e5e:	83 c0 10             	add    eax,0x10
c0016e61:	50                   	push   eax
c0016e62:	e8 b9 97 fe ff       	call   c0000620 <strcpy>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e71:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e7c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e83:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e8a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e91:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e98:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e9f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016ea6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ead:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016eb4:	89 c6                	mov    esi,eax
c0016eb6:	89 d7                	mov    edi,edx
c0016eb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016eba:	89 c8                	mov    eax,ecx
c0016ebc:	89 fa                	mov    edx,edi
c0016ebe:	89 f3                	mov    ebx,esi
c0016ec0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016ec7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016ece:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016ed5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016edc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016ee2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ee9:	84 c0                	test   al,al
c0016eeb:	75 07                	jne    c0016ef4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016eed:	b8 07 00 00 00       	mov    eax,0x7
c0016ef2:	eb 1c                	jmp    c0016f10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ef4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016efb:	85 c0                	test   eax,eax
c0016efd:	75 09                	jne    c0016f08 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016eff:	b8 00 00 00 00       	mov    eax,0x0
c0016f04:	eb 0a                	jmp    c0016f10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016f06:	66 90                	xchg   ax,ax
c0016f08:	b8 01 00 00 00       	mov    eax,0x1
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	81 c4 50 02 00 00    	add    esp,0x250
c0016f16:	5b                   	pop    ebx
c0016f17:	5e                   	pop    esi
c0016f18:	5f                   	pop    edi
c0016f19:	c3                   	ret    
c0016f1a:	66 90                	xchg   ax,ax

c0016f1c <FAT::read(void*, unsigned long, void*, int*)>:
c0016f1c:	83 ec 1c             	sub    esp,0x1c
c0016f1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f24:	74 0a                	je     c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016f26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f2b:	75 0b                	jne    c0016f38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f30:	b8 04 00 00 00       	mov    eax,0x4
c0016f35:	eb 41                	jmp    c0016f78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f37:	90                   	nop
c0016f38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f3c:	50                   	push   eax
c0016f3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f49:	e8 ba ce fe ff       	call   c0003e08 <f_read>
c0016f4e:	83 c4 10             	add    esp,0x10
c0016f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f59:	89 c2                	mov    edx,eax
c0016f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f5f:	89 10                	mov    DWORD PTR [eax],edx
c0016f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f65:	85 c0                	test   eax,eax
c0016f67:	75 07                	jne    c0016f70 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f69:	b8 00 00 00 00       	mov    eax,0x0
c0016f6e:	eb 08                	jmp    c0016f78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f70:	b8 01 00 00 00       	mov    eax,0x1
c0016f75:	8d 76 00             	lea    esi,[esi+0x0]
c0016f78:	83 c4 1c             	add    esp,0x1c
c0016f7b:	c3                   	ret    

c0016f7c <FAT::write(void*, unsigned long, void*, int*)>:
c0016f7c:	83 ec 1c             	sub    esp,0x1c
c0016f7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f84:	74 0a                	je     c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f8b:	75 0b                	jne    c0016f98 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f90:	b8 04 00 00 00       	mov    eax,0x4
c0016f95:	eb 41                	jmp    c0016fd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f97:	90                   	nop
c0016f98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f9c:	50                   	push   eax
c0016f9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016fa5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa9:	e8 59 d0 fe ff       	call   c0004007 <f_write>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fb9:	89 c2                	mov    edx,eax
c0016fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fbf:	89 10                	mov    DWORD PTR [eax],edx
c0016fc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	75 07                	jne    c0016fd0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016fc9:	b8 00 00 00 00       	mov    eax,0x0
c0016fce:	eb 08                	jmp    c0016fd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016fd0:	b8 01 00 00 00       	mov    eax,0x1
c0016fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd8:	83 c4 1c             	add    esp,0x1c
c0016fdb:	c3                   	ret    

c0016fdc <FAT::close(void*)>:
c0016fdc:	83 ec 1c             	sub    esp,0x1c
c0016fdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fe4:	75 0a                	jne    c0016ff0 <FAT::close(void*)+0x14>
c0016fe6:	b8 04 00 00 00       	mov    eax,0x4
c0016feb:	eb 3f                	jmp    c001702c <FAT::close(void*)+0x50>
c0016fed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ff7:	e8 f4 d2 fe ff       	call   c00042f0 <f_close>
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017003:	83 ec 0c             	sub    esp,0xc
c0017006:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001700a:	e8 5a 0e ff ff       	call   c0007e69 <free>
c001700f:	83 c4 10             	add    esp,0x10
c0017012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017016:	85 c0                	test   eax,eax
c0017018:	75 0a                	jne    c0017024 <FAT::close(void*)+0x48>
c001701a:	b8 00 00 00 00       	mov    eax,0x0
c001701f:	eb 0b                	jmp    c001702c <FAT::close(void*)+0x50>
c0017021:	8d 76 00             	lea    esi,[esi+0x0]
c0017024:	b8 01 00 00 00       	mov    eax,0x1
c0017029:	8d 76 00             	lea    esi,[esi+0x0]
c001702c:	83 c4 1c             	add    esp,0x1c
c001702f:	c3                   	ret    

c0017030 <FAT::closeDir(void*)>:
c0017030:	83 ec 1c             	sub    esp,0x1c
c0017033:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017038:	75 0a                	jne    c0017044 <FAT::closeDir(void*)+0x14>
c001703a:	b8 04 00 00 00       	mov    eax,0x4
c001703f:	eb 3f                	jmp    c0017080 <FAT::closeDir(void*)+0x50>
c0017041:	8d 76 00             	lea    esi,[esi+0x0]
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001704b:	e8 41 d5 fe ff       	call   c0004591 <f_closedir>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017057:	83 ec 0c             	sub    esp,0xc
c001705a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001705e:	e8 06 0e ff ff       	call   c0007e69 <free>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001706a:	85 c0                	test   eax,eax
c001706c:	75 0a                	jne    c0017078 <FAT::closeDir(void*)+0x48>
c001706e:	b8 00 00 00 00       	mov    eax,0x0
c0017073:	eb 0b                	jmp    c0017080 <FAT::closeDir(void*)+0x50>
c0017075:	8d 76 00             	lea    esi,[esi+0x0]
c0017078:	b8 01 00 00 00       	mov    eax,0x1
c001707d:	8d 76 00             	lea    esi,[esi+0x0]
c0017080:	83 c4 1c             	add    esp,0x1c
c0017083:	c3                   	ret    

c0017084 <FAT::seek(void*, unsigned long long)>:
c0017084:	83 ec 2c             	sub    esp,0x2c
c0017087:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001708f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017097:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001709c:	75 0a                	jne    c00170a8 <FAT::seek(void*, unsigned long long)+0x24>
c001709e:	b8 04 00 00 00       	mov    eax,0x4
c00170a3:	eb 33                	jmp    c00170d8 <FAT::seek(void*, unsigned long long)+0x54>
c00170a5:	8d 76 00             	lea    esi,[esi+0x0]
c00170a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170ac:	83 ec 08             	sub    esp,0x8
c00170af:	50                   	push   eax
c00170b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170b4:	e8 66 d2 fe ff       	call   c000431f <f_lseek>
c00170b9:	83 c4 10             	add    esp,0x10
c00170bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170c4:	85 c0                	test   eax,eax
c00170c6:	75 08                	jne    c00170d0 <FAT::seek(void*, unsigned long long)+0x4c>
c00170c8:	b8 00 00 00 00       	mov    eax,0x0
c00170cd:	eb 09                	jmp    c00170d8 <FAT::seek(void*, unsigned long long)+0x54>
c00170cf:	90                   	nop
c00170d0:	b8 01 00 00 00       	mov    eax,0x1
c00170d5:	8d 76 00             	lea    esi,[esi+0x0]
c00170d8:	83 c4 2c             	add    esp,0x2c
c00170db:	c3                   	ret    

c00170dc <fatWrapperReadDisk>:
c00170dc:	53                   	push   ebx
c00170dd:	83 ec 18             	sub    esp,0x18
c00170e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170ec:	25 ff 00 00 00       	and    eax,0xff
c00170f1:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00170f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017100:	ba 00 00 00 00       	mov    edx,0x0
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001710c:	53                   	push   ebx
c001710d:	52                   	push   edx
c001710e:	50                   	push   eax
c001710f:	51                   	push   ecx
c0017110:	e8 bb 61 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017115:	83 c4 20             	add    esp,0x20
c0017118:	83 c4 18             	add    esp,0x18
c001711b:	5b                   	pop    ebx
c001711c:	c3                   	ret    
c001711d:	8d 76 00             	lea    esi,[esi+0x0]

c0017120 <fatWrapperWriteDisk>:
c0017120:	53                   	push   ebx
c0017121:	83 ec 18             	sub    esp,0x18
c0017124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017128:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001712c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017130:	25 ff 00 00 00       	and    eax,0xff
c0017135:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c001713c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017144:	ba 00 00 00 00       	mov    edx,0x0
c0017149:	83 ec 0c             	sub    esp,0xc
c001714c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017150:	53                   	push   ebx
c0017151:	52                   	push   edx
c0017152:	50                   	push   eax
c0017153:	51                   	push   ecx
c0017154:	e8 e3 61 ff ff       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c0017159:	83 c4 20             	add    esp,0x20
c001715c:	83 c4 18             	add    esp,0x18
c001715f:	5b                   	pop    ebx
c0017160:	c3                   	ret    
c0017161:	8d 76 00             	lea    esi,[esi+0x0]

c0017164 <fatWrapperIoctl>:
c0017164:	53                   	push   ebx
c0017165:	83 ec 28             	sub    esp,0x28
c0017168:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001716c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017170:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017174:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017178:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001717d:	75 35                	jne    c00171b4 <fatWrapperIoctl+0x50>
c001717f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017187:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001718b:	25 ff 00 00 00       	and    eax,0xff
c0017190:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c0017197:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001719d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171a7:	66 89 02             	mov    WORD PTR [edx],ax
c00171aa:	b8 00 00 00 00       	mov    eax,0x0
c00171af:	e9 c4 00 00 00       	jmp    c0017278 <fatWrapperIoctl+0x114>
c00171b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00171b9:	75 75                	jne    c0017230 <fatWrapperIoctl+0xcc>
c00171bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171c3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171c7:	25 ff 00 00 00       	and    eax,0xff
c00171cc:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c00171d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171df:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171e5:	89 c8                	mov    eax,ecx
c00171e7:	89 da                	mov    edx,ebx
c00171e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171ed:	c1 e0 0a             	shl    eax,0xa
c00171f0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171f4:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171fa:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c0017201:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017207:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001720d:	89 cb                	mov    ebx,ecx
c001720f:	c1 fb 1f             	sar    ebx,0x1f
c0017212:	53                   	push   ebx
c0017213:	51                   	push   ecx
c0017214:	52                   	push   edx
c0017215:	50                   	push   eax
c0017216:	e8 25 50 00 00       	call   c001c240 <__udivdi3>
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	89 c2                	mov    edx,eax
c0017220:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017224:	89 10                	mov    DWORD PTR [eax],edx
c0017226:	b8 00 00 00 00       	mov    eax,0x0
c001722b:	eb 4b                	jmp    c0017278 <fatWrapperIoctl+0x114>
c001722d:	8d 76 00             	lea    esi,[esi+0x0]
c0017230:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017235:	75 09                	jne    c0017240 <fatWrapperIoctl+0xdc>
c0017237:	b8 00 00 00 00       	mov    eax,0x0
c001723c:	eb 3a                	jmp    c0017278 <fatWrapperIoctl+0x114>
c001723e:	66 90                	xchg   ax,ax
c0017240:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017245:	75 19                	jne    c0017260 <fatWrapperIoctl+0xfc>
c0017247:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001724b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001724f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017253:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017259:	b8 00 00 00 00       	mov    eax,0x0
c001725e:	eb 18                	jmp    c0017278 <fatWrapperIoctl+0x114>
c0017260:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017265:	75 09                	jne    c0017270 <fatWrapperIoctl+0x10c>
c0017267:	b8 00 00 00 00       	mov    eax,0x0
c001726c:	eb 0a                	jmp    c0017278 <fatWrapperIoctl+0x114>
c001726e:	66 90                	xchg   ax,ax
c0017270:	b8 04 00 00 00       	mov    eax,0x4
c0017275:	8d 76 00             	lea    esi,[esi+0x0]
c0017278:	83 c4 28             	add    esp,0x28
c001727b:	5b                   	pop    ebx
c001727c:	c3                   	ret    
c001727d:	90                   	nop
c001727e:	66 90                	xchg   ax,ax

c0017280 <FAT::FAT()>:
c0017280:	83 ec 1c             	sub    esp,0x1c
c0017283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017287:	83 ec 0c             	sub    esp,0xc
c001728a:	50                   	push   eax
c001728b:	e8 7a 3c ff ff       	call   c000af0a <Filesystem::Filesystem()>
c0017290:	83 c4 10             	add    esp,0x10
c0017293:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c0017298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001729c:	89 10                	mov    DWORD PTR [eax],edx
c001729e:	c7 05 60 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f60,0x0
c00172a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172b0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00172b5:	7f 15                	jg     c00172cc <FAT::FAT()+0x4c>
c00172b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172bb:	c7 04 85 80 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc080],0xffffffff
c00172c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172ca:	eb e4                	jmp    c00172b0 <FAT::FAT()+0x30>
c00172cc:	90                   	nop
c00172cd:	83 c4 1c             	add    esp,0x1c
c00172d0:	c3                   	ret    
c00172d1:	90                   	nop
c00172d2:	66 90                	xchg   ax,ax

c00172d4 <FAT::fixFilepath(char*)>:
c00172d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d8:	8a 00                	mov    al,BYTE PTR [eax]
c00172da:	3c 40                	cmp    al,0x40
c00172dc:	7e 2e                	jle    c001730c <FAT::fixFilepath(char*)+0x38>
c00172de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172e2:	8a 00                	mov    al,BYTE PTR [eax]
c00172e4:	83 e8 41             	sub    eax,0x41
c00172e7:	88 c2                	mov    dl,al
c00172e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ed:	88 10                	mov    BYTE PTR [eax],dl
c00172ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172f3:	8a 00                	mov    al,BYTE PTR [eax]
c00172f5:	0f be c0             	movsx  eax,al
c00172f8:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c00172ff:	83 c0 30             	add    eax,0x30
c0017302:	88 c2                	mov    dl,al
c0017304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017308:	88 10                	mov    BYTE PTR [eax],dl
c001730a:	66 90                	xchg   ax,ax
c001730c:	90                   	nop
c001730d:	c3                   	ret    
c001730e:	66 90                	xchg   ax,ax

c0017310 <FAT::open(char const*, void**, FileOpenMode)>:
c0017310:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017316:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001731e:	74 0c                	je     c001732c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017320:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017328:	75 0e                	jne    c0017338 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001732a:	66 90                	xchg   ax,ax
c001732c:	b8 04 00 00 00       	mov    eax,0x4
c0017331:	e9 0a 01 00 00       	jmp    c0017440 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017336:	66 90                	xchg   ax,ax
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017342:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017346:	50                   	push   eax
c0017347:	e8 d4 92 fe ff       	call   c0000620 <strcpy>
c001734c:	83 c4 10             	add    esp,0x10
c001734f:	83 ec 08             	sub    esp,0x8
c0017352:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017356:	50                   	push   eax
c0017357:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001735e:	e8 71 ff ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001736e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017375:	83 e0 01             	and    eax,0x1
c0017378:	74 0a                	je     c0017384 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001737a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017382:	66 90                	xchg   ax,ax
c0017384:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001738b:	83 e0 04             	and    eax,0x4
c001738e:	74 10                	je     c00173a0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017390:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017398:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00173a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173a7:	83 e0 02             	and    eax,0x2
c00173aa:	74 08                	je     c00173b4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00173ac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00173b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173bb:	83 e0 08             	and    eax,0x8
c00173be:	74 08                	je     c00173c8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00173c0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00173c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173cf:	83 e0 10             	and    eax,0x10
c00173d2:	74 08                	je     c00173dc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00173d4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	68 28 02 00 00       	push   0x228
c00173e4:	e8 70 0a ff ff       	call   c0007e59 <malloc>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	89 c2                	mov    edx,eax
c00173ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173f5:	89 10                	mov    DWORD PTR [eax],edx
c00173f7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173fe:	31 d2                	xor    edx,edx
c0017400:	88 c2                	mov    dl,al
c0017402:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017409:	8b 00                	mov    eax,DWORD PTR [eax]
c001740b:	83 ec 04             	sub    esp,0x4
c001740e:	52                   	push   edx
c001740f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017413:	52                   	push   edx
c0017414:	50                   	push   eax
c0017415:	e8 23 c7 fe ff       	call   c0003b3d <f_open>
c001741a:	83 c4 10             	add    esp,0x10
c001741d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017424:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001742c:	74 0a                	je     c0017438 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001742e:	b8 01 00 00 00       	mov    eax,0x1
c0017433:	eb 0b                	jmp    c0017440 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017435:	8d 76 00             	lea    esi,[esi+0x0]
c0017438:	b8 00 00 00 00       	mov    eax,0x0
c001743d:	8d 76 00             	lea    esi,[esi+0x0]
c0017440:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017446:	c3                   	ret    
c0017447:	90                   	nop

c0017448 <FAT::openDir(char const*, void**)>:
c0017448:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001744e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017456:	74 0c                	je     c0017464 <FAT::openDir(char const*, void**)+0x1c>
c0017458:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017460:	75 0e                	jne    c0017470 <FAT::openDir(char const*, void**)+0x28>
c0017462:	66 90                	xchg   ax,ax
c0017464:	b8 04 00 00 00       	mov    eax,0x4
c0017469:	e9 82 00 00 00       	jmp    c00174f0 <FAT::openDir(char const*, void**)+0xa8>
c001746e:	66 90                	xchg   ax,ax
c0017470:	83 ec 08             	sub    esp,0x8
c0017473:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001747a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001747e:	50                   	push   eax
c001747f:	e8 9c 91 fe ff       	call   c0000620 <strcpy>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	83 ec 08             	sub    esp,0x8
c001748a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001748e:	50                   	push   eax
c001748f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017496:	e8 39 fe ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	83 ec 0c             	sub    esp,0xc
c00174a1:	6a 30                	push   0x30
c00174a3:	e8 b1 09 ff ff       	call   c0007e59 <malloc>
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	89 c2                	mov    edx,eax
c00174ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00174b4:	89 10                	mov    DWORD PTR [eax],edx
c00174b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00174bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00174bf:	83 ec 08             	sub    esp,0x8
c00174c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00174c6:	52                   	push   edx
c00174c7:	50                   	push   eax
c00174c8:	e8 f9 cf fe ff       	call   c00044c6 <f_opendir>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174d7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174df:	74 07                	je     c00174e8 <FAT::openDir(char const*, void**)+0xa0>
c00174e1:	b8 01 00 00 00       	mov    eax,0x1
c00174e6:	eb 08                	jmp    c00174f0 <FAT::openDir(char const*, void**)+0xa8>
c00174e8:	b8 00 00 00 00       	mov    eax,0x0
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174f6:	c3                   	ret    
c00174f7:	90                   	nop

c00174f8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174fe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017506:	75 0c                	jne    c0017514 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017508:	b8 04 00 00 00       	mov    eax,0x4
c001750d:	e9 d6 00 00 00       	jmp    c00175e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017512:	66 90                	xchg   ax,ax
c0017514:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001751c:	75 0a                	jne    c0017528 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001751e:	b8 04 00 00 00       	mov    eax,0x4
c0017523:	e9 c0 00 00 00       	jmp    c00175e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017528:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017530:	75 0a                	jne    c001753c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017532:	b8 04 00 00 00       	mov    eax,0x4
c0017537:	e9 ac 00 00 00       	jmp    c00175e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001753c:	83 ec 08             	sub    esp,0x8
c001753f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017546:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001754d:	50                   	push   eax
c001754e:	e8 cd 90 fe ff       	call   c0000620 <strcpy>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	83 ec 08             	sub    esp,0x8
c0017559:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017560:	50                   	push   eax
c0017561:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017568:	e8 67 fd ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	83 ec 08             	sub    esp,0x8
c0017573:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017577:	50                   	push   eax
c0017578:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001757f:	50                   	push   eax
c0017580:	e8 c0 d0 fe ff       	call   c0004645 <f_stat>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001758f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017596:	85 c0                	test   eax,eax
c0017598:	74 0a                	je     c00175a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001759a:	83 f8 04             	cmp    eax,0x4
c001759d:	74 39                	je     c00175d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001759f:	eb 3f                	jmp    c00175e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00175a1:	8d 76 00             	lea    esi,[esi+0x0]
c00175a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175a8:	25 ff 00 00 00       	and    eax,0xff
c00175ad:	83 e0 10             	and    eax,0x10
c00175b0:	0f 95 c2             	setne  dl
c00175b3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00175ba:	88 10                	mov    BYTE PTR [eax],dl
c00175bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c0:	ba 00 00 00 00       	mov    edx,0x0
c00175c5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00175cc:	89 01                	mov    DWORD PTR [ecx],eax
c00175ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00175d1:	b8 00 00 00 00       	mov    eax,0x0
c00175d6:	eb 10                	jmp    c00175e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175d8:	b8 02 00 00 00       	mov    eax,0x2
c00175dd:	eb 09                	jmp    c00175e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175df:	90                   	nop
c00175e0:	b8 01 00 00 00       	mov    eax,0x1
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175ee:	c3                   	ret    
c00175ef:	90                   	nop

c00175f0 <FAT::unlink(char const*)>:
c00175f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175fe:	75 08                	jne    c0017608 <FAT::unlink(char const*)+0x18>
c0017600:	b8 04 00 00 00       	mov    eax,0x4
c0017605:	eb 61                	jmp    c0017668 <FAT::unlink(char const*)+0x78>
c0017607:	90                   	nop
c0017608:	83 ec 08             	sub    esp,0x8
c001760b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017612:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017616:	50                   	push   eax
c0017617:	e8 04 90 fe ff       	call   c0000620 <strcpy>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	83 ec 08             	sub    esp,0x8
c0017622:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017626:	50                   	push   eax
c0017627:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001762e:	e8 a1 fc ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	8d 44 24 18          	lea    eax,[esp+0x18]
c001763d:	50                   	push   eax
c001763e:	e8 67 d2 fe ff       	call   c00048aa <f_unlink>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001764d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017654:	85 c0                	test   eax,eax
c0017656:	75 08                	jne    c0017660 <FAT::unlink(char const*)+0x70>
c0017658:	b8 00 00 00 00       	mov    eax,0x0
c001765d:	eb 09                	jmp    c0017668 <FAT::unlink(char const*)+0x78>
c001765f:	90                   	nop
c0017660:	b8 01 00 00 00       	mov    eax,0x1
c0017665:	8d 76 00             	lea    esi,[esi+0x0]
c0017668:	81 c4 1c 01 00 00    	add    esp,0x11c
c001766e:	c3                   	ret    
c001766f:	90                   	nop

c0017670 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017670:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017676:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001767d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017684:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017688:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001768c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017694:	75 0a                	jne    c00176a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017696:	b8 04 00 00 00       	mov    eax,0x4
c001769b:	e9 54 01 00 00       	jmp    c00177f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00176a0:	83 ec 08             	sub    esp,0x8
c00176a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00176aa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176ae:	50                   	push   eax
c00176af:	e8 6c 8f fe ff       	call   c0000620 <strcpy>
c00176b4:	83 c4 10             	add    esp,0x10
c00176b7:	83 ec 08             	sub    esp,0x8
c00176ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c00176be:	50                   	push   eax
c00176bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00176c6:	e8 09 fc ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00176d6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176de:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e2:	25 ff 00 00 00       	and    eax,0xff
c00176e7:	83 e0 01             	and    eax,0x1
c00176ea:	74 08                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176ec:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 02             	and    eax,0x2
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017702:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017710:	25 ff 00 00 00       	and    eax,0xff
c0017715:	83 e0 04             	and    eax,0x4
c0017718:	74 0a                	je     c0017724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001771a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017722:	66 90                	xchg   ax,ax
c0017724:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017728:	25 ff 00 00 00       	and    eax,0xff
c001772d:	83 e0 08             	and    eax,0x8
c0017730:	74 0a                	je     c001773c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017732:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001773a:	66 90                	xchg   ax,ax
c001773c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017740:	25 ff 00 00 00       	and    eax,0xff
c0017745:	83 e0 01             	and    eax,0x1
c0017748:	74 0a                	je     c0017754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001774a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017752:	66 90                	xchg   ax,ax
c0017754:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017758:	25 ff 00 00 00       	and    eax,0xff
c001775d:	83 e0 02             	and    eax,0x2
c0017760:	74 0a                	je     c001776c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017762:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001776a:	66 90                	xchg   ax,ax
c001776c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017770:	25 ff 00 00 00       	and    eax,0xff
c0017775:	83 e0 04             	and    eax,0x4
c0017778:	74 0a                	je     c0017784 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001777a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017782:	66 90                	xchg   ax,ax
c0017784:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017788:	25 ff 00 00 00       	and    eax,0xff
c001778d:	83 e0 08             	and    eax,0x8
c0017790:	74 0a                	je     c001779c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017792:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001779a:	66 90                	xchg   ax,ax
c001779c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00177a3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00177aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00177b1:	31 d2                	xor    edx,edx
c00177b3:	88 c2                	mov    dl,al
c00177b5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00177bc:	25 ff 00 00 00       	and    eax,0xff
c00177c1:	83 ec 04             	sub    esp,0x4
c00177c4:	52                   	push   edx
c00177c5:	50                   	push   eax
c00177c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177ca:	50                   	push   eax
c00177cb:	e8 4d d5 fe ff       	call   c0004d1d <f_chmod>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177da:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177e1:	85 c0                	test   eax,eax
c00177e3:	75 07                	jne    c00177ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177e5:	b8 00 00 00 00       	mov    eax,0x0
c00177ea:	eb 08                	jmp    c00177f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177ec:	b8 01 00 00 00       	mov    eax,0x1
c00177f1:	8d 76 00             	lea    esi,[esi+0x0]
c00177f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177fa:	c3                   	ret    
c00177fb:	90                   	nop

c00177fc <FAT::rename(char const*, char const*)>:
c00177fc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017802:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001780a:	74 0c                	je     c0017818 <FAT::rename(char const*, char const*)+0x1c>
c001780c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017814:	75 0e                	jne    c0017824 <FAT::rename(char const*, char const*)+0x28>
c0017816:	66 90                	xchg   ax,ax
c0017818:	b8 04 00 00 00       	mov    eax,0x4
c001781d:	e9 9e 00 00 00       	jmp    c00178c0 <FAT::rename(char const*, char const*)+0xc4>
c0017822:	66 90                	xchg   ax,ax
c0017824:	83 ec 08             	sub    esp,0x8
c0017827:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001782e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017835:	50                   	push   eax
c0017836:	e8 e5 8d fe ff       	call   c0000620 <strcpy>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	83 ec 08             	sub    esp,0x8
c0017841:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017848:	50                   	push   eax
c0017849:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017850:	e8 7f fa ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	83 ec 08             	sub    esp,0x8
c001785b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017862:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017866:	50                   	push   eax
c0017867:	e8 b4 8d fe ff       	call   c0000620 <strcpy>
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	83 ec 08             	sub    esp,0x8
c0017872:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017876:	50                   	push   eax
c0017877:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001787e:	e8 51 fa ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	83 ec 08             	sub    esp,0x8
c0017889:	8d 44 24 14          	lea    eax,[esp+0x14]
c001788d:	50                   	push   eax
c001788e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017895:	50                   	push   eax
c0017896:	e8 cc d2 fe ff       	call   c0004b67 <f_rename>
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00178a5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00178ac:	85 c0                	test   eax,eax
c00178ae:	75 08                	jne    c00178b8 <FAT::rename(char const*, char const*)+0xbc>
c00178b0:	b8 00 00 00 00       	mov    eax,0x0
c00178b5:	eb 09                	jmp    c00178c0 <FAT::rename(char const*, char const*)+0xc4>
c00178b7:	90                   	nop
c00178b8:	b8 01 00 00 00       	mov    eax,0x1
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <FAT::mkdir(char const*)>:
c00178c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00178ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00178d6:	75 08                	jne    c00178e0 <FAT::mkdir(char const*)+0x18>
c00178d8:	b8 04 00 00 00       	mov    eax,0x4
c00178dd:	eb 61                	jmp    c0017940 <FAT::mkdir(char const*)+0x78>
c00178df:	90                   	nop
c00178e0:	83 ec 08             	sub    esp,0x8
c00178e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178ee:	50                   	push   eax
c00178ef:	e8 2c 8d fe ff       	call   c0000620 <strcpy>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	83 ec 08             	sub    esp,0x8
c00178fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178fe:	50                   	push   eax
c00178ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017906:	e8 c9 f9 ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	83 ec 0c             	sub    esp,0xc
c0017911:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017915:	50                   	push   eax
c0017916:	e8 b1 d0 fe ff       	call   c00049cc <f_mkdir>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017925:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001792c:	85 c0                	test   eax,eax
c001792e:	75 08                	jne    c0017938 <FAT::mkdir(char const*)+0x70>
c0017930:	b8 00 00 00 00       	mov    eax,0x0
c0017935:	eb 09                	jmp    c0017940 <FAT::mkdir(char const*)+0x78>
c0017937:	90                   	nop
c0017938:	b8 01 00 00 00       	mov    eax,0x1
c001793d:	8d 76 00             	lea    esi,[esi+0x0]
c0017940:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017946:	c3                   	ret    
c0017947:	90                   	nop

c0017948 <FAT::exists(char const*)>:
c0017948:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001794e:	83 ec 08             	sub    esp,0x8
c0017951:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017958:	8d 44 24 10          	lea    eax,[esp+0x10]
c001795c:	50                   	push   eax
c001795d:	e8 be 8c fe ff       	call   c0000620 <strcpy>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	83 ec 08             	sub    esp,0x8
c0017968:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001796c:	50                   	push   eax
c001796d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017974:	e8 5b f9 ff ff       	call   c00172d4 <FAT::fixFilepath(char*)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017986:	50                   	push   eax
c0017987:	8d 44 24 10          	lea    eax,[esp+0x10]
c001798b:	50                   	push   eax
c001798c:	e8 b4 cc fe ff       	call   c0004645 <f_stat>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001799b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00179a2:	85 c0                	test   eax,eax
c00179a4:	75 06                	jne    c00179ac <FAT::exists(char const*)+0x64>
c00179a6:	b0 01                	mov    al,0x1
c00179a8:	eb 06                	jmp    c00179b0 <FAT::exists(char const*)+0x68>
c00179aa:	66 90                	xchg   ax,ax
c00179ac:	b0 00                	mov    al,0x0
c00179ae:	66 90                	xchg   ax,ax
c00179b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00179b6:	c3                   	ret    
c00179b7:	90                   	nop

c00179b8 <isoReadDiscSectorHelper>:
c00179b8:	83 ec 2c             	sub    esp,0x2c
c00179bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179c3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00179c8:	83 e8 41             	sub    eax,0x41
c00179cb:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00179d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d6:	ba 00 00 00 00       	mov    edx,0x0
c00179db:	83 ec 0c             	sub    esp,0xc
c00179de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179e6:	52                   	push   edx
c00179e7:	50                   	push   eax
c00179e8:	51                   	push   ecx
c00179e9:	e8 e2 58 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c00179ee:	83 c4 20             	add    esp,0x20
c00179f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179fa:	74 0c                	je     c0017a08 <isoReadDiscSectorHelper+0x50>
c00179fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a00:	c1 e0 0b             	shl    eax,0xb
c0017a03:	eb 0b                	jmp    c0017a10 <isoReadDiscSectorHelper+0x58>
c0017a05:	8d 76 00             	lea    esi,[esi+0x0]
c0017a08:	b8 00 00 00 00       	mov    eax,0x0
c0017a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017a10:	83 c4 2c             	add    esp,0x2c
c0017a13:	c3                   	ret    

c0017a14 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017a14:	b8 08 00 00 00       	mov    eax,0x8
c0017a19:	c3                   	ret    

c0017a1a <ISO9660::getName()>:
c0017a1a:	b8 10 f0 01 c0       	mov    eax,0xc001f010
c0017a1f:	c3                   	ret    

c0017a20 <ISO9660::closeDir(void*)>:
c0017a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a26:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a29:	90                   	nop

c0017a2a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a2a:	b8 01 00 00 00       	mov    eax,0x1
c0017a2f:	c3                   	ret    

c0017a30 <ISO9660::unlink(char const*)>:
c0017a30:	b8 01 00 00 00       	mov    eax,0x1
c0017a35:	c3                   	ret    

c0017a36 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a36:	b8 03 00 00 00       	mov    eax,0x3
c0017a3b:	c3                   	ret    

c0017a3c <ISO9660::rename(char const*, char const*)>:
c0017a3c:	b8 01 00 00 00       	mov    eax,0x1
c0017a41:	c3                   	ret    

c0017a42 <ISO9660::mkdir(char const*)>:
c0017a42:	b8 01 00 00 00       	mov    eax,0x1
c0017a47:	c3                   	ret    

c0017a48 <ISO9660::~ISO9660()>:
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	ba 90 f0 01 c0       	mov    edx,0xc001f090
c0017a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a54:	89 10                	mov    DWORD PTR [eax],edx
c0017a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5a:	83 ec 0c             	sub    esp,0xc
c0017a5d:	50                   	push   eax
c0017a5e:	e8 cb 34 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	90                   	nop
c0017a67:	83 c4 0c             	add    esp,0xc
c0017a6a:	c3                   	ret    
c0017a6b:	90                   	nop

c0017a6c <ISO9660::~ISO9660()>:
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	83 ec 0c             	sub    esp,0xc
c0017a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a76:	e8 cd ff ff ff       	call   c0017a48 <ISO9660::~ISO9660()>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	83 ec 08             	sub    esp,0x8
c0017a81:	6a 08                	push   0x8
c0017a83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a87:	e8 66 30 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	83 c4 0c             	add    esp,0xc
c0017a92:	c3                   	ret    
c0017a93:	90                   	nop

c0017a94 <ISO9660::exists(char const*)>:
c0017a94:	83 ec 18             	sub    esp,0x18
c0017a97:	68 2b f0 01 c0       	push   0xc001f02b
c0017a9c:	e8 ad dd ff ff       	call   c001584e <HalPanic(char const*)>
c0017aa1:	31 c0                	xor    eax,eax
c0017aa3:	83 c4 1c             	add    esp,0x1c
c0017aa6:	c3                   	ret    
c0017aa7:	90                   	nop

c0017aa8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017aa8:	56                   	push   esi
c0017aa9:	53                   	push   ebx
c0017aaa:	53                   	push   ebx
c0017aab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017aaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ab3:	85 db                	test   ebx,ebx
c0017ab5:	74 72                	je     c0017b29 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017ab7:	85 f6                	test   esi,esi
c0017ab9:	74 6e                	je     c0017b29 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017abb:	ba 03 00 00 00       	mov    edx,0x3
c0017ac0:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017ac5:	75 67                	jne    c0017b2e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ac7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017aca:	3a 05 60 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024060
c0017ad0:	74 34                	je     c0017b06 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017ad2:	83 ec 0c             	sub    esp,0xc
c0017ad5:	50                   	push   eax
c0017ad6:	e8 b7 f1 fe ff       	call   c0006c92 <init_percd>
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	ba 0b 00 00 00       	mov    edx,0xb
c0017ae3:	40                   	inc    eax
c0017ae4:	74 48                	je     c0017b2e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ae6:	80 3d 60 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024060,0x0
c0017aed:	74 10                	je     c0017aff <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017aef:	83 ec 0c             	sub    esp,0xc
c0017af2:	68 49 f0 01 c0       	push   0xc001f049
c0017af7:	e8 52 dd ff ff       	call   c001584e <HalPanic(char const*)>
c0017afc:	83 c4 10             	add    esp,0x10
c0017aff:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b01:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0017b06:	83 c3 03             	add    ebx,0x3
c0017b09:	51                   	push   ecx
c0017b0a:	51                   	push   ecx
c0017b0b:	6a 00                	push   0x0
c0017b0d:	53                   	push   ebx
c0017b0e:	e8 ef e9 fe ff       	call   c0006502 <iso_open>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	ba 01 00 00 00       	mov    edx,0x1
c0017b1b:	83 f8 ff             	cmp    eax,0xffffffff
c0017b1e:	74 0e                	je     c0017b2e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b20:	83 c0 64             	add    eax,0x64
c0017b23:	31 d2                	xor    edx,edx
c0017b25:	89 06                	mov    DWORD PTR [esi],eax
c0017b27:	eb 05                	jmp    c0017b2e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b29:	ba 04 00 00 00       	mov    edx,0x4
c0017b2e:	89 d0                	mov    eax,edx
c0017b30:	5a                   	pop    edx
c0017b31:	5b                   	pop    ebx
c0017b32:	5e                   	pop    esi
c0017b33:	c3                   	ret    

c0017b34 <ISO9660::openDir(char const*, void**)>:
c0017b34:	56                   	push   esi
c0017b35:	53                   	push   ebx
c0017b36:	53                   	push   ebx
c0017b37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b3f:	85 db                	test   ebx,ebx
c0017b41:	74 66                	je     c0017ba9 <ISO9660::openDir(char const*, void**)+0x75>
c0017b43:	85 f6                	test   esi,esi
c0017b45:	74 62                	je     c0017ba9 <ISO9660::openDir(char const*, void**)+0x75>
c0017b47:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b4a:	3a 05 60 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024060
c0017b50:	74 34                	je     c0017b86 <ISO9660::openDir(char const*, void**)+0x52>
c0017b52:	83 ec 0c             	sub    esp,0xc
c0017b55:	50                   	push   eax
c0017b56:	e8 37 f1 fe ff       	call   c0006c92 <init_percd>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	ba 0b 00 00 00       	mov    edx,0xb
c0017b63:	40                   	inc    eax
c0017b64:	74 48                	je     c0017bae <ISO9660::openDir(char const*, void**)+0x7a>
c0017b66:	80 3d 60 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024060,0x0
c0017b6d:	74 10                	je     c0017b7f <ISO9660::openDir(char const*, void**)+0x4b>
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	68 49 f0 01 c0       	push   0xc001f049
c0017b77:	e8 d2 dc ff ff       	call   c001584e <HalPanic(char const*)>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b81:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0017b86:	83 c3 03             	add    ebx,0x3
c0017b89:	51                   	push   ecx
c0017b8a:	51                   	push   ecx
c0017b8b:	6a 01                	push   0x1
c0017b8d:	53                   	push   ebx
c0017b8e:	e8 6f e9 fe ff       	call   c0006502 <iso_open>
c0017b93:	83 c4 10             	add    esp,0x10
c0017b96:	ba 01 00 00 00       	mov    edx,0x1
c0017b9b:	83 f8 ff             	cmp    eax,0xffffffff
c0017b9e:	74 0e                	je     c0017bae <ISO9660::openDir(char const*, void**)+0x7a>
c0017ba0:	83 c0 64             	add    eax,0x64
c0017ba3:	31 d2                	xor    edx,edx
c0017ba5:	89 06                	mov    DWORD PTR [esi],eax
c0017ba7:	eb 05                	jmp    c0017bae <ISO9660::openDir(char const*, void**)+0x7a>
c0017ba9:	ba 04 00 00 00       	mov    edx,0x4
c0017bae:	89 d0                	mov    eax,edx
c0017bb0:	5a                   	pop    edx
c0017bb1:	5b                   	pop    ebx
c0017bb2:	5e                   	pop    esi
c0017bb3:	c3                   	ret    

c0017bb4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bb4:	53                   	push   ebx
c0017bb5:	83 ec 08             	sub    esp,0x8
c0017bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bc0:	85 c0                	test   eax,eax
c0017bc2:	74 25                	je     c0017be9 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bc4:	85 db                	test   ebx,ebx
c0017bc6:	74 21                	je     c0017be9 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bc8:	83 e8 64             	sub    eax,0x64
c0017bcb:	52                   	push   edx
c0017bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bd4:	50                   	push   eax
c0017bd5:	e8 28 ea fe ff       	call   c0006602 <iso_read>
c0017bda:	83 c4 10             	add    esp,0x10
c0017bdd:	89 03                	mov    DWORD PTR [ebx],eax
c0017bdf:	09 d0                	or     eax,edx
c0017be1:	0f 94 c0             	sete   al
c0017be4:	0f b6 c0             	movzx  eax,al
c0017be7:	eb 05                	jmp    c0017bee <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017be9:	b8 04 00 00 00       	mov    eax,0x4
c0017bee:	83 c4 08             	add    esp,0x8
c0017bf1:	5b                   	pop    ebx
c0017bf2:	c3                   	ret    
c0017bf3:	90                   	nop

c0017bf4 <ISO9660::seek(void*, unsigned long long)>:
c0017bf4:	57                   	push   edi
c0017bf5:	56                   	push   esi
c0017bf6:	b8 04 00 00 00       	mov    eax,0x4
c0017bfb:	51                   	push   ecx
c0017bfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c00:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c04:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c08:	85 d2                	test   edx,edx
c0017c0a:	74 1c                	je     c0017c28 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c0c:	6a 00                	push   0x0
c0017c0e:	83 ea 64             	sub    edx,0x64
c0017c11:	57                   	push   edi
c0017c12:	56                   	push   esi
c0017c13:	52                   	push   edx
c0017c14:	e8 e7 eb fe ff       	call   c0006800 <iso_seek>
c0017c19:	83 c4 10             	add    esp,0x10
c0017c1c:	31 f0                	xor    eax,esi
c0017c1e:	31 fa                	xor    edx,edi
c0017c20:	09 d0                	or     eax,edx
c0017c22:	0f 95 c0             	setne  al
c0017c25:	0f b6 c0             	movzx  eax,al
c0017c28:	5a                   	pop    edx
c0017c29:	5e                   	pop    esi
c0017c2a:	5f                   	pop    edi
c0017c2b:	c3                   	ret    

c0017c2c <ISO9660::tell(void*, unsigned long long*)>:
c0017c2c:	53                   	push   ebx
c0017c2d:	83 ec 08             	sub    esp,0x8
c0017c30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c34:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c38:	85 c0                	test   eax,eax
c0017c3a:	74 1c                	je     c0017c58 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c3c:	85 db                	test   ebx,ebx
c0017c3e:	74 18                	je     c0017c58 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	83 e8 64             	sub    eax,0x64
c0017c46:	50                   	push   eax
c0017c47:	e8 92 ec fe ff       	call   c00068de <iso_tell>
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	89 03                	mov    DWORD PTR [ebx],eax
c0017c51:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c54:	31 c0                	xor    eax,eax
c0017c56:	eb 05                	jmp    c0017c5d <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c58:	b8 04 00 00 00       	mov    eax,0x4
c0017c5d:	83 c4 08             	add    esp,0x8
c0017c60:	5b                   	pop    ebx
c0017c61:	c3                   	ret    

c0017c62 <ISO9660::stat(void*, unsigned long long*)>:
c0017c62:	53                   	push   ebx
c0017c63:	83 ec 08             	sub    esp,0x8
c0017c66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c6e:	85 c0                	test   eax,eax
c0017c70:	74 20                	je     c0017c92 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c72:	85 db                	test   ebx,ebx
c0017c74:	74 1c                	je     c0017c92 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	83 e8 64             	sub    eax,0x64
c0017c7c:	50                   	push   eax
c0017c7d:	e8 b9 ec fe ff       	call   c000693b <iso_total>
c0017c82:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c89:	89 03                	mov    DWORD PTR [ebx],eax
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	31 c0                	xor    eax,eax
c0017c90:	eb 05                	jmp    c0017c97 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c92:	b8 04 00 00 00       	mov    eax,0x4
c0017c97:	83 c4 08             	add    esp,0x8
c0017c9a:	5b                   	pop    ebx
c0017c9b:	c3                   	ret    

c0017c9c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c9c:	55                   	push   ebp
c0017c9d:	57                   	push   edi
c0017c9e:	56                   	push   esi
c0017c9f:	53                   	push   ebx
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017ca7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017cab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017caf:	85 ff                	test   edi,edi
c0017cb1:	0f 94 c2             	sete   dl
c0017cb4:	85 f6                	test   esi,esi
c0017cb6:	0f 94 c0             	sete   al
c0017cb9:	08 c2                	or     dl,al
c0017cbb:	0f 85 b7 00 00 00    	jne    c0017d78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017cc1:	85 db                	test   ebx,ebx
c0017cc3:	0f 84 af 00 00 00    	je     c0017d78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017cc9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017ccc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017cd2:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cd9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017cdc:	3a 05 60 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024060
c0017ce2:	74 38                	je     c0017d1c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	50                   	push   eax
c0017ce8:	e8 a5 ef fe ff       	call   c0006c92 <init_percd>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	ba 0b 00 00 00       	mov    edx,0xb
c0017cf5:	40                   	inc    eax
c0017cf6:	0f 84 81 00 00 00    	je     c0017d7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cfc:	80 3d 60 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024060,0x0
c0017d03:	74 10                	je     c0017d15 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	68 49 f0 01 c0       	push   0xc001f049
c0017d0d:	e8 3c db ff ff       	call   c001584e <HalPanic(char const*)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	8a 03                	mov    al,BYTE PTR [ebx]
c0017d17:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0017d1c:	83 c3 03             	add    ebx,0x3
c0017d1f:	55                   	push   ebp
c0017d20:	55                   	push   ebp
c0017d21:	6a 00                	push   0x0
c0017d23:	53                   	push   ebx
c0017d24:	e8 d9 e7 fe ff       	call   c0006502 <iso_open>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	89 c5                	mov    ebp,eax
c0017d2e:	83 f8 ff             	cmp    eax,0xffffffff
c0017d31:	75 0f                	jne    c0017d42 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017d33:	56                   	push   esi
c0017d34:	56                   	push   esi
c0017d35:	6a 01                	push   0x1
c0017d37:	53                   	push   ebx
c0017d38:	e8 c5 e7 fe ff       	call   c0006502 <iso_open>
c0017d3d:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d40:	eb 2f                	jmp    c0017d71 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017d42:	83 ec 0c             	sub    esp,0xc
c0017d45:	50                   	push   eax
c0017d46:	e8 f0 eb fe ff       	call   c000693b <iso_total>
c0017d4b:	5a                   	pop    edx
c0017d4c:	59                   	pop    ecx
c0017d4d:	50                   	push   eax
c0017d4e:	68 59 f0 01 c0       	push   0xc001f059
c0017d53:	e8 90 2e ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017d58:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d5b:	e8 db eb fe ff       	call   c000693b <iso_total>
c0017d60:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d67:	89 06                	mov    DWORD PTR [esi],eax
c0017d69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d6c:	e8 71 e8 fe ff       	call   c00065e2 <iso_close>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	31 d2                	xor    edx,edx
c0017d76:	eb 05                	jmp    c0017d7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d78:	ba 04 00 00 00       	mov    edx,0x4
c0017d7d:	83 c4 0c             	add    esp,0xc
c0017d80:	89 d0                	mov    eax,edx
c0017d82:	5b                   	pop    ebx
c0017d83:	5e                   	pop    esi
c0017d84:	5f                   	pop    edi
c0017d85:	5d                   	pop    ebp
c0017d86:	c3                   	ret    
c0017d87:	90                   	nop

c0017d88 <ISO9660::close(void*)>:
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	b8 04 00 00 00       	mov    eax,0x4
c0017d90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d94:	85 d2                	test   edx,edx
c0017d96:	74 11                	je     c0017da9 <ISO9660::close(void*)+0x21>
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	83 ea 64             	sub    edx,0x64
c0017d9e:	52                   	push   edx
c0017d9f:	e8 3e e8 fe ff       	call   c00065e2 <iso_close>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	31 c0                	xor    eax,eax
c0017da9:	83 c4 0c             	add    esp,0xc
c0017dac:	c3                   	ret    
c0017dad:	90                   	nop

c0017dae <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017dae:	55                   	push   ebp
c0017daf:	57                   	push   edi
c0017db0:	56                   	push   esi
c0017db1:	53                   	push   ebx
c0017db2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017db8:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017dbf:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017dc6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017dcd:	85 c0                	test   eax,eax
c0017dcf:	0f 84 96 00 00 00    	je     c0017e6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dd5:	85 db                	test   ebx,ebx
c0017dd7:	0f 84 8e 00 00 00    	je     c0017e6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ddd:	83 ec 0c             	sub    esp,0xc
c0017de0:	83 e8 64             	sub    eax,0x64
c0017de3:	50                   	push   eax
c0017de4:	e8 cf eb fe ff       	call   c00069b8 <iso_readdir>
c0017de9:	83 c4 10             	add    esp,0x10
c0017dec:	89 c6                	mov    esi,eax
c0017dee:	85 c0                	test   eax,eax
c0017df0:	75 18                	jne    c0017e0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017df2:	52                   	push   edx
c0017df3:	68 10 01 00 00       	push   0x110
c0017df8:	6a 00                	push   0x0
c0017dfa:	57                   	push   edi
c0017dfb:	e8 f0 86 fe ff       	call   c00004f0 <memset>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	b8 01 00 00 00       	mov    eax,0x1
c0017e08:	eb 66                	jmp    c0017e70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e0a:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e10:	8d 68 08             	lea    ebp,[eax+0x8]
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	55                   	push   ebp
c0017e17:	e8 44 87 fe ff       	call   c0000560 <strlen>
c0017e1c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e2f:	75 0a                	jne    c0017e3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e31:	b8 02 00 00 00       	mov    eax,0x2
c0017e36:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e39:	74 05                	je     c0017e40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e3b:	b8 01 00 00 00       	mov    eax,0x1
c0017e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e44:	50                   	push   eax
c0017e45:	50                   	push   eax
c0017e46:	55                   	push   ebp
c0017e47:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e4b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e4f:	50                   	push   eax
c0017e50:	e8 cb 87 fe ff       	call   c0000620 <strcpy>
c0017e55:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e5e:	31 c0                	xor    eax,eax
c0017e60:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e66:	83 c4 10             	add    esp,0x10
c0017e69:	eb 05                	jmp    c0017e70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e6b:	b8 04 00 00 00       	mov    eax,0x4
c0017e70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e76:	5b                   	pop    ebx
c0017e77:	5e                   	pop    esi
c0017e78:	5f                   	pop    edi
c0017e79:	5d                   	pop    ebp
c0017e7a:	c3                   	ret    

c0017e7b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e7b:	57                   	push   edi
c0017e7c:	56                   	push   esi
c0017e7d:	53                   	push   ebx
c0017e7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e82:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e8a:	39 35 64 40 02 c0    	cmp    DWORD PTR ds:0xc0024064,esi
c0017e90:	75 08                	jne    c0017e9a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e92:	38 1d b4 f9 01 c0    	cmp    BYTE PTR ds:0xc001f9b4,bl
c0017e98:	74 59                	je     c0017ef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e9a:	83 ec 0c             	sub    esp,0xc
c0017e9d:	31 d2                	xor    edx,edx
c0017e9f:	68 80 40 02 c0       	push   0xc0024080
c0017ea4:	0f be c3             	movsx  eax,bl
c0017ea7:	6a 01                	push   0x1
c0017ea9:	52                   	push   edx
c0017eaa:	56                   	push   esi
c0017eab:	ff 34 85 3c 2e 02 c0 	push   DWORD PTR [eax*4-0x3ffdd1c4]
c0017eb2:	e8 19 54 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017eb7:	83 c4 20             	add    esp,0x20
c0017eba:	85 c0                	test   eax,eax
c0017ebc:	75 0e                	jne    c0017ecc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017ebe:	89 35 64 40 02 c0    	mov    DWORD PTR ds:0xc0024064,esi
c0017ec4:	88 1d b4 f9 01 c0    	mov    BYTE PTR ds:0xc001f9b4,bl
c0017eca:	eb 27                	jmp    c0017ef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017ecc:	83 ec 0c             	sub    esp,0xc
c0017ecf:	68 6b f0 01 c0       	push   0xc001f06b
c0017ed4:	e8 0f 2d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017ed9:	83 c4 0c             	add    esp,0xc
c0017edc:	68 00 08 00 00       	push   0x800
c0017ee1:	6a 00                	push   0x0
c0017ee3:	57                   	push   edi
c0017ee4:	e8 07 86 fe ff       	call   c00004f0 <memset>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	b8 01 00 00 00       	mov    eax,0x1
c0017ef1:	eb 0e                	jmp    c0017f01 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017ef3:	be 80 40 02 c0       	mov    esi,0xc0024080
c0017ef8:	b9 00 08 00 00       	mov    ecx,0x800
c0017efd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017eff:	31 c0                	xor    eax,eax
c0017f01:	5b                   	pop    ebx
c0017f02:	5e                   	pop    esi
c0017f03:	5f                   	pop    edi
c0017f04:	c3                   	ret    
c0017f05:	90                   	nop

c0017f06 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017f06:	53                   	push   ebx
c0017f07:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017f0d:	c7 05 64 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024064,0xdeadbeef
c0017f17:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f1e:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f21:	0f be db             	movsx  ebx,bl
c0017f24:	53                   	push   ebx
c0017f25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f29:	50                   	push   eax
c0017f2a:	6a 10                	push   0x10
c0017f2c:	e8 4a ff ff ff       	call   c0017e7b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	31 d2                	xor    edx,edx
c0017f36:	85 c0                	test   eax,eax
c0017f38:	75 33                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f3f:	75 2c                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f41:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f46:	75 25                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f48:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f4d:	75 1e                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f4f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f54:	75 17                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f56:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f5b:	75 10                	jne    c0017f6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f5d:	83 ec 0c             	sub    esp,0xc
c0017f60:	53                   	push   ebx
c0017f61:	e8 2c ed fe ff       	call   c0006c92 <init_percd>
c0017f66:	83 c4 10             	add    esp,0x10
c0017f69:	40                   	inc    eax
c0017f6a:	0f 95 c2             	setne  dl
c0017f6d:	88 d0                	mov    al,dl
c0017f6f:	81 c4 08 08 00 00    	add    esp,0x808
c0017f75:	5b                   	pop    ebx
c0017f76:	c3                   	ret    
c0017f77:	90                   	nop

c0017f78 <ISO9660::ISO9660()>:
c0017f78:	83 ec 0c             	sub    esp,0xc
c0017f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f7f:	83 ec 0c             	sub    esp,0xc
c0017f82:	50                   	push   eax
c0017f83:	e8 82 2f ff ff       	call   c000af0a <Filesystem::Filesystem()>
c0017f88:	83 c4 10             	add    esp,0x10
c0017f8b:	ba 90 f0 01 c0       	mov    edx,0xc001f090
c0017f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f94:	89 10                	mov    DWORD PTR [eax],edx
c0017f96:	e8 07 ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017f9b:	90                   	nop
c0017f9c:	83 c4 0c             	add    esp,0xc
c0017f9f:	c3                   	ret    

c0017fa0 <SoundCard::beginPlayback()>:
c0017fa0:	c7 44 24 04 f0 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0f0
c0017fa8:	e9 ca 87 ff ff       	jmp    c0010777 <Krnl::panic(char const*)>
c0017fad:	90                   	nop

c0017fae <SoundCard::stopPlayback()>:
c0017fae:	c7 44 24 04 f0 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0f0
c0017fb6:	e9 bc 87 ff ff       	jmp    c0010777 <Krnl::panic(char const*)>
c0017fbb:	90                   	nop

c0017fbc <SoundCard::SoundCard(char const*)>:
c0017fbc:	83 ec 1c             	sub    esp,0x1c
c0017fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc3:	83 ec 08             	sub    esp,0x8
c0017fc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fca:	50                   	push   eax
c0017fcb:	e8 f0 41 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	ba 3c f1 01 c0       	mov    edx,0xc001f13c
c0017fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdc:	89 10                	mov    DWORD PTR [eax],edx
c0017fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018009:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018017:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018021:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018029:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001802e:	7f 19                	jg     c0018049 <SoundCard::SoundCard(char const*)+0x8d>
c0018030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018034:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018038:	83 c2 54             	add    edx,0x54
c001803b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018043:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018047:	eb e0                	jmp    c0018029 <SoundCard::SoundCard(char const*)+0x6d>
c0018049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001804d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018054:	90                   	nop
c0018055:	83 c4 1c             	add    esp,0x1c
c0018058:	c3                   	ret    
c0018059:	90                   	nop

c001805a <SoundCard::~SoundCard()>:
c001805a:	83 ec 0c             	sub    esp,0xc
c001805d:	ba 3c f1 01 c0       	mov    edx,0xc001f13c
c0018062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018066:	89 10                	mov    DWORD PTR [eax],edx
c0018068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001806c:	83 ec 0c             	sub    esp,0xc
c001806f:	50                   	push   eax
c0018070:	e8 b5 3e ff ff       	call   c000bf2a <Device::~Device()>
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	90                   	nop
c0018079:	83 c4 0c             	add    esp,0xc
c001807c:	c3                   	ret    
c001807d:	90                   	nop

c001807e <SoundCard::~SoundCard()>:
c001807e:	83 ec 0c             	sub    esp,0xc
c0018081:	83 ec 0c             	sub    esp,0xc
c0018084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018088:	e8 cd ff ff ff       	call   c001805a <SoundCard::~SoundCard()>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	83 ec 08             	sub    esp,0x8
c0018093:	68 e8 01 00 00       	push   0x1e8
c0018098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001809c:	e8 51 2a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	83 c4 0c             	add    esp,0xc
c00180a7:	c3                   	ret    

c00180a8 <SoundCard::configureRates(int, int, int)>:
c00180a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180ac:	31 c0                	xor    eax,eax
c00180ae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00180b5:	75 20                	jne    c00180d7 <SoundCard::configureRates(int, int, int)+0x2f>
c00180b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180bb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180d5:	b0 01                	mov    al,0x1
c00180d7:	c3                   	ret    

c00180d8 <SoundCard::getSamples16(int, short*)>:
c00180d8:	55                   	push   ebp
c00180d9:	57                   	push   edi
c00180da:	31 ff                	xor    edi,edi
c00180dc:	56                   	push   esi
c00180dd:	53                   	push   ebx
c00180de:	31 db                	xor    ebx,ebx
c00180e0:	83 ec 10             	sub    esp,0x10
c00180e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180e7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180eb:	8d 04 36             	lea    eax,[esi+esi*1]
c00180ee:	50                   	push   eax
c00180ef:	6a 00                	push   0x0
c00180f1:	55                   	push   ebp
c00180f2:	e8 f9 83 fe ff       	call   c00004f0 <memset>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180fe:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018105:	85 c0                	test   eax,eax
c0018107:	74 1b                	je     c0018124 <SoundCard::getSamples16(int, short*)+0x4c>
c0018109:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001810d:	75 15                	jne    c0018124 <SoundCard::getSamples16(int, short*)+0x4c>
c001810f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018113:	55                   	push   ebp
c0018114:	56                   	push   esi
c0018115:	50                   	push   eax
c0018116:	e8 ed 02 00 00       	call   c0018408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	39 c7                	cmp    edi,eax
c0018120:	7d 02                	jge    c0018124 <SoundCard::getSamples16(int, short*)+0x4c>
c0018122:	89 c7                	mov    edi,eax
c0018124:	43                   	inc    ebx
c0018125:	83 fb 20             	cmp    ebx,0x20
c0018128:	75 d0                	jne    c00180fa <SoundCard::getSamples16(int, short*)+0x22>
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	89 f8                	mov    eax,edi
c001812f:	5b                   	pop    ebx
c0018130:	5e                   	pop    esi
c0018131:	5f                   	pop    edi
c0018132:	5d                   	pop    ebp
c0018133:	c3                   	ret    

c0018134 <SoundCard::getSamples32(int, int*)>:
c0018134:	55                   	push   ebp
c0018135:	57                   	push   edi
c0018136:	31 ff                	xor    edi,edi
c0018138:	56                   	push   esi
c0018139:	31 f6                	xor    esi,esi
c001813b:	53                   	push   ebx
c001813c:	83 ec 10             	sub    esp,0x10
c001813f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018143:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018147:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001814b:	c1 e0 02             	shl    eax,0x2
c001814e:	50                   	push   eax
c001814f:	6a 00                	push   0x0
c0018151:	55                   	push   ebp
c0018152:	e8 99 83 fe ff       	call   c00004f0 <memset>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018161:	85 c0                	test   eax,eax
c0018163:	74 1b                	je     c0018180 <SoundCard::getSamples32(int, int*)+0x4c>
c0018165:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018169:	75 15                	jne    c0018180 <SoundCard::getSamples32(int, int*)+0x4c>
c001816b:	53                   	push   ebx
c001816c:	55                   	push   ebp
c001816d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018171:	50                   	push   eax
c0018172:	e8 55 03 00 00       	call   c00184cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	39 c6                	cmp    esi,eax
c001817c:	7d 02                	jge    c0018180 <SoundCard::getSamples32(int, int*)+0x4c>
c001817e:	89 c6                	mov    esi,eax
c0018180:	47                   	inc    edi
c0018181:	83 ff 20             	cmp    edi,0x20
c0018184:	75 d4                	jne    c001815a <SoundCard::getSamples32(int, int*)+0x26>
c0018186:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001818c:	85 f6                	test   esi,esi
c001818e:	75 0f                	jne    c001819f <SoundCard::getSamples32(int, int*)+0x6b>
c0018190:	84 c0                	test   al,al
c0018192:	74 1b                	je     c00181af <SoundCard::getSamples32(int, int*)+0x7b>
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018199:	53                   	push   ebx
c001819a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001819d:	eb 0d                	jmp    c00181ac <SoundCard::getSamples32(int, int*)+0x78>
c001819f:	84 c0                	test   al,al
c00181a1:	75 0c                	jne    c00181af <SoundCard::getSamples32(int, int*)+0x7b>
c00181a3:	83 ec 0c             	sub    esp,0xc
c00181a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181a8:	53                   	push   ebx
c00181a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	83 c4 0c             	add    esp,0xc
c00181b2:	89 f0                	mov    eax,esi
c00181b4:	5b                   	pop    ebx
c00181b5:	5e                   	pop    esi
c00181b6:	5f                   	pop    edi
c00181b7:	5d                   	pop    ebp
c00181b8:	c3                   	ret    
c00181b9:	90                   	nop

c00181ba <SoundCard::addChannel(SoundPort*)>:
c00181ba:	83 ec 0c             	sub    esp,0xc
c00181bd:	31 c0                	xor    eax,eax
c00181bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181c3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181cb:	74 1b                	je     c00181e8 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181cd:	40                   	inc    eax
c00181ce:	83 f8 20             	cmp    eax,0x20
c00181d1:	75 f0                	jne    c00181c3 <SoundCard::addChannel(SoundPort*)+0x9>
c00181d3:	83 ec 0c             	sub    esp,0xc
c00181d6:	68 15 f1 01 c0       	push   0xc001f115
c00181db:	e8 97 85 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00181e0:	83 c4 10             	add    esp,0x10
c00181e3:	83 c8 ff             	or     eax,0xffffffff
c00181e6:	eb 0b                	jmp    c00181f3 <SoundCard::addChannel(SoundPort*)+0x39>
c00181e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181ec:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181f3:	83 c4 0c             	add    esp,0xc
c00181f6:	c3                   	ret    
c00181f7:	90                   	nop

c00181f8 <SoundCard::removeChannel(int)>:
c00181f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018200:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001820b:	c3                   	ret    

c001820c <SoundPort::SoundPort(int, int, int, int)>:
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018213:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018226:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001822a:	89 10                	mov    DWORD PTR [eax],edx
c001822c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018230:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018234:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001823f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018242:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018247:	75 13                	jne    c001825c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824d:	8b 00                	mov    eax,DWORD PTR [eax]
c001824f:	05 a0 0f 00 00       	add    eax,0xfa0
c0018254:	01 c0                	add    eax,eax
c0018256:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001825a:	66 90                	xchg   ax,ax
c001825c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018260:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018264:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018276:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018279:	c1 e0 02             	shl    eax,0x2
c001827c:	83 ec 0c             	sub    esp,0xc
c001827f:	50                   	push   eax
c0018280:	e8 d4 fb fe ff       	call   c0007e59 <malloc>
c0018285:	83 c4 10             	add    esp,0x10
c0018288:	89 c2                	mov    edx,eax
c001828a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018291:	90                   	nop
c0018292:	83 c4 0c             	add    esp,0xc
c0018295:	c3                   	ret    
c0018296:	66 90                	xchg   ax,ax

c0018298 <SoundPort::~SoundPort()>:
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182a2:	85 c0                	test   eax,eax
c00182a4:	74 1e                	je     c00182c4 <SoundPort::~SoundPort()+0x2c>
c00182a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182ad:	83 ec 0c             	sub    esp,0xc
c00182b0:	50                   	push   eax
c00182b1:	e8 b3 fb fe ff       	call   c0007e69 <free>
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182c4:	90                   	nop
c00182c5:	83 c4 0c             	add    esp,0xc
c00182c8:	c3                   	ret    
c00182c9:	90                   	nop
c00182ca:	66 90                	xchg   ax,ax

c00182cc <SoundPort::unpause()>:
c00182cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182d4:	c3                   	ret    
c00182d5:	90                   	nop
c00182d6:	66 90                	xchg   ax,ax

c00182d8 <SoundPort::pause()>:
c00182d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182dc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182e0:	c3                   	ret    
c00182e1:	90                   	nop
c00182e2:	66 90                	xchg   ax,ax

c00182e4 <SoundPort::getBufferUsed()>:
c00182e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182eb:	c3                   	ret    

c00182ec <SoundPort::getBufferSize()>:
c00182ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182f3:	c3                   	ret    

c00182f4 <SoundPort::buffer16(short*, int)>:
c00182f4:	55                   	push   ebp
c00182f5:	57                   	push   edi
c00182f6:	56                   	push   esi
c00182f7:	53                   	push   ebx
c00182f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182fc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018300:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018303:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018306:	74 68                	je     c0018370 <SoundPort::buffer16(short*, int)+0x7c>
c0018308:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001830c:	85 c9                	test   ecx,ecx
c001830e:	7e 60                	jle    c0018370 <SoundPort::buffer16(short*, int)+0x7c>
c0018310:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018314:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018317:	c1 e1 0f             	shl    ecx,0xf
c001831a:	8d 70 01             	lea    esi,[eax+0x1]
c001831d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018320:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018323:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018326:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018329:	74 4d                	je     c0018378 <SoundPort::buffer16(short*, int)+0x84>
c001832b:	31 f6                	xor    esi,esi
c001832d:	eb 21                	jmp    c0018350 <SoundPort::buffer16(short*, int)+0x5c>
c001832f:	90                   	nop
c0018330:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018335:	8d 79 01             	lea    edi,[ecx+0x1]
c0018338:	c1 e3 0f             	shl    ebx,0xf
c001833b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001833e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018341:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018344:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018347:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001834a:	74 1c                	je     c0018368 <SoundPort::buffer16(short*, int)+0x74>
c001834c:	89 c6                	mov    esi,eax
c001834e:	66 90                	xchg   ax,ax
c0018350:	8d 46 01             	lea    eax,[esi+0x1]
c0018353:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018357:	75 d7                	jne    c0018330 <SoundPort::buffer16(short*, int)+0x3c>
c0018359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001835d:	8d 76 00             	lea    esi,[esi+0x0]
c0018360:	5b                   	pop    ebx
c0018361:	5e                   	pop    esi
c0018362:	5f                   	pop    edi
c0018363:	5d                   	pop    ebp
c0018364:	c3                   	ret    
c0018365:	8d 76 00             	lea    esi,[esi+0x0]
c0018368:	5b                   	pop    ebx
c0018369:	8d 46 02             	lea    eax,[esi+0x2]
c001836c:	5e                   	pop    esi
c001836d:	5f                   	pop    edi
c001836e:	5d                   	pop    ebp
c001836f:	c3                   	ret    
c0018370:	5b                   	pop    ebx
c0018371:	31 c0                	xor    eax,eax
c0018373:	5e                   	pop    esi
c0018374:	5f                   	pop    edi
c0018375:	5d                   	pop    ebp
c0018376:	c3                   	ret    
c0018377:	90                   	nop
c0018378:	b8 01 00 00 00       	mov    eax,0x1
c001837d:	eb e1                	jmp    c0018360 <SoundPort::buffer16(short*, int)+0x6c>
c001837f:	90                   	nop

c0018380 <SoundPort::buffer32(int*, int)>:
c0018380:	55                   	push   ebp
c0018381:	57                   	push   edi
c0018382:	56                   	push   esi
c0018383:	53                   	push   ebx
c0018384:	51                   	push   ecx
c0018385:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018390:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018394:	89 04 24             	mov    DWORD PTR [esp],eax
c0018397:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001839a:	74 5c                	je     c00183f8 <SoundPort::buffer32(int*, int)+0x78>
c001839c:	85 c0                	test   eax,eax
c001839e:	7e 58                	jle    c00183f8 <SoundPort::buffer32(int*, int)+0x78>
c00183a0:	8d 71 01             	lea    esi,[ecx+0x1]
c00183a3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00183a6:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00183a9:	8b 37                	mov    esi,DWORD PTR [edi]
c00183ab:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00183ae:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183b1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b4:	74 4a                	je     c0018400 <SoundPort::buffer32(int*, int)+0x80>
c00183b6:	31 f6                	xor    esi,esi
c00183b8:	eb 1e                	jmp    c00183d8 <SoundPort::buffer32(int*, int)+0x58>
c00183ba:	66 90                	xchg   ax,ax
c00183bc:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183bf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183c2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183c5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183c8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183cc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183cf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183d2:	74 18                	je     c00183ec <SoundPort::buffer32(int*, int)+0x6c>
c00183d4:	89 de                	mov    esi,ebx
c00183d6:	66 90                	xchg   ax,ax
c00183d8:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183db:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183de:	75 dc                	jne    c00183bc <SoundPort::buffer32(int*, int)+0x3c>
c00183e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183e3:	90                   	nop
c00183e4:	5a                   	pop    edx
c00183e5:	5b                   	pop    ebx
c00183e6:	5e                   	pop    esi
c00183e7:	5f                   	pop    edi
c00183e8:	5d                   	pop    ebp
c00183e9:	c3                   	ret    
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	5a                   	pop    edx
c00183ed:	8d 46 02             	lea    eax,[esi+0x2]
c00183f0:	5b                   	pop    ebx
c00183f1:	5e                   	pop    esi
c00183f2:	5f                   	pop    edi
c00183f3:	5d                   	pop    ebp
c00183f4:	c3                   	ret    
c00183f5:	8d 76 00             	lea    esi,[esi+0x0]
c00183f8:	5a                   	pop    edx
c00183f9:	31 c0                	xor    eax,eax
c00183fb:	5b                   	pop    ebx
c00183fc:	5e                   	pop    esi
c00183fd:	5f                   	pop    edi
c00183fe:	5d                   	pop    ebp
c00183ff:	c3                   	ret    
c0018400:	b8 01 00 00 00       	mov    eax,0x1
c0018405:	eb dd                	jmp    c00183e4 <SoundPort::buffer32(int*, int)+0x64>
c0018407:	90                   	nop

c0018408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018408:	57                   	push   edi
c0018409:	56                   	push   esi
c001840a:	53                   	push   ebx
c001840b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001840f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018413:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018419:	39 03                	cmp    DWORD PTR [ebx],eax
c001841b:	74 13                	je     c0018430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001841d:	83 ec 0c             	sub    esp,0xc
c0018420:	68 68 f1 01 c0       	push   0xc001f168
c0018425:	e8 4d 83 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018436:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018439:	74 11                	je     c001844c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001843b:	83 ec 0c             	sub    esp,0xc
c001843e:	68 a7 f1 01 c0       	push   0xc001f1a7
c0018443:	e8 2f 83 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	90                   	nop
c001844c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018452:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018455:	74 11                	je     c0018468 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 a7 f1 01 c0       	push   0xc001f1a7
c001845f:	e8 13 83 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	90                   	nop
c0018468:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001846b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001846f:	7e 07                	jle    c0018478 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018471:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018475:	8d 76 00             	lea    esi,[esi+0x0]
c0018478:	85 f6                	test   esi,esi
c001847a:	7e 2c                	jle    c00184a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001847c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018480:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018483:	31 c9                	xor    ecx,ecx
c0018485:	01 d7                	add    edi,edx
c0018487:	90                   	nop
c0018488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001848b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001848e:	85 c0                	test   eax,eax
c0018490:	79 06                	jns    c0018498 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018492:	05 ff 7f 00 00       	add    eax,0x7fff
c0018497:	90                   	nop
c0018498:	c1 f8 0f             	sar    eax,0xf
c001849b:	83 c1 04             	add    ecx,0x4
c001849e:	66 01 02             	add    WORD PTR [edx],ax
c00184a1:	83 c2 02             	add    edx,0x2
c00184a4:	39 d7                	cmp    edi,edx
c00184a6:	75 e0                	jne    c0018488 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00184a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00184ab:	50                   	push   eax
c00184ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184af:	29 f0                	sub    eax,esi
c00184b1:	c1 e0 02             	shl    eax,0x2
c00184b4:	50                   	push   eax
c00184b5:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184b8:	50                   	push   eax
c00184b9:	52                   	push   edx
c00184ba:	e8 41 7f fe ff       	call   c0000400 <memmove>
c00184bf:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184c2:	83 c4 10             	add    esp,0x10
c00184c5:	89 f0                	mov    eax,esi
c00184c7:	5b                   	pop    ebx
c00184c8:	5e                   	pop    esi
c00184c9:	5f                   	pop    edi
c00184ca:	c3                   	ret    
c00184cb:	90                   	nop

c00184cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184cc:	57                   	push   edi
c00184cd:	56                   	push   esi
c00184ce:	53                   	push   ebx
c00184cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184db:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184e1:	39 06                	cmp    DWORD PTR [esi],eax
c00184e3:	74 13                	je     c00184f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 88 f1 01 c0       	push   0xc001f188
c00184ed:	e8 85 82 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	8d 76 00             	lea    esi,[esi+0x0]
c00184f8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184fe:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018501:	74 11                	je     c0018514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018503:	83 ec 0c             	sub    esp,0xc
c0018506:	68 c3 f1 01 c0       	push   0xc001f1c3
c001850b:	e8 67 82 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	90                   	nop
c0018514:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001851a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001851d:	74 11                	je     c0018530 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001851f:	83 ec 0c             	sub    esp,0xc
c0018522:	68 c3 f1 01 c0       	push   0xc001f1c3
c0018527:	e8 4b 82 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	90                   	nop
c0018530:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018533:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018537:	7e 07                	jle    c0018540 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018539:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001853d:	8d 76 00             	lea    esi,[esi+0x0]
c0018540:	85 ff                	test   edi,edi
c0018542:	7e 1c                	jle    c0018560 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018544:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001854b:	31 c0                	xor    eax,eax
c001854d:	8d 76 00             	lea    esi,[esi+0x0]
c0018550:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018553:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018556:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018559:	83 c0 04             	add    eax,0x4
c001855c:	39 c1                	cmp    ecx,eax
c001855e:	75 f0                	jne    c0018550 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018560:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018563:	50                   	push   eax
c0018564:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018567:	29 f8                	sub    eax,edi
c0018569:	c1 e0 02             	shl    eax,0x2
c001856c:	50                   	push   eax
c001856d:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018570:	50                   	push   eax
c0018571:	52                   	push   edx
c0018572:	e8 89 7e fe ff       	call   c0000400 <memmove>
c0018577:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001857a:	83 c4 10             	add    esp,0x10
c001857d:	89 f8                	mov    eax,edi
c001857f:	5b                   	pop    ebx
c0018580:	5e                   	pop    esi
c0018581:	5f                   	pop    edi
c0018582:	c3                   	ret    
c0018583:	90                   	nop

c0018584 <PCI::open(int, int, void*)>:
c0018584:	83 ec 18             	sub    esp,0x18
c0018587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001858b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001858f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018595:	8b 10                	mov    edx,DWORD PTR [eax]
c0018597:	50                   	push   eax
c0018598:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001859b:	31 c0                	xor    eax,eax
c001859d:	83 c4 1c             	add    esp,0x1c
c00185a0:	c3                   	ret    
c00185a1:	90                   	nop

c00185a2 <PCI::close(int, int, void*)>:
c00185a2:	31 c0                	xor    eax,eax
c00185a4:	c3                   	ret    
c00185a5:	90                   	nop

c00185a6 <PCI::PCI()>:
c00185a6:	83 ec 0c             	sub    esp,0xc
c00185a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ad:	83 ec 08             	sub    esp,0x8
c00185b0:	68 df f1 01 c0       	push   0xc001f1df
c00185b5:	50                   	push   eax
c00185b6:	e8 c1 33 ff ff       	call   c000b97c <Bus::Bus(char const*)>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	ba 88 f2 01 c0       	mov    edx,0xc001f288
c00185c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c7:	89 10                	mov    DWORD PTR [eax],edx
c00185c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185db:	a3 80 48 02 c0       	mov    ds:0xc0024880,eax
c00185e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ea:	31 d2                	xor    edx,edx
c00185ec:	88 c2                	mov    dl,al
c00185ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018603:	31 d2                	xor    edx,edx
c0018605:	88 c2                	mov    dl,al
c0018607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018614:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001861a:	8d 50 01             	lea    edx,[eax+0x1]
c001861d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018621:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018627:	31 d2                	xor    edx,edx
c0018629:	88 c2                	mov    dl,al
c001862b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018633:	83 c9 c0             	or     ecx,0xffffffc0
c0018636:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001863a:	90                   	nop
c001863b:	83 c4 0c             	add    esp,0xc
c001863e:	c3                   	ret    
c001863f:	90                   	nop

c0018640 <PCI::readBAR8(unsigned int, int)>:
c0018640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018648:	f6 c2 01             	test   dl,0x1
c001864b:	74 07                	je     c0018654 <PCI::readBAR8(unsigned int, int)+0x14>
c001864d:	83 e2 fc             	and    edx,0xfffffffc
c0018650:	01 c2                	add    edx,eax
c0018652:	ec                   	in     al,dx
c0018653:	c3                   	ret    
c0018654:	83 e2 f0             	and    edx,0xfffffff0
c0018657:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <PCI::readBAR16(unsigned int, int)>:
c001865c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018664:	f6 c2 01             	test   dl,0x1
c0018667:	74 08                	je     c0018671 <PCI::readBAR16(unsigned int, int)+0x15>
c0018669:	83 e2 fc             	and    edx,0xfffffffc
c001866c:	01 c2                	add    edx,eax
c001866e:	66 ed                	in     ax,dx
c0018670:	c3                   	ret    
c0018671:	83 e2 f0             	and    edx,0xfffffff0
c0018674:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <PCI::readBAR32(unsigned int, int)>:
c001867a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018682:	f6 c2 01             	test   dl,0x1
c0018685:	74 07                	je     c001868e <PCI::readBAR32(unsigned int, int)+0x14>
c0018687:	83 e2 fc             	and    edx,0xfffffffc
c001868a:	01 c2                	add    edx,eax
c001868c:	ed                   	in     eax,dx
c001868d:	c3                   	ret    
c001868e:	83 e2 f0             	and    edx,0xfffffff0
c0018691:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018694:	c3                   	ret    
c0018695:	90                   	nop

c0018696 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018696:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001869a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186a2:	f6 c2 01             	test   dl,0x1
c00186a5:	74 07                	je     c00186ae <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00186a7:	83 e2 fc             	and    edx,0xfffffffc
c00186aa:	01 ca                	add    edx,ecx
c00186ac:	ee                   	out    dx,al
c00186ad:	c3                   	ret    
c00186ae:	83 e2 f0             	and    edx,0xfffffff0
c00186b1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00186b4:	c3                   	ret    
c00186b5:	90                   	nop

c00186b6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00186b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186c2:	f6 c2 01             	test   dl,0x1
c00186c5:	74 08                	je     c00186cf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186c7:	83 e2 fc             	and    edx,0xfffffffc
c00186ca:	01 ca                	add    edx,ecx
c00186cc:	66 ef                	out    dx,ax
c00186ce:	c3                   	ret    
c00186cf:	83 e2 f0             	and    edx,0xfffffff0
c00186d2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186d6:	c3                   	ret    
c00186d7:	90                   	nop

c00186d8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186e4:	f6 c2 01             	test   dl,0x1
c00186e7:	74 07                	je     c00186f0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186e9:	83 e2 fc             	and    edx,0xfffffffc
c00186ec:	01 ca                	add    edx,ecx
c00186ee:	ef                   	out    dx,eax
c00186ef:	c3                   	ret    
c00186f0:	83 e2 f0             	and    edx,0xfffffff0
c00186f3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186f6:	c3                   	ret    
c00186f7:	90                   	nop

c00186f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186f8:	55                   	push   ebp
c00186f9:	57                   	push   edi
c00186fa:	56                   	push   esi
c00186fb:	53                   	push   ebx
c00186fc:	83 ec 0c             	sub    esp,0xc
c00186ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018703:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018707:	89 f0                	mov    eax,esi
c0018709:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001870d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018711:	3c 07                	cmp    al,0x7
c0018713:	76 10                	jbe    c0018725 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018715:	83 ec 0c             	sub    esp,0xc
c0018718:	68 e7 f1 01 c0       	push   0xc001f1e7
c001871d:	e8 55 80 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	80 fb 0f             	cmp    bl,0xf
c0018728:	76 10                	jbe    c001873a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001872a:	83 ec 0c             	sub    esp,0xc
c001872d:	68 17 f2 01 c0       	push   0xc001f217
c0018732:	e8 40 80 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018737:	83 c4 10             	add    esp,0x10
c001873a:	8d 04 36             	lea    eax,[esi+esi*1]
c001873d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018742:	83 c8 f0             	or     eax,0xfffffff0
c0018745:	ee                   	out    dx,al
c0018746:	ba fa 0c 00 00       	mov    edx,0xcfa
c001874b:	89 e8                	mov    eax,ebp
c001874d:	ee                   	out    dx,al
c001874e:	83 c4 0c             	add    esp,0xc
c0018751:	89 d8                	mov    eax,ebx
c0018753:	66 81 e7 fc 00       	and    di,0xfc
c0018758:	5b                   	pop    ebx
c0018759:	c1 e0 08             	shl    eax,0x8
c001875c:	5e                   	pop    esi
c001875d:	09 f8                	or     eax,edi
c001875f:	5f                   	pop    edi
c0018760:	66 0d 00 c0          	or     ax,0xc000
c0018764:	5d                   	pop    ebp
c0018765:	c3                   	ret    

c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018766:	57                   	push   edi
c0018767:	56                   	push   esi
c0018768:	53                   	push   ebx
c0018769:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001876d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018771:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018777:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001877b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001877f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018783:	83 ff 01             	cmp    edi,0x1
c0018786:	75 3e                	jne    c00187c6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018788:	89 de                	mov    esi,ebx
c001878a:	0f b6 c0             	movzx  eax,al
c001878d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018793:	c1 e0 10             	shl    eax,0x10
c0018796:	0f b6 c9             	movzx  ecx,cl
c0018799:	09 f0                	or     eax,esi
c001879b:	c1 e1 08             	shl    ecx,0x8
c001879e:	0f b6 d2             	movzx  edx,dl
c00187a1:	09 c8                	or     eax,ecx
c00187a3:	c1 e2 0b             	shl    edx,0xb
c00187a6:	09 d0                	or     eax,edx
c00187a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00187ad:	0d 00 00 00 80       	or     eax,0x80000000
c00187b2:	ef                   	out    dx,eax
c00187b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187b8:	ed                   	in     eax,dx
c00187b9:	83 e3 02             	and    ebx,0x2
c00187bc:	0f b6 cb             	movzx  ecx,bl
c00187bf:	c1 e1 03             	shl    ecx,0x3
c00187c2:	d3 e8                	shr    eax,cl
c00187c4:	eb 43                	jmp    c0018809 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187c6:	83 ff 02             	cmp    edi,0x2
c00187c9:	75 2c                	jne    c00187f7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187cb:	83 ec 0c             	sub    esp,0xc
c00187ce:	0f b6 c9             	movzx  ecx,cl
c00187d1:	0f b6 d2             	movzx  edx,dl
c00187d4:	0f b6 fb             	movzx  edi,bl
c00187d7:	0f b6 c0             	movzx  eax,al
c00187da:	57                   	push   edi
c00187db:	51                   	push   ecx
c00187dc:	52                   	push   edx
c00187dd:	50                   	push   eax
c00187de:	56                   	push   esi
c00187df:	e8 14 ff ff ff       	call   c00186f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e4:	89 c2                	mov    edx,eax
c00187e6:	ed                   	in     eax,dx
c00187e7:	83 e3 02             	and    ebx,0x2
c00187ea:	83 c4 20             	add    esp,0x20
c00187ed:	0f b6 cb             	movzx  ecx,bl
c00187f0:	c1 e1 03             	shl    ecx,0x3
c00187f3:	d3 e8                	shr    eax,cl
c00187f5:	eb 12                	jmp    c0018809 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187f7:	83 ec 0c             	sub    esp,0xc
c00187fa:	68 47 f2 01 c0       	push   0xc001f247
c00187ff:	e8 73 7f ff ff       	call   c0010777 <Krnl::panic(char const*)>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	31 c0                	xor    eax,eax
c0018809:	5b                   	pop    ebx
c001880a:	5e                   	pop    esi
c001880b:	5f                   	pop    edi
c001880c:	c3                   	ret    
c001880d:	90                   	nop

c001880e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001880e:	83 ec 18             	sub    esp,0x18
c0018811:	6a 00                	push   0x0
c0018813:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018818:	50                   	push   eax
c0018819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881e:	50                   	push   eax
c001881f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018824:	50                   	push   eax
c0018825:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018829:	e8 38 ff ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882e:	83 c4 2c             	add    esp,0x2c
c0018831:	c3                   	ret    

c0018832 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018832:	83 ec 18             	sub    esp,0x18
c0018835:	6a 0e                	push   0xe
c0018837:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883c:	50                   	push   eax
c001883d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018842:	50                   	push   eax
c0018843:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018848:	50                   	push   eax
c0018849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884d:	e8 14 ff ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018852:	83 c4 2c             	add    esp,0x2c
c0018855:	0f b6 c0             	movzx  eax,al
c0018858:	c3                   	ret    
c0018859:	90                   	nop

c001885a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001885a:	55                   	push   ebp
c001885b:	57                   	push   edi
c001885c:	56                   	push   esi
c001885d:	53                   	push   ebx
c001885e:	83 ec 18             	sub    esp,0x18
c0018861:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018866:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001886b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018870:	6a 0a                	push   0xa
c0018872:	56                   	push   esi
c0018873:	55                   	push   ebp
c0018874:	57                   	push   edi
c0018875:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018879:	e8 e8 fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887e:	83 c4 14             	add    esp,0x14
c0018881:	89 c3                	mov    ebx,eax
c0018883:	6a 0a                	push   0xa
c0018885:	0f b6 db             	movzx  ebx,bl
c0018888:	56                   	push   esi
c0018889:	55                   	push   ebp
c001888a:	57                   	push   edi
c001888b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001888f:	e8 d2 fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018894:	83 c4 2c             	add    esp,0x2c
c0018897:	25 00 ff 00 00       	and    eax,0xff00
c001889c:	09 d8                	or     eax,ebx
c001889e:	5b                   	pop    ebx
c001889f:	5e                   	pop    esi
c00188a0:	5f                   	pop    edi
c00188a1:	5d                   	pop    ebp
c00188a2:	c3                   	ret    
c00188a3:	90                   	nop

c00188a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00188a4:	83 ec 18             	sub    esp,0x18
c00188a7:	6a 08                	push   0x8
c00188a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ae:	50                   	push   eax
c00188af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b4:	50                   	push   eax
c00188b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ba:	50                   	push   eax
c00188bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188bf:	e8 a2 fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c4:	83 c4 2c             	add    esp,0x2c
c00188c7:	0f b6 c4             	movzx  eax,ah
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop

c00188cc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188cc:	83 ec 18             	sub    esp,0x18
c00188cf:	6a 08                	push   0x8
c00188d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d6:	50                   	push   eax
c00188d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188dc:	50                   	push   eax
c00188dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e2:	50                   	push   eax
c00188e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188e7:	e8 7a fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ec:	83 c4 2c             	add    esp,0x2c
c00188ef:	c3                   	ret    

c00188f0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188f0:	83 ec 18             	sub    esp,0x18
c00188f3:	6a 3c                	push   0x3c
c00188f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188fa:	50                   	push   eax
c00188fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018900:	50                   	push   eax
c0018901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018906:	50                   	push   eax
c0018907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001890b:	e8 56 fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018910:	83 c4 2c             	add    esp,0x2c
c0018913:	c3                   	ret    

c0018914 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018914:	83 ec 18             	sub    esp,0x18
c0018917:	6a 18                	push   0x18
c0018919:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001891e:	50                   	push   eax
c001891f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018924:	50                   	push   eax
c0018925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001892a:	50                   	push   eax
c001892b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001892f:	e8 32 fe ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018934:	83 c4 2c             	add    esp,0x2c
c0018937:	0f b6 c4             	movzx  eax,ah
c001893a:	c3                   	ret    
c001893b:	90                   	nop

c001893c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001893c:	55                   	push   ebp
c001893d:	57                   	push   edi
c001893e:	56                   	push   esi
c001893f:	53                   	push   ebx
c0018940:	83 ec 28             	sub    esp,0x28
c0018943:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018947:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001894c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018951:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018956:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001895d:	8d 43 12             	lea    eax,[ebx+0x12]
c0018960:	83 c3 10             	add    ebx,0x10
c0018963:	0f b6 c0             	movzx  eax,al
c0018966:	0f b6 db             	movzx  ebx,bl
c0018969:	50                   	push   eax
c001896a:	51                   	push   ecx
c001896b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001896f:	57                   	push   edi
c0018970:	55                   	push   ebp
c0018971:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018975:	e8 ec fd ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001897a:	83 c4 14             	add    esp,0x14
c001897d:	89 c6                	mov    esi,eax
c001897f:	53                   	push   ebx
c0018980:	c1 e6 10             	shl    esi,0x10
c0018983:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018987:	51                   	push   ecx
c0018988:	57                   	push   edi
c0018989:	55                   	push   ebp
c001898a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001898e:	e8 d3 fd ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018993:	83 c4 3c             	add    esp,0x3c
c0018996:	0f b7 c0             	movzx  eax,ax
c0018999:	5b                   	pop    ebx
c001899a:	09 f0                	or     eax,esi
c001899c:	5e                   	pop    esi
c001899d:	5f                   	pop    edi
c001899e:	5d                   	pop    ebp
c001899f:	c3                   	ret    

c00189a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00189a0:	55                   	push   ebp
c00189a1:	57                   	push   edi
c00189a2:	56                   	push   esi
c00189a3:	53                   	push   ebx
c00189a4:	83 ec 0c             	sub    esp,0xc
c00189a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00189ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00189af:	89 f5                	mov    ebp,esi
c00189b1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00189b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189c7:	83 f9 01             	cmp    ecx,0x1
c00189ca:	75 5d                	jne    c0018a29 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189cc:	0f b6 c8             	movzx  ecx,al
c00189cf:	0f b6 d2             	movzx  edx,dl
c00189d2:	c1 e1 10             	shl    ecx,0x10
c00189d5:	c1 e2 0b             	shl    edx,0xb
c00189d8:	89 f0                	mov    eax,esi
c00189da:	25 fc 00 00 00       	and    eax,0xfc
c00189df:	09 c1                	or     ecx,eax
c00189e1:	89 e8                	mov    eax,ebp
c00189e3:	0f b6 c0             	movzx  eax,al
c00189e6:	c1 e0 08             	shl    eax,0x8
c00189e9:	09 c1                	or     ecx,eax
c00189eb:	09 d1                	or     ecx,edx
c00189ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189f2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189f8:	89 c8                	mov    eax,ecx
c00189fa:	ef                   	out    dx,eax
c00189fb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a00:	ed                   	in     eax,dx
c0018a01:	0f b7 db             	movzx  ebx,bx
c0018a04:	83 e6 02             	and    esi,0x2
c0018a07:	74 0a                	je     c0018a13 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018a09:	0f b7 d0             	movzx  edx,ax
c0018a0c:	c1 e3 10             	shl    ebx,0x10
c0018a0f:	09 d3                	or     ebx,edx
c0018a11:	eb 05                	jmp    c0018a18 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018a13:	66 31 c0             	xor    ax,ax
c0018a16:	09 c3                	or     ebx,eax
c0018a18:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a1d:	89 c8                	mov    eax,ecx
c0018a1f:	ef                   	out    dx,eax
c0018a20:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a25:	89 d8                	mov    eax,ebx
c0018a27:	eb 41                	jmp    c0018a6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a29:	83 f9 02             	cmp    ecx,0x2
c0018a2c:	75 45                	jne    c0018a73 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a2e:	83 ec 0c             	sub    esp,0xc
c0018a31:	0f b6 d2             	movzx  edx,dl
c0018a34:	89 f1                	mov    ecx,esi
c0018a36:	0f b6 c0             	movzx  eax,al
c0018a39:	0f b6 f1             	movzx  esi,cl
c0018a3c:	89 e9                	mov    ecx,ebp
c0018a3e:	56                   	push   esi
c0018a3f:	0f b6 c9             	movzx  ecx,cl
c0018a42:	51                   	push   ecx
c0018a43:	52                   	push   edx
c0018a44:	50                   	push   eax
c0018a45:	57                   	push   edi
c0018a46:	e8 ad fc ff ff       	call   c00186f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a4b:	89 c2                	mov    edx,eax
c0018a4d:	ed                   	in     eax,dx
c0018a4e:	83 c4 20             	add    esp,0x20
c0018a51:	0f b7 db             	movzx  ebx,bx
c0018a54:	f6 c2 02             	test   dl,0x2
c0018a57:	74 0c                	je     c0018a65 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a59:	0f b7 c8             	movzx  ecx,ax
c0018a5c:	89 d8                	mov    eax,ebx
c0018a5e:	c1 e0 10             	shl    eax,0x10
c0018a61:	09 c8                	or     eax,ecx
c0018a63:	eb 05                	jmp    c0018a6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a65:	66 31 c0             	xor    ax,ax
c0018a68:	09 d8                	or     eax,ebx
c0018a6a:	ef                   	out    dx,eax
c0018a6b:	83 c4 0c             	add    esp,0xc
c0018a6e:	5b                   	pop    ebx
c0018a6f:	5e                   	pop    esi
c0018a70:	5f                   	pop    edi
c0018a71:	5d                   	pop    ebp
c0018a72:	c3                   	ret    
c0018a73:	c7 44 24 20 47 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f247
c0018a7b:	83 c4 0c             	add    esp,0xc
c0018a7e:	5b                   	pop    ebx
c0018a7f:	5e                   	pop    esi
c0018a80:	5f                   	pop    edi
c0018a81:	5d                   	pop    ebp
c0018a82:	e9 f0 7c ff ff       	jmp    c0010777 <Krnl::panic(char const*)>
c0018a87:	90                   	nop

c0018a88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a88:	55                   	push   ebp
c0018a89:	57                   	push   edi
c0018a8a:	56                   	push   esi
c0018a8b:	53                   	push   ebx
c0018a8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a92:	80 3d 8c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002488c,0x0
c0018a99:	0f 85 84 00 00 00    	jne    c0018b23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a9f:	83 ec 0c             	sub    esp,0xc
c0018aa2:	68 14 01 00 00       	push   0x114
c0018aa7:	e8 ad f3 fe ff       	call   c0007e59 <malloc>
c0018aac:	83 c4 0c             	add    esp,0xc
c0018aaf:	89 c3                	mov    ebx,eax
c0018ab1:	ff 35 d0 3e 02 c0    	push   DWORD PTR ds:0xc0023ed0
c0018ab7:	68 4d f2 01 c0       	push   0xc001f24d
c0018abc:	50                   	push   eax
c0018abd:	e8 9c 26 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0018ac2:	5a                   	pop    edx
c0018ac3:	59                   	pop    ecx
c0018ac4:	6a 01                	push   0x1
c0018ac6:	53                   	push   ebx
c0018ac7:	e8 52 27 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0018acc:	83 c4 0c             	add    esp,0xc
c0018acf:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018ad3:	50                   	push   eax
c0018ad4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ad8:	50                   	push   eax
c0018ad9:	53                   	push   ebx
c0018ada:	e8 eb 29 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0018adf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ae3:	40                   	inc    eax
c0018ae4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ae7:	e8 6d f3 fe ff       	call   c0007e59 <malloc>
c0018aec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018af0:	a3 88 48 02 c0       	mov    ds:0xc0024888,eax
c0018af5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018af9:	5e                   	pop    esi
c0018afa:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018afc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018b00:	51                   	push   ecx
c0018b01:	50                   	push   eax
c0018b02:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b06:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b0a:	53                   	push   ebx
c0018b0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b0e:	83 c4 14             	add    esp,0x14
c0018b11:	53                   	push   ebx
c0018b12:	e8 65 27 ff ff       	call   c000b27c <File::close()>
c0018b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	a3 84 48 02 c0       	mov    ds:0xc0024884,eax
c0018b23:	a1 84 48 02 c0       	mov    eax,ds:0xc0024884
c0018b28:	8b 15 88 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024888
c0018b2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b31:	31 ff                	xor    edi,edi
c0018b33:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b3b:	31 f6                	xor    esi,esi
c0018b3d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b42:	31 db                	xor    ebx,ebx
c0018b44:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b4c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b51:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b58:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b5c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b63:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b67:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b6a:	0f 8e 6b 01 00 00    	jle    c0018cdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b70:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b73:	d4 40                	aam    0x40
c0018b75:	d5 39                	aad    0x39
c0018b77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b7b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b87:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b8b:	d4 40                	aam    0x40
c0018b8d:	d5 39                	aad    0x39
c0018b8f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b93:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b97:	d4 40                	aam    0x40
c0018b99:	d5 39                	aad    0x39
c0018b9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b9f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018ba3:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018ba7:	3c 56                	cmp    al,0x56
c0018ba9:	74 45                	je     c0018bf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018bab:	d4 40                	aam    0x40
c0018bad:	d5 39                	aad    0x39
c0018baf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bb2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018bb6:	0f b6 c9             	movzx  ecx,cl
c0018bb9:	c1 e1 04             	shl    ecx,0x4
c0018bbc:	d4 40                	aam    0x40
c0018bbe:	d5 39                	aad    0x39
c0018bc0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bc3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018bc7:	0f b6 db             	movzx  ebx,bl
c0018bca:	09 cb                	or     ebx,ecx
c0018bcc:	c1 e3 04             	shl    ebx,0x4
c0018bcf:	d4 40                	aam    0x40
c0018bd1:	d5 39                	aad    0x39
c0018bd3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bd6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bda:	0f b6 c9             	movzx  ecx,cl
c0018bdd:	09 cb                	or     ebx,ecx
c0018bdf:	c1 e3 04             	shl    ebx,0x4
c0018be2:	89 d9                	mov    ecx,ebx
c0018be4:	d4 40                	aam    0x40
c0018be6:	d5 39                	aad    0x39
c0018be8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018beb:	0f b6 db             	movzx  ebx,bl
c0018bee:	09 cb                	or     ebx,ecx
c0018bf0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bf4:	80 f9 44             	cmp    cl,0x44
c0018bf7:	74 47                	je     c0018c40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bf9:	88 c8                	mov    al,cl
c0018bfb:	d4 40                	aam    0x40
c0018bfd:	d5 39                	aad    0x39
c0018bff:	83 e8 30             	sub    eax,0x30
c0018c02:	0f b6 e8             	movzx  ebp,al
c0018c05:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018c09:	c1 e5 04             	shl    ebp,0x4
c0018c0c:	d4 40                	aam    0x40
c0018c0e:	d5 39                	aad    0x39
c0018c10:	83 e8 30             	sub    eax,0x30
c0018c13:	0f b6 f0             	movzx  esi,al
c0018c16:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c1a:	09 ee                	or     esi,ebp
c0018c1c:	c1 e6 04             	shl    esi,0x4
c0018c1f:	d4 40                	aam    0x40
c0018c21:	d5 39                	aad    0x39
c0018c23:	83 e8 30             	sub    eax,0x30
c0018c26:	0f b6 e8             	movzx  ebp,al
c0018c29:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c2d:	09 ee                	or     esi,ebp
c0018c2f:	c1 e6 04             	shl    esi,0x4
c0018c32:	89 f5                	mov    ebp,esi
c0018c34:	d4 40                	aam    0x40
c0018c36:	d5 39                	aad    0x39
c0018c38:	83 e8 30             	sub    eax,0x30
c0018c3b:	0f b6 f0             	movzx  esi,al
c0018c3e:	09 ee                	or     esi,ebp
c0018c40:	83 c7 10             	add    edi,0x10
c0018c43:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c47:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c4a:	3c 0a                	cmp    al,0xa
c0018c4c:	74 09                	je     c0018c57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c4e:	45                   	inc    ebp
c0018c4f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c52:	75 16                	jne    c0018c6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c54:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c57:	3c 0a                	cmp    al,0xa
c0018c59:	0f 94 c0             	sete   al
c0018c5c:	0f b6 c0             	movzx  eax,al
c0018c5f:	01 c7                	add    edi,eax
c0018c61:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c66:	75 0c                	jne    c0018c74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c68:	eb 15                	jmp    c0018c7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c6a:	47                   	inc    edi
c0018c6b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c6e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c72:	eb d3                	jmp    c0018c47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c74:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c79:	0f 85 e8 fe ff ff    	jne    c0018b67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c7f:	80 f9 44             	cmp    cl,0x44
c0018c82:	74 0b                	je     c0018c8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c84:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c89:	0f 85 d8 fe ff ff    	jne    c0018b67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c8f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c93:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c97:	c1 e1 04             	shl    ecx,0x4
c0018c9a:	83 e8 30             	sub    eax,0x30
c0018c9d:	09 c8                	or     eax,ecx
c0018c9f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018ca3:	0f 85 be fe ff ff    	jne    c0018b67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ca9:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018cad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cb1:	c1 e1 04             	shl    ecx,0x4
c0018cb4:	83 e8 30             	sub    eax,0x30
c0018cb7:	09 c8                	or     eax,ecx
c0018cb9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018cbd:	0f 85 a4 fe ff ff    	jne    c0018b67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cc3:	50                   	push   eax
c0018cc4:	50                   	push   eax
c0018cc5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cc9:	50                   	push   eax
c0018cca:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cd1:	e8 4a 79 fe ff       	call   c0000620 <strcpy>
c0018cd6:	83 c4 10             	add    esp,0x10
c0018cd9:	eb 15                	jmp    c0018cf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cdb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018ce2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ced:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cf0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cf7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cfd:	5b                   	pop    ebx
c0018cfe:	5e                   	pop    esi
c0018cff:	5f                   	pop    edi
c0018d00:	5d                   	pop    ebp
c0018d01:	c3                   	ret    

c0018d02 <PCI::checkBus(unsigned char)>:
c0018d02:	56                   	push   esi
c0018d03:	53                   	push   ebx
c0018d04:	31 f6                	xor    esi,esi
c0018d06:	51                   	push   ecx
c0018d07:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018d0b:	0f b6 c3             	movzx  eax,bl
c0018d0e:	52                   	push   edx
c0018d0f:	56                   	push   esi
c0018d10:	46                   	inc    esi
c0018d11:	50                   	push   eax
c0018d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d16:	e8 f3 02 00 00       	call   c001900e <PCI::checkDevice(unsigned char, unsigned char)>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	83 fe 20             	cmp    esi,0x20
c0018d21:	75 e8                	jne    c0018d0b <PCI::checkBus(unsigned char)+0x9>
c0018d23:	58                   	pop    eax
c0018d24:	5b                   	pop    ebx
c0018d25:	5e                   	pop    esi
c0018d26:	c3                   	ret    
c0018d27:	90                   	nop

c0018d28 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d28:	55                   	push   ebp
c0018d29:	57                   	push   edi
c0018d2a:	56                   	push   esi
c0018d2b:	53                   	push   ebx
c0018d2c:	83 ec 1c             	sub    esp,0x1c
c0018d2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d33:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d39:	0f 84 52 01 00 00    	je     c0018e91 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d3f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d43:	66 81 f9 06 04       	cmp    cx,0x406
c0018d48:	75 2c                	jne    c0018d76 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d4a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d4f:	50                   	push   eax
c0018d50:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d55:	50                   	push   eax
c0018d56:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d5b:	50                   	push   eax
c0018d5c:	56                   	push   esi
c0018d5d:	e8 b2 fb ff ff       	call   c0018914 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d62:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d66:	0f b6 c0             	movzx  eax,al
c0018d69:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d6d:	83 c4 2c             	add    esp,0x2c
c0018d70:	5b                   	pop    ebx
c0018d71:	5e                   	pop    esi
c0018d72:	5f                   	pop    edi
c0018d73:	5d                   	pop    ebp
c0018d74:	eb 8c                	jmp    c0018d02 <PCI::checkBus(unsigned char)>
c0018d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d7a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d84:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d88:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d8c:	88 d3                	mov    bl,dl
c0018d8e:	85 c0                	test   eax,eax
c0018d90:	74 33                	je     c0018dc5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d95:	85 d2                	test   edx,edx
c0018d97:	74 28                	je     c0018dc1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d99:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d9f:	31 ef                	xor    edi,ebp
c0018da1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018da7:	75 18                	jne    c0018dc1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018da9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018dad:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018db3:	75 0c                	jne    c0018dc1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018db5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018dbb:	0f 84 d0 00 00 00    	je     c0018e91 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dc3:	eb c9                	jmp    c0018d8e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018dc5:	66 81 f9 01 06       	cmp    cx,0x601
c0018dca:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dce:	75 19                	jne    c0018de9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018dd0:	83 ec 0c             	sub    esp,0xc
c0018dd3:	68 64 01 00 00       	push   0x164
c0018dd8:	e8 7c f0 fe ff       	call   c0007e59 <malloc>
c0018ddd:	89 c5                	mov    ebp,eax
c0018ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de2:	e8 47 0e 00 00       	call   c0019c2e <SATABus::SATABus()>
c0018de7:	eb 1e                	jmp    c0018e07 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018de9:	66 81 f9 01 01       	cmp    cx,0x101
c0018dee:	75 60                	jne    c0018e50 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018df0:	83 ec 0c             	sub    esp,0xc
c0018df3:	68 70 02 00 00       	push   0x270
c0018df8:	e8 5c f0 fe ff       	call   c0007e59 <malloc>
c0018dfd:	89 c5                	mov    ebp,eax
c0018dff:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e02:	e8 cb 02 00 00       	call   c00190d2 <IDE::IDE()>
c0018e07:	58                   	pop    eax
c0018e08:	5a                   	pop    edx
c0018e09:	55                   	push   ebp
c0018e0a:	56                   	push   esi
c0018e0b:	e8 18 32 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018e10:	83 ec 1c             	sub    esp,0x1c
c0018e13:	b9 09 00 00 00       	mov    ecx,0x9
c0018e18:	fc                   	cld    
c0018e19:	89 e7                	mov    edi,esp
c0018e1b:	89 de                	mov    esi,ebx
c0018e1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e1f:	55                   	push   ebp
c0018e20:	e8 49 31 ff ff       	call   c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e28:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e2c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e34:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e3c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e47:	83 c4 4c             	add    esp,0x4c
c0018e4a:	5b                   	pop    ebx
c0018e4b:	5e                   	pop    esi
c0018e4c:	5f                   	pop    edi
c0018e4d:	5d                   	pop    ebp
c0018e4e:	ff e0                	jmp    eax
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	68 58 01 00 00       	push   0x158
c0018e58:	e8 fc ef fe ff       	call   c0007e59 <malloc>
c0018e5d:	89 c5                	mov    ebp,eax
c0018e5f:	58                   	pop    eax
c0018e60:	5a                   	pop    edx
c0018e61:	68 66 f2 01 c0       	push   0xc001f266
c0018e66:	55                   	push   ebp
c0018e67:	e8 5a 34 ff ff       	call   c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e6c:	59                   	pop    ecx
c0018e6d:	5f                   	pop    edi
c0018e6e:	55                   	push   ebp
c0018e6f:	56                   	push   esi
c0018e70:	e8 b3 31 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018e75:	b9 09 00 00 00       	mov    ecx,0x9
c0018e7a:	fc                   	cld    
c0018e7b:	89 df                	mov    edi,ebx
c0018e7d:	89 de                	mov    esi,ebx
c0018e7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e81:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e85:	83 c4 2c             	add    esp,0x2c
c0018e88:	5b                   	pop    ebx
c0018e89:	5e                   	pop    esi
c0018e8a:	5f                   	pop    edi
c0018e8b:	5d                   	pop    ebp
c0018e8c:	e9 dd 30 ff ff       	jmp    c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e91:	83 c4 1c             	add    esp,0x1c
c0018e94:	5b                   	pop    ebx
c0018e95:	5e                   	pop    esi
c0018e96:	5f                   	pop    edi
c0018e97:	5d                   	pop    ebp
c0018e98:	c3                   	ret    
c0018e99:	90                   	nop

c0018e9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e9a:	55                   	push   ebp
c0018e9b:	57                   	push   edi
c0018e9c:	56                   	push   esi
c0018e9d:	53                   	push   ebx
c0018e9e:	83 ec 68             	sub    esp,0x68
c0018ea1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018ea5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018eac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018eb0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018eb7:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ebc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ec0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ec7:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ecc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018ed0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ed5:	6a 0c                	push   0xc
c0018ed7:	57                   	push   edi
c0018ed8:	53                   	push   ebx
c0018ed9:	56                   	push   esi
c0018eda:	55                   	push   ebp
c0018edb:	e8 86 f8 ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ee0:	83 c4 20             	add    esp,0x20
c0018ee3:	57                   	push   edi
c0018ee4:	53                   	push   ebx
c0018ee5:	56                   	push   esi
c0018ee6:	55                   	push   ebp
c0018ee7:	e8 6e f9 ff ff       	call   c001885a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018eec:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ef1:	57                   	push   edi
c0018ef2:	53                   	push   ebx
c0018ef3:	56                   	push   esi
c0018ef4:	55                   	push   ebp
c0018ef5:	e8 f6 f9 ff ff       	call   c00188f0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018efa:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018efe:	83 c4 14             	add    esp,0x14
c0018f01:	6a 3c                	push   0x3c
c0018f03:	57                   	push   edi
c0018f04:	53                   	push   ebx
c0018f05:	56                   	push   esi
c0018f06:	55                   	push   ebp
c0018f07:	e8 5a f8 ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f0c:	0f b6 c4             	movzx  eax,ah
c0018f0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f13:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018f17:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f1b:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0018f20:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f26:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f30:	83 c4 20             	add    esp,0x20
c0018f33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f38:	74 30                	je     c0018f6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f3a:	31 c0                	xor    eax,eax
c0018f3c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f40:	7e 28                	jle    c0018f6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f42:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f4a:	39 cb                	cmp    ebx,ecx
c0018f4c:	75 19                	jne    c0018f67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f4e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f56:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f5a:	75 0b                	jne    c0018f67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f5c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f63:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f67:	40                   	inc    eax
c0018f68:	eb d2                	jmp    c0018f3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f6a:	31 d2                	xor    edx,edx
c0018f6c:	83 ec 0c             	sub    esp,0xc
c0018f6f:	57                   	push   edi
c0018f70:	53                   	push   ebx
c0018f71:	56                   	push   esi
c0018f72:	52                   	push   edx
c0018f73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f77:	55                   	push   ebp
c0018f78:	e8 bf f9 ff ff       	call   c001893c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f81:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f85:	42                   	inc    edx
c0018f86:	83 c4 20             	add    esp,0x20
c0018f89:	83 fa 06             	cmp    edx,0x6
c0018f8c:	75 de                	jne    c0018f6c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f8e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f93:	83 ec 0c             	sub    esp,0xc
c0018f96:	86 e0                	xchg   al,ah
c0018f98:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f9d:	6a 02                	push   0x2
c0018f9f:	57                   	push   edi
c0018fa0:	53                   	push   ebx
c0018fa1:	56                   	push   esi
c0018fa2:	55                   	push   ebp
c0018fa3:	e8 be f7 ff ff       	call   c0018766 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fa8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018fad:	83 c4 20             	add    esp,0x20
c0018fb0:	57                   	push   edi
c0018fb1:	53                   	push   ebx
c0018fb2:	56                   	push   esi
c0018fb3:	55                   	push   ebp
c0018fb4:	e8 eb f8 ff ff       	call   c00188a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fb9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fbd:	57                   	push   edi
c0018fbe:	53                   	push   ebx
c0018fbf:	56                   	push   esi
c0018fc0:	55                   	push   ebp
c0018fc1:	e8 48 f8 ff ff       	call   c001880e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fc6:	b9 09 00 00 00       	mov    ecx,0x9
c0018fcb:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fd0:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fd4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fd8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fdc:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fe0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fe4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fe8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fec:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018ff0:	83 ec 0c             	sub    esp,0xc
c0018ff3:	fc                   	cld    
c0018ff4:	89 e7                	mov    edi,esp
c0018ff6:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ffa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ffc:	55                   	push   ebp
c0018ffd:	e8 26 fd ff ff       	call   c0018d28 <PCI::foundDevice(PCIDeviceInfo)>
c0019002:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019008:	5b                   	pop    ebx
c0019009:	5e                   	pop    esi
c001900a:	5f                   	pop    edi
c001900b:	5d                   	pop    ebp
c001900c:	c3                   	ret    
c001900d:	90                   	nop

c001900e <PCI::checkDevice(unsigned char, unsigned char)>:
c001900e:	55                   	push   ebp
c001900f:	57                   	push   edi
c0019010:	56                   	push   esi
c0019011:	53                   	push   ebx
c0019012:	83 ec 0c             	sub    esp,0xc
c0019015:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019019:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001901e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019023:	6a 00                	push   0x0
c0019025:	56                   	push   esi
c0019026:	57                   	push   edi
c0019027:	55                   	push   ebp
c0019028:	e8 e1 f7 ff ff       	call   c001880e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001902d:	6a 00                	push   0x0
c001902f:	56                   	push   esi
c0019030:	57                   	push   edi
c0019031:	55                   	push   ebp
c0019032:	e8 63 fe ff ff       	call   c0018e9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019037:	83 c4 20             	add    esp,0x20
c001903a:	6a 00                	push   0x0
c001903c:	56                   	push   esi
c001903d:	57                   	push   edi
c001903e:	55                   	push   ebp
c001903f:	e8 ee f7 ff ff       	call   c0018832 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019044:	83 c4 10             	add    esp,0x10
c0019047:	84 c0                	test   al,al
c0019049:	79 27                	jns    c0019072 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001904b:	bb 01 00 00 00       	mov    ebx,0x1
c0019050:	53                   	push   ebx
c0019051:	56                   	push   esi
c0019052:	57                   	push   edi
c0019053:	55                   	push   ebp
c0019054:	e8 b5 f7 ff ff       	call   c001880e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019059:	83 c4 10             	add    esp,0x10
c001905c:	66 40                	inc    ax
c001905e:	74 0c                	je     c001906c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019060:	53                   	push   ebx
c0019061:	56                   	push   esi
c0019062:	57                   	push   edi
c0019063:	55                   	push   ebp
c0019064:	e8 31 fe ff ff       	call   c0018e9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	43                   	inc    ebx
c001906d:	83 fb 08             	cmp    ebx,0x8
c0019070:	75 de                	jne    c0019050 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019072:	83 c4 0c             	add    esp,0xc
c0019075:	5b                   	pop    ebx
c0019076:	5e                   	pop    esi
c0019077:	5f                   	pop    edi
c0019078:	5d                   	pop    ebp
c0019079:	c3                   	ret    

c001907a <PCI::detect()>:
c001907a:	56                   	push   esi
c001907b:	53                   	push   ebx
c001907c:	53                   	push   ebx
c001907d:	31 db                	xor    ebx,ebx
c001907f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019083:	6a 00                	push   0x0
c0019085:	6a 00                	push   0x0
c0019087:	6a 00                	push   0x0
c0019089:	56                   	push   esi
c001908a:	e8 a3 f7 ff ff       	call   c0018832 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001908f:	83 c4 10             	add    esp,0x10
c0019092:	a8 80                	test   al,0x80
c0019094:	75 21                	jne    c00190b7 <PCI::detect()+0x3d>
c0019096:	51                   	push   ecx
c0019097:	51                   	push   ecx
c0019098:	6a 00                	push   0x0
c001909a:	56                   	push   esi
c001909b:	e8 62 fc ff ff       	call   c0018d02 <PCI::checkBus(unsigned char)>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	eb 24                	jmp    c00190c9 <PCI::detect()+0x4f>
c00190a5:	52                   	push   edx
c00190a6:	52                   	push   edx
c00190a7:	53                   	push   ebx
c00190a8:	43                   	inc    ebx
c00190a9:	56                   	push   esi
c00190aa:	e8 53 fc ff ff       	call   c0018d02 <PCI::checkBus(unsigned char)>
c00190af:	83 c4 10             	add    esp,0x10
c00190b2:	83 fb 08             	cmp    ebx,0x8
c00190b5:	74 12                	je     c00190c9 <PCI::detect()+0x4f>
c00190b7:	53                   	push   ebx
c00190b8:	6a 00                	push   0x0
c00190ba:	6a 00                	push   0x0
c00190bc:	56                   	push   esi
c00190bd:	e8 4c f7 ff ff       	call   c001880e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190c2:	83 c4 10             	add    esp,0x10
c00190c5:	66 40                	inc    ax
c00190c7:	74 dc                	je     c00190a5 <PCI::detect()+0x2b>
c00190c9:	58                   	pop    eax
c00190ca:	5b                   	pop    ebx
c00190cb:	5e                   	pop    esi
c00190cc:	c3                   	ret    
c00190cd:	90                   	nop

c00190ce <IDE::close(int, int, void*)>:
c00190ce:	83 c8 ff             	or     eax,0xffffffff
c00190d1:	c3                   	ret    

c00190d2 <IDE::IDE()>:
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d9:	83 ec 08             	sub    esp,0x8
c00190dc:	68 ac f2 01 c0       	push   0xc001f2ac
c00190e1:	50                   	push   eax
c00190e2:	e8 85 32 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c00190e7:	83 c4 10             	add    esp,0x10
c00190ea:	ba 3c f3 01 c0       	mov    edx,0xc001f33c
c00190ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f3:	89 10                	mov    DWORD PTR [eax],edx
c00190f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019100:	90                   	nop
c0019101:	83 c4 0c             	add    esp,0xc
c0019104:	c3                   	ret    
c0019105:	90                   	nop

c0019106 <IDE::prepareInterrupt(unsigned char)>:
c0019106:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001910b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001910f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019117:	c3                   	ret    

c0019118 <selectDrive(unsigned char, unsigned char)>:
c0019118:	c3                   	ret    
c0019119:	90                   	nop

c001911a <IDE::getBase(unsigned char)>:
c001911a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001911f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019123:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001912b:	c3                   	ret    

c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001912c:	55                   	push   ebp
c001912d:	57                   	push   edi
c001912e:	56                   	push   esi
c001912f:	53                   	push   ebx
c0019130:	83 ec 1c             	sub    esp,0x1c
c0019133:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019137:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001913b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001913e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019146:	80 f9 03             	cmp    cl,0x3
c0019149:	77 51                	ja     c001919c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001914b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001914f:	0f b6 f2             	movzx  esi,dl
c0019152:	0f b6 db             	movzx  ebx,bl
c0019155:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019158:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001915c:	83 ca 80             	or     edx,0xffffff80
c001915f:	0f b6 d2             	movzx  edx,dl
c0019162:	52                   	push   edx
c0019163:	6a 0c                	push   0xc
c0019165:	56                   	push   esi
c0019166:	57                   	push   edi
c0019167:	e8 c0 ff ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001916c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019175:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019179:	ee                   	out    dx,al
c001917a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001917f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019183:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019187:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001918b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019193:	83 c4 2c             	add    esp,0x2c
c0019196:	5b                   	pop    ebx
c0019197:	5e                   	pop    esi
c0019198:	5f                   	pop    edi
c0019199:	5d                   	pop    ebp
c001919a:	eb 90                	jmp    c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001919c:	80 fb 07             	cmp    bl,0x7
c001919f:	77 12                	ja     c00191b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00191a1:	0f b6 d2             	movzx  edx,dl
c00191a4:	0f b6 db             	movzx  ebx,bl
c00191a7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00191af:	89 da                	mov    edx,ebx
c00191b1:	eb 2f                	jmp    c00191e2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191b3:	80 fb 0d             	cmp    bl,0xd
c00191b6:	77 13                	ja     c00191cb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191b8:	0f b6 d2             	movzx  edx,dl
c00191bb:	0f b6 db             	movzx  ebx,bl
c00191be:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191c5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191c9:	eb 17                	jmp    c00191e2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191cb:	80 fb 15             	cmp    bl,0x15
c00191ce:	77 13                	ja     c00191e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191d0:	0f b6 d2             	movzx  edx,dl
c00191d3:	0f b6 db             	movzx  ebx,bl
c00191d6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191de:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191e2:	ee                   	out    dx,al
c00191e3:	83 c4 1c             	add    esp,0x1c
c00191e6:	5b                   	pop    ebx
c00191e7:	5e                   	pop    esi
c00191e8:	5f                   	pop    edi
c00191e9:	5d                   	pop    ebp
c00191ea:	c3                   	ret    
c00191eb:	90                   	nop

c00191ec <IDE::read(unsigned char, unsigned char)>:
c00191ec:	55                   	push   ebp
c00191ed:	57                   	push   edi
c00191ee:	56                   	push   esi
c00191ef:	53                   	push   ebx
c00191f0:	83 ec 1c             	sub    esp,0x1c
c00191f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191fb:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019202:	3c 03                	cmp    al,0x3
c0019204:	77 43                	ja     c0019249 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019206:	0f b6 f2             	movzx  esi,dl
c0019209:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001920c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019210:	83 c8 80             	or     eax,0xffffff80
c0019213:	0f b6 c0             	movzx  eax,al
c0019216:	50                   	push   eax
c0019217:	6a 0c                	push   0xc
c0019219:	56                   	push   esi
c001921a:	57                   	push   edi
c001921b:	e8 0c ff ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019220:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019225:	0f b6 c3             	movzx  eax,bl
c0019228:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001922c:	ec                   	in     al,dx
c001922d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019231:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019236:	52                   	push   edx
c0019237:	6a 0c                	push   0xc
c0019239:	56                   	push   esi
c001923a:	57                   	push   edi
c001923b:	e8 ec fe ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019240:	83 c4 20             	add    esp,0x20
c0019243:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019247:	eb 49                	jmp    c0019292 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019249:	80 fb 07             	cmp    bl,0x7
c001924c:	77 12                	ja     c0019260 <IDE::read(unsigned char, unsigned char)+0x74>
c001924e:	0f b6 d2             	movzx  edx,dl
c0019251:	0f b6 c3             	movzx  eax,bl
c0019254:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001925c:	89 c2                	mov    edx,eax
c001925e:	eb 31                	jmp    c0019291 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019260:	80 fb 0d             	cmp    bl,0xd
c0019263:	77 13                	ja     c0019278 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019265:	0f b6 d2             	movzx  edx,dl
c0019268:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001926f:	0f b6 d3             	movzx  edx,bl
c0019272:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019276:	eb 19                	jmp    c0019291 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019278:	31 c0                	xor    eax,eax
c001927a:	80 fb 15             	cmp    bl,0x15
c001927d:	77 13                	ja     c0019292 <IDE::read(unsigned char, unsigned char)+0xa6>
c001927f:	0f b6 d2             	movzx  edx,dl
c0019282:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001928a:	0f b6 d3             	movzx  edx,bl
c001928d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019291:	ec                   	in     al,dx
c0019292:	83 c4 1c             	add    esp,0x1c
c0019295:	5b                   	pop    ebx
c0019296:	5e                   	pop    esi
c0019297:	5f                   	pop    edi
c0019298:	5d                   	pop    ebp
c0019299:	c3                   	ret    

c001929a <IDE::waitInterrupt(unsigned char)>:
c001929a:	57                   	push   edi
c001929b:	56                   	push   esi
c001929c:	31 f6                	xor    esi,esi
c001929e:	53                   	push   ebx
c001929f:	83 ec 10             	sub    esp,0x10
c00192a2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00192a6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00192aa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192ae:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00192b3:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192ba:	84 db                	test   bl,bl
c00192bc:	75 33                	jne    c00192f1 <IDE::waitInterrupt(unsigned char)+0x57>
c00192be:	52                   	push   edx
c00192bf:	6a 0c                	push   0xc
c00192c1:	50                   	push   eax
c00192c2:	57                   	push   edi
c00192c3:	e8 24 ff ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00192c8:	83 c4 10             	add    esp,0x10
c00192cb:	a8 01                	test   al,0x1
c00192cd:	75 2a                	jne    c00192f9 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192cf:	f7 c6 04 00 00 00    	test   esi,0x4
c00192d5:	75 12                	jne    c00192e9 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192d7:	83 fe 32             	cmp    esi,0x32
c00192da:	7e 0d                	jle    c00192e9 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192dc:	83 ec 0c             	sub    esp,0xc
c00192df:	6a 64                	push   0x64
c00192e1:	e8 e6 aa ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	83 fe 3c             	cmp    esi,0x3c
c00192ec:	74 0b                	je     c00192f9 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192ee:	46                   	inc    esi
c00192ef:	eb bd                	jmp    c00192ae <IDE::waitInterrupt(unsigned char)+0x14>
c00192f1:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	88 d8                	mov    al,bl
c00192fe:	5b                   	pop    ebx
c00192ff:	5e                   	pop    esi
c0019300:	5f                   	pop    edi
c0019301:	c3                   	ret    

c0019302 <ideChannel0IRQHandler(regs*, void*)>:
c0019302:	83 ec 10             	sub    esp,0x10
c0019305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019309:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019310:	6a 07                	push   0x7
c0019312:	6a 00                	push   0x0
c0019314:	50                   	push   eax
c0019315:	e8 d2 fe ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001931a:	83 c4 1c             	add    esp,0x1c
c001931d:	c3                   	ret    

c001931e <ideChannel1IRQHandler(regs*, void*)>:
c001931e:	83 ec 10             	sub    esp,0x10
c0019321:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019325:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001932c:	6a 07                	push   0x7
c001932e:	6a 01                	push   0x1
c0019330:	50                   	push   eax
c0019331:	e8 b6 fe ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019336:	83 c4 1c             	add    esp,0x1c
c0019339:	c3                   	ret    

c001933a <IDE::enableIRQs(unsigned char, bool)>:
c001933a:	57                   	push   edi
c001933b:	56                   	push   esi
c001933c:	be 04 00 00 00       	mov    esi,0x4
c0019341:	53                   	push   ebx
c0019342:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001934b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019350:	0f 94 c0             	sete   al
c0019353:	01 c0                	add    eax,eax
c0019355:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001935c:	0f b6 c0             	movzx  eax,al
c001935f:	50                   	push   eax
c0019360:	6a 0c                	push   0xc
c0019362:	57                   	push   edi
c0019363:	53                   	push   ebx
c0019364:	e8 c3 fd ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	50                   	push   eax
c001936d:	6a 0c                	push   0xc
c001936f:	57                   	push   edi
c0019370:	53                   	push   ebx
c0019371:	e8 76 fe ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019376:	83 c4 10             	add    esp,0x10
c0019379:	4e                   	dec    esi
c001937a:	75 f0                	jne    c001936c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001937c:	5b                   	pop    ebx
c001937d:	5e                   	pop    esi
c001937e:	5f                   	pop    edi
c001937f:	c3                   	ret    

c0019380 <IDE::open(int, int, void*)>:
c0019380:	55                   	push   ebp
c0019381:	57                   	push   edi
c0019382:	56                   	push   esi
c0019383:	53                   	push   ebx
c0019384:	83 ec 1c             	sub    esp,0x1c
c0019387:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001938b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019394:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001939d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00193a4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00193ab:	0f 85 b0 02 00 00    	jne    c0019661 <IDE::open(int, int, void*)+0x2e1>
c00193b1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00193b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193bb:	83 e0 7f             	and    eax,0x7f
c00193be:	3c 05                	cmp    al,0x5
c00193c0:	74 04                	je     c00193c6 <IDE::open(int, int, void*)+0x46>
c00193c2:	3c 0f                	cmp    al,0xf
c00193c4:	75 32                	jne    c00193f8 <IDE::open(int, int, void*)+0x78>
c00193c6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193cc:	83 e0 fc             	and    eax,0xfffffffc
c00193cf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193d6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193dc:	83 e0 fc             	and    eax,0xfffffffc
c00193df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193e6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193ec:	83 e0 fc             	and    eax,0xfffffffc
c00193ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193f6:	eb 14                	jmp    c001940c <IDE::open(int, int, void*)+0x8c>
c00193f8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019402:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001940c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019413:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001941a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001941e:	89 c6                	mov    esi,eax
c0019420:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019425:	c1 e6 10             	shl    esi,0x10
c0019428:	89 e8                	mov    eax,ebp
c001942a:	89 fa                	mov    edx,edi
c001942c:	c1 e0 0b             	shl    eax,0xb
c001942f:	09 f0                	or     eax,esi
c0019431:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019438:	c1 e6 08             	shl    esi,0x8
c001943b:	09 c6                	or     esi,eax
c001943d:	89 f0                	mov    eax,esi
c001943f:	0d 08 00 00 80       	or     eax,0x80000008
c0019444:	ef                   	out    dx,eax
c0019445:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001944a:	89 ca                	mov    edx,ecx
c001944c:	ed                   	in     eax,dx
c001944d:	c1 e8 10             	shr    eax,0x10
c0019450:	3d ff ff 00 00       	cmp    eax,0xffff
c0019455:	0f 84 f5 00 00 00    	je     c0019550 <IDE::open(int, int, void*)+0x1d0>
c001945b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019461:	89 fa                	mov    edx,edi
c0019463:	89 f0                	mov    eax,esi
c0019465:	ef                   	out    dx,eax
c0019466:	b0 fe                	mov    al,0xfe
c0019468:	89 ca                	mov    edx,ecx
c001946a:	ee                   	out    dx,al
c001946b:	89 f0                	mov    eax,esi
c001946d:	89 fa                	mov    edx,edi
c001946f:	ef                   	out    dx,eax
c0019470:	89 ca                	mov    edx,ecx
c0019472:	ed                   	in     eax,dx
c0019473:	3c fe                	cmp    al,0xfe
c0019475:	0f 85 a9 00 00 00    	jne    c0019524 <IDE::open(int, int, void*)+0x1a4>
c001947b:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c0019481:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019488:	74 33                	je     c00194bd <IDE::open(int, int, void*)+0x13d>
c001948a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019490:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019494:	40                   	inc    eax
c0019495:	83 ec 0c             	sub    esp,0xc
c0019498:	0f b6 c0             	movzx  eax,al
c001949b:	50                   	push   eax
c001949c:	55                   	push   ebp
c001949d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a1:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00194a7:	51                   	push   ecx
c00194a8:	e8 47 59 ff ff       	call   c000edf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00194ad:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00194b2:	83 c4 1c             	add    esp,0x1c
c00194b5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194bb:	eb 0a                	jmp    c00194c7 <IDE::open(int, int, void*)+0x147>
c00194bd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194c7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194ce:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194d5:	c1 e1 10             	shl    ecx,0x10
c00194d8:	c1 e0 08             	shl    eax,0x8
c00194db:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194e0:	09 c1                	or     ecx,eax
c00194e2:	89 fa                	mov    edx,edi
c00194e4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194eb:	c1 e0 0b             	shl    eax,0xb
c00194ee:	09 c1                	or     ecx,eax
c00194f0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194f6:	89 c8                	mov    eax,ecx
c00194f8:	ef                   	out    dx,eax
c00194f9:	be fc 0c 00 00       	mov    esi,0xcfc
c00194fe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019504:	89 f2                	mov    edx,esi
c0019506:	ee                   	out    dx,al
c0019507:	89 c8                	mov    eax,ecx
c0019509:	89 fa                	mov    edx,edi
c001950b:	ef                   	out    dx,eax
c001950c:	89 f2                	mov    edx,esi
c001950e:	ed                   	in     eax,dx
c001950f:	0f b6 c0             	movzx  eax,al
c0019512:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019518:	74 46                	je     c0019560 <IDE::open(int, int, void*)+0x1e0>
c001951a:	83 ec 0c             	sub    esp,0xc
c001951d:	68 c4 f2 01 c0       	push   0xc001f2c4
c0019522:	eb 34                	jmp    c0019558 <IDE::open(int, int, void*)+0x1d8>
c0019524:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001952d:	75 17                	jne    c0019546 <IDE::open(int, int, void*)+0x1c6>
c001952f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019534:	74 07                	je     c001953d <IDE::open(int, int, void*)+0x1bd>
c0019536:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001953b:	75 09                	jne    c0019546 <IDE::open(int, int, void*)+0x1c6>
c001953d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019544:	eb 1a                	jmp    c0019560 <IDE::open(int, int, void*)+0x1e0>
c0019546:	83 ec 0c             	sub    esp,0xc
c0019549:	68 cc f2 01 c0       	push   0xc001f2cc
c001954e:	eb 08                	jmp    c0019558 <IDE::open(int, int, void*)+0x1d8>
c0019550:	83 ec 0c             	sub    esp,0xc
c0019553:	68 fd f2 01 c0       	push   0xc001f2fd
c0019558:	e8 1a 72 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019567:	79 1a                	jns    c0019583 <IDE::open(int, int, void*)+0x203>
c0019569:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001956f:	83 e0 fc             	and    eax,0xfffffffc
c0019572:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019579:	83 c0 08             	add    eax,0x8
c001957c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019583:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019589:	89 c2                	mov    edx,eax
c001958b:	83 e2 0f             	and    edx,0xf
c001958e:	66 83 fa 08          	cmp    dx,0x8
c0019592:	75 0a                	jne    c001959e <IDE::open(int, int, void*)+0x21e>
c0019594:	83 e8 02             	sub    eax,0x2
c0019597:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001959e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00195a4:	89 c2                	mov    edx,eax
c00195a6:	83 e2 0f             	and    edx,0xf
c00195a9:	66 83 fa 08          	cmp    dx,0x8
c00195ad:	75 0a                	jne    c00195b9 <IDE::open(int, int, void*)+0x239>
c00195af:	83 e8 02             	sub    eax,0x2
c00195b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195c0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195c7:	89 d0                	mov    eax,edx
c00195c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195d0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195d4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195d7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195dc:	0f b6 c9             	movzx  ecx,cl
c00195df:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195e6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195e9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195ed:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195f1:	8d 50 02             	lea    edx,[eax+0x2]
c00195f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195f9:	0f b6 d2             	movzx  edx,dl
c00195fc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019602:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019605:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019609:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001960d:	8d 48 03             	lea    ecx,[eax+0x3]
c0019610:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019615:	0f b6 c9             	movzx  ecx,cl
c0019618:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001961e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019621:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019625:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019629:	8d 50 04             	lea    edx,[eax+0x4]
c001962c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019632:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019637:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001963e:	66 85 f6             	test   si,si
c0019641:	74 5b                	je     c001969e <IDE::open(int, int, void*)+0x31e>
c0019643:	0f b6 d2             	movzx  edx,dl
c0019646:	83 c0 05             	add    eax,0x5
c0019649:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001964c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019650:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019654:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001965a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001965f:	eb 3d                	jmp    c001969e <IDE::open(int, int, void*)+0x31e>
c0019661:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019667:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001966e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019675:	66 05 06 02          	add    ax,0x206
c0019679:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019680:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019687:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001968e:	66 05 06 02          	add    ax,0x206
c0019692:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019699:	e9 e5 fe ff ff       	jmp    c0019583 <IDE::open(int, int, void*)+0x203>
c001969e:	50                   	push   eax
c001969f:	50                   	push   eax
c00196a0:	6a 00                	push   0x0
c00196a2:	53                   	push   ebx
c00196a3:	e8 5e fa ff ff       	call   c0019106 <IDE::prepareInterrupt(unsigned char)>
c00196a8:	5a                   	pop    edx
c00196a9:	59                   	pop    ecx
c00196aa:	6a 01                	push   0x1
c00196ac:	53                   	push   ebx
c00196ad:	e8 54 fa ff ff       	call   c0019106 <IDE::prepareInterrupt(unsigned char)>
c00196b2:	83 c4 0c             	add    esp,0xc
c00196b5:	6a 00                	push   0x0
c00196b7:	6a 00                	push   0x0
c00196b9:	53                   	push   ebx
c00196ba:	e8 7b fc ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c00196bf:	83 c4 0c             	add    esp,0xc
c00196c2:	6a 00                	push   0x0
c00196c4:	6a 01                	push   0x1
c00196c6:	53                   	push   ebx
c00196c7:	e8 6e fc ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c00196cc:	83 c4 10             	add    esp,0x10
c00196cf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196d6:	74 34                	je     c001970c <IDE::open(int, int, void*)+0x38c>
c00196d8:	83 ec 0c             	sub    esp,0xc
c00196db:	53                   	push   ebx
c00196dc:	6a 01                	push   0x1
c00196de:	68 02 93 01 c0       	push   0xc0019302
c00196e3:	6a 0e                	push   0xe
c00196e5:	53                   	push   ebx
c00196e6:	e8 e9 28 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196eb:	83 c4 14             	add    esp,0x14
c00196ee:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196f4:	53                   	push   ebx
c00196f5:	6a 01                	push   0x1
c00196f7:	68 1e 93 01 c0       	push   0xc001931e
c00196fc:	6a 0f                	push   0xf
c00196fe:	53                   	push   ebx
c00196ff:	e8 d0 28 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019704:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001970a:	eb 38                	jmp    c0019744 <IDE::open(int, int, void*)+0x3c4>
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019719:	53                   	push   ebx
c001971a:	6a 00                	push   0x0
c001971c:	68 02 93 01 c0       	push   0xc0019302
c0019721:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019727:	53                   	push   ebx
c0019728:	e8 a7 28 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001972d:	83 c4 14             	add    esp,0x14
c0019730:	53                   	push   ebx
c0019731:	6a 00                	push   0x0
c0019733:	68 1e 93 01 c0       	push   0xc001931e
c0019738:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001973e:	53                   	push   ebx
c001973f:	e8 90 28 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019746:	83 c4 20             	add    esp,0x20
c0019749:	83 ec 0c             	sub    esp,0xc
c001974c:	53                   	push   ebx
c001974d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019750:	83 c4 0c             	add    esp,0xc
c0019753:	6a 07                	push   0x7
c0019755:	6a 00                	push   0x0
c0019757:	53                   	push   ebx
c0019758:	e8 8f fa ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001975d:	83 c4 0c             	add    esp,0xc
c0019760:	6a 07                	push   0x7
c0019762:	6a 01                	push   0x1
c0019764:	53                   	push   ebx
c0019765:	e8 82 fa ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001976a:	83 c4 0c             	add    esp,0xc
c001976d:	6a 01                	push   0x1
c001976f:	6a 00                	push   0x0
c0019771:	53                   	push   ebx
c0019772:	e8 c3 fb ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c0019777:	83 c4 0c             	add    esp,0xc
c001977a:	6a 01                	push   0x1
c001977c:	6a 01                	push   0x1
c001977e:	53                   	push   ebx
c001977f:	e8 b6 fb ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c0019784:	83 c4 2c             	add    esp,0x2c
c0019787:	31 c0                	xor    eax,eax
c0019789:	5b                   	pop    ebx
c001978a:	5e                   	pop    esi
c001978b:	5f                   	pop    edi
c001978c:	5d                   	pop    ebp
c001978d:	c3                   	ret    

c001978e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001978e:	55                   	push   ebp
c001978f:	57                   	push   edi
c0019790:	56                   	push   esi
c0019791:	53                   	push   ebx
c0019792:	83 ec 1c             	sub    esp,0x1c
c0019795:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019799:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001979d:	8d 50 f8             	lea    edx,[eax-0x8]
c00197a0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197a4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00197a8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00197ac:	80 fa 03             	cmp    dl,0x3
c00197af:	77 5d                	ja     c001980e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00197b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197b9:	0f b6 db             	movzx  ebx,bl
c00197bc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197bf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197c3:	83 ca 80             	or     edx,0xffffff80
c00197c6:	0f b6 d2             	movzx  edx,dl
c00197c9:	52                   	push   edx
c00197ca:	6a 0c                	push   0xc
c00197cc:	53                   	push   ebx
c00197cd:	56                   	push   esi
c00197ce:	e8 59 f9 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197d3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197e0:	0f b6 c0             	movzx  eax,al
c00197e3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197e7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197e9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197ee:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197fa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019802:	83 c4 2c             	add    esp,0x2c
c0019805:	5b                   	pop    ebx
c0019806:	5e                   	pop    esi
c0019807:	5f                   	pop    edi
c0019808:	5d                   	pop    ebp
c0019809:	e9 1e f9 ff ff       	jmp    c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001980e:	3c 07                	cmp    al,0x7
c0019810:	77 10                	ja     c0019822 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019812:	0f b6 db             	movzx  ebx,bl
c0019815:	0f b6 d0             	movzx  edx,al
c0019818:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019820:	eb 2d                	jmp    c001984f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019822:	3c 0d                	cmp    al,0xd
c0019824:	77 13                	ja     c0019839 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019826:	0f b6 db             	movzx  ebx,bl
c0019829:	0f b6 c0             	movzx  eax,al
c001982c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019833:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019837:	eb 16                	jmp    c001984f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019839:	3c 15                	cmp    al,0x15
c001983b:	77 14                	ja     c0019851 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001983d:	0f b6 db             	movzx  ebx,bl
c0019840:	0f b6 c0             	movzx  eax,al
c0019843:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001984b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001984f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019851:	83 c4 1c             	add    esp,0x1c
c0019854:	5b                   	pop    ebx
c0019855:	5e                   	pop    esi
c0019856:	5f                   	pop    edi
c0019857:	5d                   	pop    ebp
c0019858:	c3                   	ret    
c0019859:	90                   	nop

c001985a <IDE::detect()>:
c001985a:	55                   	push   ebp
c001985b:	57                   	push   edi
c001985c:	56                   	push   esi
c001985d:	53                   	push   ebx
c001985e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019864:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001986b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019872:	0f 85 97 02 00 00    	jne    c0019b0f <IDE::detect()+0x2b5>
c0019878:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001987f:	31 f6                	xor    esi,esi
c0019881:	31 ed                	xor    ebp,ebp
c0019883:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001988b:	89 e8                	mov    eax,ebp
c001988d:	c1 e0 06             	shl    eax,0x6
c0019890:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019898:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001989c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198a0:	c1 e0 04             	shl    eax,0x4
c00198a3:	83 c8 a0             	or     eax,0xffffffa0
c00198a6:	0f b6 c0             	movzx  eax,al
c00198a9:	50                   	push   eax
c00198aa:	6a 06                	push   0x6
c00198ac:	56                   	push   esi
c00198ad:	53                   	push   ebx
c00198ae:	e8 79 f8 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198b3:	83 c4 0c             	add    esp,0xc
c00198b6:	6a 0c                	push   0xc
c00198b8:	56                   	push   esi
c00198b9:	53                   	push   ebx
c00198ba:	e8 2d f9 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00198bf:	83 c4 0c             	add    esp,0xc
c00198c2:	6a 0c                	push   0xc
c00198c4:	56                   	push   esi
c00198c5:	53                   	push   ebx
c00198c6:	e8 21 f9 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00198cb:	83 c4 0c             	add    esp,0xc
c00198ce:	6a 0c                	push   0xc
c00198d0:	56                   	push   esi
c00198d1:	53                   	push   ebx
c00198d2:	e8 15 f9 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00198d7:	83 c4 0c             	add    esp,0xc
c00198da:	6a 0c                	push   0xc
c00198dc:	56                   	push   esi
c00198dd:	53                   	push   ebx
c00198de:	e8 09 f9 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00198e3:	68 ec 00 00 00       	push   0xec
c00198e8:	6a 07                	push   0x7
c00198ea:	56                   	push   esi
c00198eb:	53                   	push   ebx
c00198ec:	e8 3b f8 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198f1:	83 c4 1c             	add    esp,0x1c
c00198f4:	6a 0c                	push   0xc
c00198f6:	56                   	push   esi
c00198f7:	53                   	push   ebx
c00198f8:	e8 ef f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c00198fd:	83 c4 0c             	add    esp,0xc
c0019900:	6a 0c                	push   0xc
c0019902:	56                   	push   esi
c0019903:	53                   	push   ebx
c0019904:	e8 e3 f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019909:	83 c4 0c             	add    esp,0xc
c001990c:	6a 0c                	push   0xc
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	e8 d7 f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019915:	83 c4 0c             	add    esp,0xc
c0019918:	6a 0c                	push   0xc
c001991a:	56                   	push   esi
c001991b:	53                   	push   ebx
c001991c:	e8 cb f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019921:	83 c4 0c             	add    esp,0xc
c0019924:	6a 0c                	push   0xc
c0019926:	56                   	push   esi
c0019927:	53                   	push   ebx
c0019928:	e8 bf f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001992d:	83 c4 10             	add    esp,0x10
c0019930:	84 c0                	test   al,al
c0019932:	0f 84 5f 01 00 00    	je     c0019a97 <IDE::detect()+0x23d>
c0019938:	31 ff                	xor    edi,edi
c001993a:	50                   	push   eax
c001993b:	6a 0c                	push   0xc
c001993d:	56                   	push   esi
c001993e:	53                   	push   ebx
c001993f:	e8 a8 f8 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	a8 01                	test   al,0x1
c0019949:	0f 85 69 01 00 00    	jne    c0019ab8 <IDE::detect()+0x25e>
c001994f:	84 c0                	test   al,al
c0019951:	78 04                	js     c0019957 <IDE::detect()+0xfd>
c0019953:	a8 08                	test   al,0x8
c0019955:	75 23                	jne    c001997a <IDE::detect()+0x120>
c0019957:	47                   	inc    edi
c0019958:	81 ff 17 01 00 00    	cmp    edi,0x117
c001995e:	7e da                	jle    c001993a <IDE::detect()+0xe0>
c0019960:	83 ec 0c             	sub    esp,0xc
c0019963:	6a 32                	push   0x32
c0019965:	e8 62 a4 ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c001996a:	83 c4 10             	add    esp,0x10
c001996d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019973:	75 c5                	jne    c001993a <IDE::detect()+0xe0>
c0019975:	e9 3e 01 00 00       	jmp    c0019ab8 <IDE::detect()+0x25e>
c001997a:	31 c9                	xor    ecx,ecx
c001997c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019980:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019984:	83 ec 0c             	sub    esp,0xc
c0019987:	68 80 00 00 00       	push   0x80
c001998c:	57                   	push   edi
c001998d:	6a 00                	push   0x0
c001998f:	56                   	push   esi
c0019990:	53                   	push   ebx
c0019991:	e8 f8 fd ff ff       	call   c001978e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019996:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001999b:	89 e8                	mov    eax,ebp
c001999d:	89 d1                	mov    ecx,edx
c001999f:	c1 e0 06             	shl    eax,0x6
c00199a2:	01 d8                	add    eax,ebx
c00199a4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00199ab:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00199b2:	89 f2                	mov    edx,esi
c00199b4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199ba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199be:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199c8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199cf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199d7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199de:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199e6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199ec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199f3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019a01:	83 c4 20             	add    esp,0x20
c0019a04:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019a07:	83 c0 02             	add    eax,0x2
c0019a0a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019a10:	83 c7 02             	add    edi,0x2
c0019a13:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019a16:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a1c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a20:	75 e2                	jne    c0019a04 <IDE::detect()+0x1aa>
c0019a22:	89 e8                	mov    eax,ebp
c0019a24:	c1 e0 06             	shl    eax,0x6
c0019a27:	01 d8                	add    eax,ebx
c0019a29:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a2f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a36:	66 c1 ea 09          	shr    dx,0x9
c0019a3a:	83 e2 01             	and    edx,0x1
c0019a3d:	84 c9                	test   cl,cl
c0019a3f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a45:	75 22                	jne    c0019a69 <IDE::detect()+0x20f>
c0019a47:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a4e:	74 46                	je     c0019a96 <IDE::detect()+0x23c>
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	68 7c 01 00 00       	push   0x17c
c0019a58:	e8 fc e3 fe ff       	call   c0007e59 <malloc>
c0019a5d:	89 c7                	mov    edi,eax
c0019a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a62:	e8 11 05 00 00       	call   c0019f78 <ATA::ATA()>
c0019a67:	eb 17                	jmp    c0019a80 <IDE::detect()+0x226>
c0019a69:	83 ec 0c             	sub    esp,0xc
c0019a6c:	68 84 01 00 00       	push   0x184
c0019a71:	e8 e3 e3 fe ff       	call   c0007e59 <malloc>
c0019a76:	89 c7                	mov    edi,eax
c0019a78:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a7b:	e8 f0 0a 00 00       	call   c001a570 <ATAPI::ATAPI()>
c0019a80:	5a                   	pop    edx
c0019a81:	59                   	pop    ecx
c0019a82:	57                   	push   edi
c0019a83:	53                   	push   ebx
c0019a84:	e8 9f 25 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0019a89:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a8b:	53                   	push   ebx
c0019a8c:	55                   	push   ebp
c0019a8d:	6a 00                	push   0x0
c0019a8f:	57                   	push   edi
c0019a90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a93:	83 c4 20             	add    esp,0x20
c0019a96:	45                   	inc    ebp
c0019a97:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a9c:	74 0d                	je     c0019aab <IDE::detect()+0x251>
c0019a9e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019aa6:	e9 e0 fd ff ff       	jmp    c001988b <IDE::detect()+0x31>
c0019aab:	4e                   	dec    esi
c0019aac:	74 61                	je     c0019b0f <IDE::detect()+0x2b5>
c0019aae:	be 01 00 00 00       	mov    esi,0x1
c0019ab3:	e9 cb fd ff ff       	jmp    c0019883 <IDE::detect()+0x29>
c0019ab8:	50                   	push   eax
c0019ab9:	6a 04                	push   0x4
c0019abb:	56                   	push   esi
c0019abc:	53                   	push   ebx
c0019abd:	e8 2a f7 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019ac2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019ac6:	83 c4 0c             	add    esp,0xc
c0019ac9:	6a 05                	push   0x5
c0019acb:	56                   	push   esi
c0019acc:	53                   	push   ebx
c0019acd:	e8 1a f7 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019ad2:	83 c4 10             	add    esp,0x10
c0019ad5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019ad9:	80 fa 14             	cmp    dl,0x14
c0019adc:	75 04                	jne    c0019ae2 <IDE::detect()+0x288>
c0019ade:	3c eb                	cmp    al,0xeb
c0019ae0:	eb 07                	jmp    c0019ae9 <IDE::detect()+0x28f>
c0019ae2:	3c 96                	cmp    al,0x96
c0019ae4:	75 b1                	jne    c0019a97 <IDE::detect()+0x23d>
c0019ae6:	80 fa 69             	cmp    dl,0x69
c0019ae9:	75 ac                	jne    c0019a97 <IDE::detect()+0x23d>
c0019aeb:	68 a1 00 00 00       	push   0xa1
c0019af0:	6a 07                	push   0x7
c0019af2:	56                   	push   esi
c0019af3:	53                   	push   ebx
c0019af4:	e8 33 f6 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019af9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019b00:	e8 c7 a2 ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c0019b05:	83 c4 10             	add    esp,0x10
c0019b08:	b1 01                	mov    cl,0x1
c0019b0a:	e9 6d fe ff ff       	jmp    c001997c <IDE::detect()+0x122>
c0019b0f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019b15:	5b                   	pop    ebx
c0019b16:	5e                   	pop    esi
c0019b17:	5f                   	pop    edi
c0019b18:	5d                   	pop    ebp
c0019b19:	c3                   	ret    

c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b1a:	55                   	push   ebp
c0019b1b:	57                   	push   edi
c0019b1c:	56                   	push   esi
c0019b1d:	53                   	push   ebx
c0019b1e:	83 ec 1c             	sub    esp,0x1c
c0019b21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b29:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b2d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b31:	88 c3                	mov    bl,al
c0019b33:	84 c0                	test   al,al
c0019b35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b39:	0f 84 81 00 00 00    	je     c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3f:	83 ec 0c             	sub    esp,0xc
c0019b42:	68 27 f3 01 c0       	push   0xc001f327
c0019b47:	e8 9c 10 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b53:	3c 01                	cmp    al,0x1
c0019b55:	74 63                	je     c0019bba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b57:	3c 02                	cmp    al,0x2
c0019b59:	75 53                	jne    c0019bae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b5b:	01 f6                	add    esi,esi
c0019b5d:	09 ee                	or     esi,ebp
c0019b5f:	50                   	push   eax
c0019b60:	89 f0                	mov    eax,esi
c0019b62:	6a 01                	push   0x1
c0019b64:	0f b6 f0             	movzx  esi,al
c0019b67:	c1 e6 06             	shl    esi,0x6
c0019b6a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b72:	50                   	push   eax
c0019b73:	57                   	push   edi
c0019b74:	e8 73 f6 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019b79:	83 c4 10             	add    esp,0x10
c0019b7c:	a8 01                	test   al,0x1
c0019b7e:	74 02                	je     c0019b82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b80:	b3 07                	mov    bl,0x7
c0019b82:	a8 02                	test   al,0x2
c0019b84:	74 02                	je     c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b86:	b3 03                	mov    bl,0x3
c0019b88:	a8 04                	test   al,0x4
c0019b8a:	74 02                	je     c0019b8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b8c:	b3 14                	mov    bl,0x14
c0019b8e:	a8 08                	test   al,0x8
c0019b90:	74 02                	je     c0019b94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b92:	b3 03                	mov    bl,0x3
c0019b94:	a8 10                	test   al,0x10
c0019b96:	74 02                	je     c0019b9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b98:	b3 15                	mov    bl,0x15
c0019b9a:	a8 20                	test   al,0x20
c0019b9c:	74 02                	je     c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b9e:	b3 03                	mov    bl,0x3
c0019ba0:	a8 40                	test   al,0x40
c0019ba2:	74 02                	je     c0019ba6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019ba4:	b3 16                	mov    bl,0x16
c0019ba6:	84 c0                	test   al,al
c0019ba8:	79 16                	jns    c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019baa:	b3 0d                	mov    bl,0xd
c0019bac:	eb 12                	jmp    c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bae:	3c 03                	cmp    al,0x3
c0019bb0:	74 0c                	je     c0019bbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019bb2:	3c 04                	cmp    al,0x4
c0019bb4:	75 0a                	jne    c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bb6:	b3 08                	mov    bl,0x8
c0019bb8:	eb 06                	jmp    c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bba:	b3 13                	mov    bl,0x13
c0019bbc:	eb 02                	jmp    c0019bc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bbe:	b3 17                	mov    bl,0x17
c0019bc0:	83 c4 1c             	add    esp,0x1c
c0019bc3:	88 d8                	mov    al,bl
c0019bc5:	5b                   	pop    ebx
c0019bc6:	5e                   	pop    esi
c0019bc7:	5f                   	pop    edi
c0019bc8:	5d                   	pop    ebp
c0019bc9:	c3                   	ret    

c0019bca <IDE::polling(unsigned char, unsigned int)>:
c0019bca:	55                   	push   ebp
c0019bcb:	bd 04 00 00 00       	mov    ebp,0x4
c0019bd0:	57                   	push   edi
c0019bd1:	56                   	push   esi
c0019bd2:	53                   	push   ebx
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bda:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bde:	0f b6 f3             	movzx  esi,bl
c0019be1:	52                   	push   edx
c0019be2:	6a 0c                	push   0xc
c0019be4:	56                   	push   esi
c0019be5:	57                   	push   edi
c0019be6:	e8 01 f6 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	4d                   	dec    ebp
c0019bef:	75 ed                	jne    c0019bde <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bf1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bf6:	50                   	push   eax
c0019bf7:	6a 0c                	push   0xc
c0019bf9:	56                   	push   esi
c0019bfa:	57                   	push   edi
c0019bfb:	e8 ec f5 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	a8 01                	test   al,0x1
c0019c05:	75 17                	jne    c0019c1e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c07:	a8 20                	test   al,0x20
c0019c09:	75 0f                	jne    c0019c1a <IDE::polling(unsigned char, unsigned int)+0x50>
c0019c0b:	4b                   	dec    ebx
c0019c0c:	74 10                	je     c0019c1e <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c0e:	84 c0                	test   al,al
c0019c10:	78 e4                	js     c0019bf6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c12:	a8 08                	test   al,0x8
c0019c14:	74 e0                	je     c0019bf6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c16:	31 c0                	xor    eax,eax
c0019c18:	eb 06                	jmp    c0019c20 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c1a:	b0 01                	mov    al,0x1
c0019c1c:	eb 02                	jmp    c0019c20 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c1e:	b0 02                	mov    al,0x2
c0019c20:	83 c4 0c             	add    esp,0xc
c0019c23:	5b                   	pop    ebx
c0019c24:	5e                   	pop    esi
c0019c25:	5f                   	pop    edi
c0019c26:	5d                   	pop    ebp
c0019c27:	c3                   	ret    

c0019c28 <SATABus::close(int, int, void*)>:
c0019c28:	31 c0                	xor    eax,eax
c0019c2a:	c3                   	ret    
c0019c2b:	90                   	nop

c0019c2c <SATABus::detect()>:
c0019c2c:	c3                   	ret    
c0019c2d:	90                   	nop

c0019c2e <SATABus::SATABus()>:
c0019c2e:	83 ec 0c             	sub    esp,0xc
c0019c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c35:	83 ec 08             	sub    esp,0x8
c0019c38:	68 60 f3 01 c0       	push   0xc001f360
c0019c3d:	50                   	push   eax
c0019c3e:	e8 29 27 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c0019c43:	83 c4 10             	add    esp,0x10
c0019c46:	ba 8c f3 01 c0       	mov    edx,0xc001f38c
c0019c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4f:	89 10                	mov    DWORD PTR [eax],edx
c0019c51:	83 ec 0c             	sub    esp,0xc
c0019c54:	6a 50                	push   0x50
c0019c56:	e8 89 e6 fe ff       	call   c00082e4 <Phys::allocateContiguousPages(int)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	89 c2                	mov    edx,eax
c0019c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	6a 50                	push   0x50
c0019c6f:	e8 21 fd fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	89 c2                	mov    edx,eax
c0019c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c83:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0019c88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c8c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c96:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	6a 03                	push   0x3
c0019ca1:	6a 50                	push   0x50
c0019ca3:	51                   	push   ecx
c0019ca4:	52                   	push   edx
c0019ca5:	50                   	push   eax
c0019ca6:	e8 79 06 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019cab:	83 c4 20             	add    esp,0x20
c0019cae:	90                   	nop
c0019caf:	83 c4 0c             	add    esp,0xc
c0019cb2:	c3                   	ret    
c0019cb3:	90                   	nop

c0019cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019cbb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cbe:	09 c2                	or     edx,eax
c0019cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ccc:	31 c0                	xor    eax,eax
c0019cce:	c1 e9 08             	shr    ecx,0x8
c0019cd1:	83 e1 0f             	and    ecx,0xf
c0019cd4:	39 c8                	cmp    eax,ecx
c0019cd6:	74 0a                	je     c0019ce2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cd8:	f6 c2 01             	test   dl,0x1
c0019cdb:	74 08                	je     c0019ce5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cdd:	d1 ea                	shr    edx,1
c0019cdf:	40                   	inc    eax
c0019ce0:	eb f2                	jmp    c0019cd4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019ce2:	83 c8 ff             	or     eax,0xffffffff
c0019ce5:	c3                   	ret    

c0019ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019ce6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ced:	89 c2                	mov    edx,eax
c0019cef:	c1 ea 08             	shr    edx,0x8
c0019cf2:	83 e2 0f             	and    edx,0xf
c0019cf5:	fe ca                	dec    dl
c0019cf7:	75 31                	jne    c0019d2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cf9:	83 e0 0f             	and    eax,0xf
c0019cfc:	3c 03                	cmp    al,0x3
c0019cfe:	75 2a                	jne    c0019d2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d00:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019d03:	b8 02 00 00 00       	mov    eax,0x2
c0019d08:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019d0e:	74 1c                	je     c0019d2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d10:	b8 04 00 00 00       	mov    eax,0x4
c0019d15:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d1b:	74 0f                	je     c0019d2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d1d:	31 c0                	xor    eax,eax
c0019d1f:	83 fa 03             	cmp    edx,0x3
c0019d22:	0f 94 c0             	sete   al
c0019d25:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d29:	c3                   	ret    
c0019d2a:	31 c0                	xor    eax,eax
c0019d2c:	c3                   	ret    
c0019d2d:	90                   	nop

c0019d2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d35:	0f ba e2 0f          	bt     edx,0xf
c0019d39:	72 f7                	jb     c0019d32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d3e:	83 ca 10             	or     edx,0x10
c0019d41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d44:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d47:	83 ca 01             	or     edx,0x1
c0019d4a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d4d:	c3                   	ret    

c0019d4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d55:	83 e2 fe             	and    edx,0xfffffffe
c0019d58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d5e:	83 e2 ef             	and    edx,0xffffffef
c0019d61:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d67:	0f ba e2 0e          	bt     edx,0xe
c0019d6b:	72 f7                	jb     c0019d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d6d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d70:	0f ba e2 0f          	bt     edx,0xf
c0019d74:	72 ee                	jb     c0019d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d76:	c3                   	ret    
c0019d77:	90                   	nop

c0019d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d78:	55                   	push   ebp
c0019d79:	57                   	push   edi
c0019d7a:	56                   	push   esi
c0019d7b:	53                   	push   ebx
c0019d7c:	83 ec 1c             	sub    esp,0x1c
c0019d7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d87:	53                   	push   ebx
c0019d88:	56                   	push   esi
c0019d89:	e8 c0 ff ff ff       	call   c0019d4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d8e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d92:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	c1 e5 0a             	shl    ebp,0xa
c0019d9e:	01 e8                	add    eax,ebp
c0019da0:	89 03                	mov    DWORD PTR [ebx],eax
c0019da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da4:	68 00 04 00 00       	push   0x400
c0019da9:	6a 00                	push   0x0
c0019dab:	50                   	push   eax
c0019dac:	e8 3f 67 fe ff       	call   c00004f0 <memset>
c0019db1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019db7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019dbb:	01 e8                	add    eax,ebp
c0019dbd:	83 c4 1c             	add    esp,0x1c
c0019dc0:	89 03                	mov    DWORD PTR [ebx],eax
c0019dc2:	c1 e2 08             	shl    edx,0x8
c0019dc5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dcc:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dd2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019dd8:	01 f8                	add    eax,edi
c0019dda:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019ddd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019de0:	68 00 01 00 00       	push   0x100
c0019de5:	6a 00                	push   0x0
c0019de7:	50                   	push   eax
c0019de8:	e8 03 67 fe ff       	call   c00004f0 <memset>
c0019ded:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019df3:	01 fa                	add    edx,edi
c0019df5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019df9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019dfc:	c1 e7 0d             	shl    edi,0xd
c0019dff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019e06:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019e0c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e16:	31 ff                	xor    edi,edi
c0019e18:	83 c4 10             	add    esp,0x10
c0019e1b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e25:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e2b:	83 c5 20             	add    ebp,0x20
c0019e2e:	01 f8                	add    eax,edi
c0019e30:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e33:	52                   	push   edx
c0019e34:	68 00 01 00 00       	push   0x100
c0019e39:	6a 00                	push   0x0
c0019e3b:	50                   	push   eax
c0019e3c:	e8 af 66 fe ff       	call   c00004f0 <memset>
c0019e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e55:	01 f8                	add    eax,edi
c0019e57:	81 c7 00 01 00 00    	add    edi,0x100
c0019e5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e60:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e66:	75 b3                	jne    c0019e1b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e68:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e6f:	50                   	push   eax
c0019e70:	50                   	push   eax
c0019e71:	53                   	push   ebx
c0019e72:	56                   	push   esi
c0019e73:	e8 b6 fe ff ff       	call   c0019d2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e78:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e7f:	83 c4 2c             	add    esp,0x2c
c0019e82:	5b                   	pop    ebx
c0019e83:	5e                   	pop    esi
c0019e84:	5f                   	pop    edi
c0019e85:	5d                   	pop    ebp
c0019e86:	c3                   	ret    
c0019e87:	90                   	nop

c0019e88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e88:	55                   	push   ebp
c0019e89:	57                   	push   edi
c0019e8a:	56                   	push   esi
c0019e8b:	53                   	push   ebx
c0019e8c:	31 db                	xor    ebx,ebx
c0019e8e:	83 ec 0c             	sub    esp,0xc
c0019e91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e99:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e9c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019ea2:	74 7a                	je     c0019f1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ea4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019ea8:	89 d8                	mov    eax,ebx
c0019eaa:	c1 e0 07             	shl    eax,0x7
c0019ead:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019eb4:	55                   	push   ebp
c0019eb5:	56                   	push   esi
c0019eb6:	e8 2b fe ff ff       	call   c0019ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ebb:	5a                   	pop    edx
c0019ebc:	83 f8 01             	cmp    eax,0x1
c0019ebf:	59                   	pop    ecx
c0019ec0:	75 21                	jne    c0019ee3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ec2:	50                   	push   eax
c0019ec3:	53                   	push   ebx
c0019ec4:	55                   	push   ebp
c0019ec5:	56                   	push   esi
c0019ec6:	e8 ad fe ff ff       	call   c0019d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ecb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019ed2:	e8 82 df fe ff       	call   c0007e59 <malloc>
c0019ed7:	89 c5                	mov    ebp,eax
c0019ed9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019edc:	e8 43 0d 00 00       	call   c001ac24 <SATA::SATA()>
c0019ee1:	eb 24                	jmp    c0019f07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ee3:	83 f8 04             	cmp    eax,0x4
c0019ee6:	75 36                	jne    c0019f1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ee8:	51                   	push   ecx
c0019ee9:	53                   	push   ebx
c0019eea:	55                   	push   ebp
c0019eeb:	56                   	push   esi
c0019eec:	e8 87 fe ff ff       	call   c0019d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ef1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ef8:	e8 5c df fe ff       	call   c0007e59 <malloc>
c0019efd:	89 c5                	mov    ebp,eax
c0019eff:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f02:	e8 79 10 00 00       	call   c001af80 <SATAPI::SATAPI()>
c0019f07:	58                   	pop    eax
c0019f08:	5a                   	pop    edx
c0019f09:	55                   	push   ebp
c0019f0a:	56                   	push   esi
c0019f0b:	e8 18 21 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0019f10:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f13:	56                   	push   esi
c0019f14:	6a 00                	push   0x0
c0019f16:	53                   	push   ebx
c0019f17:	55                   	push   ebp
c0019f18:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f1b:	83 c4 20             	add    esp,0x20
c0019f1e:	d1 ef                	shr    edi,1
c0019f20:	43                   	inc    ebx
c0019f21:	83 fb 20             	cmp    ebx,0x20
c0019f24:	0f 85 72 ff ff ff    	jne    c0019e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f2a:	83 c4 0c             	add    esp,0xc
c0019f2d:	5b                   	pop    ebx
c0019f2e:	5e                   	pop    esi
c0019f2f:	5f                   	pop    edi
c0019f30:	5d                   	pop    ebp
c0019f31:	c3                   	ret    

c0019f32 <SATABus::open(int, int, void*)>:
c0019f32:	83 ec 14             	sub    esp,0x14
c0019f35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f39:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f3f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f45:	52                   	push   edx
c0019f46:	50                   	push   eax
c0019f47:	e8 3c ff ff ff       	call   c0019e88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f4c:	31 c0                	xor    eax,eax
c0019f4e:	83 c4 1c             	add    esp,0x1c
c0019f51:	c3                   	ret    

c0019f52 <ATA::close(int, int, void*)>:
c0019f52:	83 ec 0c             	sub    esp,0xc
c0019f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f59:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f5f:	85 c0                	test   eax,eax
c0019f61:	74 0c                	je     c0019f6f <ATA::close(int, int, void*)+0x1d>
c0019f63:	83 ec 0c             	sub    esp,0xc
c0019f66:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f68:	50                   	push   eax
c0019f69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	31 c0                	xor    eax,eax
c0019f71:	83 c4 0c             	add    esp,0xc
c0019f74:	c3                   	ret    
c0019f75:	90                   	nop

c0019f76 <ATA::powerSaving(PowerSavingLevel)>:
c0019f76:	c3                   	ret    
c0019f77:	90                   	nop

c0019f78 <ATA::ATA()>:
c0019f78:	83 ec 0c             	sub    esp,0xc
c0019f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7f:	83 ec 04             	sub    esp,0x4
c0019f82:	68 00 02 00 00       	push   0x200
c0019f87:	68 59 f4 01 c0       	push   0xc001f459
c0019f8c:	50                   	push   eax
c0019f8d:	e8 64 24 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c0019f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9e:	89 10                	mov    DWORD PTR [eax],edx
c0019fa0:	90                   	nop
c0019fa1:	83 c4 0c             	add    esp,0xc
c0019fa4:	c3                   	ret    
c0019fa5:	90                   	nop

c0019fa6 <ATA::flush(bool)>:
c0019fa6:	53                   	push   ebx
c0019fa7:	83 ec 08             	sub    esp,0x8
c0019faa:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019faf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fb3:	19 c0                	sbb    eax,eax
c0019fb5:	83 e0 fd             	and    eax,0xfffffffd
c0019fb8:	05 ea 00 00 00       	add    eax,0xea
c0019fbd:	50                   	push   eax
c0019fbe:	6a 07                	push   0x7
c0019fc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fc7:	50                   	push   eax
c0019fc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fce:	e8 59 f1 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fd3:	83 c4 0c             	add    esp,0xc
c0019fd6:	6a 00                	push   0x0
c0019fd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fdf:	50                   	push   eax
c0019fe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fe6:	e8 df fb ff ff       	call   c0019bca <IDE::polling(unsigned char, unsigned int)>
c0019feb:	83 c4 18             	add    esp,0x18
c0019fee:	5b                   	pop    ebx
c0019fef:	c3                   	ret    

c0019ff0 <ATA::readyForCommand()>:
c0019ff0:	56                   	push   esi
c0019ff1:	53                   	push   ebx
c0019ff2:	53                   	push   ebx
c0019ff3:	31 db                	xor    ebx,ebx
c0019ff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ff9:	51                   	push   ecx
c0019ffa:	6a 0c                	push   0xc
c0019ffc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a003:	50                   	push   eax
c001a004:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a00a:	e8 dd f1 ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	a8 88                	test   al,0x88
c001a014:	74 1f                	je     c001a035 <ATA::readyForCommand()+0x45>
c001a016:	43                   	inc    ebx
c001a017:	83 fb 63             	cmp    ebx,0x63
c001a01a:	7e dd                	jle    c0019ff9 <ATA::readyForCommand()+0x9>
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	6a 0a                	push   0xa
c001a021:	e8 a6 9d ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a02f:	75 c8                	jne    c0019ff9 <ATA::readyForCommand()+0x9>
c001a031:	31 c0                	xor    eax,eax
c001a033:	eb 02                	jmp    c001a037 <ATA::readyForCommand()+0x47>
c001a035:	b0 01                	mov    al,0x1
c001a037:	5a                   	pop    edx
c001a038:	5b                   	pop    ebx
c001a039:	5e                   	pop    esi
c001a03a:	c3                   	ret    
c001a03b:	90                   	nop

c001a03c <ATA::access(unsigned long long, int, void*, bool)>:
c001a03c:	55                   	push   ebp
c001a03d:	57                   	push   edi
c001a03e:	56                   	push   esi
c001a03f:	53                   	push   ebx
c001a040:	83 ec 2c             	sub    esp,0x2c
c001a043:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a047:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a04b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a04f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a053:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a057:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a05b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a05f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a065:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a069:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a06f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a073:	c1 e0 06             	shl    eax,0x6
c001a076:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a07e:	74 5d                	je     c001a0dd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a080:	89 fa                	mov    edx,edi
c001a082:	89 f0                	mov    eax,esi
c001a084:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a088:	c1 ea 1c             	shr    edx,0x1c
c001a08b:	89 d1                	mov    ecx,edx
c001a08d:	09 c1                	or     ecx,eax
c001a08f:	74 25                	je     c001a0b6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a091:	31 ed                	xor    ebp,ebp
c001a093:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a09a:	89 fa                	mov    edx,edi
c001a09c:	89 f0                	mov    eax,esi
c001a09e:	0f ad d0             	shrd   eax,edx,cl
c001a0a1:	d3 ea                	shr    edx,cl
c001a0a3:	f6 c1 20             	test   cl,0x20
c001a0a6:	74 02                	je     c001a0aa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a0a8:	89 d0                	mov    eax,edx
c001a0aa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a0ae:	45                   	inc    ebp
c001a0af:	83 fd 06             	cmp    ebp,0x6
c001a0b2:	75 df                	jne    c001a093 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a0b4:	eb 76                	jmp    c001a12c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a0b6:	89 f0                	mov    eax,esi
c001a0b8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0bd:	89 fa                	mov    edx,edi
c001a0bf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0c6:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0cf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0d3:	c1 ee 18             	shr    esi,0x18
c001a0d6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0db:	eb 56                	jmp    c001a133 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0dd:	6a 00                	push   0x0
c001a0df:	6a 3f                	push   0x3f
c001a0e1:	57                   	push   edi
c001a0e2:	56                   	push   esi
c001a0e3:	e8 58 22 00 00       	call   c001c340 <__umoddi3>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	40                   	inc    eax
c001a0ec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0f0:	6a 00                	push   0x0
c001a0f2:	68 f0 03 00 00       	push   0x3f0
c001a0f7:	57                   	push   edi
c001a0f8:	56                   	push   esi
c001a0f9:	e8 42 21 00 00       	call   c001c240 <__udivdi3>
c001a0fe:	83 c4 10             	add    esp,0x10
c001a101:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a106:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a10d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a112:	6a 00                	push   0x0
c001a114:	6a 3f                	push   0x3f
c001a116:	57                   	push   edi
c001a117:	56                   	push   esi
c001a118:	e8 23 21 00 00       	call   c001c240 <__udivdi3>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	89 c6                	mov    esi,eax
c001a122:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a127:	83 e6 0f             	and    esi,0xf
c001a12a:	eb 07                	jmp    c001a133 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a12c:	31 f6                	xor    esi,esi
c001a12e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a133:	bf 01 00 00 00       	mov    edi,0x1
c001a138:	50                   	push   eax
c001a139:	6a 00                	push   0x0
c001a13b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a142:	50                   	push   eax
c001a143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a147:	e8 ee f1 ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c001a14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a14f:	e8 9c fe ff ff       	call   c0019ff0 <ATA::readyForCommand()>
c001a154:	83 c4 10             	add    esp,0x10
c001a157:	84 c0                	test   al,al
c001a159:	0f 84 4e 02 00 00    	je     c001a3ad <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a15f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a165:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a16b:	c1 e0 04             	shl    eax,0x4
c001a16e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a175:	09 c6                	or     esi,eax
c001a177:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a17c:	75 05                	jne    c001a183 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a17e:	83 ce a0             	or     esi,0xffffffa0
c001a181:	eb 03                	jmp    c001a186 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a183:	83 ce e0             	or     esi,0xffffffe0
c001a186:	89 f0                	mov    eax,esi
c001a188:	0f b6 f0             	movzx  esi,al
c001a18b:	56                   	push   esi
c001a18c:	6a 06                	push   0x6
c001a18e:	51                   	push   ecx
c001a18f:	52                   	push   edx
c001a190:	e8 97 ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a195:	83 c4 10             	add    esp,0x10
c001a198:	6a 00                	push   0x0
c001a19a:	6a 01                	push   0x1
c001a19c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a3:	50                   	push   eax
c001a1a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1aa:	e8 7d ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1b7:	75 6e                	jne    c001a227 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1b9:	6a 00                	push   0x0
c001a1bb:	6a 08                	push   0x8
c001a1bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c4:	50                   	push   eax
c001a1c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1cb:	e8 5c ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1d5:	50                   	push   eax
c001a1d6:	6a 09                	push   0x9
c001a1d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1df:	50                   	push   eax
c001a1e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e6:	e8 41 ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1eb:	83 c4 20             	add    esp,0x20
c001a1ee:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1f3:	50                   	push   eax
c001a1f4:	6a 0a                	push   0xa
c001a1f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fd:	50                   	push   eax
c001a1fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a204:	e8 23 ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a209:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a20e:	50                   	push   eax
c001a20f:	6a 0b                	push   0xb
c001a211:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a218:	50                   	push   eax
c001a219:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a21f:	e8 08 ef ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a224:	83 c4 20             	add    esp,0x20
c001a227:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a22c:	50                   	push   eax
c001a22d:	6a 02                	push   0x2
c001a22f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a236:	50                   	push   eax
c001a237:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23d:	e8 ea ee ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a242:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a247:	50                   	push   eax
c001a248:	6a 03                	push   0x3
c001a24a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a251:	50                   	push   eax
c001a252:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a258:	e8 cf ee ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a25d:	83 c4 20             	add    esp,0x20
c001a260:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a265:	50                   	push   eax
c001a266:	6a 04                	push   0x4
c001a268:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26f:	50                   	push   eax
c001a270:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a276:	e8 b1 ee ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a280:	50                   	push   eax
c001a281:	6a 05                	push   0x5
c001a283:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a28a:	50                   	push   eax
c001a28b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a291:	e8 96 ee ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a296:	83 c4 20             	add    esp,0x20
c001a299:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a29e:	0f 94 c0             	sete   al
c001a2a1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2a6:	74 09                	je     c001a2b1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a2a8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a2af:	eb 07                	jmp    c001a2b8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a2b1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2b8:	0f b6 c0             	movzx  eax,al
c001a2bb:	50                   	push   eax
c001a2bc:	6a 07                	push   0x7
c001a2be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2c5:	50                   	push   eax
c001a2c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2cc:	e8 5b ee ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2d1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	85 f6                	test   esi,esi
c001a2da:	0f 84 ae 00 00 00    	je     c001a38e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2e0:	50                   	push   eax
c001a2e1:	6a 01                	push   0x1
c001a2e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ea:	50                   	push   eax
c001a2eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2f1:	e8 d4 f8 ff ff       	call   c0019bca <IDE::polling(unsigned char, unsigned int)>
c001a2f6:	83 c4 10             	add    esp,0x10
c001a2f9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2ff:	84 c0                	test   al,al
c001a301:	74 20                	je     c001a323 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a303:	0f b6 f8             	movzx  edi,al
c001a306:	0f b6 d2             	movzx  edx,dl
c001a309:	57                   	push   edi
c001a30a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a311:	50                   	push   eax
c001a312:	52                   	push   edx
c001a313:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a319:	e8 fc f7 ff ff       	call   c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a31e:	e9 87 00 00 00       	jmp    c001a3aa <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a323:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a328:	74 33                	je     c001a35d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a32a:	31 ed                	xor    ebp,ebp
c001a32c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a330:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a334:	50                   	push   eax
c001a335:	50                   	push   eax
c001a336:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a33d:	50                   	push   eax
c001a33e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a344:	e8 d1 ed ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a349:	89 c2                	mov    edx,eax
c001a34b:	89 f8                	mov    eax,edi
c001a34d:	66 ef                	out    dx,ax
c001a34f:	45                   	inc    ebp
c001a350:	83 c4 10             	add    esp,0x10
c001a353:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a359:	75 d1                	jne    c001a32c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a35b:	eb 23                	jmp    c001a380 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a35d:	0f b6 d2             	movzx  edx,dl
c001a360:	51                   	push   ecx
c001a361:	51                   	push   ecx
c001a362:	52                   	push   edx
c001a363:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a369:	e8 ac ed ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a36e:	b9 00 01 00 00       	mov    ecx,0x100
c001a373:	89 c2                	mov    edx,eax
c001a375:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a379:	fc                   	cld    
c001a37a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a388:	4e                   	dec    esi
c001a389:	e9 4a ff ff ff       	jmp    c001a2d8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a38e:	31 ff                	xor    edi,edi
c001a390:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a395:	74 16                	je     c001a3ad <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a397:	50                   	push   eax
c001a398:	50                   	push   eax
c001a399:	31 c0                	xor    eax,eax
c001a39b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a3a0:	0f 94 c0             	sete   al
c001a3a3:	50                   	push   eax
c001a3a4:	53                   	push   ebx
c001a3a5:	e8 fc fb ff ff       	call   c0019fa6 <ATA::flush(bool)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	83 c4 2c             	add    esp,0x2c
c001a3b0:	89 f8                	mov    eax,edi
c001a3b2:	5b                   	pop    ebx
c001a3b3:	5e                   	pop    esi
c001a3b4:	5f                   	pop    edi
c001a3b5:	5d                   	pop    ebp
c001a3b6:	c3                   	ret    
c001a3b7:	90                   	nop

c001a3b8 <ATA::read(unsigned long long, int, void*)>:
c001a3b8:	57                   	push   edi
c001a3b9:	b8 04 00 00 00       	mov    eax,0x4
c001a3be:	56                   	push   esi
c001a3bf:	53                   	push   ebx
c001a3c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3c8:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3d3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3d9:	77 25                	ja     c001a400 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3db:	b8 06 00 00 00       	mov    eax,0x6
c001a3e0:	85 f6                	test   esi,esi
c001a3e2:	74 1c                	je     c001a400 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3e4:	50                   	push   eax
c001a3e5:	50                   	push   eax
c001a3e6:	6a 00                	push   0x0
c001a3e8:	56                   	push   esi
c001a3e9:	52                   	push   edx
c001a3ea:	53                   	push   ebx
c001a3eb:	51                   	push   ecx
c001a3ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f0:	e8 47 fc ff ff       	call   c001a03c <ATA::access(unsigned long long, int, void*, bool)>
c001a3f5:	83 c4 20             	add    esp,0x20
c001a3f8:	85 c0                	test   eax,eax
c001a3fa:	0f 95 c0             	setne  al
c001a3fd:	0f b6 c0             	movzx  eax,al
c001a400:	5b                   	pop    ebx
c001a401:	5e                   	pop    esi
c001a402:	5f                   	pop    edi
c001a403:	c3                   	ret    

c001a404 <ATA::write(unsigned long long, int, void*)>:
c001a404:	57                   	push   edi
c001a405:	b8 04 00 00 00       	mov    eax,0x4
c001a40a:	56                   	push   esi
c001a40b:	53                   	push   ebx
c001a40c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a410:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a414:	8d 7a ff             	lea    edi,[edx-0x1]
c001a417:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a41b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a41f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a425:	77 25                	ja     c001a44c <ATA::write(unsigned long long, int, void*)+0x48>
c001a427:	b8 06 00 00 00       	mov    eax,0x6
c001a42c:	85 f6                	test   esi,esi
c001a42e:	74 1c                	je     c001a44c <ATA::write(unsigned long long, int, void*)+0x48>
c001a430:	50                   	push   eax
c001a431:	50                   	push   eax
c001a432:	6a 01                	push   0x1
c001a434:	56                   	push   esi
c001a435:	52                   	push   edx
c001a436:	53                   	push   ebx
c001a437:	51                   	push   ecx
c001a438:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a43c:	e8 fb fb ff ff       	call   c001a03c <ATA::access(unsigned long long, int, void*, bool)>
c001a441:	83 c4 20             	add    esp,0x20
c001a444:	85 c0                	test   eax,eax
c001a446:	0f 95 c0             	setne  al
c001a449:	0f b6 c0             	movzx  eax,al
c001a44c:	5b                   	pop    ebx
c001a44d:	5e                   	pop    esi
c001a44e:	5f                   	pop    edi
c001a44f:	c3                   	ret    

c001a450 <ATA::detectCHS()>:
c001a450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a454:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a45a:	c1 e0 06             	shl    eax,0x6
c001a45d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a463:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a46d:	c7 44 24 04 b0 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f3b0
c001a475:	e9 fd 62 ff ff       	jmp    c0010777 <Krnl::panic(char const*)>

c001a47a <ATA::open(int, int, void*)>:
c001a47a:	53                   	push   ebx
c001a47b:	83 ec 08             	sub    esp,0x8
c001a47e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a482:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a48a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a490:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a496:	c1 e0 06             	shl    eax,0x6
c001a499:	01 d0                	add    eax,edx
c001a49b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a4a2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a4a8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a4af:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a4b9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4bf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4c6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4cd:	75 0c                	jne    c001a4db <ATA::open(int, int, void*)+0x61>
c001a4cf:	83 ec 0c             	sub    esp,0xc
c001a4d2:	53                   	push   ebx
c001a4d3:	e8 78 ff ff ff       	call   c001a450 <ATA::detectCHS()>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4e1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4e7:	c1 e0 06             	shl    eax,0x6
c001a4ea:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4f1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4fb:	d1 e8                	shr    eax,1
c001a4fd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a503:	6a 04                	push   0x4
c001a505:	6a 0c                	push   0xc
c001a507:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a50e:	50                   	push   eax
c001a50f:	52                   	push   edx
c001a510:	e8 17 ec ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a515:	90                   	nop
c001a516:	90                   	nop
c001a517:	6a 00                	push   0x0
c001a519:	6a 0c                	push   0xc
c001a51b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a522:	50                   	push   eax
c001a523:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a529:	e8 fe eb ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52e:	83 c4 14             	add    esp,0x14
c001a531:	53                   	push   ebx
c001a532:	e8 27 1f ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001a537:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a53a:	e8 97 2f ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001a53f:	31 c0                	xor    eax,eax
c001a541:	83 c4 18             	add    esp,0x18
c001a544:	5b                   	pop    ebx
c001a545:	c3                   	ret    

c001a546 <ATAPI::write(unsigned long long, int, void*)>:
c001a546:	b8 03 00 00 00       	mov    eax,0x3
c001a54b:	c3                   	ret    

c001a54c <ATAPI::close(int, int, void*)>:
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a553:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a559:	85 c0                	test   eax,eax
c001a55b:	74 0c                	je     c001a569 <ATAPI::close(int, int, void*)+0x1d>
c001a55d:	83 ec 0c             	sub    esp,0xc
c001a560:	8b 10                	mov    edx,DWORD PTR [eax]
c001a562:	50                   	push   eax
c001a563:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	31 c0                	xor    eax,eax
c001a56b:	83 c4 0c             	add    esp,0xc
c001a56e:	c3                   	ret    
c001a56f:	90                   	nop

c001a570 <ATAPI::ATAPI()>:
c001a570:	83 ec 0c             	sub    esp,0xc
c001a573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a577:	83 ec 04             	sub    esp,0x4
c001a57a:	68 00 08 00 00       	push   0x800
c001a57f:	68 f9 f4 01 c0       	push   0xc001f4f9
c001a584:	50                   	push   eax
c001a585:	e8 6c 1e ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a58a:	83 c4 10             	add    esp,0x10
c001a58d:	ba 14 f4 01 c0       	mov    edx,0xc001f414
c001a592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a596:	89 10                	mov    DWORD PTR [eax],edx
c001a598:	90                   	nop
c001a599:	83 c4 0c             	add    esp,0xc
c001a59c:	c3                   	ret    
c001a59d:	90                   	nop

c001a59e <ATAPI::readyForCommand()>:
c001a59e:	56                   	push   esi
c001a59f:	53                   	push   ebx
c001a5a0:	53                   	push   ebx
c001a5a1:	31 db                	xor    ebx,ebx
c001a5a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5a7:	51                   	push   ecx
c001a5a8:	6a 0c                	push   0xc
c001a5aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a5b1:	50                   	push   eax
c001a5b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a5b8:	e8 2f ec ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	a8 88                	test   al,0x88
c001a5c2:	74 25                	je     c001a5e9 <ATAPI::readyForCommand()+0x4b>
c001a5c4:	43                   	inc    ebx
c001a5c5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5cb:	7e da                	jle    c001a5a7 <ATAPI::readyForCommand()+0x9>
c001a5cd:	83 ec 0c             	sub    esp,0xc
c001a5d0:	68 5e 01 00 00       	push   0x15e
c001a5d5:	e8 f2 97 ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5e3:	75 c2                	jne    c001a5a7 <ATAPI::readyForCommand()+0x9>
c001a5e5:	31 c0                	xor    eax,eax
c001a5e7:	eb 02                	jmp    c001a5eb <ATAPI::readyForCommand()+0x4d>
c001a5e9:	b0 01                	mov    al,0x1
c001a5eb:	5a                   	pop    edx
c001a5ec:	5b                   	pop    ebx
c001a5ed:	5e                   	pop    esi
c001a5ee:	c3                   	ret    
c001a5ef:	90                   	nop

c001a5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5f0:	55                   	push   ebp
c001a5f1:	57                   	push   edi
c001a5f2:	56                   	push   esi
c001a5f3:	53                   	push   ebx
c001a5f4:	83 ec 20             	sub    esp,0x20
c001a5f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a603:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a607:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a60b:	6a 01                	push   0x1
c001a60d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a614:	50                   	push   eax
c001a615:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a61b:	e8 1a ed ff ff       	call   c001933a <IDE::enableIRQs(unsigned char, bool)>
c001a620:	5e                   	pop    esi
c001a621:	58                   	pop    eax
c001a622:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a629:	50                   	push   eax
c001a62a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a630:	e8 d1 ea ff ff       	call   c0019106 <IDE::prepareInterrupt(unsigned char)>
c001a635:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a638:	e8 61 ff ff ff       	call   c001a59e <ATAPI::readyForCommand()>
c001a63d:	83 c4 10             	add    esp,0x10
c001a640:	84 c0                	test   al,al
c001a642:	75 0a                	jne    c001a64e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a644:	bb 01 00 00 00       	mov    ebx,0x1
c001a649:	e9 57 02 00 00       	jmp    c001a8a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a64e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a654:	c1 e0 04             	shl    eax,0x4
c001a657:	0f b6 c0             	movzx  eax,al
c001a65a:	50                   	push   eax
c001a65b:	6a 06                	push   0x6
c001a65d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a664:	50                   	push   eax
c001a665:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a66b:	e8 bc ea ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a670:	6a 00                	push   0x0
c001a672:	6a 01                	push   0x1
c001a674:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a67b:	50                   	push   eax
c001a67c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a682:	e8 a5 ea ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a687:	83 c4 20             	add    esp,0x20
c001a68a:	0f b6 c3             	movzx  eax,bl
c001a68d:	0f b6 df             	movzx  ebx,bh
c001a690:	50                   	push   eax
c001a691:	6a 04                	push   0x4
c001a693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a69a:	50                   	push   eax
c001a69b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a1:	e8 86 ea ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a6:	53                   	push   ebx
c001a6a7:	6a 05                	push   0x5
c001a6a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b0:	50                   	push   eax
c001a6b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b7:	e8 70 ea ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6bc:	83 c4 20             	add    esp,0x20
c001a6bf:	68 a0 00 00 00       	push   0xa0
c001a6c4:	6a 07                	push   0x7
c001a6c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6cd:	50                   	push   eax
c001a6ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d4:	e8 53 ea ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6d9:	83 c4 0c             	add    esp,0xc
c001a6dc:	6a 01                	push   0x1
c001a6de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e5:	50                   	push   eax
c001a6e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6ec:	e8 d9 f4 ff ff       	call   c0019bca <IDE::polling(unsigned char, unsigned int)>
c001a6f1:	83 c4 10             	add    esp,0x10
c001a6f4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6fa:	84 c0                	test   al,al
c001a6fc:	74 23                	je     c001a721 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6fe:	0f b6 d8             	movzx  ebx,al
c001a701:	0f b6 d2             	movzx  edx,dl
c001a704:	53                   	push   ebx
c001a705:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a70c:	50                   	push   eax
c001a70d:	52                   	push   edx
c001a70e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a714:	e8 01 f4 ff ff       	call   c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a719:	83 c4 10             	add    esp,0x10
c001a71c:	e9 84 01 00 00       	jmp    c001a8a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a721:	0f b6 d2             	movzx  edx,dl
c001a724:	53                   	push   ebx
c001a725:	53                   	push   ebx
c001a726:	52                   	push   edx
c001a727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a72d:	e8 e8 e9 ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a732:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a736:	b9 06 00 00 00       	mov    ecx,0x6
c001a73b:	89 c2                	mov    edx,eax
c001a73d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a740:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a74d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a754:	85 db                	test   ebx,ebx
c001a756:	0f 84 ec 00 00 00    	je     c001a848 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a75c:	51                   	push   ecx
c001a75d:	51                   	push   ecx
c001a75e:	52                   	push   edx
c001a75f:	50                   	push   eax
c001a760:	e8 35 eb ff ff       	call   c001929a <IDE::waitInterrupt(unsigned char)>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	84 c0                	test   al,al
c001a76a:	0f 84 d4 fe ff ff    	je     c001a644 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a770:	56                   	push   esi
c001a771:	56                   	push   esi
c001a772:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a779:	50                   	push   eax
c001a77a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a780:	e8 81 e9 ff ff       	call   c0019106 <IDE::prepareInterrupt(unsigned char)>
c001a785:	83 c4 0c             	add    esp,0xc
c001a788:	6a 04                	push   0x4
c001a78a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a791:	50                   	push   eax
c001a792:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a798:	e8 4f ea ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001a79d:	83 c4 0c             	add    esp,0xc
c001a7a0:	89 c6                	mov    esi,eax
c001a7a2:	6a 05                	push   0x5
c001a7a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7ab:	50                   	push   eax
c001a7ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7b2:	e8 35 ea ff ff       	call   c00191ec <IDE::read(unsigned char, unsigned char)>
c001a7b7:	89 f1                	mov    ecx,esi
c001a7b9:	0f b6 c0             	movzx  eax,al
c001a7bc:	0f b6 f1             	movzx  esi,cl
c001a7bf:	c1 e0 08             	shl    eax,0x8
c001a7c2:	09 c6                	or     esi,eax
c001a7c4:	d1 fe                	sar    esi,1
c001a7c6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7d2:	74 41                	je     c001a815 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7d4:	31 c9                	xor    ecx,ecx
c001a7d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7e3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7e7:	75 0a                	jne    c001a7f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7e9:	01 c9                	add    ecx,ecx
c001a7eb:	01 cd                	add    ebp,ecx
c001a7ed:	4b                   	dec    ebx
c001a7ee:	e9 54 ff ff ff       	jmp    c001a747 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7f3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7fc:	51                   	push   ecx
c001a7fd:	51                   	push   ecx
c001a7fe:	52                   	push   edx
c001a7ff:	50                   	push   eax
c001a800:	e8 15 e9 ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a805:	89 c2                	mov    edx,eax
c001a807:	89 f0                	mov    eax,esi
c001a809:	66 ef                	out    dx,ax
c001a80b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a80f:	83 c4 10             	add    esp,0x10
c001a812:	41                   	inc    ecx
c001a813:	eb c1                	jmp    c001a7d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a815:	31 f6                	xor    esi,esi
c001a817:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a81d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a824:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a828:	75 06                	jne    c001a830 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a82a:	01 f6                	add    esi,esi
c001a82c:	01 f5                	add    ebp,esi
c001a82e:	eb bd                	jmp    c001a7ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a830:	51                   	push   ecx
c001a831:	51                   	push   ecx
c001a832:	52                   	push   edx
c001a833:	50                   	push   eax
c001a834:	e8 e1 e8 ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a839:	89 c2                	mov    edx,eax
c001a83b:	66 ed                	in     ax,dx
c001a83d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a842:	83 c4 10             	add    esp,0x10
c001a845:	46                   	inc    esi
c001a846:	eb cf                	jmp    c001a817 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a848:	51                   	push   ecx
c001a849:	51                   	push   ecx
c001a84a:	52                   	push   edx
c001a84b:	50                   	push   eax
c001a84c:	e8 49 ea ff ff       	call   c001929a <IDE::waitInterrupt(unsigned char)>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	84 c0                	test   al,al
c001a856:	0f 84 e8 fd ff ff    	je     c001a644 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a85c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a861:	52                   	push   edx
c001a862:	52                   	push   edx
c001a863:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a86a:	50                   	push   eax
c001a86b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a871:	e8 90 e8 ff ff       	call   c0019106 <IDE::prepareInterrupt(unsigned char)>
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	50                   	push   eax
c001a87a:	50                   	push   eax
c001a87b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a882:	50                   	push   eax
c001a883:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a889:	e8 8c e8 ff ff       	call   c001911a <IDE::getBase(unsigned char)>
c001a88e:	8d 50 07             	lea    edx,[eax+0x7]
c001a891:	ec                   	in     al,dx
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	a8 88                	test   al,0x88
c001a897:	74 0a                	je     c001a8a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a899:	4b                   	dec    ebx
c001a89a:	75 dd                	jne    c001a879 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a89c:	bb 02 00 00 00       	mov    ebx,0x2
c001a8a1:	eb 02                	jmp    c001a8a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8a3:	31 db                	xor    ebx,ebx
c001a8a5:	83 c4 1c             	add    esp,0x1c
c001a8a8:	89 d8                	mov    eax,ebx
c001a8aa:	5b                   	pop    ebx
c001a8ab:	5e                   	pop    esi
c001a8ac:	5f                   	pop    edi
c001a8ad:	5d                   	pop    ebp
c001a8ae:	c3                   	ret    
c001a8af:	90                   	nop

c001a8b0 <ATAPI::diskRemoved()>:
c001a8b0:	53                   	push   ebx
c001a8b1:	83 ec 14             	sub    esp,0x14
c001a8b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8b8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8bf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8c5:	e8 8c 29 ff ff       	call   c000d256 <LogicalDisk::unmount()>
c001a8ca:	58                   	pop    eax
c001a8cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8d1:	e8 c6 32 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001a8d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8e0:	83 c4 18             	add    esp,0x18
c001a8e3:	5b                   	pop    ebx
c001a8e4:	e9 a3 32 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>
c001a8e9:	90                   	nop

c001a8ea <ATAPI::eject()>:
c001a8ea:	57                   	push   edi
c001a8eb:	b9 03 00 00 00       	mov    ecx,0x3
c001a8f0:	53                   	push   ebx
c001a8f1:	83 ec 14             	sub    esp,0x14
c001a8f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8fc:	fc                   	cld    
c001a8fd:	31 c0                	xor    eax,eax
c001a8ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a901:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a906:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a90b:	50                   	push   eax
c001a90c:	50                   	push   eax
c001a90d:	6a 00                	push   0x0
c001a90f:	6a 00                	push   0x0
c001a911:	6a 00                	push   0x0
c001a913:	6a 02                	push   0x2
c001a915:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a919:	50                   	push   eax
c001a91a:	53                   	push   ebx
c001a91b:	e8 d0 fc ff ff       	call   c001a5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a920:	83 c4 14             	add    esp,0x14
c001a923:	53                   	push   ebx
c001a924:	e8 87 ff ff ff       	call   c001a8b0 <ATAPI::diskRemoved()>
c001a929:	83 c4 24             	add    esp,0x24
c001a92c:	31 c0                	xor    eax,eax
c001a92e:	5b                   	pop    ebx
c001a92f:	5f                   	pop    edi
c001a930:	c3                   	ret    
c001a931:	90                   	nop

c001a932 <ATAPI::diskInserted()>:
c001a932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a936:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a93d:	c3                   	ret    

c001a93e <ATAPI::detectMedia()>:
c001a93e:	56                   	push   esi
c001a93f:	53                   	push   ebx
c001a940:	83 ec 28             	sub    esp,0x28
c001a943:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a947:	6a 0c                	push   0xc
c001a949:	6a 00                	push   0x0
c001a94b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a94f:	56                   	push   esi
c001a950:	e8 9b 5b fe ff       	call   c00004f0 <memset>
c001a955:	58                   	pop    eax
c001a956:	5a                   	pop    edx
c001a957:	6a 00                	push   0x0
c001a959:	6a 00                	push   0x0
c001a95b:	6a 00                	push   0x0
c001a95d:	6a 00                	push   0x0
c001a95f:	56                   	push   esi
c001a960:	53                   	push   ebx
c001a961:	e8 8a fc ff ff       	call   c001a5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a966:	83 c4 1c             	add    esp,0x1c
c001a969:	6a 0c                	push   0xc
c001a96b:	6a 00                	push   0x0
c001a96d:	56                   	push   esi
c001a96e:	e8 7d 5b fe ff       	call   c00004f0 <memset>
c001a973:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a978:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a97d:	59                   	pop    ecx
c001a97e:	58                   	pop    eax
c001a97f:	6a 01                	push   0x1
c001a981:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a985:	50                   	push   eax
c001a986:	6a 00                	push   0x0
c001a988:	6a 12                	push   0x12
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	e8 5f fc ff ff       	call   c001a5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a991:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a995:	83 c4 20             	add    esp,0x20
c001a998:	83 e0 7f             	and    eax,0x7f
c001a99b:	3c 70                	cmp    al,0x70
c001a99d:	74 15                	je     c001a9b4 <ATAPI::detectMedia()+0x76>
c001a99f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9a6:	75 0c                	jne    c001a9b4 <ATAPI::detectMedia()+0x76>
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	53                   	push   ebx
c001a9ac:	e8 81 ff ff ff       	call   c001a932 <ATAPI::diskInserted()>
c001a9b1:	83 c4 10             	add    esp,0x10
c001a9b4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a9b8:	83 e0 0f             	and    eax,0xf
c001a9bb:	3c 02                	cmp    al,0x2
c001a9bd:	75 1b                	jne    c001a9da <ATAPI::detectMedia()+0x9c>
c001a9bf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9c4:	75 2d                	jne    c001a9f3 <ATAPI::detectMedia()+0xb5>
c001a9c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9cd:	74 24                	je     c001a9f3 <ATAPI::detectMedia()+0xb5>
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	53                   	push   ebx
c001a9d3:	e8 d8 fe ff ff       	call   c001a8b0 <ATAPI::diskRemoved()>
c001a9d8:	eb 16                	jmp    c001a9f0 <ATAPI::detectMedia()+0xb2>
c001a9da:	84 c0                	test   al,al
c001a9dc:	75 15                	jne    c001a9f3 <ATAPI::detectMedia()+0xb5>
c001a9de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e5:	75 0c                	jne    c001a9f3 <ATAPI::detectMedia()+0xb5>
c001a9e7:	83 ec 0c             	sub    esp,0xc
c001a9ea:	53                   	push   ebx
c001a9eb:	e8 42 ff ff ff       	call   c001a932 <ATAPI::diskInserted()>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	83 c4 24             	add    esp,0x24
c001a9f6:	5b                   	pop    ebx
c001a9f7:	5e                   	pop    esi
c001a9f8:	c3                   	ret    
c001a9f9:	90                   	nop

c001a9fa <ATAPI::open(int, int, void*)>:
c001a9fa:	56                   	push   esi
c001a9fb:	53                   	push   ebx
c001a9fc:	50                   	push   eax
c001a9fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa09:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa0f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001aa15:	c1 e0 06             	shl    eax,0x6
c001aa18:	01 d0                	add    eax,edx
c001aa1a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa21:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa27:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa2e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa38:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa3e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa45:	6a 04                	push   0x4
c001aa47:	6a 0c                	push   0xc
c001aa49:	51                   	push   ecx
c001aa4a:	52                   	push   edx
c001aa4b:	e8 dc e6 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa50:	90                   	nop
c001aa51:	90                   	nop
c001aa52:	6a 00                	push   0x0
c001aa54:	6a 0c                	push   0xc
c001aa56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa5d:	50                   	push   eax
c001aa5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa64:	e8 c3 e6 ff ff       	call   c001912c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa69:	83 c4 14             	add    esp,0x14
c001aa6c:	68 74 01 00 00       	push   0x174
c001aa71:	e8 e3 d3 fe ff       	call   c0007e59 <malloc>
c001aa76:	83 c4 0c             	add    esp,0xc
c001aa79:	89 c6                	mov    esi,eax
c001aa7b:	6a 00                	push   0x0
c001aa7d:	68 ff ff ff 7f       	push   0x7fffffff
c001aa82:	6a 00                	push   0x0
c001aa84:	6a 00                	push   0x0
c001aa86:	53                   	push   ebx
c001aa87:	68 e4 f5 01 c0       	push   0xc001f5e4
c001aa8c:	50                   	push   eax
c001aa8d:	e8 10 26 ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa92:	83 c4 14             	add    esp,0x14
c001aa95:	56                   	push   esi
c001aa96:	e8 bd 26 ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001aa9b:	5a                   	pop    edx
c001aa9c:	0f be c0             	movsx  eax,al
c001aa9f:	59                   	pop    ecx
c001aaa0:	50                   	push   eax
c001aaa1:	68 fc f3 01 c0       	push   0xc001f3fc
c001aaa6:	e8 3d 01 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001aaab:	58                   	pop    eax
c001aaac:	5a                   	pop    edx
c001aaad:	56                   	push   esi
c001aaae:	53                   	push   ebx
c001aaaf:	e8 74 15 ff ff       	call   c000c028 <Device::addChild(Device*)>
c001aab4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aaba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aabd:	e8 9c 19 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001aac2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aac9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aacc:	e8 6d fe ff ff       	call   c001a93e <ATAPI::detectMedia()>
c001aad1:	83 c4 14             	add    esp,0x14
c001aad4:	31 c0                	xor    eax,eax
c001aad6:	5b                   	pop    ebx
c001aad7:	5e                   	pop    esi
c001aad8:	c3                   	ret    
c001aad9:	90                   	nop

c001aada <ATAPI::read(unsigned long long, int, void*)>:
c001aada:	55                   	push   ebp
c001aadb:	57                   	push   edi
c001aadc:	56                   	push   esi
c001aadd:	53                   	push   ebx
c001aade:	83 ec 1c             	sub    esp,0x1c
c001aae1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aae5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aae9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aaed:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aaf4:	74 3c                	je     c001ab32 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aaf6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aafa:	b9 03 00 00 00       	mov    ecx,0x3
c001aaff:	fc                   	cld    
c001ab00:	31 c0                	xor    eax,eax
c001ab02:	0f ce                	bswap  esi
c001ab04:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab06:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ab0b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ab0f:	89 e8                	mov    eax,ebp
c001ab11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ab15:	50                   	push   eax
c001ab16:	50                   	push   eax
c001ab17:	55                   	push   ebp
c001ab18:	c1 e5 0b             	shl    ebp,0xb
c001ab1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab1f:	6a 00                	push   0x0
c001ab21:	55                   	push   ebp
c001ab22:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab26:	50                   	push   eax
c001ab27:	53                   	push   ebx
c001ab28:	e8 c3 fa ff ff       	call   c001a5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab2d:	83 c4 20             	add    esp,0x20
c001ab30:	eb 1a                	jmp    c001ab4c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab32:	83 ec 0c             	sub    esp,0xc
c001ab35:	53                   	push   ebx
c001ab36:	e8 03 fe ff ff       	call   c001a93e <ATAPI::detectMedia()>
c001ab3b:	83 c4 10             	add    esp,0x10
c001ab3e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab45:	75 af                	jne    c001aaf6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab47:	b8 02 00 00 00       	mov    eax,0x2
c001ab4c:	83 c4 1c             	add    esp,0x1c
c001ab4f:	5b                   	pop    ebx
c001ab50:	5e                   	pop    esi
c001ab51:	5f                   	pop    edi
c001ab52:	5d                   	pop    ebp
c001ab53:	c3                   	ret    

c001ab54 <SATA::close(int, int, void*)>:
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab61:	85 c0                	test   eax,eax
c001ab63:	74 0c                	je     c001ab71 <SATA::close(int, int, void*)+0x1d>
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab6a:	50                   	push   eax
c001ab6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	31 c0                	xor    eax,eax
c001ab73:	83 c4 0c             	add    esp,0xc
c001ab76:	c3                   	ret    
c001ab77:	90                   	nop

c001ab78 <SATA::powerSaving(PowerSavingLevel)>:
c001ab78:	c3                   	ret    
c001ab79:	90                   	nop

c001ab7a <SATA::open(int, int, void*)>:
c001ab7a:	56                   	push   esi
c001ab7b:	53                   	push   ebx
c001ab7c:	50                   	push   eax
c001ab7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab85:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab8f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab95:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aba3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001abad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001abb3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001abba:	e8 67 d6 fe ff       	call   c0008226 <Phys::allocatePage()>
c001abbf:	89 c6                	mov    esi,eax
c001abc1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abc7:	81 c6 00 10 00 00    	add    esi,0x1000
c001abcd:	e8 54 d6 fe ff       	call   c0008226 <Phys::allocatePage()>
c001abd2:	39 c6                	cmp    esi,eax
c001abd4:	74 10                	je     c001abe6 <SATA::open(int, int, void*)+0x6c>
c001abd6:	83 ec 0c             	sub    esp,0xc
c001abd9:	68 44 f4 01 c0       	push   0xc001f444
c001abde:	e8 94 5b ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	83 ec 0c             	sub    esp,0xc
c001abe9:	6a 02                	push   0x2
c001abeb:	e8 a5 ed fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001abf0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abf6:	6a 03                	push   0x3
c001abf8:	50                   	push   eax
c001abf9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abff:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c001ac05:	e8 20 f4 fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ac0a:	83 c4 14             	add    esp,0x14
c001ac0d:	53                   	push   ebx
c001ac0e:	e8 4b 18 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001ac13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac16:	e8 bb 28 ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001ac1b:	83 c4 14             	add    esp,0x14
c001ac1e:	31 c0                	xor    eax,eax
c001ac20:	5b                   	pop    ebx
c001ac21:	5e                   	pop    esi
c001ac22:	c3                   	ret    
c001ac23:	90                   	nop

c001ac24 <SATA::SATA()>:
c001ac24:	83 ec 0c             	sub    esp,0xc
c001ac27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2b:	83 ec 04             	sub    esp,0x4
c001ac2e:	68 00 02 00 00       	push   0x200
c001ac33:	68 58 f4 01 c0       	push   0xc001f458
c001ac38:	50                   	push   eax
c001ac39:	e8 b8 17 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	ba c8 f4 01 c0       	mov    edx,0xc001f4c8
c001ac46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4a:	89 10                	mov    DWORD PTR [eax],edx
c001ac4c:	90                   	nop
c001ac4d:	83 c4 0c             	add    esp,0xc
c001ac50:	c3                   	ret    
c001ac51:	90                   	nop

c001ac52 <SATA::access(unsigned long long, int, void*, bool)>:
c001ac52:	55                   	push   ebp
c001ac53:	57                   	push   edi
c001ac54:	56                   	push   esi
c001ac55:	53                   	push   ebx
c001ac56:	83 ec 2c             	sub    esp,0x2c
c001ac59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac65:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac69:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac6d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac76:	7e 10                	jle    c001ac88 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	68 68 f4 01 c0       	push   0xc001f468
c001ac80:	e8 f2 5a ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac8e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac9e:	89 d0                	mov    eax,edx
c001aca0:	c1 e0 07             	shl    eax,0x7
c001aca3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aca7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001acb1:	51                   	push   ecx
c001acb2:	8d 42 02             	lea    eax,[edx+0x2]
c001acb5:	51                   	push   ecx
c001acb6:	c1 e0 07             	shl    eax,0x7
c001acb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acbd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001acc1:	50                   	push   eax
c001acc2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001acc8:	e8 e7 ef ff ff       	call   c0019cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001accd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acdd:	0f 84 4f 01 00 00    	je     c001ae32 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ace3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ace7:	c1 e0 09             	shl    eax,0x9
c001acea:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acf3:	74 0e                	je     c001ad03 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acf5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acfb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001acff:	89 c1                	mov    ecx,eax
c001ad01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ad07:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad0d:	8d 42 02             	lea    eax,[edx+0x2]
c001ad10:	c1 e0 07             	shl    eax,0x7
c001ad13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ad17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad19:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad1f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad29:	c1 e1 05             	shl    ecx,0x5
c001ad2c:	01 c8                	add    eax,ecx
c001ad2e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad32:	83 e1 01             	and    ecx,0x1
c001ad35:	89 ce                	mov    esi,ecx
c001ad37:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad39:	c1 e6 06             	shl    esi,0x6
c001ad3c:	83 e1 bf             	and    ecx,0xffffffbf
c001ad3f:	09 f1                	or     ecx,esi
c001ad41:	88 08                	mov    BYTE PTR [eax],cl
c001ad43:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad45:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad4b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad51:	89 08                	mov    DWORD PTR [eax],ecx
c001ad53:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad59:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad5f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad65:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad68:	50                   	push   eax
c001ad69:	68 90 00 00 00       	push   0x90
c001ad6e:	6a 00                	push   0x0
c001ad70:	56                   	push   esi
c001ad71:	e8 7a 57 fe ff       	call   c00004f0 <memset>
c001ad76:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad7c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad80:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad86:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	48                   	dec    eax
c001ad92:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad97:	89 c1                	mov    ecx,eax
c001ad99:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad9f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ada4:	09 c8                	or     eax,ecx
c001ada6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001adac:	66 8b 06             	mov    ax,WORD PTR [esi]
c001adaf:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001adb6:	66 25 00 7f          	and    ax,0x7f00
c001adba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adbe:	66 0d 27 80          	or     ax,0x8027
c001adc2:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001adc7:	66 89 06             	mov    WORD PTR [esi],ax
c001adca:	19 c0                	sbb    eax,eax
c001adcc:	83 e0 f0             	and    eax,0xfffffff0
c001adcf:	83 c0 35             	add    eax,0x35
c001add2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001add5:	89 e8                	mov    eax,ebp
c001add7:	c1 e8 10             	shr    eax,0x10
c001adda:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001addd:	89 e8                	mov    eax,ebp
c001addf:	c1 e8 18             	shr    eax,0x18
c001ade2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ade5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ade9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001adec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001adf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adf7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001adfb:	89 d6                	mov    esi,edx
c001adfd:	31 c0                	xor    eax,eax
c001adff:	c1 e6 07             	shl    esi,0x7
c001ae02:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae06:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ae0c:	80 e1 88             	and    cl,0x88
c001ae0f:	74 0a                	je     c001ae1b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ae11:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae16:	74 0a                	je     c001ae22 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ae18:	40                   	inc    eax
c001ae19:	eb eb                	jmp    c001ae06 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ae1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae20:	75 17                	jne    c001ae39 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae22:	83 ec 0c             	sub    esp,0xc
c001ae25:	68 a1 f4 01 c0       	push   0xc001f4a1
c001ae2a:	e8 b9 fd fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	b8 01 00 00 00       	mov    eax,0x1
c001ae37:	eb 5d                	jmp    c001ae96 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae39:	b8 01 00 00 00       	mov    eax,0x1
c001ae3e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae42:	c1 e2 07             	shl    edx,0x7
c001ae45:	d3 e0                	shl    eax,cl
c001ae47:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae4b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae51:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae57:	85 c8                	test   eax,ecx
c001ae59:	74 16                	je     c001ae71 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae5b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae61:	0f ba e1 1e          	bt     ecx,0x1e
c001ae65:	73 ea                	jae    c001ae51 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae67:	83 ec 0c             	sub    esp,0xc
c001ae6a:	68 af f4 01 c0       	push   0xc001f4af
c001ae6f:	eb b9                	jmp    c001ae2a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae71:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae77:	0f ba e0 1e          	bt     eax,0x1e
c001ae7b:	72 b5                	jb     c001ae32 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae7d:	31 c0                	xor    eax,eax
c001ae7f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae84:	75 10                	jne    c001ae96 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae86:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae8c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae96:	83 c4 2c             	add    esp,0x2c
c001ae99:	5b                   	pop    ebx
c001ae9a:	5e                   	pop    esi
c001ae9b:	5f                   	pop    edi
c001ae9c:	5d                   	pop    ebp
c001ae9d:	c3                   	ret    

c001ae9e <SATA::read(unsigned long long, int, void*)>:
c001ae9e:	57                   	push   edi
c001ae9f:	b8 04 00 00 00       	mov    eax,0x4
c001aea4:	56                   	push   esi
c001aea5:	53                   	push   ebx
c001aea6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aeaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeae:	8d 7a ff             	lea    edi,[edx-0x1]
c001aeb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aeb5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aeb9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aebf:	77 25                	ja     c001aee6 <SATA::read(unsigned long long, int, void*)+0x48>
c001aec1:	b8 06 00 00 00       	mov    eax,0x6
c001aec6:	85 f6                	test   esi,esi
c001aec8:	74 1c                	je     c001aee6 <SATA::read(unsigned long long, int, void*)+0x48>
c001aeca:	50                   	push   eax
c001aecb:	50                   	push   eax
c001aecc:	6a 00                	push   0x0
c001aece:	56                   	push   esi
c001aecf:	52                   	push   edx
c001aed0:	53                   	push   ebx
c001aed1:	51                   	push   ecx
c001aed2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aed6:	e8 77 fd ff ff       	call   c001ac52 <SATA::access(unsigned long long, int, void*, bool)>
c001aedb:	83 c4 20             	add    esp,0x20
c001aede:	85 c0                	test   eax,eax
c001aee0:	0f 95 c0             	setne  al
c001aee3:	0f b6 c0             	movzx  eax,al
c001aee6:	5b                   	pop    ebx
c001aee7:	5e                   	pop    esi
c001aee8:	5f                   	pop    edi
c001aee9:	c3                   	ret    

c001aeea <SATA::write(unsigned long long, int, void*)>:
c001aeea:	55                   	push   ebp
c001aeeb:	b8 04 00 00 00       	mov    eax,0x4
c001aef0:	57                   	push   edi
c001aef1:	56                   	push   esi
c001aef2:	53                   	push   ebx
c001aef3:	83 ec 0c             	sub    esp,0xc
c001aef6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aefa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aefe:	8d 73 ff             	lea    esi,[ebx-0x1]
c001af01:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001af05:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001af09:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001af0f:	77 3d                	ja     c001af4e <SATA::write(unsigned long long, int, void*)+0x64>
c001af11:	b8 06 00 00 00       	mov    eax,0x6
c001af16:	85 ed                	test   ebp,ebp
c001af18:	74 34                	je     c001af4e <SATA::write(unsigned long long, int, void*)+0x64>
c001af1a:	c1 e3 09             	shl    ebx,0x9
c001af1d:	01 eb                	add    ebx,ebp
c001af1f:	89 d6                	mov    esi,edx
c001af21:	89 cf                	mov    edi,ecx
c001af23:	83 c6 01             	add    esi,0x1
c001af26:	83 d7 00             	adc    edi,0x0
c001af29:	50                   	push   eax
c001af2a:	50                   	push   eax
c001af2b:	6a 01                	push   0x1
c001af2d:	55                   	push   ebp
c001af2e:	81 c5 00 02 00 00    	add    ebp,0x200
c001af34:	6a 01                	push   0x1
c001af36:	51                   	push   ecx
c001af37:	52                   	push   edx
c001af38:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af3c:	e8 11 fd ff ff       	call   c001ac52 <SATA::access(unsigned long long, int, void*, bool)>
c001af41:	83 c4 20             	add    esp,0x20
c001af44:	89 f2                	mov    edx,esi
c001af46:	89 f9                	mov    ecx,edi
c001af48:	39 dd                	cmp    ebp,ebx
c001af4a:	75 d3                	jne    c001af1f <SATA::write(unsigned long long, int, void*)+0x35>
c001af4c:	31 c0                	xor    eax,eax
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	5b                   	pop    ebx
c001af52:	5e                   	pop    esi
c001af53:	5f                   	pop    edi
c001af54:	5d                   	pop    ebp
c001af55:	c3                   	ret    

c001af56 <SATAPI::write(unsigned long long, int, void*)>:
c001af56:	b8 03 00 00 00       	mov    eax,0x3
c001af5b:	c3                   	ret    

c001af5c <SATAPI::close(int, int, void*)>:
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af69:	85 c0                	test   eax,eax
c001af6b:	74 0c                	je     c001af79 <SATAPI::close(int, int, void*)+0x1d>
c001af6d:	83 ec 0c             	sub    esp,0xc
c001af70:	8b 10                	mov    edx,DWORD PTR [eax]
c001af72:	50                   	push   eax
c001af73:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af76:	83 c4 10             	add    esp,0x10
c001af79:	31 c0                	xor    eax,eax
c001af7b:	83 c4 0c             	add    esp,0xc
c001af7e:	c3                   	ret    
c001af7f:	90                   	nop

c001af80 <SATAPI::SATAPI()>:
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af87:	83 ec 04             	sub    esp,0x4
c001af8a:	68 00 08 00 00       	push   0x800
c001af8f:	68 f8 f4 01 c0       	push   0xc001f4f8
c001af94:	50                   	push   eax
c001af95:	e8 5c 14 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af9a:	83 c4 10             	add    esp,0x10
c001af9d:	ba 58 f6 01 c0       	mov    edx,0xc001f658
c001afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa6:	89 10                	mov    DWORD PTR [eax],edx
c001afa8:	90                   	nop
c001afa9:	83 c4 0c             	add    esp,0xc
c001afac:	c3                   	ret    
c001afad:	90                   	nop

c001afae <SATAPI::diskRemoved()>:
c001afae:	c3                   	ret    
c001afaf:	90                   	nop

c001afb0 <SATAPI::diskInserted()>:
c001afb0:	83 ec 18             	sub    esp,0x18
c001afb3:	68 04 f5 01 c0       	push   0xc001f504
c001afb8:	e8 2b fc fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001afbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afc8:	83 c4 1c             	add    esp,0x1c
c001afcb:	c3                   	ret    

c001afcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afcc:	55                   	push   ebp
c001afcd:	57                   	push   edi
c001afce:	56                   	push   esi
c001afcf:	53                   	push   ebx
c001afd0:	83 ec 38             	sub    esp,0x38
c001afd3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afd7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afdb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afdf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afe3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afe7:	68 1c f5 01 c0       	push   0xc001f51c
c001afec:	e8 f7 fb fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001aff1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aff7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001affd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b001:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b007:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b00b:	c1 e0 07             	shl    eax,0x7
c001b00e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b012:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b016:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b020:	58                   	pop    eax
c001b021:	5a                   	pop    edx
c001b022:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b026:	8d 58 02             	lea    ebx,[eax+0x2]
c001b029:	c1 e3 07             	shl    ebx,0x7
c001b02c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b030:	53                   	push   ebx
c001b031:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b037:	e8 78 ec ff ff       	call   c0019cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b03c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	b8 01 00 00 00       	mov    eax,0x1
c001b048:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b04d:	0f 84 4c 02 00 00    	je     c001b29f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b053:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b05b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b061:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b067:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b06b:	c1 e1 05             	shl    ecx,0x5
c001b06e:	01 c8                	add    eax,ecx
c001b070:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b072:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b078:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b07e:	89 08                	mov    DWORD PTR [eax],ecx
c001b080:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b086:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b08c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b092:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b095:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b098:	50                   	push   eax
c001b099:	68 90 00 00 00       	push   0x90
c001b09e:	6a 00                	push   0x0
c001b0a0:	53                   	push   ebx
c001b0a1:	e8 4a 54 fe ff       	call   c00004f0 <memset>
c001b0a6:	b9 0c 00 00 00       	mov    ecx,0xc
c001b0ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b0af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0b1:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0b7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0bb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0c1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0c9:	48                   	dec    eax
c001b0ca:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0cf:	89 c1                	mov    ecx,eax
c001b0d1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0d7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0dc:	09 c8                	or     eax,ecx
c001b0de:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0e4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0e7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0ee:	66 25 00 7f          	and    ax,0x7f00
c001b0f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0f6:	66 0d 27 80          	or     ax,0x8027
c001b0fa:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0fe:	66 89 03             	mov    WORD PTR [ebx],ax
c001b101:	89 d0                	mov    eax,edx
c001b103:	c1 ea 18             	shr    edx,0x18
c001b106:	c1 e8 10             	shr    eax,0x10
c001b109:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b10c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b10f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b113:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b116:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b11a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b11d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b12c:	31 c0                	xor    eax,eax
c001b12e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b134:	80 e1 88             	and    cl,0x88
c001b137:	74 0a                	je     c001b143 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b139:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b13e:	74 0a                	je     c001b14a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b140:	40                   	inc    eax
c001b141:	eb eb                	jmp    c001b12e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b143:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b148:	75 16                	jne    c001b160 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b14a:	83 ec 0c             	sub    esp,0xc
c001b14d:	68 36 f5 01 c0       	push   0xc001f536
c001b152:	e8 91 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b157:	5f                   	pop    edi
c001b158:	5d                   	pop    ebp
c001b159:	68 4b f5 01 c0       	push   0xc001f54b
c001b15e:	eb 4f                	jmp    c001b1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b160:	be 01 00 00 00       	mov    esi,0x1
c001b165:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b169:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b16d:	d3 e6                	shl    esi,cl
c001b16f:	c1 e7 07             	shl    edi,0x7
c001b172:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b178:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b17d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b181:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b187:	85 c6                	test   esi,eax
c001b189:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b18f:	0f 84 cb 00 00 00    	je     c001b260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b195:	0f ba e0 1e          	bt     eax,0x1e
c001b199:	73 2c                	jae    c001b1c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b19b:	83 ec 0c             	sub    esp,0xc
c001b19e:	68 5d f5 01 c0       	push   0xc001f55d
c001b1a3:	e8 40 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b1a8:	5b                   	pop    ebx
c001b1a9:	5e                   	pop    esi
c001b1aa:	68 70 f5 01 c0       	push   0xc001f570
c001b1af:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b1b5:	e8 0e dd fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	b8 01 00 00 00       	mov    eax,0x1
c001b1c2:	e9 d8 00 00 00       	jmp    c001b29f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b1c7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1cd:	83 f8 0d             	cmp    eax,0xd
c001b1d0:	77 0a                	ja     c001b1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	68 c8 00 00 00       	push   0xc8
c001b1da:	eb 28                	jmp    c001b204 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1dc:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b1e2:	83 f8 0d             	cmp    eax,0xd
c001b1e5:	77 0a                	ja     c001b1f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b1e7:	83 ec 0c             	sub    esp,0xc
c001b1ea:	68 58 02 00 00       	push   0x258
c001b1ef:	eb 13                	jmp    c001b204 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1f1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1f7:	83 f8 06             	cmp    eax,0x6
c001b1fa:	77 10                	ja     c001b20c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b1fc:	83 ec 0c             	sub    esp,0xc
c001b1ff:	68 dc 05 00 00       	push   0x5dc
c001b204:	e8 c3 8b ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c001b209:	83 c4 10             	add    esp,0x10
c001b20c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b210:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b213:	75 06                	jne    c001b21b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b215:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b219:	74 15                	je     c001b230 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b21b:	83 fb 06             	cmp    ebx,0x6
c001b21e:	77 10                	ja     c001b230 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b220:	83 ec 0c             	sub    esp,0xc
c001b223:	68 c4 09 00 00       	push   0x9c4
c001b228:	e8 9f 8b ff ff       	call   c0013dcc <milliTenthSleep(unsigned int)>
c001b22d:	83 c4 10             	add    esp,0x10
c001b230:	43                   	inc    ebx
c001b231:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b237:	0f 85 44 ff ff ff    	jne    c001b181 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b23d:	51                   	push   ecx
c001b23e:	51                   	push   ecx
c001b23f:	68 81 f5 01 c0       	push   0xc001f581
c001b244:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b24a:	e8 79 dc fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b24f:	c7 04 24 91 f5 01 c0 	mov    DWORD PTR [esp],0xc001f591
c001b256:	e8 8d f9 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b25b:	e9 5a ff ff ff       	jmp    c001b1ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b260:	0f ba e0 1e          	bt     eax,0x1e
c001b264:	73 19                	jae    c001b27f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	68 a5 f5 01 c0       	push   0xc001f5a5
c001b26e:	e8 75 f9 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b273:	58                   	pop    eax
c001b274:	5a                   	pop    edx
c001b275:	68 ba f5 01 c0       	push   0xc001f5ba
c001b27a:	e9 30 ff ff ff       	jmp    c001b1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b27f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b284:	74 17                	je     c001b29d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b286:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b28b:	74 10                	je     c001b29d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b28d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b293:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b297:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b29b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b29d:	31 c0                	xor    eax,eax
c001b29f:	83 c4 2c             	add    esp,0x2c
c001b2a2:	5b                   	pop    ebx
c001b2a3:	5e                   	pop    esi
c001b2a4:	5f                   	pop    edi
c001b2a5:	5d                   	pop    ebp
c001b2a6:	c3                   	ret    
c001b2a7:	90                   	nop

c001b2a8 <SATAPI::eject()>:
c001b2a8:	57                   	push   edi
c001b2a9:	b9 03 00 00 00       	mov    ecx,0x3
c001b2ae:	83 ec 18             	sub    esp,0x18
c001b2b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2b5:	fc                   	cld    
c001b2b6:	31 c0                	xor    eax,eax
c001b2b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2c4:	50                   	push   eax
c001b2c5:	6a 00                	push   0x0
c001b2c7:	6a 00                	push   0x0
c001b2c9:	6a 00                	push   0x0
c001b2cb:	6a 00                	push   0x0
c001b2cd:	6a 02                	push   0x2
c001b2cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2d3:	50                   	push   eax
c001b2d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2d8:	e8 ef fc ff ff       	call   c001afcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2dd:	31 c0                	xor    eax,eax
c001b2df:	83 c4 38             	add    esp,0x38
c001b2e2:	5f                   	pop    edi
c001b2e3:	c3                   	ret    

c001b2e4 <SATAPI::detectMedia()>:
c001b2e4:	53                   	push   ebx
c001b2e5:	83 ec 14             	sub    esp,0x14
c001b2e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2f2:	e8 a5 28 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001b2f7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b301:	83 c4 18             	add    esp,0x18
c001b304:	5b                   	pop    ebx
c001b305:	e9 82 28 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>

c001b30a <SATAPI::open(int, int, void*)>:
c001b30a:	56                   	push   esi
c001b30b:	53                   	push   ebx
c001b30c:	51                   	push   ecx
c001b30d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b315:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b31f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b325:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b32f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b333:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b33d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b343:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b34a:	e8 d7 ce fe ff       	call   c0008226 <Phys::allocatePage()>
c001b34f:	89 c6                	mov    esi,eax
c001b351:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b357:	81 c6 00 10 00 00    	add    esi,0x1000
c001b35d:	e8 c4 ce fe ff       	call   c0008226 <Phys::allocatePage()>
c001b362:	39 c6                	cmp    esi,eax
c001b364:	74 10                	je     c001b376 <SATAPI::open(int, int, void*)+0x6c>
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	68 cd f5 01 c0       	push   0xc001f5cd
c001b36e:	e8 04 54 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	6a 02                	push   0x2
c001b37b:	e8 15 e6 fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001b380:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b386:	6a 03                	push   0x3
c001b388:	50                   	push   eax
c001b389:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b38f:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c001b395:	e8 90 ec fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b39a:	83 c4 14             	add    esp,0x14
c001b39d:	68 74 01 00 00       	push   0x174
c001b3a2:	e8 b2 ca fe ff       	call   c0007e59 <malloc>
c001b3a7:	83 c4 0c             	add    esp,0xc
c001b3aa:	89 c6                	mov    esi,eax
c001b3ac:	6a 00                	push   0x0
c001b3ae:	68 ff ff ff 7f       	push   0x7fffffff
c001b3b3:	6a 00                	push   0x0
c001b3b5:	6a 00                	push   0x0
c001b3b7:	53                   	push   ebx
c001b3b8:	68 e3 f5 01 c0       	push   0xc001f5e3
c001b3bd:	50                   	push   eax
c001b3be:	e8 df 1c ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3c3:	83 c4 14             	add    esp,0x14
c001b3c6:	56                   	push   esi
c001b3c7:	e8 8c 1d ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001b3cc:	5a                   	pop    edx
c001b3cd:	0f be c0             	movsx  eax,al
c001b3d0:	59                   	pop    ecx
c001b3d1:	50                   	push   eax
c001b3d2:	68 fc f3 01 c0       	push   0xc001f3fc
c001b3d7:	e8 0c f8 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b3dc:	58                   	pop    eax
c001b3dd:	5a                   	pop    edx
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 43 0c ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b3e5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3ee:	e8 6b 10 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001b3f3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3fd:	e8 e2 fe ff ff       	call   c001b2e4 <SATAPI::detectMedia()>
c001b402:	83 c4 14             	add    esp,0x14
c001b405:	31 c0                	xor    eax,eax
c001b407:	5b                   	pop    ebx
c001b408:	5e                   	pop    esi
c001b409:	c3                   	ret    

c001b40a <SATAPI::read(unsigned long long, int, void*)>:
c001b40a:	57                   	push   edi
c001b40b:	56                   	push   esi
c001b40c:	53                   	push   ebx
c001b40d:	83 ec 3c             	sub    esp,0x3c
c001b410:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b414:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b418:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b41c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b420:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b424:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b428:	68 f1 f5 01 c0       	push   0xc001f5f1
c001b42d:	e8 b6 f7 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	83 fe 04             	cmp    esi,0x4
c001b438:	7e 10                	jle    c001b44a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	68 02 f6 01 c0       	push   0xc001f602
c001b442:	e8 30 53 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b450:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b456:	51                   	push   ecx
c001b457:	50                   	push   eax
c001b458:	83 c0 02             	add    eax,0x2
c001b45b:	c1 e0 07             	shl    eax,0x7
c001b45e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b464:	50                   	push   eax
c001b465:	52                   	push   edx
c001b466:	e8 0d e9 ff ff       	call   c0019d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b46b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b46f:	b9 03 00 00 00       	mov    ecx,0x3
c001b474:	fc                   	cld    
c001b475:	31 c0                	xor    eax,eax
c001b477:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b479:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b47e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b483:	83 c4 0c             	add    esp,0xc
c001b486:	6a 00                	push   0x0
c001b488:	6a 00                	push   0x0
c001b48a:	6a 00                	push   0x0
c001b48c:	6a 00                	push   0x0
c001b48e:	6a 02                	push   0x2
c001b490:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b494:	50                   	push   eax
c001b495:	53                   	push   ebx
c001b496:	e8 31 fb ff ff       	call   c001afcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b49b:	83 c4 20             	add    esp,0x20
c001b49e:	85 c0                	test   eax,eax
c001b4a0:	74 27                	je     c001b4c9 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4a6:	50                   	push   eax
c001b4a7:	50                   	push   eax
c001b4a8:	68 2c f6 01 c0       	push   0xc001f62c
c001b4ad:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b4b3:	e8 10 da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b4b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4bb:	e8 24 fe ff ff       	call   c001b2e4 <SATAPI::detectMedia()>
c001b4c0:	58                   	pop    eax
c001b4c1:	5a                   	pop    edx
c001b4c2:	68 34 f6 01 c0       	push   0xc001f634
c001b4c7:	eb 69                	jmp    c001b532 <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b4c9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4cd:	b9 03 00 00 00       	mov    ecx,0x3
c001b4d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4d8:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4dd:	0f c8                	bswap  eax
c001b4df:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4e3:	89 f0                	mov    eax,esi
c001b4e5:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4e9:	57                   	push   edi
c001b4ea:	56                   	push   esi
c001b4eb:	c1 e6 0b             	shl    esi,0xb
c001b4ee:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4fa:	56                   	push   esi
c001b4fb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4ff:	50                   	push   eax
c001b500:	53                   	push   ebx
c001b501:	e8 c6 fa ff ff       	call   c001afcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b506:	83 c4 20             	add    esp,0x20
c001b509:	85 c0                	test   eax,eax
c001b50b:	74 37                	je     c001b544 <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b50d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b511:	50                   	push   eax
c001b512:	50                   	push   eax
c001b513:	68 3e f6 01 c0       	push   0xc001f63e
c001b518:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b51e:	e8 a5 d9 fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b523:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b526:	e8 b9 fd ff ff       	call   c001b2e4 <SATAPI::detectMedia()>
c001b52b:	5a                   	pop    edx
c001b52c:	59                   	pop    ecx
c001b52d:	68 46 f6 01 c0       	push   0xc001f646
c001b532:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b538:	e8 8b d9 fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b544:	83 c4 30             	add    esp,0x30
c001b547:	5b                   	pop    ebx
c001b548:	5e                   	pop    esi
c001b549:	5f                   	pop    edi
c001b54a:	c3                   	ret    
c001b54b:	90                   	nop

c001b54c <IOAPIC::close(int, int, void*)>:
c001b54c:	b8 00 00 00 00       	mov    eax,0x0
c001b551:	c3                   	ret    

c001b552 <apicGetBase()>:
c001b552:	55                   	push   ebp
c001b553:	89 e5                	mov    ebp,esp
c001b555:	83 ec 18             	sub    esp,0x18
c001b558:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b55d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b563:	83 e0 08             	and    eax,0x8
c001b566:	84 c0                	test   al,al
c001b568:	75 07                	jne    c001b571 <apicGetBase()+0x1f>
c001b56a:	b8 00 00 00 00       	mov    eax,0x0
c001b56f:	eb 21                	jmp    c001b592 <apicGetBase()+0x40>
c001b571:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b576:	83 ec 08             	sub    esp,0x8
c001b579:	6a 1b                	push   0x1b
c001b57b:	50                   	push   eax
c001b57c:	e8 15 bf fe ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c001b581:	83 c4 10             	add    esp,0x10
c001b584:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b587:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b58a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b58d:	25 00 00 ff ff       	and    eax,0xffff0000
c001b592:	c9                   	leave  
c001b593:	c3                   	ret    

c001b594 <IOAPIC::IOAPIC()>:
c001b594:	83 ec 0c             	sub    esp,0xc
c001b597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59b:	83 ec 08             	sub    esp,0x8
c001b59e:	68 88 f6 01 c0       	push   0xc001f688
c001b5a3:	50                   	push   eax
c001b5a4:	e8 17 0c ff ff       	call   c000c1c0 <Device::Device(char const*)>
c001b5a9:	83 c4 10             	add    esp,0x10
c001b5ac:	ba 98 f6 01 c0       	mov    edx,0xc001f698
c001b5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b5:	89 10                	mov    DWORD PTR [eax],edx
c001b5b7:	90                   	nop
c001b5b8:	83 c4 0c             	add    esp,0xc
c001b5bb:	c3                   	ret    

c001b5bc <apicOpen()>:
c001b5bc:	55                   	push   ebp
c001b5bd:	89 e5                	mov    ebp,esp
c001b5bf:	53                   	push   ebx
c001b5c0:	83 ec 34             	sub    esp,0x34
c001b5c3:	a0 e0 48 02 c0       	mov    al,ds:0xc00248e0
c001b5c8:	83 f0 01             	xor    eax,0x1
c001b5cb:	84 c0                	test   al,al
c001b5cd:	0f 84 9d 00 00 00    	je     c001b670 <apicOpen()+0xb4>
c001b5d3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b5d7:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c001b5dc:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5df:	0f 83 84 00 00 00    	jae    c001b669 <apicOpen()+0xad>
c001b5e5:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5ec:	83 ec 0c             	sub    esp,0xc
c001b5ef:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5f2:	e8 62 c8 fe ff       	call   c0007e59 <malloc>
c001b5f7:	83 c4 10             	add    esp,0x10
c001b5fa:	89 c3                	mov    ebx,eax
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	53                   	push   ebx
c001b600:	e8 8f ff ff ff       	call   c001b594 <IOAPIC::IOAPIC()>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b60b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b60e:	25 ff 00 00 00       	and    eax,0xff
c001b613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b616:	89 14 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],edx
c001b61d:	a1 a0 48 02 c0       	mov    eax,ds:0xc00248a0
c001b622:	40                   	inc    eax
c001b623:	a3 a0 48 02 c0       	mov    ds:0xc00248a0,eax
c001b628:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b62d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b633:	83 ec 08             	sub    esp,0x8
c001b636:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b639:	50                   	push   eax
c001b63a:	e8 e9 09 ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b63f:	83 c4 10             	add    esp,0x10
c001b642:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b645:	8b 00                	mov    eax,DWORD PTR [eax]
c001b647:	83 c0 08             	add    eax,0x8
c001b64a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b64c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b64f:	25 ff 00 00 00       	and    eax,0xff
c001b654:	6a 00                	push   0x0
c001b656:	6a 00                	push   0x0
c001b658:	50                   	push   eax
c001b659:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b65c:	ff d2                	call   edx
c001b65e:	83 c4 10             	add    esp,0x10
c001b661:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b664:	e9 6e ff ff ff       	jmp    c001b5d7 <apicOpen()+0x1b>
c001b669:	c6 05 e0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248e0,0x1
c001b670:	e8 dd fe ff ff       	call   c001b552 <apicGetBase()>
c001b675:	05 f0 00 00 00       	add    eax,0xf0
c001b67a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b67d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b680:	8b 00                	mov    eax,DWORD PTR [eax]
c001b682:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b685:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b68c:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b693:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b696:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b699:	89 10                	mov    DWORD PTR [eax],edx
c001b69b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b6a2:	a1 f0 31 02 c0       	mov    eax,ds:0xc00231f0
c001b6a7:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b6aa:	7d 70                	jge    c001b71c <apicOpen()+0x160>
c001b6ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6af:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b6b6:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b6b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6bc:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b6c3:	c1 e8 08             	shr    eax,0x8
c001b6c6:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b6ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6cd:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b6d4:	c1 e8 18             	shr    eax,0x18
c001b6d7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6da:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6de:	75 37                	jne    c001b717 <apicOpen()+0x15b>
c001b6e0:	e8 6d fe ff ff       	call   c001b552 <apicGetBase()>
c001b6e5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6e9:	75 07                	jne    c001b6f2 <apicOpen()+0x136>
c001b6eb:	ba 60 03 00 00       	mov    edx,0x360
c001b6f0:	eb 05                	jmp    c001b6f7 <apicOpen()+0x13b>
c001b6f2:	ba 50 03 00 00       	mov    edx,0x350
c001b6f7:	01 d0                	add    eax,edx
c001b6f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6fc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001b701:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b704:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b70b:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b70f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b712:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b715:	89 10                	mov    DWORD PTR [eax],edx
c001b717:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b71a:	eb 86                	jmp    c001b6a2 <apicOpen()+0xe6>
c001b71c:	90                   	nop
c001b71d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b720:	c9                   	leave  
c001b721:	c3                   	ret    

c001b722 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b722:	55                   	push   ebp
c001b723:	89 e5                	mov    ebp,esp
c001b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b728:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b72e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b731:	72 1d                	jb     c001b750 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b736:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b73f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b745:	01 d0                	add    eax,edx
c001b747:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b74a:	73 04                	jae    c001b750 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b74c:	b0 01                	mov    al,0x1
c001b74e:	eb 02                	jmp    c001b752 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b750:	b0 00                	mov    al,0x0
c001b752:	5d                   	pop    ebp
c001b753:	c3                   	ret    

c001b754 <IOAPIC::read(int)>:
c001b754:	55                   	push   ebp
c001b755:	89 e5                	mov    ebp,esp
c001b757:	83 ec 10             	sub    esp,0x10
c001b75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b763:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b766:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b769:	31 d2                	xor    edx,edx
c001b76b:	88 c2                	mov    dl,al
c001b76d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b770:	89 10                	mov    DWORD PTR [eax],edx
c001b772:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b775:	83 c0 10             	add    eax,0x10
c001b778:	8b 00                	mov    eax,DWORD PTR [eax]
c001b77a:	c9                   	leave  
c001b77b:	c3                   	ret    

c001b77c <IOAPIC::open(int, int, void*)>:
c001b77c:	55                   	push   ebp
c001b77d:	89 e5                	mov    ebp,esp
c001b77f:	57                   	push   edi
c001b780:	56                   	push   esi
c001b781:	53                   	push   ebx
c001b782:	83 ec 04             	sub    esp,0x4
c001b785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b788:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b78b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b794:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b79a:	8b 14 85 e0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd20]
c001b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b7b3:	8b 14 85 60 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcca0]
c001b7ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7d5:	89 c6                	mov    esi,eax
c001b7d7:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7dd:	89 d0                	mov    eax,edx
c001b7df:	ba 00 00 00 00       	mov    edx,0x0
c001b7e4:	89 c7                	mov    edi,eax
c001b7e6:	83 e7 ff             	and    edi,0xffffffff
c001b7e9:	89 f9                	mov    ecx,edi
c001b7eb:	89 d0                	mov    eax,edx
c001b7ed:	25 ff 00 00 00       	and    eax,0xff
c001b7f2:	89 c3                	mov    ebx,eax
c001b7f4:	89 c8                	mov    eax,ecx
c001b7f6:	89 da                	mov    edx,ebx
c001b7f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7fb:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7fe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b802:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b806:	83 e0 00             	and    eax,0x0
c001b809:	09 d0                	or     eax,edx
c001b80b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b812:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b818:	8d 50 01             	lea    edx,[eax+0x1]
c001b81b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b81e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b824:	31 d2                	xor    edx,edx
c001b826:	88 c2                	mov    dl,al
c001b828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b82b:	83 c2 08             	add    edx,0x8
c001b82e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b832:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b838:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b83e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b842:	6a 01                	push   0x1
c001b844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b847:	e8 08 ff ff ff       	call   c001b754 <IOAPIC::read(int)>
c001b84c:	83 c4 08             	add    esp,0x8
c001b84f:	c1 f8 10             	sar    eax,0x10
c001b852:	25 ff 00 00 00       	and    eax,0xff
c001b857:	8d 50 01             	lea    edx,[eax+0x1]
c001b85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b85d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b863:	b8 00 00 00 00       	mov    eax,0x0
c001b868:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b86b:	5b                   	pop    ebx
c001b86c:	5e                   	pop    esi
c001b86d:	5f                   	pop    edi
c001b86e:	5d                   	pop    ebp
c001b86f:	c3                   	ret    

c001b870 <IOAPIC::write(int, int)>:
c001b870:	55                   	push   ebp
c001b871:	89 e5                	mov    ebp,esp
c001b873:	83 ec 10             	sub    esp,0x10
c001b876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b879:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b87f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b882:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b885:	31 d2                	xor    edx,edx
c001b887:	88 c2                	mov    dl,al
c001b889:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b88c:	89 10                	mov    DWORD PTR [eax],edx
c001b88e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b891:	8d 50 10             	lea    edx,[eax+0x10]
c001b894:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b897:	89 02                	mov    DWORD PTR [edx],eax
c001b899:	90                   	nop
c001b89a:	c9                   	leave  
c001b89b:	c3                   	ret    

c001b89c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b89c:	55                   	push   ebp
c001b89d:	89 e5                	mov    ebp,esp
c001b89f:	53                   	push   ebx
c001b8a0:	83 ec 2c             	sub    esp,0x2c
c001b8a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b8a6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b8a9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b8ac:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b8af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b8b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b8b5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b8b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b8bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b8be:	88 d8                	mov    al,bl
c001b8c0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b8c3:	88 c8                	mov    al,cl
c001b8c5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b8c8:	88 d0                	mov    al,dl
c001b8ca:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b8cd:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8d0:	25 ff 00 00 00       	and    eax,0xff
c001b8d5:	83 c0 08             	add    eax,0x8
c001b8d8:	01 c0                	add    eax,eax
c001b8da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8dd:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8e0:	25 ff 00 00 00       	and    eax,0xff
c001b8e5:	83 c0 08             	add    eax,0x8
c001b8e8:	01 c0                	add    eax,eax
c001b8ea:	40                   	inc    eax
c001b8eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8f1:	50                   	push   eax
c001b8f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8f5:	e8 5a fe ff ff       	call   c001b754 <IOAPIC::read(int)>
c001b8fa:	83 c4 08             	add    esp,0x8
c001b8fd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b900:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b907:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b90a:	c1 e0 18             	shl    eax,0x18
c001b90d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b910:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b913:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b916:	52                   	push   edx
c001b917:	50                   	push   eax
c001b918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b91b:	e8 50 ff ff ff       	call   c001b870 <IOAPIC::write(int, int)>
c001b920:	83 c4 0c             	add    esp,0xc
c001b923:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b926:	50                   	push   eax
c001b927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b92a:	e8 25 fe ff ff       	call   c001b754 <IOAPIC::read(int)>
c001b92f:	83 c4 08             	add    esp,0x8
c001b932:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b935:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b93c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b943:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b94a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b94e:	74 09                	je     c001b959 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b950:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b957:	eb 07                	jmp    c001b960 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b959:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b960:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b964:	74 09                	je     c001b96f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b966:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b96d:	eb 07                	jmp    c001b976 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b96f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b976:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b97d:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b980:	25 ff 00 00 00       	and    eax,0xff
c001b985:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b988:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b98b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b98e:	52                   	push   edx
c001b98f:	50                   	push   eax
c001b990:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b993:	e8 d8 fe ff ff       	call   c001b870 <IOAPIC::write(int, int)>
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	90                   	nop
c001b99c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b99f:	c9                   	leave  
c001b9a0:	c3                   	ret    
c001b9a1:	66 90                	xchg   ax,ax
c001b9a3:	90                   	nop

c001b9a4 <APICTimer::close(int, int, void*)>:
c001b9a4:	b8 00 00 00 00       	mov    eax,0x0
c001b9a9:	c3                   	ret    
c001b9aa:	66 90                	xchg   ax,ax

c001b9ac <apicTimerHandler(regs*, void*)>:
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b9b5:	b8 10 27 00 00       	mov    eax,0x2710
c001b9ba:	ba 00 00 00 00       	mov    edx,0x0
c001b9bf:	f7 f1                	div    ecx
c001b9c1:	83 ec 0c             	sub    esp,0xc
c001b9c4:	50                   	push   eax
c001b9c5:	e8 f2 1e ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001b9ca:	83 c4 10             	add    esp,0x10
c001b9cd:	90                   	nop
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	c3                   	ret    
c001b9d2:	66 90                	xchg   ax,ax

c001b9d4 <APICTimer::open(int, int, void*)>:
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9db:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9dd:	83 c0 24             	add    eax,0x24
c001b9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9e2:	83 ec 08             	sub    esp,0x8
c001b9e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ed:	ff d0                	call   eax
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba08:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ba0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba12:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	51                   	push   ecx
c001ba1c:	6a 01                	push   0x1
c001ba1e:	68 ac b9 01 c0       	push   0xc001b9ac
c001ba23:	52                   	push   edx
c001ba24:	50                   	push   eax
c001ba25:	e8 aa 05 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba2a:	83 c4 20             	add    esp,0x20
c001ba2d:	89 c2                	mov    edx,eax
c001ba2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba39:	b8 00 00 00 00       	mov    eax,0x0
c001ba3e:	83 c4 0c             	add    esp,0xc
c001ba41:	c3                   	ret    
c001ba42:	66 90                	xchg   ax,ax

c001ba44 <APICTimer::write(int)>:
c001ba44:	83 ec 0c             	sub    esp,0xc
c001ba47:	83 ec 0c             	sub    esp,0xc
c001ba4a:	68 bc f6 01 c0       	push   0xc001f6bc
c001ba4f:	e8 23 4d ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001ba54:	83 c4 10             	add    esp,0x10
c001ba57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba65:	90                   	nop
c001ba66:	83 c4 0c             	add    esp,0xc
c001ba69:	c3                   	ret    
c001ba6a:	66 90                	xchg   ax,ax

c001ba6c <APICTimer::APICTimer()>:
c001ba6c:	83 ec 0c             	sub    esp,0xc
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	83 ec 08             	sub    esp,0x8
c001ba76:	68 cc f6 01 c0       	push   0xc001f6cc
c001ba7b:	50                   	push   eax
c001ba7c:	e8 6f 1d ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c001ba89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8d:	89 10                	mov    DWORD PTR [eax],edx
c001ba8f:	90                   	nop
c001ba90:	83 c4 0c             	add    esp,0xc
c001ba93:	c3                   	ret    

c001ba94 <PIT::write(int)>:
c001ba94:	83 ec 10             	sub    esp,0x10
c001ba97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001baa5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baa9:	a3 e4 48 02 c0       	mov    ds:0xc00248e4,eax
c001baae:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001bab3:	99                   	cdq    
c001bab4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001bab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001babc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001bac3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001bac8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bacc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bad1:	ee                   	out    dx,al
c001bad2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bad6:	25 ff 00 00 00       	and    eax,0xff
c001badb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001bae2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bae6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001baea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001baef:	ee                   	out    dx,al
c001baf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baf4:	c1 f8 08             	sar    eax,0x8
c001baf7:	25 ff 00 00 00       	and    eax,0xff
c001bafc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bb03:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bb07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bb0b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bb10:	ee                   	out    dx,al
c001bb11:	90                   	nop
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	c3                   	ret    
c001bb16:	66 90                	xchg   ax,ax

c001bb18 <pitHandler(regs*, void*)>:
c001bb18:	83 ec 0c             	sub    esp,0xc
c001bb1b:	8b 0d e4 48 02 c0    	mov    ecx,DWORD PTR ds:0xc00248e4
c001bb21:	b8 10 27 00 00       	mov    eax,0x2710
c001bb26:	99                   	cdq    
c001bb27:	f7 f9                	idiv   ecx
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	50                   	push   eax
c001bb2d:	e8 8a 1d ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001bb32:	83 c4 10             	add    esp,0x10
c001bb35:	90                   	nop
c001bb36:	83 c4 0c             	add    esp,0xc
c001bb39:	c3                   	ret    
c001bb3a:	66 90                	xchg   ax,ax

c001bb3c <PIT::open(int, int, void*)>:
c001bb3c:	83 ec 0c             	sub    esp,0xc
c001bb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb43:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb45:	83 c0 24             	add    eax,0x24
c001bb48:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb55:	ff d0                	call   eax
c001bb57:	83 c4 10             	add    esp,0x10
c001bb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5e:	83 ec 0c             	sub    esp,0xc
c001bb61:	6a 00                	push   0x0
c001bb63:	6a 01                	push   0x1
c001bb65:	68 18 bb 01 c0       	push   0xc001bb18
c001bb6a:	6a 00                	push   0x0
c001bb6c:	50                   	push   eax
c001bb6d:	e8 62 04 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb72:	83 c4 20             	add    esp,0x20
c001bb75:	89 c2                	mov    edx,eax
c001bb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb81:	b8 00 00 00 00       	mov    eax,0x0
c001bb86:	83 c4 0c             	add    esp,0xc
c001bb89:	c3                   	ret    
c001bb8a:	66 90                	xchg   ax,ax

c001bb8c <PIT::close(int, int, void*)>:
c001bb8c:	83 ec 0c             	sub    esp,0xc
c001bb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb93:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba1:	6a 01                	push   0x1
c001bba3:	68 18 bb 01 c0       	push   0xc001bb18
c001bba8:	6a 00                	push   0x0
c001bbaa:	50                   	push   eax
c001bbab:	e8 5a 04 ff ff       	call   c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bbb0:	83 c4 10             	add    esp,0x10
c001bbb3:	b8 00 00 00 00       	mov    eax,0x0
c001bbb8:	83 c4 0c             	add    esp,0xc
c001bbbb:	c3                   	ret    

c001bbbc <PIT::PIT()>:
c001bbbc:	83 ec 0c             	sub    esp,0xc
c001bbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc3:	83 ec 08             	sub    esp,0x8
c001bbc6:	68 08 f7 01 c0       	push   0xc001f708
c001bbcb:	50                   	push   eax
c001bbcc:	e8 1f 1c ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c001bbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdd:	89 10                	mov    DWORD PTR [eax],edx
c001bbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbe9:	31 d2                	xor    edx,edx
c001bbeb:	88 c2                	mov    dl,al
c001bbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bc02:	31 d2                	xor    edx,edx
c001bc04:	88 c2                	mov    dl,al
c001bc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bc19:	8d 50 01             	lea    edx,[eax+0x1]
c001bc1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc20:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bc26:	31 d2                	xor    edx,edx
c001bc28:	88 c2                	mov    dl,al
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bc32:	83 e1 3f             	and    ecx,0x3f
c001bc35:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bc39:	90                   	nop
c001bc3a:	83 c4 0c             	add    esp,0xc
c001bc3d:	c3                   	ret    
c001bc3e:	66 90                	xchg   ax,ax

c001bc40 <avxDetect>:
c001bc40:	b8 01 00 00 00       	mov    eax,0x1
c001bc45:	0f a2                	cpuid  
c001bc47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc4d:	74 15                	je     c001bc64 <avxDetect.noAVX>
c001bc4f:	b8 01 00 00 00       	mov    eax,0x1
c001bc54:	0f a2                	cpuid  
c001bc56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc5c:	74 06                	je     c001bc64 <avxDetect.noAVX>
c001bc5e:	b8 01 00 00 00       	mov    eax,0x1
c001bc63:	c3                   	ret    

c001bc64 <avxDetect.noAVX>:
c001bc64:	b8 00 00 00 00       	mov    eax,0x0
c001bc69:	c3                   	ret    

c001bc6a <avxSave>:
c001bc6a:	53                   	push   ebx
c001bc6b:	52                   	push   edx
c001bc6c:	31 c0                	xor    eax,eax
c001bc6e:	48                   	dec    eax
c001bc6f:	89 c2                	mov    edx,eax
c001bc71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc75:	0f ae 23             	xsave  [ebx]
c001bc78:	5a                   	pop    edx
c001bc79:	5b                   	pop    ebx
c001bc7a:	c3                   	ret    

c001bc7b <avxLoad>:
c001bc7b:	53                   	push   ebx
c001bc7c:	52                   	push   edx
c001bc7d:	31 c0                	xor    eax,eax
c001bc7f:	48                   	dec    eax
c001bc80:	89 c2                	mov    edx,eax
c001bc82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc86:	0f ae 2b             	xrstor [ebx]
c001bc89:	5a                   	pop    edx
c001bc8a:	5b                   	pop    ebx
c001bc8b:	c3                   	ret    

c001bc8c <avxInit>:
c001bc8c:	e8 57 02 00 00       	call   c001bee8 <sseInit>
c001bc91:	50                   	push   eax
c001bc92:	51                   	push   ecx
c001bc93:	0f 20 e0             	mov    eax,cr4
c001bc96:	0d 00 00 04 00       	or     eax,0x40000
c001bc9b:	0f 22 e0             	mov    cr4,eax
c001bc9e:	31 c9                	xor    ecx,ecx
c001bca0:	0f 01 d0             	xgetbv 
c001bca3:	0d 07 00 00 00       	or     eax,0x7
c001bca8:	0f 01 d1             	xsetbv 
c001bcab:	59                   	pop    ecx
c001bcac:	58                   	pop    eax
c001bcad:	c3                   	ret    

c001bcae <avxClose>:
c001bcae:	c3                   	ret    

c001bcaf <wouldSheSayYes>:
c001bcaf:	c3                   	ret    
c001bcb0:	49                   	dec    ecx
c001bcb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bcb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bcb9:	75 20                	jne    c001bcdb <isr0+0xb>
c001bcbb:	4e                   	dec    esi
c001bcbc:	79 61                	jns    c001bd1f <isr7+0x3>
c001bcbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bcc3:	66 90                	xchg   ax,ax
c001bcc5:	66 90                	xchg   ax,ax
c001bcc7:	66 90                	xchg   ax,ax
c001bcc9:	66 90                	xchg   ax,ax
c001bccb:	66 90                	xchg   ax,ax
c001bccd:	66 90                	xchg   ax,ax
c001bccf:	90                   	nop

c001bcd0 <isr0>:
c001bcd0:	fa                   	cli    
c001bcd1:	68 00 00 00 00       	push   0x0
c001bcd6:	68 00 00 00 00       	push   0x0
c001bcdb:	e9 44 01 00 00       	jmp    c001be24 <int_common_stub>

c001bce0 <isr1>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 01                	push   0x1
c001bce5:	e9 3a 01 00 00       	jmp    c001be24 <int_common_stub>

c001bcea <isr2>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 02                	push   0x2
c001bcef:	e9 30 01 00 00       	jmp    c001be24 <int_common_stub>

c001bcf4 <isr3>:
c001bcf4:	fa                   	cli    
c001bcf5:	6a 00                	push   0x0
c001bcf7:	6a 03                	push   0x3
c001bcf9:	e9 26 01 00 00       	jmp    c001be24 <int_common_stub>

c001bcfe <isr4>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 04                	push   0x4
c001bd03:	e9 1c 01 00 00       	jmp    c001be24 <int_common_stub>

c001bd08 <isr5>:
c001bd08:	fa                   	cli    
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 05                	push   0x5
c001bd0d:	e9 12 01 00 00       	jmp    c001be24 <int_common_stub>

c001bd12 <isr6>:
c001bd12:	fa                   	cli    
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 06                	push   0x6
c001bd17:	e9 08 01 00 00       	jmp    c001be24 <int_common_stub>

c001bd1c <isr7>:
c001bd1c:	fa                   	cli    
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 07                	push   0x7
c001bd21:	e9 fe 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd26 <isr8>:
c001bd26:	fa                   	cli    
c001bd27:	6a 08                	push   0x8
c001bd29:	e9 f6 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd2e <isr9>:
c001bd2e:	fa                   	cli    
c001bd2f:	6a 00                	push   0x0
c001bd31:	6a 09                	push   0x9
c001bd33:	e9 ec 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd38 <isr10>:
c001bd38:	fa                   	cli    
c001bd39:	6a 0a                	push   0xa
c001bd3b:	e9 e4 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd40 <isr11>:
c001bd40:	fa                   	cli    
c001bd41:	6a 0b                	push   0xb
c001bd43:	e9 dc 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd48 <isr12>:
c001bd48:	fa                   	cli    
c001bd49:	6a 0c                	push   0xc
c001bd4b:	e9 d4 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd50 <isr13>:
c001bd50:	fa                   	cli    
c001bd51:	6a 0d                	push   0xd
c001bd53:	e9 cc 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd58 <isr14>:
c001bd58:	fa                   	cli    
c001bd59:	6a 0e                	push   0xe
c001bd5b:	e9 c4 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd60 <isr15>:
c001bd60:	fa                   	cli    
c001bd61:	6a 00                	push   0x0
c001bd63:	6a 0f                	push   0xf
c001bd65:	e9 ba 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd6a <isr16>:
c001bd6a:	fa                   	cli    
c001bd6b:	6a 00                	push   0x0
c001bd6d:	6a 10                	push   0x10
c001bd6f:	e9 b0 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd74 <isr17>:
c001bd74:	fa                   	cli    
c001bd75:	6a 00                	push   0x0
c001bd77:	6a 11                	push   0x11
c001bd79:	e9 a6 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd7e <isr18>:
c001bd7e:	fa                   	cli    
c001bd7f:	6a 00                	push   0x0
c001bd81:	6a 12                	push   0x12
c001bd83:	e9 9c 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd88 <irq3>:
c001bd88:	fa                   	cli    
c001bd89:	6a 00                	push   0x0
c001bd8b:	6a 23                	push   0x23
c001bd8d:	e9 92 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd92 <irq4>:
c001bd92:	fa                   	cli    
c001bd93:	6a 00                	push   0x0
c001bd95:	6a 24                	push   0x24
c001bd97:	e9 88 00 00 00       	jmp    c001be24 <int_common_stub>

c001bd9c <irq5>:
c001bd9c:	fa                   	cli    
c001bd9d:	6a 00                	push   0x0
c001bd9f:	6a 25                	push   0x25
c001bda1:	e9 7e 00 00 00       	jmp    c001be24 <int_common_stub>

c001bda6 <irq6>:
c001bda6:	fa                   	cli    
c001bda7:	6a 00                	push   0x0
c001bda9:	6a 26                	push   0x26
c001bdab:	e9 74 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdb0 <irq7>:
c001bdb0:	fa                   	cli    
c001bdb1:	6a 00                	push   0x0
c001bdb3:	6a 27                	push   0x27
c001bdb5:	e9 6a 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdba <irq8>:
c001bdba:	fa                   	cli    
c001bdbb:	6a 00                	push   0x0
c001bdbd:	6a 28                	push   0x28
c001bdbf:	e9 60 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdc4 <irq9>:
c001bdc4:	fa                   	cli    
c001bdc5:	6a 00                	push   0x0
c001bdc7:	6a 29                	push   0x29
c001bdc9:	e9 56 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdce <irq10>:
c001bdce:	fa                   	cli    
c001bdcf:	6a 00                	push   0x0
c001bdd1:	6a 2a                	push   0x2a
c001bdd3:	e9 4c 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdd8 <irq11>:
c001bdd8:	fa                   	cli    
c001bdd9:	6a 00                	push   0x0
c001bddb:	6a 2b                	push   0x2b
c001bddd:	e9 42 00 00 00       	jmp    c001be24 <int_common_stub>

c001bde2 <irq12>:
c001bde2:	fa                   	cli    
c001bde3:	6a 00                	push   0x0
c001bde5:	6a 2c                	push   0x2c
c001bde7:	e9 38 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdec <irq13>:
c001bdec:	fa                   	cli    
c001bded:	6a 00                	push   0x0
c001bdef:	6a 2d                	push   0x2d
c001bdf1:	e9 2e 00 00 00       	jmp    c001be24 <int_common_stub>

c001bdf6 <irq14>:
c001bdf6:	fa                   	cli    
c001bdf7:	6a 00                	push   0x0
c001bdf9:	6a 2e                	push   0x2e
c001bdfb:	e9 24 00 00 00       	jmp    c001be24 <int_common_stub>

c001be00 <irq15>:
c001be00:	fa                   	cli    
c001be01:	6a 00                	push   0x0
c001be03:	6a 2f                	push   0x2f
c001be05:	e9 1a 00 00 00       	jmp    c001be24 <int_common_stub>

c001be0a <irq1>:
c001be0a:	fa                   	cli    
c001be0b:	6a 00                	push   0x0
c001be0d:	6a 21                	push   0x21
c001be0f:	eb 13                	jmp    c001be24 <int_common_stub>

c001be11 <irq2>:
c001be11:	fa                   	cli    
c001be12:	6a 00                	push   0x0
c001be14:	6a 22                	push   0x22
c001be16:	eb 0c                	jmp    c001be24 <int_common_stub>

c001be18 <isr96>:
c001be18:	6a 00                	push   0x0
c001be1a:	6a 60                	push   0x60
c001be1c:	fb                   	sti    
c001be1d:	eb 05                	jmp    c001be24 <int_common_stub>

c001be1f <irq0>:
c001be1f:	fa                   	cli    
c001be20:	6a 00                	push   0x0
c001be22:	6a 20                	push   0x20

c001be24 <int_common_stub>:
c001be24:	60                   	pusha  
c001be25:	1e                   	push   ds
c001be26:	06                   	push   es
c001be27:	0f a0                	push   fs
c001be29:	0f a8                	push   gs
c001be2b:	66 b8 10 00          	mov    ax,0x10
c001be2f:	66 8e d8             	mov    ds,ax
c001be32:	66 8e c0             	mov    es,ax
c001be35:	66 8e e0             	mov    fs,ax
c001be38:	66 8e e8             	mov    gs,ax
c001be3b:	54                   	push   esp
c001be3c:	fc                   	cld    
c001be3d:	e8 92 06 ff ff       	call   c000c4d4 <int_handler>
c001be42:	81 c4 04 00 00 00    	add    esp,0x4
c001be48:	0f a9                	pop    gs
c001be4a:	0f a1                	pop    fs
c001be4c:	07                   	pop    es
c001be4d:	1f                   	pop    ds
c001be4e:	61                   	popa   
c001be4f:	81 c4 08 00 00 00    	add    esp,0x8
c001be55:	cf                   	iret   

c001be56 <irq16>:
c001be56:	fa                   	cli    
c001be57:	6a 00                	push   0x0
c001be59:	6a 30                	push   0x30
c001be5b:	e9 c4 ff ff ff       	jmp    c001be24 <int_common_stub>

c001be60 <irq17>:
c001be60:	fa                   	cli    
c001be61:	6a 00                	push   0x0
c001be63:	6a 31                	push   0x31
c001be65:	e9 ba ff ff ff       	jmp    c001be24 <int_common_stub>

c001be6a <irq18>:
c001be6a:	fa                   	cli    
c001be6b:	6a 00                	push   0x0
c001be6d:	6a 32                	push   0x32
c001be6f:	e9 b0 ff ff ff       	jmp    c001be24 <int_common_stub>

c001be74 <irq19>:
c001be74:	fa                   	cli    
c001be75:	6a 00                	push   0x0
c001be77:	6a 33                	push   0x33
c001be79:	e9 a6 ff ff ff       	jmp    c001be24 <int_common_stub>

c001be7e <irq20>:
c001be7e:	fa                   	cli    
c001be7f:	6a 00                	push   0x0
c001be81:	6a 34                	push   0x34
c001be83:	e9 9c ff ff ff       	jmp    c001be24 <int_common_stub>

c001be88 <irq21>:
c001be88:	fa                   	cli    
c001be89:	6a 00                	push   0x0
c001be8b:	6a 35                	push   0x35
c001be8d:	e9 92 ff ff ff       	jmp    c001be24 <int_common_stub>

c001be92 <irq22>:
c001be92:	fa                   	cli    
c001be93:	6a 00                	push   0x0
c001be95:	6a 36                	push   0x36
c001be97:	e9 88 ff ff ff       	jmp    c001be24 <int_common_stub>

c001be9c <irq23>:
c001be9c:	fa                   	cli    
c001be9d:	6a 00                	push   0x0
c001be9f:	6a 37                	push   0x37
c001bea1:	e9 7e ff ff ff       	jmp    c001be24 <int_common_stub>
c001bea6:	66 90                	xchg   ax,ax
c001bea8:	66 90                	xchg   ax,ax
c001beaa:	66 90                	xchg   ax,ax
c001beac:	66 90                	xchg   ax,ax
c001beae:	66 90                	xchg   ax,ax

c001beb0 <i386GetRDRAND>:
c001beb0:	b9 64 00 00 00       	mov    ecx,0x64

c001beb5 <retry>:
c001beb5:	0f c7 f0             	rdrand eax
c001beb8:	72 05                	jb     c001bebf <retry.done>
c001beba:	e2 f9                	loop   c001beb5 <retry>

c001bebc <retry.fail>:
c001bebc:	31 c0                	xor    eax,eax
c001bebe:	c3                   	ret    

c001bebf <retry.done>:
c001bebf:	c3                   	ret    

c001bec0 <absolutelyNoChanceInHell>:
c001bec0:	b8 01 00 00 00       	mov    eax,0x1
c001bec5:	0f a2                	cpuid  
c001bec7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001becd:	74 06                	je     c001bed5 <sseDetect.noSSE>
c001becf:	b8 01 00 00 00       	mov    eax,0x1
c001bed4:	c3                   	ret    

c001bed5 <sseDetect.noSSE>:
c001bed5:	31 c0                	xor    eax,eax
c001bed7:	c3                   	ret    

c001bed8 <sseSave>:
c001bed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bedc:	0f ae 00             	fxsave [eax]
c001bedf:	c3                   	ret    

c001bee0 <sseLoad>:
c001bee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bee4:	0f ae 08             	fxrstor [eax]
c001bee7:	c3                   	ret    

c001bee8 <sseInit>:
c001bee8:	e8 42 00 00 00       	call   c001bf2f <x87Init>
c001beed:	0f 20 e0             	mov    eax,cr4
c001bef0:	66 0d 00 06          	or     ax,0x600
c001bef4:	0f 22 e0             	mov    cr4,eax
c001bef7:	c3                   	ret    

c001bef8 <sseClose>:
c001bef8:	c3                   	ret    
c001bef9:	66 90                	xchg   ax,ax
c001befb:	66 90                	xchg   ax,ax
c001befd:	66 90                	xchg   ax,ax
c001beff:	90                   	nop

c001bf00 <value_37F>:
c001bf00:	7f 03                	jg     c001bf05 <value_37A+0x1>

c001bf02 <value_37E>:
c001bf02:	7e 03                	jle    c001bf07 <x87Detect+0x1>

c001bf04 <value_37A>:
c001bf04:	7a 03                	jp     c001bf09 <x87Detect+0x3>

c001bf06 <x87Detect>:
c001bf06:	b8 01 00 00 00       	mov    eax,0x1
c001bf0b:	0f a2                	cpuid  
c001bf0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bf13:	74 06                	je     c001bf1b <x87Detect.nox87>
c001bf15:	b8 01 00 00 00       	mov    eax,0x1
c001bf1a:	c3                   	ret    

c001bf1b <x87Detect.nox87>:
c001bf1b:	b8 00 00 00 00       	mov    eax,0x0
c001bf20:	c3                   	ret    

c001bf21 <x87Save>:
c001bf21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf25:	dd 30                	fnsave [eax]
c001bf27:	c3                   	ret    

c001bf28 <x87Load>:
c001bf28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2c:	dd 20                	frstor [eax]
c001bf2e:	c3                   	ret    

c001bf2f <x87Init>:
c001bf2f:	0f 20 c0             	mov    eax,cr0
c001bf32:	66 25 fb ff          	and    ax,0xfffb
c001bf36:	66 0d 22 00          	or     ax,0x22
c001bf3a:	0f 22 c0             	mov    cr0,eax
c001bf3d:	db e3                	fninit 
c001bf3f:	0f 06                	clts   
c001bf41:	d9 2d 04 bf 01 c0    	fldcw  WORD PTR ds:0xc001bf04
c001bf47:	c3                   	ret    

c001bf48 <x87Close>:
c001bf48:	c3                   	ret    
c001bf49:	66 90                	xchg   ax,ax
c001bf4b:	90                   	nop

c001bf4c <__do_global_ctors_aux>:
c001bf4c:	a1 fc ce 01 c0       	mov    eax,ds:0xc001cefc
c001bf51:	83 f8 ff             	cmp    eax,0xffffffff
c001bf54:	74 1a                	je     c001bf70 <__do_global_ctors_aux+0x24>
c001bf56:	55                   	push   ebp
c001bf57:	89 e5                	mov    ebp,esp
c001bf59:	53                   	push   ebx
c001bf5a:	52                   	push   edx
c001bf5b:	bb fc ce 01 c0       	mov    ebx,0xc001cefc
c001bf60:	ff d0                	call   eax
c001bf62:	83 eb 04             	sub    ebx,0x4
c001bf65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf67:	83 f8 ff             	cmp    eax,0xffffffff
c001bf6a:	75 f4                	jne    c001bf60 <__do_global_ctors_aux+0x14>
c001bf6c:	58                   	pop    eax
c001bf6d:	5b                   	pop    ebx
c001bf6e:	5d                   	pop    ebp
c001bf6f:	c3                   	ret    
c001bf70:	c3                   	ret    
c001bf71:	66 90                	xchg   ax,ax
c001bf73:	90                   	nop

c001bf74 <__divdi3>:
c001bf74:	55                   	push   ebp
c001bf75:	57                   	push   edi
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	83 ec 1c             	sub    esp,0x1c
c001bf7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf92:	85 db                	test   ebx,ebx
c001bf94:	0f 88 8e 00 00 00    	js     c001c028 <__divdi3+0xb4>
c001bf9a:	89 dd                	mov    ebp,ebx
c001bf9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bfa4:	89 d3                	mov    ebx,edx
c001bfa6:	85 d2                	test   edx,edx
c001bfa8:	79 0d                	jns    c001bfb7 <__divdi3+0x43>
c001bfaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bfae:	f7 d8                	neg    eax
c001bfb0:	83 d2 00             	adc    edx,0x0
c001bfb3:	f7 da                	neg    edx
c001bfb5:	89 d3                	mov    ebx,edx
c001bfb7:	89 c7                	mov    edi,eax
c001bfb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfbc:	85 db                	test   ebx,ebx
c001bfbe:	75 48                	jne    c001c008 <__divdi3+0x94>
c001bfc0:	39 ef                	cmp    edi,ebp
c001bfc2:	76 24                	jbe    c001bfe8 <__divdi3+0x74>
c001bfc4:	89 ea                	mov    edx,ebp
c001bfc6:	f7 f7                	div    edi
c001bfc8:	89 c1                	mov    ecx,eax
c001bfca:	31 f6                	xor    esi,esi
c001bfcc:	89 c8                	mov    eax,ecx
c001bfce:	89 f2                	mov    edx,esi
c001bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfd4:	85 c9                	test   ecx,ecx
c001bfd6:	74 07                	je     c001bfdf <__divdi3+0x6b>
c001bfd8:	f7 d8                	neg    eax
c001bfda:	83 d2 00             	adc    edx,0x0
c001bfdd:	f7 da                	neg    edx
c001bfdf:	83 c4 1c             	add    esp,0x1c
c001bfe2:	5b                   	pop    ebx
c001bfe3:	5e                   	pop    esi
c001bfe4:	5f                   	pop    edi
c001bfe5:	5d                   	pop    ebp
c001bfe6:	c3                   	ret    
c001bfe7:	90                   	nop
c001bfe8:	85 ff                	test   edi,edi
c001bfea:	75 0b                	jne    c001bff7 <__divdi3+0x83>
c001bfec:	b8 01 00 00 00       	mov    eax,0x1
c001bff1:	31 d2                	xor    edx,edx
c001bff3:	f7 f3                	div    ebx
c001bff5:	89 c7                	mov    edi,eax
c001bff7:	31 d2                	xor    edx,edx
c001bff9:	89 e8                	mov    eax,ebp
c001bffb:	f7 f7                	div    edi
c001bffd:	89 c6                	mov    esi,eax
c001bfff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c002:	f7 f7                	div    edi
c001c004:	89 c1                	mov    ecx,eax
c001c006:	eb c4                	jmp    c001bfcc <__divdi3+0x58>
c001c008:	39 eb                	cmp    ebx,ebp
c001c00a:	77 3c                	ja     c001c048 <__divdi3+0xd4>
c001c00c:	0f bd f3             	bsr    esi,ebx
c001c00f:	83 f6 1f             	xor    esi,0x1f
c001c012:	75 40                	jne    c001c054 <__divdi3+0xe0>
c001c014:	39 eb                	cmp    ebx,ebp
c001c016:	72 09                	jb     c001c021 <__divdi3+0xad>
c001c018:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c01b:	0f 87 97 00 00 00    	ja     c001c0b8 <__divdi3+0x144>
c001c021:	b9 01 00 00 00       	mov    ecx,0x1
c001c026:	eb a4                	jmp    c001bfcc <__divdi3+0x58>
c001c028:	f7 d9                	neg    ecx
c001c02a:	83 d3 00             	adc    ebx,0x0
c001c02d:	f7 db                	neg    ebx
c001c02f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c032:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c036:	89 dd                	mov    ebp,ebx
c001c038:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c040:	e9 5f ff ff ff       	jmp    c001bfa4 <__divdi3+0x30>
c001c045:	8d 76 00             	lea    esi,[esi+0x0]
c001c048:	31 f6                	xor    esi,esi
c001c04a:	31 c9                	xor    ecx,ecx
c001c04c:	e9 7b ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c051:	8d 76 00             	lea    esi,[esi+0x0]
c001c054:	b8 20 00 00 00       	mov    eax,0x20
c001c059:	29 f0                	sub    eax,esi
c001c05b:	89 f1                	mov    ecx,esi
c001c05d:	d3 e3                	shl    ebx,cl
c001c05f:	89 fa                	mov    edx,edi
c001c061:	88 c1                	mov    cl,al
c001c063:	d3 ea                	shr    edx,cl
c001c065:	09 da                	or     edx,ebx
c001c067:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c06b:	89 f1                	mov    ecx,esi
c001c06d:	d3 e7                	shl    edi,cl
c001c06f:	89 eb                	mov    ebx,ebp
c001c071:	88 c1                	mov    cl,al
c001c073:	d3 eb                	shr    ebx,cl
c001c075:	89 f1                	mov    ecx,esi
c001c077:	d3 e5                	shl    ebp,cl
c001c079:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c07c:	88 c1                	mov    cl,al
c001c07e:	d3 ea                	shr    edx,cl
c001c080:	09 d5                	or     ebp,edx
c001c082:	89 e8                	mov    eax,ebp
c001c084:	89 da                	mov    edx,ebx
c001c086:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c08a:	89 d3                	mov    ebx,edx
c001c08c:	89 c5                	mov    ebp,eax
c001c08e:	f7 e7                	mul    edi
c001c090:	39 d3                	cmp    ebx,edx
c001c092:	72 18                	jb     c001c0ac <__divdi3+0x138>
c001c094:	74 0a                	je     c001c0a0 <__divdi3+0x12c>
c001c096:	89 e9                	mov    ecx,ebp
c001c098:	31 f6                	xor    esi,esi
c001c09a:	e9 2d ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c09f:	90                   	nop
c001c0a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c0a3:	89 f1                	mov    ecx,esi
c001c0a5:	d3 e7                	shl    edi,cl
c001c0a7:	39 c7                	cmp    edi,eax
c001c0a9:	73 eb                	jae    c001c096 <__divdi3+0x122>
c001c0ab:	90                   	nop
c001c0ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c0af:	31 f6                	xor    esi,esi
c001c0b1:	e9 16 ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c0b6:	66 90                	xchg   ax,ax
c001c0b8:	31 c9                	xor    ecx,ecx
c001c0ba:	e9 0d ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c0bf:	90                   	nop

c001c0c0 <__moddi3>:
c001c0c0:	55                   	push   ebp
c001c0c1:	57                   	push   edi
c001c0c2:	56                   	push   esi
c001c0c3:	53                   	push   ebx
c001c0c4:	83 ec 2c             	sub    esp,0x2c
c001c0c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c0cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0d7:	85 db                	test   ebx,ebx
c001c0d9:	0f 88 85 00 00 00    	js     c001c164 <__moddi3+0xa4>
c001c0df:	89 de                	mov    esi,ebx
c001c0e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0e9:	89 d7                	mov    edi,edx
c001c0eb:	85 d2                	test   edx,edx
c001c0ed:	79 09                	jns    c001c0f8 <__moddi3+0x38>
c001c0ef:	f7 d8                	neg    eax
c001c0f1:	83 d2 00             	adc    edx,0x0
c001c0f4:	f7 da                	neg    edx
c001c0f6:	89 d7                	mov    edi,edx
c001c0f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0fc:	89 cd                	mov    ebp,ecx
c001c0fe:	85 ff                	test   edi,edi
c001c100:	75 52                	jne    c001c154 <__moddi3+0x94>
c001c102:	89 c3                	mov    ebx,eax
c001c104:	39 f0                	cmp    eax,esi
c001c106:	76 24                	jbe    c001c12c <__moddi3+0x6c>
c001c108:	89 c8                	mov    eax,ecx
c001c10a:	89 f2                	mov    edx,esi
c001c10c:	f7 f3                	div    ebx
c001c10e:	89 d6                	mov    esi,edx
c001c110:	89 f0                	mov    eax,esi
c001c112:	31 d2                	xor    edx,edx
c001c114:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c118:	85 c9                	test   ecx,ecx
c001c11a:	74 07                	je     c001c123 <__moddi3+0x63>
c001c11c:	f7 d8                	neg    eax
c001c11e:	83 d2 00             	adc    edx,0x0
c001c121:	f7 da                	neg    edx
c001c123:	83 c4 2c             	add    esp,0x2c
c001c126:	5b                   	pop    ebx
c001c127:	5e                   	pop    esi
c001c128:	5f                   	pop    edi
c001c129:	5d                   	pop    ebp
c001c12a:	c3                   	ret    
c001c12b:	90                   	nop
c001c12c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c130:	85 db                	test   ebx,ebx
c001c132:	75 0d                	jne    c001c141 <__moddi3+0x81>
c001c134:	b8 01 00 00 00       	mov    eax,0x1
c001c139:	31 d2                	xor    edx,edx
c001c13b:	f7 f7                	div    edi
c001c13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c141:	89 f0                	mov    eax,esi
c001c143:	31 d2                	xor    edx,edx
c001c145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c149:	f7 f7                	div    edi
c001c14b:	89 e8                	mov    eax,ebp
c001c14d:	f7 f7                	div    edi
c001c14f:	89 d6                	mov    esi,edx
c001c151:	eb bd                	jmp    c001c110 <__moddi3+0x50>
c001c153:	90                   	nop
c001c154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c158:	39 f7                	cmp    edi,esi
c001c15a:	76 20                	jbe    c001c17c <__moddi3+0xbc>
c001c15c:	89 c8                	mov    eax,ecx
c001c15e:	89 f2                	mov    edx,esi
c001c160:	eb b2                	jmp    c001c114 <__moddi3+0x54>
c001c162:	66 90                	xchg   ax,ax
c001c164:	f7 d9                	neg    ecx
c001c166:	83 d3 00             	adc    ebx,0x0
c001c169:	f7 db                	neg    ebx
c001c16b:	89 de                	mov    esi,ebx
c001c16d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c175:	e9 6f ff ff ff       	jmp    c001c0e9 <__moddi3+0x29>
c001c17a:	66 90                	xchg   ax,ax
c001c17c:	0f bd c7             	bsr    eax,edi
c001c17f:	83 f0 1f             	xor    eax,0x1f
c001c182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c186:	75 24                	jne    c001c1ac <__moddi3+0xec>
c001c188:	39 f7                	cmp    edi,esi
c001c18a:	72 06                	jb     c001c192 <__moddi3+0xd2>
c001c18c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c190:	77 0c                	ja     c001c19e <__moddi3+0xde>
c001c192:	89 e9                	mov    ecx,ebp
c001c194:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c198:	19 fe                	sbb    esi,edi
c001c19a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c19e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1a2:	89 f2                	mov    edx,esi
c001c1a4:	e9 6b ff ff ff       	jmp    c001c114 <__moddi3+0x54>
c001c1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1ac:	b8 20 00 00 00       	mov    eax,0x20
c001c1b1:	89 c2                	mov    edx,eax
c001c1b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c1b7:	29 da                	sub    edx,ebx
c001c1b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c1bd:	88 d9                	mov    cl,bl
c001c1bf:	d3 e7                	shl    edi,cl
c001c1c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1c5:	88 d1                	mov    cl,dl
c001c1c7:	d3 e8                	shr    eax,cl
c001c1c9:	09 c7                	or     edi,eax
c001c1cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c1cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1d3:	89 d8                	mov    eax,ebx
c001c1d5:	88 d9                	mov    cl,bl
c001c1d7:	d3 e7                	shl    edi,cl
c001c1d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1dd:	89 f3                	mov    ebx,esi
c001c1df:	88 d1                	mov    cl,dl
c001c1e1:	d3 eb                	shr    ebx,cl
c001c1e3:	89 c7                	mov    edi,eax
c001c1e5:	88 c1                	mov    cl,al
c001c1e7:	d3 e6                	shl    esi,cl
c001c1e9:	89 e8                	mov    eax,ebp
c001c1eb:	88 d1                	mov    cl,dl
c001c1ed:	d3 e8                	shr    eax,cl
c001c1ef:	09 f0                	or     eax,esi
c001c1f1:	89 f9                	mov    ecx,edi
c001c1f3:	d3 e5                	shl    ebp,cl
c001c1f5:	89 da                	mov    edx,ebx
c001c1f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1fb:	89 d3                	mov    ebx,edx
c001c1fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c201:	89 c6                	mov    esi,eax
c001c203:	89 d1                	mov    ecx,edx
c001c205:	39 d3                	cmp    ebx,edx
c001c207:	72 27                	jb     c001c230 <__moddi3+0x170>
c001c209:	74 21                	je     c001c22c <__moddi3+0x16c>
c001c20b:	29 f5                	sub    ebp,esi
c001c20d:	19 cb                	sbb    ebx,ecx
c001c20f:	89 de                	mov    esi,ebx
c001c211:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c215:	d3 e6                	shl    esi,cl
c001c217:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c21b:	89 f9                	mov    ecx,edi
c001c21d:	d3 ed                	shr    ebp,cl
c001c21f:	09 ee                	or     esi,ebp
c001c221:	89 f0                	mov    eax,esi
c001c223:	d3 eb                	shr    ebx,cl
c001c225:	89 da                	mov    edx,ebx
c001c227:	e9 e8 fe ff ff       	jmp    c001c114 <__moddi3+0x54>
c001c22c:	39 c5                	cmp    ebp,eax
c001c22e:	73 db                	jae    c001c20b <__moddi3+0x14b>
c001c230:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c234:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c238:	89 d1                	mov    ecx,edx
c001c23a:	89 c6                	mov    esi,eax
c001c23c:	eb cd                	jmp    c001c20b <__moddi3+0x14b>
c001c23e:	66 90                	xchg   ax,ax

c001c240 <__udivdi3>:
c001c240:	55                   	push   ebp
c001c241:	57                   	push   edi
c001c242:	56                   	push   esi
c001c243:	53                   	push   ebx
c001c244:	83 ec 1c             	sub    esp,0x1c
c001c247:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c24b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c253:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c257:	85 d2                	test   edx,edx
c001c259:	75 41                	jne    c001c29c <__udivdi3+0x5c>
c001c25b:	39 f7                	cmp    edi,esi
c001c25d:	76 15                	jbe    c001c274 <__udivdi3+0x34>
c001c25f:	89 e8                	mov    eax,ebp
c001c261:	89 f2                	mov    edx,esi
c001c263:	f7 f7                	div    edi
c001c265:	31 db                	xor    ebx,ebx
c001c267:	89 da                	mov    edx,ebx
c001c269:	83 c4 1c             	add    esp,0x1c
c001c26c:	5b                   	pop    ebx
c001c26d:	5e                   	pop    esi
c001c26e:	5f                   	pop    edi
c001c26f:	5d                   	pop    ebp
c001c270:	c3                   	ret    
c001c271:	8d 76 00             	lea    esi,[esi+0x0]
c001c274:	89 f9                	mov    ecx,edi
c001c276:	85 ff                	test   edi,edi
c001c278:	75 0b                	jne    c001c285 <__udivdi3+0x45>
c001c27a:	b8 01 00 00 00       	mov    eax,0x1
c001c27f:	31 d2                	xor    edx,edx
c001c281:	f7 f7                	div    edi
c001c283:	89 c1                	mov    ecx,eax
c001c285:	31 d2                	xor    edx,edx
c001c287:	89 f0                	mov    eax,esi
c001c289:	f7 f1                	div    ecx
c001c28b:	89 c3                	mov    ebx,eax
c001c28d:	89 e8                	mov    eax,ebp
c001c28f:	f7 f1                	div    ecx
c001c291:	89 da                	mov    edx,ebx
c001c293:	83 c4 1c             	add    esp,0x1c
c001c296:	5b                   	pop    ebx
c001c297:	5e                   	pop    esi
c001c298:	5f                   	pop    edi
c001c299:	5d                   	pop    ebp
c001c29a:	c3                   	ret    
c001c29b:	90                   	nop
c001c29c:	39 f2                	cmp    edx,esi
c001c29e:	77 1c                	ja     c001c2bc <__udivdi3+0x7c>
c001c2a0:	0f bd da             	bsr    ebx,edx
c001c2a3:	83 f3 1f             	xor    ebx,0x1f
c001c2a6:	75 24                	jne    c001c2cc <__udivdi3+0x8c>
c001c2a8:	39 f2                	cmp    edx,esi
c001c2aa:	72 08                	jb     c001c2b4 <__udivdi3+0x74>
c001c2ac:	39 ef                	cmp    edi,ebp
c001c2ae:	0f 87 84 00 00 00    	ja     c001c338 <__udivdi3+0xf8>
c001c2b4:	b8 01 00 00 00       	mov    eax,0x1
c001c2b9:	eb ac                	jmp    c001c267 <__udivdi3+0x27>
c001c2bb:	90                   	nop
c001c2bc:	31 db                	xor    ebx,ebx
c001c2be:	31 c0                	xor    eax,eax
c001c2c0:	89 da                	mov    edx,ebx
c001c2c2:	83 c4 1c             	add    esp,0x1c
c001c2c5:	5b                   	pop    ebx
c001c2c6:	5e                   	pop    esi
c001c2c7:	5f                   	pop    edi
c001c2c8:	5d                   	pop    ebp
c001c2c9:	c3                   	ret    
c001c2ca:	66 90                	xchg   ax,ax
c001c2cc:	b8 20 00 00 00       	mov    eax,0x20
c001c2d1:	29 d8                	sub    eax,ebx
c001c2d3:	88 d9                	mov    cl,bl
c001c2d5:	d3 e2                	shl    edx,cl
c001c2d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2db:	89 fa                	mov    edx,edi
c001c2dd:	88 c1                	mov    cl,al
c001c2df:	d3 ea                	shr    edx,cl
c001c2e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2e5:	09 d1                	or     ecx,edx
c001c2e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2eb:	88 d9                	mov    cl,bl
c001c2ed:	d3 e7                	shl    edi,cl
c001c2ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2f3:	89 f7                	mov    edi,esi
c001c2f5:	88 c1                	mov    cl,al
c001c2f7:	d3 ef                	shr    edi,cl
c001c2f9:	88 d9                	mov    cl,bl
c001c2fb:	d3 e6                	shl    esi,cl
c001c2fd:	89 ea                	mov    edx,ebp
c001c2ff:	88 c1                	mov    cl,al
c001c301:	d3 ea                	shr    edx,cl
c001c303:	09 d6                	or     esi,edx
c001c305:	89 f0                	mov    eax,esi
c001c307:	89 fa                	mov    edx,edi
c001c309:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c30d:	89 d7                	mov    edi,edx
c001c30f:	89 c6                	mov    esi,eax
c001c311:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c315:	39 d7                	cmp    edi,edx
c001c317:	72 13                	jb     c001c32c <__udivdi3+0xec>
c001c319:	74 09                	je     c001c324 <__udivdi3+0xe4>
c001c31b:	89 f0                	mov    eax,esi
c001c31d:	31 db                	xor    ebx,ebx
c001c31f:	e9 43 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c324:	88 d9                	mov    cl,bl
c001c326:	d3 e5                	shl    ebp,cl
c001c328:	39 c5                	cmp    ebp,eax
c001c32a:	73 ef                	jae    c001c31b <__udivdi3+0xdb>
c001c32c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c32f:	31 db                	xor    ebx,ebx
c001c331:	e9 31 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c336:	66 90                	xchg   ax,ax
c001c338:	31 c0                	xor    eax,eax
c001c33a:	e9 28 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c33f:	90                   	nop

c001c340 <__umoddi3>:
c001c340:	55                   	push   ebp
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	83 ec 1c             	sub    esp,0x1c
c001c347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c34b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c34f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c357:	89 da                	mov    edx,ebx
c001c359:	85 c0                	test   eax,eax
c001c35b:	75 37                	jne    c001c394 <__umoddi3+0x54>
c001c35d:	39 df                	cmp    edi,ebx
c001c35f:	76 13                	jbe    c001c374 <__umoddi3+0x34>
c001c361:	89 f0                	mov    eax,esi
c001c363:	f7 f7                	div    edi
c001c365:	89 d0                	mov    eax,edx
c001c367:	31 d2                	xor    edx,edx
c001c369:	83 c4 1c             	add    esp,0x1c
c001c36c:	5b                   	pop    ebx
c001c36d:	5e                   	pop    esi
c001c36e:	5f                   	pop    edi
c001c36f:	5d                   	pop    ebp
c001c370:	c3                   	ret    
c001c371:	8d 76 00             	lea    esi,[esi+0x0]
c001c374:	89 fd                	mov    ebp,edi
c001c376:	85 ff                	test   edi,edi
c001c378:	75 0b                	jne    c001c385 <__umoddi3+0x45>
c001c37a:	b8 01 00 00 00       	mov    eax,0x1
c001c37f:	31 d2                	xor    edx,edx
c001c381:	f7 f7                	div    edi
c001c383:	89 c5                	mov    ebp,eax
c001c385:	89 d8                	mov    eax,ebx
c001c387:	31 d2                	xor    edx,edx
c001c389:	f7 f5                	div    ebp
c001c38b:	89 f0                	mov    eax,esi
c001c38d:	f7 f5                	div    ebp
c001c38f:	89 d0                	mov    eax,edx
c001c391:	eb d4                	jmp    c001c367 <__umoddi3+0x27>
c001c393:	90                   	nop
c001c394:	89 f1                	mov    ecx,esi
c001c396:	39 d8                	cmp    eax,ebx
c001c398:	76 0a                	jbe    c001c3a4 <__umoddi3+0x64>
c001c39a:	89 f0                	mov    eax,esi
c001c39c:	83 c4 1c             	add    esp,0x1c
c001c39f:	5b                   	pop    ebx
c001c3a0:	5e                   	pop    esi
c001c3a1:	5f                   	pop    edi
c001c3a2:	5d                   	pop    ebp
c001c3a3:	c3                   	ret    
c001c3a4:	0f bd e8             	bsr    ebp,eax
c001c3a7:	83 f5 1f             	xor    ebp,0x1f
c001c3aa:	75 1c                	jne    c001c3c8 <__umoddi3+0x88>
c001c3ac:	39 d8                	cmp    eax,ebx
c001c3ae:	72 04                	jb     c001c3b4 <__umoddi3+0x74>
c001c3b0:	39 f7                	cmp    edi,esi
c001c3b2:	77 08                	ja     c001c3bc <__umoddi3+0x7c>
c001c3b4:	89 da                	mov    edx,ebx
c001c3b6:	29 fe                	sub    esi,edi
c001c3b8:	19 c2                	sbb    edx,eax
c001c3ba:	89 f1                	mov    ecx,esi
c001c3bc:	89 c8                	mov    eax,ecx
c001c3be:	83 c4 1c             	add    esp,0x1c
c001c3c1:	5b                   	pop    ebx
c001c3c2:	5e                   	pop    esi
c001c3c3:	5f                   	pop    edi
c001c3c4:	5d                   	pop    ebp
c001c3c5:	c3                   	ret    
c001c3c6:	66 90                	xchg   ax,ax
c001c3c8:	ba 20 00 00 00       	mov    edx,0x20
c001c3cd:	29 ea                	sub    edx,ebp
c001c3cf:	89 e9                	mov    ecx,ebp
c001c3d1:	d3 e0                	shl    eax,cl
c001c3d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3d7:	89 f8                	mov    eax,edi
c001c3d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3dd:	88 d1                	mov    cl,dl
c001c3df:	d3 e8                	shr    eax,cl
c001c3e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3e5:	09 c1                	or     ecx,eax
c001c3e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3eb:	89 e9                	mov    ecx,ebp
c001c3ed:	d3 e7                	shl    edi,cl
c001c3ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3f3:	89 d8                	mov    eax,ebx
c001c3f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3f9:	88 d1                	mov    cl,dl
c001c3fb:	d3 e8                	shr    eax,cl
c001c3fd:	89 c7                	mov    edi,eax
c001c3ff:	89 e9                	mov    ecx,ebp
c001c401:	d3 e3                	shl    ebx,cl
c001c403:	89 f0                	mov    eax,esi
c001c405:	88 d1                	mov    cl,dl
c001c407:	d3 e8                	shr    eax,cl
c001c409:	09 d8                	or     eax,ebx
c001c40b:	89 e9                	mov    ecx,ebp
c001c40d:	d3 e6                	shl    esi,cl
c001c40f:	89 f3                	mov    ebx,esi
c001c411:	89 fa                	mov    edx,edi
c001c413:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c417:	89 d1                	mov    ecx,edx
c001c419:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c41d:	89 c6                	mov    esi,eax
c001c41f:	89 d7                	mov    edi,edx
c001c421:	39 d1                	cmp    ecx,edx
c001c423:	72 27                	jb     c001c44c <__umoddi3+0x10c>
c001c425:	74 21                	je     c001c448 <__umoddi3+0x108>
c001c427:	89 ca                	mov    edx,ecx
c001c429:	29 f3                	sub    ebx,esi
c001c42b:	19 fa                	sbb    edx,edi
c001c42d:	89 d0                	mov    eax,edx
c001c42f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c433:	d3 e0                	shl    eax,cl
c001c435:	89 e9                	mov    ecx,ebp
c001c437:	d3 eb                	shr    ebx,cl
c001c439:	09 d8                	or     eax,ebx
c001c43b:	d3 ea                	shr    edx,cl
c001c43d:	83 c4 1c             	add    esp,0x1c
c001c440:	5b                   	pop    ebx
c001c441:	5e                   	pop    esi
c001c442:	5f                   	pop    edi
c001c443:	5d                   	pop    ebp
c001c444:	c3                   	ret    
c001c445:	8d 76 00             	lea    esi,[esi+0x0]
c001c448:	39 c3                	cmp    ebx,eax
c001c44a:	73 db                	jae    c001c427 <__umoddi3+0xe7>
c001c44c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c450:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c454:	89 d7                	mov    edi,edx
c001c456:	89 c6                	mov    esi,eax
c001c458:	eb cd                	jmp    c001c427 <__umoddi3+0xe7>

Disassembly of section .init:

c001c45a <_init>:
c001c45a:	55                   	push   ebp
c001c45b:	89 e5                	mov    ebp,esp
c001c45d:	e8 b6 3c fe ff       	call   c0000118 <frame_dummy>
c001c462:	e8 e5 fa ff ff       	call   c001bf4c <__do_global_ctors_aux>
c001c467:	5d                   	pop    ebp
c001c468:	c3                   	ret    

Disassembly of section .fini:

c001c469 <_fini>:
c001c469:	55                   	push   ebp
c001c46a:	89 e5                	mov    ebp,esp
c001c46c:	e8 37 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c471:	5d                   	pop    ebp
c001c472:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c474 <Computer::~Computer()>:
c001c474:	83 ec 0c             	sub    esp,0xc
c001c477:	ba 80 d7 01 c0       	mov    edx,0xc001d780
c001c47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c480:	89 10                	mov    DWORD PTR [eax],edx
c001c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	50                   	push   eax
c001c48a:	e8 9b fa fe ff       	call   c000bf2a <Device::~Device()>
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	90                   	nop
c001c493:	83 c4 0c             	add    esp,0xc
c001c496:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c498 <Computer::~Computer()>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	83 ec 0c             	sub    esp,0xc
c001c49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4a2:	e8 cd ff ff ff       	call   c001c474 <Computer::~Computer()>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	83 ec 08             	sub    esp,0x8
c001c4ad:	68 70 01 00 00       	push   0x170
c001c4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4b6:	e8 37 e6 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	83 c4 0c             	add    esp,0xc
c001c4c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c4c2 <idleCommon()>:
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	fa                   	cli    
c001c4c6:	ff 05 a8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ea8
c001c4cc:	e8 fb 75 ff ff       	call   c0013acc <schedule()>
c001c4d1:	a1 a8 3e 02 c0       	mov    eax,ds:0xc0023ea8
c001c4d6:	48                   	dec    eax
c001c4d7:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001c4dc:	75 01                	jne    c001c4df <idleCommon()+0x1d>
c001c4de:	fb                   	sti    
c001c4df:	83 c4 0c             	add    esp,0xc
c001c4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4e4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4e4:	90                   	nop
c001c4e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4e6 <LinkedList<UnixFile>::LinkedList()>:
c001c4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c50a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c51f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c526:	90                   	nop
c001c527:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c530:	75 10                	jne    c001c542 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c532:	83 ec 0c             	sub    esp,0xc
c001c535:	68 d4 d9 01 c0       	push   0xc001d9d4
c001c53a:	e8 38 42 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c53f:	83 c4 10             	add    esp,0x10
c001c542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c546:	8b 00                	mov    eax,DWORD PTR [eax]
c001c548:	85 c0                	test   eax,eax
c001c54a:	74 34                	je     c001c580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c553:	85 c0                	test   eax,eax
c001c555:	74 29                	je     c001c580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c55e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c562:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c57e:	eb 65                	jmp    c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c584:	8b 00                	mov    eax,DWORD PTR [eax]
c001c586:	85 c0                	test   eax,eax
c001c588:	75 4b                	jne    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c591:	85 c0                	test   eax,eax
c001c593:	75 40                	jne    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c59d:	89 10                	mov    DWORD PTR [eax],edx
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bf:	85 c0                	test   eax,eax
c001c5c1:	74 22                	je     c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5c3:	83 ec 0c             	sub    esp,0xc
c001c5c6:	68 f6 d9 01 c0       	push   0xc001d9f6
c001c5cb:	e8 a7 41 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	eb 10                	jmp    c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5d5:	83 ec 0c             	sub    esp,0xc
c001c5d8:	68 00 da 01 c0       	push   0xc001da00
c001c5dd:	e8 95 41 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ec:	8d 50 01             	lea    edx,[eax+0x1]
c001c5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5f6:	90                   	nop
c001c5f7:	83 c4 0c             	add    esp,0xc
c001c5fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5fc <LinkedList<UnixFile>::getFirstElement()>:
c001c5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c600:	8b 00                	mov    eax,DWORD PTR [eax]
c001c602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c604 <LinkedList<UnixFile>::removeFirst()>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c60d:	85 c0                	test   eax,eax
c001c60f:	75 12                	jne    c001c623 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	68 0c da 01 c0       	push   0xc001da0c
c001c619:	e8 59 41 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	eb 7e                	jmp    c001c6a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c627:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c62a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 10                	je     c001c641 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c631:	83 ec 0c             	sub    esp,0xc
c001c634:	68 57 da 01 c0       	push   0xc001da57
c001c639:	e8 39 41 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c645:	8b 00                	mov    eax,DWORD PTR [eax]
c001c647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c64a:	85 c0                	test   eax,eax
c001c64c:	75 33                	jne    c001c681 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c652:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c667:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c66a:	83 f8 01             	cmp    eax,0x1
c001c66d:	74 21                	je     c001c690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	68 30 da 01 c0       	push   0xc001da30
c001c677:	e8 fb 40 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	eb 0f                	jmp    c001c690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c685:	8b 00                	mov    eax,DWORD PTR [eax]
c001c687:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	89 10                	mov    DWORD PTR [eax],edx
c001c690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c694:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c697:	8d 50 ff             	lea    edx,[eax-0x1]
c001c69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c6a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c6ae <DriverlessDevice::~DriverlessDevice()>:
c001c6ae:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c001c6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b7:	89 10                	mov    DWORD PTR [eax],edx
c001c6b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bd:	50                   	push   eax
c001c6be:	e8 67 f8 fe ff       	call   c000bf2a <Device::~Device()>
c001c6c3:	83 c4 04             	add    esp,0x4
c001c6c6:	90                   	nop
c001c6c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c6c8 <DriverlessDevice::~DriverlessDevice()>:
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	83 ec 0c             	sub    esp,0xc
c001c6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d2:	e8 d7 ff ff ff       	call   c001c6ae <DriverlessDevice::~DriverlessDevice()>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	83 ec 08             	sub    esp,0x8
c001c6dd:	68 58 01 00 00       	push   0x158
c001c6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e6:	e8 07 e4 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	83 c4 0c             	add    esp,0xc
c001c6f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6f2 <LinkedList<Device>::addElement(Device*)>:
c001c6f2:	83 ec 0c             	sub    esp,0xc
c001c6f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6fa:	75 10                	jne    c001c70c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	68 d4 d9 01 c0       	push   0xc001d9d4
c001c704:	e8 6e 40 ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c710:	8b 00                	mov    eax,DWORD PTR [eax]
c001c712:	85 c0                	test   eax,eax
c001c714:	74 3a                	je     c001c750 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c71d:	85 c0                	test   eax,eax
c001c71f:	74 2f                	je     c001c750 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c73a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c744:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c74e:	eb 68                	jmp    c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c754:	8b 00                	mov    eax,DWORD PTR [eax]
c001c756:	85 c0                	test   eax,eax
c001c758:	75 4e                	jne    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c761:	85 c0                	test   eax,eax
c001c763:	75 43                	jne    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c769:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76d:	89 10                	mov    DWORD PTR [eax],edx
c001c76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c773:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c777:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c781:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c792:	85 c0                	test   eax,eax
c001c794:	74 22                	je     c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	68 f6 d9 01 c0       	push   0xc001d9f6
c001c79e:	e8 d4 3f ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	eb 10                	jmp    c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	68 00 da 01 c0       	push   0xc001da00
c001c7b0:	e8 c2 3f ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7c9:	90                   	nop
c001c7ca:	83 c4 0c             	add    esp,0xc
c001c7cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c7ce <LinkedList<Device>::LinkedList()>:
c001c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c807:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c80e:	90                   	nop
c001c80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c814:	8b 00                	mov    eax,DWORD PTR [eax]
c001c816:	85 c0                	test   eax,eax
c001c818:	75 0e                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c821:	85 c0                	test   eax,eax
c001c823:	75 03                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c825:	b0 01                	mov    al,0x1
c001c827:	c3                   	ret    
c001c828:	b0 00                	mov    al,0x0
c001c82a:	90                   	nop
c001c82b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c830:	8b 00                	mov    eax,DWORD PTR [eax]
c001c832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83d:	85 c0                	test   eax,eax
c001c83f:	75 17                	jne    c001c858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c841:	83 ec 0c             	sub    esp,0xc
c001c844:	68 0c da 01 c0       	push   0xc001da0c
c001c849:	e8 29 3f ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	e9 92 00 00 00       	jmp    c001c8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c856:	66 90                	xchg   ax,ax
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c85f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c862:	85 c0                	test   eax,eax
c001c864:	0f 95 c0             	setne  al
c001c867:	84 c0                	test   al,al
c001c869:	74 11                	je     c001c87c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c86b:	83 ec 0c             	sub    esp,0xc
c001c86e:	68 57 da 01 c0       	push   0xc001da57
c001c873:	e8 ff 3e ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	90                   	nop
c001c87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c880:	8b 00                	mov    eax,DWORD PTR [eax]
c001c882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c885:	85 c0                	test   eax,eax
c001c887:	0f 94 c0             	sete   al
c001c88a:	84 c0                	test   al,al
c001c88c:	74 36                	je     c001c8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c892:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8aa:	83 f8 01             	cmp    eax,0x1
c001c8ad:	74 25                	je     c001c8d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	68 30 da 01 c0       	push   0xc001da30
c001c8b7:	e8 bb 3e ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	eb 13                	jmp    c001c8d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	89 10                	mov    DWORD PTR [eax],edx
c001c8d3:	90                   	nop
c001c8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e8:	83 c4 0c             	add    esp,0xc
c001c8eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8ec:	83 ec 0c             	sub    esp,0xc
c001c8ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8f4:	75 12                	jne    c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8f6:	83 ec 0c             	sub    esp,0xc
c001c8f9:	68 d4 d9 01 c0       	push   0xc001d9d4
c001c8fe:	e8 74 3e ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	66 90                	xchg   ax,ax
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c90e:	85 c0                	test   eax,eax
c001c910:	74 36                	je     c001c948 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c919:	85 c0                	test   eax,eax
c001c91b:	74 2b                	je     c001c948 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c924:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c928:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c933:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c93d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c944:	eb 6a                	jmp    c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c946:	66 90                	xchg   ax,ax
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	85 c0                	test   eax,eax
c001c950:	75 4e                	jne    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c959:	85 c0                	test   eax,eax
c001c95b:	75 43                	jne    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c965:	89 10                	mov    DWORD PTR [eax],edx
c001c967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c96f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c979:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c987:	85 c0                	test   eax,eax
c001c989:	74 25                	je     c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	68 f6 d9 01 c0       	push   0xc001d9f6
c001c993:	e8 df 3d ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	eb 13                	jmp    c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c99d:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	68 00 da 01 c0       	push   0xc001da00
c001c9a8:	e8 ca 3d ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9c1:	90                   	nop
c001c9c2:	83 c4 0c             	add    esp,0xc
c001c9c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c9c8 <ACPI::~ACPI()>:
c001c9c8:	83 ec 0c             	sub    esp,0xc
c001c9cb:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c001c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d4:	89 10                	mov    DWORD PTR [eax],edx
c001c9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9da:	83 ec 0c             	sub    esp,0xc
c001c9dd:	50                   	push   eax
c001c9de:	e8 47 f5 fe ff       	call   c000bf2a <Device::~Device()>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	90                   	nop
c001c9e7:	83 c4 0c             	add    esp,0xc
c001c9ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9ec <ACPI::~ACPI()>:
c001c9ec:	83 ec 0c             	sub    esp,0xc
c001c9ef:	83 ec 0c             	sub    esp,0xc
c001c9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f6:	e8 cd ff ff ff       	call   c001c9c8 <ACPI::~ACPI()>
c001c9fb:	83 c4 10             	add    esp,0x10
c001c9fe:	83 ec 08             	sub    esp,0x8
c001ca01:	68 64 12 00 00       	push   0x1264
c001ca06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca0a:	e8 e3 e0 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	83 c4 0c             	add    esp,0xc
c001ca15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ca18 <LinkedList<Device>::~LinkedList()>:
c001ca18:	90                   	nop
c001ca19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ca1c <LinkedList<Device>::isEmpty()>:
c001ca1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca22:	85 c0                	test   eax,eax
c001ca24:	75 0e                	jne    c001ca34 <LinkedList<Device>::isEmpty()+0x18>
c001ca26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca2d:	85 c0                	test   eax,eax
c001ca2f:	75 03                	jne    c001ca34 <LinkedList<Device>::isEmpty()+0x18>
c001ca31:	b0 01                	mov    al,0x1
c001ca33:	c3                   	ret    
c001ca34:	b0 00                	mov    al,0x0
c001ca36:	90                   	nop
c001ca37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca38 <LinkedList<Device>::getFirstElement()>:
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca40 <LinkedList<Device>::removeFirst()>:
c001ca40:	83 ec 0c             	sub    esp,0xc
c001ca43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca49:	85 c0                	test   eax,eax
c001ca4b:	75 17                	jne    c001ca64 <LinkedList<Device>::removeFirst()+0x24>
c001ca4d:	83 ec 0c             	sub    esp,0xc
c001ca50:	68 0c da 01 c0       	push   0xc001da0c
c001ca55:	e8 1d 3d ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	e9 92 00 00 00       	jmp    c001caf4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca62:	66 90                	xchg   ax,ax
c001ca64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca71:	85 c0                	test   eax,eax
c001ca73:	74 13                	je     c001ca88 <LinkedList<Device>::removeFirst()+0x48>
c001ca75:	83 ec 0c             	sub    esp,0xc
c001ca78:	68 57 da 01 c0       	push   0xc001da57
c001ca7d:	e8 f5 3c ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	8d 76 00             	lea    esi,[esi+0x0]
c001ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca94:	85 c0                	test   eax,eax
c001ca96:	75 34                	jne    c001cacc <LinkedList<Device>::removeFirst()+0x8c>
c001ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cab4:	83 f8 01             	cmp    eax,0x1
c001cab7:	74 27                	je     c001cae0 <LinkedList<Device>::removeFirst()+0xa0>
c001cab9:	83 ec 0c             	sub    esp,0xc
c001cabc:	68 30 da 01 c0       	push   0xc001da30
c001cac1:	e8 b1 3c ff ff       	call   c0010777 <Krnl::panic(char const*)>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	eb 15                	jmp    c001cae0 <LinkedList<Device>::removeFirst()+0xa0>
c001cacb:	90                   	nop
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cad2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cadc:	89 10                	mov    DWORD PTR [eax],edx
c001cade:	66 90                	xchg   ax,ax
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cae7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001caf1:	8d 76 00             	lea    esi,[esi+0x0]
c001caf4:	83 c4 0c             	add    esp,0xc
c001caf7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001caf8 <CPU::~CPU()>:
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	ba a0 e7 01 c0       	mov    edx,0xc001e7a0
c001cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb04:	89 10                	mov    DWORD PTR [eax],edx
c001cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb0a:	83 ec 0c             	sub    esp,0xc
c001cb0d:	50                   	push   eax
c001cb0e:	e8 17 f4 fe ff       	call   c000bf2a <Device::~Device()>
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	90                   	nop
c001cb17:	83 c4 0c             	add    esp,0xc
c001cb1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cb1c <CPU::~CPU()>:
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	83 ec 0c             	sub    esp,0xc
c001cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb26:	e8 cd ff ff ff       	call   c001caf8 <CPU::~CPU()>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	83 ec 08             	sub    esp,0x8
c001cb31:	68 94 11 00 00       	push   0x1194
c001cb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb3a:	e8 b3 df fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	83 c4 0c             	add    esp,0xc
c001cb45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb48:	90                   	nop
c001cb49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb4c <ThreadControlBlock::ThreadControlBlock()>:
c001cb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb93:	90                   	nop
c001cb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbd8:	90                   	nop
c001cbd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbe0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbe3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbe4 <PCI::~PCI()>:
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	ba 88 f2 01 c0       	mov    edx,0xc001f288
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	89 10                	mov    DWORD PTR [eax],edx
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	83 ec 0c             	sub    esp,0xc
c001cbf9:	50                   	push   eax
c001cbfa:	e8 b5 ed fe ff       	call   c000b9b4 <Bus::~Bus()>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	90                   	nop
c001cc03:	83 c4 0c             	add    esp,0xc
c001cc06:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cc08 <PCI::~PCI()>:
c001cc08:	83 ec 0c             	sub    esp,0xc
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc12:	e8 cd ff ff ff       	call   c001cbe4 <PCI::~PCI()>
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	83 ec 08             	sub    esp,0x8
c001cc1d:	68 5c 01 00 00       	push   0x15c
c001cc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc26:	e8 c7 de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	83 c4 0c             	add    esp,0xc
c001cc31:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc32 <IDE::~IDE()>:
c001cc32:	83 ec 0c             	sub    esp,0xc
c001cc35:	ba 3c f3 01 c0       	mov    edx,0xc001f33c
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	89 10                	mov    DWORD PTR [eax],edx
c001cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc44:	83 ec 0c             	sub    esp,0xc
c001cc47:	50                   	push   eax
c001cc48:	e8 57 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	90                   	nop
c001cc51:	83 c4 0c             	add    esp,0xc
c001cc54:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc56 <IDE::~IDE()>:
c001cc56:	83 ec 0c             	sub    esp,0xc
c001cc59:	83 ec 0c             	sub    esp,0xc
c001cc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc60:	e8 cd ff ff ff       	call   c001cc32 <IDE::~IDE()>
c001cc65:	83 c4 10             	add    esp,0x10
c001cc68:	83 ec 08             	sub    esp,0x8
c001cc6b:	68 70 02 00 00       	push   0x270
c001cc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc74:	e8 79 de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc79:	83 c4 10             	add    esp,0x10
c001cc7c:	83 c4 0c             	add    esp,0xc
c001cc7f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc80 <SATABus::~SATABus()>:
c001cc80:	83 ec 0c             	sub    esp,0xc
c001cc83:	ba 8c f3 01 c0       	mov    edx,0xc001f38c
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	89 10                	mov    DWORD PTR [eax],edx
c001cc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc92:	83 ec 0c             	sub    esp,0xc
c001cc95:	50                   	push   eax
c001cc96:	e8 09 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	90                   	nop
c001cc9f:	83 c4 0c             	add    esp,0xc
c001cca2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cca4 <SATABus::~SATABus()>:
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	83 ec 0c             	sub    esp,0xc
c001ccaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccae:	e8 cd ff ff ff       	call   c001cc80 <SATABus::~SATABus()>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	83 ec 08             	sub    esp,0x8
c001ccb9:	68 64 01 00 00       	push   0x164
c001ccbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc2:	e8 2b de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	83 c4 0c             	add    esp,0xc
c001cccd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ccce <ATA::~ATA()>:
c001ccce:	83 ec 0c             	sub    esp,0xc
c001ccd1:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	89 10                	mov    DWORD PTR [eax],edx
c001ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce0:	83 ec 0c             	sub    esp,0xc
c001cce3:	50                   	push   eax
c001cce4:	e8 9d f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cce9:	83 c4 10             	add    esp,0x10
c001ccec:	90                   	nop
c001cced:	83 c4 0c             	add    esp,0xc
c001ccf0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccf2 <ATA::~ATA()>:
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccfc:	e8 cd ff ff ff       	call   c001ccce <ATA::~ATA()>
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	83 ec 08             	sub    esp,0x8
c001cd07:	68 7c 01 00 00       	push   0x17c
c001cd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd10:	e8 dd dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	83 c4 0c             	add    esp,0xc
c001cd1b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cd1c <ATAPI::~ATAPI()>:
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	ba 14 f4 01 c0       	mov    edx,0xc001f414
c001cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd28:	89 10                	mov    DWORD PTR [eax],edx
c001cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	50                   	push   eax
c001cd32:	e8 4f f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cd37:	83 c4 10             	add    esp,0x10
c001cd3a:	90                   	nop
c001cd3b:	83 c4 0c             	add    esp,0xc
c001cd3e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd40 <ATAPI::~ATAPI()>:
c001cd40:	83 ec 0c             	sub    esp,0xc
c001cd43:	83 ec 0c             	sub    esp,0xc
c001cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd4a:	e8 cd ff ff ff       	call   c001cd1c <ATAPI::~ATAPI()>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	83 ec 08             	sub    esp,0x8
c001cd55:	68 84 01 00 00       	push   0x184
c001cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5e:	e8 8f dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	83 c4 0c             	add    esp,0xc
c001cd69:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd6a <SATA::~SATA()>:
c001cd6a:	83 ec 0c             	sub    esp,0xc
c001cd6d:	ba c8 f4 01 c0       	mov    edx,0xc001f4c8
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	89 10                	mov    DWORD PTR [eax],edx
c001cd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	50                   	push   eax
c001cd80:	e8 01 f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	90                   	nop
c001cd89:	83 c4 0c             	add    esp,0xc
c001cd8c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd8e <SATA::~SATA()>:
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	83 ec 0c             	sub    esp,0xc
c001cd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd98:	e8 cd ff ff ff       	call   c001cd6a <SATA::~SATA()>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	83 ec 08             	sub    esp,0x8
c001cda3:	68 7c 01 00 00       	push   0x17c
c001cda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdac:	e8 41 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	83 c4 0c             	add    esp,0xc
c001cdb7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cdb8 <SATAPI::~SATAPI()>:
c001cdb8:	83 ec 0c             	sub    esp,0xc
c001cdbb:	ba 58 f6 01 c0       	mov    edx,0xc001f658
c001cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc4:	89 10                	mov    DWORD PTR [eax],edx
c001cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdca:	83 ec 0c             	sub    esp,0xc
c001cdcd:	50                   	push   eax
c001cdce:	e8 b3 f6 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cdd3:	83 c4 10             	add    esp,0x10
c001cdd6:	90                   	nop
c001cdd7:	83 c4 0c             	add    esp,0xc
c001cdda:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cddc <SATAPI::~SATAPI()>:
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	83 ec 0c             	sub    esp,0xc
c001cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde6:	e8 cd ff ff ff       	call   c001cdb8 <SATAPI::~SATAPI()>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	83 ec 08             	sub    esp,0x8
c001cdf1:	68 84 01 00 00       	push   0x184
c001cdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdfa:	e8 f3 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	83 c4 0c             	add    esp,0xc
c001ce05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ce06 <IOAPIC::~IOAPIC()>:
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	ba 98 f6 01 c0       	mov    edx,0xc001f698
c001ce0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce12:	89 10                	mov    DWORD PTR [eax],edx
c001ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	50                   	push   eax
c001ce1c:	e8 09 f1 fe ff       	call   c000bf2a <Device::~Device()>
c001ce21:	83 c4 10             	add    esp,0x10
c001ce24:	90                   	nop
c001ce25:	83 c4 0c             	add    esp,0xc
c001ce28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ce2a <IOAPIC::~IOAPIC()>:
c001ce2a:	83 ec 0c             	sub    esp,0xc
c001ce2d:	83 ec 0c             	sub    esp,0xc
c001ce30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce34:	e8 cd ff ff ff       	call   c001ce06 <IOAPIC::~IOAPIC()>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	83 ec 08             	sub    esp,0x8
c001ce3f:	68 68 01 00 00       	push   0x168
c001ce44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce48:	e8 a5 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	83 c4 0c             	add    esp,0xc
c001ce53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce54 <APICTimer::~APICTimer()>:
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c001ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce60:	89 10                	mov    DWORD PTR [eax],edx
c001ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	50                   	push   eax
c001ce6a:	e8 b9 09 ff ff       	call   c000d828 <Timer::~Timer()>
c001ce6f:	83 c4 10             	add    esp,0x10
c001ce72:	90                   	nop
c001ce73:	83 c4 0c             	add    esp,0xc
c001ce76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce78 <APICTimer::~APICTimer()>:
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	83 ec 0c             	sub    esp,0xc
c001ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce82:	e8 cd ff ff ff       	call   c001ce54 <APICTimer::~APICTimer()>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	83 ec 08             	sub    esp,0x8
c001ce8d:	68 60 01 00 00       	push   0x160
c001ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce96:	e8 57 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	83 c4 0c             	add    esp,0xc
c001cea1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cea4 <PIT::~PIT()>:
c001cea4:	83 ec 0c             	sub    esp,0xc
c001cea7:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c001ceac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb0:	89 10                	mov    DWORD PTR [eax],edx
c001ceb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	50                   	push   eax
c001ceba:	e8 69 09 ff ff       	call   c000d828 <Timer::~Timer()>
c001cebf:	83 c4 10             	add    esp,0x10
c001cec2:	90                   	nop
c001cec3:	83 c4 0c             	add    esp,0xc
c001cec6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cec8 <PIT::~PIT()>:
c001cec8:	83 ec 0c             	sub    esp,0xc
c001cecb:	83 ec 0c             	sub    esp,0xc
c001cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced2:	e8 cd ff ff ff       	call   c001cea4 <PIT::~PIT()>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	83 ec 08             	sub    esp,0x8
c001cedd:	68 5c 01 00 00       	push   0x15c
c001cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee6:	e8 07 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	83 c4 0c             	add    esp,0xc
c001cef1:	c3                   	ret    
