
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f9 00 00       	call   c000f9dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 7a 02 00       	call   c0027af8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 86 02 c0       	mov    ebx,0xc00286a2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 86 02 c0    	cmp    ebx,0xc00286b0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 cc 02 c0       	mov    eax,0xc002cc38
c0000049:	3d 38 cc 02 c0       	cmp    eax,0xc002cc38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 cc 02 c0       	push   0xc002cc38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 cc 02 c0       	mov    eax,0xc002cc38
c0000075:	2d 38 cc 02 c0       	sub    eax,0xc002cc38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 cc 02 c0       	push   0xc002cc38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d268,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 86 02 c0       	mov    ebx,0xc00286b8
c00000bb:	81 eb b4 86 02 c0    	sub    ebx,0xc00286b4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 86 02 c0       	mov    esi,0xc00286b4
c00000ca:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d2 02 c0       	mov    ds:0xc002d26c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 cc 02 c0       	push   0xc002cc38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d268,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d2 02 c0       	push   0xc002d270
c000012c:	68 38 cc 02 c0       	push   0xc002cc38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 61 ca 01 00       	call   c001cdfc <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 1e 23 01 00       	call   c00126d1 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 3f ca 01 00       	call   c001cdfc <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 8d ce 01 00       	call   c001d269 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 3b d4 01 00       	call   c001d820 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 d6 02 c0 	lgdtd  ds:0xc002d6b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 e8 3f 01 00       	call   c00145c1 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d 88 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d288
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 88 d2 02 c0       	mov    ds:0xc002d288,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 88 d2 02 c0    	mov    DWORD PTR ds:0xc002d288,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 c0 86 02 c0 02 	test   BYTE PTR [edx-0x3ffd7940],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 c0 86 02 c0 01 	test   BYTE PTR [edx-0x3ffd7940],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 c0 86 02 c0 08 	test   BYTE PTR [edx-0x3ffd7940],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 c0 86 02 c0 04 	test   BYTE PTR [edi-0x3ffd7940],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 c0 86 02 c0 01 	test   BYTE PTR [edx-0x3ffd7940],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d a0 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2a0
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 a4 d2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2d5c]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 a4 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d5c],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 cc d2 02 c0    	cmp    DWORD PTR ds:0xc002d2cc,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d dc d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2dc
c0000c49:	c7 42 0c d4 d2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d2d4
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 dc d2 02 c0    	mov    DWORD PTR ds:0xc002d2dc,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 cc d2 02 c0    	mov    DWORD PTR ds:0xc002d2cc,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 a0 d2 02 c0 02 	test   BYTE PTR ds:0xc002d2a0,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 51 e7 00 00       	call   c000f47b <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 93 e6 00 00       	call   c000f47b <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 7d e6 00 00       	call   c000f47b <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 59 e6 00 00       	call   c000f47b <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d a0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2a0
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 a4 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2d5c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 a4 d2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2d5c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 d4 d2 02 c0 	lea    edx,[eax*8-0x3ffd2d2c]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d e0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2e0
c0000fcb:	81 fb d4 d2 02 c0    	cmp    ebx,0xc002d2d4
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d d4 d2 02 c0       	cmp    eax,0xc002d2d4
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d d0 d2 02 c0    	cmp    DWORD PTR ds:0xc002d2d0,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 dc d2 02 c0       	mov    ds:0xc002d2dc,eax
c0001007:	a3 e0 d2 02 c0       	mov    ds:0xc002d2e0,eax
c000100c:	a3 d0 d2 02 c0       	mov    ds:0xc002d2d0,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 d4 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d2d4
c000101a:	c7 40 0c d4 d2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d2d4
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 e0 d2 02 c0       	mov    ds:0xc002d2e0,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 d4 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d2d4
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 98 d2 02 c0 	lea    ebp,[edx*4-0x3ffd2d68]
c000106b:	8b 14 95 a0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d60]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 a0 d2 02 c0 	lea    ecx,[edx*4-0x3ffd2d60]
c0001086:	8b 14 95 a0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d60]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd d4 d5 02 c0 	or     DWORD PTR [edi*4-0x3ffd2a2c],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 d4 d2 02 c0 	lea    eax,[eax*8-0x3ffd2d2c]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d dc d2 02 c0    	mov    DWORD PTR ds:0xc002d2dc,ecx
c0001140:	89 0d e0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2e0,ecx
c0001146:	c7 41 08 d4 d2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d2d4
c000114d:	c7 41 0c d4 d2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d2d4
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd cc d2 02 c0 	lea    edx,[ecx*8-0x3ffd2d34]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d d4 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2a2c]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d d4 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2a2c]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 cc d2 02 c0 	lea    edx,[eax*4-0x3ffd2d34]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d d4 d5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2a2c],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d dc d2 02 c0    	mov    DWORD PTR ds:0xc002d2dc,edi
c0001213:	89 3d e0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2e0,edi
c0001219:	c7 47 08 d4 d2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d2d4
c0001220:	c7 47 0c d4 d2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d2d4
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d d0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2d0,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d cc d2 02 c0    	mov    DWORD PTR ds:0xc002d2cc,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba a0 d2 02 c0       	mov    edx,0xc002d2a0
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d a0 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d2a0,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d f4 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5f4
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 f4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5f4,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d f4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5f4,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 cc d2 02 c0    	cmp    DWORD PTR ds:0xc002d2cc,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d cc d2 02 c0    	mov    DWORD PTR ds:0xc002d2cc,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d a0 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d2a0,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 fc d5 02 c0    	push   DWORD PTR ds:0xc002d5fc
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d a0 d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d2a0,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 fc d5 02 c0       	mov    eax,ds:0xc002d5fc
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d cc d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d2cc,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 a4 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d5c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 d4 d2 02 c0       	mov    eax,0xc002d2d4
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d cc d5 02 c0       	cmp    eax,0xc002d5cc
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 08 d6 02 c0       	mov    eax,ds:0xc002d608
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 f0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5f0
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 04 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d604
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 14 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d614
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 c4 87 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd783c]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 a0 d2 02 c0       	mov    ds:0xc002d2a0,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 f4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5f4,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 60 ed 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd12a0]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 03 e8 01 00       	jmp    c0020218 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 60 ed 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd12a0]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 34 e8 01 00       	jmp    c002025f <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 60 ed 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd12a0]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 5c e8 01 00       	jmp    c00202a6 <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 2f 41 02 00       	call   c0025e5c <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 e0 88 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7720]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 e0 88 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7720]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba e0 87 02 c0       	mov    edx,0xc00287e0
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 00 89 02 c0       	mov    edx,0xc0028900
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 0c 89 02 c0       	mov    edx,0xc002890c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba f0 88 02 c0       	mov    edx,0xc00288f0
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 40 d6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd29c0]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 20 d6 02 c0    	mov    ax,ds:0xc002d620
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 20 d6 02 c0    	mov    ds:0xc002d620,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 2c 2f 02 00       	call   c0025e5c <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 12 89 02 c0       	mov    eax,0xc0028912
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad 60 88 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd77a0]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 1b 89 02 c0       	mov    eax,0xc002891b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 e0 88 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7720]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 f7 18 02 00       	call   c0025e5c <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba f0 88 02 c0       	mov    edx,0xc00288f0
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba e0 87 02 c0       	mov    edx,0xc00287e0
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba f0 87 02 c0       	mov    edx,0xc00287f0
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 40 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd29c0]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 40 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd29c0],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 be 02 02 00       	call   c0025e5c <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 a4 02 02 00       	call   c0025e5c <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 37 88 02 c0       	mov    eax,0xc0028837
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 30 88 02 c0       	mov    eax,0xc0028830
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 40 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd29c0]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 20 88 02 c0       	mov    esi,0xc0028820
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 e7 e9 01 00       	call   c0025e5c <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 00 89 02 c0       	mov    edx,0xc0028900
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 00 88 02 c0       	mov    edx,0xc0028800
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 10 88 02 c0       	mov    edx,0xc0028810
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 22 89 02 c0       	mov    edx,0xc0028922
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 2e 89 02 c0       	mov    edx,0xc002892e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 42 89 02 c0       	mov    edx,0xc0028942
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 98 73 00 00       	call   c000f624 <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 92 73 00 00       	call   c000f634 <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c 60 8c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028c60
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 60 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c60
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 60 8a 02 c0       	mov    eax,0xc0028a60
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 a0 89 02 c0       	mov    eax,0xc00289a0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 60 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76a0]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 d7 70 00 00       	call   c000f634 <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 c1 70 00 00       	call   c000f634 <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 3b f3 01 00       	call   c002792f <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 fe f2 01 00       	call   c0027911 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 d2 f2 01 00       	call   c002792f <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 85 e9 01 00       	call   c0027034 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 ff f3 01 00       	call   c0027ac0 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 4c f2 01 00       	call   c002792f <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 8e f1 01 00       	call   c002792f <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 5b f1 01 00       	call   c0027911 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 48 f0 01 00       	call   c002792f <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 10 f0 01 00       	call   c0027911 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 a0 6c 00 00       	call   c000f654 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 3b 6c 00 00       	call   c000f634 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 60 8d 02 c0       	mov    eax,0xc0028d60
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 1c ee 01 00       	call   c002792f <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 e1 ed 01 00       	call   c0027911 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 c0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e40]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 f1 ea 01 00       	call   c00276c3 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 6f e4 01 00       	call   c0027060 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 2b ed 01 00       	call   c0027933 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 19 ee 01 00       	call   c0027a57 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 03 e4 01 00       	call   c0027060 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 ae ec 01 00       	call   c002792d <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 8f ec 01 00       	call   c0027931 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 1d ee 01 00       	call   c0027ae0 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 cf e9 01 00       	call   c00276c3 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 4d e3 01 00       	call   c0027060 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 09 ec 01 00       	call   c0027933 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 f7 ec 01 00       	call   c0027a57 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 e1 e2 01 00       	call   c0027060 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 8c eb 01 00       	call   c002792d <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 6c eb 01 00       	call   c0027931 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 f9 ec 01 00       	call   c0027ae0 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 a7 ea 01 00       	call   c002792f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 65 ea 01 00       	call   c0027911 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 4d ea 01 00       	call   c002792f <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 bf e7 01 00       	call   c00276c3 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 c1 da 01 00       	call   c00269e3 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 24 e1 01 00       	call   c0027060 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 76 e7 01 00       	call   c00276c3 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 7c da 01 00       	call   c00269e3 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 4b e7 01 00       	call   c00276c3 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 9b e9 01 00       	call   c002792d <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 78 e0 01 00       	call   c0027034 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 f2 ea 01 00       	call   c0027ac0 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 21 e9 01 00       	call   c0027911 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 1c e0 01 00       	call   c0027034 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 9a e6 01 00       	call   c00276c3 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 1d e0 01 00       	call   c0027060 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 6f e6 01 00       	call   c00276c3 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 d6 e2 01 00       	call   c0027344 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 55 d9 01 00       	call   c00269e3 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 b5 d2 01 00       	call   c0026378 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 8c e9 01 00       	call   c0027a57 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 75 df 01 00       	call   c0027060 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 5c e9 01 00       	call   c0027a57 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 ce d8 01 00       	call   c00269e3 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 07 e8 01 00       	call   c0027933 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 ef e1 01 00       	call   c0027344 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 75 d8 01 00       	call   c00269e3 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 5b e9 01 00       	call   c0027ae0 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 35 e5 01 00       	call   c00276c3 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 8c de 01 00       	call   c0027034 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 6b e7 01 00       	call   c002792f <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 04 d8 01 00       	call   c00269e3 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 30 de 01 00       	call   c0027034 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 ca e8 01 00       	call   c0027ae0 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 83 e4 01 00       	call   c00276c3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 00 de 01 00       	call   c0027060 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 53 e4 01 00       	call   c00276c3 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 59 d7 01 00       	call   c00269e3 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 29 e4 01 00       	call   c00276c3 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 7b e6 01 00       	call   c002792f <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 52 dd 01 00       	call   c0027034 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 cc e7 01 00       	call   c0027ac0 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 fb e5 01 00       	call   c0027911 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 f5 dc 01 00       	call   c0027034 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 73 e3 01 00       	call   c00276c3 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 f6 dc 01 00       	call   c0027060 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 48 e3 01 00       	call   c00276c3 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 af df 01 00       	call   c0027344 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 2e d6 01 00       	call   c00269e3 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 7e cf 01 00       	call   c0026378 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 55 e6 01 00       	call   c0027a57 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 3e dc 01 00       	call   c0027060 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 25 e6 01 00       	call   c0027a57 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 97 d5 01 00       	call   c00269e3 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 d0 e4 01 00       	call   c0027933 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 b7 de 01 00       	call   c0027344 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 36 d5 01 00       	call   c00269e3 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 1c e6 01 00       	call   c0027ae0 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 f6 e1 01 00       	call   c00276c3 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 4d db 01 00       	call   c0027034 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 2c e4 01 00       	call   c002792f <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 c5 d4 01 00       	call   c00269e3 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 f1 da 01 00       	call   c0027034 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 66 e1 01 00       	call   c00276c3 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 6c d4 01 00       	call   c00269e3 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 20 92 02 c0       	mov    eax,0xc0029220
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 34 92 02 c0       	mov    eax,0xc0029234
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d4 5f 00 00       	call   c000f634 <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 d6 5f 00 00       	call   c000f654 <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 e1 df 01 00       	call   c00276c3 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 5f d9 01 00       	call   c0027060 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 f1 cb 01 00       	call   c0026378 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 c8 e2 01 00       	call   c0027a57 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 b1 d8 01 00       	call   c0027060 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 94 e2 01 00       	call   c0027a57 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 06 d2 01 00       	call   c00269e3 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 66 e2 01 00       	call   c0027a57 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 55 d8 01 00       	call   c0027060 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 be d1 01 00       	call   c00269e3 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 df ca 01 00       	call   c0026378 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 b6 e1 01 00       	call   c0027a57 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 9f d7 01 00       	call   c0027060 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 82 e1 01 00       	call   c0027a57 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 f4 d0 01 00       	call   c00269e3 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 54 e1 01 00       	call   c0027a57 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 43 d7 01 00       	call   c0027060 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 ac d0 01 00       	call   c00269e3 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 8a d0 01 00       	call   c00269e3 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 66 c9 01 00       	call   c0026378 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 3d e0 01 00       	call   c0027a57 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 26 d6 01 00       	call   c0027060 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 09 e0 01 00       	call   c0027a57 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 7b cf 01 00       	call   c00269e3 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 db df 01 00       	call   c0027a57 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 c4 d5 01 00       	call   c0027060 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 2d cf 01 00       	call   c00269e3 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 8d df 01 00       	call   c0027a57 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 76 d5 01 00       	call   c0027060 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 df ce 01 00       	call   c00269e3 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 f4 c7 01 00       	call   c0026378 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 cb de 01 00       	call   c0027a57 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 b4 d4 01 00       	call   c0027060 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 9b de 01 00       	call   c0027a57 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 0d ce 01 00       	call   c00269e3 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 6d de 01 00       	call   c0027a57 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 56 d4 01 00       	call   c0027060 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 bf cd 01 00       	call   c00269e3 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 1f de 01 00       	call   c0027a57 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 08 d4 01 00       	call   c0027060 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 71 cd 01 00       	call   c00269e3 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 45 cd 01 00       	call   c00269e3 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 a2 d3 01 00       	call   c0027060 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 5e dc 01 00       	call   c0027933 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 ed cc 01 00       	call   c00269e3 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 4a d3 01 00       	call   c0027060 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 06 dc 01 00       	call   c0027933 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 80 c5 01 00       	call   c0026378 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 57 dc 01 00       	call   c0027a57 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 40 d2 01 00       	call   c0027060 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 23 dc 01 00       	call   c0027a57 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 95 cb 01 00       	call   c00269e3 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 f5 db 01 00       	call   c0027a57 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 de d1 01 00       	call   c0027060 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 47 cb 01 00       	call   c00269e3 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 a7 db 01 00       	call   c0027a57 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 90 d1 01 00       	call   c0027060 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 f9 ca 01 00       	call   c00269e3 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 59 db 01 00       	call   c0027a57 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 42 d1 01 00       	call   c0027060 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 ab ca 01 00       	call   c00269e3 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 0b db 01 00       	call   c0027a57 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 f4 d0 01 00       	call   c0027060 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 5d ca 01 00       	call   c00269e3 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 5f c3 01 00       	call   c0026378 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 36 da 01 00       	call   c0027a57 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 1f d0 01 00       	call   c0027060 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 06 da 01 00       	call   c0027a57 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 78 c9 01 00       	call   c00269e3 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 d8 d9 01 00       	call   c0027a57 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 c1 cf 01 00       	call   c0027060 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 2a c9 01 00       	call   c00269e3 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 8a d9 01 00       	call   c0027a57 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 73 cf 01 00       	call   c0027060 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 dc c8 01 00       	call   c00269e3 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 3c d9 01 00       	call   c0027a57 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 25 cf 01 00       	call   c0027060 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 8e c8 01 00       	call   c00269e3 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 ee d8 01 00       	call   c0027a57 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 d7 ce 01 00       	call   c0027060 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 40 c8 01 00       	call   c00269e3 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 14 c8 01 00       	call   c00269e3 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 71 ce 01 00       	call   c0027060 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 2d d7 01 00       	call   c0027933 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 bc c7 01 00       	call   c00269e3 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 19 ce 01 00       	call   c0027060 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 d5 d6 01 00       	call   c0027933 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 63 c7 01 00       	call   c00269e3 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 c0 cd 01 00       	call   c0027060 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 7c d6 01 00       	call   c0027933 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 0a c7 01 00       	call   c00269e3 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 67 cd 01 00       	call   c0027060 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 23 d6 01 00       	call   c0027933 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 81 bf 01 00       	call   c0026378 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 58 d6 01 00       	call   c0027a57 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 41 cc 01 00       	call   c0027060 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 24 d6 01 00       	call   c0027a57 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 96 c5 01 00       	call   c00269e3 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 f6 d5 01 00       	call   c0027a57 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 df cb 01 00       	call   c0027060 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 48 c5 01 00       	call   c00269e3 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 a8 d5 01 00       	call   c0027a57 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 91 cb 01 00       	call   c0027060 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 fa c4 01 00       	call   c00269e3 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 5a d5 01 00       	call   c0027a57 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 43 cb 01 00       	call   c0027060 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 ac c4 01 00       	call   c00269e3 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 0c d5 01 00       	call   c0027a57 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 f5 ca 01 00       	call   c0027060 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 5e c4 01 00       	call   c00269e3 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 be d4 01 00       	call   c0027a57 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 a7 ca 01 00       	call   c0027060 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 0d c4 01 00       	call   c00269e3 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 6d d4 01 00       	call   c0027a57 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 56 ca 01 00       	call   c0027060 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 bf c3 01 00       	call   c00269e3 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 b9 bc 01 00       	call   c0026378 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 90 d3 01 00       	call   c0027a57 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 79 c9 01 00       	call   c0027060 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 59 d3 01 00       	call   c0027a57 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 cb c2 01 00       	call   c00269e3 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 2b d3 01 00       	call   c0027a57 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 14 c9 01 00       	call   c0027060 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 7d c2 01 00       	call   c00269e3 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 dd d2 01 00       	call   c0027a57 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 c6 c8 01 00       	call   c0027060 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 2f c2 01 00       	call   c00269e3 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 8f d2 01 00       	call   c0027a57 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 78 c8 01 00       	call   c0027060 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 e1 c1 01 00       	call   c00269e3 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 41 d2 01 00       	call   c0027a57 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 2a c8 01 00       	call   c0027060 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 93 c1 01 00       	call   c00269e3 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 f3 d1 01 00       	call   c0027a57 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 dc c7 01 00       	call   c0027060 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 42 c1 01 00       	call   c00269e3 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 a2 d1 01 00       	call   c0027a57 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 8b c7 01 00       	call   c0027060 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 fa c0 01 00       	call   c00269e3 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 d3 c0 01 00       	call   c00269e3 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 31 c7 01 00       	call   c0027060 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 ed cf 01 00       	call   c0027933 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 7c c0 01 00       	call   c00269e3 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 da c6 01 00       	call   c0027060 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 96 cf 01 00       	call   c0027933 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 24 c0 01 00       	call   c00269e3 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 82 c6 01 00       	call   c0027060 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 3e cf 01 00       	call   c0027933 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 cc bf 01 00       	call   c00269e3 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 2a c6 01 00       	call   c0027060 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 e6 ce 01 00       	call   c0027933 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 74 bf 01 00       	call   c00269e3 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 d2 c5 01 00       	call   c0027060 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 8e ce 01 00       	call   c0027933 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 22 bf 01 00       	call   c00269e3 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 80 c5 01 00       	call   c0027060 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 3c ce 01 00       	call   c0027933 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 50 b7 01 00       	call   c0026378 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 27 ce 01 00       	call   c0027a57 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 10 c4 01 00       	call   c0027060 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 f7 cd 01 00       	call   c0027a57 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 69 bd 01 00       	call   c00269e3 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 64 92 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6d9c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 9d cd 01 00       	call   c0027a57 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 86 c3 01 00       	call   c0027060 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 f1 bc 01 00       	call   c00269e3 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 3e cd 01 00       	call   c0027a57 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 27 c3 01 00       	call   c0027060 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 92 bc 01 00       	call   c00269e3 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 df cc 01 00       	call   c0027a57 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 c8 c2 01 00       	call   c0027060 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 33 bc 01 00       	call   c00269e3 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 80 cc 01 00       	call   c0027a57 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 69 c2 01 00       	call   c0027060 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 d4 bb 01 00       	call   c00269e3 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 21 cc 01 00       	call   c0027a57 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 0a c2 01 00       	call   c0027060 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 75 bb 01 00       	call   c00269e3 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 c2 cb 01 00       	call   c0027a57 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 ab c1 01 00       	call   c0027060 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 16 bb 01 00       	call   c00269e3 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 63 cb 01 00       	call   c0027a57 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 4c c1 01 00       	call   c0027060 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 b7 ba 01 00       	call   c00269e3 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 04 cb 01 00       	call   c0027a57 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 ed c0 01 00       	call   c0027060 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 58 ba 01 00       	call   c00269e3 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 62 b3 01 00       	call   c0026378 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 39 ca 01 00       	call   c0027a57 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 22 c0 01 00       	call   c0027060 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 09 ca 01 00       	call   c0027a57 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 7b b9 01 00       	call   c00269e3 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 80 92 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6d80]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 ae c9 01 00       	call   c0027a57 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 97 bf 01 00       	call   c0027060 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 02 b9 01 00       	call   c00269e3 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 4e c9 01 00       	call   c0027a57 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 37 bf 01 00       	call   c0027060 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 a2 b8 01 00       	call   c00269e3 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 ee c8 01 00       	call   c0027a57 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 d7 be 01 00       	call   c0027060 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 42 b8 01 00       	call   c00269e3 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 8e c8 01 00       	call   c0027a57 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 77 be 01 00       	call   c0027060 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 e2 b7 01 00       	call   c00269e3 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 2e c8 01 00       	call   c0027a57 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 17 be 01 00       	call   c0027060 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 82 b7 01 00       	call   c00269e3 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 ce c7 01 00       	call   c0027a57 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 b7 bd 01 00       	call   c0027060 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 22 b7 01 00       	call   c00269e3 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 6e c7 01 00       	call   c0027a57 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 57 bd 01 00       	call   c0027060 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 c2 b6 01 00       	call   c00269e3 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 0e c7 01 00       	call   c0027a57 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 f7 bc 01 00       	call   c0027060 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 62 b6 01 00       	call   c00269e3 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 9c 92 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6d64]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 07 b6 01 00       	call   c00269e3 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 64 bc 01 00       	call   c0027060 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 20 c5 01 00       	call   c0027933 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 aa b5 01 00       	call   c00269e3 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 07 bc 01 00       	call   c0027060 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 c3 c4 01 00       	call   c0027933 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 4d b5 01 00       	call   c00269e3 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 aa bb 01 00       	call   c0027060 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 66 c4 01 00       	call   c0027933 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 f0 b4 01 00       	call   c00269e3 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 4d bb 01 00       	call   c0027060 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 09 c4 01 00       	call   c0027933 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 93 b4 01 00       	call   c00269e3 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 f0 ba 01 00       	call   c0027060 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 ac c3 01 00       	call   c0027933 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 36 b4 01 00       	call   c00269e3 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 93 ba 01 00       	call   c0027060 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 4f c3 01 00       	call   c0027933 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 d9 b3 01 00       	call   c00269e3 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 36 ba 01 00       	call   c0027060 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 f2 c2 01 00       	call   c0027933 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 7c b3 01 00       	call   c00269e3 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 d9 b9 01 00       	call   c0027060 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 95 c2 01 00       	call   c0027933 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 91 b9 01 00       	call   c0027060 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 01 c4 01 00       	jmp    c0027ae0 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 73 c0 01 00       	call   c002792f <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 31 c0 01 00       	call   c0027911 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 c8 bd 01 00       	call   c00276c3 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 c9 b0 01 00       	call   c00269e3 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 98 bd 01 00       	call   c00276c3 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 ff b9 01 00       	call   c0027344 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 9e bf 01 00       	call   c0027911 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 a1 bf 01 00       	call   c002792f <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 74 bf 01 00       	call   c002792f <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 6d b9 01 00       	call   c0027344 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 ef c0 01 00       	call   c0027ae0 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 ca c0 01 00       	call   c0027ae0 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 a4 bc 01 00       	call   c00276c3 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 fb b5 01 00       	call   c0027034 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 da be 01 00       	call   c002792f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 73 af 01 00       	call   c00269e3 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 97 b5 01 00       	call   c0027034 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 31 c0 01 00       	call   c0027ae0 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 71 b8 01 00       	call   c0027344 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 ee ae 01 00       	call   c00269e3 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 1a bb 01 00       	call   c00276c3 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 1a ae 01 00       	call   c00269e3 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 fa ad 01 00       	call   c00269e3 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 ca ba 01 00       	call   c00276c3 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 1a bd 01 00       	call   c002792d <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 f9 b3 01 00       	call   c0027034 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 73 be 01 00       	call   c0027ac0 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 a2 bc 01 00       	call   c0027911 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 a0 b3 01 00       	call   c0027034 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 1e ba 01 00       	call   c00276c3 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 a1 b3 01 00       	call   c0027060 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 f3 b9 01 00       	call   c00276c3 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 5a b6 01 00       	call   c0027344 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 d9 ac 01 00       	call   c00269e3 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 a3 b9 01 00       	call   c00276c3 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 ef bb 01 00       	call   c002792f <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 e4 b2 01 00       	call   c0027060 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 b6 b2 01 00       	call   c0027060 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 ef b8 01 00       	call   c00276c3 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 53 b5 01 00       	call   c0027344 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 1b b5 01 00       	call   c0027344 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 9a ab 01 00       	call   c00269e3 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 7f bc 01 00       	call   c0027ae0 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 59 b8 01 00       	call   c00276c3 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 b0 b1 01 00       	call   c0027034 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 8f ba 01 00       	call   c002792f <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 27 ab 01 00       	call   c00269e3 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 4b b1 01 00       	call   c0027034 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 e5 bb 01 00       	call   c0027ae0 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 ae b9 01 00       	call   c002792f <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 6c b9 01 00       	call   c0027911 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 03 b7 01 00       	call   c00276c3 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 04 aa 01 00       	call   c00269e3 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 d3 b6 01 00       	call   c00276c3 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 3a b3 01 00       	call   c0027344 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 d9 b8 01 00       	call   c0027911 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 dc b8 01 00       	call   c002792f <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 af b8 01 00       	call   c002792f <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 a8 b2 01 00       	call   c0027344 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 2a ba 01 00       	call   c0027ae0 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 05 ba 01 00       	call   c0027ae0 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 df b5 01 00       	call   c00276c3 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 36 af 01 00       	call   c0027034 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 15 b8 01 00       	call   c002792f <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 ae a8 01 00       	call   c00269e3 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 d2 ae 01 00       	call   c0027034 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 6c b9 01 00       	call   c0027ae0 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 ac b1 01 00       	call   c0027344 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 29 a8 01 00       	call   c00269e3 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 54 b4 01 00       	call   c00276c3 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 54 a7 01 00       	call   c00269e3 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 34 a7 01 00       	call   c00269e3 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 04 b4 01 00       	call   c00276c3 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 54 b6 01 00       	call   c002792d <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 32 ad 01 00       	call   c0027034 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 ac b7 01 00       	call   c0027ac0 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 db b5 01 00       	call   c0027911 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 d8 ac 01 00       	call   c0027034 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 56 b3 01 00       	call   c00276c3 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 d9 ac 01 00       	call   c0027060 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 2b b3 01 00       	call   c00276c3 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 92 af 01 00       	call   c0027344 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 11 a6 01 00       	call   c00269e3 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 db b2 01 00       	call   c00276c3 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 27 b5 01 00       	call   c002792f <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 1c ac 01 00       	call   c0027060 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 ee ab 01 00       	call   c0027060 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 25 b2 01 00       	call   c00276c3 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 89 ae 01 00       	call   c0027344 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 56 ae 01 00       	call   c0027344 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 d5 a4 01 00       	call   c00269e3 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 ba b5 01 00       	call   c0027ae0 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 94 b1 01 00       	call   c00276c3 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 eb aa 01 00       	call   c0027034 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 ca b3 01 00       	call   c002792f <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 62 a4 01 00       	call   c00269e3 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 86 aa 01 00       	call   c0027034 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 20 b5 01 00       	call   c0027ae0 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 e9 b2 01 00       	call   c002792f <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 a7 b2 01 00       	call   c0027911 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 3e b0 01 00       	call   c00276c3 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 3f a3 01 00       	call   c00269e3 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 0e b0 01 00       	call   c00276c3 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 75 ac 01 00       	call   c0027344 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 14 b2 01 00       	call   c0027911 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 17 b2 01 00       	call   c002792f <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 ea b1 01 00       	call   c002792f <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 e3 ab 01 00       	call   c0027344 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 65 b3 01 00       	call   c0027ae0 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 40 b3 01 00       	call   c0027ae0 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 1a af 01 00       	call   c00276c3 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 71 a8 01 00       	call   c0027034 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 50 b1 01 00       	call   c002792f <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 e9 a1 01 00       	call   c00269e3 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 0d a8 01 00       	call   c0027034 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 a7 b2 01 00       	call   c0027ae0 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 e7 aa 01 00       	call   c0027344 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 64 a1 01 00       	call   c00269e3 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 8f ad 01 00       	call   c00276c3 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 8f a0 01 00       	call   c00269e3 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 6f a0 01 00       	call   c00269e3 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 3f ad 01 00       	call   c00276c3 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 8f af 01 00       	call   c002792d <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 6d a6 01 00       	call   c0027034 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 e7 b0 01 00       	call   c0027ac0 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 16 af 01 00       	call   c0027911 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 13 a6 01 00       	call   c0027034 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 91 ac 01 00       	call   c00276c3 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 14 a6 01 00       	call   c0027060 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 66 ac 01 00       	call   c00276c3 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 cd a8 01 00       	call   c0027344 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 4c 9f 01 00       	call   c00269e3 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 16 ac 01 00       	call   c00276c3 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 62 ae 01 00       	call   c002792f <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 57 a5 01 00       	call   c0027060 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 29 a5 01 00       	call   c0027060 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 60 ab 01 00       	call   c00276c3 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 c4 a7 01 00       	call   c0027344 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 91 a7 01 00       	call   c0027344 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 10 9e 01 00       	call   c00269e3 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 f5 ae 01 00       	call   c0027ae0 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 cf aa 01 00       	call   c00276c3 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 26 a4 01 00       	call   c0027034 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 05 ad 01 00       	call   c002792f <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 9d 9d 01 00       	call   c00269e3 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 c1 a3 01 00       	call   c0027034 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 5b ae 01 00       	call   c0027ae0 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 24 ac 01 00       	call   c002792f <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 e2 ab 01 00       	call   c0027911 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 79 a9 01 00       	call   c00276c3 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 7a 9c 01 00       	call   c00269e3 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 49 a9 01 00       	call   c00276c3 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 b0 a5 01 00       	call   c0027344 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 4f ab 01 00       	call   c0027911 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 52 ab 01 00       	call   c002792f <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 25 ab 01 00       	call   c002792f <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 1e a5 01 00       	call   c0027344 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 a0 ac 01 00       	call   c0027ae0 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 7b ac 01 00       	call   c0027ae0 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 55 a8 01 00       	call   c00276c3 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 ac a1 01 00       	call   c0027034 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 8b aa 01 00       	call   c002792f <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 24 9b 01 00       	call   c00269e3 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 48 a1 01 00       	call   c0027034 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 e2 ab 01 00       	call   c0027ae0 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 22 a4 01 00       	call   c0027344 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 9f 9a 01 00       	call   c00269e3 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 ca a6 01 00       	call   c00276c3 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 ca 99 01 00       	call   c00269e3 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 aa 99 01 00       	call   c00269e3 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 7a a6 01 00       	call   c00276c3 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 ca a8 01 00       	call   c002792d <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 a8 9f 01 00       	call   c0027034 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 22 aa 01 00       	call   c0027ac0 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 51 a8 01 00       	call   c0027911 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 4e 9f 01 00       	call   c0027034 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 cc a5 01 00       	call   c00276c3 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 4f 9f 01 00       	call   c0027060 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 a1 a5 01 00       	call   c00276c3 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 08 a2 01 00       	call   c0027344 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 87 98 01 00       	call   c00269e3 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 51 a5 01 00       	call   c00276c3 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 9d a7 01 00       	call   c002792f <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 92 9e 01 00       	call   c0027060 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 64 9e 01 00       	call   c0027060 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 9b a4 01 00       	call   c00276c3 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 ff a0 01 00       	call   c0027344 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 cc a0 01 00       	call   c0027344 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 4b 97 01 00       	call   c00269e3 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 30 a8 01 00       	call   c0027ae0 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 0a a4 01 00       	call   c00276c3 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 61 9d 01 00       	call   c0027034 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 40 a6 01 00       	call   c002792f <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 d8 96 01 00       	call   c00269e3 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 fc 9c 01 00       	call   c0027034 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 96 a7 01 00       	call   c0027ae0 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 5c a5 01 00       	call   c002792f <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 1a a5 01 00       	call   c0027911 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 b1 a2 01 00       	call   c00276c3 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 b2 95 01 00       	call   c00269e3 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 81 a2 01 00       	call   c00276c3 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 e8 9e 01 00       	call   c0027344 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 87 a4 01 00       	call   c0027911 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 8a a4 01 00       	call   c002792f <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 5d a4 01 00       	call   c002792f <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 56 9e 01 00       	call   c0027344 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 d8 a5 01 00       	call   c0027ae0 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 af a5 01 00       	call   c0027ae0 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 89 a1 01 00       	call   c00276c3 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 e0 9a 01 00       	call   c0027034 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 bf a3 01 00       	call   c002792f <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 58 94 01 00       	call   c00269e3 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 80 9a 01 00       	call   c0027034 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 1a a5 01 00       	call   c0027ae0 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 5b 9d 01 00       	call   c0027344 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 d8 93 01 00       	call   c00269e3 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 04 a0 01 00       	call   c00276c3 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 04 93 01 00       	call   c00269e3 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 e4 92 01 00       	call   c00269e3 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 b4 9f 01 00       	call   c00276c3 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 e8 a1 01 00       	call   c0027911 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 df 98 01 00       	call   c0027034 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 59 a3 01 00       	call   c0027ac0 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 88 a1 01 00       	call   c0027911 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 82 98 01 00       	call   c0027034 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 00 9f 01 00       	call   c00276c3 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 83 98 01 00       	call   c0027060 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 d5 9e 01 00       	call   c00276c3 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 3c 9b 01 00       	call   c0027344 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 bb 91 01 00       	call   c00269e3 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 85 9e 01 00       	call   c00276c3 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 d1 a0 01 00       	call   c002792f <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 c6 97 01 00       	call   c0027060 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 98 97 01 00       	call   c0027060 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 dc 9d 01 00       	call   c00276c3 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 43 9a 01 00       	call   c0027344 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 2c 97 01 00       	call   c0027060 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 e8 9f 01 00       	call   c0027933 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 db 99 01 00       	call   c0027344 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 5a 90 01 00       	call   c00269e3 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 3f a1 01 00       	call   c0027ae0 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 19 9d 01 00       	call   c00276c3 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 70 96 01 00       	call   c0027034 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 4f 9f 01 00       	call   c002792f <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 e7 8f 01 00       	call   c00269e3 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 0f 96 01 00       	call   c0027034 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 a9 a0 01 00       	call   c0027ae0 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 c4 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6d3c]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 b8 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6d48]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 9a 1b 00 00       	call   c000f634 <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 64 9d 01 00       	call   c002792f <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 22 9d 01 00       	call   c0027911 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 0e 9d 01 00       	call   c002792f <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 80 9a 01 00       	call   c00276c3 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 fe 93 01 00       	call   c0027060 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 50 9a 01 00       	call   c00276c3 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 56 8d 01 00       	call   c00269e3 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 25 9a 01 00       	call   c00276c3 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 75 9c 01 00       	call   c002792d <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 56 93 01 00       	call   c0027034 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 d0 9d 01 00       	call   c0027ac0 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 ff 9b 01 00       	call   c0027911 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 fe 92 01 00       	call   c0027034 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 7c 99 01 00       	call   c00276c3 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 ff 92 01 00       	call   c0027060 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 51 99 01 00       	call   c00276c3 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 b8 95 01 00       	call   c0027344 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 37 8c 01 00       	call   c00269e3 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 5f 95 01 00       	call   c0027344 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e5 8b 01 00       	call   c00269e3 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 cb 9c 01 00       	call   c0027ae0 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 a5 98 01 00       	call   c00276c3 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 fc 91 01 00       	call   c0027034 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 db 9a 01 00       	call   c002792f <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 74 8b 01 00       	call   c00269e3 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 a0 91 01 00       	call   c0027034 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 3a 9c 01 00       	call   c0027ae0 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 ef 97 01 00       	call   c00276c3 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 6c 91 01 00       	call   c0027060 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 bd 97 01 00       	call   c00276c3 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 c3 8a 01 00       	call   c00269e3 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 93 97 01 00       	call   c00276c3 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 e7 99 01 00       	call   c0027931 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 c0 90 01 00       	call   c0027034 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 3a 9b 01 00       	call   c0027ac0 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 69 99 01 00       	call   c0027911 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 67 90 01 00       	call   c0027034 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 e5 96 01 00       	call   c00276c3 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 68 90 01 00       	call   c0027060 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 ba 96 01 00       	call   c00276c3 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 21 93 01 00       	call   c0027344 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 a0 89 01 00       	call   c00269e3 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 bc 92 01 00       	call   c0027344 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 3b 89 01 00       	call   c00269e3 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 21 9a 01 00       	call   c0027ae0 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 fb 95 01 00       	call   c00276c3 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 52 8f 01 00       	call   c0027034 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 31 98 01 00       	call   c002792f <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 ca 88 01 00       	call   c00269e3 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 f6 8e 01 00       	call   c0027034 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 67 95 01 00       	call   c00276c3 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 6d 88 01 00       	call   c00269e3 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 de 93 02 c0       	mov    eax,0xc00293de
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 ef 93 02 c0       	mov    eax,0xc00293ef
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 dc 13 00 00       	call   c000f634 <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 de 13 00 00       	call   c000f654 <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 4d 13 00 00       	call   c000f624 <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 26 94 02 c0       	push   0xc0029426
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 a8 d6 02 c0       	mov    eax,0xc002d6a8
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 2f 94 02 c0       	push   0xc002942f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 5c 5e 02 c0       	mov    eax,0xc0025e5c
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 39 94 02 c0       	push   0xc0029439
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 42 94 02 c0       	push   0xc0029442
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 5c 5f 02 c0       	mov    eax,0xc0025f5c
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 4c 94 02 c0       	push   0xc002944c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 dc 5c 02 c0       	mov    eax,0xc0025cdc
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 55 94 02 c0       	push   0xc0029455
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 ac d6 02 c0       	mov    eax,0xc002d6ac
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 62 94 02 c0       	push   0xc0029462
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 ad d6 02 c0       	mov    eax,0xc002d6ad
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 83 5a 00 00       	call   c0013e90 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 e1 11 00 00       	call   c000f624 <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c000e452:	68 6f 94 02 c0       	push   0xc002946f
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 0b ec 00 00       	call   c001d06a <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 b9 ef 00 c0       	push   0xc000efb9
c000e46e:	53                   	push   ebx
c000e46f:	e8 f4 ee 00 00       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 c6 db 01 c0       	push   0xc001dbc6
c000e47d:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c000e483:	e8 e0 ee 00 00       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 a8 eb 02 c0       	mov    ds:0xc002eba8,eax
c000e490:	c6 05 ad d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6ad,0x1
c000e497:	e8 ab fa 00 00       	call   c001df47 <Vm::initialise8086()>
c000e49c:	e8 d7 47 00 00       	call   c0012c78 <Fs::initVFS()>
c000e4a1:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 af d5 00 00       	call   c001ba6c <Sys::loadSyscalls()>
c000e4bd:	e8 2a b6 00 00       	call   c0019aec <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 7c 94 02 c0       	push   0xc002947c
c000e4cc:	68 85 94 02 c0       	push   0xc0029485
c000e4d1:	e8 3c c3 00 00       	call   c001a812 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 82 52 00 00       	call   c0013760 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 75 59 00 00       	call   c0013e64 <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 8d 94 02 c0       	push   0xc002948d
c000e4fe:	e8 c0 e6 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 c6 e8 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 b3 f1 00 00       	call   c001d6cc <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 a9 94 02 c0       	push   0xc00294a9
c000e52d:	50                   	push   eax
c000e52e:	e8 d7 59 00 00       	call   c0013f0a <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba 48 96 02 c0       	mov    edx,0xc0029648
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 c1 d6 02 c0 04 	test   BYTE PTR ds:0xc002d6c1,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 5f 74 01 00       	call   c0025b26 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 ac 9d 00 00       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 85 9d 00 00       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 63 9d 00 00       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 41 9d 00 00       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 c0 d6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d6c0,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 4f 9c 00 00       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 2a 9c 00 00       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 c9 72 01 00       	call   c0025ae0 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 86 72 01 00       	call   c0025ac0 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 46 9c 00 00       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 b9 94 02 c0       	push   0xc00294b9
c000e893:	e8 5b 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 cc 94 02 c0       	push   0xc00294cc
c000e8b6:	e8 38 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 dd 94 02 c0       	push   0xc00294dd
c000e8d9:	e8 15 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 ee 94 02 c0       	push   0xc00294ee
c000e8fc:	e8 f2 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 ff 94 02 c0       	push   0xc00294ff
c000e91f:	e8 cf 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 10 95 02 c0       	push   0xc0029510
c000e942:	e8 ac 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 21 95 02 c0       	push   0xc0029521
c000e965:	e8 89 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 32 95 02 c0       	push   0xc0029532
c000e988:	e8 66 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 43 95 02 c0       	push   0xc0029543
c000e9ab:	e8 43 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 54 95 02 c0       	push   0xc0029554
c000e9ce:	e8 20 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 65 95 02 c0       	push   0xc0029565
c000e9f1:	e8 fd 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 76 95 02 c0       	push   0xc0029576
c000ea14:	e8 da 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 87 95 02 c0       	push   0xc0029587
c000ea37:	e8 b7 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 98 95 02 c0       	push   0xc0029598
c000ea5a:	e8 94 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 a9 95 02 c0       	push   0xc00295a9
c000ea7d:	e8 71 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 ba 95 02 c0       	push   0xc00295ba
c000eaa0:	e8 4e 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 cb 95 02 c0       	push   0xc00295cb
c000eac3:	e8 2b 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 dc 95 02 c0       	push   0xc00295dc
c000eae6:	e8 08 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 ed 95 02 c0       	push   0xc00295ed
c000eb05:	e8 e9 3d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 77 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae77
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 d8 3d 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 fe 95 02 c0       	push   0xc00295fe
c000ebee:	e8 32 b0 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 04 96 02 c0       	push   0xc0029604
c000ec26:	e8 fa af 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 c0 d6 02 c0 04 	test   BYTE PTR ds:0xc002d6c0,0x4
c000ec7e:	68 68 12 00 00       	push   0x1268
c000ec83:	0f 94 05 e4 c5 02 c0 	sete   BYTE PTR ds:0xc002c5e4
c000ec8a:	e8 95 09 00 00       	call   c000f624 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 e5 8c 00 00       	call   c001797e <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	56                   	push   esi
c000eca2:	53                   	push   ebx
c000eca3:	e8 72 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 cc f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ecb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb3:	e8 ce fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecb8:	59                   	pop    ecx
c000ecb9:	5e                   	pop    esi
c000ecba:	6a 01                	push   0x1
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 94 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecc2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc9:	e8 56 09 00 00       	call   c000f624 <malloc>
c000ecce:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecd1:	89 c6                	mov    esi,eax
c000ecd3:	e8 8e 98 00 00       	call   c0018566 <CPU::CPU()>
c000ecd8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecde:	58                   	pop    eax
c000ecdf:	5a                   	pop    edx
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	e8 33 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ece7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eced:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf3:	6a 00                	push   0x0
c000ecf5:	6a 00                	push   0x0
c000ecf7:	50                   	push   eax
c000ecf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	e8 89 55 00 00       	call   c001428c <setupFPU()>
c000ed03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	74 1f                	je     c000ed2c <Computer::open(int, int, void*)+0xbe>
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	53                   	push   ebx
c000ed12:	e8 03 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ed17:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	6a 00                	push   0x0
c000ed25:	50                   	push   eax
c000ed26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed29:	83 c4 20             	add    esp,0x20
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 34 e4 00 c0       	push   0xc000e434
c000ed34:	e8 2f e7 00 00       	call   c001d468 <setupMultitasking(void (*)())>
c000ed39:	83 c4 14             	add    esp,0x14
c000ed3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed41:	5b                   	pop    ebx
c000ed42:	5e                   	pop    esi
c000ed43:	c3                   	ret    

c000ed44 <Computer::disableNMI()>:
c000ed44:	6a 00                	push   0x0
c000ed46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4a:	e8 07 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed4f:	58                   	pop    eax
c000ed50:	5a                   	pop    edx
c000ed51:	c3                   	ret    

c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5d:	19 c0                	sbb    eax,eax
c000ed5f:	83 e0 80             	and    eax,0xffffff80
c000ed62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed66:	e6 70                	out    0x70,al
c000ed68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6c:	e6 71                	out    0x71,al
c000ed6e:	c3                   	ret    
c000ed6f:	90                   	nop

c000ed70 <Computer::handleNMI()>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 10             	sub    esp,0x10
c000ed75:	e4 92                	in     al,0x92
c000ed77:	89 c6                	mov    esi,eax
c000ed79:	e4 61                	in     al,0x61
c000ed7b:	68 0a 96 02 c0       	push   0xc002960a
c000ed80:	88 c3                	mov    bl,al
c000ed82:	e8 6c 3b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	83 e6 10             	and    esi,0x10
c000ed8d:	75 0d                	jne    c000ed9c <Computer::handleNMI()+0x2c>
c000ed8f:	f6 c3 40             	test   bl,0x40
c000ed92:	75 1d                	jne    c000edb1 <Computer::handleNMI()+0x41>
c000ed94:	84 db                	test   bl,bl
c000ed96:	78 2d                	js     c000edc5 <Computer::handleNMI()+0x55>
c000ed98:	58                   	pop    eax
c000ed99:	5b                   	pop    ebx
c000ed9a:	5e                   	pop    esi
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 1b 96 02 c0       	push   0xc002961b
c000eda4:	e8 7c ae 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 c3 40             	test   bl,0x40
c000edaf:	74 e3                	je     c000ed94 <Computer::handleNMI()+0x24>
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 28 96 02 c0       	push   0xc0029628
c000edb9:	e8 67 ae 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	84 db                	test   bl,bl
c000edc3:	79 d3                	jns    c000ed98 <Computer::handleNMI()+0x28>
c000edc5:	c7 44 24 10 32 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029632
c000edcd:	5a                   	pop    edx
c000edce:	5b                   	pop    ebx
c000edcf:	5e                   	pop    esi
c000edd0:	e9 50 ae 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c000edd5:	90                   	nop

c000edd6 <Computer::setDiskActivityLight(int, bool)>:
c000edd6:	56                   	push   esi
c000edd7:	53                   	push   ebx
c000edd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ede1:	77 1b                	ja     c000edfe <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede3:	e4 92                	in     al,0x92
c000ede5:	bb 40 00 00 00       	mov    ebx,0x40
c000edea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edee:	89 da                	mov    edx,ebx
c000edf0:	d3 e2                	shl    edx,cl
c000edf2:	89 f1                	mov    ecx,esi
c000edf4:	f7 d2                	not    edx
c000edf6:	d3 e3                	shl    ebx,cl
c000edf8:	21 d0                	and    eax,edx
c000edfa:	09 d8                	or     eax,ebx
c000edfc:	e6 92                	out    0x92,al
c000edfe:	5b                   	pop    ebx
c000edff:	5e                   	pop    esi
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDTEntry::setBase(unsigned int)>:
c000ee02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee0a:	89 c1                	mov    ecx,eax
c000ee0c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee10:	c1 e9 10             	shr    ecx,0x10
c000ee13:	c1 e8 18             	shr    eax,0x18
c000ee16:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee19:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <GDTEntry::setLimit(unsigned int)>:
c000ee1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee26:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee29:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2c:	83 e2 f0             	and    edx,0xfffffff0
c000ee2f:	c1 e8 10             	shr    eax,0x10
c000ee32:	83 e0 0f             	and    eax,0xf
c000ee35:	09 d0                	or     eax,edx
c000ee37:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::GDT()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee50:	90                   	nop
c000ee51:	c3                   	ret    

c000ee52 <GDT::addEntry(GDTEntry)>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	68 6c 96 02 c0       	push   0xc002966c
c000ee6a:	e8 84 3a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ee6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee79:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee81:	8d 50 01             	lea    edx,[eax+0x1]
c000ee84:	c1 e0 03             	shl    eax,0x3
c000ee87:	89 13                	mov    DWORD PTR [ebx],edx
c000ee89:	83 c4 18             	add    esp,0x18
c000ee8c:	5b                   	pop    ebx
c000ee8d:	c3                   	ret    

c000ee8e <GDT::getNumberOfEntries()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee94:	c3                   	ret    
c000ee95:	90                   	nop

c000ee96 <GDT::flush()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9c:	83 c0 04             	add    eax,0x4
c000ee9f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea6:	a3 b2 d6 02 c0       	mov    ds:0xc002d6b2,eax
c000eeab:	66 89 15 b0 d6 02 c0 	mov    WORD PTR ds:0xc002d6b0,dx
c000eeb2:	e9 91 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb7:	90                   	nop

c000eeb8 <GDT::setup()>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 3c             	sub    esp,0x3c
c000eebf:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec3:	6a 00                	push   0x0
c000eec5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec9:	53                   	push   ebx
c000eeca:	e8 33 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eecf:	6a 00                	push   0x0
c000eed1:	53                   	push   ebx
c000eed2:	e8 47 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eed7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedf:	6a 00                	push   0x0
c000eee1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee5:	53                   	push   ebx
c000eee6:	e8 17 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eeeb:	68 ff ff ff 00       	push   0xffffff
c000eef0:	53                   	push   ebx
c000eef1:	e8 28 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eef6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eefa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeff:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef04:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef11:	53                   	push   ebx
c000ef12:	e8 eb fe ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000ef17:	68 ff ff ff 00       	push   0xffffff
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 fc fe ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000ef22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef36:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef3b:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef44:	89 d8                	mov    eax,ebx
c000ef46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef4a:	80 cc 60             	or     ah,0x60
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	89 f8                	mov    eax,edi
c000ef56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5a:	80 cc 60             	or     ah,0x60
c000ef5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef61:	89 c7                	mov    edi,eax
c000ef63:	55                   	push   ebp
c000ef64:	e8 e9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef74:	55                   	push   ebp
c000ef75:	e8 d8 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef7a:	83 c4 0c             	add    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef85:	55                   	push   ebp
c000ef86:	e8 c7 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef8b:	83 c4 0c             	add    esp,0xc
c000ef8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef96:	53                   	push   ebx
c000ef97:	51                   	push   ecx
c000ef98:	55                   	push   ebp
c000ef99:	e8 b4 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	55                   	push   ebp
c000efa4:	e8 a9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000efa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efac:	e8 e5 fe ff ff       	call   c000ee96 <GDT::flush()>
c000efb1:	83 c4 4c             	add    esp,0x4c
c000efb4:	5b                   	pop    ebx
c000efb5:	5e                   	pop    esi
c000efb6:	5f                   	pop    edi
c000efb7:	5d                   	pop    ebp
c000efb8:	c3                   	ret    

c000efb9 <idleFunction(void*)>:
c000efb9:	53                   	push   ebx
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	e8 76 e2 00 00       	call   c001d238 <unlockScheduler()>
c000efc2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000efc7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcd:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd4:	74 3c                	je     c000f012 <idleFunction(void*)+0x59>
c000efd6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdd:	74 33                	je     c000f012 <idleFunction(void*)+0x59>
c000efdf:	31 db                	xor    ebx,ebx
c000efe1:	52                   	push   edx
c000efe2:	52                   	push   edx
c000efe3:	68 e1 00 00 00       	push   0xe1
c000efe8:	50                   	push   eax
c000efe9:	e8 de fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000efee:	53                   	push   ebx
c000efef:	83 e0 02             	and    eax,0x2
c000eff2:	50                   	push   eax
c000eff3:	68 e1 00 00 00       	push   0xe1
c000eff8:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c000effe:	e8 f5 fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 74 12 ff ff       	call   c000027f <doTPAUSE>
c000f00b:	e8 50 8b 01 00       	call   c0027b60 <idleCommon()>
c000f010:	eb f4                	jmp    c000f006 <idleFunction(void*)+0x4d>
c000f012:	fb                   	sti    
c000f013:	f4                   	hlt    
c000f014:	e8 47 8b 01 00       	call   c0027b60 <idleCommon()>
c000f019:	eb f7                	jmp    c000f012 <idleFunction(void*)+0x59>
c000f01b:	90                   	nop

c000f01c <IDTEntry::IDTEntry(bool)>:
c000f01c:	83 ec 04             	sub    esp,0x4
c000f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f023:	88 04 24             	mov    BYTE PTR [esp],al
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03f:	83 e2 f0             	and    edx,0xfffffff0
c000f042:	83 ca 0e             	or     edx,0xe
c000f045:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04f:	83 e2 ef             	and    edx,0xffffffef
c000f052:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f055:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f059:	74 04                	je     c000f05f <IDTEntry::IDTEntry(bool)+0x43>
c000f05b:	b2 03                	mov    dl,0x3
c000f05d:	eb 02                	jmp    c000f061 <IDTEntry::IDTEntry(bool)+0x45>
c000f05f:	b2 00                	mov    dl,0x0
c000f061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f065:	83 e2 03             	and    edx,0x3
c000f068:	88 d1                	mov    cl,dl
c000f06a:	c1 e1 05             	shl    ecx,0x5
c000f06d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f070:	83 e2 9f             	and    edx,0xffffff9f
c000f073:	09 ca                	or     edx,ecx
c000f075:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07f:	83 ca 80             	or     edx,0xffffff80
c000f082:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f085:	90                   	nop
c000f086:	83 c4 04             	add    esp,0x4
c000f089:	c3                   	ret    

c000f08a <IDTEntry::setOffset(unsigned int)>:
c000f08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	66 89 02             	mov    WORD PTR [edx],ax
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <IDT::IDT()>:
c000f09e:	90                   	nop
c000f09f:	c3                   	ret    

c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a4:	83 c0 30             	add    eax,0x30
c000f0a7:	c3                   	ret    

c000f0a8 <IDT::addEntry(IDTEntry, int)>:
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0bc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0c0:	5b                   	pop    ebx
c000f0c1:	c3                   	ret    

c000f0c2 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 10             	sub    esp,0x10
c000f0c6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0d0:	53                   	push   ebx
c000f0d1:	e8 46 ff ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f0d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0da:	53                   	push   ebx
c000f0db:	e8 aa ff ff ff       	call   c000f08a <IDTEntry::setOffset(unsigned int)>
c000f0e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0f0:	e8 b3 ff ff ff       	call   c000f0a8 <IDT::addEntry(IDTEntry, int)>
c000f0f5:	83 c4 30             	add    esp,0x30
c000f0f8:	5b                   	pop    ebx
c000f0f9:	c3                   	ret    

c000f0fa <IDT::flush()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	66 c7 05 b8 d6 02 c0 ff 07 	mov    WORD PTR ds:0xc002d6b8,0x7ff
c000f107:	a3 ba d6 02 c0       	mov    ds:0xc002d6ba,eax
c000f10c:	0f 01 1d b8 d6 02 c0 	lidtd  ds:0xc002d6b8
c000f113:	c3                   	ret    

c000f114 <IDT::setup()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	53                   	push   ebx
c000f117:	83 ec 10             	sub    esp,0x10
c000f11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11e:	6a 00                	push   0x0
c000f120:	68 68 04 00 c0       	push   0xc0000468
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	e8 95 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 78 04 00 c0       	push   0xc0000478
c000f134:	6a 01                	push   0x1
c000f136:	53                   	push   ebx
c000f137:	e8 86 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 82 04 00 c0       	push   0xc0000482
c000f146:	6a 02                	push   0x2
c000f148:	53                   	push   ebx
c000f149:	e8 74 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 8c 04 00 c0       	push   0xc000048c
c000f155:	6a 03                	push   0x3
c000f157:	53                   	push   ebx
c000f158:	e8 65 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 96 04 00 c0       	push   0xc0000496
c000f167:	6a 04                	push   0x4
c000f169:	53                   	push   ebx
c000f16a:	e8 53 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 a0 04 00 c0       	push   0xc00004a0
c000f176:	6a 05                	push   0x5
c000f178:	53                   	push   ebx
c000f179:	e8 44 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 aa 04 00 c0       	push   0xc00004aa
c000f188:	6a 06                	push   0x6
c000f18a:	53                   	push   ebx
c000f18b:	e8 32 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 b4 04 00 c0       	push   0xc00004b4
c000f197:	6a 07                	push   0x7
c000f199:	53                   	push   ebx
c000f19a:	e8 23 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 be 04 00 c0       	push   0xc00004be
c000f1a9:	6a 08                	push   0x8
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 11 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b8:	6a 09                	push   0x9
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 02 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 d0 04 00 c0       	push   0xc00004d0
c000f1ca:	6a 0a                	push   0xa
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 f0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d9:	6a 0b                	push   0xb
c000f1db:	53                   	push   ebx
c000f1dc:	e8 e1 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 e0 04 00 c0       	push   0xc00004e0
c000f1eb:	6a 0c                	push   0xc
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 cf fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 e8 04 00 c0       	push   0xc00004e8
c000f1fa:	6a 0d                	push   0xd
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 c0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 f0 04 00 c0       	push   0xc00004f0
c000f20c:	6a 0e                	push   0xe
c000f20e:	53                   	push   ebx
c000f20f:	e8 ae fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 f8 04 00 c0       	push   0xc00004f8
c000f21b:	6a 0f                	push   0xf
c000f21d:	53                   	push   ebx
c000f21e:	e8 9f fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 02 05 00 c0       	push   0xc0000502
c000f22d:	6a 10                	push   0x10
c000f22f:	53                   	push   ebx
c000f230:	e8 8d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 0c 05 00 c0       	push   0xc000050c
c000f23c:	6a 11                	push   0x11
c000f23e:	53                   	push   ebx
c000f23f:	e8 7e fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 16 05 00 c0       	push   0xc0000516
c000f24e:	6a 12                	push   0x12
c000f250:	53                   	push   ebx
c000f251:	e8 6c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 01                	push   0x1
c000f258:	68 b0 05 00 c0       	push   0xc00005b0
c000f25d:	6a 60                	push   0x60
c000f25f:	53                   	push   ebx
c000f260:	e8 5d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 b7 05 00 c0       	push   0xc00005b7
c000f26f:	6a 20                	push   0x20
c000f271:	53                   	push   ebx
c000f272:	e8 4b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 a2 05 00 c0       	push   0xc00005a2
c000f27e:	6a 21                	push   0x21
c000f280:	53                   	push   ebx
c000f281:	e8 3c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 a9 05 00 c0       	push   0xc00005a9
c000f290:	6a 22                	push   0x22
c000f292:	53                   	push   ebx
c000f293:	e8 2a fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 20 05 00 c0       	push   0xc0000520
c000f29f:	6a 23                	push   0x23
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 1b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 2a 05 00 c0       	push   0xc000052a
c000f2b1:	6a 24                	push   0x24
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 09 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 34 05 00 c0       	push   0xc0000534
c000f2c0:	6a 25                	push   0x25
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 fa fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 3e 05 00 c0       	push   0xc000053e
c000f2d2:	6a 26                	push   0x26
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 e8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 48 05 00 c0       	push   0xc0000548
c000f2e1:	6a 27                	push   0x27
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 d9 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 52 05 00 c0       	push   0xc0000552
c000f2f3:	6a 28                	push   0x28
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 c7 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 5c 05 00 c0       	push   0xc000055c
c000f302:	6a 29                	push   0x29
c000f304:	53                   	push   ebx
c000f305:	e8 b8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 66 05 00 c0       	push   0xc0000566
c000f314:	6a 2a                	push   0x2a
c000f316:	53                   	push   ebx
c000f317:	e8 a6 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 05 00 c0       	push   0xc0000570
c000f323:	6a 2b                	push   0x2b
c000f325:	53                   	push   ebx
c000f326:	e8 97 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	6a 00                	push   0x0
c000f330:	68 7a 05 00 c0       	push   0xc000057a
c000f335:	6a 2c                	push   0x2c
c000f337:	53                   	push   ebx
c000f338:	e8 85 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	6a 00                	push   0x0
c000f33f:	68 84 05 00 c0       	push   0xc0000584
c000f344:	6a 2d                	push   0x2d
c000f346:	53                   	push   ebx
c000f347:	e8 76 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	83 c4 20             	add    esp,0x20
c000f34f:	6a 00                	push   0x0
c000f351:	68 8e 05 00 c0       	push   0xc000058e
c000f356:	6a 2e                	push   0x2e
c000f358:	53                   	push   ebx
c000f359:	e8 64 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	6a 00                	push   0x0
c000f360:	68 98 05 00 c0       	push   0xc0000598
c000f365:	6a 2f                	push   0x2f
c000f367:	53                   	push   ebx
c000f368:	e8 55 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	83 c4 20             	add    esp,0x20
c000f370:	6a 00                	push   0x0
c000f372:	68 ed 05 00 c0       	push   0xc00005ed
c000f377:	6a 30                	push   0x30
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	6a 00                	push   0x0
c000f381:	68 f7 05 00 c0       	push   0xc00005f7
c000f386:	6a 31                	push   0x31
c000f388:	53                   	push   ebx
c000f389:	e8 34 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	83 c4 20             	add    esp,0x20
c000f391:	6a 00                	push   0x0
c000f393:	68 01 06 00 c0       	push   0xc0000601
c000f398:	6a 32                	push   0x32
c000f39a:	53                   	push   ebx
c000f39b:	e8 22 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 0b 06 00 c0       	push   0xc000060b
c000f3a7:	6a 33                	push   0x33
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 13 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	83 c4 20             	add    esp,0x20
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 15 06 00 c0       	push   0xc0000615
c000f3b9:	6a 34                	push   0x34
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 01 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 1f 06 00 c0       	push   0xc000061f
c000f3c8:	6a 35                	push   0x35
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f2 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	83 c4 20             	add    esp,0x20
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 29 06 00 c0       	push   0xc0000629
c000f3da:	6a 36                	push   0x36
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 e0 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 33 06 00 c0       	push   0xc0000633
c000f3e9:	6a 37                	push   0x37
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 d1 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	e8 9a 26 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f3f9:	52                   	push   edx
c000f3fa:	6a 03                	push   0x3
c000f3fc:	6a 02                	push   0x2
c000f3fe:	50                   	push   eax
c000f3ff:	e8 ca 2c 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f404:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f40b:	89 c6                	mov    esi,eax
c000f40d:	e8 12 02 00 00       	call   c000f624 <malloc>
c000f412:	81 c6 00 20 00 00    	add    esi,0x2000
c000f418:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41b:	89 c7                	mov    edi,eax
c000f41d:	e8 12 1e 00 00       	call   c0011234 <TSS::TSS()>
c000f422:	83 c4 0c             	add    esp,0xc
c000f425:	68 be 04 00 c0       	push   0xc00004be
c000f42a:	56                   	push   esi
c000f42b:	57                   	push   edi
c000f42c:	e8 43 1e 00 00       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c000f431:	59                   	pop    ecx
c000f432:	89 c6                	mov    esi,eax
c000f434:	5f                   	pop    edi
c000f435:	6a 00                	push   0x0
c000f437:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f43b:	50                   	push   eax
c000f43c:	e8 db fb ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f445:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f44a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f451:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f45b:	80 ce 05             	or     dh,0x5
c000f45e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f469:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46f:	e8 86 fc ff ff       	call   c000f0fa <IDT::flush()>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	c3                   	ret    

c000f47b <sbrk>:
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	56                   	push   esi
c000f47e:	53                   	push   ebx
c000f47f:	83 ec 1c             	sub    esp,0x1c
c000f482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f486:	85 c0                	test   eax,eax
c000f488:	74 3e                	je     c000f4c8 <sbrk+0x4d>
c000f48a:	78 43                	js     c000f4cf <sbrk+0x54>
c000f48c:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c000f492:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f498:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49e:	83 e2 01             	and    edx,0x1
c000f4a1:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a5:	8b 0d d0 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c5d0
c000f4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	89 c2                	mov    edx,eax
c000f4b6:	78 2f                	js     c000f4e7 <sbrk+0x6c>
c000f4b8:	c1 fa 0c             	sar    edx,0xc
c000f4bb:	89 d7                	mov    edi,edx
c000f4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4c1:	be 00 00 00 00       	mov    esi,0x0
c000f4c6:	eb 36                	jmp    c000f4fe <sbrk+0x83>
c000f4c8:	a1 d0 c5 02 c0       	mov    eax,ds:0xc002c5d0
c000f4cd:	eb 74                	jmp    c000f543 <sbrk+0xc8>
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	50                   	push   eax
c000f4d3:	68 88 96 02 c0       	push   0xc0029688
c000f4d8:	e8 16 34 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e5:	eb 5c                	jmp    c000f543 <sbrk+0xc8>
c000f4e7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ed:	eb c9                	jmp    c000f4b8 <sbrk+0x3d>
c000f4ef:	81 05 d0 c5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c5d0,0x1000
c000f4f9:	46                   	inc    esi
c000f4fa:	39 f7                	cmp    edi,esi
c000f4fc:	74 34                	je     c000f532 <sbrk+0xb7>
c000f4fe:	e8 90 25 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f503:	89 c3                	mov    ebx,eax
c000f505:	8b 2d d0 c5 02 c0    	mov    ebp,DWORD PTR ds:0xc002c5d0
c000f50b:	e8 b1 07 00 00       	call   c000fcc1 <Phys::allocatePage()>
c000f510:	68 01 04 00 00       	push   0x401
c000f515:	55                   	push   ebp
c000f516:	50                   	push   eax
c000f517:	53                   	push   ebx
c000f518:	e8 b1 2a 00 00       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f525:	74 c8                	je     c000f4ef <sbrk+0x74>
c000f527:	8b 1d d0 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5d0
c000f52d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f530:	eb bd                	jmp    c000f4ef <sbrk+0x74>
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	75 12                	jne    c000f54b <sbrk+0xd0>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54f:	89 cb                	mov    ebx,ecx
c000f551:	c1 eb 0a             	shr    ebx,0xa
c000f554:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f55a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f564:	c1 e0 0c             	shl    eax,0xc
c000f567:	01 c8                	add    eax,ecx
c000f569:	c1 e8 0a             	shr    eax,0xa
c000f56c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f571:	2d 00 00 40 00       	sub    eax,0x400000
c000f576:	39 c3                	cmp    ebx,eax
c000f578:	77 c5                	ja     c000f53f <sbrk+0xc4>
c000f57a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f583:	39 d8                	cmp    eax,ebx
c000f585:	73 f3                	jae    c000f57a <sbrk+0xff>
c000f587:	eb b6                	jmp    c000f53f <sbrk+0xc4>

c000f589 <mmap>:
c000f589:	83 ec 18             	sub    esp,0x18
c000f58c:	68 b8 96 02 c0       	push   0xc00296b8
c000f591:	e8 8f a6 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000f596:	b8 00 00 00 00       	mov    eax,0x0
c000f59b:	83 c4 1c             	add    esp,0x1c
c000f59e:	c3                   	ret    

c000f59f <munmap>:
c000f59f:	83 ec 18             	sub    esp,0x18
c000f5a2:	68 bd 96 02 c0       	push   0xc00296bd
c000f5a7:	e8 79 a6 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    

c000f5b5 <liballoc_lock()>:
c000f5b5:	83 ec 0c             	sub    esp,0xc
c000f5b8:	e8 79 dc 00 00       	call   c001d236 <lockScheduler()>
c000f5bd:	b8 00 00 00 00       	mov    eax,0x0
c000f5c2:	83 c4 0c             	add    esp,0xc
c000f5c5:	c3                   	ret    

c000f5c6 <liballoc_unlock()>:
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	e8 6a dc 00 00       	call   c001d238 <unlockScheduler()>
c000f5ce:	b8 00 00 00 00       	mov    eax,0x0
c000f5d3:	83 c4 0c             	add    esp,0xc
c000f5d6:	c3                   	ret    

c000f5d7 <liballoc_alloc(int)>:
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	e8 b4 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5df:	83 ec 04             	sub    esp,0x4
c000f5e2:	6a 01                	push   0x1
c000f5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e8:	50                   	push   eax
c000f5e9:	e8 e0 2a 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	c3                   	ret    

c000f5f2 <liballoc_free(void*, int)>:
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	e8 99 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5fa:	83 ec 08             	sub    esp,0x8
c000f5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f601:	50                   	push   eax
c000f602:	e8 83 27 00 00       	call   c0011d8a <VAS::freeAllocatedPages(unsigned long)>
c000f607:	b8 00 00 00 00       	mov    eax,0x0
c000f60c:	83 c4 1c             	add    esp,0x1c
c000f60f:	c3                   	ret    

c000f610 <realloc>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61b:	e8 1d 1e ff ff       	call   c000143d <dlrealloc>
c000f620:	83 c4 1c             	add    esp,0x1c
c000f623:	c3                   	ret    

c000f624 <malloc>:
c000f624:	83 ec 18             	sub    esp,0x18
c000f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62b:	e8 d0 18 ff ff       	call   c0000f00 <dlmalloc>
c000f630:	83 c4 1c             	add    esp,0x1c
c000f633:	c3                   	ret    

c000f634 <free>:
c000f634:	83 ec 18             	sub    esp,0x18
c000f637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63b:	e8 65 15 ff ff       	call   c0000ba5 <dlfree>
c000f640:	83 c4 1c             	add    esp,0x1c
c000f643:	c3                   	ret    

c000f644 <rfree>:
c000f644:	83 ec 18             	sub    esp,0x18
c000f647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64b:	e8 55 15 ff ff       	call   c0000ba5 <dlfree>
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <calloc>:
c000f654:	56                   	push   esi
c000f655:	53                   	push   ebx
c000f656:	83 ec 10             	sub    esp,0x10
c000f659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f662:	53                   	push   ebx
c000f663:	e8 bc ff ff ff       	call   c000f624 <malloc>
c000f668:	89 c6                	mov    esi,eax
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	6a 00                	push   0x0
c000f670:	50                   	push   eax
c000f671:	e8 4e 10 ff ff       	call   c00006c4 <memset>
c000f676:	89 f0                	mov    eax,esi
c000f678:	83 c4 14             	add    esp,0x14
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	c3                   	ret    

c000f67e <hwTextMode_loadInData(VgaText*)>:
c000f67e:	55                   	push   ebp
c000f67f:	a1 e0 c5 02 c0       	mov    eax,ds:0xc002c5e0
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f68b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f691:	85 d2                	test   edx,edx
c000f693:	7e 2f                	jle    c000f6c4 <hwTextMode_loadInData(VgaText*)+0x46>
c000f695:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f69b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69e:	31 f6                	xor    esi,esi
c000f6a0:	29 fd                	sub    ebp,edi
c000f6a2:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a5:	31 c0                	xor    eax,eax
c000f6a7:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6ab:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6af:	40                   	inc    eax
c000f6b0:	83 f8 50             	cmp    eax,0x50
c000f6b3:	75 f2                	jne    c000f6a7 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b5:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6bb:	46                   	inc    esi
c000f6bc:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c2:	7f de                	jg     c000f6a2 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    

c000f6c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d8:	75 50                	jne    c000f72a <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6da:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6e0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e6:	8b 15 e0 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c5e0
c000f6ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6f0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f6:	eb 0e                	jmp    c000f706 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fe:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f704:	89 da                	mov    edx,ebx
c000f706:	83 e5 0f             	and    ebp,0xf
c000f709:	c1 e0 04             	shl    eax,0x4
c000f70c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70f:	0f b6 c0             	movzx  eax,al
c000f712:	41                   	inc    ecx
c000f713:	09 e8                	or     eax,ebp
c000f715:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	09 e8                	or     eax,ebp
c000f71e:	39 fb                	cmp    ebx,edi
c000f720:	66 89 02             	mov    WORD PTR [edx],ax
c000f723:	75 d3                	jne    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f725:	5b                   	pop    ebx
c000f726:	5e                   	pop    esi
c000f727:	5f                   	pop    edi
c000f728:	5d                   	pop    ebp
c000f729:	c3                   	ret    
c000f72a:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f734:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73e:	31 c0                	xor    eax,eax
c000f740:	bd 02 00 00 00       	mov    ebp,0x2
c000f745:	eb 9f                	jmp    c000f6e6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f747 <hwTextMode_showCursor(VgaText*, bool)>:
c000f747:	56                   	push   esi
c000f748:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f74f:	53                   	push   ebx
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	75 39                	jne    c000f78f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f756:	84 c0                	test   al,al
c000f758:	74 38                	je     c000f792 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f75a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75f:	b0 0a                	mov    al,0xa
c000f761:	89 da                	mov    edx,ebx
c000f763:	ee                   	out    dx,al
c000f764:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ec                   	in     al,dx
c000f76c:	b2 0f                	mov    dl,0xf
c000f76e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f772:	83 e0 c0             	and    eax,0xffffffc0
c000f775:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f77b:	09 d0                	or     eax,edx
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ee                   	out    dx,al
c000f780:	b0 0b                	mov    al,0xb
c000f782:	89 da                	mov    edx,ebx
c000f784:	ee                   	out    dx,al
c000f785:	89 ca                	mov    edx,ecx
c000f787:	ec                   	in     al,dx
c000f788:	83 e0 e0             	and    eax,0xffffffe0
c000f78b:	83 c8 0f             	or     eax,0xf
c000f78e:	ee                   	out    dx,al
c000f78f:	5b                   	pop    ebx
c000f790:	5e                   	pop    esi
c000f791:	c3                   	ret    
c000f792:	b0 0a                	mov    al,0xa
c000f794:	ba d4 03 00 00       	mov    edx,0x3d4
c000f799:	ee                   	out    dx,al
c000f79a:	b0 20                	mov    al,0x20
c000f79c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7a1:	ee                   	out    dx,al
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    

c000f7a5 <hwTextMode_update(VgaText*)>:
c000f7a5:	c3                   	ret    

c000f7a6 <hwTextMode_updateCursor(VgaText*)>:
c000f7a6:	56                   	push   esi
c000f7a7:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f7ae:	53                   	push   ebx
c000f7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b3:	75 3f                	jne    c000f7f4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b5:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ba:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bf:	89 f2                	mov    edx,esi
c000f7c1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cd:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7d0:	c1 e1 04             	shl    ecx,0x4
c000f7d3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d9:	b0 0f                	mov    al,0xf
c000f7db:	ee                   	out    dx,al
c000f7dc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7e1:	88 c8                	mov    al,cl
c000f7e3:	89 da                	mov    edx,ebx
c000f7e5:	ee                   	out    dx,al
c000f7e6:	b0 0e                	mov    al,0xe
c000f7e8:	89 f2                	mov    edx,esi
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 c8                	mov    eax,ecx
c000f7ed:	89 da                	mov    edx,ebx
c000f7ef:	66 c1 e8 08          	shr    ax,0x8
c000f7f3:	ee                   	out    dx,al
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	c3                   	ret    

c000f7f7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fb:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f802:	75 38                	jne    c000f83c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f804:	ba da 03 00 00       	mov    edx,0x3da
c000f809:	84 c0                	test   al,al
c000f80b:	75 18                	jne    c000f825 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80d:	ec                   	in     al,dx
c000f80e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f813:	b0 30                	mov    al,0x30
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81d:	ec                   	in     al,dx
c000f81e:	83 c8 08             	or     eax,0x8
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	c3                   	ret    
c000f825:	ec                   	in     al,dx
c000f826:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f82b:	b0 30                	mov    al,0x30
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	ba c1 03 00 00       	mov    edx,0x3c1
c000f835:	ec                   	in     al,dx
c000f836:	83 e0 f7             	and    eax,0xfffffff7
c000f839:	89 ca                	mov    edx,ecx
c000f83b:	ee                   	out    dx,al
c000f83c:	c3                   	ret    

c000f83d <hwTextMode_scrollScreen(VgaText*)>:
c000f83d:	55                   	push   ebp
c000f83e:	57                   	push   edi
c000f83f:	56                   	push   esi
c000f840:	53                   	push   ebx
c000f841:	83 ec 1c             	sub    esp,0x1c
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f84f:	74 14                	je     c000f865 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f851:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f85b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f865:	a1 e0 c5 02 c0       	mov    eax,ds:0xc002c5e0
c000f86a:	bd 02 00 00 00       	mov    ebp,0x2
c000f86f:	05 a0 00 00 00       	add    eax,0xa0
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87c:	31 c0                	xor    eax,eax
c000f87e:	eb 0b                	jmp    c000f88b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f880:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f886:	74 57                	je     c000f8df <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f888:	43                   	inc    ebx
c000f889:	89 f0                	mov    eax,esi
c000f88b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f891:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f897:	88 13                	mov    BYTE PTR [ebx],dl
c000f899:	8d 70 01             	lea    esi,[eax+0x1]
c000f89c:	83 fd 18             	cmp    ebp,0x18
c000f89f:	75 df                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8a1:	a8 01                	test   al,0x1
c000f8a3:	75 13                	jne    c000f8b8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a5:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ae:	75 d8                	jne    c000f888 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	5d                   	pop    ebp
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c2:	50                   	push   eax
c000f8c3:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c7:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8ce:	50                   	push   eax
c000f8cf:	e8 32 0c 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	88 07                	mov    BYTE PTR [edi],al
c000f8d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8dd:	eb c9                	jmp    c000f8a8 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8df:	45                   	inc    ebp
c000f8e0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e8:	eb 8e                	jmp    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8ea:	57                   	push   edi
c000f8eb:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f8f2:	56                   	push   esi
c000f8f3:	53                   	push   ebx
c000f8f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fc:	75 65                	jne    c000f963 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f903:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	52                   	push   edx
c000f90c:	50                   	push   eax
c000f90d:	e8 f4 0b 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f912:	5a                   	pop    edx
c000f913:	0f b6 c0             	movzx  eax,al
c000f916:	59                   	pop    ecx
c000f917:	50                   	push   eax
c000f918:	0f be c3             	movsx  eax,bl
c000f91b:	50                   	push   eax
c000f91c:	e8 8b 0c 00 00       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 35 e0 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c5e0
c000f92a:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c000f931:	74 07                	je     c000f93a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f933:	66 0f be c3          	movsx  ax,bl
c000f937:	80 cc 02             	or     ah,0x2
c000f93a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93e:	ba 19 00 00 00       	mov    edx,0x19
c000f943:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f949:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94c:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94f:	c1 e1 04             	shl    ecx,0x4
c000f952:	c1 e2 04             	shl    edx,0x4
c000f955:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f959:	01 ca                	add    edx,ecx
c000f95b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95f:	5b                   	pop    ebx
c000f960:	5e                   	pop    esi
c000f961:	5f                   	pop    edi
c000f962:	c3                   	ret    
c000f963:	b8 02 00 00 00       	mov    eax,0x2
c000f968:	31 d2                	xor    edx,edx
c000f96a:	eb 9c                	jmp    c000f908 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96c <setupTextMode()>:
c000f96c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f971:	83 e0 30             	and    eax,0x30
c000f974:	66 83 f8 30          	cmp    ax,0x30
c000f978:	75 11                	jne    c000f98b <setupTextMode()+0x1f>
c000f97a:	81 2d e0 c5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002c5e0,0x8000
c000f984:	c6 05 40 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d740,0x1
c000f98b:	c7 05 78 d7 02 c0 f7 f7 00 c0 	mov    DWORD PTR ds:0xc002d778,0xc000f7f7
c000f995:	c7 05 64 d7 02 c0 7e f6 00 c0 	mov    DWORD PTR ds:0xc002d764,0xc000f67e
c000f99f:	c7 05 60 d7 02 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc002d760,0xc000f6c9
c000f9a9:	c7 05 6c d7 02 c0 3d f8 00 c0 	mov    DWORD PTR ds:0xc002d76c,0xc000f83d
c000f9b3:	c7 05 74 d7 02 c0 47 f7 00 c0 	mov    DWORD PTR ds:0xc002d774,0xc000f747
c000f9bd:	c7 05 68 d7 02 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc002d768,0xc000f7a5
c000f9c7:	c7 05 70 d7 02 c0 a6 f7 00 c0 	mov    DWORD PTR ds:0xc002d770,0xc000f7a6
c000f9d1:	c7 05 7c d7 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002d77c,0xc000f8ea
c000f9db:	c3                   	ret    

c000f9dc <kernel_main>:
c000f9dc:	57                   	push   edi
c000f9dd:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e2:	56                   	push   esi
c000f9e3:	31 f6                	xor    esi,esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	e8 72 09 00 00       	call   c0010360 <installVgaTextImplementation()>
c000f9ee:	e8 79 ff ff ff       	call   c000f96c <setupTextMode()>
c000f9f3:	89 f0                	mov    eax,esi
c000f9f5:	89 fa                	mov    edx,edi
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fd:	b0 80                	mov    al,0x80
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b1 03                	mov    cl,0x3
c000fa04:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	ee                   	out    dx,al
c000fa0c:	89 f0                	mov    eax,esi
c000fa0e:	89 fa                	mov    edx,edi
c000fa10:	ee                   	out    dx,al
c000fa11:	88 c8                	mov    al,cl
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 c7                	mov    al,0xc7
c000fa18:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1d:	ee                   	out    dx,al
c000fa1e:	b0 0b                	mov    al,0xb
c000fa20:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa25:	ee                   	out    dx,al
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	68 c4 96 02 c0       	push   0xc00296c4
c000fa2e:	e8 c0 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fa33:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa38:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa45:	e8 d1 03 00 00       	call   c000fe1b <Phys::physicalMemorySetup(unsigned int)>
c000fa4a:	e8 c5 1f 00 00       	call   c0011a14 <Virt::virtualMemorySetup()>
c000fa4f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5e:	75 0e                	jne    c000fa6e <kernel_main+0x92>
c000fa60:	89 d8                	mov    eax,ebx
c000fa62:	25 48 03 00 00       	and    eax,0x348
c000fa67:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6c:	74 10                	je     c000fa7e <kernel_main+0xa2>
c000fa6e:	83 ec 0c             	sub    esp,0xc
c000fa71:	68 78 ae 02 c0       	push   0xc002ae78
c000fa76:	e8 aa a1 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	89 1d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ebx
c000fa87:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 37 21 00 00       	call   c0011bc8 <VAS::VAS()>
c000fa91:	89 1d 24 d8 02 c0    	mov    DWORD PTR ds:0xc002d824,ebx
c000fa97:	e8 84 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9c:	c7 04 24 db 96 02 c0 	mov    DWORD PTR [esp],0xc00296db
c000faa3:	e8 4b 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000faa8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faaf:	e8 70 fb ff ff       	call   c000f624 <malloc>
c000fab4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fab7:	89 c6                	mov    esi,eax
c000fab9:	e8 60 ea ff ff       	call   c000e51e <Computer::Computer()>
c000fabe:	58                   	pop    eax
c000fabf:	89 35 a8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a8,esi
c000fac5:	5a                   	pop    edx
c000fac6:	56                   	push   esi
c000fac7:	68 f8 96 02 c0       	push   0xc00296f8
c000facc:	e8 22 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fad1:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad8:	6a 00                	push   0x0
c000fada:	6a 00                	push   0x0
c000fadc:	6a 00                	push   0x0
c000fade:	50                   	push   eax
c000fadf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fae2:	83 c4 14             	add    esp,0x14
c000fae5:	53                   	push   ebx
c000fae6:	e8 77 23 00 00       	call   c0011e62 <VAS::~VAS()>
c000faeb:	c7 04 24 0b 97 02 c0 	mov    DWORD PTR [esp],0xc002970b
c000faf2:	e8 2e a1 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000faf7:	83 c4 20             	add    esp,0x20
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	5f                   	pop    edi
c000fafd:	c3                   	ret    

c000fafe <Phys::allocateDMA(unsigned long)>:
c000fafe:	55                   	push   ebp
c000faff:	31 d2                	xor    edx,edx
c000fb01:	57                   	push   edi
c000fb02:	31 ed                	xor    ebp,ebp
c000fb04:	56                   	push   esi
c000fb05:	31 c9                	xor    ecx,ecx
c000fb07:	53                   	push   ebx
c000fb08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb0c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb12:	31 c0                	xor    eax,eax
c000fb14:	c1 ee 0c             	shr    esi,0xc
c000fb17:	eb 17                	jmp    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb19:	85 c9                	test   ecx,ecx
c000fb1b:	75 04                	jne    c000fb21 <Phys::allocateDMA(unsigned long)+0x23>
c000fb1d:	89 d5                	mov    ebp,edx
c000fb1f:	89 d0                	mov    eax,edx
c000fb21:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb24:	39 de                	cmp    esi,ebx
c000fb26:	74 20                	je     c000fb48 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb28:	42                   	inc    edx
c000fb29:	89 d9                	mov    ecx,ebx
c000fb2b:	83 fa 2f             	cmp    edx,0x2f
c000fb2e:	7f 11                	jg     c000fb41 <Phys::allocateDMA(unsigned long)+0x43>
c000fb30:	80 ba 00 d7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2900],0x0
c000fb37:	74 e0                	je     c000fb19 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb39:	31 c9                	xor    ecx,ecx
c000fb3b:	42                   	inc    edx
c000fb3c:	83 fa 2f             	cmp    edx,0x2f
c000fb3f:	7e ef                	jle    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb41:	5b                   	pop    ebx
c000fb42:	31 c0                	xor    eax,eax
c000fb44:	5e                   	pop    esi
c000fb45:	5f                   	pop    edi
c000fb46:	5d                   	pop    ebp
c000fb47:	c3                   	ret    
c000fb48:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb4b:	89 d7                	mov    edi,edx
c000fb4d:	4f                   	dec    edi
c000fb4e:	79 03                	jns    c000fb53 <Phys::allocateDMA(unsigned long)+0x55>
c000fb50:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb53:	c1 ff 04             	sar    edi,0x4
c000fb56:	89 c2                	mov    edx,eax
c000fb58:	c1 fa 04             	sar    edx,0x4
c000fb5b:	39 fa                	cmp    edx,edi
c000fb5d:	75 2f                	jne    c000fb8e <Phys::allocateDMA(unsigned long)+0x90>
c000fb5f:	85 db                	test   ebx,ebx
c000fb61:	74 1a                	je     c000fb7d <Phys::allocateDMA(unsigned long)+0x7f>
c000fb63:	be 00 d7 02 c0       	mov    esi,0xc002d700
c000fb68:	8d 90 00 d7 02 c0    	lea    edx,[eax-0x3ffd2900]
c000fb6e:	f7 d6                	not    esi
c000fb70:	29 c6                	sub    esi,eax
c000fb72:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb75:	42                   	inc    edx
c000fb76:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb79:	39 d9                	cmp    ecx,ebx
c000fb7b:	7f f5                	jg     c000fb72 <Phys::allocateDMA(unsigned long)+0x74>
c000fb7d:	85 ff                	test   edi,edi
c000fb7f:	74 13                	je     c000fb94 <Phys::allocateDMA(unsigned long)+0x96>
c000fb81:	5b                   	pop    ebx
c000fb82:	05 50 20 0c 00       	add    eax,0xc2050
c000fb87:	5e                   	pop    esi
c000fb88:	c1 e0 0c             	shl    eax,0xc
c000fb8b:	5f                   	pop    edi
c000fb8c:	5d                   	pop    ebp
c000fb8d:	c3                   	ret    
c000fb8e:	89 ea                	mov    edx,ebp
c000fb90:	31 c9                	xor    ecx,ecx
c000fb92:	eb a7                	jmp    c000fb3b <Phys::allocateDMA(unsigned long)+0x3d>
c000fb94:	5b                   	pop    ebx
c000fb95:	c1 e0 0c             	shl    eax,0xc
c000fb98:	5e                   	pop    esi
c000fb99:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb9e:	5f                   	pop    edi
c000fb9f:	5d                   	pop    ebp
c000fba0:	c3                   	ret    

c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fba9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbaf:	c1 e9 0c             	shr    ecx,0xc
c000fbb2:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbb7:	76 25                	jbe    c000fbde <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbb9:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbbe:	c1 e8 0c             	shr    eax,0xc
c000fbc1:	8d 50 10             	lea    edx,[eax+0x10]
c000fbc4:	85 c9                	test   ecx,ecx
c000fbc6:	74 15                	je     c000fbdd <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbc8:	8d 82 00 d7 02 c0    	lea    eax,[edx-0x3ffd2900]
c000fbce:	8d 94 11 00 d7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2900]
c000fbd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbd8:	40                   	inc    eax
c000fbd9:	39 d0                	cmp    eax,edx
c000fbdb:	75 f8                	jne    c000fbd5 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbdd:	c3                   	ret    
c000fbde:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbe4:	c1 ea 0c             	shr    edx,0xc
c000fbe7:	eb db                	jmp    c000fbc4 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbe9 <Phys::setPageState(unsigned long, bool)>:
c000fbe9:	56                   	push   esi
c000fbea:	ba 01 00 00 00       	mov    edx,0x1
c000fbef:	53                   	push   ebx
c000fbf0:	8b 35 d4 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c5d4
c000fbf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbfe:	89 c8                	mov    eax,ecx
c000fc00:	83 e1 07             	and    ecx,0x7
c000fc03:	c1 e8 03             	shr    eax,0x3
c000fc06:	d3 e3                	shl    ebx,cl
c000fc08:	01 c6                	add    esi,eax
c000fc0a:	d3 e2                	shl    edx,cl
c000fc0c:	f7 d2                	not    edx
c000fc0e:	20 16                	and    BYTE PTR [esi],dl
c000fc10:	03 05 d4 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c5d4
c000fc16:	08 18                	or     BYTE PTR [eax],bl
c000fc18:	5b                   	pop    ebx
c000fc19:	5e                   	pop    esi
c000fc1a:	c3                   	ret    

c000fc1b <Phys::getPageState(unsigned long)>:
c000fc1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc1f:	8b 15 d4 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c5d4
c000fc25:	89 c8                	mov    eax,ecx
c000fc27:	83 e1 07             	and    ecx,0x7
c000fc2a:	c1 e8 03             	shr    eax,0x3
c000fc2d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc31:	d3 f8                	sar    eax,cl
c000fc33:	83 e0 01             	and    eax,0x1
c000fc36:	c3                   	ret    

c000fc37 <Phys::freePage(unsigned long)>:
c000fc37:	53                   	push   ebx
c000fc38:	83 ec 08             	sub    esp,0x8
c000fc3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc3f:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc45:	76 57                	jbe    c000fc9e <Phys::freePage(unsigned long)+0x67>
c000fc47:	c1 eb 0c             	shr    ebx,0xc
c000fc4a:	53                   	push   ebx
c000fc4b:	e8 cb ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fc50:	5a                   	pop    edx
c000fc51:	84 c0                	test   al,al
c000fc53:	74 5b                	je     c000fcb0 <Phys::freePage(unsigned long)+0x79>
c000fc55:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c000fc5a:	48                   	dec    eax
c000fc5b:	a3 ec d6 02 c0       	mov    ds:0xc002d6ec,eax
c000fc60:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc63:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc66:	c1 e0 02             	shl    eax,0x2
c000fc69:	99                   	cdq    
c000fc6a:	f7 3d f0 d6 02 c0    	idiv   DWORD PTR ds:0xc002d6f0
c000fc70:	39 05 e8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6e8,eax
c000fc76:	75 13                	jne    c000fc8b <Phys::freePage(unsigned long)+0x54>
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	6a 00                	push   0x0
c000fc7d:	53                   	push   ebx
c000fc7e:	e8 66 ff ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	83 c4 08             	add    esp,0x8
c000fc89:	5b                   	pop    ebx
c000fc8a:	c3                   	ret    
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	a3 e8 d6 02 c0       	mov    ds:0xc002d6e8,eax
c000fc93:	50                   	push   eax
c000fc94:	e8 5b 0a 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	eb da                	jmp    c000fc78 <Phys::freePage(unsigned long)+0x41>
c000fc9e:	68 00 10 00 00       	push   0x1000
c000fca3:	53                   	push   ebx
c000fca4:	e8 f8 fe ff ff       	call   c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>
c000fca9:	59                   	pop    ecx
c000fcaa:	5b                   	pop    ebx
c000fcab:	83 c4 08             	add    esp,0x8
c000fcae:	5b                   	pop    ebx
c000fcaf:	c3                   	ret    
c000fcb0:	c7 44 24 10 26 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029726
c000fcb8:	83 c4 08             	add    esp,0x8
c000fcbb:	5b                   	pop    ebx
c000fcbc:	e9 64 9f 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>

c000fcc1 <Phys::allocatePage()>:
c000fcc1:	56                   	push   esi
c000fcc2:	53                   	push   ebx
c000fcc3:	51                   	push   ecx
c000fcc4:	8b 35 e0 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6e0
c000fcca:	89 f3                	mov    ebx,esi
c000fccc:	eb 0a                	jmp    c000fcd8 <Phys::allocatePage()+0x17>
c000fcce:	89 1d e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,ebx
c000fcd4:	39 de                	cmp    esi,ebx
c000fcd6:	74 24                	je     c000fcfc <Phys::allocatePage()+0x3b>
c000fcd8:	53                   	push   ebx
c000fcd9:	e8 3d ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fcde:	5a                   	pop    edx
c000fcdf:	84 c0                	test   al,al
c000fce1:	74 5a                	je     c000fd3d <Phys::allocatePage()+0x7c>
c000fce3:	43                   	inc    ebx
c000fce4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcea:	75 e2                	jne    c000fcce <Phys::allocatePage()+0xd>
c000fcec:	31 db                	xor    ebx,ebx
c000fcee:	c7 05 e0 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6e0,0x0
c000fcf8:	39 de                	cmp    esi,ebx
c000fcfa:	75 dc                	jne    c000fcd8 <Phys::allocatePage()+0x17>
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	68 3c 97 02 c0       	push   0xc002973c
c000fd04:	e8 ea 2b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fd09:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd10:	e8 e9 fd ff ff       	call   c000fafe <Phys::allocateDMA(unsigned long)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	85 c0                	test   eax,eax
c000fd1a:	75 56                	jne    c000fd72 <Phys::allocatePage()+0xb1>
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	68 4d 97 02 c0       	push   0xc002974d
c000fd24:	e8 fc 9e 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	8b 1d e0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e0
c000fd32:	53                   	push   ebx
c000fd33:	e8 e3 fe ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fd38:	5a                   	pop    edx
c000fd39:	84 c0                	test   al,al
c000fd3b:	75 a6                	jne    c000fce3 <Phys::allocatePage()+0x22>
c000fd3d:	6a 01                	push   0x1
c000fd3f:	53                   	push   ebx
c000fd40:	e8 a4 fe ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fd45:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c000fd4a:	59                   	pop    ecx
c000fd4b:	40                   	inc    eax
c000fd4c:	5b                   	pop    ebx
c000fd4d:	a3 ec d6 02 c0       	mov    ds:0xc002d6ec,eax
c000fd52:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd55:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd58:	c1 e0 02             	shl    eax,0x2
c000fd5b:	99                   	cdq    
c000fd5c:	f7 3d f0 d6 02 c0    	idiv   DWORD PTR ds:0xc002d6f0
c000fd62:	39 05 e8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6e8,eax
c000fd68:	75 0c                	jne    c000fd76 <Phys::allocatePage()+0xb5>
c000fd6a:	a1 e0 d6 02 c0       	mov    eax,ds:0xc002d6e0
c000fd6f:	c1 e0 0c             	shl    eax,0xc
c000fd72:	5a                   	pop    edx
c000fd73:	5b                   	pop    ebx
c000fd74:	5e                   	pop    esi
c000fd75:	c3                   	ret    
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	a3 e8 d6 02 c0       	mov    ds:0xc002d6e8,eax
c000fd7e:	50                   	push   eax
c000fd7f:	e8 70 09 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	eb e1                	jmp    c000fd6a <Phys::allocatePage()+0xa9>

c000fd89 <Phys::allocateContiguousPages(int)>:
c000fd89:	57                   	push   edi
c000fd8a:	56                   	push   esi
c000fd8b:	53                   	push   ebx
c000fd8c:	31 db                	xor    ebx,ebx
c000fd8e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd92:	e8 9f d4 00 00       	call   c001d236 <lockScheduler()>
c000fd97:	85 db                	test   ebx,ebx
c000fd99:	75 11                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fd9b:	e8 21 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fda0:	83 ff 01             	cmp    edi,0x1
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	74 21                	je     c000fdc8 <Phys::allocateContiguousPages(int)+0x3f>
c000fda7:	bb 01 00 00 00       	mov    ebx,0x1
c000fdac:	e8 10 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fdb1:	89 da                	mov    edx,ebx
c000fdb3:	c1 e2 0c             	shl    edx,0xc
c000fdb6:	01 f2                	add    edx,esi
c000fdb8:	39 c2                	cmp    edx,eax
c000fdba:	74 17                	je     c000fdd3 <Phys::allocateContiguousPages(int)+0x4a>
c000fdbc:	bb 01 00 00 00       	mov    ebx,0x1
c000fdc1:	89 c6                	mov    esi,eax
c000fdc3:	83 ff 01             	cmp    edi,0x1
c000fdc6:	75 e4                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fdc8:	e8 6b d4 00 00       	call   c001d238 <unlockScheduler()>
c000fdcd:	89 f0                	mov    eax,esi
c000fdcf:	5b                   	pop    ebx
c000fdd0:	5e                   	pop    esi
c000fdd1:	5f                   	pop    edi
c000fdd2:	c3                   	ret    
c000fdd3:	43                   	inc    ebx
c000fdd4:	39 fb                	cmp    ebx,edi
c000fdd6:	75 bf                	jne    c000fd97 <Phys::allocateContiguousPages(int)+0xe>
c000fdd8:	e8 5b d4 00 00       	call   c001d238 <unlockScheduler()>
c000fddd:	89 f0                	mov    eax,esi
c000fddf:	5b                   	pop    ebx
c000fde0:	5e                   	pop    esi
c000fde1:	5f                   	pop    edi
c000fde2:	c3                   	ret    

c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fde3:	56                   	push   esi
c000fde4:	53                   	push   ebx
c000fde5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde9:	39 1d e4 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6e4,ebx
c000fdef:	73 06                	jae    c000fdf7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdf1:	89 1d e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,ebx
c000fdf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdfb:	c1 eb 0c             	shr    ebx,0xc
c000fdfe:	c1 e8 0c             	shr    eax,0xc
c000fe01:	39 d8                	cmp    eax,ebx
c000fe03:	73 13                	jae    c000fe18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe05:	6a 00                	push   0x0
c000fe07:	8d 70 01             	lea    esi,[eax+0x1]
c000fe0a:	50                   	push   eax
c000fe0b:	e8 d9 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe10:	5a                   	pop    edx
c000fe11:	89 f0                	mov    eax,esi
c000fe13:	59                   	pop    ecx
c000fe14:	39 f3                	cmp    ebx,esi
c000fe16:	75 ed                	jne    c000fe05 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe18:	5b                   	pop    ebx
c000fe19:	5e                   	pop    esi
c000fe1a:	c3                   	ret    

c000fe1b <Phys::physicalMemorySetup(unsigned int)>:
c000fe1b:	55                   	push   ebp
c000fe1c:	57                   	push   edi
c000fe1d:	56                   	push   esi
c000fe1e:	53                   	push   ebx
c000fe1f:	31 db                	xor    ebx,ebx
c000fe21:	83 ec 40             	sub    esp,0x40
c000fe24:	6a 30                	push   0x30
c000fe26:	6a 00                	push   0x0
c000fe28:	68 00 d7 02 c0       	push   0xc002d700
c000fe2d:	e8 92 08 ff ff       	call   c00006c4 <memset>
c000fe32:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe36:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe3b:	05 00 10 00 00       	add    eax,0x1000
c000fe40:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	83 ec 08             	sub    esp,0x8
c000fe4a:	6a 01                	push   0x1
c000fe4c:	53                   	push   ebx
c000fe4d:	43                   	inc    ebx
c000fe4e:	e8 96 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe5c:	75 e9                	jne    c000fe47 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe5e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe65:	66 85 c0             	test   ax,ax
c000fe68:	0f 84 8e 01 00 00    	je     c000fffc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe7e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe8f:	eb 15                	jmp    c000fea6 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe91:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe95:	83 c3 18             	add    ebx,0x18
c000fe98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe9c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fea0:	0f 84 66 01 00 00    	je     c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fea9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000feac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000feaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb7:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feb9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000febc:	01 f0                	add    eax,esi
c000febe:	55                   	push   ebp
c000febf:	11 fa                	adc    edx,edi
c000fec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fec9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fecd:	56                   	push   esi
c000fece:	68 88 97 02 c0       	push   0xc0029788
c000fed3:	e8 1b 2a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fedc:	83 c4 10             	add    esp,0x10
c000fedf:	09 f8                	or     eax,edi
c000fee1:	0f 85 25 01 00 00    	jne    c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fee7:	4d                   	dec    ebp
c000fee8:	75 a7                	jne    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feea:	ba 00 00 08 00       	mov    edx,0x80000
c000feef:	89 c1                	mov    ecx,eax
c000fef1:	39 f2                	cmp    edx,esi
c000fef3:	19 f9                	sbb    ecx,edi
c000fef5:	0f 82 a7 00 00 00    	jb     c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fefb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000feff:	89 c1                	mov    ecx,eax
c000ff01:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ff05:	0f 83 97 00 00 00    	jae    c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff0b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff10:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff14:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff18:	39 fa                	cmp    edx,edi
c000ff1a:	19 e8                	sbb    eax,ebp
c000ff1c:	0f 82 14 01 00 00    	jb     c0010036 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff22:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff2a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff30:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff35:	83 d5 ff             	adc    ebp,0xffffffff
c000ff38:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff3c:	31 c0                	xor    eax,eax
c000ff3e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff42:	39 fa                	cmp    edx,edi
c000ff44:	89 c1                	mov    ecx,eax
c000ff46:	19 e9                	sbb    ecx,ebp
c000ff48:	0f 83 43 ff ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff4e:	be 00 00 08 00       	mov    esi,0x80000
c000ff53:	50                   	push   eax
c000ff54:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff58:	57                   	push   edi
c000ff59:	56                   	push   esi
c000ff5a:	68 ac 97 02 c0       	push   0xc00297ac
c000ff5f:	e8 8f 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff64:	5a                   	pop    edx
c000ff65:	59                   	pop    ecx
c000ff66:	57                   	push   edi
c000ff67:	56                   	push   esi
c000ff68:	e8 76 fe ff ff       	call   c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff7c:	03 05 f0 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d6f0
c000ff82:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff89:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c000ff8e:	52                   	push   edx
c000ff8f:	50                   	push   eax
c000ff90:	68 69 97 02 c0       	push   0xc0029769
c000ff95:	e8 59 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	e9 ef fe ff ff       	jmp    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ffa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffae:	39 ea                	cmp    edx,ebp
c000ffb0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffb4:	0f 82 d7 fe ff ff    	jb     c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffba:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffbf:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffc3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffc7:	0f 83 c4 fe ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffcd:	39 ee                	cmp    esi,ebp
c000ffcf:	89 f8                	mov    eax,edi
c000ffd1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffd5:	0f 83 78 ff ff ff    	jae    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffe7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffeb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fff7:	e9 57 ff ff ff       	jmp    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fffc:	83 ec 0c             	sub    esp,0xc
c000ffff:	68 5b 97 02 c0       	push   0xc002975b
c0010004:	e8 1c 9c 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	bb 40 01 00 00       	mov    ebx,0x140
c0010011:	83 ec 08             	sub    esp,0x8
c0010014:	6a 00                	push   0x0
c0010016:	53                   	push   ebx
c0010017:	43                   	inc    ebx
c0010018:	e8 cc fb ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c001001d:	ff 05 f0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6f0
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001002c:	75 e3                	jne    c0010011 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001002e:	83 c4 3c             	add    esp,0x3c
c0010031:	5b                   	pop    ebx
c0010032:	5e                   	pop    esi
c0010033:	5f                   	pop    edi
c0010034:	5d                   	pop    ebp
c0010035:	c3                   	ret    
c0010036:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001003e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010046:	e9 d7 fe ff ff       	jmp    c000ff22 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001004b:	90                   	nop

c001004c <Pipe::isAtty()>:
c001004c:	31 c0                	xor    eax,eax
c001004e:	c3                   	ret    
c001004f:	90                   	nop

c0010050 <Pipe::~Pipe()>:
c0010050:	83 ec 0c             	sub    esp,0xc
c0010053:	ba 18 98 02 c0       	mov    edx,0xc0029818
c0010058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005c:	89 10                	mov    DWORD PTR [eax],edx
c001005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010062:	83 ec 0c             	sub    esp,0xc
c0010065:	50                   	push   eax
c0010066:	e8 37 16 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	90                   	nop
c001006f:	83 c4 0c             	add    esp,0xc
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <Pipe::~Pipe()>:
c0010074:	83 ec 0c             	sub    esp,0xc
c0010077:	83 ec 0c             	sub    esp,0xc
c001007a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007e:	e8 cd ff ff ff       	call   c0010050 <Pipe::~Pipe()>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	83 ec 08             	sub    esp,0x8
c0010089:	6a 20                	push   0x20
c001008b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001008f:	e8 7f 27 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 c4 0c             	add    esp,0xc
c001009a:	c3                   	ret    
c001009b:	90                   	nop

c001009c <Pipe::read(unsigned long long, void*, int*)>:
c001009c:	55                   	push   ebp
c001009d:	57                   	push   edi
c001009e:	56                   	push   esi
c001009f:	53                   	push   ebx
c00100a0:	83 ec 1c             	sub    esp,0x1c
c00100a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00100a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100af:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100b2:	89 c8                	mov    eax,ecx
c00100b4:	99                   	cdq    
c00100b5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100b9:	74 19                	je     c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100bb:	39 f9                	cmp    ecx,edi
c00100bd:	89 d1                	mov    ecx,edx
c00100bf:	19 f1                	sbb    ecx,esi
c00100c1:	73 11                	jae    c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100c3:	e8 6e d1 00 00       	call   c001d236 <lockScheduler()>
c00100c8:	e8 a5 d4 00 00       	call   c001d572 <schedule()>
c00100cd:	e8 66 d1 00 00       	call   c001d238 <unlockScheduler()>
c00100d2:	eb db                	jmp    c00100af <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100d4:	39 f8                	cmp    eax,edi
c00100d6:	89 d1                	mov    ecx,edx
c00100d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100dc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100e0:	19 f1                	sbb    ecx,esi
c00100e2:	73 08                	jae    c00100ec <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100ef:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100f2:	29 c6                	sub    esi,eax
c00100f4:	89 f1                	mov    ecx,esi
c00100f6:	c1 f9 1f             	sar    ecx,0x1f
c00100f9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100fd:	89 ca                	mov    edx,ecx
c00100ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010103:	19 d1                	sbb    ecx,edx
c0010105:	73 04                	jae    c001010b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010107:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001010b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001010f:	89 fd                	mov    ebp,edi
c0010111:	29 f5                	sub    ebp,esi
c0010113:	85 f6                	test   esi,esi
c0010115:	74 12                	je     c0010129 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010117:	52                   	push   edx
c0010118:	56                   	push   esi
c0010119:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001011c:	50                   	push   eax
c001011d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010121:	e8 7a 05 ff ff       	call   c00006a0 <memcpy>
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	85 ed                	test   ebp,ebp
c001012b:	74 12                	je     c001013f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001012d:	50                   	push   eax
c001012e:	55                   	push   ebp
c001012f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010132:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010136:	56                   	push   esi
c0010137:	e8 64 05 ff ff       	call   c00006a0 <memcpy>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010142:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010145:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010148:	99                   	cdq    
c0010149:	89 f7                	mov    edi,esi
c001014b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001014f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010153:	c1 ff 1f             	sar    edi,0x1f
c0010156:	57                   	push   edi
c0010157:	56                   	push   esi
c0010158:	52                   	push   edx
c0010159:	50                   	push   eax
c001015a:	e8 fd 5d 01 00       	call   c0025f5c <__umoddi3>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010165:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001016a:	75 10                	jne    c001017c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001016c:	83 ec 0c             	sub    esp,0xc
c001016f:	68 d5 97 02 c0       	push   0xc00297d5
c0010174:	e8 ac 9a 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010184:	89 10                	mov    DWORD PTR [eax],edx
c0010186:	83 c4 1c             	add    esp,0x1c
c0010189:	31 c0                	xor    eax,eax
c001018b:	5b                   	pop    ebx
c001018c:	5e                   	pop    esi
c001018d:	5f                   	pop    edi
c001018e:	5d                   	pop    ebp
c001018f:	c3                   	ret    

c0010190 <Pipe::write(unsigned long long, void*, int*)>:
c0010190:	55                   	push   ebp
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	53                   	push   ebx
c0010194:	83 ec 1c             	sub    esp,0x1c
c0010197:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001019b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001019f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101a6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101a9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101b0:	89 de                	mov    esi,ebx
c00101b2:	89 df                	mov    edi,ebx
c00101b4:	c1 ff 1f             	sar    edi,0x1f
c00101b7:	01 c6                	add    esi,eax
c00101b9:	89 c8                	mov    eax,ecx
c00101bb:	11 d7                	adc    edi,edx
c00101bd:	99                   	cdq    
c00101be:	39 f1                	cmp    ecx,esi
c00101c0:	89 d0                	mov    eax,edx
c00101c2:	19 f8                	sbb    eax,edi
c00101c4:	b8 01 00 00 00       	mov    eax,0x1
c00101c9:	0f 82 80 00 00 00    	jb     c001024f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101d5:	01 d8                	add    eax,ebx
c00101d7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101db:	99                   	cdq    
c00101dc:	f7 f9                	idiv   ecx
c00101de:	29 d1                	sub    ecx,edx
c00101e0:	89 d7                	mov    edi,edx
c00101e2:	89 c8                	mov    eax,ecx
c00101e4:	99                   	cdq    
c00101e5:	39 ce                	cmp    esi,ecx
c00101e7:	19 d3                	sbb    ebx,edx
c00101e9:	bb 00 00 00 00       	mov    ebx,0x0
c00101ee:	72 04                	jb     c00101f4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101f0:	89 f3                	mov    ebx,esi
c00101f2:	29 cb                	sub    ebx,ecx
c00101f4:	89 f1                	mov    ecx,esi
c00101f6:	29 d9                	sub    ecx,ebx
c00101f8:	74 1a                	je     c0010214 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101fa:	52                   	push   edx
c00101fb:	51                   	push   ecx
c00101fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010200:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010204:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010207:	57                   	push   edi
c0010208:	e8 93 04 ff ff       	call   c00006a0 <memcpy>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010214:	85 db                	test   ebx,ebx
c0010216:	74 12                	je     c001022a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010218:	50                   	push   eax
c0010219:	53                   	push   ebx
c001021a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001021e:	51                   	push   ecx
c001021f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010222:	e8 79 04 ff ff       	call   c00006a0 <memcpy>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001022d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010232:	75 10                	jne    c0010244 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010234:	83 ec 0c             	sub    esp,0xc
c0010237:	68 f1 97 02 c0       	push   0xc00297f1
c001023c:	e8 e4 99 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010248:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001024b:	89 38                	mov    DWORD PTR [eax],edi
c001024d:	31 c0                	xor    eax,eax
c001024f:	83 c4 1c             	add    esp,0x1c
c0010252:	5b                   	pop    ebx
c0010253:	5e                   	pop    esi
c0010254:	5f                   	pop    edi
c0010255:	5d                   	pop    ebp
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <Pipe::Pipe(int)>:
c0010258:	83 ec 0c             	sub    esp,0xc
c001025b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025f:	83 ec 08             	sub    esp,0x8
c0010262:	6a 00                	push   0x0
c0010264:	50                   	push   eax
c0010265:	e8 56 12 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c001026a:	83 c4 10             	add    esp,0x10
c001026d:	ba 18 98 02 c0       	mov    edx,0xc0029818
c0010272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010276:	89 10                	mov    DWORD PTR [eax],edx
c0010278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010280:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010287:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010292:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029d:	83 ec 0c             	sub    esp,0xc
c00102a0:	50                   	push   eax
c00102a1:	e8 7e f3 ff ff       	call   c000f624 <malloc>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	89 c2                	mov    edx,eax
c00102ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102ba:	90                   	nop
c00102bb:	83 c4 0c             	add    esp,0xc
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <VgaText::isAtty()>:
c00102c0:	b0 01                	mov    al,0x1
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <VgaText::~VgaText()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba d4 98 02 c0       	mov    edx,0xc00298d4
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 c3 13 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <VgaText::~VgaText()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <VgaText::~VgaText()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	68 60 12 00 00       	push   0x1260
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 08 25 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 c4 0c             	add    esp,0xc
c0010311:	c3                   	ret    

c0010312 <VgaText::read(unsigned long long, void*, int*)>:
c0010312:	83 ec 10             	sub    esp,0x10
c0010315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001031d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010321:	e8 c9 58 00 00       	call   c0015bef <readKeyboard(VgaText*, char*, unsigned long)>
c0010326:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001032a:	89 02                	mov    DWORD PTR [edx],eax
c001032c:	31 c0                	xor    eax,eax
c001032e:	83 c4 1c             	add    esp,0x1c
c0010331:	c3                   	ret    

c0010332 <setTerminalScrollLock(bool)>:
c0010332:	c3                   	ret    

c0010333 <addToTerminalCycle(VgaText*)>:
c0010333:	8b 15 80 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d780
c0010339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033d:	85 d2                	test   edx,edx
c001033f:	75 0c                	jne    c001034d <addToTerminalCycle(VgaText*)+0x1a>
c0010341:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010347:	a3 80 d7 02 c0       	mov    ds:0xc002d780,eax
c001034c:	c3                   	ret    
c001034d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010353:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010359:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001035f:	c3                   	ret    

c0010360 <installVgaTextImplementation()>:
c0010360:	83 ec 10             	sub    esp,0x10
c0010363:	6a 20                	push   0x20
c0010365:	6a 00                	push   0x0
c0010367:	68 60 d7 02 c0       	push   0xc002d760
c001036c:	e8 53 03 ff ff       	call   c00006c4 <memset>
c0010371:	83 c4 1c             	add    esp,0x1c
c0010374:	c3                   	ret    

c0010375 <scrollTerminalScrollLock(int)>:
c0010375:	c3                   	ret    

c0010376 <VgaText::load()>:
c0010376:	53                   	push   ebx
c0010377:	31 c0                	xor    eax,eax
c0010379:	83 ec 58             	sub    esp,0x58
c001037c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010380:	89 e2                	mov    edx,esp
c0010382:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010386:	40                   	inc    eax
c0010387:	83 f8 50             	cmp    eax,0x50
c001038a:	75 f6                	jne    c0010382 <VgaText::load()+0xc>
c001038c:	31 c0                	xor    eax,eax
c001038e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010395:	84 c9                	test   cl,cl
c0010397:	74 06                	je     c001039f <VgaText::load()+0x29>
c0010399:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001039c:	40                   	inc    eax
c001039d:	eb ef                	jmp    c001038e <VgaText::load()+0x18>
c001039f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00103a5:	85 c0                	test   eax,eax
c00103a7:	74 09                	je     c00103b2 <VgaText::load()+0x3c>
c00103a9:	51                   	push   ecx
c00103aa:	51                   	push   ecx
c00103ab:	52                   	push   edx
c00103ac:	53                   	push   ebx
c00103ad:	ff d0                	call   eax
c00103af:	83 c4 10             	add    esp,0x10
c00103b2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103b8:	85 c0                	test   eax,eax
c00103ba:	74 09                	je     c00103c5 <VgaText::load()+0x4f>
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	53                   	push   ebx
c00103c0:	ff d0                	call   eax
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	83 c4 58             	add    esp,0x58
c00103c8:	5b                   	pop    ebx
c00103c9:	c3                   	ret    

c00103ca <VgaText::updateCursor()>:
c00103ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ce:	39 05 84 d7 02 c0    	cmp    DWORD PTR ds:0xc002d784,eax
c00103d4:	75 0c                	jne    c00103e2 <VgaText::updateCursor()+0x18>
c00103d6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103dc:	85 c0                	test   eax,eax
c00103de:	74 02                	je     c00103e2 <VgaText::updateCursor()+0x18>
c00103e0:	ff e0                	jmp    eax
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <VgaText::showCursor(bool)>:
c00103e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ec:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <VgaText::disableBlink(bool)>:
c00103f4:	56                   	push   esi
c00103f5:	53                   	push   ebx
c00103f6:	51                   	push   ecx
c00103f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ff:	39 1d 84 d7 02 c0    	cmp    DWORD PTR ds:0xc002d784,ebx
c0010405:	75 18                	jne    c001041f <VgaText::disableBlink(bool)+0x2b>
c0010407:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001040d:	85 c0                	test   eax,eax
c001040f:	74 0e                	je     c001041f <VgaText::disableBlink(bool)+0x2b>
c0010411:	89 f1                	mov    ecx,esi
c0010413:	52                   	push   edx
c0010414:	52                   	push   edx
c0010415:	0f b6 d1             	movzx  edx,cl
c0010418:	52                   	push   edx
c0010419:	53                   	push   ebx
c001041a:	ff d0                	call   eax
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	89 f0                	mov    eax,esi
c0010421:	83 f0 01             	xor    eax,0x1
c0010424:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001042a:	58                   	pop    eax
c001042b:	5b                   	pop    ebx
c001042c:	5e                   	pop    esi
c001042d:	c3                   	ret    

c001042e <VgaText::doANSI_SGR(int)>:
c001042e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	85 d2                	test   edx,edx
c0010438:	75 14                	jne    c001044e <VgaText::doANSI_SGR(int)+0x20>
c001043a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010440:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010446:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001044c:	eb 65                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001044e:	83 fa 07             	cmp    edx,0x7
c0010451:	75 14                	jne    c0010467 <VgaText::doANSI_SGR(int)+0x39>
c0010453:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010459:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001045f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010465:	eb 4c                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c0010467:	83 fa 1b             	cmp    edx,0x1b
c001046a:	74 ce                	je     c001043a <VgaText::doANSI_SGR(int)+0xc>
c001046c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001046f:	83 f9 07             	cmp    ecx,0x7
c0010472:	77 09                	ja     c001047d <VgaText::doANSI_SGR(int)+0x4f>
c0010474:	8b 14 8d 00 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3a00]
c001047b:	eb 20                	jmp    c001049d <VgaText::doANSI_SGR(int)+0x6f>
c001047d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010480:	83 f9 07             	cmp    ecx,0x7
c0010483:	77 09                	ja     c001048e <VgaText::doANSI_SGR(int)+0x60>
c0010485:	8b 14 8d 00 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3a00]
c001048c:	eb 25                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001048e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010491:	83 f9 07             	cmp    ecx,0x7
c0010494:	77 0e                	ja     c00104a4 <VgaText::doANSI_SGR(int)+0x76>
c0010496:	8b 14 95 b8 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b48]
c001049d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104a3:	c3                   	ret    
c00104a4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00104a7:	83 f9 07             	cmp    ecx,0x7
c00104aa:	77 0d                	ja     c00104b9 <VgaText::doANSI_SGR(int)+0x8b>
c00104ac:	8b 14 95 90 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b70]
c00104b3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b9:	c3                   	ret    

c00104ba <VgaText::setDefaultBgColour(VgaColour)>:
c00104ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104c8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <VgaText::setDefaultFgColour(VgaColour)>:
c00104d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104de:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104e6:	53                   	push   ebx
c00104e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f3:	51                   	push   ecx
c00104f4:	e8 c1 ff ff ff       	call   c00104ba <VgaText::setDefaultBgColour(VgaColour)>
c00104f9:	58                   	pop    eax
c00104fa:	5a                   	pop    edx
c00104fb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010503:	5b                   	pop    ebx
c0010504:	eb ca                	jmp    c00104d0 <VgaText::setDefaultFgColour(VgaColour)>

c0010506 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010506:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001050a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001050f:	83 e0 0f             	and    eax,0xf
c0010512:	c1 e2 04             	shl    edx,0x4
c0010515:	09 d0                	or     eax,edx
c0010517:	c3                   	ret    

c0010518 <VgaText::scrollScreen()>:
c0010518:	57                   	push   edi
c0010519:	56                   	push   esi
c001051a:	be 01 00 00 00       	mov    esi,0x1
c001051f:	53                   	push   ebx
c0010520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010524:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001052a:	31 ff                	xor    edi,edi
c001052c:	01 d9                	add    ecx,ebx
c001052e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010531:	83 fe 17             	cmp    esi,0x17
c0010534:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001053a:	75 28                	jne    c0010564 <VgaText::scrollScreen()+0x4c>
c001053c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010542:	74 1c                	je     c0010560 <VgaText::scrollScreen()+0x48>
c0010544:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001054b:	50                   	push   eax
c001054c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010553:	50                   	push   eax
c0010554:	e8 ad ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010559:	5a                   	pop    edx
c001055a:	5a                   	pop    edx
c001055b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001055e:	eb 04                	jmp    c0010564 <VgaText::scrollScreen()+0x4c>
c0010560:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010564:	47                   	inc    edi
c0010565:	41                   	inc    ecx
c0010566:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001056c:	75 c0                	jne    c001052e <VgaText::scrollScreen()+0x16>
c001056e:	46                   	inc    esi
c001056f:	83 fe 18             	cmp    esi,0x18
c0010572:	75 b0                	jne    c0010524 <VgaText::scrollScreen()+0xc>
c0010574:	39 1d 84 d7 02 c0    	cmp    DWORD PTR ds:0xc002d784,ebx
c001057a:	75 24                	jne    c00105a0 <VgaText::scrollScreen()+0x88>
c001057c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010583:	74 08                	je     c001058d <VgaText::scrollScreen()+0x75>
c0010585:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001058b:	eb 13                	jmp    c00105a0 <VgaText::scrollScreen()+0x88>
c001058d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010593:	85 c0                	test   eax,eax
c0010595:	74 09                	je     c00105a0 <VgaText::scrollScreen()+0x88>
c0010597:	83 ec 0c             	sub    esp,0xc
c001059a:	53                   	push   ebx
c001059b:	ff d0                	call   eax
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105a4:	5b                   	pop    ebx
c00105a5:	5e                   	pop    esi
c00105a6:	5f                   	pop    edi
c00105a7:	e9 1e fe ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c00105ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00105ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105b1:	c1 e0 08             	shl    eax,0x8
c00105b4:	89 c2                	mov    edx,eax
c00105b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105bb:	09 d0                	or     eax,edx
c00105bd:	c3                   	ret    

c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105be:	53                   	push   ebx
c00105bf:	83 ec 08             	sub    esp,0x8
c00105c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105c6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105cb:	50                   	push   eax
c00105cc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105d1:	50                   	push   eax
c00105d2:	e8 2f ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d7:	5a                   	pop    edx
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	5b                   	pop    ebx
c00105dc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105e1:	50                   	push   eax
c00105e2:	53                   	push   ebx
c00105e3:	e8 c4 ff ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00105e8:	5a                   	pop    edx
c00105e9:	5a                   	pop    edx
c00105ea:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105f0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105f4:	0f b7 d2             	movzx  edx,dx
c00105f7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105fc:	39 0d 84 d7 02 c0    	cmp    DWORD PTR ds:0xc002d784,ecx
c0010602:	75 14                	jne    c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010604:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 0a                	je     c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001060e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010612:	83 c4 08             	add    esp,0x8
c0010615:	5b                   	pop    ebx
c0010616:	ff e0                	jmp    eax
c0010618:	83 c4 08             	add    esp,0x8
c001061b:	5b                   	pop    ebx
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <VgaText::getCursorX()>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <VgaText::getCursorY()>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010634:	c3                   	ret    
c0010635:	90                   	nop

c0010636 <VgaText::setCursor(int, int)>:
c0010636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010648:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001064e:	e9 77 fd ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010653:	90                   	nop

c0010654 <VgaText::setCursorX(int)>:
c0010654:	83 ec 10             	sub    esp,0x10
c0010657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001065b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010665:	50                   	push   eax
c0010666:	e8 cb ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c001066b:	83 c4 1c             	add    esp,0x1c
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::setCursorY(int)>:
c0010670:	83 ec 10             	sub    esp,0x10
c0010673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010677:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001067b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010681:	50                   	push   eax
c0010682:	e8 af ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010687:	83 c4 1c             	add    esp,0x1c
c001068a:	c3                   	ret    
c001068b:	90                   	nop

c001068c <VgaText::incrementCursor(bool)>:
c001068c:	56                   	push   esi
c001068d:	53                   	push   ebx
c001068e:	51                   	push   ecx
c001068f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010697:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001069d:	40                   	inc    eax
c001069e:	83 f8 50             	cmp    eax,0x50
c00106a1:	74 08                	je     c00106ab <VgaText::incrementCursor(bool)+0x1f>
c00106a3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106a9:	eb 33                	jmp    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106ab:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106b1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106bb:	8d 50 01             	lea    edx,[eax+0x1]
c00106be:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106c4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106ca:	75 12                	jne    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106d5:	53                   	push   ebx
c00106d6:	e8 3d fe ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00106db:	83 c4 10             	add    esp,0x10
c00106de:	89 f0                	mov    eax,esi
c00106e0:	84 c0                	test   al,al
c00106e2:	74 0c                	je     c00106f0 <VgaText::incrementCursor(bool)+0x64>
c00106e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106e8:	5a                   	pop    edx
c00106e9:	5b                   	pop    ebx
c00106ea:	5e                   	pop    esi
c00106eb:	e9 da fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00106f0:	58                   	pop    eax
c00106f1:	5b                   	pop    ebx
c00106f2:	5e                   	pop    esi
c00106f3:	c3                   	ret    

c00106f4 <VgaText::updateRAMUsageDisplay(int)>:
c00106f4:	56                   	push   esi
c00106f5:	8b 35 e0 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c5e0
c00106fb:	53                   	push   ebx
c00106fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0010701:	6a 0f                	push   0xf
c0010703:	6a 00                	push   0x0
c0010705:	e8 fc fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c001070a:	5a                   	pop    edx
c001070b:	59                   	pop    ecx
c001070c:	0f b6 c8             	movzx  ecx,al
c001070f:	51                   	push   ecx
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	99                   	cdq    
c0010715:	f7 fb                	idiv   ebx
c0010717:	89 d3                	mov    ebx,edx
c0010719:	83 c0 30             	add    eax,0x30
c001071c:	83 c3 30             	add    ebx,0x30
c001071f:	0f be c0             	movsx  eax,al
c0010722:	0f b6 db             	movzx  ebx,bl
c0010725:	50                   	push   eax
c0010726:	e8 81 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001072b:	5a                   	pop    edx
c001072c:	5a                   	pop    edx
c001072d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010734:	51                   	push   ecx
c0010735:	53                   	push   ebx
c0010736:	e8 71 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001073b:	5b                   	pop    ebx
c001073c:	5a                   	pop    edx
c001073d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010744:	51                   	push   ecx
c0010745:	6a 25                	push   0x25
c0010747:	e8 60 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001074c:	59                   	pop    ecx
c001074d:	5b                   	pop    ebx
c001074e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010755:	5b                   	pop    ebx
c0010756:	5e                   	pop    esi
c0010757:	c3                   	ret    

c0010758 <VgaText::updateDiskUsage()>:
c0010758:	55                   	push   ebp
c0010759:	bd 10 27 00 00       	mov    ebp,0x2710
c001075e:	57                   	push   edi
c001075f:	8b 3d e0 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c5e0
c0010765:	56                   	push   esi
c0010766:	53                   	push   ebx
c0010767:	6a 0f                	push   0xf
c0010769:	6a 00                	push   0x0
c001076b:	e8 96 fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	0f b6 d8             	movzx  ebx,al
c0010774:	59                   	pop    ecx
c0010775:	8b 35 e8 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f9e8
c001077b:	53                   	push   ebx
c001077c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010781:	89 f0                	mov    eax,esi
c0010783:	99                   	cdq    
c0010784:	f7 fd                	idiv   ebp
c0010786:	99                   	cdq    
c0010787:	f7 f9                	idiv   ecx
c0010789:	8d 42 30             	lea    eax,[edx+0x30]
c001078c:	0f b6 c0             	movzx  eax,al
c001078f:	50                   	push   eax
c0010790:	e8 17 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010795:	5d                   	pop    ebp
c0010796:	bd e8 03 00 00       	mov    ebp,0x3e8
c001079b:	5a                   	pop    edx
c001079c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00107a0:	53                   	push   ebx
c00107a1:	89 f0                	mov    eax,esi
c00107a3:	99                   	cdq    
c00107a4:	f7 fd                	idiv   ebp
c00107a6:	99                   	cdq    
c00107a7:	f7 f9                	idiv   ecx
c00107a9:	8d 42 30             	lea    eax,[edx+0x30]
c00107ac:	0f b6 c0             	movzx  eax,al
c00107af:	50                   	push   eax
c00107b0:	e8 f7 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5d                   	pop    ebp
c00107b6:	bd 64 00 00 00       	mov    ebp,0x64
c00107bb:	5a                   	pop    edx
c00107bc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107c3:	53                   	push   ebx
c00107c4:	89 f0                	mov    eax,esi
c00107c6:	99                   	cdq    
c00107c7:	f7 fd                	idiv   ebp
c00107c9:	99                   	cdq    
c00107ca:	f7 f9                	idiv   ecx
c00107cc:	8d 42 30             	lea    eax,[edx+0x30]
c00107cf:	0f b6 c0             	movzx  eax,al
c00107d2:	50                   	push   eax
c00107d3:	e8 d4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107d8:	5d                   	pop    ebp
c00107d9:	5a                   	pop    edx
c00107da:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107e1:	53                   	push   ebx
c00107e2:	89 f0                	mov    eax,esi
c00107e4:	99                   	cdq    
c00107e5:	f7 f9                	idiv   ecx
c00107e7:	89 d6                	mov    esi,edx
c00107e9:	99                   	cdq    
c00107ea:	f7 f9                	idiv   ecx
c00107ec:	8d 42 30             	lea    eax,[edx+0x30]
c00107ef:	0f b6 c0             	movzx  eax,al
c00107f2:	50                   	push   eax
c00107f3:	e8 b4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107f8:	5d                   	pop    ebp
c00107f9:	5a                   	pop    edx
c00107fa:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010801:	53                   	push   ebx
c0010802:	8d 46 30             	lea    eax,[esi+0x30]
c0010805:	0f b6 f0             	movzx  esi,al
c0010808:	56                   	push   esi
c0010809:	e8 9e fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001080e:	5e                   	pop    esi
c001080f:	8b 35 e4 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f9e4
c0010815:	5d                   	pop    ebp
c0010816:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001081d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010822:	53                   	push   ebx
c0010823:	89 f0                	mov    eax,esi
c0010825:	99                   	cdq    
c0010826:	f7 fd                	idiv   ebp
c0010828:	99                   	cdq    
c0010829:	f7 f9                	idiv   ecx
c001082b:	8d 42 30             	lea    eax,[edx+0x30]
c001082e:	0f b6 c0             	movzx  eax,al
c0010831:	50                   	push   eax
c0010832:	e8 75 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010837:	5a                   	pop    edx
c0010838:	5d                   	pop    ebp
c0010839:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010840:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010845:	53                   	push   ebx
c0010846:	89 f0                	mov    eax,esi
c0010848:	99                   	cdq    
c0010849:	f7 fd                	idiv   ebp
c001084b:	99                   	cdq    
c001084c:	f7 f9                	idiv   ecx
c001084e:	8d 42 30             	lea    eax,[edx+0x30]
c0010851:	0f b6 c0             	movzx  eax,al
c0010854:	50                   	push   eax
c0010855:	e8 52 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001085a:	5a                   	pop    edx
c001085b:	5d                   	pop    ebp
c001085c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010863:	bd 64 00 00 00       	mov    ebp,0x64
c0010868:	53                   	push   ebx
c0010869:	89 f0                	mov    eax,esi
c001086b:	99                   	cdq    
c001086c:	f7 fd                	idiv   ebp
c001086e:	99                   	cdq    
c001086f:	f7 f9                	idiv   ecx
c0010871:	83 c2 30             	add    edx,0x30
c0010874:	0f b6 d2             	movzx  edx,dl
c0010877:	52                   	push   edx
c0010878:	e8 2f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001087d:	5a                   	pop    edx
c001087e:	5d                   	pop    ebp
c001087f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010886:	53                   	push   ebx
c0010887:	89 f0                	mov    eax,esi
c0010889:	99                   	cdq    
c001088a:	f7 f9                	idiv   ecx
c001088c:	89 d6                	mov    esi,edx
c001088e:	99                   	cdq    
c001088f:	f7 f9                	idiv   ecx
c0010891:	8d 42 30             	lea    eax,[edx+0x30]
c0010894:	0f b6 c0             	movzx  eax,al
c0010897:	50                   	push   eax
c0010898:	e8 0f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001089d:	5a                   	pop    edx
c001089e:	59                   	pop    ecx
c001089f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00108a6:	53                   	push   ebx
c00108a7:	8d 46 30             	lea    eax,[esi+0x30]
c00108aa:	0f b6 f0             	movzx  esi,al
c00108ad:	56                   	push   esi
c00108ae:	e8 f9 fc ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00108b3:	5b                   	pop    ebx
c00108b4:	5e                   	pop    esi
c00108b5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108bc:	5b                   	pop    ebx
c00108bd:	5e                   	pop    esi
c00108be:	5f                   	pop    edi
c00108bf:	5d                   	pop    ebp
c00108c0:	c3                   	ret    
c00108c1:	90                   	nop

c00108c2 <VgaText::updateTitle()>:
c00108c2:	53                   	push   ebx
c00108c3:	31 c0                	xor    eax,eax
c00108c5:	83 ec 58             	sub    esp,0x58
c00108c8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108cc:	89 e1                	mov    ecx,esp
c00108ce:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108d2:	40                   	inc    eax
c00108d3:	83 f8 50             	cmp    eax,0x50
c00108d6:	75 f6                	jne    c00108ce <VgaText::updateTitle()+0xc>
c00108d8:	31 c0                	xor    eax,eax
c00108da:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108e1:	84 db                	test   bl,bl
c00108e3:	74 06                	je     c00108eb <VgaText::updateTitle()+0x29>
c00108e5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108e8:	40                   	inc    eax
c00108e9:	eb ef                	jmp    c00108da <VgaText::updateTitle()+0x18>
c00108eb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108f1:	85 c0                	test   eax,eax
c00108f3:	74 09                	je     c00108fe <VgaText::updateTitle()+0x3c>
c00108f5:	53                   	push   ebx
c00108f6:	53                   	push   ebx
c00108f7:	51                   	push   ecx
c00108f8:	52                   	push   edx
c00108f9:	ff d0                	call   eax
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	e8 55 fe ff ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0010903:	83 c4 58             	add    esp,0x58
c0010906:	5b                   	pop    ebx
c0010907:	c3                   	ret    

c0010908 <VgaText::setTitleTextColour(VgaColour)>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010910:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010916:	eb aa                	jmp    c00108c2 <VgaText::updateTitle()>

c0010918 <VgaText::setTitleColour(VgaColour)>:
c0010918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010920:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010926:	eb 9a                	jmp    c00108c2 <VgaText::updateTitle()>

c0010928 <VgaText::setTitle(char*)>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 10             	sub    esp,0x10
c001092c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010934:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001093a:	50                   	push   eax
c001093b:	e8 23 fe fe ff       	call   c0000763 <strcpy>
c0010940:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010944:	83 c4 18             	add    esp,0x18
c0010947:	5b                   	pop    ebx
c0010948:	e9 75 ff ff ff       	jmp    c00108c2 <VgaText::updateTitle()>
c001094d:	90                   	nop

c001094e <VgaText::decrementCursor(bool)>:
c001094e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010952:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010956:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001095c:	85 c0                	test   eax,eax
c001095e:	74 07                	je     c0010967 <VgaText::decrementCursor(bool)+0x19>
c0010960:	48                   	dec    eax
c0010961:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010967:	84 c9                	test   cl,cl
c0010969:	74 09                	je     c0010974 <VgaText::decrementCursor(bool)+0x26>
c001096b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001096f:	e9 56 fa ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010974:	c3                   	ret    
c0010975:	90                   	nop

c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010976:	53                   	push   ebx
c0010977:	83 ec 08             	sub    esp,0x8
c001097a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001098a:	3c 07                	cmp    al,0x7
c001098c:	75 2a                	jne    c00109b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001098e:	a1 2c d8 02 c0       	mov    eax,ds:0xc002d82c
c0010993:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001099b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00109a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109af:	83 c4 08             	add    esp,0x8
c00109b2:	5b                   	pop    ebx
c00109b3:	e9 3a 2d 00 00       	jmp    c00136f2 <Buzzer::beep(int, int, bool)>
c00109b8:	3c 0d                	cmp    al,0xd
c00109ba:	75 0c                	jne    c00109c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109bc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109c6:	eb 3b                	jmp    c0010a03 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109c8:	3c 0a                	cmp    al,0xa
c00109ca:	75 40                	jne    c0010a0c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109cc:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109d2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109dc:	8d 50 01             	lea    edx,[eax+0x1]
c00109df:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109e5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109eb:	75 12                	jne    c00109ff <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109ed:	83 ec 0c             	sub    esp,0xc
c00109f0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109f6:	53                   	push   ebx
c00109f7:	e8 1c fb ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a03:	83 c4 08             	add    esp,0x8
c0010a06:	5b                   	pop    ebx
c0010a07:	e9 be f9 ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010a0c:	3c 08                	cmp    al,0x8
c0010a0e:	75 31                	jne    c0010a41 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a10:	50                   	push   eax
c0010a11:	50                   	push   eax
c0010a12:	6a 01                	push   0x1
c0010a14:	53                   	push   ebx
c0010a15:	e8 34 ff ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010a1a:	5a                   	pop    edx
c0010a1b:	59                   	pop    ecx
c0010a1c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a22:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a28:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a2e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a34:	6a 20                	push   0x20
c0010a36:	53                   	push   ebx
c0010a37:	e8 82 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3c:	83 c4 28             	add    esp,0x28
c0010a3f:	5b                   	pop    ebx
c0010a40:	c3                   	ret    
c0010a41:	83 ec 08             	sub    esp,0x8
c0010a44:	0f be c0             	movsx  eax,al
c0010a47:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a4d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a53:	51                   	push   ecx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	53                   	push   ebx
c0010a57:	e8 62 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a5c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a60:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a68:	83 c4 28             	add    esp,0x28
c0010a6b:	5b                   	pop    ebx
c0010a6c:	e9 1b fc ff ff       	jmp    c001068c <VgaText::incrementCursor(bool)>
c0010a71:	90                   	nop

c0010a72 <VgaText::isShowingCursor()>:
c0010a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a76:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a7c:	c3                   	ret    
c0010a7d:	90                   	nop

c0010a7e <VgaText::isBlinkDisabled()>:
c0010a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a82:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a88:	83 f0 01             	xor    eax,0x1
c0010a8b:	c3                   	ret    

c0010a8c <VgaText::setCursorHeight(int)>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a94:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a9a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010aa5:	e9 3a f9 ff ff       	jmp    c00103e4 <VgaText::showCursor(bool)>

c0010aaa <VgaText::getCursorHeight()>:
c0010aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aae:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010ab4:	c3                   	ret    

c0010ab5 <setActiveTerminal(VgaText*)>:
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 08             	sub    esp,0x8
c0010ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abd:	85 db                	test   ebx,ebx
c0010abf:	75 11                	jne    c0010ad2 <setActiveTerminal(VgaText*)+0x1d>
c0010ac1:	c7 44 24 10 2c 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc002982c
c0010ac9:	83 c4 08             	add    esp,0x8
c0010acc:	5b                   	pop    ebx
c0010acd:	e9 53 91 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c0010ad2:	50                   	push   eax
c0010ad3:	50                   	push   eax
c0010ad4:	53                   	push   ebx
c0010ad5:	68 3a 98 02 c0       	push   0xc002983a
c0010ada:	e8 14 1e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010adf:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	85 c0                	test   eax,eax
c0010ae9:	74 0c                	je     c0010af7 <setActiveTerminal(VgaText*)+0x42>
c0010aeb:	83 ec 0c             	sub    esp,0xc
c0010aee:	50                   	push   eax
c0010aef:	e8 d6 f8 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	89 1d 84 d7 02 c0    	mov    DWORD PTR ds:0xc002d784,ebx
c0010afd:	51                   	push   ecx
c0010afe:	51                   	push   ecx
c0010aff:	53                   	push   ebx
c0010b00:	68 52 98 02 c0       	push   0xc0029852
c0010b05:	e8 e9 1d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010b0a:	83 c4 0c             	add    esp,0xc
c0010b0d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b13:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b19:	53                   	push   ebx
c0010b1a:	e8 17 fb ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b22:	e8 57 ff ff ff       	call   c0010a7e <VgaText::isBlinkDisabled()>
c0010b27:	5a                   	pop    edx
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	59                   	pop    ecx
c0010b2c:	50                   	push   eax
c0010b2d:	53                   	push   ebx
c0010b2e:	e8 c1 f8 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0010b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b36:	e8 6f ff ff ff       	call   c0010aaa <VgaText::getCursorHeight()>
c0010b3b:	5a                   	pop    edx
c0010b3c:	59                   	pop    ecx
c0010b3d:	50                   	push   eax
c0010b3e:	53                   	push   ebx
c0010b3f:	e8 48 ff ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b4e:	75 0a                	jne    c0010b5a <setActiveTerminal(VgaText*)+0xa5>
c0010b50:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b5e:	83 c4 08             	add    esp,0x8
c0010b61:	5b                   	pop    ebx
c0010b62:	e9 0f f8 ff ff       	jmp    c0010376 <VgaText::load()>

c0010b67 <doTerminalCycle()>:
c0010b67:	83 ec 18             	sub    esp,0x18
c0010b6a:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c0010b6f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b75:	50                   	push   eax
c0010b76:	a3 80 d7 02 c0       	mov    ds:0xc002d780,eax
c0010b7b:	e8 35 ff ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0010b80:	83 c4 1c             	add    esp,0x1c
c0010b83:	c3                   	ret    

c0010b84 <VgaText::doUpdate()>:
c0010b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b88:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b8e:	85 c0                	test   eax,eax
c0010b90:	74 02                	je     c0010b94 <VgaText::doUpdate()+0x10>
c0010b92:	ff e0                	jmp    eax
c0010b94:	c3                   	ret    
c0010b95:	90                   	nop

c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b96:	55                   	push   ebp
c0010b97:	57                   	push   edi
c0010b98:	56                   	push   esi
c0010b99:	53                   	push   ebx
c0010b9a:	83 ec 1c             	sub    esp,0x1c
c0010b9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ba1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ba6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010bad:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010bb0:	50                   	push   eax
c0010bb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bb6:	50                   	push   eax
c0010bb7:	e8 4a f9 ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010bbc:	59                   	pop    ecx
c0010bbd:	0f b6 c0             	movzx  eax,al
c0010bc0:	5b                   	pop    ebx
c0010bc1:	31 c9                	xor    ecx,ecx
c0010bc3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bcf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bd9:	0f b7 db             	movzx  ebx,bx
c0010bdc:	01 db                	add    ebx,ebx
c0010bde:	01 fb                	add    ebx,edi
c0010be0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010be3:	84 c0                	test   al,al
c0010be5:	0f 84 38 01 00 00    	je     c0010d23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010beb:	3c 0d                	cmp    al,0xd
c0010bed:	75 0f                	jne    c0010bfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bef:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf9:	e9 1f 01 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bfe:	3c 0a                	cmp    al,0xa
c0010c00:	75 5b                	jne    c0010c5d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010c02:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c08:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c12:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c15:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c1b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c21:	75 12                	jne    c0010c35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c23:	83 ec 0c             	sub    esp,0xc
c0010c26:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c2c:	55                   	push   ebp
c0010c2d:	e8 e6 f8 ff ff       	call   c0010518 <VgaText::scrollScreen()>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	55                   	push   ebp
c0010c39:	e8 8c f7 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010c3e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c4f:	31 c9                	xor    ecx,ecx
c0010c51:	0f b7 db             	movzx  ebx,bx
c0010c54:	01 db                	add    ebx,ebx
c0010c56:	01 fb                	add    ebx,edi
c0010c58:	e9 c0 00 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c5d:	3c 08                	cmp    al,0x8
c0010c5f:	75 4e                	jne    c0010caf <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c61:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c65:	53                   	push   ebx
c0010c66:	53                   	push   ebx
c0010c67:	6a 01                	push   0x1
c0010c69:	55                   	push   ebp
c0010c6a:	e8 df fc ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010c6f:	58                   	pop    eax
c0010c70:	5a                   	pop    edx
c0010c71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c7d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c83:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c89:	6a 20                	push   0x20
c0010c8b:	55                   	push   ebp
c0010c8c:	e8 2d f9 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c91:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c99:	83 c4 20             	add    esp,0x20
c0010c9c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ca2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ca6:	0f b7 db             	movzx  ebx,bx
c0010ca9:	01 db                	add    ebx,ebx
c0010cab:	01 fb                	add    ebx,edi
c0010cad:	eb 6e                	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010caf:	51                   	push   ecx
c0010cb0:	51                   	push   ecx
c0010cb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cb5:	50                   	push   eax
c0010cb6:	e8 f1 f8 ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cc1:	39 2d 84 d7 02 c0    	cmp    DWORD PTR ds:0xc002d784,ebp
c0010cc7:	75 2a                	jne    c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ccf:	85 c0                	test   eax,eax
c0010cd1:	74 20                	je     c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cd3:	52                   	push   edx
c0010cd4:	52                   	push   edx
c0010cd5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cdb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ce1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cec:	51                   	push   ecx
c0010ced:	55                   	push   ebp
c0010cee:	ff d0                	call   eax
c0010cf0:	83 c4 20             	add    esp,0x20
c0010cf3:	83 c3 02             	add    ebx,0x2
c0010cf6:	50                   	push   eax
c0010cf7:	50                   	push   eax
c0010cf8:	6a 00                	push   0x0
c0010cfa:	55                   	push   ebp
c0010cfb:	e8 8c f9 ff ff       	call   c001068c <VgaText::incrementCursor(bool)>
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d0a:	75 0f                	jne    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d0c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d14:	0f b7 db             	movzx  ebx,bx
c0010d17:	01 db                	add    ebx,ebx
c0010d19:	01 fb                	add    ebx,edi
c0010d1b:	b1 01                	mov    cl,0x1
c0010d1d:	46                   	inc    esi
c0010d1e:	e9 bd fe ff ff       	jmp    c0010be0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d23:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	55                   	push   ebp
c0010d2b:	e8 9a f6 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d37:	84 c9                	test   cl,cl
c0010d39:	74 0c                	je     c0010d47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d3b:	83 ec 0c             	sub    esp,0xc
c0010d3e:	55                   	push   ebp
c0010d3f:	e8 40 fe ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d4e:	83 c4 1c             	add    esp,0x1c
c0010d51:	5b                   	pop    ebx
c0010d52:	5e                   	pop    esi
c0010d53:	5f                   	pop    edi
c0010d54:	5d                   	pop    ebp
c0010d55:	c3                   	ret    

c0010d56 <VgaText::clearScreen()>:
c0010d56:	57                   	push   edi
c0010d57:	56                   	push   esi
c0010d58:	31 f6                	xor    esi,esi
c0010d5a:	53                   	push   ebx
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	52                   	push   edx
c0010d60:	6a 00                	push   0x0
c0010d62:	6a 00                	push   0x0
c0010d64:	53                   	push   ebx
c0010d65:	e8 cc f8 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010d6a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d7a:	7e 26                	jle    c0010da2 <VgaText::clearScreen()+0x4c>
c0010d7c:	31 ff                	xor    edi,edi
c0010d7e:	50                   	push   eax
c0010d7f:	50                   	push   eax
c0010d80:	56                   	push   esi
c0010d81:	57                   	push   edi
c0010d82:	47                   	inc    edi
c0010d83:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d89:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d8f:	6a 20                	push   0x20
c0010d91:	53                   	push   ebx
c0010d92:	e8 27 f8 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d97:	83 c4 20             	add    esp,0x20
c0010d9a:	83 ff 50             	cmp    edi,0x50
c0010d9d:	75 df                	jne    c0010d7e <VgaText::clearScreen()+0x28>
c0010d9f:	46                   	inc    esi
c0010da0:	eb d2                	jmp    c0010d74 <VgaText::clearScreen()+0x1e>
c0010da2:	83 ec 0c             	sub    esp,0xc
c0010da5:	53                   	push   ebx
c0010da6:	e8 d9 fd ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010dab:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	5b                   	pop    ebx
c0010db6:	5e                   	pop    esi
c0010db7:	5f                   	pop    edi
c0010db8:	c3                   	ret    
c0010db9:	90                   	nop

c0010dba <VgaText::putchar(char)>:
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 14             	sub    esp,0x14
c0010dbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dc3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dc7:	3c 5b                	cmp    al,0x5b
c0010dc9:	75 21                	jne    c0010dec <VgaText::putchar(char)+0x32>
c0010dcb:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dd2:	74 28                	je     c0010dfc <VgaText::putchar(char)+0x42>
c0010dd4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ddd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010de7:	e9 e2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dec:	3c 1b                	cmp    al,0x1b
c0010dee:	75 0c                	jne    c0010dfc <VgaText::putchar(char)+0x42>
c0010df0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010df7:	e9 d2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dfc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010e02:	84 c9                	test   cl,cl
c0010e04:	0f 84 ab 00 00 00    	je     c0010eb5 <VgaText::putchar(char)+0xfb>
c0010e0a:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e0d:	80 fa 3e             	cmp    dl,0x3e
c0010e10:	0f 87 82 00 00 00    	ja     c0010e98 <VgaText::putchar(char)+0xde>
c0010e16:	3c 6d                	cmp    al,0x6d
c0010e18:	75 4d                	jne    c0010e67 <VgaText::putchar(char)+0xad>
c0010e1a:	31 f6                	xor    esi,esi
c0010e1c:	31 d2                	xor    edx,edx
c0010e1e:	31 c0                	xor    eax,eax
c0010e20:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e26:	7e 30                	jle    c0010e58 <VgaText::putchar(char)+0x9e>
c0010e28:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e30:	80 fa 3b             	cmp    dl,0x3b
c0010e33:	75 17                	jne    c0010e4c <VgaText::putchar(char)+0x92>
c0010e35:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e39:	50                   	push   eax
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 ee f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e40:	59                   	pop    ecx
c0010e41:	31 d2                	xor    edx,edx
c0010e43:	58                   	pop    eax
c0010e44:	31 c0                	xor    eax,eax
c0010e46:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e4a:	eb 09                	jmp    c0010e55 <VgaText::putchar(char)+0x9b>
c0010e4c:	6b c0 0a             	imul   eax,eax,0xa
c0010e4f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e53:	88 ca                	mov    dl,cl
c0010e55:	46                   	inc    esi
c0010e56:	eb c8                	jmp    c0010e20 <VgaText::putchar(char)+0x66>
c0010e58:	84 d2                	test   dl,dl
c0010e5a:	74 31                	je     c0010e8d <VgaText::putchar(char)+0xd3>
c0010e5c:	50                   	push   eax
c0010e5d:	53                   	push   ebx
c0010e5e:	e8 cb f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e63:	58                   	pop    eax
c0010e64:	5a                   	pop    edx
c0010e65:	eb 26                	jmp    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e67:	3c 4a                	cmp    al,0x4a
c0010e69:	75 22                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e6b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e72:	75 19                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	53                   	push   ebx
c0010e78:	e8 d9 fe ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0010e7d:	83 c4 0c             	add    esp,0xc
c0010e80:	6a 00                	push   0x0
c0010e82:	6a 00                	push   0x0
c0010e84:	53                   	push   ebx
c0010e85:	e8 ac f7 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010e8a:	83 c4 10             	add    esp,0x10
c0010e8d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e96:	eb 36                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010e98:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e9e:	83 fa 0e             	cmp    edx,0xe
c0010ea1:	7f 2b                	jg     c0010ece <VgaText::putchar(char)+0x114>
c0010ea3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ea6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010eac:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010eb3:	eb 19                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010eb5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ebb:	0f be c0             	movsx  eax,al
c0010ebe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ec4:	50                   	push   eax
c0010ec5:	53                   	push   ebx
c0010ec6:	e8 ab fa ff ff       	call   c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	83 c4 14             	add    esp,0x14
c0010ed1:	5b                   	pop    ebx
c0010ed2:	5e                   	pop    esi
c0010ed3:	c3                   	ret    

c0010ed4 <VgaText::puts(char const*)>:
c0010ed4:	53                   	push   ebx
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010edc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010edf:	84 c0                	test   al,al
c0010ee1:	74 12                	je     c0010ef5 <VgaText::puts(char const*)+0x21>
c0010ee3:	43                   	inc    ebx
c0010ee4:	51                   	push   ecx
c0010ee5:	51                   	push   ecx
c0010ee6:	50                   	push   eax
c0010ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eeb:	e8 ca fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	eb e7                	jmp    c0010edc <VgaText::puts(char const*)+0x8>
c0010ef5:	83 c4 08             	add    esp,0x8
c0010ef8:	5b                   	pop    ebx
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putx(unsigned int)>:
c0010efa:	57                   	push   edi
c0010efb:	b9 11 00 00 00       	mov    ecx,0x11
c0010f00:	56                   	push   esi
c0010f01:	be 6e 98 02 c0       	mov    esi,0xc002986e
c0010f06:	53                   	push   ebx
c0010f07:	83 ec 20             	sub    esp,0x20
c0010f0a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f0e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f12:	fc                   	cld    
c0010f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f15:	be 08 00 00 00       	mov    esi,0x8
c0010f1a:	50                   	push   eax
c0010f1b:	50                   	push   eax
c0010f1c:	89 d8                	mov    eax,ebx
c0010f1e:	c1 e3 04             	shl    ebx,0x4
c0010f21:	c1 e8 1c             	shr    eax,0x1c
c0010f24:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f29:	50                   	push   eax
c0010f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f2e:	e8 87 fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	4e                   	dec    esi
c0010f37:	75 e1                	jne    c0010f1a <VgaText::putx(unsigned int)+0x20>
c0010f39:	83 c4 20             	add    esp,0x20
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	c3                   	ret    

c0010f40 <VgaText::VgaText(char const*)>:
c0010f40:	57                   	push   edi
c0010f41:	56                   	push   esi
c0010f42:	53                   	push   ebx
c0010f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f47:	83 ec 08             	sub    esp,0x8
c0010f4a:	6a 00                	push   0x0
c0010f4c:	50                   	push   eax
c0010f4d:	e8 6e 05 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	ba d4 98 02 c0       	mov    edx,0xc00298d4
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f72:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f80:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f96:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fce:	bb 60 d7 02 c0       	mov    ebx,0xc002d760
c0010fd3:	b8 08 00 00 00       	mov    eax,0x8
c0010fd8:	fc                   	cld    
c0010fd9:	89 d7                	mov    edi,edx
c0010fdb:	89 de                	mov    esi,ebx
c0010fdd:	89 c1                	mov    ecx,eax
c0010fdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe5:	05 1e 10 00 00       	add    eax,0x101e
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff1:	50                   	push   eax
c0010ff2:	e8 6c f7 fe ff       	call   c0000763 <strcpy>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffe:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	83 c0 0c             	add    eax,0xc
c001100f:	83 ec 04             	sub    esp,0x4
c0011012:	68 00 0f 00 00       	push   0xf00
c0011017:	6a 00                	push   0x0
c0011019:	50                   	push   eax
c001101a:	e8 a5 f6 fe ff       	call   c00006c4 <memset>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 ec 04             	sub    esp,0x4
c0011025:	6a 00                	push   0x0
c0011027:	6a 07                	push   0x7
c0011029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102d:	e8 b4 f4 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	83 ec 08             	sub    esp,0x8
c0011038:	6a 02                	push   0x2
c001103a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103e:	e8 49 fa ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	83 ec 04             	sub    esp,0x4
c0011049:	6a 00                	push   0x0
c001104b:	6a 00                	push   0x0
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 e0 f5 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 01                	push   0x1
c001105e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011062:	e8 7d f3 ff ff       	call   c00103e4 <VgaText::showCursor(bool)>
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	83 ec 08             	sub    esp,0x8
c001106d:	6a 01                	push   0x1
c001106f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011073:	e8 7c f3 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	83 ec 0c             	sub    esp,0xc
c001107e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011082:	e8 cf fc ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011099:	05 9e 10 00 00       	add    eax,0x109e
c001109e:	83 ec 04             	sub    esp,0x4
c00110a1:	68 96 00 00 00       	push   0x96
c00110a6:	6a 00                	push   0x0
c00110a8:	50                   	push   eax
c00110a9:	e8 16 f6 fe ff       	call   c00006c4 <memset>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b5:	05 34 11 00 00       	add    eax,0x1134
c00110ba:	83 ec 04             	sub    esp,0x4
c00110bd:	68 2c 01 00 00       	push   0x12c
c00110c2:	6a 00                	push   0x0
c00110c4:	50                   	push   eax
c00110c5:	e8 fa f5 fe ff       	call   c00006c4 <memset>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	90                   	nop
c00110ce:	5b                   	pop    ebx
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <VgaText::receiveKey(unsigned char)>:
c00110d2:	55                   	push   ebp
c00110d3:	57                   	push   edi
c00110d4:	56                   	push   esi
c00110d5:	53                   	push   ebx
c00110d6:	83 ec 1c             	sub    esp,0x1c
c00110d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e1:	84 db                	test   bl,bl
c00110e3:	0f 84 c9 00 00 00    	je     c00111b2 <VgaText::receiveKey(unsigned char)+0xe0>
c00110e9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110ef:	80 fb 08             	cmp    bl,0x8
c00110f2:	75 2c                	jne    c0011120 <VgaText::receiveKey(unsigned char)+0x4e>
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	57                   	push   edi
c00110f8:	e8 e4 f5 fe ff       	call   c00006e1 <strlen>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	85 c0                	test   eax,eax
c0011102:	74 41                	je     c0011145 <VgaText::receiveKey(unsigned char)+0x73>
c0011104:	50                   	push   eax
c0011105:	50                   	push   eax
c0011106:	6a 08                	push   0x8
c0011108:	56                   	push   esi
c0011109:	e8 ac fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001110e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011111:	e8 cb f5 fe ff       	call   c00006e1 <strlen>
c0011116:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001111e:	eb 22                	jmp    c0011142 <VgaText::receiveKey(unsigned char)+0x70>
c0011120:	0f be c3             	movsx  eax,bl
c0011123:	52                   	push   edx
c0011124:	52                   	push   edx
c0011125:	50                   	push   eax
c0011126:	56                   	push   esi
c0011127:	e8 8e fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001112c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011130:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011135:	59                   	pop    ecx
c0011136:	5d                   	pop    ebp
c0011137:	8d 44 24 16          	lea    eax,[esp+0x16]
c001113b:	50                   	push   eax
c001113c:	57                   	push   edi
c001113d:	e8 d8 f6 fe ff       	call   c000081a <strcat>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001114c:	75 05                	jne    c0011153 <VgaText::receiveKey(unsigned char)+0x81>
c001114e:	80 fb 0a             	cmp    bl,0xa
c0011151:	75 53                	jne    c00111a6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001115c:	53                   	push   ebx
c001115d:	e8 7f f5 fe ff       	call   c00006e1 <strlen>
c0011162:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011165:	89 c5                	mov    ebp,eax
c0011167:	e8 75 f5 fe ff       	call   c00006e1 <strlen>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011173:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011178:	76 10                	jbe    c001118a <VgaText::receiveKey(unsigned char)+0xb8>
c001117a:	83 ec 0c             	sub    esp,0xc
c001117d:	68 7f 98 02 c0       	push   0xc002987f
c0011182:	e8 9e 8a 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	50                   	push   eax
c001118b:	50                   	push   eax
c001118c:	57                   	push   edi
c001118d:	53                   	push   ebx
c001118e:	e8 87 f6 fe ff       	call   c000081a <strcat>
c0011193:	83 c4 0c             	add    esp,0xc
c0011196:	68 96 00 00 00       	push   0x96
c001119b:	6a 00                	push   0x0
c001119d:	57                   	push   edi
c001119e:	e8 21 f5 fe ff       	call   c00006c4 <memset>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	56                   	push   esi
c00111aa:	e8 d5 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	83 c4 1c             	add    esp,0x1c
c00111b5:	5b                   	pop    ebx
c00111b6:	5e                   	pop    esi
c00111b7:	5f                   	pop    edi
c00111b8:	5d                   	pop    ebp
c00111b9:	c3                   	ret    

c00111ba <VgaText::write(unsigned long long, void*, int*)>:
c00111ba:	55                   	push   ebp
c00111bb:	57                   	push   edi
c00111bc:	56                   	push   esi
c00111bd:	53                   	push   ebx
c00111be:	83 ec 0c             	sub    esp,0xc
c00111c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111c5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111cd:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111d4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111d7:	39 eb                	cmp    ebx,ebp
c00111d9:	74 13                	je     c00111ee <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111db:	43                   	inc    ebx
c00111dc:	50                   	push   eax
c00111dd:	50                   	push   eax
c00111de:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111e2:	50                   	push   eax
c00111e3:	56                   	push   esi
c00111e4:	e8 d1 fb ff ff       	call   c0010dba <VgaText::putchar(char)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	eb e9                	jmp    c00111d7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111f8:	56                   	push   esi
c00111f9:	e8 86 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011202:	89 38                	mov    DWORD PTR [eax],edi
c0011204:	83 c4 1c             	add    esp,0x1c
c0011207:	31 c0                	xor    eax,eax
c0011209:	5b                   	pop    ebx
c001120a:	5e                   	pop    esi
c001120b:	5f                   	pop    edi
c001120c:	5d                   	pop    ebp
c001120d:	c3                   	ret    

c001120e <newTerminal(char*)>:
c001120e:	83 ec 28             	sub    esp,0x28
c0011211:	68 60 12 00 00       	push   0x1260
c0011216:	e8 09 e4 ff ff       	call   c000f624 <malloc>
c001121b:	5a                   	pop    edx
c001121c:	59                   	pop    ecx
c001121d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011221:	50                   	push   eax
c0011222:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011226:	e8 15 fd ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001122b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001122f:	83 c4 2c             	add    esp,0x2c
c0011232:	c3                   	ret    
c0011233:	90                   	nop

c0011234 <TSS::TSS()>:
c0011234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123f:	90                   	nop
c0011240:	c3                   	ret    
c0011241:	90                   	nop

c0011242 <TSS::setESP(unsigned long)>:
c0011242:	55                   	push   ebp
c0011243:	89 e5                	mov    ebp,esp
c0011245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001124b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001124e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011251:	90                   	nop
c0011252:	5d                   	pop    ebp
c0011253:	c3                   	ret    

c0011254 <TSS::flush()>:
c0011254:	55                   	push   ebp
c0011255:	89 e5                	mov    ebp,esp
c0011257:	83 ec 10             	sub    esp,0x10
c001125a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125d:	8b 00                	mov    eax,DWORD PTR [eax]
c001125f:	83 c8 03             	or     eax,0x3
c0011262:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011266:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001126a:	66 89 d0             	mov    ax,dx
c001126d:	0f 00 d8             	ltr    ax
c0011270:	90                   	nop
c0011271:	c9                   	leave  
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <TSS::setup(unsigned long, unsigned long)>:
c0011274:	55                   	push   ebp
c0011275:	89 e5                	mov    ebp,esp
c0011277:	83 ec 18             	sub    esp,0x18
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	6a 68                	push   0x68
c001127f:	e8 a0 e3 ff ff       	call   c000f624 <malloc>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	89 c2                	mov    edx,eax
c0011289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011295:	83 ec 04             	sub    esp,0x4
c0011298:	6a 68                	push   0x68
c001129a:	6a 00                	push   0x0
c001129c:	50                   	push   eax
c001129d:	e8 22 f4 fe ff       	call   c00006c4 <memset>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ab:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112db:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ff:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001131a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001131d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011323:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011339:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133c:	0f 20 da             	mov    edx,cr3
c001133f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011342:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011345:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001134b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	50                   	push   eax
c0011352:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011355:	50                   	push   eax
c0011356:	e8 a7 da ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	6a 68                	push   0x68
c0011363:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011366:	50                   	push   eax
c0011367:	e8 b2 da ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011373:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011376:	83 e0 0f             	and    eax,0xf
c0011379:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001137c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001137f:	83 c8 40             	or     eax,0x40
c0011382:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011385:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001138a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011390:	05 78 01 00 00       	add    eax,0x178
c0011395:	83 ec 04             	sub    esp,0x4
c0011398:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001139b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001139e:	50                   	push   eax
c001139f:	e8 ae da ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	89 c2                	mov    edx,eax
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	89 10                	mov    DWORD PTR [eax],edx
c00113ae:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00113b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113b9:	05 78 01 00 00       	add    eax,0x178
c00113be:	83 ec 0c             	sub    esp,0xc
c00113c1:	50                   	push   eax
c00113c2:	e8 cf da ff ff       	call   c000ee96 <GDT::flush()>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cf:	83 ec 08             	sub    esp,0x8
c00113d2:	50                   	push   eax
c00113d3:	68 e8 98 02 c0       	push   0xc00298e8
c00113d8:	e8 16 15 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e5:	c9                   	leave  
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113f8:	75 08                	jne    c0011402 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011400:	eb 38                	jmp    c001143a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011402:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011407:	75 17                	jne    c0011420 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001140e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011411:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011417:	8b 10                	mov    edx,DWORD PTR [eax]
c0011419:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001141d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011420:	89 c1                	mov    ecx,eax
c0011422:	83 e1 fd             	and    ecx,0xfffffffd
c0011425:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001142b:	74 cd                	je     c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001142d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011432:	83 e0 ef             	and    eax,0xffffffef
c0011435:	83 f8 08             	cmp    eax,0x8
c0011438:	76 c0                	jbe    c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001143a:	31 c0                	xor    eax,eax
c001143c:	c3                   	ret    
c001143d:	90                   	nop

c001143e <ReservedFilename::isAtty()>:
c001143e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011442:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011445:	31 c0                	xor    eax,eax
c0011447:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001144d:	74 09                	je     c0011458 <ReservedFilename::isAtty()+0x1a>
c001144f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011455:	0f 94 c0             	sete   al
c0011458:	c3                   	ret    
c0011459:	90                   	nop

c001145a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001145a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011469:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001146e:	75 08                	jne    c0011478 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011470:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011476:	eb 3d                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011478:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001147d:	75 17                	jne    c0011496 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001147f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011484:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011487:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001148d:	8b 10                	mov    edx,DWORD PTR [eax]
c001148f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011493:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011496:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001149b:	75 04                	jne    c00114a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001149d:	89 0a                	mov    DWORD PTR [edx],ecx
c001149f:	eb 14                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00114a1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00114a6:	74 c8                	je     c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114ad:	83 e0 ef             	and    eax,0xffffffef
c00114b0:	83 f8 08             	cmp    eax,0x8
c00114b3:	76 bb                	jbe    c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114b5:	31 c0                	xor    eax,eax
c00114b7:	c3                   	ret    

c00114b8 <UnixFile::getFileDescriptor()>:
c00114b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	c3                   	ret    

c00114c0 <UnixFile::UnixFile(int)>:
c00114c0:	53                   	push   ebx
c00114c1:	83 ec 28             	sub    esp,0x28
c00114c4:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c00114c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114cd:	89 10                	mov    DWORD PTR [eax],edx
c00114cf:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114d7:	0f 8f 8c 01 00 00    	jg     c0011669 <UnixFile::UnixFile(int)+0x1a9>
c00114dd:	a1 40 c6 02 c0       	mov    eax,ds:0xc002c640
c00114e2:	8d 50 01             	lea    edx,[eax+0x1]
c00114e5:	89 15 40 c6 02 c0    	mov    DWORD PTR ds:0xc002c640,edx
c00114eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114f2:	83 ec 08             	sub    esp,0x8
c00114f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114f9:	68 18 d8 02 c0       	push   0xc002d818
c00114fe:	e8 cd 66 01 00       	call   c0027bd0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	a0 14 d8 02 c0       	mov    al,ds:0xc002d814
c001150b:	83 f0 01             	xor    eax,0x1
c001150e:	84 c0                	test   al,al
c0011510:	0f 84 54 01 00 00    	je     c001166a <UnixFile::UnixFile(int)+0x1aa>
c0011516:	c6 05 14 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d814,0x1
c001151d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001152c:	e8 f3 e0 ff ff       	call   c000f624 <malloc>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	89 c3                	mov    ebx,eax
c0011536:	83 ec 08             	sub    esp,0x8
c0011539:	68 03 ff ff 0f       	push   0xfffff03
c001153e:	53                   	push   ebx
c001153f:	e8 2c 01 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	89 1d 0c d8 02 c0    	mov    DWORD PTR ds:0xc002d80c,ebx
c001154d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011555:	83 ec 0c             	sub    esp,0xc
c0011558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001155c:	e8 c3 e0 ff ff       	call   c000f624 <malloc>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	89 c3                	mov    ebx,eax
c0011566:	83 ec 08             	sub    esp,0x8
c0011569:	68 01 ff ff 0f       	push   0xfffff01
c001156e:	53                   	push   ebx
c001156f:	e8 fc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	89 1d 10 d8 02 c0    	mov    DWORD PTR ds:0xc002d810,ebx
c001157d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011585:	83 ec 0c             	sub    esp,0xc
c0011588:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001158c:	e8 93 e0 ff ff       	call   c000f624 <malloc>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	89 c3                	mov    ebx,eax
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	68 00 ff ff 0f       	push   0xfffff00
c001159e:	53                   	push   ebx
c001159f:	e8 cc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	89 1d 04 d8 02 c0    	mov    DWORD PTR ds:0xc002d804,ebx
c00115ad:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115bc:	e8 63 e0 ff ff       	call   c000f624 <malloc>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	89 c3                	mov    ebx,eax
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	68 02 ff ff 0f       	push   0xfffff02
c00115ce:	53                   	push   ebx
c00115cf:	e8 9c 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	89 1d 08 d8 02 c0    	mov    DWORD PTR ds:0xc002d808,ebx
c00115dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115e5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115ea:	7f 7e                	jg     c001166a <UnixFile::UnixFile(int)+0x1aa>
c00115ec:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115fb:	e8 24 e0 ff ff       	call   c000f624 <malloc>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	89 c3                	mov    ebx,eax
c0011605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011609:	05 10 ff ff 0f       	add    eax,0xfffff10
c001160e:	83 ec 08             	sub    esp,0x8
c0011611:	50                   	push   eax
c0011612:	53                   	push   ebx
c0011613:	e8 58 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001161f:	89 1c 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],ebx
c0011626:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001162e:	83 ec 0c             	sub    esp,0xc
c0011631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011635:	e8 ea df ff ff       	call   c000f624 <malloc>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	89 c3                	mov    ebx,eax
c001163f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011643:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	50                   	push   eax
c001164c:	53                   	push   ebx
c001164d:	e8 1e 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011659:	89 1c 85 a0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2860],ebx
c0011660:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011664:	e9 7c ff ff ff       	jmp    c00115e5 <UnixFile::UnixFile(int)+0x125>
c0011669:	90                   	nop
c001166a:	83 c4 28             	add    esp,0x28
c001166d:	5b                   	pop    ebx
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::ReservedFilename(int)>:
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011677:	83 ec 08             	sub    esp,0x8
c001167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167e:	50                   	push   eax
c001167f:	e8 3c fe ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c001168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011690:	89 10                	mov    DWORD PTR [eax],edx
c0011692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001169a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001169d:	90                   	nop
c001169e:	83 c4 0c             	add    esp,0xc
c00116a1:	c3                   	ret    

c00116a2 <UnixFile::~UnixFile()>:
c00116a2:	83 ec 1c             	sub    esp,0x1c
c00116a5:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c00116aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ae:	89 10                	mov    DWORD PTR [eax],edx
c00116b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116b7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116bc:	7f 73                	jg     c0011731 <UnixFile::~UnixFile()+0x8f>
c00116be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116c6:	83 ec 0c             	sub    esp,0xc
c00116c9:	68 18 d8 02 c0       	push   0xc002d818
c00116ce:	e8 d1 65 01 00       	call   c0027ca4 <LinkedList<UnixFile>::getFirstElement()>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116da:	83 ec 0c             	sub    esp,0xc
c00116dd:	68 18 d8 02 c0       	push   0xc002d818
c00116e2:	e8 c5 65 01 00       	call   c0027cac <LinkedList<UnixFile>::removeFirst()>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116ee:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116f2:	74 40                	je     c0011734 <UnixFile::~UnixFile()+0x92>
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116fb:	68 18 d8 02 c0       	push   0xc002d818
c0011700:	e8 cb 64 01 00       	call   c0027bd0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170c:	8d 50 01             	lea    edx,[eax+0x1]
c001170f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011713:	3d 88 13 00 00       	cmp    eax,0x1388
c0011718:	0f 94 c0             	sete   al
c001171b:	84 c0                	test   al,al
c001171d:	74 a7                	je     c00116c6 <UnixFile::~UnixFile()+0x24>
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	68 ac 99 02 c0       	push   0xc00299ac
c0011727:	e8 f9 84 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	eb 95                	jmp    c00116c6 <UnixFile::~UnixFile()+0x24>
c0011731:	90                   	nop
c0011732:	eb 01                	jmp    c0011735 <UnixFile::~UnixFile()+0x93>
c0011734:	90                   	nop
c0011735:	90                   	nop
c0011736:	83 c4 1c             	add    esp,0x1c
c0011739:	c3                   	ret    

c001173a <UnixFile::~UnixFile()>:
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	83 ec 0c             	sub    esp,0xc
c0011740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011744:	e8 59 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	6a 0c                	push   0xc
c0011751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011755:	e8 b9 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	83 c4 0c             	add    esp,0xc
c0011760:	c3                   	ret    
c0011761:	90                   	nop

c0011762 <ReservedFilename::~ReservedFilename()>:
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 10                	mov    DWORD PTR [eax],edx
c0011770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	50                   	push   eax
c0011778:	e8 25 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	90                   	nop
c0011781:	83 c4 0c             	add    esp,0xc
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <ReservedFilename::~ReservedFilename()>:
c0011786:	83 ec 0c             	sub    esp,0xc
c0011789:	83 ec 0c             	sub    esp,0xc
c001178c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011790:	e8 cd ff ff ff       	call   c0011762 <ReservedFilename::~ReservedFilename()>
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	6a 0c                	push   0xc
c001179d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a1:	e8 6d 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	83 c4 0c             	add    esp,0xc
c00117ac:	c3                   	ret    

c00117ad <getFromFileDescriptor(int)>:
c00117ad:	53                   	push   ebx
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117bb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117c1:	7f 2c                	jg     c00117ef <getFromFileDescriptor(int)+0x42>
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	68 18 d8 02 c0       	push   0xc002d818
c00117cb:	e8 d4 64 01 00       	call   c0027ca4 <LinkedList<UnixFile>::getFirstElement()>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	85 c0                	test   eax,eax
c00117d5:	75 04                	jne    c00117db <getFromFileDescriptor(int)+0x2e>
c00117d7:	31 c0                	xor    eax,eax
c00117d9:	eb 6e                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c00117db:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117de:	74 69                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117e0:	52                   	push   edx
c00117e1:	52                   	push   edx
c00117e2:	50                   	push   eax
c00117e3:	68 18 d8 02 c0       	push   0xc002d818
c00117e8:	e8 61 65 01 00       	call   c0027d4e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117ed:	eb e1                	jmp    c00117d0 <getFromFileDescriptor(int)+0x23>
c00117ef:	a1 0c d8 02 c0       	mov    eax,ds:0xc002d80c
c00117f4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117fa:	74 4d                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117fc:	a1 10 d8 02 c0       	mov    eax,ds:0xc002d810
c0011801:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011807:	74 40                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011809:	a1 08 d8 02 c0       	mov    eax,ds:0xc002d808
c001180e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011814:	74 33                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011816:	a1 04 d8 02 c0       	mov    eax,ds:0xc002d804
c001181b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011821:	74 26                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011823:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011829:	83 f8 08             	cmp    eax,0x8
c001182c:	77 09                	ja     c0011837 <getFromFileDescriptor(int)+0x8a>
c001182e:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c0011835:	eb 12                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c0011837:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001183d:	83 fb 08             	cmp    ebx,0x8
c0011840:	77 95                	ja     c00117d7 <getFromFileDescriptor(int)+0x2a>
c0011842:	8b 04 9d a0 d7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2860]
c0011849:	83 c4 08             	add    esp,0x8
c001184c:	5b                   	pop    ebx
c001184d:	c3                   	ret    

c001184e <__static_initialization_and_destruction_0(int, int)>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011856:	75 34                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011858:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011860:	75 2a                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	68 18 d8 02 c0       	push   0xc002d818
c001186a:	e8 09 63 01 00       	call   c0027b78 <LinkedList<UnixFile>::LinkedList()>
c001186f:	83 c4 10             	add    esp,0x10
c0011872:	83 ec 04             	sub    esp,0x4
c0011875:	68 cc c5 02 c0       	push   0xc002c5cc
c001187a:	68 18 d8 02 c0       	push   0xc002d818
c001187f:	68 76 7b 02 c0       	push   0xc0027b76
c0011884:	e8 04 0f 00 00       	call   c001278d <__cxa_atexit>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	90                   	nop
c001188d:	83 c4 0c             	add    esp,0xc
c0011890:	c3                   	ret    

c0011891 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011891:	83 ec 0c             	sub    esp,0xc
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 ff ff 00 00       	push   0xffff
c001189c:	6a 01                	push   0x1
c001189e:	e8 ab ff ff ff       	call   c001184e <__static_initialization_and_destruction_0(int, int)>
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	83 c4 0c             	add    esp,0xc
c00118a9:	c3                   	ret    

c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118aa:	53                   	push   ebx
c00118ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118b3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118b9:	89 c8                	mov    eax,ecx
c00118bb:	d1 e8                	shr    eax,1
c00118bd:	03 05 48 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c648
c00118c3:	83 e1 01             	and    ecx,0x1
c00118c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00118c8:	75 09                	jne    c00118d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118ca:	83 e2 f0             	and    edx,0xfffffff0
c00118cd:	09 da                	or     edx,ebx
c00118cf:	88 10                	mov    BYTE PTR [eax],dl
c00118d1:	5b                   	pop    ebx
c00118d2:	c3                   	ret    
c00118d3:	c1 e3 04             	shl    ebx,0x4
c00118d6:	83 e2 0f             	and    edx,0xf
c00118d9:	09 da                	or     edx,ebx
c00118db:	88 10                	mov    BYTE PTR [eax],dl
c00118dd:	5b                   	pop    ebx
c00118de:	c3                   	ret    

c00118df <Virt::getPageState(unsigned long)>:
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	8b 0d 48 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c648
c00118e9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118ef:	89 d0                	mov    eax,edx
c00118f1:	d1 e8                	shr    eax,1
c00118f3:	83 e2 01             	and    edx,0x1
c00118f6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118f9:	75 04                	jne    c00118ff <Virt::getPageState(unsigned long)+0x20>
c00118fb:	83 e0 0f             	and    eax,0xf
c00118fe:	c3                   	ret    
c00118ff:	c0 e8 04             	shr    al,0x4
c0011902:	c3                   	ret    

c0011903 <Virt::allocateKernelVirtualPages(int)>:
c0011903:	55                   	push   ebp
c0011904:	31 ed                	xor    ebp,ebp
c0011906:	57                   	push   edi
c0011907:	56                   	push   esi
c0011908:	53                   	push   ebx
c0011909:	31 db                	xor    ebx,ebx
c001190b:	83 ec 1c             	sub    esp,0x1c
c001190e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011912:	8b 3d 44 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c644
c0011918:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001191d:	57                   	push   edi
c001191e:	e8 bc ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011923:	5a                   	pop    edx
c0011924:	84 c0                	test   al,al
c0011926:	75 3a                	jne    c0011962 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011928:	85 db                	test   ebx,ebx
c001192a:	75 02                	jne    c001192e <Virt::allocateKernelVirtualPages(int)+0x2b>
c001192c:	89 fd                	mov    ebp,edi
c001192e:	43                   	inc    ebx
c001192f:	39 f3                	cmp    ebx,esi
c0011931:	74 5a                	je     c001198d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011933:	47                   	inc    edi
c0011934:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001193a:	76 31                	jbe    c001196d <Virt::allocateKernelVirtualPages(int)+0x6a>
c001193c:	c7 05 44 c6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c644,0xc8000
c0011946:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001194b:	75 28                	jne    c0011975 <Virt::allocateKernelVirtualPages(int)+0x72>
c001194d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011952:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011957:	57                   	push   edi
c0011958:	e8 82 ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c001195d:	5a                   	pop    edx
c001195e:	84 c0                	test   al,al
c0011960:	74 c6                	je     c0011928 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011962:	31 db                	xor    ebx,ebx
c0011964:	47                   	inc    edi
c0011965:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001196b:	77 cf                	ja     c001193c <Virt::allocateKernelVirtualPages(int)+0x39>
c001196d:	89 3d 44 c6 02 c0    	mov    DWORD PTR ds:0xc002c644,edi
c0011973:	eb a8                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	68 04 9a 02 c0       	push   0xc0029a04
c001197d:	e8 a3 82 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011982:	8b 3d 44 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c644
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	eb 90                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001198d:	89 2d 44 c6 02 c0    	mov    DWORD PTR ds:0xc002c644,ebp
c0011993:	4b                   	dec    ebx
c0011994:	74 5f                	je     c00119f5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011996:	85 f6                	test   esi,esi
c0011998:	74 3d                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001199a:	89 e8                	mov    eax,ebp
c001199c:	31 db                	xor    ebx,ebx
c001199e:	8d 7e ff             	lea    edi,[esi-0x1]
c00119a1:	eb 14                	jmp    c00119b7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00119a3:	6a 01                	push   0x1
c00119a5:	43                   	inc    ebx
c00119a6:	50                   	push   eax
c00119a7:	e8 fe fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119ac:	58                   	pop    eax
c00119ad:	39 f3                	cmp    ebx,esi
c00119af:	5a                   	pop    edx
c00119b0:	74 25                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119b2:	a1 44 c6 02 c0       	mov    eax,ds:0xc002c644
c00119b7:	8d 50 01             	lea    edx,[eax+0x1]
c00119ba:	85 db                	test   ebx,ebx
c00119bc:	89 15 44 c6 02 c0    	mov    DWORD PTR ds:0xc002c644,edx
c00119c2:	74 20                	je     c00119e4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119c4:	39 df                	cmp    edi,ebx
c00119c6:	75 db                	jne    c00119a3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119c8:	6a 03                	push   0x3
c00119ca:	43                   	inc    ebx
c00119cb:	50                   	push   eax
c00119cc:	e8 d9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d1:	59                   	pop    ecx
c00119d2:	39 f3                	cmp    ebx,esi
c00119d4:	58                   	pop    eax
c00119d5:	75 db                	jne    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d7:	83 c4 1c             	add    esp,0x1c
c00119da:	89 e8                	mov    eax,ebp
c00119dc:	5b                   	pop    ebx
c00119dd:	c1 e0 0c             	shl    eax,0xc
c00119e0:	5e                   	pop    esi
c00119e1:	5f                   	pop    edi
c00119e2:	5d                   	pop    ebp
c00119e3:	c3                   	ret    
c00119e4:	6a 02                	push   0x2
c00119e6:	bb 01 00 00 00       	mov    ebx,0x1
c00119eb:	50                   	push   eax
c00119ec:	e8 b9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119f1:	58                   	pop    eax
c00119f2:	5a                   	pop    edx
c00119f3:	eb bd                	jmp    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119f5:	6a 04                	push   0x4
c00119f7:	8d 45 01             	lea    eax,[ebp+0x1]
c00119fa:	55                   	push   ebp
c00119fb:	a3 44 c6 02 c0       	mov    ds:0xc002c644,eax
c0011a00:	e8 a5 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a05:	59                   	pop    ecx
c0011a06:	89 e8                	mov    eax,ebp
c0011a08:	5b                   	pop    ebx
c0011a09:	c1 e0 0c             	shl    eax,0xc
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <Virt::virtualMemorySetup()>:
c0011a14:	53                   	push   ebx
c0011a15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	6a 0f                	push   0xf
c0011a1f:	53                   	push   ebx
c0011a20:	43                   	inc    ebx
c0011a21:	e8 84 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a26:	59                   	pop    ecx
c0011a27:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a2d:	58                   	pop    eax
c0011a2e:	75 ed                	jne    c0011a1d <Virt::virtualMemorySetup()+0x9>
c0011a30:	83 ec 08             	sub    esp,0x8
c0011a33:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a38:	68 00 00 00 c8       	push   0xc8000000
c0011a3d:	68 8b 9b 02 c0       	push   0xc0029b8b
c0011a42:	e8 ac 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a47:	58                   	pop    eax
c0011a48:	5a                   	pop    edx
c0011a49:	68 00 f0 ff ef       	push   0xeffff000
c0011a4e:	68 9f 9b 02 c0       	push   0xc0029b9f
c0011a53:	e8 9b 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	83 ec 08             	sub    esp,0x8
c0011a5e:	6a 00                	push   0x0
c0011a60:	53                   	push   ebx
c0011a61:	43                   	inc    ebx
c0011a62:	e8 43 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a70:	75 e9                	jne    c0011a5b <Virt::virtualMemorySetup()+0x47>
c0011a72:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a77:	83 ec 08             	sub    esp,0x8
c0011a7a:	6a 0f                	push   0xf
c0011a7c:	53                   	push   ebx
c0011a7d:	43                   	inc    ebx
c0011a7e:	e8 27 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a8c:	75 e9                	jne    c0011a77 <Virt::virtualMemorySetup()+0x63>
c0011a8e:	83 c4 08             	add    esp,0x8
c0011a91:	5b                   	pop    ebx
c0011a92:	c3                   	ret    

c0011a93 <Virt::getAKernelVAS()>:
c0011a93:	a1 24 d8 02 c0       	mov    eax,ds:0xc002d824
c0011a98:	c3                   	ret    

c0011a99 <Virt::setupPageSwapping(int)>:
c0011a99:	57                   	push   edi
c0011a9a:	56                   	push   esi
c0011a9b:	53                   	push   ebx
c0011a9c:	83 ec 1c             	sub    esp,0x1c
c0011a9f:	68 14 01 00 00       	push   0x114
c0011aa4:	e8 7b db ff ff       	call   c000f624 <malloc>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	89 c6                	mov    esi,eax
c0011aae:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c0011ab4:	68 b3 9b 02 c0       	push   0xc0029bb3
c0011ab9:	50                   	push   eax
c0011aba:	e8 8d 13 00 00       	call   c0012e4c <File::File(char const*, Process*)>
c0011abf:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ac2:	e8 61 15 00 00       	call   c0013028 <File::unlink()>
c0011ac7:	58                   	pop    eax
c0011ac8:	5a                   	pop    edx
c0011ac9:	6a 12                	push   0x12
c0011acb:	56                   	push   esi
c0011acc:	e8 df 13 00 00       	call   c0012eb0 <File::open(FileOpenMode)>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	85 c0                	test   eax,eax
c0011ad6:	0f 85 ca 00 00 00    	jne    c0011ba6 <Virt::setupPageSwapping(int)+0x10d>
c0011adc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ae0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ae8:	c1 e3 08             	shl    ebx,0x8
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	68 00 00 01 00       	push   0x10000
c0011af3:	e8 2c db ff ff       	call   c000f624 <malloc>
c0011af8:	83 c4 0c             	add    esp,0xc
c0011afb:	89 c7                	mov    edi,eax
c0011afd:	68 00 00 01 00       	push   0x10000
c0011b02:	6a 00                	push   0x0
c0011b04:	50                   	push   eax
c0011b05:	e8 ba eb fe ff       	call   c00006c4 <memset>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 db                	test   ebx,ebx
c0011b0f:	79 03                	jns    c0011b14 <Virt::setupPageSwapping(int)+0x7b>
c0011b11:	83 c3 0f             	add    ebx,0xf
c0011b14:	c1 fb 04             	sar    ebx,0x4
c0011b17:	4b                   	dec    ebx
c0011b18:	83 fb ff             	cmp    ebx,0xffffffff
c0011b1b:	74 4b                	je     c0011b68 <Virt::setupPageSwapping(int)+0xcf>
c0011b1d:	83 ec 0c             	sub    esp,0xc
c0011b20:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b22:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b26:	52                   	push   edx
c0011b27:	57                   	push   edi
c0011b28:	6a 00                	push   0x0
c0011b2a:	68 00 00 01 00       	push   0x10000
c0011b2f:	56                   	push   esi
c0011b30:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b33:	83 c4 20             	add    esp,0x20
c0011b36:	85 c0                	test   eax,eax
c0011b38:	75 59                	jne    c0011b93 <Virt::setupPageSwapping(int)+0xfa>
c0011b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b3e:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b43:	74 d2                	je     c0011b17 <Virt::setupPageSwapping(int)+0x7e>
c0011b45:	83 ec 08             	sub    esp,0x8
c0011b48:	4b                   	dec    ebx
c0011b49:	50                   	push   eax
c0011b4a:	68 06 9c 02 c0       	push   0xc0029c06
c0011b4f:	e8 9f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011b54:	c7 04 24 0f 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c0f
c0011b5b:	e8 c5 80 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	83 fb ff             	cmp    ebx,0xffffffff
c0011b66:	75 b5                	jne    c0011b1d <Virt::setupPageSwapping(int)+0x84>
c0011b68:	83 ec 0c             	sub    esp,0xc
c0011b6b:	56                   	push   esi
c0011b6c:	e8 9d 13 00 00       	call   c0012f0e <File::close()>
c0011b71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b74:	e8 cb da ff ff       	call   c000f644 <rfree>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	85 f6                	test   esi,esi
c0011b7e:	74 0c                	je     c0011b8c <Virt::setupPageSwapping(int)+0xf3>
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b85:	56                   	push   esi
c0011b86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	5b                   	pop    ebx
c0011b90:	5e                   	pop    esi
c0011b91:	5f                   	pop    edi
c0011b92:	c3                   	ret    
c0011b93:	83 ec 08             	sub    esp,0x8
c0011b96:	50                   	push   eax
c0011b97:	68 ee 9b 02 c0       	push   0xc0029bee
c0011b9c:	e8 52 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	eb 94                	jmp    c0011b3a <Virt::setupPageSwapping(int)+0xa1>
c0011ba6:	83 ec 08             	sub    esp,0x8
c0011ba9:	50                   	push   eax
c0011baa:	68 ca 9b 02 c0       	push   0xc0029bca
c0011baf:	e8 3f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011bb4:	c7 04 24 d3 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bd3
c0011bbb:	e8 65 80 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	e9 14 ff ff ff       	jmp    c0011adc <Virt::setupPageSwapping(int)+0x43>

c0011bc8 <VAS::VAS()>:
c0011bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd7:	a3 24 d8 02 c0       	mov    ds:0xc002d824,eax
c0011bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be0:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be8:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bef:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bf6:	90                   	nop
c0011bf7:	c3                   	ret    

c0011bf8 <VAS::VAS(VAS*)>:
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	68 24 9a 02 c0       	push   0xc0029a24
c0011c0e:	e8 12 80 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	90                   	nop
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	c3                   	ret    
c0011c1b:	90                   	nop

c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c20:	89 c2                	mov    edx,eax
c0011c22:	c1 e8 0a             	shr    eax,0xa
c0011c25:	c1 ea 16             	shr    edx,0x16
c0011c28:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c2d:	19 c9                	sbb    ecx,ecx
c0011c2f:	c1 e2 0c             	shl    edx,0xc
c0011c32:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c38:	25 fc 0f 00 00       	and    eax,0xffc
c0011c3d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c44:	01 d0                	add    eax,edx
c0011c46:	c3                   	ret    
c0011c47:	90                   	nop

c0011c48 <VAS::getPageTableEntry(unsigned long)>:
c0011c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c4c:	89 ca                	mov    edx,ecx
c0011c4e:	c1 e9 0a             	shr    ecx,0xa
c0011c51:	c1 ea 16             	shr    edx,0x16
c0011c54:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c5a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c60:	c1 e0 0c             	shl    eax,0xc
c0011c63:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c66:	c3                   	ret    

c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c67:	57                   	push   edi
c0011c68:	56                   	push   esi
c0011c69:	be 01 00 00 00       	mov    esi,0x1
c0011c6e:	53                   	push   ebx
c0011c6f:	83 ec 10             	sub    esp,0x10
c0011c72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c76:	c1 eb 0c             	shr    ebx,0xc
c0011c79:	eb 3f                	jmp    c0011cba <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c7b:	e8 13 fe ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011c80:	83 ec 08             	sub    esp,0x8
c0011c83:	57                   	push   edi
c0011c84:	50                   	push   eax
c0011c85:	e8 be ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c93:	f6 c4 04             	test   ah,0x4
c0011c96:	75 5f                	jne    c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c98:	80 fa 04             	cmp    dl,0x4
c0011c9b:	74 78                	je     c0011d15 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c9d:	80 fa 02             	cmp    dl,0x2
c0011ca0:	0f 84 88 00 00 00    	je     c0011d2e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ca6:	80 fa 03             	cmp    dl,0x3
c0011ca9:	0f 84 ad 00 00 00    	je     c0011d5c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011caf:	fe ca                	dec    dl
c0011cb1:	0f 84 92 00 00 00    	je     c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cb7:	43                   	inc    ebx
c0011cb8:	31 f6                	xor    esi,esi
c0011cba:	53                   	push   ebx
c0011cbb:	e8 1f fc ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011cc0:	5f                   	pop    edi
c0011cc1:	89 df                	mov    edi,ebx
c0011cc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cc7:	c1 e7 0c             	shl    edi,0xc
c0011cca:	84 c0                	test   al,al
c0011ccc:	75 ad                	jne    c0011c7b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 15 9c 02 c0       	push   0xc0029c15
c0011cd6:	e8 4a 7f 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011cdb:	e8 b3 fd ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011ce0:	5a                   	pop    edx
c0011ce1:	59                   	pop    ecx
c0011ce2:	57                   	push   edi
c0011ce3:	50                   	push   eax
c0011ce4:	e8 5f ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf2:	f6 c4 04             	test   ah,0x4
c0011cf5:	74 c0                	je     c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cf7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	50                   	push   eax
c0011d04:	e8 2e df ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d10:	80 fa 04             	cmp    dl,0x4
c0011d13:	75 88                	jne    c0011c9d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d15:	89 f0                	mov    eax,esi
c0011d17:	84 c0                	test   al,al
c0011d19:	75 47                	jne    c0011d62 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d1b:	c7 44 24 20 48 9a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029a48
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	e9 f7 7e 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c0011d2e:	89 f0                	mov    eax,esi
c0011d30:	84 c0                	test   al,al
c0011d32:	75 15                	jne    c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d34:	83 ec 0c             	sub    esp,0xc
c0011d37:	68 31 9c 02 c0       	push   0xc0029c31
c0011d3c:	e8 e4 7e 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	e9 6e ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	e8 56 fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	e9 5b ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d5c:	89 f0                	mov    eax,esi
c0011d5e:	84 c0                	test   al,al
c0011d60:	75 15                	jne    c0011d77 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	6a 00                	push   0x0
c0011d67:	53                   	push   ebx
c0011d68:	e8 3d fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	5f                   	pop    edi
c0011d76:	c3                   	ret    
c0011d77:	c7 44 24 20 4d 9c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029c4d
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	5b                   	pop    ebx
c0011d83:	5e                   	pop    esi
c0011d84:	5f                   	pop    edi
c0011d85:	e9 9b 7e 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>

c0011d8a <VAS::freeAllocatedPages(unsigned long)>:
c0011d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d92:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d96:	74 09                	je     c0011da1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d9c:	e9 c6 fe ff ff       	jmp    c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011da1:	c7 44 24 04 6c 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029a6c
c0011da9:	e9 45 0b 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>

c0011dae <VAS::virtualToPhysical(unsigned long)>:
c0011dae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db6:	e8 8d fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011dbb:	5a                   	pop    edx
c0011dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbe:	59                   	pop    ecx
c0011dbf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc4:	c3                   	ret    
c0011dc5:	90                   	nop

c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dc6:	55                   	push   ebp
c0011dc7:	57                   	push   edi
c0011dc8:	56                   	push   esi
c0011dc9:	53                   	push   ebx
c0011dca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dce:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dd6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dda:	85 db                	test   ebx,ebx
c0011ddc:	7e 22                	jle    c0011e00 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dde:	c1 e3 0c             	shl    ebx,0xc
c0011de1:	01 f3                	add    ebx,esi
c0011de3:	56                   	push   esi
c0011de4:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dea:	55                   	push   ebp
c0011deb:	e8 58 fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011df0:	5a                   	pop    edx
c0011df1:	59                   	pop    ecx
c0011df2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011df4:	21 f9                	and    ecx,edi
c0011df6:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011dfa:	39 f3                	cmp    ebx,esi
c0011dfc:	89 08                	mov    DWORD PTR [eax],ecx
c0011dfe:	75 e3                	jne    c0011de3 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	5d                   	pop    ebp
c0011e04:	c3                   	ret    
c0011e05:	90                   	nop

c0011e06 <VAS::setToWriteCombining(unsigned long, int)>:
c0011e06:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0011e0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e11:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e18:	75 01                	jne    c0011e1b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e1a:	c3                   	ret    
c0011e1b:	68 80 00 00 00       	push   0x80
c0011e20:	6a ff                	push   0xffffffff
c0011e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2e:	e8 93 ff ff ff       	call   c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e33:	83 c4 14             	add    esp,0x14
c0011e36:	c3                   	ret    
c0011e37:	90                   	nop

c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e38:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e41:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e48:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e4b:	19 c0                	sbb    eax,eax
c0011e4d:	83 ca 03             	or     edx,0x3
c0011e50:	83 e0 fc             	and    eax,0xfffffffc
c0011e53:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e5a:	0f 20 d8             	mov    eax,cr3
c0011e5d:	0f 22 d8             	mov    cr3,eax
c0011e60:	c3                   	ret    
c0011e61:	90                   	nop

c0011e62 <VAS::~VAS()>:
c0011e62:	83 ec 2c             	sub    esp,0x2c
c0011e65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6d:	e8 c4 b3 00 00       	call   c001d236 <lockScheduler()>
c0011e72:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e7c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e82:	83 ec 04             	sub    esp,0x4
c0011e85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e89:	6a 01                	push   0x1
c0011e8b:	50                   	push   eax
c0011e8c:	e8 a7 ff ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e9c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011ea4:	0f 8f d7 00 00 00    	jg     c0011f81 <VAS::~VAS()+0x11f>
c0011eaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb5:	c1 e2 02             	shl    edx,0x2
c0011eb8:	01 d0                	add    eax,edx
c0011eba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec4:	83 e0 01             	and    eax,0x1
c0011ec7:	0f 84 ab 00 00 00    	je     c0011f78 <VAS::~VAS()+0x116>
c0011ecd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011edd:	7f 75                	jg     c0011f54 <VAS::~VAS()+0xf2>
c0011edf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee3:	c1 e0 0a             	shl    eax,0xa
c0011ee6:	89 c2                	mov    edx,eax
c0011ee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eec:	01 d0                	add    eax,edx
c0011eee:	c1 e0 0c             	shl    eax,0xc
c0011ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011efa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011efc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011f05:	83 ec 04             	sub    esp,0x4
c0011f08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f0c:	6a 01                	push   0x1
c0011f0e:	50                   	push   eax
c0011f0f:	e8 08 fd ff ff       	call   c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f29:	25 01 04 00 00       	and    eax,0x401
c0011f2e:	3d 01 04 00 00       	cmp    eax,0x401
c0011f33:	75 19                	jne    c0011f4e <VAS::~VAS()+0xec>
c0011f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	50                   	push   eax
c0011f42:	e8 f0 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f52:	eb 81                	jmp    c0011ed5 <VAS::~VAS()+0x73>
c0011f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f58:	25 00 04 00 00       	and    eax,0x400
c0011f5d:	74 19                	je     c0011f78 <VAS::~VAS()+0x116>
c0011f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f68:	83 ec 0c             	sub    esp,0xc
c0011f6b:	50                   	push   eax
c0011f6c:	e8 c6 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f78:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f7c:	e9 1b ff ff ff       	jmp    c0011e9c <VAS::~VAS()+0x3a>
c0011f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f88:	83 ec 0c             	sub    esp,0xc
c0011f8b:	50                   	push   eax
c0011f8c:	e8 d6 fc ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	50                   	push   eax
c0011f9f:	e8 93 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011faf:	c1 e0 02             	shl    eax,0x2
c0011fb2:	83 ec 08             	sub    esp,0x8
c0011fb5:	50                   	push   eax
c0011fb6:	68 90 9a 02 c0       	push   0xc0029a90
c0011fbb:	e8 33 09 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	e8 70 b2 00 00       	call   c001d238 <unlockScheduler()>
c0011fc8:	90                   	nop
c0011fc9:	83 c4 2c             	add    esp,0x2c
c0011fcc:	c3                   	ret    
c0011fcd:	90                   	nop

c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fce:	55                   	push   ebp
c0011fcf:	57                   	push   edi
c0011fd0:	56                   	push   esi
c0011fd1:	53                   	push   ebx
c0011fd2:	83 ec 1c             	sub    esp,0x1c
c0011fd5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fdd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fe3:	77 08                	ja     c0011fed <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fe5:	0f 20 d8             	mov    eax,cr3
c0011fe8:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011feb:	75 47                	jne    c0012034 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff1:	09 d8                	or     eax,ebx
c0011ff3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ff8:	75 57                	jne    c0012051 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ffa:	89 de                	mov    esi,ebx
c0011ffc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fff:	c1 ee 16             	shr    esi,0x16
c0012002:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012009:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001200d:	74 54                	je     c0012063 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001200f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012013:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012019:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001201d:	c1 e6 0c             	shl    esi,0xc
c0012020:	c1 eb 0a             	shr    ebx,0xa
c0012023:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012029:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001202c:	83 c4 1c             	add    esp,0x1c
c001202f:	5b                   	pop    ebx
c0012030:	5e                   	pop    esi
c0012031:	5f                   	pop    edi
c0012032:	5d                   	pop    ebp
c0012033:	c3                   	ret    
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	68 b0 9a 02 c0       	push   0xc0029ab0
c001203c:	e8 b2 08 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012048:	09 d8                	or     eax,ebx
c001204a:	a9 ff 0f 00 00       	test   eax,0xfff
c001204f:	74 a9                	je     c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	68 18 9b 02 c0       	push   0xc0029b18
c0012059:	e8 c7 7b 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c001205e:	83 c4 10             	add    esp,0x10
c0012061:	eb 97                	jmp    c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012063:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012067:	e8 55 dc ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001206c:	89 c5                	mov    ebp,eax
c001206e:	e8 20 fa ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001207a:	6a 01                	push   0x1
c001207c:	e8 82 f8 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012081:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012088:	6a 01                	push   0x1
c001208a:	50                   	push   eax
c001208b:	55                   	push   ebp
c001208c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012092:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012096:	51                   	push   ecx
c0012097:	e8 26 02 00 00       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209c:	83 c4 1c             	add    esp,0x1c
c001209f:	68 00 10 00 00       	push   0x1000
c00120a4:	6a 00                	push   0x0
c00120a6:	50                   	push   eax
c00120a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120ab:	e8 14 e6 fe ff       	call   c00006c4 <memset>
c00120b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120b7:	e8 ab fb ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c00120bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120c9:	e9 41 ff ff ff       	jmp    c001200f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120ce <VAS::allocatePages(int, int)>:
c00120ce:	55                   	push   ebp
c00120cf:	57                   	push   edi
c00120d0:	56                   	push   esi
c00120d1:	53                   	push   ebx
c00120d2:	83 ec 1c             	sub    esp,0x1c
c00120d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120d9:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00120de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120ea:	83 e0 01             	and    eax,0x1
c00120ed:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120f5:	0f 85 cc 00 00 00    	jne    c00121c7 <VAS::allocatePages(int, int)+0xf9>
c00120fb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 84 a1 00 00 00    	je     c00121ab <VAS::allocatePages(int, int)+0xdd>
c001210a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001210e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012112:	c1 e6 0c             	shl    esi,0xc
c0012115:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012119:	85 c0                	test   eax,eax
c001211b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001211e:	7e 33                	jle    c0012153 <VAS::allocatePages(int, int)+0x85>
c0012120:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012124:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012128:	81 cd 00 04 00 00    	or     ebp,0x400
c001212e:	e8 8e db ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012133:	55                   	push   ebp
c0012134:	53                   	push   ebx
c0012135:	50                   	push   eax
c0012136:	57                   	push   edi
c0012137:	e8 92 fe ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012144:	74 03                	je     c0012149 <VAS::allocatePages(int, int)+0x7b>
c0012146:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012149:	81 c3 00 10 00 00    	add    ebx,0x1000
c001214f:	39 de                	cmp    esi,ebx
c0012151:	75 db                	jne    c001212e <VAS::allocatePages(int, int)+0x60>
c0012153:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012158:	75 12                	jne    c001216c <VAS::allocatePages(int, int)+0x9e>
c001215a:	0f 20 d8             	mov    eax,cr3
c001215d:	0f 22 d8             	mov    cr3,eax
c0012160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	5b                   	pop    ebx
c0012168:	5e                   	pop    esi
c0012169:	5f                   	pop    edi
c001216a:	5d                   	pop    ebp
c001216b:	c3                   	ret    
c001216c:	c1 ee 0a             	shr    esi,0xa
c001216f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012173:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012179:	c1 eb 0a             	shr    ebx,0xa
c001217c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012182:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012188:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001218e:	39 c3                	cmp    ebx,eax
c0012190:	77 ce                	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012192:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012195:	81 c3 00 10 00 00    	add    ebx,0x1000
c001219b:	39 d8                	cmp    eax,ebx
c001219d:	73 f3                	jae    c0012192 <VAS::allocatePages(int, int)+0xc4>
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	83 c4 1c             	add    esp,0x1c
c00121a6:	5b                   	pop    ebx
c00121a7:	5e                   	pop    esi
c00121a8:	5f                   	pop    edi
c00121a9:	5d                   	pop    ebp
c00121aa:	c3                   	ret    
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	68 3c 9b 02 c0       	push   0xc0029b3c
c00121b3:	e8 6d 7a 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c00121b8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	e9 43 ff ff ff       	jmp    c001210a <VAS::allocatePages(int, int)+0x3c>
c00121c7:	83 ec 0c             	sub    esp,0xc
c00121ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121ce:	e8 30 f7 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00121d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121df:	0f 87 9b 00 00 00    	ja     c0012280 <VAS::allocatePages(int, int)+0x1b2>
c00121e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e9:	85 d2                	test   edx,edx
c00121eb:	7e 3c                	jle    c0012229 <VAS::allocatePages(int, int)+0x15b>
c00121ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f9:	c1 e5 0c             	shl    ebp,0xc
c00121fc:	81 ce 00 04 00 00    	or     esi,0x400
c0012202:	01 dd                	add    ebp,ebx
c0012204:	e8 b8 da ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012209:	56                   	push   esi
c001220a:	53                   	push   ebx
c001220b:	50                   	push   eax
c001220c:	57                   	push   edi
c001220d:	e8 bc fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001221a:	74 03                	je     c001221f <VAS::allocatePages(int, int)+0x151>
c001221c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001221f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012225:	39 dd                	cmp    ebp,ebx
c0012227:	75 db                	jne    c0012204 <VAS::allocatePages(int, int)+0x136>
c0012229:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001222e:	0f 84 26 ff ff ff    	je     c001215a <VAS::allocatePages(int, int)+0x8c>
c0012234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223c:	89 d3                	mov    ebx,edx
c001223e:	c1 e0 0c             	shl    eax,0xc
c0012241:	c1 eb 0a             	shr    ebx,0xa
c0012244:	01 d0                	add    eax,edx
c0012246:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001224c:	c1 e8 0a             	shr    eax,0xa
c001224f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012255:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225a:	2d 00 00 40 00       	sub    eax,0x400000
c001225f:	39 c3                	cmp    ebx,eax
c0012261:	0f 87 f9 fe ff ff    	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012267:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001226a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012270:	39 d8                	cmp    eax,ebx
c0012272:	73 f3                	jae    c0012267 <VAS::allocatePages(int, int)+0x199>
c0012274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012278:	83 c4 1c             	add    esp,0x1c
c001227b:	5b                   	pop    ebx
c001227c:	5e                   	pop    esi
c001227d:	5f                   	pop    edi
c001227e:	5d                   	pop    ebp
c001227f:	c3                   	ret    
c0012280:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0012285:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001228b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012292:	0f 84 4d ff ff ff    	je     c00121e5 <VAS::allocatePages(int, int)+0x117>
c0012298:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00122a0:	e9 40 ff ff ff       	jmp    c00121e5 <VAS::allocatePages(int, int)+0x117>
c00122a5:	90                   	nop

c00122a6 <VAS::setCPUSpecific(unsigned long)>:
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	6a 05                	push   0x5
c00122ab:	68 00 00 40 c2       	push   0xc2400000
c00122b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b8:	e8 11 fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00122bd:	83 c4 1c             	add    esp,0x1c
c00122c0:	c3                   	ret    
c00122c1:	90                   	nop

c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122c2:	55                   	push   ebp
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	83 ec 1c             	sub    esp,0x1c
c00122c9:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00122ce:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122dc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122e2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122e6:	83 e0 01             	and    eax,0x1
c00122e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f1:	85 c0                	test   eax,eax
c00122f3:	7e 39                	jle    c001232e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f9:	89 f3                	mov    ebx,esi
c00122fb:	c1 e0 0c             	shl    eax,0xc
c00122fe:	01 f0                	add    eax,esi
c0012300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012304:	55                   	push   ebp
c0012305:	53                   	push   ebx
c0012306:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001230a:	29 f0                	sub    eax,esi
c001230c:	01 d8                	add    eax,ebx
c001230e:	50                   	push   eax
c001230f:	57                   	push   edi
c0012310:	e8 b9 fc ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001231d:	74 03                	je     c0012322 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001231f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012322:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012328:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001232c:	75 d6                	jne    c0012304 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001232e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012333:	75 10                	jne    c0012345 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012335:	0f 20 d8             	mov    eax,cr3
c0012338:	0f 22 d8             	mov    cr3,eax
c001233b:	83 c4 1c             	add    esp,0x1c
c001233e:	89 f0                	mov    eax,esi
c0012340:	5b                   	pop    ebx
c0012341:	5e                   	pop    esi
c0012342:	5f                   	pop    edi
c0012343:	5d                   	pop    ebp
c0012344:	c3                   	ret    
c0012345:	89 f3                	mov    ebx,esi
c0012347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001234b:	c1 eb 0a             	shr    ebx,0xa
c001234e:	c1 e0 0c             	shl    eax,0xc
c0012351:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012357:	01 f0                	add    eax,esi
c0012359:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001235f:	c1 e8 0a             	shr    eax,0xa
c0012362:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012367:	2d 00 00 40 00       	sub    eax,0x400000
c001236c:	39 c3                	cmp    ebx,eax
c001236e:	77 cb                	ja     c001233b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012370:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012373:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012379:	39 d8                	cmp    eax,ebx
c001237b:	73 f3                	jae    c0012370 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001237d:	83 c4 1c             	add    esp,0x1c
c0012380:	89 f0                	mov    eax,esi
c0012382:	5b                   	pop    ebx
c0012383:	5e                   	pop    esi
c0012384:	5f                   	pop    edi
c0012385:	5d                   	pop    ebp
c0012386:	c3                   	ret    
c0012387:	90                   	nop

c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012388:	55                   	push   ebp
c0012389:	57                   	push   edi
c001238a:	56                   	push   esi
c001238b:	53                   	push   ebx
c001238c:	83 ec 1c             	sub    esp,0x1c
c001238f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012393:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012397:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001239b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001239f:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a4:	75 4a                	jne    c00123f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00123a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 eb 16             	shr    ebx,0x16
c00123b0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123b7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123bb:	74 4d                	je     c001240a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123c1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123c5:	c1 e8 0a             	shr    eax,0xa
c00123c8:	80 fa 01             	cmp    dl,0x1
c00123cb:	19 d2                	sbb    edx,edx
c00123cd:	c1 e3 0c             	shl    ebx,0xc
c00123d0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123d4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123da:	25 fc 0f 00 00       	and    eax,0xffc
c00123df:	01 d8                	add    eax,ebx
c00123e1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123e8:	83 c4 1c             	add    esp,0x1c
c00123eb:	5b                   	pop    ebx
c00123ec:	5e                   	pop    esi
c00123ed:	5f                   	pop    edi
c00123ee:	5d                   	pop    ebp
c00123ef:	c3                   	ret    
c00123f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	68 68 9b 02 c0       	push   0xc0029b68
c00123fc:	e8 24 78 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012408:	eb 9c                	jmp    c00123a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001240a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240e:	e8 ae d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012413:	89 c5                	mov    ebp,eax
c0012415:	e8 79 f6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012421:	6a 01                	push   0x1
c0012423:	e8 db f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012428:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001242f:	6a 01                	push   0x1
c0012431:	50                   	push   eax
c0012432:	55                   	push   ebp
c0012433:	81 cd 07 04 00 00    	or     ebp,0x407
c0012439:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243d:	51                   	push   ecx
c001243e:	e8 7f fe ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012443:	83 c4 1c             	add    esp,0x1c
c0012446:	68 00 10 00 00       	push   0x1000
c001244b:	6a 00                	push   0x0
c001244d:	50                   	push   eax
c001244e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012452:	e8 6d e2 fe ff       	call   c00006c4 <memset>
c0012457:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245e:	e8 04 f8 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0012463:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001246c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012470:	e9 48 ff ff ff       	jmp    c00123bd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012475:	90                   	nop

c0012476 <VAS::VAS(bool)>:
c0012476:	53                   	push   ebx
c0012477:	83 ec 28             	sub    esp,0x28
c001247a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012486:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001248d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012491:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012495:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012498:	e8 24 d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001249d:	89 c2                	mov    edx,eax
c001249f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124a6:	e8 e8 f5 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00124ab:	89 c3                	mov    ebx,eax
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	6a 01                	push   0x1
c00124b2:	e8 4c f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	89 c2                	mov    edx,eax
c00124bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	6a 03                	push   0x3
c00124c8:	6a 01                	push   0x1
c00124ca:	52                   	push   edx
c00124cb:	50                   	push   eax
c00124cc:	53                   	push   ebx
c00124cd:	e8 f0 fd ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124d2:	83 c4 20             	add    esp,0x20
c00124d5:	89 c2                	mov    edx,eax
c00124d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124e6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124ee:	7f 1c                	jg     c001250c <VAS::VAS(bool)+0x96>
c00124f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124fb:	c1 e2 02             	shl    edx,0x2
c00124fe:	01 d0                	add    eax,edx
c0012500:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012506:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001250a:	eb da                	jmp    c00124e6 <VAS::VAS(bool)+0x70>
c001250c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012514:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001251c:	7f 7a                	jg     c0012598 <VAS::VAS(bool)+0x122>
c001251e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012522:	2d 00 02 00 00       	sub    eax,0x200
c0012527:	c1 e0 0c             	shl    eax,0xc
c001252a:	83 c8 03             	or     eax,0x3
c001252d:	89 c2                	mov    edx,eax
c001252f:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0012534:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012540:	83 e0 10             	and    eax,0x10
c0012543:	84 c0                	test   al,al
c0012545:	74 07                	je     c001254e <VAS::VAS(bool)+0xd8>
c0012547:	b8 00 01 00 00       	mov    eax,0x100
c001254c:	eb 05                	jmp    c0012553 <VAS::VAS(bool)+0xdd>
c001254e:	b8 00 00 00 00       	mov    eax,0x0
c0012553:	09 d0                	or     eax,edx
c0012555:	89 c1                	mov    ecx,eax
c0012557:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001255e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012562:	c1 e2 02             	shl    edx,0x2
c0012565:	01 d0                	add    eax,edx
c0012567:	89 ca                	mov    edx,ecx
c0012569:	89 10                	mov    DWORD PTR [eax],edx
c001256b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256f:	2d 40 03 00 00       	sub    eax,0x340
c0012574:	83 f8 7f             	cmp    eax,0x7f
c0012577:	77 16                	ja     c001258f <VAS::VAS(bool)+0x119>
c0012579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012580:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012584:	c1 e2 02             	shl    edx,0x2
c0012587:	01 d0                	add    eax,edx
c0012589:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001258f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012593:	e9 7c ff ff ff       	jmp    c0012514 <VAS::VAS(bool)+0x9e>
c0012598:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001259d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a9:	83 e0 10             	and    eax,0x10
c00125ac:	84 c0                	test   al,al
c00125ae:	74 07                	je     c00125b7 <VAS::VAS(bool)+0x141>
c00125b0:	b8 03 41 00 00       	mov    eax,0x4103
c00125b5:	eb 05                	jmp    c00125bc <VAS::VAS(bool)+0x146>
c00125b7:	b8 03 40 00 00       	mov    eax,0x4003
c00125bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125c3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125c9:	89 02                	mov    DWORD PTR [edx],eax
c00125cb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00125d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125dc:	83 ec 08             	sub    esp,0x8
c00125df:	50                   	push   eax
c00125e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125e4:	e8 bd fc ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f3:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00125f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125fe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012604:	83 e0 10             	and    eax,0x10
c0012607:	84 c0                	test   al,al
c0012609:	74 07                	je     c0012612 <VAS::VAS(bool)+0x19c>
c001260b:	b8 00 01 00 00       	mov    eax,0x100
c0012610:	eb 05                	jmp    c0012617 <VAS::VAS(bool)+0x1a1>
c0012612:	b8 00 00 00 00       	mov    eax,0x0
c0012617:	09 c2                	or     edx,eax
c0012619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001261d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012620:	05 fc 0f 00 00       	add    eax,0xffc
c0012625:	83 ca 03             	or     edx,0x3
c0012628:	89 10                	mov    DWORD PTR [eax],edx
c001262a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001262f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	50                   	push   eax
c0012639:	e8 c8 19 00 00       	call   c0014006 <Device::getName()>
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	83 ec 08             	sub    esp,0x8
c0012644:	68 67 9c 02 c0       	push   0xc0029c67
c0012649:	50                   	push   eax
c001264a:	e8 65 e1 fe ff       	call   c00007b4 <strcmp>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	85 c0                	test   eax,eax
c0012654:	0f 94 c0             	sete   al
c0012657:	84 c0                	test   al,al
c0012659:	74 70                	je     c00126cb <VAS::VAS(bool)+0x255>
c001265b:	e8 b9 ab 00 00       	call   c001d219 <disableIRQs()>
c0012660:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0012665:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266b:	05 7c 09 00 00       	add    eax,0x97c
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	50                   	push   eax
c0012674:	e8 27 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012681:	89 c3                	mov    ebx,eax
c0012683:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0012688:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001268e:	05 7c 09 00 00       	add    eax,0x97c
c0012693:	83 ec 0c             	sub    esp,0xc
c0012696:	50                   	push   eax
c0012697:	e8 04 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	83 ec 08             	sub    esp,0x8
c00126a2:	50                   	push   eax
c00126a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a7:	e8 9c f5 ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b6:	6a 11                	push   0x11
c00126b8:	53                   	push   ebx
c00126b9:	50                   	push   eax
c00126ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126be:	e8 0b f9 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	e8 5c ab 00 00       	call   c001d227 <enableIRQs()>
c00126cb:	90                   	nop
c00126cc:	83 c4 28             	add    esp,0x28
c00126cf:	5b                   	pop    ebx
c00126d0:	c3                   	ret    

c00126d1 <mapVASFirstTime>:
c00126d1:	55                   	push   ebp
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126e0:	4a                   	dec    edx
c00126e1:	0f 84 8e 00 00 00    	je     c0012775 <mapVASFirstTime+0xa4>
c00126e7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126ea:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126ed:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126f2:	c1 e5 15             	shl    ebp,0x15
c00126f5:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126fa:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012700:	29 eb                	sub    ebx,ebp
c0012702:	29 ee                	sub    esi,ebp
c0012704:	e8 b8 d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	68 03 04 00 00       	push   0x403
c0012711:	6a 01                	push   0x1
c0012713:	53                   	push   ebx
c0012714:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001271a:	50                   	push   eax
c001271b:	57                   	push   edi
c001271c:	e8 a1 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012721:	83 c4 20             	add    esp,0x20
c0012724:	39 f3                	cmp    ebx,esi
c0012726:	75 dc                	jne    c0012704 <mapVASFirstTime+0x33>
c0012728:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001272d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012732:	29 ee                	sub    esi,ebp
c0012734:	29 e8                	sub    eax,ebp
c0012736:	89 c5                	mov    ebp,eax
c0012738:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001273c:	19 db                	sbb    ebx,ebx
c001273e:	e8 7e d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012743:	83 e3 04             	and    ebx,0x4
c0012746:	83 ec 0c             	sub    esp,0xc
c0012749:	81 c3 03 04 00 00    	add    ebx,0x403
c001274f:	53                   	push   ebx
c0012750:	6a 01                	push   0x1
c0012752:	56                   	push   esi
c0012753:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012759:	50                   	push   eax
c001275a:	57                   	push   edi
c001275b:	e8 62 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012760:	83 c4 20             	add    esp,0x20
c0012763:	39 f5                	cmp    ebp,esi
c0012765:	75 d1                	jne    c0012738 <mapVASFirstTime+0x67>
c0012767:	0f 20 d8             	mov    eax,cr3
c001276a:	0f 22 d8             	mov    cr3,eax
c001276d:	83 c4 0c             	add    esp,0xc
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    
c0012775:	83 ec 0c             	sub    esp,0xc
c0012778:	68 75 9c 02 c0       	push   0xc0029c75
c001277d:	e8 71 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012782:	83 c4 10             	add    esp,0x10
c0012785:	83 c4 0c             	add    esp,0xc
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	5d                   	pop    ebp
c001278c:	c3                   	ret    

c001278d <__cxa_atexit>:
c001278d:	31 c0                	xor    eax,eax
c001278f:	c3                   	ret    

c0012790 <__cxa_finalize>:
c0012790:	c3                   	ret    

c0012791 <__stack_chk_fail>:
c0012791:	55                   	push   ebp
c0012792:	89 e5                	mov    ebp,esp
c0012794:	83 ec 14             	sub    esp,0x14
c0012797:	68 8e 9c 02 c0       	push   0xc0029c8e
c001279c:	e8 52 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127a1:	58                   	pop    eax
c00127a2:	5a                   	pop    edx
c00127a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127a6:	68 de 9c 02 c0       	push   0xc0029cde
c00127ab:	e8 43 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127b0:	59                   	pop    ecx
c00127b1:	58                   	pop    eax
c00127b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b8:	68 de 9c 02 c0       	push   0xc0029cde
c00127bd:	e8 31 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127c2:	5a                   	pop    edx
c00127c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127c6:	59                   	pop    ecx
c00127c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127cc:	68 de 9c 02 c0       	push   0xc0029cde
c00127d1:	e8 1d 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127d6:	5a                   	pop    edx
c00127d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127da:	59                   	pop    ecx
c00127db:	8b 00                	mov    eax,DWORD PTR [eax]
c00127dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127e2:	68 de 9c 02 c0       	push   0xc0029cde
c00127e7:	e8 07 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127ec:	c7 04 24 e6 9c 02 c0 	mov    DWORD PTR [esp],0xc0029ce6
c00127f3:	e8 2d 74 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	c9                   	leave  
c00127fc:	c3                   	ret    

c00127fd <__cxa_pure_virtual>:
c00127fd:	83 ec 18             	sub    esp,0x18
c0012800:	68 fe 9c 02 c0       	push   0xc0029cfe
c0012805:	e8 1b 74 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c001280a:	83 c4 1c             	add    esp,0x1c
c001280d:	c3                   	ret    

c001280e <operator new[](unsigned long)>:
c001280e:	e9 11 ce ff ff       	jmp    c000f624 <malloc>

c0012813 <operator delete(void*, unsigned long)>:
c0012813:	e9 2c ce ff ff       	jmp    c000f644 <rfree>

c0012818 <operator delete[](void*)>:
c0012818:	e9 27 ce ff ff       	jmp    c000f644 <rfree>

c001281d <operator delete[](void*, unsigned long)>:
c001281d:	e9 22 ce ff ff       	jmp    c000f644 <rfree>

c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012822:	57                   	push   edi
c0012823:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012828:	56                   	push   esi
c0012829:	be 14 9d 02 c0       	mov    esi,0xc0029d14
c001282e:	53                   	push   ebx
c001282f:	83 ec 40             	sub    esp,0x40
c0012832:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012836:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001283a:	fc                   	cld    
c001283b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001283d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012841:	83 f9 3e             	cmp    ecx,0x3e
c0012844:	7e 05                	jle    c001284b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012846:	b9 3e 00 00 00       	mov    ecx,0x3e
c001284b:	89 df                	mov    edi,ebx
c001284d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012851:	eb 02                	jmp    c0012855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012853:	89 c7                	mov    edi,eax
c0012855:	31 d2                	xor    edx,edx
c0012857:	46                   	inc    esi
c0012858:	89 f8                	mov    eax,edi
c001285a:	f7 f1                	div    ecx
c001285c:	39 cf                	cmp    edi,ecx
c001285e:	73 f3                	jae    c0012853 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012860:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012863:	eb 02                	jmp    c0012867 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012865:	89 c3                	mov    ebx,eax
c0012867:	31 d2                	xor    edx,edx
c0012869:	4e                   	dec    esi
c001286a:	89 d8                	mov    eax,ebx
c001286c:	f7 f1                	div    ecx
c001286e:	39 cb                	cmp    ebx,ecx
c0012870:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012874:	88 16                	mov    BYTE PTR [esi],dl
c0012876:	73 ed                	jae    c0012865 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012878:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001287c:	83 c4 40             	add    esp,0x40
c001287f:	5b                   	pop    ebx
c0012880:	5e                   	pop    esi
c0012881:	5f                   	pop    edi
c0012882:	c3                   	ret    

c0012883 <Dbg::logc(char)>:
c0012883:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012887:	ba fd 03 00 00       	mov    edx,0x3fd
c001288c:	ec                   	in     al,dx
c001288d:	a8 20                	test   al,0x20
c001288f:	74 fb                	je     c001288c <Dbg::logc(char)+0x9>
c0012891:	ba f8 03 00 00       	mov    edx,0x3f8
c0012896:	88 c8                	mov    al,cl
c0012898:	ee                   	out    dx,al
c0012899:	c3                   	ret    

c001289a <Dbg::logs(char*)>:
c001289a:	53                   	push   ebx
c001289b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001289f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a2:	84 c0                	test   al,al
c00128a4:	74 0f                	je     c00128b5 <Dbg::logs(char*)+0x1b>
c00128a6:	50                   	push   eax
c00128a7:	43                   	inc    ebx
c00128a8:	e8 d6 ff ff ff       	call   c0012883 <Dbg::logc(char)>
c00128ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128b0:	5a                   	pop    edx
c00128b1:	84 c0                	test   al,al
c00128b3:	75 f1                	jne    c00128a6 <Dbg::logs(char*)+0xc>
c00128b5:	5b                   	pop    ebx
c00128b6:	c3                   	ret    

c00128b7 <Dbg::logWriteInt(unsigned int)>:
c00128b7:	83 ec 10             	sub    esp,0x10
c00128ba:	6a 0a                	push   0xa
c00128bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c0:	50                   	push   eax
c00128c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c5:	e8 58 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ca:	50                   	push   eax
c00128cb:	e8 ca ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128d0:	83 c4 20             	add    esp,0x20
c00128d3:	c3                   	ret    

c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128d4:	83 ec 10             	sub    esp,0x10
c00128d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128df:	50                   	push   eax
c00128e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e4:	e8 39 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e9:	50                   	push   eax
c00128ea:	e8 ab ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128ef:	83 c4 20             	add    esp,0x20
c00128f2:	c3                   	ret    

c00128f3 <Dbg::kprintf(char const*, ...)>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012909:	84 c0                	test   al,al
c001290b:	74 4a                	je     c0012957 <Dbg::kprintf(char const*, ...)+0x64>
c001290d:	31 db                	xor    ebx,ebx
c001290f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012912:	3c 25                	cmp    al,0x25
c0012914:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012917:	0f 85 e4 00 00 00    	jne    c0012a01 <Dbg::kprintf(char const*, ...)+0x10e>
c001291d:	83 c3 02             	add    ebx,0x2
c0012920:	8a 07                	mov    al,BYTE PTR [edi]
c0012922:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012925:	83 e8 25             	sub    eax,0x25
c0012928:	3c 53                	cmp    al,0x53
c001292a:	0f 87 ba 00 00 00    	ja     c00129ea <Dbg::kprintf(char const*, ...)+0xf7>
c0012930:	0f b6 c0             	movzx  eax,al
c0012933:	ff 24 85 54 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd62ac]
c001293a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001293e:	89 c8                	mov    eax,ecx
c0012940:	83 c1 04             	add    ecx,0x4
c0012943:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012947:	ff 30                	push   DWORD PTR [eax]
c0012949:	e8 4c ff ff ff       	call   c001289a <Dbg::logs(char*)>
c001294e:	58                   	pop    eax
c001294f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012953:	84 c0                	test   al,al
c0012955:	75 b8                	jne    c001290f <Dbg::kprintf(char const*, ...)+0x1c>
c0012957:	83 c4 0c             	add    esp,0xc
c001295a:	5b                   	pop    ebx
c001295b:	5e                   	pop    esi
c001295c:	5f                   	pop    edi
c001295d:	5d                   	pop    ebp
c001295e:	c3                   	ret    
c001295f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012963:	89 d0                	mov    eax,edx
c0012965:	83 c2 04             	add    edx,0x4
c0012968:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001296c:	ff 30                	push   DWORD PTR [eax]
c001296e:	e8 44 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c0012973:	58                   	pop    eax
c0012974:	eb d9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012976:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001297a:	89 d0                	mov    eax,edx
c001297c:	83 c2 04             	add    edx,0x4
c001297f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012982:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012986:	50                   	push   eax
c0012987:	e8 f7 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c001298c:	58                   	pop    eax
c001298d:	eb c0                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c001298f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012993:	89 c8                	mov    eax,ecx
c0012995:	83 c1 04             	add    ecx,0x4
c0012998:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001299c:	ff 30                	push   DWORD PTR [eax]
c001299e:	e8 14 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c00129a3:	5f                   	pop    edi
c00129a4:	eb a9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129aa:	89 c8                	mov    eax,ecx
c00129ac:	83 c1 04             	add    ecx,0x4
c00129af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129b3:	6a 10                	push   0x10
c00129b5:	ff 30                	push   DWORD PTR [eax]
c00129b7:	e8 18 ff ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129bc:	59                   	pop    ecx
c00129bd:	5f                   	pop    edi
c00129be:	eb 8f                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129c4:	89 d0                	mov    eax,edx
c00129c6:	83 c2 08             	add    edx,0x8
c00129c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129cd:	6a 10                	push   0x10
c00129cf:	ff 30                	push   DWORD PTR [eax]
c00129d1:	e8 fe fe ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129d6:	58                   	pop    eax
c00129d7:	5a                   	pop    edx
c00129d8:	e9 72 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129dd:	6a 25                	push   0x25
c00129df:	e8 9f fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129e4:	58                   	pop    eax
c00129e5:	e9 65 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129ea:	6a 25                	push   0x25
c00129ec:	e8 92 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129f1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129f4:	50                   	push   eax
c00129f5:	e8 89 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129fa:	5a                   	pop    edx
c00129fb:	59                   	pop    ecx
c00129fc:	e9 4e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a01:	50                   	push   eax
c0012a02:	89 eb                	mov    ebx,ebp
c0012a04:	e8 7a fe ff ff       	call   c0012883 <Dbg::logc(char)>
c0012a09:	89 fd                	mov    ebp,edi
c0012a0b:	58                   	pop    eax
c0012a0c:	e9 3e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a11:	90                   	nop

c0012a12 <File::read(unsigned long long, void*, int*)>:
c0012a12:	53                   	push   ebx
c0012a13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a22:	3c 19                	cmp    al,0x19
c0012a24:	77 35                	ja     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a26:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c0012a2d:	85 c0                	test   eax,eax
c0012a2f:	74 2a                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a37:	85 c0                	test   eax,eax
c0012a39:	74 20                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3f:	74 21                	je     c0012a62 <File::read(unsigned long long, void*, int*)+0x50>
c0012a41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a47:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a55:	5b                   	pop    ebx
c0012a56:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a59:	ff e0                	jmp    eax
c0012a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a60:	eb 05                	jmp    c0012a67 <File::read(unsigned long long, void*, int*)+0x55>
c0012a62:	b8 05 00 00 00       	mov    eax,0x5
c0012a67:	5b                   	pop    ebx
c0012a68:	c3                   	ret    
c0012a69:	90                   	nop

c0012a6a <File::write(unsigned long long, void*, int*)>:
c0012a6a:	53                   	push   ebx
c0012a6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a7a:	3c 19                	cmp    al,0x19
c0012a7c:	77 35                	ja     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a7e:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c0012a85:	85 c0                	test   eax,eax
c0012a87:	74 2a                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	74 20                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a97:	74 21                	je     c0012aba <File::write(unsigned long long, void*, int*)+0x50>
c0012a99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a9f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aad:	5b                   	pop    ebx
c0012aae:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ab1:	ff e0                	jmp    eax
c0012ab3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab8:	eb 05                	jmp    c0012abf <File::write(unsigned long long, void*, int*)+0x55>
c0012aba:	b8 05 00 00 00       	mov    eax,0x5
c0012abf:	5b                   	pop    ebx
c0012ac0:	c3                   	ret    
c0012ac1:	90                   	nop

c0012ac2 <Directory::read(unsigned long long, void*, int*)>:
c0012ac2:	53                   	push   ebx
c0012ac3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012acb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ad2:	3c 19                	cmp    al,0x19
c0012ad4:	77 35                	ja     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad6:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c0012add:	85 c0                	test   eax,eax
c0012adf:	74 2a                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ae7:	85 c0                	test   eax,eax
c0012ae9:	74 20                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aef:	74 21                	je     c0012b12 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012af3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012af7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b05:	5b                   	pop    ebx
c0012b06:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b09:	ff e0                	jmp    eax
c0012b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b10:	eb 05                	jmp    c0012b17 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b12:	b8 05 00 00 00       	mov    eax,0x5
c0012b17:	5b                   	pop    ebx
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <Directory::write(unsigned long long, void*, int*)>:
c0012b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b25:	b8 0b 00 00 00       	mov    eax,0xb
c0012b2a:	80 fa 19             	cmp    dl,0x19
c0012b2d:	77 18                	ja     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b2f:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c0012b36:	85 d2                	test   edx,edx
c0012b38:	74 0d                	je     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b3a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b41:	19 c0                	sbb    eax,eax
c0012b43:	83 e0 0a             	and    eax,0xa
c0012b46:	40                   	inc    eax
c0012b47:	c3                   	ret    

c0012b48 <File::isAtty()>:
c0012b48:	31 c0                	xor    eax,eax
c0012b4a:	c3                   	ret    
c0012b4b:	90                   	nop

c0012b4c <Directory::isAtty()>:
c0012b4c:	31 c0                	xor    eax,eax
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b50:	b8 0a 00 00 00       	mov    eax,0xa
c0012b55:	c3                   	ret    

c0012b56 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b56:	b8 0a 00 00 00       	mov    eax,0xa
c0012b5b:	c3                   	ret    

c0012b5c <File::~File()>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0012b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b68:	89 10                	mov    DWORD PTR [eax],edx
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	83 ec 0c             	sub    esp,0xc
c0012b71:	50                   	push   eax
c0012b72:	e8 2b eb ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	90                   	nop
c0012b7b:	83 c4 0c             	add    esp,0xc
c0012b7e:	c3                   	ret    
c0012b7f:	90                   	nop

c0012b80 <File::~File()>:
c0012b80:	83 ec 0c             	sub    esp,0xc
c0012b83:	83 ec 0c             	sub    esp,0xc
c0012b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8a:	e8 cd ff ff ff       	call   c0012b5c <File::~File()>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	83 ec 08             	sub    esp,0x8
c0012b95:	68 14 01 00 00       	push   0x114
c0012b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9e:	e8 70 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 c4 0c             	add    esp,0xc
c0012ba9:	c3                   	ret    

c0012baa <Directory::~Directory()>:
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	ba 2c 9f 02 c0       	mov    edx,0xc0029f2c
c0012bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb6:	89 10                	mov    DWORD PTR [eax],edx
c0012bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	50                   	push   eax
c0012bc0:	e8 dd ea ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	90                   	nop
c0012bc9:	83 c4 0c             	add    esp,0xc
c0012bcc:	c3                   	ret    
c0012bcd:	90                   	nop

c0012bce <Directory::~Directory()>:
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd8:	e8 cd ff ff ff       	call   c0012baa <Directory::~Directory()>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	83 ec 08             	sub    esp,0x8
c0012be3:	68 14 01 00 00       	push   0x114
c0012be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bec:	e8 22 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	c3                   	ret    

c0012bf8 <Filesystem::Filesystem()>:
c0012bf8:	ba ac 9e 02 c0       	mov    edx,0xc0029eac
c0012bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c01:	89 10                	mov    DWORD PTR [eax],edx
c0012c03:	8b 15 28 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d828
c0012c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c14:	a3 28 d8 02 c0       	mov    ds:0xc002d828,eax
c0012c19:	90                   	nop
c0012c1a:	c3                   	ret    
c0012c1b:	90                   	nop

c0012c1c <Filesystem::~Filesystem()>:
c0012c1c:	ba ac 9e 02 c0       	mov    edx,0xc0029eac
c0012c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c25:	89 10                	mov    DWORD PTR [eax],edx
c0012c27:	90                   	nop
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <Filesystem::~Filesystem()>:
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c31:	e8 e6 ff ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0012c36:	83 c4 04             	add    esp,0x4
c0012c39:	83 ec 08             	sub    esp,0x8
c0012c3c:	6a 08                	push   0x8
c0012c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c42:	e8 cc fb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	83 c4 0c             	add    esp,0xc
c0012c4d:	c3                   	ret    

c0012c4e <Fs::getcwd(Process*, char*, int)>:
c0012c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c52:	31 c0                	xor    eax,eax
c0012c54:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c57:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c5b:	7d 15                	jge    c0012c72 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c61:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c68:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c6b:	84 c9                	test   cl,cl
c0012c6d:	74 06                	je     c0012c75 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c6f:	40                   	inc    eax
c0012c70:	eb e2                	jmp    c0012c54 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c72:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c75:	31 c0                	xor    eax,eax
c0012c77:	c3                   	ret    

c0012c78 <Fs::initVFS()>:
c0012c78:	83 ec 18             	sub    esp,0x18
c0012c7b:	6a 08                	push   0x8
c0012c7d:	e8 a2 c9 ff ff       	call   c000f624 <malloc>
c0012c82:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c85:	e8 20 d7 00 00       	call   c00203aa <FAT::FAT()>
c0012c8a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c91:	e8 8e c9 ff ff       	call   c000f624 <malloc>
c0012c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c99:	e8 64 e9 00 00       	call   c0021602 <ISO9660::ISO9660()>
c0012c9e:	83 c4 1c             	add    esp,0x1c
c0012ca1:	c3                   	ret    

c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ca2:	55                   	push   ebp
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	81 ec 10 04 00 00    	sub    esp,0x410
c0012cac:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cb3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cba:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cc1:	68 00 04 00 00       	push   0x400
c0012cc6:	6a 00                	push   0x0
c0012cc8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ccc:	56                   	push   esi
c0012ccd:	e8 f2 d9 fe ff       	call   c00006c4 <memset>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd9:	75 0b                	jne    c0012ce6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cdb:	50                   	push   eax
c0012cdc:	50                   	push   eax
c0012cdd:	57                   	push   edi
c0012cde:	56                   	push   esi
c0012cdf:	e8 7f da fe ff       	call   c0000763 <strcpy>
c0012ce4:	eb 41                	jmp    c0012d27 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ce6:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce8:	3c 5c                	cmp    al,0x5c
c0012cea:	74 04                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cec:	3c 2f                	cmp    al,0x2f
c0012cee:	75 18                	jne    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cf0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cf3:	3c 60                	cmp    al,0x60
c0012cf5:	7e 03                	jle    c0012cfa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cf7:	83 e8 20             	sub    eax,0x20
c0012cfa:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d04:	50                   	push   eax
c0012d05:	50                   	push   eax
c0012d06:	eb 18                	jmp    c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d08:	50                   	push   eax
c0012d09:	50                   	push   eax
c0012d0a:	55                   	push   ebp
c0012d0b:	56                   	push   esi
c0012d0c:	e8 52 da fe ff       	call   c0000763 <strcpy>
c0012d11:	5a                   	pop    edx
c0012d12:	59                   	pop    ecx
c0012d13:	68 54 b4 02 c0       	push   0xc002b454
c0012d18:	56                   	push   esi
c0012d19:	e8 fc da fe ff       	call   c000081a <strcat>
c0012d1e:	5d                   	pop    ebp
c0012d1f:	58                   	pop    eax
c0012d20:	57                   	push   edi
c0012d21:	56                   	push   esi
c0012d22:	e8 f3 da fe ff       	call   c000081a <strcat>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d2d:	3c 60                	cmp    al,0x60
c0012d2f:	7e 03                	jle    c0012d34 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d31:	83 e8 20             	sub    eax,0x20
c0012d34:	88 04 24             	mov    BYTE PTR [esp],al
c0012d37:	88 03                	mov    BYTE PTR [ebx],al
c0012d39:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d40:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d46:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d4a:	bf 03 00 00 00       	mov    edi,0x3
c0012d4f:	b8 03 00 00 00       	mov    eax,0x3
c0012d54:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d57:	84 d2                	test   dl,dl
c0012d59:	0f 84 91 00 00 00    	je     c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d62:	80 fa 5c             	cmp    dl,0x5c
c0012d65:	74 05                	je     c0012d6c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d67:	80 fa 2f             	cmp    dl,0x2f
c0012d6a:	75 12                	jne    c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6c:	89 c5                	mov    ebp,eax
c0012d6e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d73:	74 09                	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d75:	40                   	inc    eax
c0012d76:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d7a:	89 cf                	mov    edi,ecx
c0012d7c:	eb d6                	jmp    c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d7e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d83:	75 5b                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d85:	80 fa 2e             	cmp    dl,0x2e
c0012d88:	75 56                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d8a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d8e:	74 19                	je     c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d90:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d95:	74 53                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d97:	89 f9                	mov    ecx,edi
c0012d99:	41                   	inc    ecx
c0012d9a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9d:	80 fa 2f             	cmp    dl,0x2f
c0012da0:	74 f7                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da2:	80 fa 5c             	cmp    dl,0x5c
c0012da5:	74 f2                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da7:	eb d1                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dae:	74 3a                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012db0:	83 f8 03             	cmp    eax,0x3
c0012db3:	74 c5                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db5:	41                   	inc    ecx
c0012db6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db9:	80 fa 2f             	cmp    dl,0x2f
c0012dbc:	74 f7                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbe:	80 fa 5c             	cmp    dl,0x5c
c0012dc1:	74 f2                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc3:	48                   	dec    eax
c0012dc4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc8:	75 06                	jne    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dce:	eb f3                	jmp    c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dd0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd4:	74 07                	je     c0012ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dd6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dda:	48                   	dec    eax
c0012ddb:	eb f3                	jmp    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ddd:	40                   	inc    eax
c0012dde:	eb 9a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de0:	80 fa 2f             	cmp    dl,0x2f
c0012de3:	74 95                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de5:	80 fa 5c             	cmp    dl,0x5c
c0012de8:	74 90                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dea:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ded:	40                   	inc    eax
c0012dee:	eb 8a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	53                   	push   ebx
c0012df8:	e8 e4 d8 fe ff       	call   c00006e1 <strlen>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e05:	75 26                	jne    c0012e2d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	53                   	push   ebx
c0012e0b:	e8 d1 d8 fe ff       	call   c00006e1 <strlen>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e18:	74 26                	je     c0012e40 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	53                   	push   ebx
c0012e1e:	e8 be d8 fe ff       	call   c00006e1 <strlen>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e2b:	eb c7                	jmp    c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e2d:	83 ec 0c             	sub    esp,0xc
c0012e30:	53                   	push   ebx
c0012e31:	e8 ab d8 fe ff       	call   c00006e1 <strlen>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3e:	74 c7                	je     c0012e07 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e40:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e46:	5b                   	pop    ebx
c0012e47:	5e                   	pop    esi
c0012e48:	5f                   	pop    edi
c0012e49:	5d                   	pop    ebp
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <File::File(char const*, Process*)>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e53:	83 ec 08             	sub    esp,0x8
c0012e56:	6a 00                	push   0x0
c0012e58:	50                   	push   eax
c0012e59:	e8 62 e6 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0012e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6a:	89 10                	mov    DWORD PTR [eax],edx
c0012e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e70:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7a:	83 c0 0d             	add    eax,0xd
c0012e7d:	83 ec 04             	sub    esp,0x4
c0012e80:	52                   	push   edx
c0012e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e85:	50                   	push   eax
c0012e86:	e8 17 fe ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e92:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e95:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012eaa:	90                   	nop
c0012eab:	83 c4 0c             	add    esp,0xc
c0012eae:	c3                   	ret    
c0012eaf:	90                   	nop

c0012eb0 <File::open(FileOpenMode)>:
c0012eb0:	53                   	push   ebx
c0012eb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ebd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ec4:	80 fa 19             	cmp    dl,0x19
c0012ec7:	77 40                	ja     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ec9:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c0012ed0:	85 d2                	test   edx,edx
c0012ed2:	74 35                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ed4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eda:	85 d2                	test   edx,edx
c0012edc:	74 2b                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ede:	b8 06 00 00 00       	mov    eax,0x6
c0012ee3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ee7:	75 20                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012ee9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eeb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ef5:	51                   	push   ecx
c0012ef6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef9:	51                   	push   ecx
c0012efa:	52                   	push   edx
c0012efb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	85 c0                	test   eax,eax
c0012f03:	75 04                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012f05:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f09:	83 c4 08             	add    esp,0x8
c0012f0c:	5b                   	pop    ebx
c0012f0d:	c3                   	ret    

c0012f0e <File::close()>:
c0012f0e:	53                   	push   ebx
c0012f0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f14:	83 ec 08             	sub    esp,0x8
c0012f17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f1b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f22:	80 fa 19             	cmp    dl,0x19
c0012f25:	77 41                	ja     c0012f68 <File::close()+0x5a>
c0012f27:	8b 1c 95 c0 dc 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2340]
c0012f2e:	85 db                	test   ebx,ebx
c0012f30:	74 36                	je     c0012f68 <File::close()+0x5a>
c0012f32:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f39:	74 2d                	je     c0012f68 <File::close()+0x5a>
c0012f3b:	b8 05 00 00 00       	mov    eax,0x5
c0012f40:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f44:	74 22                	je     c0012f68 <File::close()+0x5a>
c0012f46:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f4a:	8b 04 95 c0 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2340]
c0012f51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f57:	53                   	push   ebx
c0012f58:	53                   	push   ebx
c0012f59:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f5b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f61:	50                   	push   eax
c0012f62:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	83 c4 08             	add    esp,0x8
c0012f6b:	5b                   	pop    ebx
c0012f6c:	c3                   	ret    
c0012f6d:	90                   	nop

c0012f6e <File::seek(unsigned long long)>:
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	b8 0b 00 00 00       	mov    eax,0xb
c0012f75:	51                   	push   ecx
c0012f76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f7e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f89:	80 fa 19             	cmp    dl,0x19
c0012f8c:	77 31                	ja     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f8e:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c0012f95:	85 d2                	test   edx,edx
c0012f97:	74 26                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f99:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f9f:	85 d2                	test   edx,edx
c0012fa1:	74 1c                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fa3:	b8 05 00 00 00       	mov    eax,0x5
c0012fa8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fac:	74 11                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fae:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fb0:	53                   	push   ebx
c0012fb1:	51                   	push   ecx
c0012fb2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb8:	52                   	push   edx
c0012fb9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	5a                   	pop    edx
c0012fc0:	5b                   	pop    ebx
c0012fc1:	5e                   	pop    esi
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <File::tell(unsigned long long*)>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fd0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fd7:	80 fa 19             	cmp    dl,0x19
c0012fda:	77 34                	ja     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fdc:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c0012fe3:	85 d2                	test   edx,edx
c0012fe5:	74 29                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fe7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fed:	85 d2                	test   edx,edx
c0012fef:	74 1f                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ff1:	b8 05 00 00 00       	mov    eax,0x5
c0012ff6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ffa:	74 14                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ffc:	50                   	push   eax
c0012ffd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013003:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013009:	52                   	push   edx
c001300a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	83 c4 0c             	add    esp,0xc
c0013013:	c3                   	ret    

c0013014 <File::rewind()>:
c0013014:	83 ec 10             	sub    esp,0x10
c0013017:	6a 00                	push   0x0
c0013019:	6a 00                	push   0x0
c001301b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301f:	e8 4a ff ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c0013024:	83 c4 1c             	add    esp,0x1c
c0013027:	c3                   	ret    

c0013028 <File::unlink()>:
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	b8 0b 00 00 00       	mov    eax,0xb
c0013030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013034:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001303b:	80 f9 19             	cmp    cl,0x19
c001303e:	77 2f                	ja     c001306f <File::unlink()+0x47>
c0013040:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0013047:	85 c9                	test   ecx,ecx
c0013049:	74 24                	je     c001306f <File::unlink()+0x47>
c001304b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013051:	85 c9                	test   ecx,ecx
c0013053:	74 1a                	je     c001306f <File::unlink()+0x47>
c0013055:	b8 06 00 00 00       	mov    eax,0x6
c001305a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305e:	75 0f                	jne    c001306f <File::unlink()+0x47>
c0013060:	83 c2 0d             	add    edx,0xd
c0013063:	50                   	push   eax
c0013064:	50                   	push   eax
c0013065:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013067:	52                   	push   edx
c0013068:	51                   	push   ecx
c0013069:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	83 c4 0c             	add    esp,0xc
c0013072:	c3                   	ret    
c0013073:	90                   	nop

c0013074 <File::rename(char const*)>:
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	b8 0b 00 00 00       	mov    eax,0xb
c001307c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013080:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013087:	80 f9 19             	cmp    cl,0x19
c001308a:	77 32                	ja     c00130be <File::rename(char const*)+0x4a>
c001308c:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0013093:	85 c9                	test   ecx,ecx
c0013095:	74 27                	je     c00130be <File::rename(char const*)+0x4a>
c0013097:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 1d                	je     c00130be <File::rename(char const*)+0x4a>
c00130a1:	b8 06 00 00 00       	mov    eax,0x6
c00130a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130aa:	75 12                	jne    c00130be <File::rename(char const*)+0x4a>
c00130ac:	83 c2 0d             	add    edx,0xd
c00130af:	50                   	push   eax
c00130b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130b6:	52                   	push   edx
c00130b7:	51                   	push   ecx
c00130b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	83 c4 0c             	add    esp,0xc
c00130c1:	c3                   	ret    

c00130c2 <File::chfatattr(unsigned char, unsigned char)>:
c00130c2:	57                   	push   edi
c00130c3:	b8 0b 00 00 00       	mov    eax,0xb
c00130c8:	56                   	push   esi
c00130c9:	53                   	push   ebx
c00130ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130dd:	80 f9 19             	cmp    cl,0x19
c00130e0:	77 37                	ja     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e2:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c00130e9:	85 c9                	test   ecx,ecx
c00130eb:	74 2c                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f3:	85 c9                	test   ecx,ecx
c00130f5:	74 22                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f7:	b8 06 00 00 00       	mov    eax,0x6
c00130fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013100:	75 17                	jne    c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013102:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013104:	89 f0                	mov    eax,esi
c0013106:	83 c2 0d             	add    edx,0xd
c0013109:	0f b6 f0             	movzx  esi,al
c001310c:	0f b6 db             	movzx  ebx,bl
c001310f:	56                   	push   esi
c0013110:	53                   	push   ebx
c0013111:	52                   	push   edx
c0013112:	51                   	push   ecx
c0013113:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013116:	83 c4 10             	add    esp,0x10
c0013119:	5b                   	pop    ebx
c001311a:	5e                   	pop    esi
c001311b:	5f                   	pop    edi
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <File::exists()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	31 c0                	xor    eax,eax
c0013123:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013127:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001312e:	80 f9 19             	cmp    cl,0x19
c0013131:	77 24                	ja     c0013157 <File::exists()+0x39>
c0013133:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c001313a:	85 c9                	test   ecx,ecx
c001313c:	74 19                	je     c0013157 <File::exists()+0x39>
c001313e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013144:	85 c9                	test   ecx,ecx
c0013146:	74 0f                	je     c0013157 <File::exists()+0x39>
c0013148:	83 c2 0d             	add    edx,0xd
c001314b:	50                   	push   eax
c001314c:	50                   	push   eax
c001314d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001314f:	52                   	push   edx
c0013150:	51                   	push   ecx
c0013151:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	83 c4 0c             	add    esp,0xc
c001315a:	c3                   	ret    
c001315b:	90                   	nop

c001315c <File::stat(unsigned long long*, bool*)>:
c001315c:	56                   	push   esi
c001315d:	53                   	push   ebx
c001315e:	50                   	push   eax
c001315f:	b8 0b 00 00 00       	mov    eax,0xb
c0013164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013168:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001316c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013173:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013177:	80 f9 19             	cmp    cl,0x19
c001317a:	77 3d                	ja     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c001317c:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 32                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013187:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318d:	85 c9                	test   ecx,ecx
c001318f:	74 28                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013191:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013197:	74 13                	je     c00131ac <File::stat(unsigned long long*, bool*)+0x50>
c0013199:	83 ec 04             	sub    esp,0x4
c001319c:	56                   	push   esi
c001319d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131a3:	51                   	push   ecx
c00131a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131aa:	eb 0a                	jmp    c00131b6 <File::stat(unsigned long long*, bool*)+0x5a>
c00131ac:	53                   	push   ebx
c00131ad:	83 c2 0d             	add    edx,0xd
c00131b0:	56                   	push   esi
c00131b1:	52                   	push   edx
c00131b2:	51                   	push   ecx
c00131b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	5a                   	pop    edx
c00131ba:	5b                   	pop    ebx
c00131bb:	5e                   	pop    esi
c00131bc:	c3                   	ret    

c00131bd <Fs::setcwd(Process*, char*)>:
c00131bd:	55                   	push   ebp
c00131be:	57                   	push   edi
c00131bf:	56                   	push   esi
c00131c0:	53                   	push   ebx
c00131c1:	81 ec 20 02 00 00    	sub    esp,0x220
c00131c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131d4:	57                   	push   edi
c00131d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131e0:	56                   	push   esi
c00131e1:	e8 bc fa ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e9:	e8 f3 d4 fe ff       	call   c00006e1 <strlen>
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	83 f8 02             	cmp    eax,0x2
c00131f4:	77 17                	ja     c001320d <Fs::setcwd(Process*, char*)+0x50>
c00131f6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131fb:	83 e8 41             	sub    eax,0x41
c00131fe:	83 f8 19             	cmp    eax,0x19
c0013201:	76 24                	jbe    c0013227 <Fs::setcwd(Process*, char*)+0x6a>
c0013203:	b8 03 00 00 00       	mov    eax,0x3
c0013208:	e9 e0 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	56                   	push   esi
c0013211:	e8 cb d4 fe ff       	call   c00006e1 <strlen>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	83 f8 03             	cmp    eax,0x3
c001321c:	75 34                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c001321e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013223:	75 2d                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c0013225:	eb cf                	jmp    c00131f6 <Fs::setcwd(Process*, char*)+0x39>
c0013227:	8b 14 85 c0 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2340]
c001322e:	b8 05 00 00 00       	mov    eax,0x5
c0013233:	85 d2                	test   edx,edx
c0013235:	0f 84 b2 00 00 00    	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001323b:	b8 06 00 00 00       	mov    eax,0x6
c0013240:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013247:	0f 85 92 00 00 00    	jne    c00132df <Fs::setcwd(Process*, char*)+0x122>
c001324d:	e9 9b 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	68 14 01 00 00       	push   0x114
c001325a:	e8 c5 c3 ff ff       	call   c000f624 <malloc>
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	89 c3                	mov    ebx,eax
c0013264:	55                   	push   ebp
c0013265:	56                   	push   esi
c0013266:	50                   	push   eax
c0013267:	e8 e0 fb ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001326c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013271:	83 c4 0c             	add    esp,0xc
c0013274:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013278:	50                   	push   eax
c0013279:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327d:	50                   	push   eax
c001327e:	53                   	push   ebx
c001327f:	e8 d8 fe ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	83 f8 02             	cmp    eax,0x2
c001328a:	74 04                	je     c0013290 <Fs::setcwd(Process*, char*)+0xd3>
c001328c:	85 c0                	test   eax,eax
c001328e:	74 1c                	je     c00132ac <Fs::setcwd(Process*, char*)+0xef>
c0013290:	b8 01 00 00 00       	mov    eax,0x1
c0013295:	85 db                	test   ebx,ebx
c0013297:	74 54                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013299:	83 ec 0c             	sub    esp,0xc
c001329c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329e:	53                   	push   ebx
c001329f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a2:	83 c4 10             	add    esp,0x10
c00132a5:	b8 01 00 00 00       	mov    eax,0x1
c00132aa:	eb 41                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132ac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132b1:	75 1c                	jne    c00132cf <Fs::setcwd(Process*, char*)+0x112>
c00132b3:	b8 02 00 00 00       	mov    eax,0x2
c00132b8:	85 db                	test   ebx,ebx
c00132ba:	74 31                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132c1:	53                   	push   ebx
c00132c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	b8 02 00 00 00       	mov    eax,0x2
c00132cd:	eb 1e                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132cf:	85 db                	test   ebx,ebx
c00132d1:	74 0c                	je     c00132df <Fs::setcwd(Process*, char*)+0x122>
c00132d3:	83 ec 0c             	sub    esp,0xc
c00132d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d8:	53                   	push   ebx
c00132d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	50                   	push   eax
c00132e0:	50                   	push   eax
c00132e1:	56                   	push   esi
c00132e2:	57                   	push   edi
c00132e3:	e8 7b d4 fe ff       	call   c0000763 <strcpy>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	31 c0                	xor    eax,eax
c00132ed:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132f3:	5b                   	pop    ebx
c00132f4:	5e                   	pop    esi
c00132f5:	5f                   	pop    edi
c00132f6:	5d                   	pop    ebp
c00132f7:	c3                   	ret    

c00132f8 <Directory::Directory(char const*, Process*)>:
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ff:	83 ec 08             	sub    esp,0x8
c0013302:	6a 00                	push   0x0
c0013304:	50                   	push   eax
c0013305:	e8 b6 e1 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	ba 2c 9f 02 c0       	mov    edx,0xc0029f2c
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	89 10                	mov    DWORD PTR [eax],edx
c0013318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013326:	83 c0 0d             	add    eax,0xd
c0013329:	83 ec 04             	sub    esp,0x4
c001332c:	52                   	push   edx
c001332d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013331:	50                   	push   eax
c0013332:	e8 6b f9 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013341:	8d 50 bf             	lea    edx,[eax-0x41]
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013356:	90                   	nop
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	c3                   	ret    
c001335b:	90                   	nop

c001335c <Directory::open()>:
c001335c:	53                   	push   ebx
c001335d:	b8 0b 00 00 00       	mov    eax,0xb
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013369:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013370:	80 fa 19             	cmp    dl,0x19
c0013373:	77 3d                	ja     c00133b2 <Directory::open()+0x56>
c0013375:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c001337c:	85 d2                	test   edx,edx
c001337e:	74 32                	je     c00133b2 <Directory::open()+0x56>
c0013380:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013386:	85 d2                	test   edx,edx
c0013388:	74 28                	je     c00133b2 <Directory::open()+0x56>
c001338a:	b8 06 00 00 00       	mov    eax,0x6
c001338f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013393:	75 1d                	jne    c00133b2 <Directory::open()+0x56>
c0013395:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001339b:	50                   	push   eax
c001339c:	8b 02                	mov    eax,DWORD PTR [edx]
c001339e:	51                   	push   ecx
c001339f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a2:	51                   	push   ecx
c00133a3:	52                   	push   edx
c00133a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	85 c0                	test   eax,eax
c00133ac:	75 04                	jne    c00133b2 <Directory::open()+0x56>
c00133ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b2:	83 c4 08             	add    esp,0x8
c00133b5:	5b                   	pop    ebx
c00133b6:	c3                   	ret    
c00133b7:	90                   	nop

c00133b8 <Directory::close()>:
c00133b8:	53                   	push   ebx
c00133b9:	b8 0b 00 00 00       	mov    eax,0xb
c00133be:	83 ec 08             	sub    esp,0x8
c00133c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133cc:	80 fa 19             	cmp    dl,0x19
c00133cf:	77 41                	ja     c0013412 <Directory::close()+0x5a>
c00133d1:	8b 1c 95 c0 dc 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2340]
c00133d8:	85 db                	test   ebx,ebx
c00133da:	74 36                	je     c0013412 <Directory::close()+0x5a>
c00133dc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e3:	74 2d                	je     c0013412 <Directory::close()+0x5a>
c00133e5:	b8 05 00 00 00       	mov    eax,0x5
c00133ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ee:	74 22                	je     c0013412 <Directory::close()+0x5a>
c00133f0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f4:	8b 04 95 c0 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2340]
c00133fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013401:	53                   	push   ebx
c0013402:	53                   	push   ebx
c0013403:	8b 10                	mov    edx,DWORD PTR [eax]
c0013405:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001340b:	50                   	push   eax
c001340c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	83 c4 08             	add    esp,0x8
c0013415:	5b                   	pop    ebx
c0013416:	c3                   	ret    
c0013417:	90                   	nop

c0013418 <Directory::unlink()>:
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	b8 0b 00 00 00       	mov    eax,0xb
c0013420:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013424:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001342b:	80 f9 19             	cmp    cl,0x19
c001342e:	77 2f                	ja     c001345f <Directory::unlink()+0x47>
c0013430:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0013437:	85 c9                	test   ecx,ecx
c0013439:	74 24                	je     c001345f <Directory::unlink()+0x47>
c001343b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013441:	85 c9                	test   ecx,ecx
c0013443:	74 1a                	je     c001345f <Directory::unlink()+0x47>
c0013445:	b8 06 00 00 00       	mov    eax,0x6
c001344a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001344e:	75 0f                	jne    c001345f <Directory::unlink()+0x47>
c0013450:	83 c2 0d             	add    edx,0xd
c0013453:	50                   	push   eax
c0013454:	50                   	push   eax
c0013455:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013457:	52                   	push   edx
c0013458:	51                   	push   ecx
c0013459:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	83 c4 0c             	add    esp,0xc
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <Directory::rename(char const*)>:
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	b8 0b 00 00 00       	mov    eax,0xb
c001346c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013470:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013477:	80 f9 19             	cmp    cl,0x19
c001347a:	77 32                	ja     c00134ae <Directory::rename(char const*)+0x4a>
c001347c:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0013483:	85 c9                	test   ecx,ecx
c0013485:	74 27                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013487:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001348d:	85 c9                	test   ecx,ecx
c001348f:	74 1d                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013491:	b8 06 00 00 00       	mov    eax,0x6
c0013496:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001349a:	75 12                	jne    c00134ae <Directory::rename(char const*)+0x4a>
c001349c:	83 c2 0d             	add    edx,0xd
c001349f:	50                   	push   eax
c00134a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a6:	52                   	push   edx
c00134a7:	51                   	push   ecx
c00134a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	83 c4 0c             	add    esp,0xc
c00134b1:	c3                   	ret    

c00134b2 <Directory::exists()>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	31 c0                	xor    eax,eax
c00134b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134c2:	80 f9 19             	cmp    cl,0x19
c00134c5:	77 24                	ja     c00134eb <Directory::exists()+0x39>
c00134c7:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c00134ce:	85 c9                	test   ecx,ecx
c00134d0:	74 19                	je     c00134eb <Directory::exists()+0x39>
c00134d2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d8:	85 c9                	test   ecx,ecx
c00134da:	74 0f                	je     c00134eb <Directory::exists()+0x39>
c00134dc:	83 c2 0d             	add    edx,0xd
c00134df:	50                   	push   eax
c00134e0:	50                   	push   eax
c00134e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e3:	52                   	push   edx
c00134e4:	51                   	push   ecx
c00134e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <Directory::read(dirent*)>:
c00134f0:	83 ec 1c             	sub    esp,0x1c
c00134f3:	b8 0b 00 00 00       	mov    eax,0xb
c00134f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013503:	80 fa 19             	cmp    dl,0x19
c0013506:	77 30                	ja     c0013538 <Directory::read(dirent*)+0x48>
c0013508:	8b 14 95 c0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2340]
c001350f:	85 d2                	test   edx,edx
c0013511:	74 25                	je     c0013538 <Directory::read(dirent*)+0x48>
c0013513:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001351a:	74 1c                	je     c0013538 <Directory::read(dirent*)+0x48>
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013521:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013525:	52                   	push   edx
c0013526:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001352a:	6a 00                	push   0x0
c001352c:	68 10 01 00 00       	push   0x110
c0013531:	51                   	push   ecx
c0013532:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013535:	83 c4 20             	add    esp,0x20
c0013538:	83 c4 1c             	add    esp,0x1c
c001353b:	c3                   	ret    

c001353c <Directory::create()>:
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	b8 0b 00 00 00       	mov    eax,0xb
c0013544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013548:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354f:	80 f9 19             	cmp    cl,0x19
c0013552:	77 2f                	ja     c0013583 <Directory::create()+0x47>
c0013554:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c001355b:	85 c9                	test   ecx,ecx
c001355d:	74 24                	je     c0013583 <Directory::create()+0x47>
c001355f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013565:	85 c9                	test   ecx,ecx
c0013567:	74 1a                	je     c0013583 <Directory::create()+0x47>
c0013569:	b8 06 00 00 00       	mov    eax,0x6
c001356e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013572:	75 0f                	jne    c0013583 <Directory::create()+0x47>
c0013574:	83 c2 0d             	add    edx,0xd
c0013577:	50                   	push   eax
c0013578:	50                   	push   eax
c0013579:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357b:	52                   	push   edx
c001357c:	51                   	push   ecx
c001357d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013588:	b8 0a 00 00 00       	mov    eax,0xa
c001358d:	c3                   	ret    

c001358e <Bus::Bus(char const*)>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013595:	83 ec 08             	sub    esp,0x8
c0013598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359c:	50                   	push   eax
c001359d:	e8 68 09 00 00       	call   c0013f0a <Device::Device(char const*)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	ba 48 9f 02 c0       	mov    edx,0xc0029f48
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	89 10                	mov    DWORD PTR [eax],edx
c00135b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135be:	90                   	nop
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <Bus::~Bus()>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	ba 48 9f 02 c0       	mov    edx,0xc0029f48
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	89 10                	mov    DWORD PTR [eax],edx
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	83 ec 0c             	sub    esp,0xc
c00135d9:	50                   	push   eax
c00135da:	e8 0d 06 00 00       	call   c0013bec <Device::~Device()>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	90                   	nop
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	c3                   	ret    
c00135e7:	90                   	nop

c00135e8 <Bus::~Bus()>:
c00135e8:	83 ec 0c             	sub    esp,0xc
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f2:	e8 cd ff ff ff       	call   c00135c4 <Bus::~Bus()>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	83 ec 08             	sub    esp,0x8
c00135fd:	68 58 01 00 00       	push   0x158
c0013602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013606:	e8 08 f2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001360b:	83 c4 10             	add    esp,0x10
c001360e:	83 c4 0c             	add    esp,0xc
c0013611:	c3                   	ret    

c0013612 <Buzzer::Buzzer(char const*)>:
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013619:	83 ec 08             	sub    esp,0x8
c001361c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013620:	50                   	push   eax
c0013621:	e8 e4 08 00 00       	call   c0013f0a <Device::Device(char const*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	ba 74 9f 02 c0       	mov    edx,0xc0029f74
c001362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013632:	89 10                	mov    DWORD PTR [eax],edx
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013650:	90                   	nop
c0013651:	83 c4 0c             	add    esp,0xc
c0013654:	c3                   	ret    
c0013655:	90                   	nop

c0013656 <Buzzer::~Buzzer()>:
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	ba 74 9f 02 c0       	mov    edx,0xc0029f74
c001365e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013662:	89 10                	mov    DWORD PTR [eax],edx
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	50                   	push   eax
c001366c:	e8 7b 05 00 00       	call   c0013bec <Device::~Device()>
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	90                   	nop
c0013675:	83 c4 0c             	add    esp,0xc
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <Buzzer::~Buzzer()>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	83 ec 0c             	sub    esp,0xc
c0013680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013684:	e8 cd ff ff ff       	call   c0013656 <Buzzer::~Buzzer()>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	83 ec 08             	sub    esp,0x8
c001368f:	68 5c 01 00 00       	push   0x15c
c0013694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013698:	e8 76 f1 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	83 c4 0c             	add    esp,0xc
c00136a3:	c3                   	ret    

c00136a4 <Buzzer::stop()>:
c00136a4:	83 ec 14             	sub    esp,0x14
c00136a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ad:	6a 00                	push   0x0
c00136af:	50                   	push   eax
c00136b0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    

c00136b7 <beepThread(void*)>:
c00136b7:	53                   	push   ebx
c00136b8:	83 ec 08             	sub    esp,0x8
c00136bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136bf:	e8 74 9b 00 00       	call   c001d238 <unlockScheduler()>
c00136c4:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136c9:	52                   	push   edx
c00136ca:	52                   	push   edx
c00136cb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136d1:	52                   	push   edx
c00136d2:	50                   	push   eax
c00136d3:	e8 ae a0 00 00       	call   c001d786 <nanoSleep(unsigned long long)>
c00136d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136db:	e8 c4 ff ff ff       	call   c00136a4 <Buzzer::stop()>
c00136e0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136e8:	83 c4 18             	add    esp,0x18
c00136eb:	5b                   	pop    ebx
c00136ec:	e9 db 9f 00 00       	jmp    c001d6cc <blockTask(TaskState)>
c00136f1:	90                   	nop

c00136f2 <Buzzer::beep(int, int, bool)>:
c00136f2:	57                   	push   edi
c00136f3:	56                   	push   esi
c00136f4:	53                   	push   ebx
c00136f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013701:	52                   	push   edx
c0013702:	52                   	push   edx
c0013703:	8b 06                	mov    eax,DWORD PTR [esi]
c0013705:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013709:	56                   	push   esi
c001370a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	89 f8                	mov    eax,edi
c0013712:	84 c0                	test   al,al
c0013714:	74 1f                	je     c0013735 <Buzzer::beep(int, int, bool)+0x43>
c0013716:	50                   	push   eax
c0013717:	50                   	push   eax
c0013718:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001371e:	99                   	cdq    
c001371f:	52                   	push   edx
c0013720:	50                   	push   eax
c0013721:	e8 60 a0 00 00       	call   c001d786 <nanoSleep(unsigned long long)>
c0013726:	83 c4 10             	add    esp,0x10
c0013729:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001372d:	5b                   	pop    ebx
c001372e:	5e                   	pop    esi
c001372f:	5f                   	pop    edi
c0013730:	e9 6f ff ff ff       	jmp    c00136a4 <Buzzer::stop()>
c0013735:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001373b:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0013740:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013748:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001374c:	c7 44 24 14 b7 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136b7
c0013754:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013758:	5b                   	pop    ebx
c0013759:	5e                   	pop    esi
c001375a:	5f                   	pop    edi
c001375b:	e9 08 9c 00 00       	jmp    c001d368 <Process::createThread(void (*)(void*), void*, int)>

c0013760 <User::loadClockSettings(int)>:
c0013760:	53                   	push   ebx
c0013761:	83 ec 14             	sub    esp,0x14
c0013764:	68 14 01 00 00       	push   0x114
c0013769:	e8 b6 be ff ff       	call   c000f624 <malloc>
c001376e:	83 c4 0c             	add    esp,0xc
c0013771:	89 c3                	mov    ebx,eax
c0013773:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c0013779:	68 9c 9f 02 c0       	push   0xc0029f9c
c001377e:	50                   	push   eax
c001377f:	e8 c8 f6 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0013784:	58                   	pop    eax
c0013785:	5a                   	pop    edx
c0013786:	6a 01                	push   0x1
c0013788:	53                   	push   ebx
c0013789:	e8 22 f7 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001378e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013791:	e8 78 f7 ff ff       	call   c0012f0e <File::close()>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	85 db                	test   ebx,ebx
c001379b:	74 0f                	je     c00137ac <User::loadClockSettings(int)+0x4c>
c001379d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137a6:	83 c4 08             	add    esp,0x8
c00137a9:	5b                   	pop    ebx
c00137aa:	ff e0                	jmp    eax
c00137ac:	83 c4 08             	add    esp,0x8
c00137af:	5b                   	pop    ebx
c00137b0:	c3                   	ret    
c00137b1:	90                   	nop

c00137b2 <Clock::Clock(char const*)>:
c00137b2:	83 ec 0c             	sub    esp,0xc
c00137b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b9:	83 ec 08             	sub    esp,0x8
c00137bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c0:	50                   	push   eax
c00137c1:	e8 44 07 00 00       	call   c0013f0a <Device::Device(char const*)>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	ba c4 9f 02 c0       	mov    edx,0xc0029fc4
c00137ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d2:	89 10                	mov    DWORD PTR [eax],edx
c00137d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137e2:	90                   	nop
c00137e3:	83 c4 0c             	add    esp,0xc
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Clock::~Clock()>:
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	ba c4 9f 02 c0       	mov    edx,0xc0029fc4
c00137f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f4:	89 10                	mov    DWORD PTR [eax],edx
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	50                   	push   eax
c00137fe:	e8 e9 03 00 00       	call   c0013bec <Device::~Device()>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	90                   	nop
c0013807:	83 c4 0c             	add    esp,0xc
c001380a:	c3                   	ret    
c001380b:	90                   	nop

c001380c <Clock::~Clock()>:
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	83 ec 0c             	sub    esp,0xc
c0013812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013816:	e8 cd ff ff ff       	call   c00137e8 <Clock::~Clock()>
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	83 ec 08             	sub    esp,0x8
c0013821:	68 58 01 00 00       	push   0x158
c0013826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382a:	e8 e4 ef ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	83 c4 0c             	add    esp,0xc
c0013835:	c3                   	ret    

c0013836 <Clock::timeInSecondsLocal()>:
c0013836:	53                   	push   ebx
c0013837:	83 ec 14             	sub    esp,0x14
c001383a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001383e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013840:	50                   	push   eax
c0013841:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013844:	0f b6 0d 30 d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d830
c001384b:	03 0d 34 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d834
c0013851:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013857:	89 cb                	mov    ebx,ecx
c0013859:	c1 fb 1f             	sar    ebx,0x1f
c001385c:	01 c8                	add    eax,ecx
c001385e:	11 da                	adc    edx,ebx
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	31 c9                	xor    ecx,ecx
c0013865:	80 3d 31 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d831,0x0
c001386c:	74 05                	je     c0013873 <Clock::timeInSecondsLocal()+0x3d>
c001386e:	b9 08 07 00 00       	mov    ecx,0x708
c0013873:	31 db                	xor    ebx,ebx
c0013875:	01 c8                	add    eax,ecx
c0013877:	11 da                	adc    edx,ebx
c0013879:	83 c4 08             	add    esp,0x8
c001387c:	5b                   	pop    ebx
c001387d:	c3                   	ret    

c001387e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001387e:	57                   	push   edi
c001387f:	56                   	push   esi
c0013880:	53                   	push   ebx
c0013881:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013885:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013889:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001388f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013892:	0f b6 05 30 d8 02 c0 	movzx  eax,BYTE PTR ds:0xc002d830
c0013899:	03 05 34 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d834
c001389f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138a5:	99                   	cdq    
c00138a6:	29 c6                	sub    esi,eax
c00138a8:	19 d7                	sbb    edi,edx
c00138aa:	89 f0                	mov    eax,esi
c00138ac:	89 fa                	mov    edx,edi
c00138ae:	31 f6                	xor    esi,esi
c00138b0:	80 3d 31 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d831,0x0
c00138b7:	74 05                	je     c00138be <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138b9:	be 08 07 00 00       	mov    esi,0x708
c00138be:	31 ff                	xor    edi,edi
c00138c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138c4:	29 f0                	sub    eax,esi
c00138c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ca:	19 fa                	sbb    edx,edi
c00138cc:	89 d8                	mov    eax,ebx
c00138ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d2:	5b                   	pop    ebx
c00138d3:	5e                   	pop    esi
c00138d4:	5f                   	pop    edi
c00138d5:	ff e0                	jmp    eax

c00138d7 <datetimeToSeconds(datetime_t)>:
c00138d7:	55                   	push   ebp
c00138d8:	57                   	push   edi
c00138d9:	56                   	push   esi
c00138da:	53                   	push   ebx
c00138db:	83 ec 14             	sub    esp,0x14
c00138de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138e6:	89 d3                	mov    ebx,edx
c00138e8:	0f b6 c6             	movzx  eax,dh
c00138eb:	c1 eb 10             	shr    ebx,0x10
c00138ee:	48                   	dec    eax
c00138ef:	66 81 eb 6c 07       	sub    bx,0x76c
c00138f4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138f8:	0f b6 f5             	movzx  esi,ch
c00138fb:	89 cf                	mov    edi,ecx
c00138fd:	6b f6 3c             	imul   esi,esi,0x3c
c0013900:	c1 ef 10             	shr    edi,0x10
c0013903:	0f b6 c9             	movzx  ecx,cl
c0013906:	89 f8                	mov    eax,edi
c0013908:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001390e:	0f b6 f8             	movzx  edi,al
c0013911:	0f b6 d2             	movzx  edx,dl
c0013914:	01 fe                	add    esi,edi
c0013916:	01 f1                	add    ecx,esi
c0013918:	0f b7 f3             	movzx  esi,bx
c001391b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001391f:	c1 f9 1f             	sar    ecx,0x1f
c0013922:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013927:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001392b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013930:	8b 0c 8d 00 a0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6000]
c0013937:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001393b:	76 29                	jbe    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c001393d:	f6 c3 03             	test   bl,0x3
c0013940:	75 24                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013942:	31 d2                	xor    edx,edx
c0013944:	bf 64 00 00 00       	mov    edi,0x64
c0013949:	89 d8                	mov    eax,ebx
c001394b:	66 f7 f7             	div    di
c001394e:	66 85 d2             	test   dx,dx
c0013951:	75 12                	jne    c0013965 <datetimeToSeconds(datetime_t)+0x8e>
c0013953:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013959:	bf 90 01 00 00       	mov    edi,0x190
c001395e:	99                   	cdq    
c001395f:	f7 ff                	idiv   edi
c0013961:	85 d2                	test   edx,edx
c0013963:	75 01                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013965:	41                   	inc    ecx
c0013966:	66 83 fb 46          	cmp    bx,0x46
c001396a:	76 45                	jbe    c00139b1 <datetimeToSeconds(datetime_t)+0xda>
c001396c:	bb 46 00 00 00       	mov    ebx,0x46
c0013971:	bf 64 00 00 00       	mov    edi,0x64
c0013976:	bd 90 01 00 00       	mov    ebp,0x190
c001397b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013980:	f6 c3 03             	test   bl,0x3
c0013983:	75 23                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013985:	89 d8                	mov    eax,ebx
c0013987:	99                   	cdq    
c0013988:	f7 ff                	idiv   edi
c001398a:	b8 6e 01 00 00       	mov    eax,0x16e
c001398f:	85 d2                	test   edx,edx
c0013991:	75 15                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013993:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013999:	99                   	cdq    
c001399a:	f7 fd                	idiv   ebp
c001399c:	83 fa 01             	cmp    edx,0x1
c001399f:	19 c0                	sbb    eax,eax
c00139a1:	f7 d0                	not    eax
c00139a3:	05 6e 01 00 00       	add    eax,0x16e
c00139a8:	01 c1                	add    ecx,eax
c00139aa:	43                   	inc    ebx
c00139ab:	39 f3                	cmp    ebx,esi
c00139ad:	7c cc                	jl     c001397b <datetimeToSeconds(datetime_t)+0xa4>
c00139af:	eb 35                	jmp    c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b1:	74 33                	je     c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b3:	b8 45 00 00 00       	mov    eax,0x45
c00139b8:	89 c2                	mov    edx,eax
c00139ba:	83 e2 03             	and    edx,0x3
c00139bd:	39 f0                	cmp    eax,esi
c00139bf:	7e 0f                	jle    c00139d0 <datetimeToSeconds(datetime_t)+0xf9>
c00139c1:	83 fa 01             	cmp    edx,0x1
c00139c4:	19 d2                	sbb    edx,edx
c00139c6:	48                   	dec    eax
c00139c7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139ce:	eb e8                	jmp    c00139b8 <datetimeToSeconds(datetime_t)+0xe1>
c00139d0:	b8 6d 01 00 00       	mov    eax,0x16d
c00139d5:	85 d2                	test   edx,edx
c00139d7:	75 0b                	jne    c00139e4 <datetimeToSeconds(datetime_t)+0x10d>
c00139d9:	66 83 fb 01          	cmp    bx,0x1
c00139dd:	19 c0                	sbb    eax,eax
c00139df:	05 6e 01 00 00       	add    eax,0x16e
c00139e4:	29 c1                	sub    ecx,eax
c00139e6:	b8 80 51 01 00       	mov    eax,0x15180
c00139eb:	f7 e9                	imul   ecx
c00139ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139f5:	83 c4 14             	add    esp,0x14
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	5f                   	pop    edi
c00139fb:	5d                   	pop    ebp
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139fe:	57                   	push   edi
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a07:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a12:	e8 c0 fe ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c0013a17:	59                   	pop    ecx
c0013a18:	0f b6 0d 30 d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d830
c0013a1f:	5b                   	pop    ebx
c0013a20:	03 0d 34 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d834
c0013a26:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a2c:	89 cb                	mov    ebx,ecx
c0013a2e:	c1 fb 1f             	sar    ebx,0x1f
c0013a31:	29 c8                	sub    eax,ecx
c0013a33:	19 da                	sbb    edx,ebx
c0013a35:	31 c9                	xor    ecx,ecx
c0013a37:	80 3d 31 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d831,0x0
c0013a3e:	74 05                	je     c0013a45 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a40:	b9 08 07 00 00       	mov    ecx,0x708
c0013a45:	31 db                	xor    ebx,ebx
c0013a47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a4b:	29 c8                	sub    eax,ecx
c0013a4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a51:	19 da                	sbb    edx,ebx
c0013a53:	89 f8                	mov    eax,edi
c0013a55:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a59:	5b                   	pop    ebx
c0013a5a:	5e                   	pop    esi
c0013a5b:	5f                   	pop    edi
c0013a5c:	ff e0                	jmp    eax

c0013a5e <secondsToDatetime(unsigned long long)>:
c0013a5e:	55                   	push   ebp
c0013a5f:	57                   	push   edi
c0013a60:	56                   	push   esi
c0013a61:	53                   	push   ebx
c0013a62:	83 ec 1c             	sub    esp,0x1c
c0013a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a71:	6a 00                	push   0x0
c0013a73:	68 80 51 01 00       	push   0x15180
c0013a78:	55                   	push   ebp
c0013a79:	57                   	push   edi
c0013a7a:	e8 dd 23 01 00       	call   c0025e5c <__udivdi3>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a8c:	6a 00                	push   0x0
c0013a8e:	68 80 51 01 00       	push   0x15180
c0013a93:	55                   	push   ebp
c0013a94:	57                   	push   edi
c0013a95:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a9a:	e8 bd 24 01 00       	call   c0025f5c <__umoddi3>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	99                   	cdq    
c0013aa3:	f7 ff                	idiv   edi
c0013aa5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013aaa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aad:	89 d0                	mov    eax,edx
c0013aaf:	99                   	cdq    
c0013ab0:	f7 ff                	idiv   edi
c0013ab2:	85 db                	test   ebx,ebx
c0013ab4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ab7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aba:	79 11                	jns    c0013acd <secondsToDatetime(unsigned long long)+0x6f>
c0013abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ac0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ac6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013acb:	eb 07                	jmp    c0013ad4 <secondsToDatetime(unsigned long long)+0x76>
c0013acd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad2:	89 d8                	mov    eax,ebx
c0013ad4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ad9:	99                   	cdq    
c0013ada:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013adf:	f7 f9                	idiv   ecx
c0013ae1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ae6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aea:	31 d2                	xor    edx,edx
c0013aec:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013af4:	01 c3                	add    ebx,eax
c0013af6:	89 d8                	mov    eax,ebx
c0013af8:	f7 f1                	div    ecx
c0013afa:	31 d2                	xor    edx,edx
c0013afc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013aff:	89 d8                	mov    eax,ebx
c0013b01:	f7 f7                	div    edi
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	29 c1                	sub    ecx,eax
c0013b07:	89 d8                	mov    eax,ebx
c0013b09:	f7 f5                	div    ebp
c0013b0b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b10:	29 c1                	sub    ecx,eax
c0013b12:	31 d2                	xor    edx,edx
c0013b14:	89 c8                	mov    eax,ecx
c0013b16:	f7 f5                	div    ebp
c0013b18:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b21:	31 d2                	xor    edx,edx
c0013b23:	89 c8                	mov    eax,ecx
c0013b25:	f7 f5                	div    ebp
c0013b27:	31 d2                	xor    edx,edx
c0013b29:	01 c3                	add    ebx,eax
c0013b2b:	89 c8                	mov    eax,ecx
c0013b2d:	f7 f7                	div    edi
c0013b2f:	bf 99 00 00 00       	mov    edi,0x99
c0013b34:	29 c3                	sub    ebx,eax
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b40:	29 c3                	sub    ebx,eax
c0013b42:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b45:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b48:	bb 05 00 00 00       	mov    ebx,0x5
c0013b4d:	83 c1 02             	add    ecx,0x2
c0013b50:	89 c8                	mov    eax,ecx
c0013b52:	f7 f7                	div    edi
c0013b54:	31 d2                	xor    edx,edx
c0013b56:	89 c7                	mov    edi,eax
c0013b58:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b5e:	83 c0 02             	add    eax,0x2
c0013b61:	f7 f3                	div    ebx
c0013b63:	89 eb                	mov    ebx,ebp
c0013b65:	29 c3                	sub    ebx,eax
c0013b67:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b6d:	88 1e                	mov    BYTE PTR [esi],bl
c0013b6f:	19 c0                	sbb    eax,eax
c0013b71:	31 d2                	xor    edx,edx
c0013b73:	83 e0 0c             	and    eax,0xc
c0013b76:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b7a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b82:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b86:	83 f9 01             	cmp    ecx,0x1
c0013b89:	0f 96 c2             	setbe  dl
c0013b8c:	41                   	inc    ecx
c0013b8d:	01 d0                	add    eax,edx
c0013b8f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b92:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b96:	83 c4 1c             	add    esp,0x1c
c0013b99:	89 f0                	mov    eax,esi
c0013b9b:	5b                   	pop    ebx
c0013b9c:	5e                   	pop    esi
c0013b9d:	5f                   	pop    edi
c0013b9e:	5d                   	pop    ebp
c0013b9f:	c2 04 00             	ret    0x4

c0013ba2 <Clock::timeInDatetimeLocal()>:
c0013ba2:	53                   	push   ebx
c0013ba3:	83 ec 14             	sub    esp,0x14
c0013ba6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013baa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bae:	e8 83 fc ff ff       	call   c0013836 <Clock::timeInSecondsLocal()>
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	52                   	push   edx
c0013bb7:	50                   	push   eax
c0013bb8:	53                   	push   ebx
c0013bb9:	e8 a0 fe ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c0013bbe:	89 d8                	mov    eax,ebx
c0013bc0:	83 c4 14             	add    esp,0x14
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c2 04 00             	ret    0x4
c0013bc7:	90                   	nop

c0013bc8 <Device::hibernate()>:
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Device::wake()>:
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <Device::detect()>:
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Device::disableLegacy()>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <Device::powerSaving(PowerSavingLevel)>:
c0013bd0:	c3                   	ret    
c0013bd1:	90                   	nop

c0013bd2 <DriverlessDevice::close(int, int, void*)>:
c0013bd2:	31 c0                	xor    eax,eax
c0013bd4:	c3                   	ret    
c0013bd5:	90                   	nop

c0013bd6 <DriverlessDevice::detect()>:
c0013bd6:	c3                   	ret    
c0013bd7:	90                   	nop

c0013bd8 <DriverlessDevice::open(int, int, void*)>:
c0013bd8:	83 ec 18             	sub    esp,0x18
c0013bdb:	68 30 a0 02 c0       	push   0xc002a030
c0013be0:	e8 40 60 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0013be5:	83 c8 ff             	or     eax,0xffffffff
c0013be8:	83 c4 1c             	add    esp,0x1c
c0013beb:	c3                   	ret    

c0013bec <Device::~Device()>:
c0013bec:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c0013bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf5:	89 10                	mov    DWORD PTR [eax],edx
c0013bf7:	90                   	nop
c0013bf8:	c3                   	ret    
c0013bf9:	90                   	nop

c0013bfa <Device::~Device()>:
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c01:	e8 e6 ff ff ff       	call   c0013bec <Device::~Device()>
c0013c06:	83 c4 04             	add    esp,0x4
c0013c09:	83 ec 08             	sub    esp,0x8
c0013c0c:	68 58 01 00 00       	push   0x158
c0013c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c15:	e8 f9 eb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	83 c4 0c             	add    esp,0xc
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::findAndLoadDriver()>:
c0013c22:	c3                   	ret    
c0013c23:	90                   	nop

c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c24:	57                   	push   edi
c0013c25:	b9 09 00 00 00       	mov    ecx,0x9
c0013c2a:	56                   	push   esi
c0013c2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c2f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c33:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c3d:	81 c7 18 01 00 00    	add    edi,0x118
c0013c43:	fc                   	cld    
c0013c44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c46:	5e                   	pop    esi
c0013c47:	5f                   	pop    edi
c0013c48:	c3                   	ret    
c0013c49:	90                   	nop

c0013c4a <Device::preOpenACPI(void*, char*, char*)>:
c0013c4a:	56                   	push   esi
c0013c4b:	53                   	push   ebx
c0013c4c:	83 ec 08             	sub    esp,0x8
c0013c4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c57:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c65:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c6b:	6a 1e                	push   0x1e
c0013c6d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c77:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c7d:	50                   	push   eax
c0013c7e:	e8 1d ca fe ff       	call   c00006a0 <memcpy>
c0013c83:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c87:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c8b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c93:	83 c4 14             	add    esp,0x14
c0013c96:	5b                   	pop    ebx
c0013c97:	5e                   	pop    esi
c0013c98:	e9 03 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c9d:	90                   	nop

c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ca7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cae:	75 0b                	jne    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb9:	eb 1e                	jmp    c0013cd9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cbb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0013cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cc6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ccc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd9:	ff e0                	jmp    eax
c0013cdb:	90                   	nop

c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ce0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ce5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cec:	75 0b                	jne    c0013cf9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cf0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cf7:	eb 1e                	jmp    c0013d17 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cf9:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0013cfe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d04:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d14:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d17:	ff e0                	jmp    eax
c0013d19:	90                   	nop

c0013d1a <Device::addChild(Device*)>:
c0013d1a:	53                   	push   ebx
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d26:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d2c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d34:	85 d2                	test   edx,edx
c0013d36:	74 04                	je     c0013d3c <Device::addChild(Device*)+0x22>
c0013d38:	89 d3                	mov    ebx,edx
c0013d3a:	eb f6                	jmp    c0013d32 <Device::addChild(Device*)+0x18>
c0013d3c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	6a 08                	push   0x8
c0013d44:	e8 db b8 ff ff       	call   c000f624 <malloc>
c0013d49:	89 03                	mov    DWORD PTR [ebx],eax
c0013d4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d58:	83 c4 18             	add    esp,0x18
c0013d5b:	5b                   	pop    ebx
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <Device::removeAllChildren()>:
c0013d5e:	56                   	push   esi
c0013d5f:	53                   	push   ebx
c0013d60:	52                   	push   edx
c0013d61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d65:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6e:	74 17                	je     c0013d87 <Device::removeAllChildren()+0x29>
c0013d70:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d73:	85 c0                	test   eax,eax
c0013d75:	74 0c                	je     c0013d83 <Device::removeAllChildren()+0x25>
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d7c:	50                   	push   eax
c0013d7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d85:	eb e4                	jmp    c0013d6b <Device::removeAllChildren()+0xd>
c0013d87:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013da0:	58                   	pop    eax
c0013da1:	5b                   	pop    ebx
c0013da2:	5e                   	pop    esi
c0013da3:	c3                   	ret    

c0013da4 <Device::hibernateAll()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dae:	53                   	push   ebx
c0013daf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013db2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 0f                	je     c0013dcf <Device::hibernateAll()+0x2b>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 d9 ff ff ff       	call   c0013da4 <Device::hibernateAll()>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	eb e9                	jmp    c0013db8 <Device::hibernateAll()+0x14>
c0013dcf:	83 c4 08             	add    esp,0x8
c0013dd2:	5b                   	pop    ebx
c0013dd3:	c3                   	ret    

c0013dd4 <Device::wakeAll()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dde:	53                   	push   ebx
c0013ddf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013de2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dee:	74 0f                	je     c0013dff <Device::wakeAll()+0x2b>
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df6:	e8 d9 ff ff ff       	call   c0013dd4 <Device::wakeAll()>
c0013dfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfd:	eb e9                	jmp    c0013de8 <Device::wakeAll()+0x14>
c0013dff:	83 c4 08             	add    esp,0x8
c0013e02:	5b                   	pop    ebx
c0013e03:	c3                   	ret    

c0013e04 <Device::detectAll()>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 14             	sub    esp,0x14
c0013e08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0e:	53                   	push   ebx
c0013e0f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1e:	74 0f                	je     c0013e2f <Device::detectAll()+0x2b>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e26:	e8 d9 ff ff ff       	call   c0013e04 <Device::detectAll()>
c0013e2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2d:	eb e9                	jmp    c0013e18 <Device::detectAll()+0x14>
c0013e2f:	83 c4 08             	add    esp,0x8
c0013e32:	5b                   	pop    ebx
c0013e33:	c3                   	ret    

c0013e34 <Device::disableLegacyAll()>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 14             	sub    esp,0x14
c0013e38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e3e:	53                   	push   ebx
c0013e3f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4e:	74 0f                	je     c0013e5f <Device::disableLegacyAll()+0x2b>
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e56:	e8 d9 ff ff ff       	call   c0013e34 <Device::disableLegacyAll()>
c0013e5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5d:	eb e9                	jmp    c0013e48 <Device::disableLegacyAll()+0x14>
c0013e5f:	83 c4 08             	add    esp,0x8
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Device::loadDriversForAll()>:
c0013e64:	53                   	push   ebx
c0013e65:	83 ec 08             	sub    esp,0x8
c0013e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e74:	85 db                	test   ebx,ebx
c0013e76:	74 12                	je     c0013e8a <Device::loadDriversForAll()+0x26>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e7e:	e8 e1 ff ff ff       	call   c0013e64 <Device::loadDriversForAll()>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	89 d8                	mov    eax,ebx
c0013e88:	eb e8                	jmp    c0013e72 <Device::loadDriversForAll()+0xe>
c0013e8a:	83 c4 08             	add    esp,0x8
c0013e8d:	5b                   	pop    ebx
c0013e8e:	c3                   	ret    
c0013e8f:	90                   	nop

c0013e90 <Device::closeAll()>:
c0013e90:	53                   	push   ebx
c0013e91:	83 ec 08             	sub    esp,0x8
c0013e94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9a:	6a 00                	push   0x0
c0013e9c:	6a 00                	push   0x0
c0013e9e:	6a 00                	push   0x0
c0013ea0:	53                   	push   ebx
c0013ea1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb0:	74 0f                	je     c0013ec1 <Device::closeAll()+0x31>
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb8:	e8 d3 ff ff ff       	call   c0013e90 <Device::closeAll()>
c0013ebd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ebf:	eb e9                	jmp    c0013eaa <Device::closeAll()+0x1a>
c0013ec1:	83 c4 08             	add    esp,0x8
c0013ec4:	5b                   	pop    ebx
c0013ec5:	c3                   	ret    

c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec6:	56                   	push   esi
c0013ec7:	53                   	push   ebx
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ecf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013eda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee6:	74 0f                	je     c0013ef7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee8:	52                   	push   edx
c0013ee9:	52                   	push   edx
c0013eea:	56                   	push   esi
c0013eeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eee:	e8 d3 ff ff ff       	call   c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>
c0013ef3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef5:	eb e9                	jmp    c0013ee0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef7:	58                   	pop    eax
c0013ef8:	5b                   	pop    ebx
c0013ef9:	5e                   	pop    esi
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <Device::setName(char const*)>:
c0013efc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f04:	e9 5a c8 fe ff       	jmp    c0000763 <strcpy>
c0013f09:	90                   	nop

c0013f0a <Device::Device(char const*)>:
c0013f0a:	83 ec 1c             	sub    esp,0x1c
c0013f0d:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c0013f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f16:	89 10                	mov    DWORD PTR [eax],edx
c0013f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f38:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f46:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f50:	83 ec 08             	sub    esp,0x8
c0013f53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f5b:	e8 9c ff ff ff       	call   c0013efc <Device::setName(char const*)>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f72:	e8 ad b6 ff ff       	call   c000f624 <malloc>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f8b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fda:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014000:	90                   	nop
c0014001:	83 c4 1c             	add    esp,0x1c
c0014004:	c3                   	ret    
c0014005:	90                   	nop

c0014006 <Device::getName()>:
c0014006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001400a:	05 d0 00 00 00       	add    eax,0xd0
c001400f:	c3                   	ret    

c0014010 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014017:	83 ec 08             	sub    esp,0x8
c001401a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401e:	50                   	push   eax
c001401f:	e8 e6 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	ba 84 a0 02 c0       	mov    edx,0xc002a084
c001402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014030:	89 10                	mov    DWORD PTR [eax],edx
c0014032:	90                   	nop
c0014033:	83 c4 0c             	add    esp,0xc
c0014036:	c3                   	ret    
c0014037:	90                   	nop

c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014038:	57                   	push   edi
c0014039:	56                   	push   esi
c001403a:	53                   	push   ebx
c001403b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001403f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014043:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014047:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001404d:	75 0c                	jne    c001405b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001404f:	52                   	push   edx
c0014050:	52                   	push   edx
c0014051:	53                   	push   ebx
c0014052:	56                   	push   esi
c0014053:	e8 42 3d 01 00       	call   c0027d9a <LinkedList<Device>::addElement(Device*)>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014064:	74 12                	je     c0014078 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014066:	50                   	push   eax
c0014067:	57                   	push   edi
c0014068:	56                   	push   esi
c0014069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001406c:	e8 c7 ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	eb e9                	jmp    c0014061 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014078:	5b                   	pop    ebx
c0014079:	5e                   	pop    esi
c001407a:	5f                   	pop    edi
c001407b:	c3                   	ret    

c001407c <getDevicesOfType(DeviceType)>:
c001407c:	53                   	push   ebx
c001407d:	83 ec 14             	sub    esp,0x14
c0014080:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014084:	53                   	push   ebx
c0014085:	e8 ec 3d 01 00       	call   c0027e76 <LinkedList<Device>::LinkedList()>
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014091:	53                   	push   ebx
c0014092:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c0014098:	e8 9b ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001409d:	89 d8                	mov    eax,ebx
c001409f:	83 c4 18             	add    esp,0x18
c00140a2:	5b                   	pop    ebx
c00140a3:	c2 04 00             	ret    0x4

c00140a6 <HardDiskController::HardDiskController(char const*)>:
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b4:	50                   	push   eax
c00140b5:	e8 50 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	ba b0 a0 02 c0       	mov    edx,0xc002a0b0
c00140c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c6:	89 10                	mov    DWORD PTR [eax],edx
c00140c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140d6:	90                   	nop
c00140d7:	83 c4 0c             	add    esp,0xc
c00140da:	c3                   	ret    
c00140db:	90                   	nop

c00140dc <HardDiskController::~HardDiskController()>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	ba b0 a0 02 c0       	mov    edx,0xc002a0b0
c00140e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e8:	89 10                	mov    DWORD PTR [eax],edx
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	50                   	push   eax
c00140f2:	e8 f5 fa ff ff       	call   c0013bec <Device::~Device()>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	90                   	nop
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	c3                   	ret    
c00140ff:	90                   	nop

c0014100 <HardDiskController::~HardDiskController()>:
c0014100:	83 ec 0c             	sub    esp,0xc
c0014103:	83 ec 0c             	sub    esp,0xc
c0014106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001410a:	e8 cd ff ff ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	83 ec 08             	sub    esp,0x8
c0014115:	68 58 01 00 00       	push   0x158
c001411a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411e:	e8 f0 e6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	83 c4 0c             	add    esp,0xc
c0014129:	c3                   	ret    

c001412a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014131:	83 ec 08             	sub    esp,0x8
c0014134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014138:	50                   	push   eax
c0014139:	e8 cc fd ff ff       	call   c0013f0a <Device::Device(char const*)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c0014146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414a:	89 10                	mov    DWORD PTR [eax],edx
c001414c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014150:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014166:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014178:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001417e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014182:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001418c:	90                   	nop
c001418d:	83 c4 0c             	add    esp,0xc
c0014190:	c3                   	ret    
c0014191:	90                   	nop

c0014192 <PhysicalDisk::startCache()>:
c0014192:	56                   	push   esi
c0014193:	53                   	push   ebx
c0014194:	83 ec 10             	sub    esp,0x10
c0014197:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001419b:	6a 30                	push   0x30
c001419d:	e8 82 b4 ff ff       	call   c000f624 <malloc>
c00141a2:	89 c6                	mov    esi,eax
c00141a4:	58                   	pop    eax
c00141a5:	5a                   	pop    edx
c00141a6:	53                   	push   ebx
c00141a7:	56                   	push   esi
c00141a8:	e8 81 26 00 00       	call   c001682e <VCache::VCache(PhysicalDisk*)>
c00141ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141b3:	83 c4 14             	add    esp,0x14
c00141b6:	5b                   	pop    ebx
c00141b7:	5e                   	pop    esi
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <PhysicalDisk::~PhysicalDisk()>:
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c00141c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c6:	89 10                	mov    DWORD PTR [eax],edx
c00141c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	50                   	push   eax
c00141d0:	e8 17 fa ff ff       	call   c0013bec <Device::~Device()>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	90                   	nop
c00141d9:	83 c4 0c             	add    esp,0xc
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <PhysicalDisk::~PhysicalDisk()>:
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	83 ec 0c             	sub    esp,0xc
c00141e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141e8:	e8 cd ff ff ff       	call   c00141ba <PhysicalDisk::~PhysicalDisk()>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	83 ec 08             	sub    esp,0x8
c00141f3:	68 6c 01 00 00       	push   0x16c
c00141f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fc:	e8 12 e6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014201:	83 c4 10             	add    esp,0x10
c0014204:	83 c4 0c             	add    esp,0xc
c0014207:	c3                   	ret    

c0014208 <FPU::FPU(char const*)>:
c0014208:	83 ec 0c             	sub    esp,0xc
c001420b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420f:	83 ec 08             	sub    esp,0x8
c0014212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014216:	50                   	push   eax
c0014217:	e8 ee fc ff ff       	call   c0013f0a <Device::Device(char const*)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0014224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014228:	89 10                	mov    DWORD PTR [eax],edx
c001422a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014238:	90                   	nop
c0014239:	83 c4 0c             	add    esp,0xc
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <FPU::~FPU()>:
c001423e:	83 ec 0c             	sub    esp,0xc
c0014241:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0014246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424a:	89 10                	mov    DWORD PTR [eax],edx
c001424c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	50                   	push   eax
c0014254:	e8 93 f9 ff ff       	call   c0013bec <Device::~Device()>
c0014259:	83 c4 10             	add    esp,0x10
c001425c:	90                   	nop
c001425d:	83 c4 0c             	add    esp,0xc
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <FPU::~FPU()>:
c0014262:	83 ec 0c             	sub    esp,0xc
c0014265:	83 ec 0c             	sub    esp,0xc
c0014268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001426c:	e8 cd ff ff ff       	call   c001423e <FPU::~FPU()>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	83 ec 08             	sub    esp,0x8
c0014277:	68 58 01 00 00       	push   0x158
c001427c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014280:	e8 8e e5 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	83 c4 0c             	add    esp,0xc
c001428b:	c3                   	ret    

c001428c <setupFPU()>:
c001428c:	53                   	push   ebx
c001428d:	83 ec 08             	sub    esp,0x8
c0014290:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c0014296:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001429d:	74 19                	je     c00142b8 <setupFPU()+0x2c>
c001429f:	83 ec 0c             	sub    esp,0xc
c00142a2:	68 58 01 00 00       	push   0x158
c00142a7:	e8 78 b3 ff ff       	call   c000f624 <malloc>
c00142ac:	89 c3                	mov    ebx,eax
c00142ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00142b1:	e8 2e 07 01 00       	call   c00249e4 <AVX::AVX()>
c00142b6:	eb 5b                	jmp    c0014313 <setupFPU()+0x87>
c00142b8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142be:	84 c0                	test   al,al
c00142c0:	79 19                	jns    c00142db <setupFPU()+0x4f>
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	68 58 01 00 00       	push   0x158
c00142ca:	e8 55 b3 ff ff       	call   c000f624 <malloc>
c00142cf:	89 c3                	mov    ebx,eax
c00142d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d4:	e8 31 08 01 00       	call   c0024b0a <SSE::SSE()>
c00142d9:	eb 38                	jmp    c0014313 <setupFPU()+0x87>
c00142db:	a8 20                	test   al,0x20
c00142dd:	74 19                	je     c00142f8 <setupFPU()+0x6c>
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	68 58 01 00 00       	push   0x158
c00142e7:	e8 38 b3 ff ff       	call   c000f624 <malloc>
c00142ec:	89 c3                	mov    ebx,eax
c00142ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f1:	e8 7e 07 01 00       	call   c0024a74 <MMX::MMX()>
c00142f6:	eb 1b                	jmp    c0014313 <setupFPU()+0x87>
c00142f8:	a8 10                	test   al,0x10
c00142fa:	74 1c                	je     c0014318 <setupFPU()+0x8c>
c00142fc:	83 ec 0c             	sub    esp,0xc
c00142ff:	68 58 01 00 00       	push   0x158
c0014304:	e8 1b b3 ff ff       	call   c000f624 <malloc>
c0014309:	89 c3                	mov    ebx,eax
c001430b:	89 04 24             	mov    DWORD PTR [esp],eax
c001430e:	e8 85 08 01 00       	call   c0024b98 <x87::x87()>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	eb 24                	jmp    c001433c <setupFPU()+0xb0>
c0014318:	83 e0 ef             	and    eax,0xffffffef
c001431b:	83 ec 0c             	sub    esp,0xc
c001431e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014324:	68 08 a1 02 c0       	push   0xc002a108
c0014329:	e8 c5 e5 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001432e:	0f 20 c0             	mov    eax,cr0
c0014331:	83 c8 04             	or     eax,0x4
c0014334:	0f 22 c0             	mov    cr0,eax
c0014337:	31 db                	xor    ebx,ebx
c0014339:	83 c4 10             	add    esp,0x10
c001433c:	89 d8                	mov    eax,ebx
c001433e:	83 c4 08             	add    esp,0x8
c0014341:	5b                   	pop    ebx
c0014342:	c3                   	ret    
c0014343:	90                   	nop

c0014344 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014348:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001434c:	c1 e0 04             	shl    eax,0x4
c001434f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014353:	8d 50 10             	lea    edx,[eax+0x10]
c0014356:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001435c:	74 08                	je     c0014366 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001435e:	83 c0 04             	add    eax,0x4
c0014361:	39 d0                	cmp    eax,edx
c0014363:	75 f1                	jne    c0014356 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014365:	c3                   	ret    
c0014366:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014370:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001437a:	eb e2                	jmp    c001435e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001437c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001437c:	57                   	push   edi
c001437d:	31 c0                	xor    eax,eax
c001437f:	56                   	push   esi
c0014380:	53                   	push   ebx
c0014381:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014385:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014389:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001438d:	89 da                	mov    edx,ebx
c001438f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014393:	c1 e2 04             	shl    edx,0x4
c0014396:	01 ca                	add    edx,ecx
c0014398:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143a0:	74 16                	je     c00143b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143a2:	40                   	inc    eax
c00143a3:	83 f8 04             	cmp    eax,0x4
c00143a6:	75 f0                	jne    c0014398 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143a8:	c7 44 24 10 4c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a14c
c00143b0:	5b                   	pop    ebx
c00143b1:	5e                   	pop    esi
c00143b2:	5f                   	pop    edi
c00143b3:	e9 6d 58 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c00143b8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143be:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143c4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143ca:	5b                   	pop    ebx
c00143cb:	5e                   	pop    esi
c00143cc:	5f                   	pop    edi
c00143cd:	c3                   	ret    

c00143ce <doubleFault(regs*, void*)>:
c00143ce:	55                   	push   ebp
c00143cf:	89 e5                	mov    ebp,esp
c00143d1:	83 ec 08             	sub    esp,0x8
c00143d4:	83 ec 0c             	sub    esp,0xc
c00143d7:	68 87 a1 02 c0       	push   0xc002a187
c00143dc:	e8 44 58 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	90                   	nop
c00143e5:	c9                   	leave  
c00143e6:	c3                   	ret    
c00143e7:	90                   	nop

c00143e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143e8:	56                   	push   esi
c00143e9:	53                   	push   ebx
c00143ea:	50                   	push   eax
c00143eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143f3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143f8:	75 35                	jne    c001442f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143fa:	8d 43 20             	lea    eax,[ebx+0x20]
c00143fd:	31 d2                	xor    edx,edx
c00143ff:	89 c1                	mov    ecx,eax
c0014401:	c1 e1 04             	shl    ecx,0x4
c0014404:	01 f1                	add    ecx,esi
c0014406:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001440e:	74 3e                	je     c001444e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014410:	42                   	inc    edx
c0014411:	83 fa 04             	cmp    edx,0x4
c0014414:	75 f0                	jne    c0014406 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	68 cc a1 02 c0       	push   0xc002a1cc
c001441e:	e8 02 58 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442b:	5a                   	pop    edx
c001442c:	5b                   	pop    ebx
c001442d:	5e                   	pop    esi
c001442e:	c3                   	ret    
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	56                   	push   esi
c0014433:	e8 ce fb ff ff       	call   c0014006 <Device::getName()>
c0014438:	83 c4 10             	add    esp,0x10
c001443b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001443e:	75 ba                	jne    c00143fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014440:	83 fb 0f             	cmp    ebx,0xf
c0014443:	7f 29                	jg     c001446e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014445:	0f b6 9b 00 c9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3700]
c001444c:	eb ac                	jmp    c00143fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001444e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014451:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014455:	8d 04 86             	lea    eax,[esi+eax*4]
c0014458:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001445e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014462:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014468:	89 d8                	mov    eax,ebx
c001446a:	5a                   	pop    edx
c001446b:	5b                   	pop    ebx
c001446c:	5e                   	pop    esi
c001446d:	c3                   	ret    
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	68 94 a1 02 c0       	push   0xc002a194
c0014476:	e8 aa 57 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c001447b:	83 c4 10             	add    esp,0x10
c001447e:	e9 77 ff ff ff       	jmp    c00143fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014483:	90                   	nop

c0014484 <InterruptController::clearAllHandlers(int, bool)>:
c0014484:	56                   	push   esi
c0014485:	53                   	push   ebx
c0014486:	52                   	push   edx
c0014487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001448b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001448f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014494:	75 61                	jne    c00144f7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014496:	8d 46 20             	lea    eax,[esi+0x20]
c0014499:	c1 e6 04             	shl    esi,0x4
c001449c:	c1 e0 04             	shl    eax,0x4
c001449f:	01 de                	add    esi,ebx
c00144a1:	01 d8                	add    eax,ebx
c00144a3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144ad:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144b7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144c1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144cb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144d5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144df:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144e9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144f3:	58                   	pop    eax
c00144f4:	5b                   	pop    ebx
c00144f5:	5e                   	pop    esi
c00144f6:	c3                   	ret    
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	53                   	push   ebx
c00144fb:	e8 06 fb ff ff       	call   c0014006 <Device::getName()>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014506:	75 8e                	jne    c0014496 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014508:	83 fe 0f             	cmp    esi,0xf
c001450b:	7f 09                	jg     c0014516 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001450d:	0f b6 b6 00 c9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3700]
c0014514:	eb 80                	jmp    c0014496 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	68 08 a2 02 c0       	push   0xc002a208
c001451e:	e8 02 57 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0014523:	83 c4 10             	add    esp,0x10
c0014526:	e9 6b ff ff ff       	jmp    c0014496 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001452b:	90                   	nop

c001452c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001452c:	56                   	push   esi
c001452d:	53                   	push   ebx
c001452e:	52                   	push   edx
c001452f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014533:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014537:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001453c:	75 3a                	jne    c0014578 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001453e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014542:	8d 50 20             	lea    edx,[eax+0x20]
c0014545:	c1 e2 04             	shl    edx,0x4
c0014548:	8d 04 16             	lea    eax,[esi+edx*1]
c001454b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001454f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014555:	74 0b                	je     c0014562 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014557:	83 c0 04             	add    eax,0x4
c001455a:	39 d0                	cmp    eax,edx
c001455c:	75 f1                	jne    c001454f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001455e:	58                   	pop    eax
c001455f:	5b                   	pop    ebx
c0014560:	5e                   	pop    esi
c0014561:	c3                   	ret    
c0014562:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001456c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014576:	eb df                	jmp    c0014557 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014578:	83 ec 0c             	sub    esp,0xc
c001457b:	56                   	push   esi
c001457c:	e8 85 fa ff ff       	call   c0014006 <Device::getName()>
c0014581:	83 c4 10             	add    esp,0x10
c0014584:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014587:	75 b5                	jne    c001453e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014589:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001458e:	7f 11                	jg     c00145a1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014590:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014594:	0f b6 80 00 c9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3700]
c001459b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001459f:	eb 9d                	jmp    c001453e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	68 08 a2 02 c0       	push   0xc002a208
c00145a9:	e8 77 56 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	eb 8b                	jmp    c001453e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145b3 <nmiHandler(regs*, void*)>:
c00145b3:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00145b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145bc:	e9 af a7 ff ff       	jmp    c000ed70 <Computer::handleNMI()>

c00145c1 <int_handler>:
c00145c1:	55                   	push   ebp
c00145c2:	57                   	push   edi
c00145c3:	56                   	push   esi
c00145c4:	53                   	push   ebx
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145cc:	80 3d e0 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1e0,0x0
c00145d3:	74 0b                	je     c00145e0 <int_handler+0x1f>
c00145d5:	fa                   	cli    
c00145d6:	f4                   	hlt    
c00145d7:	80 3d e0 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1e0,0x0
c00145de:	75 f5                	jne    c00145d5 <int_handler+0x14>
c00145e0:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00145e5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145ee:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145f4:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145f7:	83 f8 17             	cmp    eax,0x17
c00145fa:	77 13                	ja     c001460f <int_handler+0x4e>
c00145fc:	83 ec 08             	sub    esp,0x8
c00145ff:	8b 17                	mov    edx,DWORD PTR [edi]
c0014601:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014604:	0f b6 c0             	movzx  eax,al
c0014607:	50                   	push   eax
c0014608:	57                   	push   edi
c0014609:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	83 c3 15             	add    ebx,0x15
c0014612:	c1 e3 04             	shl    ebx,0x4
c0014615:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014619:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014620:	31 db                	xor    ebx,ebx
c0014622:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014626:	85 c0                	test   eax,eax
c0014628:	74 13                	je     c001463d <int_handler+0x7c>
c001462a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001462d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014631:	74 1c                	je     c001464f <int_handler+0x8e>
c0014633:	83 ec 08             	sub    esp,0x8
c0014636:	52                   	push   edx
c0014637:	56                   	push   esi
c0014638:	ff d0                	call   eax
c001463a:	83 c4 10             	add    esp,0x10
c001463d:	43                   	inc    ebx
c001463e:	83 fb 04             	cmp    ebx,0x4
c0014641:	75 df                	jne    c0014622 <int_handler+0x61>
c0014643:	83 c4 0c             	add    esp,0xc
c0014646:	31 c0                	xor    eax,eax
c0014648:	5b                   	pop    ebx
c0014649:	31 d2                	xor    edx,edx
c001464b:	5e                   	pop    esi
c001464c:	5f                   	pop    edi
c001464d:	5d                   	pop    ebp
c001464e:	c3                   	ret    
c001464f:	83 ec 08             	sub    esp,0x8
c0014652:	52                   	push   edx
c0014653:	56                   	push   esi
c0014654:	ff d0                	call   eax
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	83 c4 0c             	add    esp,0xc
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	5d                   	pop    ebp
c0014660:	c3                   	ret    
c0014661:	90                   	nop

c0014662 <InterruptController::InterruptController(char const*)>:
c0014662:	83 ec 1c             	sub    esp,0x1c
c0014665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014669:	83 ec 08             	sub    esp,0x8
c001466c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014670:	50                   	push   eax
c0014671:	e8 94 f8 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c001467e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014682:	89 10                	mov    DWORD PTR [eax],edx
c0014684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014688:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014692:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001469a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146a2:	7f 5e                	jg     c0014702 <InterruptController::InterruptController(char const*)+0xa0>
c00146a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146ac:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146b1:	7f 49                	jg     c00146fc <InterruptController::InterruptController(char const*)+0x9a>
c00146b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146bb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146c6:	01 ca                	add    edx,ecx
c00146c8:	83 c2 54             	add    edx,0x54
c00146cb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146db:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146e6:	01 ca                	add    edx,ecx
c00146e8:	81 c2 54 04 00 00    	add    edx,0x454
c00146ee:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146f6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146fa:	eb b0                	jmp    c00146ac <InterruptController::InterruptController(char const*)+0x4a>
c00146fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014700:	eb 98                	jmp    c001469a <InterruptController::InterruptController(char const*)+0x38>
c0014702:	90                   	nop
c0014703:	83 c4 1c             	add    esp,0x1c
c0014706:	c3                   	ret    
c0014707:	90                   	nop

c0014708 <InterruptController::~InterruptController()>:
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c0014710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014714:	89 10                	mov    DWORD PTR [eax],edx
c0014716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	50                   	push   eax
c001471e:	e8 c9 f4 ff ff       	call   c0013bec <Device::~Device()>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	90                   	nop
c0014727:	83 c4 0c             	add    esp,0xc
c001472a:	c3                   	ret    
c001472b:	90                   	nop

c001472c <InterruptController::~InterruptController()>:
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	83 ec 0c             	sub    esp,0xc
c0014732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014736:	e8 cd ff ff ff       	call   c0014708 <InterruptController::~InterruptController()>
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	83 ec 08             	sub    esp,0x8
c0014741:	68 58 21 00 00       	push   0x2158
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	e8 c4 e0 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	83 c4 0c             	add    esp,0xc
c0014755:	c3                   	ret    

c0014756 <displayDebugInfo(regs*)>:
c0014756:	55                   	push   ebp
c0014757:	57                   	push   edi
c0014758:	56                   	push   esi
c0014759:	53                   	push   ebx
c001475a:	83 ec 24             	sub    esp,0x24
c001475d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014761:	0f 20 c2             	mov    edx,cr0
c0014764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014768:	0f 20 d7             	mov    edi,cr2
c001476b:	0f 20 de             	mov    esi,cr3
c001476e:	0f 20 e5             	mov    ebp,cr4
c0014771:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014774:	68 42 a2 02 c0       	push   0xc002a242
c0014779:	e8 75 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001477e:	58                   	pop    eax
c001477f:	5a                   	pop    edx
c0014780:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014783:	68 4d a2 02 c0       	push   0xc002a24d
c0014788:	e8 66 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001478d:	59                   	pop    ecx
c001478e:	58                   	pop    eax
c001478f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014792:	68 58 a2 02 c0       	push   0xc002a258
c0014797:	e8 57 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147a1:	68 63 a2 02 c0       	push   0xc002a263
c00147a6:	e8 48 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ab:	59                   	pop    ecx
c00147ac:	58                   	pop    eax
c00147ad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147b0:	68 6e a2 02 c0       	push   0xc002a26e
c00147b5:	e8 39 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ba:	58                   	pop    eax
c00147bb:	5a                   	pop    edx
c00147bc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147bf:	68 79 a2 02 c0       	push   0xc002a279
c00147c4:	e8 2a e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147c9:	59                   	pop    ecx
c00147ca:	58                   	pop    eax
c00147cb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147ce:	68 84 a2 02 c0       	push   0xc002a284
c00147d3:	e8 1b e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147d8:	58                   	pop    eax
c00147d9:	5a                   	pop    edx
c00147da:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147dd:	68 8f a2 02 c0       	push   0xc002a28f
c00147e2:	e8 0c e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147e7:	59                   	pop    ecx
c00147e8:	58                   	pop    eax
c00147e9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147ec:	68 9a a2 02 c0       	push   0xc002a29a
c00147f1:	e8 fd e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147f6:	58                   	pop    eax
c00147f7:	5a                   	pop    edx
c00147f8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147fb:	68 a9 a2 02 c0       	push   0xc002a2a9
c0014800:	e8 ee e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014805:	59                   	pop    ecx
c0014806:	58                   	pop    eax
c0014807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001480a:	68 b4 a2 02 c0       	push   0xc002a2b4
c001480f:	e8 df e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014814:	58                   	pop    eax
c0014815:	5a                   	pop    edx
c0014816:	57                   	push   edi
c0014817:	68 bf a2 02 c0       	push   0xc002a2bf
c001481c:	e8 d2 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014821:	59                   	pop    ecx
c0014822:	58                   	pop    eax
c0014823:	56                   	push   esi
c0014824:	68 ca a2 02 c0       	push   0xc002a2ca
c0014829:	e8 c5 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001482e:	58                   	pop    eax
c001482f:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014834:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483a:	e8 76 c2 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c001483f:	58                   	pop    eax
c0014840:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014843:	5a                   	pop    edx
c0014844:	c1 e0 05             	shl    eax,0x5
c0014847:	05 60 c6 02 c0       	add    eax,0xc002c660
c001484c:	50                   	push   eax
c001484d:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014852:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014858:	e8 77 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001485d:	59                   	pop    ecx
c001485e:	58                   	pop    eax
c001485f:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014864:	68 d5 a2 02 c0       	push   0xc002a2d5
c0014869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486f:	e8 60 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014874:	58                   	pop    eax
c0014875:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001487a:	5a                   	pop    edx
c001487b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001487e:	83 c0 0c             	add    eax,0xc
c0014881:	50                   	push   eax
c0014882:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014887:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488d:	e8 42 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014892:	59                   	pop    ecx
c0014893:	58                   	pop    eax
c0014894:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014899:	68 de a2 02 c0       	push   0xc002a2de
c001489e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a4:	e8 2b c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148a9:	58                   	pop    eax
c00148aa:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00148af:	5a                   	pop    edx
c00148b0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b9:	e8 3c c6 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148be:	59                   	pop    ecx
c00148bf:	58                   	pop    eax
c00148c0:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00148c5:	68 e6 a2 02 c0       	push   0xc002a2e6
c00148ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d0:	e8 ff c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148d5:	58                   	pop    eax
c00148d6:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00148db:	5a                   	pop    edx
c00148dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e5:	e8 10 c6 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148ea:	59                   	pop    ecx
c00148eb:	58                   	pop    eax
c00148ec:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00148f1:	68 ee a2 02 c0       	push   0xc002a2ee
c00148f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fc:	e8 d3 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014901:	58                   	pop    eax
c0014902:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014907:	5a                   	pop    edx
c0014908:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001490b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014911:	e8 e4 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014916:	59                   	pop    ecx
c0014917:	58                   	pop    eax
c0014918:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c001491d:	68 f6 a2 02 c0       	push   0xc002a2f6
c0014922:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014928:	e8 a7 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001492d:	58                   	pop    eax
c001492e:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014933:	5a                   	pop    edx
c0014934:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014937:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493d:	e8 b8 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014942:	59                   	pop    ecx
c0014943:	58                   	pop    eax
c0014944:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014949:	68 fe a2 02 c0       	push   0xc002a2fe
c001494e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014954:	e8 7b c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014959:	58                   	pop    eax
c001495a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c001495f:	5a                   	pop    edx
c0014960:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014963:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014969:	e8 8c c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001496e:	59                   	pop    ecx
c001496f:	58                   	pop    eax
c0014970:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014975:	68 06 a3 02 c0       	push   0xc002a306
c001497a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014980:	e8 4f c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014985:	58                   	pop    eax
c0014986:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c001498b:	5a                   	pop    edx
c001498c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001498f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014995:	e8 60 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001499a:	59                   	pop    ecx
c001499b:	58                   	pop    eax
c001499c:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00149a1:	68 0e a3 02 c0       	push   0xc002a30e
c00149a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ac:	e8 23 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149b1:	58                   	pop    eax
c00149b2:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00149b7:	5a                   	pop    edx
c00149b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149bc:	52                   	push   edx
c00149bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c3:	e8 32 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149c8:	59                   	pop    ecx
c00149c9:	58                   	pop    eax
c00149ca:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00149cf:	68 17 a3 02 c0       	push   0xc002a317
c00149d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149da:	e8 f5 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149df:	58                   	pop    eax
c00149e0:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00149e5:	5a                   	pop    edx
c00149e6:	57                   	push   edi
c00149e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ed:	e8 08 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149f2:	59                   	pop    ecx
c00149f3:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00149f8:	5f                   	pop    edi
c00149f9:	68 1f a3 02 c0       	push   0xc002a31f
c00149fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a04:	e8 cb c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a09:	58                   	pop    eax
c0014a0a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a0f:	5a                   	pop    edx
c0014a10:	56                   	push   esi
c0014a11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a17:	e8 de c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a1c:	59                   	pop    ecx
c0014a1d:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a22:	5e                   	pop    esi
c0014a23:	68 27 a3 02 c0       	push   0xc002a327
c0014a28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2e:	e8 a1 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a33:	5f                   	pop    edi
c0014a34:	58                   	pop    eax
c0014a35:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a3a:	55                   	push   ebp
c0014a3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a41:	e8 b4 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a46:	58                   	pop    eax
c0014a47:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a4c:	5a                   	pop    edx
c0014a4d:	68 2f a3 02 c0       	push   0xc002a32f
c0014a52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a58:	e8 77 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a5d:	0f 21 c0             	mov    eax,db0
c0014a60:	59                   	pop    ecx
c0014a61:	5e                   	pop    esi
c0014a62:	50                   	push   eax
c0014a63:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6e:	e8 87 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a73:	5f                   	pop    edi
c0014a74:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a79:	5d                   	pop    ebp
c0014a7a:	68 38 a3 02 c0       	push   0xc002a338
c0014a7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a85:	e8 4a c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a8a:	0f 21 c8             	mov    eax,db1
c0014a8d:	5a                   	pop    edx
c0014a8e:	59                   	pop    ecx
c0014a8f:	50                   	push   eax
c0014a90:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014a95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9b:	e8 5a c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014aa0:	5e                   	pop    esi
c0014aa1:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014aa6:	5f                   	pop    edi
c0014aa7:	68 40 a3 02 c0       	push   0xc002a340
c0014aac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab2:	e8 1d c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014ab7:	0f 21 d0             	mov    eax,db2
c0014aba:	5d                   	pop    ebp
c0014abb:	5a                   	pop    edx
c0014abc:	50                   	push   eax
c0014abd:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014ac2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac8:	e8 2d c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014acd:	59                   	pop    ecx
c0014ace:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014ad3:	5e                   	pop    esi
c0014ad4:	68 48 a3 02 c0       	push   0xc002a348
c0014ad9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014adf:	e8 f0 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014ae4:	0f 21 d8             	mov    eax,db3
c0014ae7:	5f                   	pop    edi
c0014ae8:	5d                   	pop    ebp
c0014ae9:	50                   	push   eax
c0014aea:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014aef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af5:	e8 00 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014afa:	58                   	pop    eax
c0014afb:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b00:	5a                   	pop    edx
c0014b01:	68 50 a3 02 c0       	push   0xc002a350
c0014b06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0c:	e8 c3 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b11:	0f 21 f0             	mov    eax,db6
c0014b14:	59                   	pop    ecx
c0014b15:	5e                   	pop    esi
c0014b16:	50                   	push   eax
c0014b17:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b22:	e8 d3 c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b27:	5f                   	pop    edi
c0014b28:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b2d:	5d                   	pop    ebp
c0014b2e:	68 58 a3 02 c0       	push   0xc002a358
c0014b33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b39:	e8 96 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b3e:	0f 21 f8             	mov    eax,db7
c0014b41:	5a                   	pop    edx
c0014b42:	59                   	pop    ecx
c0014b43:	50                   	push   eax
c0014b44:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4f:	e8 a6 c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b54:	5e                   	pop    esi
c0014b55:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b58:	e8 15 80 00 00       	call   c001cb72 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b5d:	83 c4 10             	add    esp,0x10
c0014b60:	85 c0                	test   eax,eax
c0014b62:	74 3c                	je     c0014ba0 <displayDebugInfo(regs*)+0x44a>
c0014b64:	89 c3                	mov    ebx,eax
c0014b66:	50                   	push   eax
c0014b67:	50                   	push   eax
c0014b68:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b6d:	68 60 a3 02 c0       	push   0xc002a360
c0014b72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b78:	e8 57 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b7d:	5a                   	pop    edx
c0014b7e:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0014b83:	59                   	pop    ecx
c0014b84:	53                   	push   ebx
c0014b85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8b:	e8 44 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b90:	5e                   	pop    esi
c0014b91:	5f                   	pop    edi
c0014b92:	53                   	push   ebx
c0014b93:	68 6c a3 02 c0       	push   0xc002a36c
c0014b98:	e8 56 dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	fa                   	cli    
c0014ba1:	f4                   	hlt    
c0014ba2:	eb fe                	jmp    c0014ba2 <displayDebugInfo(regs*)+0x44c>

c0014ba4 <x87EmulHandler(regs*, void*)>:
c0014ba4:	53                   	push   ebx
c0014ba5:	83 ec 14             	sub    esp,0x14
c0014ba8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bac:	53                   	push   ebx
c0014bad:	e8 18 a3 00 00       	call   c001eeca <Vm::x87Handler(regs*)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	84 c0                	test   al,al
c0014bb7:	74 05                	je     c0014bbe <x87EmulHandler(regs*, void*)+0x1a>
c0014bb9:	83 c4 08             	add    esp,0x8
c0014bbc:	5b                   	pop    ebx
c0014bbd:	c3                   	ret    
c0014bbe:	83 ec 0c             	sub    esp,0xc
c0014bc1:	68 7a a3 02 c0       	push   0xc002a37a
c0014bc6:	e8 28 dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014bcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bce:	e8 83 fb ff ff       	call   c0014756 <displayDebugInfo(regs*)>

c0014bd3 <gpFault(regs*, void*)>:
c0014bd3:	53                   	push   ebx
c0014bd4:	83 ec 14             	sub    esp,0x14
c0014bd7:	c7 05 50 d8 02 c0 47 e2 01 c0 	mov    DWORD PTR ds:0xc002d850,0xc001e247
c0014be1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014be5:	53                   	push   ebx
c0014be6:	e8 5c 96 00 00       	call   c001e247 <Vm::faultHandler(regs*)>
c0014beb:	83 c4 10             	add    esp,0x10
c0014bee:	84 c0                	test   al,al
c0014bf0:	74 05                	je     c0014bf7 <gpFault(regs*, void*)+0x24>
c0014bf2:	83 c4 08             	add    esp,0x8
c0014bf5:	5b                   	pop    ebx
c0014bf6:	c3                   	ret    
c0014bf7:	83 ec 0c             	sub    esp,0xc
c0014bfa:	68 90 a3 02 c0       	push   0xc002a390
c0014bff:	e8 ef dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c07:	e8 4a fb ff ff       	call   c0014756 <displayDebugInfo(regs*)>

c0014c0c <pgFault(regs*, void*)>:
c0014c0c:	83 ec 18             	sub    esp,0x18
c0014c0f:	68 ab a3 02 c0       	push   0xc002a3ab
c0014c14:	e8 da dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c19:	58                   	pop    eax
c0014c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c1e:	e8 33 fb ff ff       	call   c0014756 <displayDebugInfo(regs*)>

c0014c23 <otherISRHandler(regs*, void*)>:
c0014c23:	53                   	push   ebx
c0014c24:	83 ec 0c             	sub    esp,0xc
c0014c27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c2b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c2e:	50                   	push   eax
c0014c2f:	50                   	push   eax
c0014c30:	68 b8 a3 02 c0       	push   0xc002a3b8
c0014c35:	e8 b9 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c3d:	e8 14 fb ff ff       	call   c0014756 <displayDebugInfo(regs*)>

c0014c42 <opcodeFault(regs*, void*)>:
c0014c42:	55                   	push   ebp
c0014c43:	89 e5                	mov    ebp,esp
c0014c45:	56                   	push   esi
c0014c46:	53                   	push   ebx
c0014c47:	83 ec 40             	sub    esp,0x40
c0014c4a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0014c4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c55:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014c5b:	84 c0                	test   al,al
c0014c5d:	74 24                	je     c0014c83 <opcodeFault(regs*, void*)+0x41>
c0014c5f:	83 ec 0c             	sub    esp,0xc
c0014c62:	68 d8 a3 02 c0       	push   0xc002a3d8
c0014c67:	e8 87 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c6c:	83 c4 10             	add    esp,0x10
c0014c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c75:	8d 50 19             	lea    edx,[eax+0x19]
c0014c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c7e:	e9 be 05 00 00       	jmp    c0015241 <opcodeFault(regs*, void*)+0x5ff>
c0014c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c89:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c8c:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c90:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca2:	3c f0                	cmp    al,0xf0
c0014ca4:	75 17                	jne    c0014cbd <opcodeFault(regs*, void*)+0x7b>
c0014ca6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014caf:	8d 50 01             	lea    edx,[eax+0x1]
c0014cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb8:	e9 da 00 00 00       	jmp    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014cbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc0:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc2:	3c f2                	cmp    al,0xf2
c0014cc4:	74 09                	je     c0014ccf <opcodeFault(regs*, void*)+0x8d>
c0014cc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccb:	3c f3                	cmp    al,0xf3
c0014ccd:	75 1b                	jne    c0014cea <opcodeFault(regs*, void*)+0xa8>
c0014ccf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cd3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cdc:	8d 50 01             	lea    edx,[eax+0x1]
c0014cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce5:	e9 ad 00 00 00       	jmp    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ced:	8a 00                	mov    al,BYTE PTR [eax]
c0014cef:	3c 66                	cmp    al,0x66
c0014cf1:	75 1f                	jne    c0014d12 <opcodeFault(regs*, void*)+0xd0>
c0014cf3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cf7:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014cfb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d04:	8d 50 01             	lea    edx,[eax+0x1]
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0d:	e9 85 00 00 00       	jmp    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	8a 00                	mov    al,BYTE PTR [eax]
c0014d17:	3c 67                	cmp    al,0x67
c0014d19:	75 18                	jne    c0014d33 <opcodeFault(regs*, void*)+0xf1>
c0014d1b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d1f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d28:	8d 50 01             	lea    edx,[eax+0x1]
c0014d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d31:	eb 64                	jmp    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d36:	8a 00                	mov    al,BYTE PTR [eax]
c0014d38:	3c 2e                	cmp    al,0x2e
c0014d3a:	74 09                	je     c0014d45 <opcodeFault(regs*, void*)+0x103>
c0014d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d41:	3c 3e                	cmp    al,0x3e
c0014d43:	75 18                	jne    c0014d5d <opcodeFault(regs*, void*)+0x11b>
c0014d45:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d52:	8d 50 01             	lea    edx,[eax+0x1]
c0014d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d5b:	eb 3a                	jmp    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d60:	8a 00                	mov    al,BYTE PTR [eax]
c0014d62:	3c 36                	cmp    al,0x36
c0014d64:	74 1b                	je     c0014d81 <opcodeFault(regs*, void*)+0x13f>
c0014d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d69:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6b:	3c 26                	cmp    al,0x26
c0014d6d:	74 12                	je     c0014d81 <opcodeFault(regs*, void*)+0x13f>
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8a 00                	mov    al,BYTE PTR [eax]
c0014d74:	3c 64                	cmp    al,0x64
c0014d76:	74 09                	je     c0014d81 <opcodeFault(regs*, void*)+0x13f>
c0014d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7d:	3c 65                	cmp    al,0x65
c0014d7f:	75 16                	jne    c0014d97 <opcodeFault(regs*, void*)+0x155>
c0014d81:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d8e:	8d 50 01             	lea    edx,[eax+0x1]
c0014d91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d94:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9c:	3c 0f                	cmp    al,0xf
c0014d9e:	0f 85 ad 00 00 00    	jne    c0014e51 <opcodeFault(regs*, void*)+0x20f>
c0014da4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da7:	40                   	inc    eax
c0014da8:	8a 00                	mov    al,BYTE PTR [eax]
c0014daa:	3c c2                	cmp    al,0xc2
c0014dac:	74 0e                	je     c0014dbc <opcodeFault(regs*, void*)+0x17a>
c0014dae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db1:	40                   	inc    eax
c0014db2:	8a 00                	mov    al,BYTE PTR [eax]
c0014db4:	3c c3                	cmp    al,0xc3
c0014db6:	0f 85 95 00 00 00    	jne    c0014e51 <opcodeFault(regs*, void*)+0x20f>
c0014dbc:	83 ec 0c             	sub    esp,0xc
c0014dbf:	68 fb a3 02 c0       	push   0xc002a3fb
c0014dc4:	e8 2a db ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd2:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ddb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de1:	8a 00                	mov    al,BYTE PTR [eax]
c0014de3:	8d 50 fe             	lea    edx,[eax-0x2]
c0014de6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de9:	88 10                	mov    BYTE PTR [eax],dl
c0014deb:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014dee:	50                   	push   eax
c0014def:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014df2:	50                   	push   eax
c0014df3:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014df6:	50                   	push   eax
c0014df7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014dfa:	e8 57 46 00 00       	call   c0019456 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014dff:	83 c4 10             	add    esp,0x10
c0014e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e08:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e0b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e0e:	01 d0                	add    eax,edx
c0014e10:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e19:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e1c:	48                   	dec    eax
c0014e1d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e23:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2c:	83 ec 04             	sub    esp,0x4
c0014e2f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e32:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e35:	50                   	push   eax
c0014e36:	e8 79 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e41:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e44:	01 c2                	add    edx,eax
c0014e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e49:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e4c:	e9 f0 03 00 00       	jmp    c0015241 <opcodeFault(regs*, void*)+0x5ff>
c0014e51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e54:	8a 00                	mov    al,BYTE PTR [eax]
c0014e56:	3c 0f                	cmp    al,0xf
c0014e58:	0f 85 8b 01 00 00    	jne    c0014fe9 <opcodeFault(regs*, void*)+0x3a7>
c0014e5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e61:	40                   	inc    eax
c0014e62:	8a 00                	mov    al,BYTE PTR [eax]
c0014e64:	3c c7                	cmp    al,0xc7
c0014e66:	0f 86 7d 01 00 00    	jbe    c0014fe9 <opcodeFault(regs*, void*)+0x3a7>
c0014e6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6f:	40                   	inc    eax
c0014e70:	8a 00                	mov    al,BYTE PTR [eax]
c0014e72:	3c cf                	cmp    al,0xcf
c0014e74:	0f 87 6f 01 00 00    	ja     c0014fe9 <opcodeFault(regs*, void*)+0x3a7>
c0014e7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7d:	40                   	inc    eax
c0014e7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e80:	83 c0 38             	add    eax,0x38
c0014e83:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e86:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e8a:	75 0b                	jne    c0014e97 <opcodeFault(regs*, void*)+0x255>
c0014e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e95:	eb 75                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014e97:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e9b:	75 0b                	jne    c0014ea8 <opcodeFault(regs*, void*)+0x266>
c0014e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ea3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea6:	eb 64                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014ea8:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014eac:	75 0b                	jne    c0014eb9 <opcodeFault(regs*, void*)+0x277>
c0014eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014eb4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eb7:	eb 53                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014eb9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ebd:	75 0b                	jne    c0014eca <opcodeFault(regs*, void*)+0x288>
c0014ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ec8:	eb 42                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014eca:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ece:	75 0b                	jne    c0014edb <opcodeFault(regs*, void*)+0x299>
c0014ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ed6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ed9:	eb 31                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014edb:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014edf:	75 0b                	jne    c0014eec <opcodeFault(regs*, void*)+0x2aa>
c0014ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ee7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eea:	eb 20                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014eec:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ef0:	75 0b                	jne    c0014efd <opcodeFault(regs*, void*)+0x2bb>
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ef8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014efb:	eb 0f                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014efd:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f01:	75 09                	jne    c0014f0c <opcodeFault(regs*, void*)+0x2ca>
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0c:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f10:	74 10                	je     c0014f22 <opcodeFault(regs*, void*)+0x2e0>
c0014f12:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f19:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f20:	eb 2d                	jmp    c0014f4f <opcodeFault(regs*, void*)+0x30d>
c0014f22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f25:	c1 e0 18             	shl    eax,0x18
c0014f28:	89 c2                	mov    edx,eax
c0014f2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f2d:	c1 e0 08             	shl    eax,0x8
c0014f30:	25 00 00 ff 00       	and    eax,0xff0000
c0014f35:	09 c2                	or     edx,eax
c0014f37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f3a:	c1 e8 08             	shr    eax,0x8
c0014f3d:	25 00 ff 00 00       	and    eax,0xff00
c0014f42:	09 c2                	or     edx,eax
c0014f44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f47:	c1 e8 18             	shr    eax,0x18
c0014f4a:	09 d0                	or     eax,edx
c0014f4c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f4f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f53:	75 0b                	jne    c0014f60 <opcodeFault(regs*, void*)+0x31e>
c0014f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f58:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f5b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f5e:	eb 75                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014f60:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f64:	75 0b                	jne    c0014f71 <opcodeFault(regs*, void*)+0x32f>
c0014f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f69:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f6c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f6f:	eb 64                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014f71:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f75:	75 0b                	jne    c0014f82 <opcodeFault(regs*, void*)+0x340>
c0014f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f7d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f80:	eb 53                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014f82:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f86:	75 0b                	jne    c0014f93 <opcodeFault(regs*, void*)+0x351>
c0014f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f8e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f91:	eb 42                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014f93:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f97:	75 0b                	jne    c0014fa4 <opcodeFault(regs*, void*)+0x362>
c0014f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f9f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014fa2:	eb 31                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014fa4:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fa8:	75 0b                	jne    c0014fb5 <opcodeFault(regs*, void*)+0x373>
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014fb3:	eb 20                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014fb5:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fb9:	75 0b                	jne    c0014fc6 <opcodeFault(regs*, void*)+0x384>
c0014fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014fc4:	eb 0f                	jmp    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014fc6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fca:	75 09                	jne    c0014fd5 <opcodeFault(regs*, void*)+0x393>
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fdb:	8d 50 02             	lea    edx,[eax+0x2]
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fe4:	e9 58 02 00 00       	jmp    c0015241 <opcodeFault(regs*, void*)+0x5ff>
c0014fe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fec:	8a 00                	mov    al,BYTE PTR [eax]
c0014fee:	3c 0f                	cmp    al,0xf
c0014ff0:	0f 85 76 01 00 00    	jne    c001516c <opcodeFault(regs*, void*)+0x52a>
c0014ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff9:	40                   	inc    eax
c0014ffa:	8a 00                	mov    al,BYTE PTR [eax]
c0014ffc:	3c c7                	cmp    al,0xc7
c0014ffe:	0f 85 68 01 00 00    	jne    c001516c <opcodeFault(regs*, void*)+0x52a>
c0015004:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001500d:	8d 50 01             	lea    edx,[eax+0x1]
c0015010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015013:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015016:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015019:	50                   	push   eax
c001501a:	8d 45 bb             	lea    eax,[ebp-0x45]
c001501d:	50                   	push   eax
c001501e:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015021:	50                   	push   eax
c0015022:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015025:	e8 2c 44 00 00       	call   c0019456 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001502a:	83 c4 10             	add    esp,0x10
c001502d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015030:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015033:	83 f0 01             	xor    eax,0x1
c0015036:	84 c0                	test   al,al
c0015038:	0f 84 2e 01 00 00    	je     c001516c <opcodeFault(regs*, void*)+0x52a>
c001503e:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015041:	3c 01                	cmp    al,0x1
c0015043:	0f 85 23 01 00 00    	jne    c001516c <opcodeFault(regs*, void*)+0x52a>
c0015049:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001504c:	83 f0 01             	xor    eax,0x1
c001504f:	84 c0                	test   al,al
c0015051:	0f 84 15 01 00 00    	je     c001516c <opcodeFault(regs*, void*)+0x52a>
c0015057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001505d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015060:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015067:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001506a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001506d:	89 c2                	mov    edx,eax
c001506f:	b8 00 00 00 00       	mov    eax,0x0
c0015074:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015077:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001507a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015080:	ba 00 00 00 00       	mov    edx,0x0
c0015085:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015088:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015091:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015094:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001509b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001509e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150a1:	89 c2                	mov    edx,eax
c00150a3:	b8 00 00 00 00       	mov    eax,0x0
c00150a8:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150ab:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150b4:	ba 00 00 00 00       	mov    edx,0x0
c00150b9:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00150bc:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00150bf:	e8 72 81 00 00       	call   c001d236 <lockScheduler()>
c00150c4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cc:	89 c1                	mov    ecx,eax
c00150ce:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00150d1:	89 cb                	mov    ebx,ecx
c00150d3:	89 d0                	mov    eax,edx
c00150d5:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00150d8:	89 c6                	mov    esi,eax
c00150da:	89 f0                	mov    eax,esi
c00150dc:	09 d8                	or     eax,ebx
c00150de:	85 c0                	test   eax,eax
c00150e0:	75 21                	jne    c0015103 <opcodeFault(regs*, void*)+0x4c1>
c00150e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00150e5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150e8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150eb:	89 01                	mov    DWORD PTR [ecx],eax
c00150ed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00150f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150f6:	83 c8 40             	or     eax,0x40
c00150f9:	89 c2                	mov    edx,eax
c00150fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fe:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015101:	eb 3e                	jmp    c0015141 <opcodeFault(regs*, void*)+0x4ff>
c0015103:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015106:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015109:	8b 00                	mov    eax,DWORD PTR [eax]
c001510b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001510e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015111:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001511a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001511d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015120:	89 d0                	mov    eax,edx
c0015122:	31 d2                	xor    edx,edx
c0015124:	89 c3                	mov    ebx,eax
c0015126:	89 d6                	mov    esi,edx
c0015128:	89 da                	mov    edx,ebx
c001512a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015136:	83 e0 bf             	and    eax,0xffffffbf
c0015139:	89 c2                	mov    edx,eax
c001513b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015141:	e8 f2 80 00 00       	call   c001d238 <unlockScheduler()>
c0015146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015149:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001514c:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001514f:	01 c2                	add    edx,eax
c0015151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015154:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	68 0a a4 02 c0       	push   0xc002a40a
c001515f:	e8 8f d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	e9 d5 00 00 00       	jmp    c0015241 <opcodeFault(regs*, void*)+0x5ff>
c001516c:	83 ec 0c             	sub    esp,0xc
c001516f:	68 1d a4 02 c0       	push   0xc002a41d
c0015174:	e8 7a d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015185:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015188:	c1 e0 04             	shl    eax,0x4
c001518b:	01 d0                	add    eax,edx
c001518d:	83 c0 03             	add    eax,0x3
c0015190:	8a 00                	mov    al,BYTE PTR [eax]
c0015192:	0f b6 d8             	movzx  ebx,al
c0015195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015198:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001519b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151a1:	c1 e0 04             	shl    eax,0x4
c00151a4:	01 d0                	add    eax,edx
c00151a6:	83 c0 02             	add    eax,0x2
c00151a9:	8a 00                	mov    al,BYTE PTR [eax]
c00151ab:	0f b6 c8             	movzx  ecx,al
c00151ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ba:	c1 e0 04             	shl    eax,0x4
c00151bd:	01 d0                	add    eax,edx
c00151bf:	40                   	inc    eax
c00151c0:	8a 00                	mov    al,BYTE PTR [eax]
c00151c2:	0f b6 d0             	movzx  edx,al
c00151c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c8:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00151cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151d1:	c1 e0 04             	shl    eax,0x4
c00151d4:	01 f0                	add    eax,esi
c00151d6:	8a 00                	mov    al,BYTE PTR [eax]
c00151d8:	0f b6 c0             	movzx  eax,al
c00151db:	83 ec 0c             	sub    esp,0xc
c00151de:	53                   	push   ebx
c00151df:	51                   	push   ecx
c00151e0:	52                   	push   edx
c00151e1:	50                   	push   eax
c00151e2:	68 30 a4 02 c0       	push   0xc002a430
c00151e7:	e8 07 d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00151ec:	83 c4 20             	add    esp,0x20
c00151ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151f5:	83 c0 03             	add    eax,0x3
c00151f8:	8a 00                	mov    al,BYTE PTR [eax]
c00151fa:	0f b6 d8             	movzx  ebx,al
c00151fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015200:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015203:	83 c0 02             	add    eax,0x2
c0015206:	8a 00                	mov    al,BYTE PTR [eax]
c0015208:	0f b6 c8             	movzx  ecx,al
c001520b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015211:	40                   	inc    eax
c0015212:	8a 00                	mov    al,BYTE PTR [eax]
c0015214:	0f b6 d0             	movzx  edx,al
c0015217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001521d:	8a 00                	mov    al,BYTE PTR [eax]
c001521f:	0f b6 c0             	movzx  eax,al
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	53                   	push   ebx
c0015226:	51                   	push   ecx
c0015227:	52                   	push   edx
c0015228:	50                   	push   eax
c0015229:	68 58 a4 02 c0       	push   0xc002a458
c001522e:	e8 c0 d6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015233:	83 c4 20             	add    esp,0x20
c0015236:	83 ec 0c             	sub    esp,0xc
c0015239:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001523c:	e8 15 f5 ff ff       	call   c0014756 <displayDebugInfo(regs*)>
c0015241:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015244:	5b                   	pop    ebx
c0015245:	5e                   	pop    esi
c0015246:	5d                   	pop    ebp
c0015247:	c3                   	ret    

c0015248 <displayProgramFault(char const*)>:
c0015248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015250:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015256:	85 c0                	test   eax,eax
c0015258:	74 15                	je     c001526f <displayProgramFault(char const*)+0x27>
c001525a:	83 ec 0c             	sub    esp,0xc
c001525d:	6a 04                	push   0x4
c001525f:	6a 0f                	push   0xf
c0015261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015265:	50                   	push   eax
c0015266:	e8 2b b9 ff ff       	call   c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001526b:	83 c4 1c             	add    esp,0x1c
c001526e:	c3                   	ret    
c001526f:	c3                   	ret    

c0015270 <setupInterruptController()>:
c0015270:	55                   	push   ebp
c0015271:	89 e5                	mov    ebp,esp
c0015273:	53                   	push   ebx
c0015274:	83 ec 24             	sub    esp,0x24
c0015277:	b8 00 00 00 00       	mov    eax,0x0
c001527c:	85 c0                	test   eax,eax
c001527e:	0f 95 c0             	setne  al
c0015281:	84 c0                	test   al,al
c0015283:	74 5b                	je     c00152e0 <setupInterruptController()+0x70>
c0015285:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001528c:	83 ec 0c             	sub    esp,0xc
c001528f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015292:	e8 8d a3 ff ff       	call   c000f624 <malloc>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	89 c3                	mov    ebx,eax
c001529c:	83 ec 0c             	sub    esp,0xc
c001529f:	53                   	push   ebx
c00152a0:	e8 31 fb 00 00       	call   c0024dd6 <APIC::APIC()>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152ab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b3:	83 c0 08             	add    eax,0x8
c00152b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b8:	6a 00                	push   0x0
c00152ba:	6a 00                	push   0x0
c00152bc:	6a 00                	push   0x0
c00152be:	52                   	push   edx
c00152bf:	ff d0                	call   eax
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00152c9:	83 ec 08             	sub    esp,0x8
c00152cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00152cf:	50                   	push   eax
c00152d0:	e8 45 ea ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152db:	e9 52 03 00 00       	jmp    c0015632 <setupInterruptController()+0x3c2>
c00152e0:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00152e5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152eb:	83 e0 01             	and    eax,0x1
c00152ee:	84 c0                	test   al,al
c00152f0:	0f 95 c0             	setne  al
c00152f3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00152f6:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015303:	e8 1c a3 ff ff       	call   c000f624 <malloc>
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	89 c3                	mov    ebx,eax
c001530d:	83 ec 0c             	sub    esp,0xc
c0015310:	53                   	push   ebx
c0015311:	e8 18 00 01 00       	call   c002532e <PIC::PIC()>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001531c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001531f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015322:	8b 00                	mov    eax,DWORD PTR [eax]
c0015324:	83 c0 08             	add    eax,0x8
c0015327:	8b 00                	mov    eax,DWORD PTR [eax]
c0015329:	6a 00                	push   0x0
c001532b:	6a 00                	push   0x0
c001532d:	6a 00                	push   0x0
c001532f:	52                   	push   edx
c0015330:	ff d0                	call   eax
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015339:	74 73                	je     c00153ae <setupInterruptController()+0x13e>
c001533b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	83 c0 0c             	add    eax,0xc
c0015346:	8b 00                	mov    eax,DWORD PTR [eax]
c0015348:	6a 00                	push   0x0
c001534a:	6a 00                	push   0x0
c001534c:	6a 00                	push   0x0
c001534e:	52                   	push   edx
c001534f:	ff d0                	call   eax
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015358:	74 15                	je     c001536f <setupInterruptController()+0xff>
c001535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535d:	8b 00                	mov    eax,DWORD PTR [eax]
c001535f:	83 c0 04             	add    eax,0x4
c0015362:	8b 00                	mov    eax,DWORD PTR [eax]
c0015364:	83 ec 0c             	sub    esp,0xc
c0015367:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536a:	ff d0                	call   eax
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015376:	83 ec 0c             	sub    esp,0xc
c0015379:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001537c:	e8 a3 a2 ff ff       	call   c000f624 <malloc>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	89 c3                	mov    ebx,eax
c0015386:	83 ec 0c             	sub    esp,0xc
c0015389:	53                   	push   ebx
c001538a:	e8 47 fa 00 00       	call   c0024dd6 <APIC::APIC()>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015395:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539b:	8b 00                	mov    eax,DWORD PTR [eax]
c001539d:	83 c0 08             	add    eax,0x8
c00153a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a2:	6a 00                	push   0x0
c00153a4:	6a 00                	push   0x0
c00153a6:	6a 00                	push   0x0
c00153a8:	52                   	push   edx
c00153a9:	ff d0                	call   eax
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00153b3:	83 ec 08             	sub    esp,0x8
c00153b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b9:	50                   	push   eax
c00153ba:	e8 5b e9 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c7:	83 c0 24             	add    eax,0x24
c00153ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cc:	6a 00                	push   0x0
c00153ce:	68 23 4c 01 c0       	push   0xc0014c23
c00153d3:	6a 00                	push   0x0
c00153d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d8:	ff d0                	call   eax
c00153da:	83 c4 10             	add    esp,0x10
c00153dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e2:	83 c0 24             	add    eax,0x24
c00153e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e7:	6a 00                	push   0x0
c00153e9:	68 23 4c 01 c0       	push   0xc0014c23
c00153ee:	6a 01                	push   0x1
c00153f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f3:	ff d0                	call   eax
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fd:	83 c0 24             	add    eax,0x24
c0015400:	8b 00                	mov    eax,DWORD PTR [eax]
c0015402:	6a 00                	push   0x0
c0015404:	68 b3 45 01 c0       	push   0xc00145b3
c0015409:	6a 02                	push   0x2
c001540b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540e:	ff d0                	call   eax
c0015410:	83 c4 10             	add    esp,0x10
c0015413:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015416:	8b 00                	mov    eax,DWORD PTR [eax]
c0015418:	83 c0 24             	add    eax,0x24
c001541b:	8b 00                	mov    eax,DWORD PTR [eax]
c001541d:	6a 00                	push   0x0
c001541f:	68 23 4c 01 c0       	push   0xc0014c23
c0015424:	6a 03                	push   0x3
c0015426:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015429:	ff d0                	call   eax
c001542b:	83 c4 10             	add    esp,0x10
c001542e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015431:	8b 00                	mov    eax,DWORD PTR [eax]
c0015433:	83 c0 24             	add    eax,0x24
c0015436:	8b 00                	mov    eax,DWORD PTR [eax]
c0015438:	6a 00                	push   0x0
c001543a:	68 23 4c 01 c0       	push   0xc0014c23
c001543f:	6a 04                	push   0x4
c0015441:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015444:	ff d0                	call   eax
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544c:	8b 00                	mov    eax,DWORD PTR [eax]
c001544e:	83 c0 24             	add    eax,0x24
c0015451:	8b 00                	mov    eax,DWORD PTR [eax]
c0015453:	6a 00                	push   0x0
c0015455:	68 23 4c 01 c0       	push   0xc0014c23
c001545a:	6a 05                	push   0x5
c001545c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545f:	ff d0                	call   eax
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015467:	8b 00                	mov    eax,DWORD PTR [eax]
c0015469:	83 c0 24             	add    eax,0x24
c001546c:	8b 00                	mov    eax,DWORD PTR [eax]
c001546e:	6a 00                	push   0x0
c0015470:	68 42 4c 01 c0       	push   0xc0014c42
c0015475:	6a 06                	push   0x6
c0015477:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547a:	ff d0                	call   eax
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015482:	8b 00                	mov    eax,DWORD PTR [eax]
c0015484:	83 c0 24             	add    eax,0x24
c0015487:	8b 00                	mov    eax,DWORD PTR [eax]
c0015489:	6a 00                	push   0x0
c001548b:	68 a4 4b 01 c0       	push   0xc0014ba4
c0015490:	6a 07                	push   0x7
c0015492:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015495:	ff d0                	call   eax
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549d:	8b 00                	mov    eax,DWORD PTR [eax]
c001549f:	83 c0 24             	add    eax,0x24
c00154a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a4:	6a 00                	push   0x0
c00154a6:	68 ce 43 01 c0       	push   0xc00143ce
c00154ab:	6a 08                	push   0x8
c00154ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b0:	ff d0                	call   eax
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ba:	83 c0 24             	add    eax,0x24
c00154bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bf:	6a 00                	push   0x0
c00154c1:	68 23 4c 01 c0       	push   0xc0014c23
c00154c6:	6a 09                	push   0x9
c00154c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cb:	ff d0                	call   eax
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d5:	83 c0 24             	add    eax,0x24
c00154d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154da:	6a 00                	push   0x0
c00154dc:	68 23 4c 01 c0       	push   0xc0014c23
c00154e1:	6a 0a                	push   0xa
c00154e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e6:	ff d0                	call   eax
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f0:	83 c0 24             	add    eax,0x24
c00154f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f5:	6a 00                	push   0x0
c00154f7:	68 23 4c 01 c0       	push   0xc0014c23
c00154fc:	6a 0b                	push   0xb
c00154fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015501:	ff d0                	call   eax
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015509:	8b 00                	mov    eax,DWORD PTR [eax]
c001550b:	83 c0 24             	add    eax,0x24
c001550e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015510:	6a 00                	push   0x0
c0015512:	68 23 4c 01 c0       	push   0xc0014c23
c0015517:	6a 0c                	push   0xc
c0015519:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551c:	ff d0                	call   eax
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015524:	8b 00                	mov    eax,DWORD PTR [eax]
c0015526:	83 c0 24             	add    eax,0x24
c0015529:	8b 00                	mov    eax,DWORD PTR [eax]
c001552b:	6a 00                	push   0x0
c001552d:	68 d3 4b 01 c0       	push   0xc0014bd3
c0015532:	6a 0d                	push   0xd
c0015534:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015537:	ff d0                	call   eax
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015541:	83 c0 24             	add    eax,0x24
c0015544:	8b 00                	mov    eax,DWORD PTR [eax]
c0015546:	6a 00                	push   0x0
c0015548:	68 0c 4c 01 c0       	push   0xc0014c0c
c001554d:	6a 0e                	push   0xe
c001554f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015552:	ff d0                	call   eax
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555a:	8b 00                	mov    eax,DWORD PTR [eax]
c001555c:	83 c0 24             	add    eax,0x24
c001555f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015561:	6a 00                	push   0x0
c0015563:	68 23 4c 01 c0       	push   0xc0014c23
c0015568:	6a 0f                	push   0xf
c001556a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556d:	ff d0                	call   eax
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015575:	8b 00                	mov    eax,DWORD PTR [eax]
c0015577:	83 c0 24             	add    eax,0x24
c001557a:	8b 00                	mov    eax,DWORD PTR [eax]
c001557c:	6a 00                	push   0x0
c001557e:	68 23 4c 01 c0       	push   0xc0014c23
c0015583:	6a 10                	push   0x10
c0015585:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015588:	ff d0                	call   eax
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015590:	8b 00                	mov    eax,DWORD PTR [eax]
c0015592:	83 c0 24             	add    eax,0x24
c0015595:	8b 00                	mov    eax,DWORD PTR [eax]
c0015597:	6a 00                	push   0x0
c0015599:	68 23 4c 01 c0       	push   0xc0014c23
c001559e:	6a 11                	push   0x11
c00155a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a3:	ff d0                	call   eax
c00155a5:	83 c4 10             	add    esp,0x10
c00155a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ad:	83 c0 24             	add    eax,0x24
c00155b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b2:	6a 00                	push   0x0
c00155b4:	68 23 4c 01 c0       	push   0xc0014c23
c00155b9:	6a 12                	push   0x12
c00155bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155be:	ff d0                	call   eax
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c8:	83 c0 24             	add    eax,0x24
c00155cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cd:	6a 00                	push   0x0
c00155cf:	68 23 4c 01 c0       	push   0xc0014c23
c00155d4:	6a 13                	push   0x13
c00155d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d9:	ff d0                	call   eax
c00155db:	83 c4 10             	add    esp,0x10
c00155de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e3:	83 c0 24             	add    eax,0x24
c00155e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e8:	6a 00                	push   0x0
c00155ea:	68 23 4c 01 c0       	push   0xc0014c23
c00155ef:	6a 14                	push   0x14
c00155f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f4:	ff d0                	call   eax
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fe:	83 c0 24             	add    eax,0x24
c0015601:	8b 00                	mov    eax,DWORD PTR [eax]
c0015603:	6a 00                	push   0x0
c0015605:	68 23 4c 01 c0       	push   0xc0014c23
c001560a:	6a 1e                	push   0x1e
c001560c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560f:	ff d0                	call   eax
c0015611:	83 c4 10             	add    esp,0x10
c0015614:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015617:	8b 00                	mov    eax,DWORD PTR [eax]
c0015619:	83 c0 24             	add    eax,0x24
c001561c:	8b 00                	mov    eax,DWORD PTR [eax]
c001561e:	6a 00                	push   0x0
c0015620:	68 39 bc 01 c0       	push   0xc001bc39
c0015625:	6a 60                	push   0x60
c0015627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562a:	ff d0                	call   eax
c001562c:	83 c4 10             	add    esp,0x10
c001562f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015632:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015635:	c9                   	leave  
c0015636:	c3                   	ret    
c0015637:	90                   	nop

c0015638 <InterruptController::convertLegacyIRQNumber(int)>:
c0015638:	55                   	push   ebp
c0015639:	89 e5                	mov    ebp,esp
c001563b:	83 ec 08             	sub    esp,0x8
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	50                   	push   eax
c0015645:	e8 bc e9 ff ff       	call   c0014006 <Device::getName()>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	8a 00                	mov    al,BYTE PTR [eax]
c001564f:	3c 41                	cmp    al,0x41
c0015651:	0f 94 c0             	sete   al
c0015654:	84 c0                	test   al,al
c0015656:	74 28                	je     c0015680 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015658:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001565c:	7f 12                	jg     c0015670 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001565e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015661:	05 00 c9 02 c0       	add    eax,0xc002c900
c0015666:	8a 00                	mov    al,BYTE PTR [eax]
c0015668:	0f b6 c0             	movzx  eax,al
c001566b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001566e:	eb 10                	jmp    c0015680 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	68 94 a1 02 c0       	push   0xc002a194
c0015678:	e8 a8 45 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015683:	c9                   	leave  
c0015684:	c3                   	ret    
c0015685:	90                   	nop

c0015686 <startGUI(void*)>:
c0015686:	55                   	push   ebp
c0015687:	89 e5                	mov    ebp,esp
c0015689:	53                   	push   ebx
c001568a:	83 ec 04             	sub    esp,0x4
c001568d:	e8 a6 7b 00 00       	call   c001d238 <unlockScheduler()>
c0015692:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0015698:	83 ec 08             	sub    esp,0x8
c001569b:	6a 01                	push   0x1
c001569d:	68 c8 a4 02 c0       	push   0xc002a4c8
c00156a2:	e8 1c 75 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	83 ec 08             	sub    esp,0x8
c00156ad:	53                   	push   ebx
c00156ae:	50                   	push   eax
c00156af:	e8 1e 77 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c00156bd:	83 ec 08             	sub    esp,0x8
c00156c0:	6a 01                	push   0x1
c00156c2:	68 e2 a4 02 c0       	push   0xc002a4e2
c00156c7:	e8 f7 74 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	83 ec 08             	sub    esp,0x8
c00156d2:	53                   	push   ebx
c00156d3:	50                   	push   eax
c00156d4:	e8 f9 76 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c00156d9:	83 c4 10             	add    esp,0x10
c00156dc:	90                   	nop
c00156dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156e0:	c9                   	leave  
c00156e1:	c3                   	ret    

c00156e2 <startGUIVESA(void*)>:
c00156e2:	55                   	push   ebp
c00156e3:	89 e5                	mov    ebp,esp
c00156e5:	53                   	push   ebx
c00156e6:	83 ec 04             	sub    esp,0x4
c00156e9:	e8 4a 7b 00 00       	call   c001d238 <unlockScheduler()>
c00156ee:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c00156f4:	83 ec 08             	sub    esp,0x8
c00156f7:	6a 01                	push   0x1
c00156f9:	68 fc a4 02 c0       	push   0xc002a4fc
c00156fe:	e8 c0 74 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	83 ec 08             	sub    esp,0x8
c0015709:	53                   	push   ebx
c001570a:	50                   	push   eax
c001570b:	e8 c2 76 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0015719:	83 ec 08             	sub    esp,0x8
c001571c:	6a 01                	push   0x1
c001571e:	68 e2 a4 02 c0       	push   0xc002a4e2
c0015723:	e8 9b 74 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c0015728:	83 c4 10             	add    esp,0x10
c001572b:	83 ec 08             	sub    esp,0x8
c001572e:	53                   	push   ebx
c001572f:	50                   	push   eax
c0015730:	e8 9d 76 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c0015735:	83 c4 10             	add    esp,0x10
c0015738:	90                   	nop
c0015739:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001573c:	c9                   	leave  
c001573d:	c3                   	ret    

c001573e <sendKeyToTerminal(unsigned char)>:
c001573e:	55                   	push   ebp
c001573f:	89 e5                	mov    ebp,esp
c0015741:	83 ec 28             	sub    esp,0x28
c0015744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015747:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001574a:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c001574f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015753:	83 ec 08             	sub    esp,0x8
c0015756:	52                   	push   edx
c0015757:	50                   	push   eax
c0015758:	e8 75 b9 ff ff       	call   c00110d2 <VgaText::receiveKey(unsigned char)>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015764:	75 41                	jne    c00157a7 <sendKeyToTerminal(unsigned char)+0x69>
c0015766:	e8 f2 7a 00 00       	call   c001d25d <lockStuff()>
c001576b:	a1 60 d8 02 c0       	mov    eax,ds:0xc002d860
c0015770:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015773:	c7 05 60 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d860,0x0
c001577d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015781:	74 1f                	je     c00157a2 <sendKeyToTerminal(unsigned char)+0x64>
c0015783:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015786:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015789:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001578c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015792:	83 ec 0c             	sub    esp,0xc
c0015795:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015798:	e8 b1 80 00 00       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001579d:	83 c4 10             	add    esp,0x10
c00157a0:	eb db                	jmp    c001577d <sendKeyToTerminal(unsigned char)+0x3f>
c00157a2:	e8 50 7e 00 00       	call   c001d5f7 <unlockStuff()>
c00157a7:	90                   	nop
c00157a8:	c9                   	leave  
c00157a9:	c3                   	ret    

c00157aa <sendKeyboardToken(KeyboardToken)>:
c00157aa:	55                   	push   ebp
c00157ab:	89 e5                	mov    ebp,esp
c00157ad:	83 ec 18             	sub    esp,0x18
c00157b0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b6:	0f b7 c0             	movzx  eax,ax
c00157b9:	83 f2 01             	xor    edx,0x1
c00157bc:	88 90 80 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2780],dl
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	66 3d 03 02          	cmp    ax,0x203
c00157c9:	75 07                	jne    c00157d2 <sendKeyboardToken(KeyboardToken)+0x28>
c00157cb:	a0 80 d9 02 c0       	mov    al,ds:0xc002d980
c00157d0:	84 c0                	test   al,al
c00157d2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00157d6:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00157d9:	a0 88 dc 02 c0       	mov    al,ds:0xc002dc88
c00157de:	38 c2                	cmp    dl,al
c00157e0:	74 1c                	je     c00157fe <sendKeyboardToken(KeyboardToken)+0x54>
c00157e2:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157e5:	a2 88 dc 02 c0       	mov    ds:0xc002dc88,al
c00157ea:	a0 88 dc 02 c0       	mov    al,ds:0xc002dc88
c00157ef:	0f b6 c0             	movzx  eax,al
c00157f2:	83 ec 0c             	sub    esp,0xc
c00157f5:	50                   	push   eax
c00157f6:	e8 37 ab ff ff       	call   c0010332 <setTerminalScrollLock(bool)>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015801:	84 c0                	test   al,al
c0015803:	0f 84 ae 00 00 00    	je     c00158b7 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	66 3d 10 03          	cmp    ax,0x310
c0015810:	75 06                	jne    c0015818 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015812:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	66 3d 11 03          	cmp    ax,0x311
c001581f:	75 06                	jne    c0015827 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015821:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582a:	66 3d 12 03          	cmp    ax,0x312
c001582e:	75 06                	jne    c0015836 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015830:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	66 3d 13 03          	cmp    ax,0x313
c001583d:	75 06                	jne    c0015845 <sendKeyboardToken(KeyboardToken)+0x9b>
c001583f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	66 3d 14 03          	cmp    ax,0x314
c001584c:	75 06                	jne    c0015854 <sendKeyboardToken(KeyboardToken)+0xaa>
c001584e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	66 3d 15 03          	cmp    ax,0x315
c001585b:	75 06                	jne    c0015863 <sendKeyboardToken(KeyboardToken)+0xb9>
c001585d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015866:	66 3d 16 03          	cmp    ax,0x316
c001586a:	75 06                	jne    c0015872 <sendKeyboardToken(KeyboardToken)+0xc8>
c001586c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	66 3d 17 03          	cmp    ax,0x317
c0015879:	75 06                	jne    c0015881 <sendKeyboardToken(KeyboardToken)+0xd7>
c001587b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015884:	66 3d 18 03          	cmp    ax,0x318
c0015888:	75 06                	jne    c0015890 <sendKeyboardToken(KeyboardToken)+0xe6>
c001588a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	66 3d 19 03          	cmp    ax,0x319
c0015897:	75 06                	jne    c001589f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015899:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001589f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a2:	66 3d 1a 03          	cmp    ax,0x31a
c00158a6:	0f 85 c9 00 00 00    	jne    c0015975 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158ac:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158b2:	e9 be 00 00 00       	jmp    c0015975 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ba:	66 3d 10 03          	cmp    ax,0x310
c00158be:	75 0a                	jne    c00158ca <sendKeyboardToken(KeyboardToken)+0x120>
c00158c0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00158c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	66 3d 11 03          	cmp    ax,0x311
c00158d1:	75 0a                	jne    c00158dd <sendKeyboardToken(KeyboardToken)+0x133>
c00158d3:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00158d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e0:	66 3d 12 03          	cmp    ax,0x312
c00158e4:	75 0a                	jne    c00158f0 <sendKeyboardToken(KeyboardToken)+0x146>
c00158e6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00158ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f3:	66 3d 13 03          	cmp    ax,0x313
c00158f7:	75 0a                	jne    c0015903 <sendKeyboardToken(KeyboardToken)+0x159>
c00158f9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	66 3d 14 03          	cmp    ax,0x314
c001590a:	75 0a                	jne    c0015916 <sendKeyboardToken(KeyboardToken)+0x16c>
c001590c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015912:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	66 3d 15 03          	cmp    ax,0x315
c001591d:	75 0a                	jne    c0015929 <sendKeyboardToken(KeyboardToken)+0x17f>
c001591f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015925:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592c:	66 3d 16 03          	cmp    ax,0x316
c0015930:	75 0a                	jne    c001593c <sendKeyboardToken(KeyboardToken)+0x192>
c0015932:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015938:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001593c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593f:	66 3d 17 03          	cmp    ax,0x317
c0015943:	75 0a                	jne    c001594f <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015945:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001594b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001594f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015952:	66 3d 18 03          	cmp    ax,0x318
c0015956:	75 0a                	jne    c0015962 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015958:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001595e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015965:	66 3d 19 03          	cmp    ax,0x319
c0015969:	75 0a                	jne    c0015975 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001596b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015971:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015978:	66 3d 00 02          	cmp    ax,0x200
c001597c:	75 2c                	jne    c00159aa <sendKeyboardToken(KeyboardToken)+0x200>
c001597e:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015983:	83 f0 01             	xor    eax,0x1
c0015986:	84 c0                	test   al,al
c0015988:	74 20                	je     c00159aa <sendKeyboardToken(KeyboardToken)+0x200>
c001598a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c001598f:	6a 01                	push   0x1
c0015991:	6a 00                	push   0x0
c0015993:	68 86 56 01 c0       	push   0xc0015686
c0015998:	50                   	push   eax
c0015999:	e8 ca 79 00 00       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	c6 05 80 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc80,0x1
c00159a8:	eb 33                	jmp    c00159dd <sendKeyboardToken(KeyboardToken)+0x233>
c00159aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ad:	66 3d 01 02          	cmp    ax,0x201
c00159b1:	75 2a                	jne    c00159dd <sendKeyboardToken(KeyboardToken)+0x233>
c00159b3:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c00159b8:	83 f0 01             	xor    eax,0x1
c00159bb:	84 c0                	test   al,al
c00159bd:	74 1e                	je     c00159dd <sendKeyboardToken(KeyboardToken)+0x233>
c00159bf:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c00159c4:	6a 01                	push   0x1
c00159c6:	6a 00                	push   0x0
c00159c8:	68 e2 56 01 c0       	push   0xc00156e2
c00159cd:	50                   	push   eax
c00159ce:	e8 95 79 00 00       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	c6 05 80 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc80,0x1
c00159dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e0:	66 3d 1d 03          	cmp    ax,0x31d
c00159e4:	75 06                	jne    c00159ec <sendKeyboardToken(KeyboardToken)+0x242>
c00159e6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00159ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ef:	66 3d 1c 03          	cmp    ax,0x31c
c00159f3:	75 06                	jne    c00159fb <sendKeyboardToken(KeyboardToken)+0x251>
c00159f5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fe:	66 3d 1b 03          	cmp    ax,0x31b
c0015a02:	75 06                	jne    c0015a0a <sendKeyboardToken(KeyboardToken)+0x260>
c0015a04:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0d:	66 3d 1e 03          	cmp    ax,0x31e
c0015a11:	75 06                	jne    c0015a19 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a13:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1c:	66 3d 1f 03          	cmp    ax,0x31f
c0015a20:	75 06                	jne    c0015a28 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a22:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2b:	66 3d 1a 03          	cmp    ax,0x31a
c0015a2f:	75 06                	jne    c0015a37 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a31:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a37:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a3e:	83 f0 01             	xor    eax,0x1
c0015a41:	84 c0                	test   al,al
c0015a43:	74 77                	je     c0015abc <sendKeyboardToken(KeyboardToken)+0x312>
c0015a45:	a0 81 d9 02 c0       	mov    al,ds:0xc002d981
c0015a4a:	84 c0                	test   al,al
c0015a4c:	74 41                	je     c0015a8f <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015a4e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a52:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a56:	74 2b                	je     c0015a83 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015a58:	8b 15 84 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc84
c0015a5e:	89 d0                	mov    eax,edx
c0015a60:	c1 e0 02             	shl    eax,0x2
c0015a63:	01 d0                	add    eax,edx
c0015a65:	01 c0                	add    eax,eax
c0015a67:	a3 84 dc 02 c0       	mov    ds:0xc002dc84,eax
c0015a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6f:	0f b7 c0             	movzx  eax,ax
c0015a72:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a75:	a1 84 dc 02 c0       	mov    eax,ds:0xc002dc84
c0015a7a:	01 d0                	add    eax,edx
c0015a7c:	a3 84 dc 02 c0       	mov    ds:0xc002dc84,eax
c0015a81:	eb 6d                	jmp    c0015af0 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a83:	c7 05 84 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc84,0x0
c0015a8d:	eb 61                	jmp    c0015af0 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a8f:	a1 84 dc 02 c0       	mov    eax,ds:0xc002dc84
c0015a94:	85 c0                	test   eax,eax
c0015a96:	74 18                	je     c0015ab0 <sendKeyboardToken(KeyboardToken)+0x306>
c0015a98:	a1 84 dc 02 c0       	mov    eax,ds:0xc002dc84
c0015a9d:	0f b6 c0             	movzx  eax,al
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	50                   	push   eax
c0015aa4:	e8 95 fc ff ff       	call   c001573e <sendKeyToTerminal(unsigned char)>
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ab0:	c7 05 84 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc84,0x0
c0015aba:	eb 34                	jmp    c0015af0 <sendKeyboardToken(KeyboardToken)+0x346>
c0015abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abf:	66 3d 01 01          	cmp    ax,0x101
c0015ac3:	75 2b                	jne    c0015af0 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ac5:	a1 84 dc 02 c0       	mov    eax,ds:0xc002dc84
c0015aca:	85 c0                	test   eax,eax
c0015acc:	74 18                	je     c0015ae6 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015ace:	a1 84 dc 02 c0       	mov    eax,ds:0xc002dc84
c0015ad3:	0f b6 c0             	movzx  eax,al
c0015ad6:	83 ec 0c             	sub    esp,0xc
c0015ad9:	50                   	push   eax
c0015ada:	e8 5f fc ff ff       	call   c001573e <sendKeyToTerminal(unsigned char)>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ae6:	c7 05 84 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc84,0x0
c0015af0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015af3:	83 f0 01             	xor    eax,0x1
c0015af6:	84 c0                	test   al,al
c0015af8:	74 4c                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015afa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015afd:	83 f0 01             	xor    eax,0x1
c0015b00:	84 c0                	test   al,al
c0015b02:	74 42                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b04:	a0 80 d9 02 c0       	mov    al,ds:0xc002d980
c0015b09:	83 f0 01             	xor    eax,0x1
c0015b0c:	84 c0                	test   al,al
c0015b0e:	74 36                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b13:	66 83 f8 1f          	cmp    ax,0x1f
c0015b17:	76 09                	jbe    c0015b22 <sendKeyboardToken(KeyboardToken)+0x378>
c0015b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1c:	66 83 f8 7e          	cmp    ax,0x7e
c0015b20:	76 12                	jbe    c0015b34 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b25:	66 83 f8 0a          	cmp    ax,0xa
c0015b29:	74 09                	je     c0015b34 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2e:	66 83 f8 08          	cmp    ax,0x8
c0015b32:	75 12                	jne    c0015b46 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b37:	0f b6 c0             	movzx  eax,al
c0015b3a:	83 ec 0c             	sub    esp,0xc
c0015b3d:	50                   	push   eax
c0015b3e:	e8 fb fb ff ff       	call   c001573e <sendKeyToTerminal(unsigned char)>
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b49:	83 f0 01             	xor    eax,0x1
c0015b4c:	84 c0                	test   al,al
c0015b4e:	74 4f                	je     c0015b9f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b50:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b53:	83 f0 01             	xor    eax,0x1
c0015b56:	84 c0                	test   al,al
c0015b58:	74 45                	je     c0015b9f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b5a:	a0 80 d9 02 c0       	mov    al,ds:0xc002d980
c0015b5f:	84 c0                	test   al,al
c0015b61:	74 3c                	je     c0015b9f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b66:	66 83 f8 3f          	cmp    ax,0x3f
c0015b6a:	76 33                	jbe    c0015b9f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6f:	66 83 f8 7f          	cmp    ax,0x7f
c0015b73:	77 2a                	ja     c0015b9f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b78:	88 c2                	mov    dl,al
c0015b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7d:	66 83 f8 5f          	cmp    ax,0x5f
c0015b81:	76 04                	jbe    c0015b87 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015b83:	b0 20                	mov    al,0x20
c0015b85:	eb 02                	jmp    c0015b89 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015b87:	b0 00                	mov    al,0x0
c0015b89:	29 c2                	sub    edx,eax
c0015b8b:	88 d0                	mov    al,dl
c0015b8d:	83 e8 40             	sub    eax,0x40
c0015b90:	0f b6 c0             	movzx  eax,al
c0015b93:	83 ec 0c             	sub    esp,0xc
c0015b96:	50                   	push   eax
c0015b97:	e8 a2 fb ff ff       	call   c001573e <sendKeyToTerminal(unsigned char)>
c0015b9c:	83 c4 10             	add    esp,0x10
c0015b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba2:	66 3d 00 03          	cmp    ax,0x300
c0015ba6:	75 0f                	jne    c0015bb7 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015ba8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bab:	83 f0 01             	xor    eax,0x1
c0015bae:	84 c0                	test   al,al
c0015bb0:	74 05                	je     c0015bb7 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bb2:	e8 b0 af ff ff       	call   c0010b67 <doTerminalCycle()>
c0015bb7:	90                   	nop
c0015bb8:	c9                   	leave  
c0015bb9:	c3                   	ret    

c0015bba <clearInternalKeybuffer(VgaText*)>:
c0015bba:	55                   	push   ebp
c0015bbb:	89 e5                	mov    ebp,esp
c0015bbd:	83 ec 08             	sub    esp,0x8
c0015bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc3:	05 34 11 00 00       	add    eax,0x1134
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	50                   	push   eax
c0015bcc:	e8 10 ab fe ff       	call   c00006e1 <strlen>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bd7:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bdd:	83 ec 04             	sub    esp,0x4
c0015be0:	50                   	push   eax
c0015be1:	6a 00                	push   0x0
c0015be3:	52                   	push   edx
c0015be4:	e8 db aa fe ff       	call   c00006c4 <memset>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	90                   	nop
c0015bed:	c9                   	leave  
c0015bee:	c3                   	ret    

c0015bef <readKeyboard(VgaText*, char*, unsigned long)>:
c0015bef:	55                   	push   ebp
c0015bf0:	89 e5                	mov    ebp,esp
c0015bf2:	83 ec 18             	sub    esp,0x18
c0015bf5:	fb                   	sti    
c0015bf6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bfd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c01:	0f 84 8a 00 00 00    	je     c0015c91 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c10:	84 c0                	test   al,al
c0015c12:	75 11                	jne    c0015c25 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c14:	e8 1d 76 00 00       	call   c001d236 <lockScheduler()>
c0015c19:	e8 54 79 00 00       	call   c001d572 <schedule()>
c0015c1e:	e8 15 76 00 00       	call   c001d238 <unlockScheduler()>
c0015c23:	eb e2                	jmp    c0015c07 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c28:	8d 50 01             	lea    edx,[eax+0x1]
c0015c2b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c31:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c37:	88 10                	mov    BYTE PTR [eax],dl
c0015c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c42:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c48:	05 34 11 00 00       	add    eax,0x1134
c0015c4d:	83 ec 0c             	sub    esp,0xc
c0015c50:	50                   	push   eax
c0015c51:	e8 8b aa fe ff       	call   c00006e1 <strlen>
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c5c:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c62:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c65:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c68:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c6e:	83 ec 04             	sub    esp,0x4
c0015c71:	50                   	push   eax
c0015c72:	51                   	push   ecx
c0015c73:	52                   	push   edx
c0015c74:	e8 ef a9 fe ff       	call   c0000668 <memmove>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c7f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c82:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c86:	0f 85 71 ff ff ff    	jne    c0015bfd <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8f:	eb 03                	jmp    c0015c94 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	c9                   	leave  
c0015c95:	c3                   	ret    

c0015c96 <Keyboard::Keyboard(char const*)>:
c0015c96:	83 ec 0c             	sub    esp,0xc
c0015c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9d:	83 ec 08             	sub    esp,0x8
c0015ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca4:	50                   	push   eax
c0015ca5:	e8 60 e2 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	ba 20 a5 02 c0       	mov    edx,0xc002a520
c0015cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb6:	89 10                	mov    DWORD PTR [eax],edx
c0015cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cbc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cc6:	c6 05 64 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d864,0x1
c0015ccd:	90                   	nop
c0015cce:	83 c4 0c             	add    esp,0xc
c0015cd1:	c3                   	ret    

c0015cd2 <Keyboard::~Keyboard()>:
c0015cd2:	83 ec 0c             	sub    esp,0xc
c0015cd5:	ba 20 a5 02 c0       	mov    edx,0xc002a520
c0015cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cde:	89 10                	mov    DWORD PTR [eax],edx
c0015ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	50                   	push   eax
c0015ce8:	e8 ff de ff ff       	call   c0013bec <Device::~Device()>
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	90                   	nop
c0015cf1:	83 c4 0c             	add    esp,0xc
c0015cf4:	c3                   	ret    
c0015cf5:	90                   	nop

c0015cf6 <Keyboard::~Keyboard()>:
c0015cf6:	83 ec 0c             	sub    esp,0xc
c0015cf9:	83 ec 0c             	sub    esp,0xc
c0015cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d00:	e8 cd ff ff ff       	call   c0015cd2 <Keyboard::~Keyboard()>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	83 ec 08             	sub    esp,0x8
c0015d0b:	68 5c 01 00 00       	push   0x15c
c0015d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d14:	e8 fa ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 c4 0c             	add    esp,0xc
c0015d1f:	c3                   	ret    

c0015d20 <LogicalDisk::close(int, int, void*)>:
c0015d20:	83 c8 ff             	or     eax,0xffffffff
c0015d23:	c3                   	ret    

c0015d24 <LogicalDisk::~LogicalDisk()>:
c0015d24:	83 ec 0c             	sub    esp,0xc
c0015d27:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c0015d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d30:	89 10                	mov    DWORD PTR [eax],edx
c0015d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d36:	83 ec 0c             	sub    esp,0xc
c0015d39:	50                   	push   eax
c0015d3a:	e8 ad de ff ff       	call   c0013bec <Device::~Device()>
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	90                   	nop
c0015d43:	83 c4 0c             	add    esp,0xc
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <LogicalDisk::~LogicalDisk()>:
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	83 ec 0c             	sub    esp,0xc
c0015d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d52:	e8 cd ff ff ff       	call   c0015d24 <LogicalDisk::~LogicalDisk()>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	83 ec 08             	sub    esp,0x8
c0015d5d:	68 74 01 00 00       	push   0x174
c0015d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d66:	e8 a8 ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	83 c4 0c             	add    esp,0xc
c0015d71:	c3                   	ret    

c0015d72 <LogicalDisk::open(int, int, void*)>:
c0015d72:	83 ec 18             	sub    esp,0x18
c0015d75:	68 4c a5 02 c0       	push   0xc002a54c
c0015d7a:	e8 a6 3e 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0015d7f:	83 c8 ff             	or     eax,0xffffffff
c0015d82:	83 c4 1c             	add    esp,0x1c
c0015d85:	c3                   	ret    

c0015d86 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d86:	53                   	push   ebx
c0015d87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d93:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d99:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d9f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015da5:	77 10                	ja     c0015db7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015da7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015dad:	89 d3                	mov    ebx,edx
c0015daf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015db5:	72 05                	jb     c0015dbc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015db7:	83 c8 ff             	or     eax,0xffffffff
c0015dba:	89 c2                	mov    edx,eax
c0015dbc:	5b                   	pop    ebx
c0015dbd:	c3                   	ret    

c0015dbe <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015dbe:	56                   	push   esi
c0015dbf:	83 c8 ff             	or     eax,0xffffffff
c0015dc2:	53                   	push   ebx
c0015dc3:	89 c2                	mov    edx,eax
c0015dc5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015dc9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015dcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dd1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dd7:	77 27                	ja     c0015e00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dd9:	89 d8                	mov    eax,ebx
c0015ddb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015de1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015de7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dec:	89 c2                	mov    edx,eax
c0015dee:	73 10                	jae    c0015e00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015df0:	89 c8                	mov    eax,ecx
c0015df2:	89 da                	mov    edx,ebx
c0015df4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dfa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e00:	5b                   	pop    ebx
c0015e01:	5e                   	pop    esi
c0015e02:	c3                   	ret    
c0015e03:	90                   	nop

c0015e04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e04:	83 ec 1c             	sub    esp,0x1c
c0015e07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e2a:	83 ec 08             	sub    esp,0x8
c0015e2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e31:	50                   	push   eax
c0015e32:	e8 d3 e0 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c0015e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e43:	89 10                	mov    DWORD PTR [eax],edx
c0015e45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e49:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e5f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e75:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e7b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e81:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e8c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e92:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ea0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eaa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015eb4:	90                   	nop
c0015eb5:	83 c4 1c             	add    esp,0x1c
c0015eb8:	c3                   	ret    
c0015eb9:	90                   	nop

c0015eba <LogicalDisk::assignDriveLetter()>:
c0015eba:	55                   	push   ebp
c0015ebb:	57                   	push   edi
c0015ebc:	56                   	push   esi
c0015ebd:	53                   	push   ebx
c0015ebe:	83 ec 14             	sub    esp,0x14
c0015ec1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ec5:	8b 3d a0 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dca0
c0015ecb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ed1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ed5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015edb:	8b 3d a4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dca4
c0015ee1:	3c 01                	cmp    al,0x1
c0015ee3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ee7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015eeb:	19 c0                	sbb    eax,eax
c0015eed:	83 e0 02             	and    eax,0x2
c0015ef0:	83 c0 41             	add    eax,0x41
c0015ef3:	0f be e8             	movsx  ebp,al
c0015ef6:	3c 43                	cmp    al,0x43
c0015ef8:	75 10                	jne    c0015f0a <LogicalDisk::assignDriveLetter()+0x50>
c0015efa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f01:	75 5d                	jne    c0015f60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f03:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f08:	75 56                	jne    c0015f60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f0a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f0d:	ba 01 00 00 00       	mov    edx,0x1
c0015f12:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f16:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f1a:	d3 e2                	shl    edx,cl
c0015f1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f20:	89 d7                	mov    edi,edx
c0015f22:	89 d6                	mov    esi,edx
c0015f24:	c1 ff 1f             	sar    edi,0x1f
c0015f27:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f2b:	21 f9                	and    ecx,edi
c0015f2d:	09 d1                	or     ecx,edx
c0015f2f:	75 2f                	jne    c0015f60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f39:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f3f:	09 f2                	or     edx,esi
c0015f41:	89 15 a0 dc 02 c0    	mov    DWORD PTR ds:0xc002dca0,edx
c0015f47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f4b:	09 fa                	or     edx,edi
c0015f4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f51:	89 15 a4 dc 02 c0    	mov    DWORD PTR ds:0xc002dca4,edx
c0015f57:	89 1c bd c0 dc 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2340],ebx
c0015f5e:	eb 08                	jmp    c0015f68 <LogicalDisk::assignDriveLetter()+0xae>
c0015f60:	45                   	inc    ebp
c0015f61:	40                   	inc    eax
c0015f62:	3c 5b                	cmp    al,0x5b
c0015f64:	75 90                	jne    c0015ef6 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f66:	31 c0                	xor    eax,eax
c0015f68:	83 c4 14             	add    esp,0x14
c0015f6b:	5b                   	pop    ebx
c0015f6c:	5e                   	pop    esi
c0015f6d:	5f                   	pop    edi
c0015f6e:	5d                   	pop    ebp
c0015f6f:	c3                   	ret    

c0015f70 <LogicalDisk::mount()>:
c0015f70:	56                   	push   esi
c0015f71:	53                   	push   ebx
c0015f72:	51                   	push   ecx
c0015f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f77:	8b 1d 28 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d828
c0015f7d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f87:	85 db                	test   ebx,ebx
c0015f89:	74 50                	je     c0015fdb <LogicalDisk::mount()+0x6b>
c0015f8b:	e8 91 72 00 00       	call   c001d221 <getIRQNestingLevel()>
c0015f90:	52                   	push   edx
c0015f91:	52                   	push   edx
c0015f92:	50                   	push   eax
c0015f93:	68 70 a5 02 c0       	push   0xc002a570
c0015f98:	e8 56 c9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015f9d:	83 c4 0c             	add    esp,0xc
c0015fa0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fa7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fa9:	83 e8 41             	sub    eax,0x41
c0015fac:	50                   	push   eax
c0015fad:	56                   	push   esi
c0015fae:	53                   	push   ebx
c0015faf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fb2:	83 c4 10             	add    esp,0x10
c0015fb5:	84 c0                	test   al,al
c0015fb7:	74 08                	je     c0015fc1 <LogicalDisk::mount()+0x51>
c0015fb9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015fbf:	eb 1c                	jmp    c0015fdd <LogicalDisk::mount()+0x6d>
c0015fc1:	e8 5b 72 00 00       	call   c001d221 <getIRQNestingLevel()>
c0015fc6:	51                   	push   ecx
c0015fc7:	51                   	push   ecx
c0015fc8:	50                   	push   eax
c0015fc9:	68 8b a5 02 c0       	push   0xc002a58b
c0015fce:	e8 20 c9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015fd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fd6:	83 c4 10             	add    esp,0x10
c0015fd9:	eb ac                	jmp    c0015f87 <LogicalDisk::mount()+0x17>
c0015fdb:	31 c0                	xor    eax,eax
c0015fdd:	5a                   	pop    edx
c0015fde:	5b                   	pop    ebx
c0015fdf:	5e                   	pop    esi
c0015fe0:	c3                   	ret    
c0015fe1:	90                   	nop

c0015fe2 <LogicalDisk::unmount()>:
c0015fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fe6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ff0:	c3                   	ret    
c0015ff1:	90                   	nop

c0015ff2 <LogicalDisk::unassignDriveLetter()>:
c0015ff2:	57                   	push   edi
c0015ff3:	56                   	push   esi
c0015ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ff8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fff:	84 c9                	test   cl,cl
c0016001:	75 0f                	jne    c0016012 <LogicalDisk::unassignDriveLetter()+0x20>
c0016003:	c7 44 24 0c a6 a5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a5a6
c001600b:	5e                   	pop    esi
c001600c:	5f                   	pop    edi
c001600d:	e9 13 3c 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c0016012:	83 e9 41             	sub    ecx,0x41
c0016015:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001601c:	b8 01 00 00 00       	mov    eax,0x1
c0016021:	c7 04 8d c0 dc 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2340],0x0
c001602c:	d3 e0                	shl    eax,cl
c001602e:	89 c7                	mov    edi,eax
c0016030:	f7 d0                	not    eax
c0016032:	c1 ff 1f             	sar    edi,0x1f
c0016035:	21 05 a0 dc 02 c0    	and    DWORD PTR ds:0xc002dca0,eax
c001603b:	89 fe                	mov    esi,edi
c001603d:	f7 d6                	not    esi
c001603f:	21 35 a4 dc 02 c0    	and    DWORD PTR ds:0xc002dca4,esi
c0016045:	5e                   	pop    esi
c0016046:	5f                   	pop    edi
c0016047:	c3                   	ret    

c0016048 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016048:	57                   	push   edi
c0016049:	56                   	push   esi
c001604a:	53                   	push   ebx
c001604b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001604f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016053:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016057:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001605b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016061:	77 41                	ja     c00160a4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016063:	99                   	cdq    
c0016064:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001606a:	01 c8                	add    eax,ecx
c001606c:	11 da                	adc    edx,ebx
c001606e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016074:	19 d7                	sbb    edi,edx
c0016076:	72 33                	jb     c00160ab <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016078:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001607e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016084:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016088:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001608c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016092:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001609c:	5b                   	pop    ebx
c001609d:	5e                   	pop    esi
c001609e:	5f                   	pop    edi
c001609f:	e9 0c 0a 00 00       	jmp    c0016ab0 <VCache::read(unsigned long long, int, void*)>
c00160a4:	b8 05 00 00 00       	mov    eax,0x5
c00160a9:	eb 05                	jmp    c00160b0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00160ab:	b8 07 00 00 00       	mov    eax,0x7
c00160b0:	5b                   	pop    ebx
c00160b1:	5e                   	pop    esi
c00160b2:	5f                   	pop    edi
c00160b3:	c3                   	ret    

c00160b4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00160b4:	57                   	push   edi
c00160b5:	56                   	push   esi
c00160b6:	53                   	push   ebx
c00160b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160cd:	77 41                	ja     c0016110 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160cf:	99                   	cdq    
c00160d0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160d6:	01 c8                	add    eax,ecx
c00160d8:	11 da                	adc    edx,ebx
c00160da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160e0:	19 d7                	sbb    edi,edx
c00160e2:	72 33                	jb     c0016117 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016104:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016108:	5b                   	pop    ebx
c0016109:	5e                   	pop    esi
c001610a:	5f                   	pop    edi
c001610b:	e9 bc 08 00 00       	jmp    c00169cc <VCache::write(unsigned long long, int, void*)>
c0016110:	b8 05 00 00 00       	mov    eax,0x5
c0016115:	eb 05                	jmp    c001611c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016117:	b8 07 00 00 00       	mov    eax,0x7
c001611c:	5b                   	pop    ebx
c001611d:	5e                   	pop    esi
c001611e:	5f                   	pop    edi
c001611f:	c3                   	ret    

c0016120 <Mouse::Mouse(char const*)>:
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016127:	83 ec 08             	sub    esp,0x8
c001612a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001612e:	50                   	push   eax
c001612f:	e8 d6 dd ff ff       	call   c0013f0a <Device::Device(char const*)>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	ba fc a5 02 c0       	mov    edx,0xc002a5fc
c001613c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016140:	89 10                	mov    DWORD PTR [eax],edx
c0016142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016146:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016150:	90                   	nop
c0016151:	83 c4 0c             	add    esp,0xc
c0016154:	c3                   	ret    
c0016155:	90                   	nop

c0016156 <Mouse::~Mouse()>:
c0016156:	83 ec 0c             	sub    esp,0xc
c0016159:	ba fc a5 02 c0       	mov    edx,0xc002a5fc
c001615e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016162:	89 10                	mov    DWORD PTR [eax],edx
c0016164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016168:	83 ec 0c             	sub    esp,0xc
c001616b:	50                   	push   eax
c001616c:	e8 7b da ff ff       	call   c0013bec <Device::~Device()>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	90                   	nop
c0016175:	83 c4 0c             	add    esp,0xc
c0016178:	c3                   	ret    
c0016179:	90                   	nop

c001617a <Mouse::~Mouse()>:
c001617a:	83 ec 0c             	sub    esp,0xc
c001617d:	83 ec 0c             	sub    esp,0xc
c0016180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016184:	e8 cd ff ff ff       	call   c0016156 <Mouse::~Mouse()>
c0016189:	83 c4 10             	add    esp,0x10
c001618c:	83 ec 08             	sub    esp,0x8
c001618f:	68 58 01 00 00       	push   0x158
c0016194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016198:	e8 76 c6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001619d:	83 c4 10             	add    esp,0x10
c00161a0:	83 c4 0c             	add    esp,0xc
c00161a3:	c3                   	ret    

c00161a4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161a4:	55                   	push   ebp
c00161a5:	57                   	push   edi
c00161a6:	56                   	push   esi
c00161a7:	53                   	push   ebx
c00161a8:	81 ec 28 01 00 00    	sub    esp,0x128
c00161ae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161b5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161bc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161c3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161d2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161d9:	e8 28 de ff ff       	call   c0014006 <Device::getName()>
c00161de:	5a                   	pop    edx
c00161df:	59                   	pop    ecx
c00161e0:	50                   	push   eax
c00161e1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161e5:	55                   	push   ebp
c00161e6:	e8 78 a5 fe ff       	call   c0000763 <strcpy>
c00161eb:	5b                   	pop    ebx
c00161ec:	58                   	pop    eax
c00161ed:	68 20 a6 02 c0       	push   0xc002a620
c00161f2:	55                   	push   ebp
c00161f3:	e8 22 a6 fe ff       	call   c000081a <strcat>
c00161f8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161ff:	e8 20 94 ff ff       	call   c000f624 <malloc>
c0016204:	83 c4 0c             	add    esp,0xc
c0016207:	89 c3                	mov    ebx,eax
c0016209:	57                   	push   edi
c001620a:	56                   	push   esi
c001620b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001620f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016213:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001621a:	55                   	push   ebp
c001621b:	50                   	push   eax
c001621c:	e8 e3 fb ff ff       	call   c0015e04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016221:	83 c4 14             	add    esp,0x14
c0016224:	53                   	push   ebx
c0016225:	e8 90 fc ff ff       	call   c0015eba <LogicalDisk::assignDriveLetter()>
c001622a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001622d:	89 c6                	mov    esi,eax
c001622f:	e8 3c fd ff ff       	call   c0015f70 <LogicalDisk::mount()>
c0016234:	58                   	pop    eax
c0016235:	5a                   	pop    edx
c0016236:	53                   	push   ebx
c0016237:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001623e:	e8 d7 da ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016243:	59                   	pop    ecx
c0016244:	89 f0                	mov    eax,esi
c0016246:	5b                   	pop    ebx
c0016247:	0f be f0             	movsx  esi,al
c001624a:	56                   	push   esi
c001624b:	68 2b a6 02 c0       	push   0xc002a62b
c0016250:	e8 9e c6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016255:	81 c4 2c 01 00 00    	add    esp,0x12c
c001625b:	5b                   	pop    ebx
c001625c:	5e                   	pop    esi
c001625d:	5f                   	pop    edi
c001625e:	5d                   	pop    ebp
c001625f:	c3                   	ret    

c0016260 <createPartitionsForDisk(PhysicalDisk*)>:
c0016260:	55                   	push   ebp
c0016261:	57                   	push   edi
c0016262:	56                   	push   esi
c0016263:	53                   	push   ebx
c0016264:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001626a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016271:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016277:	3d 00 02 00 00       	cmp    eax,0x200
c001627c:	74 27                	je     c00162a5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001627e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016284:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001628a:	83 ec 10             	sub    esp,0x10
c001628d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016291:	99                   	cdq    
c0016292:	c1 e6 0a             	shl    esi,0xa
c0016295:	52                   	push   edx
c0016296:	89 fd                	mov    ebp,edi
c0016298:	50                   	push   eax
c0016299:	55                   	push   ebp
c001629a:	56                   	push   esi
c001629b:	e8 bc fb 00 00       	call   c0025e5c <__udivdi3>
c00162a0:	e9 b1 00 00 00       	jmp    c0016356 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162a5:	83 ec 0c             	sub    esp,0xc
c00162a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162aa:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00162ae:	56                   	push   esi
c00162af:	6a 01                	push   0x1
c00162b1:	6a 00                	push   0x0
c00162b3:	6a 00                	push   0x0
c00162b5:	53                   	push   ebx
c00162b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00162b9:	83 c4 20             	add    esp,0x20
c00162bc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162c4:	75 0a                	jne    c00162d0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162c6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162ce:	74 2c                	je     c00162fc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162d0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162d6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162dc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162e2:	83 ec 10             	sub    esp,0x10
c00162e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162e9:	89 f7                	mov    edi,esi
c00162eb:	c1 e0 0a             	shl    eax,0xa
c00162ee:	c1 ff 1f             	sar    edi,0x1f
c00162f1:	57                   	push   edi
c00162f2:	56                   	push   esi
c00162f3:	52                   	push   edx
c00162f4:	50                   	push   eax
c00162f5:	e8 62 fb 00 00       	call   c0025e5c <__udivdi3>
c00162fa:	eb 5a                	jmp    c0016356 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162fc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016303:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001630a:	83 e1 7f             	and    ecx,0x7f
c001630d:	83 e0 7f             	and    eax,0x7f
c0016310:	01 c1                	add    ecx,eax
c0016312:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016319:	83 e0 7f             	and    eax,0x7f
c001631c:	01 c1                	add    ecx,eax
c001631e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016325:	83 e0 7f             	and    eax,0x7f
c0016328:	00 c1                	add    cl,al
c001632a:	74 41                	je     c001636d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001632c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016332:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016338:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001633e:	83 ec 10             	sub    esp,0x10
c0016341:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016345:	89 f7                	mov    edi,esi
c0016347:	c1 e0 0a             	shl    eax,0xa
c001634a:	c1 ff 1f             	sar    edi,0x1f
c001634d:	57                   	push   edi
c001634e:	56                   	push   esi
c001634f:	52                   	push   edx
c0016350:	50                   	push   eax
c0016351:	e8 06 fb 00 00       	call   c0025e5c <__udivdi3>
c0016356:	83 c4 14             	add    esp,0x14
c0016359:	52                   	push   edx
c001635a:	50                   	push   eax
c001635b:	6a 00                	push   0x0
c001635d:	6a 00                	push   0x0
c001635f:	53                   	push   ebx
c0016360:	e8 3f fe ff ff       	call   c00161a4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016365:	83 c4 20             	add    esp,0x20
c0016368:	e9 79 01 00 00       	jmp    c00164e6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001636d:	89 f0                	mov    eax,esi
c001636f:	31 f6                	xor    esi,esi
c0016371:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016378:	75 02                	jne    c001637c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001637a:	89 f1                	mov    ecx,esi
c001637c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016383:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001638a:	c1 e2 08             	shl    edx,0x8
c001638d:	c1 e7 10             	shl    edi,0x10
c0016390:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016398:	09 fa                	or     edx,edi
c001639a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00163a2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00163a9:	83 c0 10             	add    eax,0x10
c00163ac:	09 fa                	or     edx,edi
c00163ae:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00163b5:	c1 e7 18             	shl    edi,0x18
c00163b8:	09 fa                	or     edx,edi
c00163ba:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00163c1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163c5:	c1 e7 10             	shl    edi,0x10
c00163c8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163cf:	c1 e2 08             	shl    edx,0x8
c00163d2:	09 fa                	or     edx,edi
c00163d4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163db:	09 fa                	or     edx,edi
c00163dd:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163e4:	c1 e7 18             	shl    edi,0x18
c00163e7:	09 fa                	or     edx,edi
c00163e9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163ed:	46                   	inc    esi
c00163ee:	83 fe 04             	cmp    esi,0x4
c00163f1:	0f 85 7a ff ff ff    	jne    c0016371 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fb:	83 f0 01             	xor    eax,0x1
c00163fe:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016402:	75 57                	jne    c001645b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016408:	83 f0 01             	xor    eax,0x1
c001640b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001640f:	75 4a                	jne    c001645b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016411:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016415:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001641d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016425:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001642b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016431:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016437:	0f a4 c2 0a          	shld   edx,eax,0xa
c001643b:	89 f7                	mov    edi,esi
c001643d:	c1 e0 0a             	shl    eax,0xa
c0016440:	c1 ff 1f             	sar    edi,0x1f
c0016443:	57                   	push   edi
c0016444:	56                   	push   esi
c0016445:	52                   	push   edx
c0016446:	50                   	push   eax
c0016447:	e8 10 fa 00 00       	call   c0025e5c <__udivdi3>
c001644c:	83 c4 10             	add    esp,0x10
c001644f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016457:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001645b:	84 c9                	test   cl,cl
c001645d:	74 53                	je     c00164b2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001645f:	0f b6 c9             	movzx  ecx,cl
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001646a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001646e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016476:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001647a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001647e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016482:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016486:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001648a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001648e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016492:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016496:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001649a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001649e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00164a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164a6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164aa:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00164ae:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00164b2:	31 ed                	xor    ebp,ebp
c00164b4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00164b8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00164bc:	89 f8                	mov    eax,edi
c00164be:	09 f0                	or     eax,esi
c00164c0:	74 1e                	je     c00164e0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164c2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164c6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164ca:	89 d1                	mov    ecx,edx
c00164cc:	09 c1                	or     ecx,eax
c00164ce:	74 10                	je     c00164e0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164d0:	83 ec 0c             	sub    esp,0xc
c00164d3:	57                   	push   edi
c00164d4:	56                   	push   esi
c00164d5:	52                   	push   edx
c00164d6:	50                   	push   eax
c00164d7:	53                   	push   ebx
c00164d8:	e8 c7 fc ff ff       	call   c00161a4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164dd:	83 c4 20             	add    esp,0x20
c00164e0:	45                   	inc    ebp
c00164e1:	83 fd 04             	cmp    ebp,0x4
c00164e4:	75 ce                	jne    c00164b4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164e6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164ec:	5b                   	pop    ebx
c00164ed:	5e                   	pop    esi
c00164ee:	5f                   	pop    edi
c00164ef:	5d                   	pop    ebp
c00164f0:	c3                   	ret    
c00164f1:	90                   	nop

c00164f2 <Serial::Serial(char const*)>:
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f9:	83 ec 08             	sub    esp,0x8
c00164fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016500:	50                   	push   eax
c0016501:	e8 04 da ff ff       	call   c0013f0a <Device::Device(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	ba 58 a6 02 c0       	mov    edx,0xc002a658
c001650e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016512:	89 10                	mov    DWORD PTR [eax],edx
c0016514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016518:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016522:	90                   	nop
c0016523:	83 c4 0c             	add    esp,0xc
c0016526:	c3                   	ret    
c0016527:	90                   	nop

c0016528 <Serial::~Serial()>:
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	ba 58 a6 02 c0       	mov    edx,0xc002a658
c0016530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016534:	89 10                	mov    DWORD PTR [eax],edx
c0016536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653a:	83 ec 0c             	sub    esp,0xc
c001653d:	50                   	push   eax
c001653e:	e8 a9 d6 ff ff       	call   c0013bec <Device::~Device()>
c0016543:	83 c4 10             	add    esp,0x10
c0016546:	90                   	nop
c0016547:	83 c4 0c             	add    esp,0xc
c001654a:	c3                   	ret    
c001654b:	90                   	nop

c001654c <Serial::~Serial()>:
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	83 ec 0c             	sub    esp,0xc
c0016552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016556:	e8 cd ff ff ff       	call   c0016528 <Serial::~Serial()>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	83 ec 08             	sub    esp,0x8
c0016561:	68 58 01 00 00       	push   0x158
c0016566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001656a:	e8 a4 c2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	83 c4 0c             	add    esp,0xc
c0016575:	c3                   	ret    

c0016576 <Timer::Timer(char const*)>:
c0016576:	83 ec 0c             	sub    esp,0xc
c0016579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657d:	83 ec 08             	sub    esp,0x8
c0016580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016584:	50                   	push   eax
c0016585:	e8 80 d9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	ba 9c a6 02 c0       	mov    edx,0xc002a69c
c0016592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016596:	89 10                	mov    DWORD PTR [eax],edx
c0016598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00165a6:	90                   	nop
c00165a7:	83 c4 0c             	add    esp,0xc
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <Timer::~Timer()>:
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	ba 9c a6 02 c0       	mov    edx,0xc002a69c
c00165b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b8:	89 10                	mov    DWORD PTR [eax],edx
c00165ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165be:	83 ec 0c             	sub    esp,0xc
c00165c1:	50                   	push   eax
c00165c2:	e8 25 d6 ff ff       	call   c0013bec <Device::~Device()>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	90                   	nop
c00165cb:	83 c4 0c             	add    esp,0xc
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <Timer::~Timer()>:
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	83 ec 0c             	sub    esp,0xc
c00165d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165da:	e8 cd ff ff ff       	call   c00165ac <Timer::~Timer()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	83 ec 08             	sub    esp,0x8
c00165e5:	68 5c 01 00 00       	push   0x15c
c00165ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ee:	e8 20 c2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	83 c4 0c             	add    esp,0xc
c00165f9:	c3                   	ret    

c00165fa <Timer::read()>:
c00165fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016604:	c3                   	ret    

c0016605 <timerHandler(unsigned long long)>:
c0016605:	55                   	push   ebp
c0016606:	57                   	push   edi
c0016607:	56                   	push   esi
c0016608:	53                   	push   ebx
c0016609:	83 ec 0c             	sub    esp,0xc
c001660c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016610:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016614:	01 35 30 dd 02 c0    	add    DWORD PTR ds:0xc002dd30,esi
c001661a:	11 3d 34 dd 02 c0    	adc    DWORD PTR ds:0xc002dd34,edi
c0016620:	80 3d ad d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6ad,0x0
c0016627:	0f 84 07 01 00 00    	je     c0016734 <timerHandler(unsigned long long)+0x12f>
c001662d:	e8 2b 6c 00 00       	call   c001d25d <lockStuff()>
c0016632:	83 ec 0c             	sub    esp,0xc
c0016635:	68 dc eb 02 c0       	push   0xc002ebdc
c001663a:	e8 8f 18 01 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001663f:	c7 04 24 dc eb 02 c0 	mov    DWORD PTR [esp],0xc002ebdc
c0016646:	89 c3                	mov    ebx,eax
c0016648:	e8 89 18 01 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	84 c0                	test   al,al
c0016652:	74 60                	je     c00166b4 <timerHandler(unsigned long long)+0xaf>
c0016654:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001665a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001665d:	85 c0                	test   eax,eax
c001665f:	0f 85 91 00 00 00    	jne    c00166f6 <timerHandler(unsigned long long)+0xf1>
c0016665:	e9 be 00 00 00       	jmp    c0016728 <timerHandler(unsigned long long)+0x123>
c001666a:	83 ec 0c             	sub    esp,0xc
c001666d:	55                   	push   ebp
c001666e:	e8 db 71 00 00       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c0016673:	83 c4 10             	add    esp,0x10
c0016676:	39 eb                	cmp    ebx,ebp
c0016678:	75 12                	jne    c001668c <timerHandler(unsigned long long)+0x87>
c001667a:	83 ec 0c             	sub    esp,0xc
c001667d:	68 dc eb 02 c0       	push   0xc002ebdc
c0016682:	e8 47 18 01 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016687:	89 c3                	mov    ebx,eax
c0016689:	83 c4 10             	add    esp,0x10
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	68 dc eb 02 c0       	push   0xc002ebdc
c0016694:	e8 3d 18 01 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	84 c0                	test   al,al
c001669e:	75 b4                	jne    c0016654 <timerHandler(unsigned long long)+0x4f>
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	68 dc eb 02 c0       	push   0xc002ebdc
c00166a8:	e8 21 18 01 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	39 d8                	cmp    eax,ebx
c00166b2:	74 a0                	je     c0016654 <timerHandler(unsigned long long)+0x4f>
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 dc eb 02 c0       	push   0xc002ebdc
c00166bc:	e8 0d 18 01 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166c1:	c7 04 24 dc eb 02 c0 	mov    DWORD PTR [esp],0xc002ebdc
c00166c8:	89 c5                	mov    ebp,eax
c00166ca:	e8 23 18 01 00       	call   c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166cf:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00166d8:	39 15 30 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd30,edx
c00166de:	a1 34 dd 02 c0       	mov    eax,ds:0xc002dd34
c00166e3:	19 c8                	sbb    eax,ecx
c00166e5:	73 83                	jae    c001666a <timerHandler(unsigned long long)+0x65>
c00166e7:	50                   	push   eax
c00166e8:	50                   	push   eax
c00166e9:	55                   	push   ebp
c00166ea:	68 dc eb 02 c0       	push   0xc002ebdc
c00166ef:	e8 ac 18 01 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166f4:	eb 93                	jmp    c0016689 <timerHandler(unsigned long long)+0x84>
c00166f6:	80 3d ac d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6ac,0x0
c00166fd:	74 29                	je     c0016728 <timerHandler(unsigned long long)+0x123>
c00166ff:	39 c6                	cmp    esi,eax
c0016701:	bb 00 00 00 00       	mov    ebx,0x0
c0016706:	19 df                	sbb    edi,ebx
c0016708:	72 19                	jb     c0016723 <timerHandler(unsigned long long)+0x11e>
c001670a:	e8 27 6b 00 00       	call   c001d236 <lockScheduler()>
c001670f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016714:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016717:	e8 56 6e 00 00       	call   c001d572 <schedule()>
c001671c:	e8 17 6b 00 00       	call   c001d238 <unlockScheduler()>
c0016721:	eb 05                	jmp    c0016728 <timerHandler(unsigned long long)+0x123>
c0016723:	29 f0                	sub    eax,esi
c0016725:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016728:	83 c4 0c             	add    esp,0xc
c001672b:	5b                   	pop    ebx
c001672c:	5e                   	pop    esi
c001672d:	5f                   	pop    edi
c001672e:	5d                   	pop    ebp
c001672f:	e9 c3 6e 00 00       	jmp    c001d5f7 <unlockStuff()>
c0016734:	83 c4 0c             	add    esp,0xc
c0016737:	5b                   	pop    ebx
c0016738:	5e                   	pop    esi
c0016739:	5f                   	pop    edi
c001673a:	5d                   	pop    ebp
c001673b:	c3                   	ret    

c001673c <setupTimer(int)>:
c001673c:	57                   	push   edi
c001673d:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0016742:	56                   	push   esi
c0016743:	53                   	push   ebx
c0016744:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016748:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001674e:	83 ec 0c             	sub    esp,0xc
c0016751:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016757:	e8 aa d8 ff ff       	call   c0014006 <Device::getName()>
c001675c:	83 c4 10             	add    esp,0x10
c001675f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016762:	0f 85 8d 00 00 00    	jne    c00167f5 <setupTimer(int)+0xb9>
c0016768:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001676d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016774:	74 7f                	je     c00167f5 <setupTimer(int)+0xb9>
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	68 5c 01 00 00       	push   0x15c
c001677e:	e8 a1 8e ff ff       	call   c000f624 <malloc>
c0016783:	89 04 24             	mov    DWORD PTR [esp],eax
c0016786:	89 c3                	mov    ebx,eax
c0016788:	e8 ab f2 00 00       	call   c0025a38 <PIT::PIT()>
c001678d:	59                   	pop    ecx
c001678e:	5f                   	pop    edi
c001678f:	53                   	push   ebx
c0016790:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c0016796:	e8 7f d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c001679b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001679d:	6a 00                	push   0x0
c001679f:	6a 00                	push   0x0
c00167a1:	56                   	push   esi
c00167a2:	53                   	push   ebx
c00167a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a6:	83 c4 14             	add    esp,0x14
c00167a9:	68 60 01 00 00       	push   0x160
c00167ae:	e8 71 8e ff ff       	call   c000f624 <malloc>
c00167b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b6:	89 c7                	mov    edi,eax
c00167b8:	e8 2b f1 00 00       	call   c00258e8 <APICTimer::APICTimer()>
c00167bd:	6a 00                	push   0x0
c00167bf:	6a 00                	push   0x0
c00167c1:	56                   	push   esi
c00167c2:	57                   	push   edi
c00167c3:	e8 22 f0 00 00       	call   c00257ea <APICTimer::open(int, int, void*)>
c00167c8:	83 c4 20             	add    esp,0x20
c00167cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167cd:	6a 00                	push   0x0
c00167cf:	6a 00                	push   0x0
c00167d1:	6a 00                	push   0x0
c00167d3:	53                   	push   ebx
c00167d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167d7:	58                   	pop    eax
c00167d8:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00167dd:	5a                   	pop    edx
c00167de:	57                   	push   edi
c00167df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167eb:	e8 2a d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00167f0:	83 c4 10             	add    esp,0x10
c00167f3:	eb 33                	jmp    c0016828 <setupTimer(int)+0xec>
c00167f5:	83 ec 0c             	sub    esp,0xc
c00167f8:	68 5c 01 00 00       	push   0x15c
c00167fd:	e8 22 8e ff ff       	call   c000f624 <malloc>
c0016802:	89 04 24             	mov    DWORD PTR [esp],eax
c0016805:	89 c3                	mov    ebx,eax
c0016807:	e8 2c f2 00 00       	call   c0025a38 <PIT::PIT()>
c001680c:	58                   	pop    eax
c001680d:	5a                   	pop    edx
c001680e:	53                   	push   ebx
c001680f:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c0016815:	e8 00 d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c001681a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001681c:	6a 00                	push   0x0
c001681e:	6a 00                	push   0x0
c0016820:	56                   	push   esi
c0016821:	53                   	push   ebx
c0016822:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016825:	83 c4 20             	add    esp,0x20
c0016828:	89 d8                	mov    eax,ebx
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	c3                   	ret    

c001682e <VCache::VCache(PhysicalDisk*)>:
c001682e:	53                   	push   ebx
c001682f:	83 ec 18             	sub    esp,0x18
c0016832:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c0016837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683b:	89 10                	mov    DWORD PTR [eax],edx
c001683d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016841:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016857:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001685e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016869:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016870:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016886:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001688a:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016892:	83 ec 0c             	sub    esp,0xc
c0016895:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016899:	e8 86 8d ff ff       	call   c000f624 <malloc>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	89 c3                	mov    ebx,eax
c00168a3:	83 ec 0c             	sub    esp,0xc
c00168a6:	53                   	push   ebx
c00168a7:	e8 aa 6a 00 00       	call   c001d356 <Mutex::Mutex()>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c5:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00168dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168e1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00168e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00168f1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00168f4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00168f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fb:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016903:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016909:	c1 e0 06             	shl    eax,0x6
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	50                   	push   eax
c0016910:	e8 0f 8d ff ff       	call   c000f624 <malloc>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	89 c2                	mov    edx,eax
c001691a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016921:	90                   	nop
c0016922:	83 c4 18             	add    esp,0x18
c0016925:	5b                   	pop    ebx
c0016926:	c3                   	ret    
c0016927:	90                   	nop

c0016928 <VCache::writeWriteBuffer()>:
c0016928:	53                   	push   ebx
c0016929:	83 ec 14             	sub    esp,0x14
c001692c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016930:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016933:	8b 10                	mov    edx,DWORD PTR [eax]
c0016935:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016938:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001693b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001693e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016941:	50                   	push   eax
c0016942:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016945:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001694c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016953:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016957:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001695e:	83 c4 28             	add    esp,0x28
c0016961:	5b                   	pop    ebx
c0016962:	c3                   	ret    
c0016963:	90                   	nop

c0016964 <VCache::~VCache()>:
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c001696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016970:	89 10                	mov    DWORD PTR [eax],edx
c0016972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016976:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016979:	84 c0                	test   al,al
c001697b:	74 0f                	je     c001698c <VCache::~VCache()+0x28>
c001697d:	83 ec 0c             	sub    esp,0xc
c0016980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016984:	e8 9f ff ff ff       	call   c0016928 <VCache::writeWriteBuffer()>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016990:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	50                   	push   eax
c0016997:	e8 98 8c ff ff       	call   c000f634 <free>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	90                   	nop
c00169a0:	83 c4 0c             	add    esp,0xc
c00169a3:	c3                   	ret    

c00169a4 <VCache::~VCache()>:
c00169a4:	83 ec 0c             	sub    esp,0xc
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ae:	e8 b1 ff ff ff       	call   c0016964 <VCache::~VCache()>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	83 ec 08             	sub    esp,0x8
c00169b9:	6a 30                	push   0x30
c00169bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169bf:	e8 4f be ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00169c4:	83 c4 10             	add    esp,0x10
c00169c7:	83 c4 0c             	add    esp,0xc
c00169ca:	c3                   	ret    
c00169cb:	90                   	nop

c00169cc <VCache::write(unsigned long long, int, void*)>:
c00169cc:	55                   	push   ebp
c00169cd:	57                   	push   edi
c00169ce:	56                   	push   esi
c00169cf:	53                   	push   ebx
c00169d0:	83 ec 28             	sub    esp,0x28
c00169d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169d7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00169db:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00169df:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00169e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169e6:	e8 cd 6d 00 00       	call   c001d7b8 <Semaphore::acquire()>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169f2:	74 66                	je     c0016a5a <VCache::write(unsigned long long, int, void*)+0x8e>
c00169f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169f7:	99                   	cdq    
c00169f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169fc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00169ff:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a02:	89 c1                	mov    ecx,eax
c0016a04:	89 d0                	mov    eax,edx
c0016a06:	31 f1                	xor    ecx,esi
c0016a08:	31 f8                	xor    eax,edi
c0016a0a:	89 ca                	mov    edx,ecx
c0016a0c:	09 c2                	or     edx,eax
c0016a0e:	75 3e                	jne    c0016a4e <VCache::write(unsigned long long, int, void*)+0x82>
c0016a10:	83 fd 01             	cmp    ebp,0x1
c0016a13:	75 39                	jne    c0016a4e <VCache::write(unsigned long long, int, void*)+0x82>
c0016a15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a1e:	51                   	push   ecx
c0016a1f:	50                   	push   eax
c0016a20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a24:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016a28:	0f af c8             	imul   ecx,eax
c0016a2b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016a2e:	51                   	push   ecx
c0016a2f:	e8 6c 9c fe ff       	call   c00006a0 <memcpy>
c0016a34:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a37:	83 c4 10             	add    esp,0x10
c0016a3a:	40                   	inc    eax
c0016a3b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016a3e:	83 f8 40             	cmp    eax,0x40
c0016a41:	75 57                	jne    c0016a9a <VCache::write(unsigned long long, int, void*)+0xce>
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	53                   	push   ebx
c0016a47:	e8 dc fe ff ff       	call   c0016928 <VCache::writeWriteBuffer()>
c0016a4c:	eb 34                	jmp    c0016a82 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016a4e:	83 ec 0c             	sub    esp,0xc
c0016a51:	53                   	push   ebx
c0016a52:	e8 d1 fe ff ff       	call   c0016928 <VCache::writeWriteBuffer()>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a5d:	83 fd 3f             	cmp    ebp,0x3f
c0016a60:	7f 25                	jg     c0016a87 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016a62:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a65:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a68:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016a6b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a6f:	52                   	push   edx
c0016a70:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016a76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a7a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a7d:	e8 1e 9c fe ff       	call   c00006a0 <memcpy>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	eb 13                	jmp    c0016a9a <VCache::write(unsigned long long, int, void*)+0xce>
c0016a87:	83 ec 0c             	sub    esp,0xc
c0016a8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a90:	55                   	push   ebp
c0016a91:	57                   	push   edi
c0016a92:	56                   	push   esi
c0016a93:	50                   	push   eax
c0016a94:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a97:	83 c4 20             	add    esp,0x20
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016aa0:	e8 c1 72 00 00       	call   c001dd66 <Semaphore::release()>
c0016aa5:	83 c4 2c             	add    esp,0x2c
c0016aa8:	31 c0                	xor    eax,eax
c0016aaa:	5b                   	pop    ebx
c0016aab:	5e                   	pop    esi
c0016aac:	5f                   	pop    edi
c0016aad:	5d                   	pop    ebp
c0016aae:	c3                   	ret    
c0016aaf:	90                   	nop

c0016ab0 <VCache::read(unsigned long long, int, void*)>:
c0016ab0:	57                   	push   edi
c0016ab1:	56                   	push   esi
c0016ab2:	53                   	push   ebx
c0016ab3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ab7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016abb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016abf:	83 ec 0c             	sub    esp,0xc
c0016ac2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ac5:	e8 ee 6c 00 00       	call   c001d7b8 <Semaphore::acquire()>
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ad1:	74 0c                	je     c0016adf <VCache::read(unsigned long long, int, void*)+0x2f>
c0016ad3:	83 ec 0c             	sub    esp,0xc
c0016ad6:	53                   	push   ebx
c0016ad7:	e8 4c fe ff ff       	call   c0016928 <VCache::writeWriteBuffer()>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aef:	57                   	push   edi
c0016af0:	56                   	push   esi
c0016af1:	50                   	push   eax
c0016af2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016af5:	83 c4 14             	add    esp,0x14
c0016af8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016afb:	e8 66 72 00 00       	call   c001dd66 <Semaphore::release()>
c0016b00:	83 c4 10             	add    esp,0x10
c0016b03:	31 c0                	xor    eax,eax
c0016b05:	5b                   	pop    ebx
c0016b06:	5e                   	pop    esi
c0016b07:	5f                   	pop    edi
c0016b08:	c3                   	ret    
c0016b09:	90                   	nop

c0016b0a <Video::putrect(int, int, int, int, unsigned int)>:
c0016b0a:	55                   	push   ebp
c0016b0b:	57                   	push   edi
c0016b0c:	56                   	push   esi
c0016b0d:	53                   	push   ebx
c0016b0e:	83 ec 1c             	sub    esp,0x1c
c0016b11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b19:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b1d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b29:	01 df                	add    edi,ebx
c0016b2b:	39 fb                	cmp    ebx,edi
c0016b2d:	7d 1f                	jge    c0016b4e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b33:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b37:	7d 12                	jge    c0016b4b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b39:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b3f:	53                   	push   ebx
c0016b40:	55                   	push   ebp
c0016b41:	45                   	inc    ebp
c0016b42:	56                   	push   esi
c0016b43:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b46:	83 c4 10             	add    esp,0x10
c0016b49:	eb e8                	jmp    c0016b33 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b4b:	43                   	inc    ebx
c0016b4c:	eb dd                	jmp    c0016b2b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b4e:	83 c4 1c             	add    esp,0x1c
c0016b51:	5b                   	pop    ebx
c0016b52:	5e                   	pop    esi
c0016b53:	5f                   	pop    edi
c0016b54:	5d                   	pop    ebp
c0016b55:	c3                   	ret    

c0016b56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b56:	55                   	push   ebp
c0016b57:	57                   	push   edi
c0016b58:	31 ff                	xor    edi,edi
c0016b5a:	56                   	push   esi
c0016b5b:	53                   	push   ebx
c0016b5c:	83 ec 1c             	sub    esp,0x1c
c0016b5f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b67:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b6e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b77:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b7f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016b82:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b86:	01 f9                	add    ecx,edi
c0016b88:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016b8c:	7d 2f                	jge    c0016bbd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016b8e:	31 f6                	xor    esi,esi
c0016b90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b94:	01 f2                	add    edx,esi
c0016b96:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016b9a:	7d 1a                	jge    c0016bb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016b9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b9f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ba2:	46                   	inc    esi
c0016ba3:	51                   	push   ecx
c0016ba4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ba8:	52                   	push   edx
c0016ba9:	55                   	push   ebp
c0016baa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bad:	83 c4 10             	add    esp,0x10
c0016bb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bb4:	eb da                	jmp    c0016b90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016bb6:	47                   	inc    edi
c0016bb7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016bbb:	eb c5                	jmp    c0016b82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016bbd:	83 c4 1c             	add    esp,0x1c
c0016bc0:	5b                   	pop    ebx
c0016bc1:	5e                   	pop    esi
c0016bc2:	5f                   	pop    edi
c0016bc3:	5d                   	pop    ebp
c0016bc4:	c3                   	ret    
c0016bc5:	90                   	nop

c0016bc6 <Video::blit(unsigned int*, int, int, int, int)>:
c0016bc6:	55                   	push   ebp
c0016bc7:	57                   	push   edi
c0016bc8:	56                   	push   esi
c0016bc9:	53                   	push   ebx
c0016bca:	83 ec 1c             	sub    esp,0x1c
c0016bcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bd5:	85 c0                	test   eax,eax
c0016bd7:	79 02                	jns    c0016bdb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016bd9:	31 c0                	xor    eax,eax
c0016bdb:	c1 e0 02             	shl    eax,0x2
c0016bde:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016be2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016be6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016bea:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016bee:	39 d8                	cmp    eax,ebx
c0016bf0:	7e 49                	jle    c0016c3b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016bf2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016bf8:	7c 41                	jl     c0016c3b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016bfa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016bfe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c02:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c06:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c0a:	39 f9                	cmp    ecx,edi
c0016c0c:	7e 22                	jle    c0016c30 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c0e:	83 c5 04             	add    ebp,0x4
c0016c11:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c17:	7c 14                	jl     c0016c2d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c1b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c26:	56                   	push   esi
c0016c27:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c2a:	83 c4 10             	add    esp,0x10
c0016c2d:	47                   	inc    edi
c0016c2e:	eb d2                	jmp    c0016c02 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c34:	43                   	inc    ebx
c0016c35:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c39:	eb ab                	jmp    c0016be6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c3b:	83 c4 1c             	add    esp,0x1c
c0016c3e:	5b                   	pop    ebx
c0016c3f:	5e                   	pop    esi
c0016c40:	5f                   	pop    edi
c0016c41:	5d                   	pop    ebp
c0016c42:	c3                   	ret    
c0016c43:	90                   	nop

c0016c44 <Video::clearScreen(unsigned int)>:
c0016c44:	57                   	push   edi
c0016c45:	56                   	push   esi
c0016c46:	53                   	push   ebx
c0016c47:	31 db                	xor    ebx,ebx
c0016c49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c4d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c53:	7e 1f                	jle    c0016c74 <Video::clearScreen(unsigned int)+0x30>
c0016c55:	31 ff                	xor    edi,edi
c0016c57:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c5d:	7e 12                	jle    c0016c71 <Video::clearScreen(unsigned int)+0x2d>
c0016c5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c65:	53                   	push   ebx
c0016c66:	57                   	push   edi
c0016c67:	47                   	inc    edi
c0016c68:	56                   	push   esi
c0016c69:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c6c:	83 c4 10             	add    esp,0x10
c0016c6f:	eb e6                	jmp    c0016c57 <Video::clearScreen(unsigned int)+0x13>
c0016c71:	43                   	inc    ebx
c0016c72:	eb d9                	jmp    c0016c4d <Video::clearScreen(unsigned int)+0x9>
c0016c74:	5b                   	pop    ebx
c0016c75:	5e                   	pop    esi
c0016c76:	5f                   	pop    edi
c0016c77:	c3                   	ret    

c0016c78 <Video::putpixel(int, int, unsigned int)>:
c0016c78:	c7 44 24 04 d4 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6d4
c0016c80:	e9 a0 2f 00 00       	jmp    c0019c25 <Krnl::panic(char const*)>
c0016c85:	90                   	nop

c0016c86 <Video::Video(char const*)>:
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8d:	83 ec 08             	sub    esp,0x8
c0016c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c94:	50                   	push   eax
c0016c95:	e8 70 d2 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	ba 58 a7 02 c0       	mov    edx,0xc002a758
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	89 10                	mov    DWORD PTR [eax],edx
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016cb6:	90                   	nop
c0016cb7:	83 c4 0c             	add    esp,0xc
c0016cba:	c3                   	ret    
c0016cbb:	90                   	nop

c0016cbc <Video::~Video()>:
c0016cbc:	83 ec 0c             	sub    esp,0xc
c0016cbf:	ba 58 a7 02 c0       	mov    edx,0xc002a758
c0016cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc8:	89 10                	mov    DWORD PTR [eax],edx
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	50                   	push   eax
c0016cd2:	e8 15 cf ff ff       	call   c0013bec <Device::~Device()>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	90                   	nop
c0016cdb:	83 c4 0c             	add    esp,0xc
c0016cde:	c3                   	ret    
c0016cdf:	90                   	nop

c0016ce0 <Video::~Video()>:
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	83 ec 0c             	sub    esp,0xc
c0016ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cea:	e8 cd ff ff ff       	call   c0016cbc <Video::~Video()>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	83 ec 08             	sub    esp,0x8
c0016cf5:	68 64 01 00 00       	push   0x164
c0016cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfe:	e8 10 bb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	83 c4 0c             	add    esp,0xc
c0016d09:	c3                   	ret    

c0016d0a <Video::isMonochrome()>:
c0016d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d0e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d14:	c3                   	ret    
c0016d15:	90                   	nop

c0016d16 <Video::getWidth()>:
c0016d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d20:	c3                   	ret    
c0016d21:	90                   	nop

c0016d22 <Video::getHeight()>:
c0016d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d2c:	c3                   	ret    
c0016d2d:	90                   	nop

c0016d2e <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d2e:	55                   	push   ebp
c0016d2f:	57                   	push   edi
c0016d30:	56                   	push   esi
c0016d31:	53                   	push   ebx
c0016d32:	83 ec 2c             	sub    esp,0x2c
c0016d35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d3d:	83 f8 01             	cmp    eax,0x1
c0016d40:	19 c9                	sbb    ecx,ecx
c0016d42:	31 db                	xor    ebx,ebx
c0016d44:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d48:	89 cd                	mov    ebp,ecx
c0016d4a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d52:	f7 d5                	not    ebp
c0016d54:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d5e:	01 d8                	add    eax,ebx
c0016d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d64:	56                   	push   esi
c0016d65:	e8 b8 ff ff ff       	call   c0016d22 <Video::getHeight()>
c0016d6a:	59                   	pop    ecx
c0016d6b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d6f:	7e 70                	jle    c0016de1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d75:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d79:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d84:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d8f:	89 f8                	mov    eax,edi
c0016d91:	83 c0 20             	add    eax,0x20
c0016d94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d98:	56                   	push   esi
c0016d99:	e8 78 ff ff ff       	call   c0016d16 <Video::getWidth()>
c0016d9e:	5a                   	pop    edx
c0016d9f:	39 c7                	cmp    edi,eax
c0016da1:	7d 34                	jge    c0016dd7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016da3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016da8:	74 05                	je     c0016daf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016daa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dac:	55                   	push   ebp
c0016dad:	eb 0d                	jmp    c0016dbc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016daf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016db4:	74 12                	je     c0016dc8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016db6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016db8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016dbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dc0:	57                   	push   edi
c0016dc1:	56                   	push   esi
c0016dc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016dcc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016dd0:	47                   	inc    edi
c0016dd1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016dd5:	75 c1                	jne    c0016d98 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016dd7:	43                   	inc    ebx
c0016dd8:	83 fb 20             	cmp    ebx,0x20
c0016ddb:	0f 85 79 ff ff ff    	jne    c0016d5a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016de1:	83 c4 2c             	add    esp,0x2c
c0016de4:	5b                   	pop    ebx
c0016de5:	5e                   	pop    esi
c0016de6:	5f                   	pop    edi
c0016de7:	5d                   	pop    ebp
c0016de8:	c3                   	ret    
c0016de9:	90                   	nop

c0016dea <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016dea:	55                   	push   ebp
c0016deb:	57                   	push   edi
c0016dec:	56                   	push   esi
c0016ded:	53                   	push   ebx
c0016dee:	83 ec 28             	sub    esp,0x28
c0016df1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016df5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016df9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016dfd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e01:	c1 e7 08             	shl    edi,0x8
c0016e04:	01 c7                	add    edi,eax
c0016e06:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e0a:	c1 e0 08             	shl    eax,0x8
c0016e0d:	01 d0                	add    eax,edx
c0016e0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e17:	0f af c7             	imul   eax,edi
c0016e1a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e21:	50                   	push   eax
c0016e22:	e8 fd 87 ff ff       	call   c000f624 <malloc>
c0016e27:	83 c4 10             	add    esp,0x10
c0016e2a:	89 c5                	mov    ebp,eax
c0016e2c:	85 c0                	test   eax,eax
c0016e2e:	75 15                	jne    c0016e45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016e30:	83 ec 0c             	sub    esp,0xc
c0016e33:	68 f5 a6 02 c0       	push   0xc002a6f5
c0016e38:	e8 b6 ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016e3d:	83 c4 10             	add    esp,0x10
c0016e40:	e9 1c 01 00 00       	jmp    c0016f61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e45:	be 12 00 00 00       	mov    esi,0x12
c0016e4a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016e4e:	74 11                	je     c0016e61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016e50:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016e54:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016e58:	c1 fe 03             	sar    esi,0x3
c0016e5b:	0f af f0             	imul   esi,eax
c0016e5e:	83 c6 12             	add    esi,0x12
c0016e61:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e65:	74 04                	je     c0016e6b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016e67:	85 ff                	test   edi,edi
c0016e69:	75 12                	jne    c0016e7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016e6b:	83 ec 0c             	sub    esp,0xc
c0016e6e:	68 0c a7 02 c0       	push   0xc002a70c
c0016e73:	e8 7b ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016e78:	e9 ce 00 00 00       	jmp    c0016f4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016e7d:	52                   	push   edx
c0016e7e:	52                   	push   edx
c0016e7f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016e83:	50                   	push   eax
c0016e84:	68 21 a7 02 c0       	push   0xc002a721
c0016e89:	e8 65 ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016e8e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	80 fa 02             	cmp    dl,0x2
c0016e98:	0f 85 98 00 00 00    	jne    c0016f36 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016e9e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ea3:	75 10                	jne    c0016eb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ea5:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016ea9:	75 0a                	jne    c0016eb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016eab:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016eae:	83 e8 18             	sub    eax,0x18
c0016eb1:	a8 f7                	test   al,0xf7
c0016eb3:	74 0a                	je     c0016ebf <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016eb5:	83 ec 0c             	sub    esp,0xc
c0016eb8:	68 2e a7 02 c0       	push   0xc002a72e
c0016ebd:	eb 7f                	jmp    c0016f3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016ebf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ec7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ecf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ed3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016edb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016edf:	75 0c                	jne    c0016eed <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016ee1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016ee6:	c1 e0 18             	shl    eax,0x18
c0016ee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016eed:	41                   	inc    ecx
c0016eee:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016ef3:	c1 e2 10             	shl    edx,0x10
c0016ef6:	89 d0                	mov    eax,edx
c0016ef8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016efd:	c1 e2 08             	shl    edx,0x8
c0016f00:	09 c2                	or     edx,eax
c0016f02:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016f06:	09 c2                	or     edx,eax
c0016f08:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016f0c:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016f10:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f14:	c1 f8 03             	sar    eax,0x3
c0016f17:	01 c6                	add    esi,eax
c0016f19:	89 c8                	mov    eax,ecx
c0016f1b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f1f:	39 c7                	cmp    edi,eax
c0016f21:	7f b0                	jg     c0016ed3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f23:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f2b:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016f2e:	7e 22                	jle    c0016f52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016f30:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016f34:	eb 99                	jmp    c0016ecf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016f36:	50                   	push   eax
c0016f37:	50                   	push   eax
c0016f38:	52                   	push   edx
c0016f39:	68 3c a7 02 c0       	push   0xc002a73c
c0016f3e:	e8 b0 b9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016f43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f46:	e8 e9 86 ff ff       	call   c000f634 <free>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	31 ed                	xor    ebp,ebp
c0016f50:	eb 0f                	jmp    c0016f61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016f52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f56:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016f59:	89 38                	mov    DWORD PTR [eax],edi
c0016f5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f5f:	89 08                	mov    DWORD PTR [eax],ecx
c0016f61:	83 c4 1c             	add    esp,0x1c
c0016f64:	89 e8                	mov    eax,ebp
c0016f66:	5b                   	pop    ebx
c0016f67:	5e                   	pop    esi
c0016f68:	5f                   	pop    edi
c0016f69:	5d                   	pop    ebp
c0016f6a:	c3                   	ret    
c0016f6b:	90                   	nop

c0016f6c <Video::putTGA(int, int, unsigned char*, int)>:
c0016f6c:	55                   	push   ebp
c0016f6d:	57                   	push   edi
c0016f6e:	56                   	push   esi
c0016f6f:	53                   	push   ebx
c0016f70:	83 ec 28             	sub    esp,0x28
c0016f73:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f7b:	50                   	push   eax
c0016f7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f80:	50                   	push   eax
c0016f81:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f85:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f89:	56                   	push   esi
c0016f8a:	e8 5b fe ff ff       	call   c0016dea <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016f8f:	83 c4 20             	add    esp,0x20
c0016f92:	85 c0                	test   eax,eax
c0016f94:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f98:	74 35                	je     c0016fcf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f9a:	89 c7                	mov    edi,eax
c0016f9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fa0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fa4:	39 d8                	cmp    eax,ebx
c0016fa6:	7e 27                	jle    c0016fcf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fa8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fb4:	39 e8                	cmp    eax,ebp
c0016fb6:	7e 14                	jle    c0016fcc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016fb8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fba:	83 c7 04             	add    edi,0x4
c0016fbd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016fc0:	53                   	push   ebx
c0016fc1:	55                   	push   ebp
c0016fc2:	45                   	inc    ebp
c0016fc3:	56                   	push   esi
c0016fc4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	eb e0                	jmp    c0016fac <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016fcc:	43                   	inc    ebx
c0016fcd:	eb cd                	jmp    c0016f9c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016fcf:	83 c4 1c             	add    esp,0x1c
c0016fd2:	5b                   	pop    ebx
c0016fd3:	5e                   	pop    esi
c0016fd4:	5f                   	pop    edi
c0016fd5:	5d                   	pop    ebp
c0016fd6:	c3                   	ret    
c0016fd7:	90                   	nop

c0016fd8 <ACPI::close(int, int, void*)>:
c0016fd8:	83 ec 1c             	sub    esp,0x1c
c0016fdb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016fe3:	74 0a                	je     c0016fef <ACPI::close(int, int, void*)+0x17>
c0016fe5:	b8 00 00 00 00       	mov    eax,0x0
c0016fea:	e9 9a 00 00 00       	jmp    c0017089 <ACPI::close(int, int, void*)+0xb1>
c0016fef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ff4:	75 37                	jne    c001702d <ACPI::close(int, int, void*)+0x55>
c0016ff6:	83 ec 0c             	sub    esp,0xc
c0016ff9:	68 98 a7 02 c0       	push   0xc002a798
c0016ffe:	e8 f0 b8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c001700b:	85 c0                	test   eax,eax
c001700d:	74 07                	je     c0017016 <ACPI::close(int, int, void*)+0x3e>
c001700f:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c0017014:	ff d0                	call   eax
c0017016:	83 ec 0c             	sub    esp,0xc
c0017019:	68 bc a8 02 c0       	push   0xc002a8bc
c001701e:	e8 02 2c 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001702b:	eb 5c                	jmp    c0017089 <ACPI::close(int, int, void*)+0xb1>
c001702d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017032:	75 50                	jne    c0017084 <ACPI::close(int, int, void*)+0xac>
c0017034:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c0017039:	85 c0                	test   eax,eax
c001703b:	74 07                	je     c0017044 <ACPI::close(int, int, void*)+0x6c>
c001703d:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c0017042:	ff d0                	call   eax
c0017044:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017049:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001704e:	83 e0 02             	and    eax,0x2
c0017051:	74 1c                	je     c001706f <ACPI::close(int, int, void*)+0x97>
c0017053:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001705a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001705e:	89 c2                	mov    edx,eax
c0017060:	ec                   	in     al,dx
c0017061:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017065:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017069:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001706d:	eb da                	jmp    c0017049 <ACPI::close(int, int, void*)+0x71>
c001706f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017076:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001707b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001707f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017083:	ee                   	out    dx,al
c0017084:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017089:	83 c4 1c             	add    esp,0x1c
c001708c:	c3                   	ret    

c001708d <findRSDP()>:
c001708d:	83 ec 1c             	sub    esp,0x1c
c0017090:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017095:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001709b:	83 e0 04             	and    eax,0x4
c001709e:	84 c0                	test   al,al
c00170a0:	75 07                	jne    c00170a9 <findRSDP()+0x1c>
c00170a2:	b8 00 00 00 00       	mov    eax,0x0
c00170a7:	eb 6a                	jmp    c0017113 <findRSDP()+0x86>
c00170a9:	a1 f0 d6 02 c0       	mov    eax,ds:0xc002d6f0
c00170ae:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170b3:	7f 1b                	jg     c00170d0 <findRSDP()+0x43>
c00170b5:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00170ba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170c0:	83 e2 fb             	and    edx,0xfffffffb
c00170c3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170c9:	b8 00 00 00 00       	mov    eax,0x0
c00170ce:	eb 43                	jmp    c0017113 <findRSDP()+0x86>
c00170d0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00170d8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00170e0:	77 2c                	ja     c001710e <findRSDP()+0x81>
c00170e2:	83 ec 04             	sub    esp,0x4
c00170e5:	6a 08                	push   0x8
c00170e7:	68 a5 a7 02 c0       	push   0xc002a7a5
c00170ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170f0:	e8 48 95 fe ff       	call   c000063d <memcmp>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	85 c0                	test   eax,eax
c00170fa:	0f 94 c0             	sete   al
c00170fd:	84 c0                	test   al,al
c00170ff:	74 06                	je     c0017107 <findRSDP()+0x7a>
c0017101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017105:	eb 0c                	jmp    c0017113 <findRSDP()+0x86>
c0017107:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001710c:	eb ca                	jmp    c00170d8 <findRSDP()+0x4b>
c001710e:	b8 00 00 00 00       	mov    eax,0x0
c0017113:	83 c4 1c             	add    esp,0x1c
c0017116:	c3                   	ret    

c0017117 <loadACPITables(unsigned char*)>:
c0017117:	56                   	push   esi
c0017118:	53                   	push   ebx
c0017119:	83 ec 44             	sub    esp,0x44
c001711c:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017121:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017127:	83 e0 04             	and    eax,0x4
c001712a:	84 c0                	test   al,al
c001712c:	0f 84 05 02 00 00    	je     c0017337 <loadACPITables(unsigned char*)+0x220>
c0017132:	a0 60 df 02 c0       	mov    al,ds:0xc002df60
c0017137:	84 c0                	test   al,al
c0017139:	74 75                	je     c00171b0 <loadACPITables(unsigned char*)+0x99>
c001713b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001713f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017147:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001714a:	83 e8 24             	sub    eax,0x24
c001714d:	c1 e8 03             	shr    eax,0x3
c0017150:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017154:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001715c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017160:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017164:	0f 8d b2 00 00 00    	jge    c001721c <loadACPITables(unsigned char*)+0x105>
c001716a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001716e:	83 c0 24             	add    eax,0x24
c0017171:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017175:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001717d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017181:	c1 e0 03             	shl    eax,0x3
c0017184:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017188:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001718c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001718f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017191:	89 c1                	mov    ecx,eax
c0017193:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c0017198:	8d 50 01             	lea    edx,[eax+0x1]
c001719b:	89 15 4c dd 02 c0    	mov    DWORD PTR ds:0xc002dd4c,edx
c00171a1:	89 ca                	mov    edx,ecx
c00171a3:	89 14 c5 64 dd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd229c],edx
c00171aa:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00171ae:	eb ac                	jmp    c001715c <loadACPITables(unsigned char*)+0x45>
c00171b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171bf:	83 e8 24             	sub    eax,0x24
c00171c2:	c1 e8 02             	shr    eax,0x2
c00171c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171c9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00171d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171d5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00171d9:	7d 41                	jge    c001721c <loadACPITables(unsigned char*)+0x105>
c00171db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171df:	83 c0 24             	add    eax,0x24
c00171e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171f2:	c1 e0 02             	shl    eax,0x2
c00171f5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00171f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171ff:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c0017204:	8d 50 01             	lea    edx,[eax+0x1]
c0017207:	89 15 4c dd 02 c0    	mov    DWORD PTR ds:0xc002dd4c,edx
c001720d:	89 ca                	mov    edx,ecx
c001720f:	89 14 c5 64 dd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd229c],edx
c0017216:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001721a:	eb b5                	jmp    c00171d1 <loadACPITables(unsigned char*)+0xba>
c001721c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017224:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c0017229:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001722d:	0f 8d 05 01 00 00    	jge    c0017338 <loadACPITables(unsigned char*)+0x221>
c0017233:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017237:	8b 04 c5 64 dd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd229c]
c001723e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017246:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001724a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001724e:	25 ff 0f 00 00       	and    eax,0xfff
c0017253:	89 c6                	mov    esi,eax
c0017255:	e8 39 a8 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001725a:	89 c3                	mov    ebx,eax
c001725c:	83 ec 0c             	sub    esp,0xc
c001725f:	6a 01                	push   0x1
c0017261:	e8 9d a6 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001726d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017273:	83 ec 0c             	sub    esp,0xc
c0017276:	6a 01                	push   0x1
c0017278:	6a 01                	push   0x1
c001727a:	50                   	push   eax
c001727b:	52                   	push   edx
c001727c:	53                   	push   ebx
c001727d:	e8 40 b0 ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017282:	83 c4 20             	add    esp,0x20
c0017285:	09 f0                	or     eax,esi
c0017287:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001728b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001728f:	c1 e0 03             	shl    eax,0x3
c0017292:	05 60 dd 02 c0       	add    eax,0xc002dd60
c0017297:	83 ec 04             	sub    esp,0x4
c001729a:	6a 04                	push   0x4
c001729c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172a0:	50                   	push   eax
c00172a1:	e8 fa 93 fe ff       	call   c00006a0 <memcpy>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b8:	05 00 10 00 00       	add    eax,0x1000
c00172bd:	c1 e8 0c             	shr    eax,0xc
c00172c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00172cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172cf:	25 ff 0f 00 00       	and    eax,0xfff
c00172d4:	89 c6                	mov    esi,eax
c00172d6:	e8 b8 a7 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00172db:	89 c3                	mov    ebx,eax
c00172dd:	83 ec 0c             	sub    esp,0xc
c00172e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00172e4:	e8 1a a6 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	6a 01                	push   0x1
c00172fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00172ff:	50                   	push   eax
c0017300:	52                   	push   edx
c0017301:	53                   	push   ebx
c0017302:	e8 bb af ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017307:	83 c4 20             	add    esp,0x20
c001730a:	09 f0                	or     eax,esi
c001730c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017310:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017313:	83 ec 0c             	sub    esp,0xc
c0017316:	50                   	push   eax
c0017317:	e8 4b a9 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017323:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017327:	89 14 c5 64 dd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd229c],edx
c001732e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017332:	e9 ed fe ff ff       	jmp    c0017224 <loadACPITables(unsigned char*)+0x10d>
c0017337:	90                   	nop
c0017338:	83 c4 44             	add    esp,0x44
c001733b:	5b                   	pop    ebx
c001733c:	5e                   	pop    esi
c001733d:	c3                   	ret    

c001733e <findRSDT(unsigned char*)>:
c001733e:	56                   	push   esi
c001733f:	53                   	push   ebx
c0017340:	83 ec 44             	sub    esp,0x44
c0017343:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017348:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001734e:	83 e0 04             	and    eax,0x4
c0017351:	84 c0                	test   al,al
c0017353:	75 0a                	jne    c001735f <findRSDT(unsigned char*)+0x21>
c0017355:	b8 00 00 00 00       	mov    eax,0x0
c001735a:	e9 f7 00 00 00       	jmp    c0017456 <findRSDT(unsigned char*)+0x118>
c001735f:	83 ec 04             	sub    esp,0x4
c0017362:	6a 24                	push   0x24
c0017364:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017368:	8d 44 24 18          	lea    eax,[esp+0x18]
c001736c:	50                   	push   eax
c001736d:	e8 2e 93 fe ff       	call   c00006a0 <memcpy>
c0017372:	83 c4 10             	add    esp,0x10
c0017375:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017379:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001737d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017389:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001738d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017391:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017395:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001739d:	25 ff 0f 00 00       	and    eax,0xfff
c00173a2:	89 c6                	mov    esi,eax
c00173a4:	e8 ea a6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00173a9:	89 c3                	mov    ebx,eax
c00173ab:	83 ec 0c             	sub    esp,0xc
c00173ae:	6a 02                	push   0x2
c00173b0:	e8 4e a5 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00173b5:	83 c4 10             	add    esp,0x10
c00173b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173c2:	83 ec 0c             	sub    esp,0xc
c00173c5:	6a 01                	push   0x1
c00173c7:	6a 02                	push   0x2
c00173c9:	50                   	push   eax
c00173ca:	52                   	push   edx
c00173cb:	53                   	push   ebx
c00173cc:	e8 f1 ae ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173d1:	83 c4 20             	add    esp,0x20
c00173d4:	09 f0                	or     eax,esi
c00173d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00173da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173de:	25 ff 0f 00 00       	and    eax,0xfff
c00173e3:	89 c6                	mov    esi,eax
c00173e5:	e8 a9 a6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00173ea:	89 c3                	mov    ebx,eax
c00173ec:	83 ec 0c             	sub    esp,0xc
c00173ef:	6a 02                	push   0x2
c00173f1:	e8 0d a5 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017403:	83 ec 0c             	sub    esp,0xc
c0017406:	6a 01                	push   0x1
c0017408:	6a 02                	push   0x2
c001740a:	50                   	push   eax
c001740b:	52                   	push   edx
c001740c:	53                   	push   ebx
c001740d:	e8 b0 ae ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017412:	83 c4 20             	add    esp,0x20
c0017415:	09 f0                	or     eax,esi
c0017417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001741b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017420:	75 11                	jne    c0017433 <findRSDT(unsigned char*)+0xf5>
c0017422:	c6 05 60 df 02 c0 00 	mov    BYTE PTR ds:0xc002df60,0x0
c0017429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001742d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017431:	eb 1f                	jmp    c0017452 <findRSDT(unsigned char*)+0x114>
c0017433:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017438:	75 11                	jne    c001744b <findRSDT(unsigned char*)+0x10d>
c001743a:	c6 05 60 df 02 c0 01 	mov    BYTE PTR ds:0xc002df60,0x1
c0017441:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017445:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017449:	eb 07                	jmp    c0017452 <findRSDT(unsigned char*)+0x114>
c001744b:	b8 00 00 00 00       	mov    eax,0x0
c0017450:	eb 04                	jmp    c0017456 <findRSDT(unsigned char*)+0x118>
c0017452:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017456:	83 c4 44             	add    esp,0x44
c0017459:	5b                   	pop    ebx
c001745a:	5e                   	pop    esi
c001745b:	c3                   	ret    

c001745c <findDataTable(unsigned char*, char*)>:
c001745c:	83 ec 1c             	sub    esp,0x1c
c001745f:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017464:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001746a:	83 e0 04             	and    eax,0x4
c001746d:	84 c0                	test   al,al
c001746f:	75 07                	jne    c0017478 <findDataTable(unsigned char*, char*)+0x1c>
c0017471:	b8 00 00 00 00       	mov    eax,0x0
c0017476:	eb 7c                	jmp    c00174f4 <findDataTable(unsigned char*, char*)+0x98>
c0017478:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017480:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c0017485:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017489:	7d 3a                	jge    c00174c5 <findDataTable(unsigned char*, char*)+0x69>
c001748b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001748f:	c1 e0 03             	shl    eax,0x3
c0017492:	05 60 dd 02 c0       	add    eax,0xc002dd60
c0017497:	83 ec 04             	sub    esp,0x4
c001749a:	6a 04                	push   0x4
c001749c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174a0:	50                   	push   eax
c00174a1:	e8 97 91 fe ff       	call   c000063d <memcmp>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	85 c0                	test   eax,eax
c00174ab:	0f 94 c0             	sete   al
c00174ae:	84 c0                	test   al,al
c00174b0:	74 0d                	je     c00174bf <findDataTable(unsigned char*, char*)+0x63>
c00174b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174b6:	8b 04 c5 64 dd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd229c]
c00174bd:	eb 35                	jmp    c00174f4 <findDataTable(unsigned char*, char*)+0x98>
c00174bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174c3:	eb bb                	jmp    c0017480 <findDataTable(unsigned char*, char*)+0x24>
c00174c5:	a0 60 df 02 c0       	mov    al,ds:0xc002df60
c00174ca:	84 c0                	test   al,al
c00174cc:	74 07                	je     c00174d5 <findDataTable(unsigned char*, char*)+0x79>
c00174ce:	b8 58 00 00 00       	mov    eax,0x58
c00174d3:	eb 05                	jmp    c00174da <findDataTable(unsigned char*, char*)+0x7e>
c00174d5:	b8 52 00 00 00       	mov    eax,0x52
c00174da:	83 ec 04             	sub    esp,0x4
c00174dd:	50                   	push   eax
c00174de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174e2:	68 e0 a8 02 c0       	push   0xc002a8e0
c00174e7:	e8 07 b4 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	b8 00 00 00 00       	mov    eax,0x0
c00174f4:	83 c4 1c             	add    esp,0x1c
c00174f7:	c3                   	ret    

c00174f8 <scanMADT()>:
c00174f8:	53                   	push   ebx
c00174f9:	83 ec 38             	sub    esp,0x38
c00174fc:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017501:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017507:	83 e0 04             	and    eax,0x4
c001750a:	84 c0                	test   al,al
c001750c:	0f 84 63 04 00 00    	je     c0017975 <scanMADT()+0x47d>
c0017512:	e8 76 fb ff ff       	call   c001708d <findRSDP()>
c0017517:	a3 6c df 02 c0       	mov    ds:0xc002df6c,eax
c001751c:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c0017521:	85 c0                	test   eax,eax
c0017523:	75 19                	jne    c001753e <scanMADT()+0x46>
c0017525:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001752a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017530:	83 e2 fb             	and    edx,0xfffffffb
c0017533:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017539:	e9 3b 04 00 00       	jmp    c0017979 <scanMADT()+0x481>
c001753e:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c0017543:	83 ec 0c             	sub    esp,0xc
c0017546:	50                   	push   eax
c0017547:	e8 f2 fd ff ff       	call   c001733e <findRSDT(unsigned char*)>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c0017554:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0017559:	85 c0                	test   eax,eax
c001755b:	75 19                	jne    c0017576 <scanMADT()+0x7e>
c001755d:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017562:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017568:	83 e2 fb             	and    edx,0xfffffffb
c001756b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017571:	e9 03 04 00 00       	jmp    c0017979 <scanMADT()+0x481>
c0017576:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c001757b:	83 ec 0c             	sub    esp,0xc
c001757e:	50                   	push   eax
c001757f:	e8 93 fb ff ff       	call   c0017117 <loadACPITables(unsigned char*)>
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c001758c:	83 ec 08             	sub    esp,0x8
c001758f:	68 ae a7 02 c0       	push   0xc002a7ae
c0017594:	50                   	push   eax
c0017595:	e8 c2 fe ff ff       	call   c001745c <findDataTable(unsigned char*, char*)>
c001759a:	83 c4 10             	add    esp,0x10
c001759d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175a1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00175a6:	75 19                	jne    c00175c1 <scanMADT()+0xc9>
c00175a8:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00175ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175b3:	83 e2 fe             	and    edx,0xfffffffe
c00175b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175bc:	e9 b8 03 00 00       	jmp    c0017979 <scanMADT()+0x481>
c00175c1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00175c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175d0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00175d4:	0f 87 9f 03 00 00    	ja     c0017979 <scanMADT()+0x481>
c00175da:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00175e2:	0f 87 91 03 00 00    	ja     c0017979 <scanMADT()+0x481>
c00175e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f4:	8d 50 01             	lea    edx,[eax+0x1]
c00175f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175ff:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017603:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017607:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001760b:	8d 50 01             	lea    edx,[eax+0x1]
c001760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017616:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001761a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001761e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017623:	0f 86 4f 03 00 00    	jbe    c0017978 <scanMADT()+0x480>
c0017629:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001762e:	75 57                	jne    c0017687 <scanMADT()+0x18f>
c0017630:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017634:	8d 50 01             	lea    edx,[eax+0x1]
c0017637:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001763b:	8a 15 60 e1 02 c0    	mov    dl,BYTE PTR ds:0xc002e160
c0017641:	0f b6 d2             	movzx  edx,dl
c0017644:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017648:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001764c:	88 82 a0 e1 02 c0    	mov    BYTE PTR [edx-0x3ffd1e60],al
c0017652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017656:	8d 50 01             	lea    edx,[eax+0x1]
c0017659:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001765d:	8a 15 60 e1 02 c0    	mov    dl,BYTE PTR ds:0xc002e160
c0017663:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017666:	88 0d 60 e1 02 c0    	mov    BYTE PTR ds:0xc002e160,cl
c001766c:	0f b6 d2             	movzx  edx,dl
c001766f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017673:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017677:	88 82 80 e1 02 c0    	mov    BYTE PTR [edx-0x3ffd1e80],al
c001767d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017682:	e9 da 02 00 00       	jmp    c0017961 <scanMADT()+0x469>
c0017687:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001768c:	0f 85 14 01 00 00    	jne    c00177a6 <scanMADT()+0x2ae>
c0017692:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017696:	8d 50 01             	lea    edx,[eax+0x1]
c0017699:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001769d:	8a 15 20 e0 02 c0    	mov    dl,BYTE PTR ds:0xc002e020
c00176a3:	0f b6 d2             	movzx  edx,dl
c00176a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176aa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176ae:	88 82 40 e0 02 c0    	mov    BYTE PTR [edx-0x3ffd1fc0],al
c00176b4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00176b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c0:	01 d0                	add    eax,edx
c00176c2:	83 c0 2c             	add    eax,0x2c
c00176c5:	8a 00                	mov    al,BYTE PTR [eax]
c00176c7:	0f b6 d0             	movzx  edx,al
c00176ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00176d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176d9:	0f b6 c0             	movzx  eax,al
c00176dc:	c1 e0 08             	shl    eax,0x8
c00176df:	89 d1                	mov    ecx,edx
c00176e1:	09 c1                	or     ecx,eax
c00176e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176e7:	8d 50 02             	lea    edx,[eax+0x2]
c00176ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176f2:	0f b6 c0             	movzx  eax,al
c00176f5:	c1 e0 10             	shl    eax,0x10
c00176f8:	09 c1                	or     ecx,eax
c00176fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176fe:	8d 50 03             	lea    edx,[eax+0x3]
c0017701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017705:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017709:	0f b6 c0             	movzx  eax,al
c001770c:	c1 e0 18             	shl    eax,0x18
c001770f:	09 c1                	or     ecx,eax
c0017711:	89 ca                	mov    edx,ecx
c0017713:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0017718:	0f b6 c0             	movzx  eax,al
c001771b:	89 14 85 60 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fa0],edx
c0017722:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017727:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001772b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772f:	01 d0                	add    eax,edx
c0017731:	83 c0 2c             	add    eax,0x2c
c0017734:	8a 00                	mov    al,BYTE PTR [eax]
c0017736:	0f b6 d0             	movzx  edx,al
c0017739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001773d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017740:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017744:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017748:	0f b6 c0             	movzx  eax,al
c001774b:	c1 e0 08             	shl    eax,0x8
c001774e:	89 d1                	mov    ecx,edx
c0017750:	09 c1                	or     ecx,eax
c0017752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017756:	8d 50 02             	lea    edx,[eax+0x2]
c0017759:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001775d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017761:	0f b6 c0             	movzx  eax,al
c0017764:	c1 e0 10             	shl    eax,0x10
c0017767:	09 c1                	or     ecx,eax
c0017769:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776d:	8d 50 03             	lea    edx,[eax+0x3]
c0017770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017774:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017778:	0f b6 c0             	movzx  eax,al
c001777b:	c1 e0 18             	shl    eax,0x18
c001777e:	09 c1                	or     ecx,eax
c0017780:	89 ca                	mov    edx,ecx
c0017782:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0017787:	0f b6 c0             	movzx  eax,al
c001778a:	89 14 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],edx
c0017791:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017796:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c001779b:	40                   	inc    eax
c001779c:	a2 20 e0 02 c0       	mov    ds:0xc002e020,al
c00177a1:	e9 bb 01 00 00       	jmp    c0017961 <scanMADT()+0x469>
c00177a6:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00177ab:	0f 85 e9 00 00 00    	jne    c001789a <scanMADT()+0x3a2>
c00177b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b5:	8d 50 01             	lea    edx,[eax+0x1]
c00177b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177c4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00177c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177cc:	8d 50 01             	lea    edx,[eax+0x1]
c00177cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177d7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177db:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00177df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e7:	01 d0                	add    eax,edx
c00177e9:	83 c0 2c             	add    eax,0x2c
c00177ec:	8a 00                	mov    al,BYTE PTR [eax]
c00177ee:	0f b6 d0             	movzx  edx,al
c00177f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f5:	8d 48 01             	lea    ecx,[eax+0x1]
c00177f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177fc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017800:	0f b6 c0             	movzx  eax,al
c0017803:	c1 e0 08             	shl    eax,0x8
c0017806:	89 d1                	mov    ecx,edx
c0017808:	09 c1                	or     ecx,eax
c001780a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780e:	8d 50 02             	lea    edx,[eax+0x2]
c0017811:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017815:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017819:	0f b6 c0             	movzx  eax,al
c001781c:	c1 e0 10             	shl    eax,0x10
c001781f:	09 c1                	or     ecx,eax
c0017821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017825:	8d 50 03             	lea    edx,[eax+0x3]
c0017828:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017830:	0f b6 c0             	movzx  eax,al
c0017833:	c1 e0 18             	shl    eax,0x18
c0017836:	09 c8                	or     eax,ecx
c0017838:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001783c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017841:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017845:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017849:	01 d0                	add    eax,edx
c001784b:	83 c0 2c             	add    eax,0x2c
c001784e:	8a 00                	mov    al,BYTE PTR [eax]
c0017850:	0f b6 c0             	movzx  eax,al
c0017853:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017857:	8d 4a 01             	lea    ecx,[edx+0x1]
c001785a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001785e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017862:	0f b6 d2             	movzx  edx,dl
c0017865:	c1 e2 08             	shl    edx,0x8
c0017868:	09 d0                	or     eax,edx
c001786a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001786f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017874:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001787d:	88 90 00 c9 02 c0    	mov    BYTE PTR [eax-0x3ffd3700],dl
c0017883:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017888:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001788d:	66 89 84 12 00 e0 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2000],ax
c0017895:	e9 c7 00 00 00       	jmp    c0017961 <scanMADT()+0x469>
c001789a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001789f:	0f 85 b0 00 00 00    	jne    c0017955 <scanMADT()+0x45d>
c00178a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a9:	8d 50 01             	lea    edx,[eax+0x1]
c00178ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178b4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178b8:	0f b6 c0             	movzx  eax,al
c00178bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c7:	01 d0                	add    eax,edx
c00178c9:	83 c0 2c             	add    eax,0x2c
c00178cc:	8a 00                	mov    al,BYTE PTR [eax]
c00178ce:	0f b6 d0             	movzx  edx,al
c00178d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00178d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178dc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178e0:	0f b6 c0             	movzx  eax,al
c00178e3:	c1 e0 08             	shl    eax,0x8
c00178e6:	09 d0                	or     eax,edx
c00178e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00178ec:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f5:	8d 50 01             	lea    edx,[eax+0x1]
c00178f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017900:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017904:	0f b6 c0             	movzx  eax,al
c0017907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001790b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790f:	c1 e0 08             	shl    eax,0x8
c0017912:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017916:	89 c1                	mov    ecx,eax
c0017918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001791c:	c1 e0 18             	shl    eax,0x18
c001791f:	89 c3                	mov    ebx,eax
c0017921:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c0017926:	8d 50 01             	lea    edx,[eax+0x1]
c0017929:	89 15 70 df 02 c0    	mov    DWORD PTR ds:0xc002df70,edx
c001792f:	09 d9                	or     ecx,ebx
c0017931:	89 ca                	mov    edx,ecx
c0017933:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001793a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001793e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017946:	68 10 a9 02 c0       	push   0xc002a910
c001794b:	e8 a3 af ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	eb 0c                	jmp    c0017961 <scanMADT()+0x469>
c0017955:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001795a:	75 05                	jne    c0017961 <scanMADT()+0x469>
c001795c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017961:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017966:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001796a:	01 d0                	add    eax,edx
c001796c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017970:	e9 54 fc ff ff       	jmp    c00175c9 <scanMADT()+0xd1>
c0017975:	90                   	nop
c0017976:	eb 01                	jmp    c0017979 <scanMADT()+0x481>
c0017978:	90                   	nop
c0017979:	83 c4 38             	add    esp,0x38
c001797c:	5b                   	pop    ebx
c001797d:	c3                   	ret    

c001797e <ACPI::ACPI()>:
c001797e:	83 ec 0c             	sub    esp,0xc
c0017981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017985:	83 ec 08             	sub    esp,0x8
c0017988:	68 b3 a7 02 c0       	push   0xc002a7b3
c001798d:	50                   	push   eax
c001798e:	e8 77 c5 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c001799b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799f:	89 10                	mov    DWORD PTR [eax],edx
c00179a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00179ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179be:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00179c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cc:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00179d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00179de:	e8 15 fb ff ff       	call   c00174f8 <scanMADT()>
c00179e3:	90                   	nop
c00179e4:	83 c4 0c             	add    esp,0xc
c00179e7:	c3                   	ret    

c00179e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00179e8:	83 ec 2c             	sub    esp,0x2c
c00179eb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00179ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179f7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00179fb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a00:	88 d0                	mov    al,dl
c0017a02:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a17:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a1d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a21:	0f 8d 97 00 00 00    	jge    c0017abe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a2f:	83 c2 2a             	add    edx,0x2a
c0017a32:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a36:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a3b:	75 78                	jne    c0017ab5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a45:	83 c2 2a             	add    edx,0x2a
c0017a48:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a4c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a50:	75 63                	jne    c0017ab5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a52:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a57:	74 3a                	je     c0017a93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a61:	83 c2 2a             	add    edx,0x2a
c0017a64:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6f:	39 c2                	cmp    edx,eax
c0017a71:	74 10                	je     c0017a83 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a73:	83 ec 0c             	sub    esp,0xc
c0017a76:	68 4c a9 02 c0       	push   0xc002a94c
c0017a7b:	e8 a5 21 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	83 ec 0c             	sub    esp,0xc
c0017a86:	68 b8 a7 02 c0       	push   0xc002a7b8
c0017a8b:	e8 95 21 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017a97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a9f:	83 c2 2a             	add    edx,0x2a
c0017aa2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017aa6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017aa8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017aab:	89 01                	mov    DWORD PTR [ecx],eax
c0017aad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ab0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ab5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ab9:	e9 55 ff ff ff       	jmp    c0017a13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017abe:	90                   	nop
c0017abf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac3:	83 c4 2c             	add    esp,0x2c
c0017ac6:	c2 04 00             	ret    0x4
c0017ac9:	90                   	nop

c0017aca <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017aca:	83 ec 1c             	sub    esp,0x1c
c0017acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ad5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ad9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ade:	88 c8                	mov    al,cl
c0017ae0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ae4:	88 d0                	mov    al,dl
c0017ae6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aee:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017afb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017aff:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b07:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b11:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b18:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b27:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b32:	83 c2 2a             	add    edx,0x2a
c0017b35:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b47:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b4e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b56:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b63:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b73:	3d 00 02 00 00       	cmp    eax,0x200
c0017b78:	75 10                	jne    c0017b8a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017b7a:	83 ec 0c             	sub    esp,0xc
c0017b7d:	68 c7 a7 02 c0       	push   0xc002a7c7
c0017b82:	e8 9e 20 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0017b87:	83 c4 10             	add    esp,0x10
c0017b8a:	90                   	nop
c0017b8b:	83 c4 1c             	add    esp,0x1c
c0017b8e:	c3                   	ret    
c0017b8f:	90                   	nop

c0017b90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b90:	b8 00 00 00 00       	mov    eax,0x0
c0017b95:	c3                   	ret    

c0017b96 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017b96:	83 ec 1c             	sub    esp,0x1c
c0017b99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b9d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ba0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ba4:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017ba9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017bae:	83 ec 08             	sub    esp,0x8
c0017bb1:	52                   	push   edx
c0017bb2:	50                   	push   eax
c0017bb3:	e8 84 70 ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017bbf:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017bc4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017bc9:	83 ec 04             	sub    esp,0x4
c0017bcc:	6a 01                	push   0x1
c0017bce:	52                   	push   edx
c0017bcf:	50                   	push   eax
c0017bd0:	e8 7d 71 ff ff       	call   c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bd5:	83 c4 10             	add    esp,0x10
c0017bd8:	90                   	nop
c0017bd9:	83 c4 1c             	add    esp,0x1c
c0017bdc:	c3                   	ret    
c0017bdd:	90                   	nop

c0017bde <ACPI::open(int, int, void*)>:
c0017bde:	53                   	push   ebx
c0017bdf:	83 ec 28             	sub    esp,0x28
c0017be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017bed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017bf8:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017bfd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c03:	83 e0 04             	and    eax,0x4
c0017c06:	84 c0                	test   al,al
c0017c08:	74 47                	je     c0017c51 <ACPI::open(int, int, void*)+0x73>
c0017c0a:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0017c0f:	83 ec 08             	sub    esp,0x8
c0017c12:	68 e4 a7 02 c0       	push   0xc002a7e4
c0017c17:	50                   	push   eax
c0017c18:	e8 3f f8 ff ff       	call   c001745c <findDataTable(unsigned char*, char*)>
c0017c1d:	83 c4 10             	add    esp,0x10
c0017c20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017c29:	74 26                	je     c0017c51 <ACPI::open(int, int, void*)+0x73>
c0017c2b:	83 ec 0c             	sub    esp,0xc
c0017c2e:	68 e9 a7 02 c0       	push   0xc002a7e9
c0017c33:	e8 bb ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c3f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017c51:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c5d:	8a 00                	mov    al,BYTE PTR [eax]
c0017c5f:	3c 01                	cmp    al,0x1
c0017c61:	75 28                	jne    c0017c8b <ACPI::open(int, int, void*)+0xad>
c0017c63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c67:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017c6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c72:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017c79:	83 ec 0c             	sub    esp,0xc
c0017c7c:	68 fa a7 02 c0       	push   0xc002a7fa
c0017c81:	e8 6d ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017c86:	83 c4 10             	add    esp,0x10
c0017c89:	eb 25                	jmp    c0017cb0 <ACPI::open(int, int, void*)+0xd2>
c0017c8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c8f:	8a 00                	mov    al,BYTE PTR [eax]
c0017c91:	3c 02                	cmp    al,0x2
c0017c93:	75 1b                	jne    c0017cb0 <ACPI::open(int, int, void*)+0xd2>
c0017c95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c99:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	68 02 a8 02 c0       	push   0xc002a802
c0017ca8:	e8 46 ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017cad:	83 c4 10             	add    esp,0x10
c0017cb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017cba:	83 f0 01             	xor    eax,0x1
c0017cbd:	84 c0                	test   al,al
c0017cbf:	74 6a                	je     c0017d2b <ACPI::open(int, int, void*)+0x14d>
c0017cc1:	83 ec 0c             	sub    esp,0xc
c0017cc4:	68 0a a8 02 c0       	push   0xc002a80a
c0017cc9:	e8 25 ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017cce:	83 c4 10             	add    esp,0x10
c0017cd1:	e8 7a 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017cd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cda:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017cdf:	75 28                	jne    c0017d09 <ACPI::open(int, int, void*)+0x12b>
c0017ce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017cec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017cf7:	83 ec 0c             	sub    esp,0xc
c0017cfa:	68 18 a8 02 c0       	push   0xc002a818
c0017cff:	e8 ef ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	eb 22                	jmp    c0017d2b <ACPI::open(int, int, void*)+0x14d>
c0017d09:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017d0e:	75 1b                	jne    c0017d2b <ACPI::open(int, int, void*)+0x14d>
c0017d10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d14:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	68 22 a8 02 c0       	push   0xc002a822
c0017d23:	e8 cb ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d2f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d35:	84 c0                	test   al,al
c0017d37:	74 13                	je     c0017d4c <ACPI::open(int, int, void*)+0x16e>
c0017d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d3d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017d43:	83 f0 01             	xor    eax,0x1
c0017d46:	0f b6 c0             	movzx  eax,al
c0017d49:	40                   	inc    eax
c0017d4a:	eb 05                	jmp    c0017d51 <ACPI::open(int, int, void*)+0x173>
c0017d4c:	b8 00 00 00 00       	mov    eax,0x0
c0017d51:	83 ec 08             	sub    esp,0x8
c0017d54:	50                   	push   eax
c0017d55:	68 2c a8 02 c0       	push   0xc002a82c
c0017d5a:	e8 94 ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d66:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d6c:	84 c0                	test   al,al
c0017d6e:	74 67                	je     c0017dd7 <ACPI::open(int, int, void*)+0x1f9>
c0017d70:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017d78:	83 ec 0c             	sub    esp,0xc
c0017d7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d7f:	e8 a0 78 ff ff       	call   c000f624 <malloc>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	89 c3                	mov    ebx,eax
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	53                   	push   ebx
c0017d8d:	e8 a8 9f 00 00       	call   c0021d3a <PCI::PCI()>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d9d:	83 ec 08             	sub    esp,0x8
c0017da0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017da4:	50                   	push   eax
c0017da5:	e8 70 bf ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db3:	83 c0 08             	add    eax,0x8
c0017db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db8:	6a 00                	push   0x0
c0017dba:	6a 00                	push   0x0
c0017dbc:	6a 00                	push   0x0
c0017dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dc2:	ff d0                	call   eax
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	83 ec 0c             	sub    esp,0xc
c0017dca:	68 35 a8 02 c0       	push   0xc002a835
c0017dcf:	e8 1f ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	83 ec 0c             	sub    esp,0xc
c0017dda:	68 40 a8 02 c0       	push   0xc002a840
c0017ddf:	e8 8c 43 00 00       	call   c001c170 <Thr::loadKernelSymbolTable(char const*)>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0017dec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017df2:	83 e0 04             	and    eax,0x4
c0017df5:	84 c0                	test   al,al
c0017df7:	0f 84 d2 00 00 00    	je     c0017ecf <ACPI::open(int, int, void*)+0x2f1>
c0017dfd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e0b:	e8 14 78 ff ff       	call   c000f624 <malloc>
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	89 c3                	mov    ebx,eax
c0017e15:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0017e1a:	83 ec 04             	sub    esp,0x4
c0017e1d:	50                   	push   eax
c0017e1e:	68 5e a8 02 c0       	push   0xc002a85e
c0017e23:	53                   	push   ebx
c0017e24:	e8 23 b0 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e35:	74 17                	je     c0017e4e <ACPI::open(int, int, void*)+0x270>
c0017e37:	83 ec 0c             	sub    esp,0xc
c0017e3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e3e:	e8 db b2 ff ff       	call   c001311e <File::exists()>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	84 c0                	test   al,al
c0017e48:	74 04                	je     c0017e4e <ACPI::open(int, int, void*)+0x270>
c0017e4a:	b0 01                	mov    al,0x1
c0017e4c:	eb 02                	jmp    c0017e50 <ACPI::open(int, int, void*)+0x272>
c0017e4e:	b0 00                	mov    al,0x0
c0017e50:	84 c0                	test   al,al
c0017e52:	74 22                	je     c0017e76 <ACPI::open(int, int, void*)+0x298>
c0017e54:	83 ec 08             	sub    esp,0x8
c0017e57:	6a 01                	push   0x1
c0017e59:	68 5e a8 02 c0       	push   0xc002a85e
c0017e5e:	e8 60 4d 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c0017e63:	83 c4 10             	add    esp,0x10
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017e6d:	50                   	push   eax
c0017e6e:	e8 5f 4f 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c0017e73:	83 c4 10             	add    esp,0x10
c0017e76:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e7b:	74 1e                	je     c0017e9b <ACPI::open(int, int, void*)+0x2bd>
c0017e7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e82:	74 17                	je     c0017e9b <ACPI::open(int, int, void*)+0x2bd>
c0017e84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8a:	83 c0 08             	add    eax,0x8
c0017e8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8f:	83 ec 0c             	sub    esp,0xc
c0017e92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e96:	ff d0                	call   eax
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0017ea0:	83 ec 08             	sub    esp,0x8
c0017ea3:	68 7b a8 02 c0       	push   0xc002a87b
c0017ea8:	50                   	push   eax
c0017ea9:	e8 ae f5 ff ff       	call   c001745c <findDataTable(unsigned char*, char*)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eb5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017eba:	74 13                	je     c0017ecf <ACPI::open(int, int, void*)+0x2f1>
c0017ebc:	83 ec 08             	sub    esp,0x8
c0017ebf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ec3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ec7:	e8 ca fc ff ff       	call   c0017b96 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0017ed5:	83 ec 08             	sub    esp,0x8
c0017ed8:	6a 01                	push   0x1
c0017eda:	68 80 a8 02 c0       	push   0xc002a880
c0017edf:	e8 df 4c 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	83 ec 08             	sub    esp,0x8
c0017eea:	53                   	push   ebx
c0017eeb:	50                   	push   eax
c0017eec:	e8 e1 4e 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0017efa:	83 ec 08             	sub    esp,0x8
c0017efd:	6a 01                	push   0x1
c0017eff:	68 9d a8 02 c0       	push   0xc002a89d
c0017f04:	e8 ba 4c 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	83 ec 08             	sub    esp,0x8
c0017f0f:	53                   	push   ebx
c0017f10:	50                   	push   eax
c0017f11:	e8 bc 4e 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	b8 00 00 00 00       	mov    eax,0x0
c0017f1e:	83 c4 28             	add    esp,0x28
c0017f21:	5b                   	pop    ebx
c0017f22:	c3                   	ret    
c0017f23:	90                   	nop

c0017f24 <ACPI::sleep()>:
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c0017f2c:	85 c0                	test   eax,eax
c0017f2e:	74 07                	je     c0017f37 <ACPI::sleep()+0x13>
c0017f30:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c0017f35:	ff d0                	call   eax
c0017f37:	90                   	nop
c0017f38:	83 c4 0c             	add    esp,0xc
c0017f3b:	c3                   	ret    

c0017f3c <CPU::close(int, int, void*)>:
c0017f3c:	31 c0                	xor    eax,eax
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017f40:	55                   	push   ebp
c0017f41:	57                   	push   edi
c0017f42:	56                   	push   esi
c0017f43:	53                   	push   ebx
c0017f44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017f48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f4c:	89 ce                	mov    esi,ecx
c0017f4e:	89 d5                	mov    ebp,edx
c0017f50:	80 f9 04             	cmp    cl,0x4
c0017f53:	75 28                	jne    c0017f7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017f55:	8d 42 f9             	lea    eax,[edx-0x7]
c0017f58:	3c 03                	cmp    al,0x3
c0017f5a:	0f 86 63 01 00 00    	jbe    c00180c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017f60:	80 fa 03             	cmp    dl,0x3
c0017f63:	0f 84 5a 01 00 00    	je     c00180c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017f69:	8d 7a f2             	lea    edi,[edx-0xe]
c0017f6c:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c0017f71:	89 fb                	mov    ebx,edi
c0017f73:	80 fb 01             	cmp    bl,0x1
c0017f76:	77 4e                	ja     c0017fc6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017f78:	e9 52 01 00 00       	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f7d:	80 f9 05             	cmp    cl,0x5
c0017f80:	75 4d                	jne    c0017fcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017f82:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c0017f87:	80 fa 03             	cmp    dl,0x3
c0017f8a:	0f 86 3f 01 00 00    	jbe    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f90:	8d 7a fa             	lea    edi,[edx-0x6]
c0017f93:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c0017f98:	89 fb                	mov    ebx,edi
c0017f9a:	80 fb 01             	cmp    bl,0x1
c0017f9d:	0f 86 2c 01 00 00    	jbe    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fa3:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0017fa8:	80 fa 08             	cmp    dl,0x8
c0017fab:	0f 84 1e 01 00 00    	je     c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fb1:	89 d7                	mov    edi,edx
c0017fb3:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c0017fb8:	83 e7 fb             	and    edi,0xfffffffb
c0017fbb:	89 fb                	mov    ebx,edi
c0017fbd:	80 fb 09             	cmp    bl,0x9
c0017fc0:	0f 84 09 01 00 00    	je     c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fc6:	31 c0                	xor    eax,eax
c0017fc8:	89 eb                	mov    ebx,ebp
c0017fca:	0f b6 fb             	movzx  edi,bl
c0017fcd:	eb 30                	jmp    c0017fff <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017fcf:	31 c0                	xor    eax,eax
c0017fd1:	80 f9 06             	cmp    cl,0x6
c0017fd4:	75 f2                	jne    c0017fc8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017fd6:	80 fa 0a             	cmp    dl,0xa
c0017fd9:	77 ed                	ja     c0017fc8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017fdb:	bf de 05 00 00       	mov    edi,0x5de
c0017fe0:	0f a3 d7             	bt     edi,edx
c0017fe3:	73 e3                	jae    c0017fc8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017fe5:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0017fea:	e9 e0 00 00 00       	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fef:	39 c7                	cmp    edi,eax
c0017ff1:	0f 84 d3 00 00 00    	je     c00180ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017ff7:	40                   	inc    eax
c0017ff8:	3d d0 00 00 00       	cmp    eax,0xd0
c0017ffd:	74 09                	je     c0018008 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017fff:	89 f3                	mov    ebx,esi
c0018001:	80 fb 0f             	cmp    bl,0xf
c0018004:	75 f1                	jne    c0017ff7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018006:	eb e7                	jmp    c0017fef <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018008:	80 f9 10             	cmp    cl,0x10
c001800b:	75 14                	jne    c0018021 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001800d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018010:	83 e0 fb             	and    eax,0xfffffffb
c0018013:	3c 02                	cmp    al,0x2
c0018015:	76 34                	jbe    c001804b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018017:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c001801c:	80 fa 02             	cmp    dl,0x2
c001801f:	eb 24                	jmp    c0018045 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018021:	80 f9 11             	cmp    cl,0x11
c0018024:	75 13                	jne    c0018039 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018026:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c001802b:	80 fa 03             	cmp    dl,0x3
c001802e:	0f 85 9b 00 00 00    	jne    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018034:	e9 91 00 00 00       	jmp    c00180ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018039:	80 f9 12             	cmp    cl,0x12
c001803c:	75 14                	jne    c0018052 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001803e:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c0018043:	fe ca                	dec    dl
c0018045:	0f 85 84 00 00 00    	jne    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001804b:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c0018050:	eb 7d                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018052:	80 f9 14             	cmp    cl,0x14
c0018055:	75 12                	jne    c0018069 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018057:	4a                   	dec    edx
c0018058:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c001805d:	80 fa 01             	cmp    dl,0x1
c0018060:	77 6d                	ja     c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018062:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c0018067:	eb 66                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018069:	80 f9 15             	cmp    cl,0x15
c001806c:	75 31                	jne    c001809f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001806e:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018073:	80 fa 01             	cmp    dl,0x1
c0018076:	74 57                	je     c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018078:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c001807d:	80 fa 13             	cmp    dl,0x13
c0018080:	76 0c                	jbe    c001808e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018082:	80 fa 30             	cmp    dl,0x30
c0018085:	75 48                	jne    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018087:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c001808c:	eb 41                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001808e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018093:	0f a3 d1             	bt     ecx,edx
c0018096:	73 37                	jae    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018098:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c001809d:	eb 30                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001809f:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c00180a4:	80 f9 16             	cmp    cl,0x16
c00180a7:	75 26                	jne    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180a9:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c00180ae:	84 d2                	test   dl,dl
c00180b0:	74 1d                	je     c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180b2:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c00180b7:	80 fa 30             	cmp    dl,0x30
c00180ba:	75 13                	jne    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180bc:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c00180c1:	eb 0c                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180c3:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00180c8:	eb 05                	jmp    c00180cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180ca:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00180cf:	5b                   	pop    ebx
c00180d0:	5e                   	pop    esi
c00180d1:	5f                   	pop    edi
c00180d2:	5d                   	pop    ebp
c00180d3:	c3                   	ret    

c00180d4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00180d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00180d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180dc:	80 f9 04             	cmp    cl,0x4
c00180df:	75 6b                	jne    c001814c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00180e1:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c00180e6:	80 fa 01             	cmp    dl,0x1
c00180e9:	0f 86 92 02 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180ef:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c00180f4:	80 fa 02             	cmp    dl,0x2
c00180f7:	0f 84 84 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180fd:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c0018102:	80 fa 03             	cmp    dl,0x3
c0018105:	0f 84 76 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001810b:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018110:	80 fa 04             	cmp    dl,0x4
c0018113:	0f 84 68 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018119:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c001811e:	80 fa 05             	cmp    dl,0x5
c0018121:	0f 84 5a 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018127:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c001812c:	80 fa 07             	cmp    dl,0x7
c001812f:	0f 84 4c 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018135:	83 ea 08             	sub    edx,0x8
c0018138:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c001813d:	80 fa 01             	cmp    dl,0x1
c0018140:	0f 87 3b 02 00 00    	ja     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018146:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c001814b:	c3                   	ret    
c001814c:	80 f9 05             	cmp    cl,0x5
c001814f:	75 45                	jne    c0018196 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018151:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018154:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0018159:	80 f9 02             	cmp    cl,0x2
c001815c:	0f 86 1f 02 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018162:	80 fa 04             	cmp    dl,0x4
c0018165:	0f 84 f3 01 00 00    	je     c001835e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001816b:	80 fa 07             	cmp    dl,0x7
c001816e:	0f 84 0d 02 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018174:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c0018179:	80 fa 08             	cmp    dl,0x8
c001817c:	0f 84 ff 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018182:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c0018187:	80 fa 09             	cmp    dl,0x9
c001818a:	0f 85 f1 01 00 00    	jne    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018190:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c0018195:	c3                   	ret    
c0018196:	80 f9 06             	cmp    cl,0x6
c0018199:	0f 85 85 01 00 00    	jne    c0018324 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001819f:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c00181a4:	80 fa 01             	cmp    dl,0x1
c00181a7:	0f 84 d4 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181ad:	8d 42 fb             	lea    eax,[edx-0x5]
c00181b0:	3c 01                	cmp    al,0x1
c00181b2:	0f 86 ac 01 00 00    	jbe    c0018364 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00181b8:	80 fa 03             	cmp    dl,0x3
c00181bb:	0f 84 a3 01 00 00    	je     c0018364 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00181c1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00181c4:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c00181c9:	80 f9 01             	cmp    cl,0x1
c00181cc:	0f 86 af 01 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181d2:	80 fa 09             	cmp    dl,0x9
c00181d5:	0f 84 8f 01 00 00    	je     c001836a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00181db:	8d 4a f6             	lea    ecx,[edx-0xa]
c00181de:	80 f9 01             	cmp    cl,0x1
c00181e1:	0f 86 9a 01 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181e7:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c00181ec:	80 fa 0d             	cmp    dl,0xd
c00181ef:	0f 84 8c 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181f5:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00181fa:	80 fa 0e             	cmp    dl,0xe
c00181fd:	0f 84 7e 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018203:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018208:	80 fa 0f             	cmp    dl,0xf
c001820b:	0f 84 70 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018211:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0018216:	80 fa 15             	cmp    dl,0x15
c0018219:	0f 84 62 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001821f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018222:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018227:	80 f9 01             	cmp    cl,0x1
c001822a:	0f 86 51 01 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018230:	80 fa 1a             	cmp    dl,0x1a
c0018233:	0f 84 37 01 00 00    	je     c0018370 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018239:	80 fa 1c             	cmp    dl,0x1c
c001823c:	0f 84 34 01 00 00    	je     c0018376 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018242:	80 fa 1d             	cmp    dl,0x1d
c0018245:	0f 84 36 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001824b:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018250:	80 fa 25             	cmp    dl,0x25
c0018253:	0f 84 28 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018259:	8d 4a da             	lea    ecx,[edx-0x26]
c001825c:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c0018261:	80 f9 01             	cmp    cl,0x1
c0018264:	0f 86 17 01 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001826a:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c001826f:	80 fa 2a             	cmp    dl,0x2a
c0018272:	0f 84 09 01 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018278:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c001827d:	80 fa 2c             	cmp    dl,0x2c
c0018280:	0f 84 fb 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018286:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c001828b:	80 fa 2d             	cmp    dl,0x2d
c001828e:	0f 84 ed 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018294:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018299:	80 fa 2e             	cmp    dl,0x2e
c001829c:	0f 84 df 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182a2:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c00182a7:	80 fa 2f             	cmp    dl,0x2f
c00182aa:	0f 84 d1 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182b0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00182b3:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00182b8:	80 f9 01             	cmp    cl,0x1
c00182bb:	0f 86 c0 00 00 00    	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c1:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c00182c6:	80 fa 37             	cmp    dl,0x37
c00182c9:	0f 84 b2 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182cf:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c00182d4:	80 fa 3a             	cmp    dl,0x3a
c00182d7:	0f 84 a4 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182dd:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c00182e2:	80 fa 3c             	cmp    dl,0x3c
c00182e5:	0f 84 96 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182eb:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00182f0:	80 fa 3d             	cmp    dl,0x3d
c00182f3:	0f 84 88 00 00 00    	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182f9:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c00182fe:	80 fa 3e             	cmp    dl,0x3e
c0018301:	74 7e                	je     c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018303:	8d 42 bb             	lea    eax,[edx-0x45]
c0018306:	3c 01                	cmp    al,0x1
c0018308:	76 72                	jbe    c001837c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001830a:	80 fa 3f             	cmp    dl,0x3f
c001830d:	74 6d                	je     c001837c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001830f:	80 fa 4a             	cmp    dl,0x4a
c0018312:	74 0a                	je     c001831e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018314:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c0018319:	80 fa 4d             	cmp    dl,0x4d
c001831c:	75 63                	jne    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001831e:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018323:	c3                   	ret    
c0018324:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c0018329:	80 f9 0b             	cmp    cl,0xb
c001832c:	75 0a                	jne    c0018338 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001832e:	fe ca                	dec    dl
c0018330:	75 4f                	jne    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018332:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018337:	c3                   	ret    
c0018338:	80 f9 0f             	cmp    cl,0xf
c001833b:	75 44                	jne    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001833d:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c0018342:	80 fa 02             	cmp    dl,0x2
c0018345:	76 3a                	jbe    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018347:	8d 42 fd             	lea    eax,[edx-0x3]
c001834a:	3c 01                	cmp    al,0x1
c001834c:	76 0a                	jbe    c0018358 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001834e:	b8 9a ac 02 c0       	mov    eax,0xc002ac9a
c0018353:	80 fa 06             	cmp    dl,0x6
c0018356:	75 29                	jne    c0018381 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018358:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c001835d:	c3                   	ret    
c001835e:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c0018363:	c3                   	ret    
c0018364:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c0018369:	c3                   	ret    
c001836a:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c001836f:	c3                   	ret    
c0018370:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018375:	c3                   	ret    
c0018376:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c001837b:	c3                   	ret    
c001837c:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018381:	c3                   	ret    

c0018382 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018382:	60                   	pusha  
c0018383:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018387:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001838b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001838f:	9c                   	pushf  
c0018390:	fa                   	cli    
c0018391:	0f 09                	wbinvd 
c0018393:	0f 30                	wrmsr  
c0018395:	9d                   	popf   
c0018396:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001839a:	89 02                	mov    DWORD PTR [edx],eax
c001839c:	61                   	popa   
c001839d:	c3                   	ret    

c001839e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001839e:	60                   	pusha  
c001839f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183a3:	9c                   	pushf  
c00183a4:	fa                   	cli    
c00183a5:	0f 09                	wbinvd 
c00183a7:	31 c0                	xor    eax,eax
c00183a9:	31 d2                	xor    edx,edx
c00183ab:	0f 32                	rdmsr  
c00183ad:	9d                   	popf   
c00183ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183b2:	89 02                	mov    DWORD PTR [edx],eax
c00183b4:	61                   	popa   
c00183b5:	c3                   	ret    

c00183b6 <CPU::AMD_K6_writeback(int, int, int)>:
c00183b6:	56                   	push   esi
c00183b7:	53                   	push   ebx
c00183b8:	83 ec 10             	sub    esp,0x10
c00183bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00183c4:	75 5d                	jne    c0018423 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00183c6:	83 f8 08             	cmp    eax,0x8
c00183c9:	75 09                	jne    c00183d4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00183cb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00183d0:	7e 13                	jle    c00183e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00183d2:	eb 30                	jmp    c0018404 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00183d4:	83 f8 06             	cmp    eax,0x6
c00183d7:	7c 4a                	jl     c0018423 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00183d9:	83 f8 07             	cmp    eax,0x7
c00183dc:	7e 07                	jle    c00183e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00183de:	83 f8 09             	cmp    eax,0x9
c00183e1:	74 21                	je     c0018404 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00183e3:	eb 3e                	jmp    c0018423 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00183e5:	89 e6                	mov    esi,esp
c00183e7:	8b 1d e4 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e4
c00183ed:	56                   	push   esi
c00183ee:	c1 eb 15             	shr    ebx,0x15
c00183f1:	68 82 00 00 c0       	push   0xc0000082
c00183f6:	83 e3 7e             	and    ebx,0x7e
c00183f9:	e8 a0 ff ff ff       	call   c001839e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00183fe:	56                   	push   esi
c00183ff:	6a 00                	push   0x0
c0018401:	53                   	push   ebx
c0018402:	eb 12                	jmp    c0018416 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018404:	89 e3                	mov    ebx,esp
c0018406:	53                   	push   ebx
c0018407:	68 82 00 00 c0       	push   0xc0000082
c001840c:	e8 8d ff ff ff       	call   c001839e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018411:	53                   	push   ebx
c0018412:	6a 00                	push   0x0
c0018414:	6a 00                	push   0x0
c0018416:	68 82 00 00 c0       	push   0xc0000082
c001841b:	e8 62 ff ff ff       	call   c0018382 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018420:	83 c4 18             	add    esp,0x18
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	5b                   	pop    ebx
c0018427:	5e                   	pop    esi
c0018428:	c3                   	ret    
c0018429:	90                   	nop

c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001842a:	55                   	push   ebp
c001842b:	57                   	push   edi
c001842c:	56                   	push   esi
c001842d:	53                   	push   ebx
c001842e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018432:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018436:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001843a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001843e:	39 05 c0 cb 02 c0    	cmp    DWORD PTR ds:0xc002cbc0,eax
c0018444:	75 23                	jne    c0018469 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018446:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c001844b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001844f:	89 06                	mov    DWORD PTR [esi],eax
c0018451:	a1 c8 e1 02 c0       	mov    eax,ds:0xc002e1c8
c0018456:	89 07                	mov    DWORD PTR [edi],eax
c0018458:	a1 c4 e1 02 c0       	mov    eax,ds:0xc002e1c4
c001845d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018460:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0018465:	89 02                	mov    DWORD PTR [edx],eax
c0018467:	eb 3f                	jmp    c00184a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018469:	31 c9                	xor    ecx,ecx
c001846b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001846f:	0f a2                	cpuid  
c0018471:	89 06                	mov    DWORD PTR [esi],eax
c0018473:	89 1f                	mov    DWORD PTR [edi],ebx
c0018475:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018479:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001847c:	89 10                	mov    DWORD PTR [eax],edx
c001847e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018482:	a3 c0 cb 02 c0       	mov    ds:0xc002cbc0,eax
c0018487:	8b 06                	mov    eax,DWORD PTR [esi]
c0018489:	a3 cc e1 02 c0       	mov    ds:0xc002e1cc,eax
c001848e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018490:	a3 c8 e1 02 c0       	mov    ds:0xc002e1c8,eax
c0018495:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018498:	a3 c4 e1 02 c0       	mov    ds:0xc002e1c4,eax
c001849d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a3:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c00184a8:	5b                   	pop    ebx
c00184a9:	5e                   	pop    esi
c00184aa:	5f                   	pop    edi
c00184ab:	5d                   	pop    ebp
c00184ac:	c3                   	ret    
c00184ad:	90                   	nop

c00184ae <CPU::cpuidCheckEDX(unsigned int)>:
c00184ae:	83 ec 10             	sub    esp,0x10
c00184b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184b5:	50                   	push   eax
c00184b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ba:	50                   	push   eax
c00184bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184bf:	50                   	push   eax
c00184c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184c4:	50                   	push   eax
c00184c5:	6a 01                	push   0x1
c00184c7:	e8 5e ff ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184d0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00184d4:	0f 95 c0             	setne  al
c00184d7:	83 c4 24             	add    esp,0x24
c00184da:	c3                   	ret    
c00184db:	90                   	nop

c00184dc <CPU::cpuidCheckECX(unsigned int)>:
c00184dc:	83 ec 10             	sub    esp,0x10
c00184df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184e3:	50                   	push   eax
c00184e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184e8:	50                   	push   eax
c00184e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ed:	50                   	push   eax
c00184ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184f2:	50                   	push   eax
c00184f3:	6a 01                	push   0x1
c00184f5:	e8 30 ff ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018502:	0f 95 c0             	setne  al
c0018505:	83 c4 24             	add    esp,0x24
c0018508:	c3                   	ret    
c0018509:	90                   	nop

c001850a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001850a:	83 ec 10             	sub    esp,0x10
c001850d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018511:	50                   	push   eax
c0018512:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018516:	50                   	push   eax
c0018517:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001851b:	50                   	push   eax
c001851c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018520:	50                   	push   eax
c0018521:	6a 07                	push   0x7
c0018523:	e8 02 ff ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001852c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018530:	0f 95 c0             	setne  al
c0018533:	83 c4 24             	add    esp,0x24
c0018536:	c3                   	ret    
c0018537:	90                   	nop

c0018538 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018538:	83 ec 10             	sub    esp,0x10
c001853b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001853f:	50                   	push   eax
c0018540:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018544:	50                   	push   eax
c0018545:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018549:	50                   	push   eax
c001854a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001854e:	50                   	push   eax
c001854f:	6a 07                	push   0x7
c0018551:	e8 d4 fe ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001855a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001855e:	0f 95 c0             	setne  al
c0018561:	83 c4 24             	add    esp,0x24
c0018564:	c3                   	ret    
c0018565:	90                   	nop

c0018566 <CPU::CPU()>:
c0018566:	83 ec 0c             	sub    esp,0xc
c0018569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856d:	83 ec 08             	sub    esp,0x8
c0018570:	68 9a ac 02 c0       	push   0xc002ac9a
c0018575:	50                   	push   eax
c0018576:	e8 8f b9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c0018583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018587:	89 10                	mov    DWORD PTR [eax],edx
c0018589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859b:	05 78 01 00 00       	add    eax,0x178
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	50                   	push   eax
c00185a4:	e8 93 68 ff ff       	call   c000ee3c <GDT::GDT()>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b0:	05 7c 09 00 00       	add    eax,0x97c
c00185b5:	83 ec 0c             	sub    esp,0xc
c00185b8:	50                   	push   eax
c00185b9:	e8 e0 6a ff ff       	call   c000f09e <IDT::IDT()>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c5:	05 7c 11 00 00       	add    eax,0x117c
c00185ca:	83 ec 0c             	sub    esp,0xc
c00185cd:	50                   	push   eax
c00185ce:	e8 61 8c ff ff       	call   c0011234 <TSS::TSS()>
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185da:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00185e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00185ef:	90                   	nop
c00185f0:	83 c4 0c             	add    esp,0xc
c00185f3:	c3                   	ret    

c00185f4 <CPU::displayFeatures()>:
c00185f4:	53                   	push   ebx
c00185f5:	83 ec 10             	sub    esp,0x10
c00185f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00185fc:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018602:	68 a8 a9 02 c0       	push   0xc002a9a8
c0018607:	e8 e7 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001860c:	59                   	pop    ecx
c001860d:	58                   	pop    eax
c001860e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018614:	50                   	push   eax
c0018615:	68 b9 a9 02 c0       	push   0xc002a9b9
c001861a:	e8 d4 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001861f:	58                   	pop    eax
c0018620:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018626:	5a                   	pop    edx
c0018627:	c1 e8 0e             	shr    eax,0xe
c001862a:	0f b6 c0             	movzx  eax,al
c001862d:	50                   	push   eax
c001862e:	68 ca a9 02 c0       	push   0xc002a9ca
c0018633:	e8 bb a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018638:	59                   	pop    ecx
c0018639:	58                   	pop    eax
c001863a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018640:	66 c1 e8 06          	shr    ax,0x6
c0018644:	0f b6 c0             	movzx  eax,al
c0018647:	50                   	push   eax
c0018648:	68 db a9 02 c0       	push   0xc002a9db
c001864d:	e8 a1 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018652:	c7 04 24 77 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae77
c0018659:	e8 95 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001865e:	83 c4 10             	add    esp,0x10
c0018661:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018666:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001866d:	74 05                	je     c0018674 <CPU::displayFeatures()+0x80>
c001866f:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0018674:	52                   	push   edx
c0018675:	52                   	push   edx
c0018676:	50                   	push   eax
c0018677:	68 ec a9 02 c0       	push   0xc002a9ec
c001867c:	e8 72 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0018689:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018690:	78 05                	js     c0018697 <CPU::displayFeatures()+0xa3>
c0018692:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018697:	51                   	push   ecx
c0018698:	51                   	push   ecx
c0018699:	50                   	push   eax
c001869a:	68 03 aa 02 c0       	push   0xc002aa03
c001869f:	e8 4f a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186a4:	83 c4 10             	add    esp,0x10
c00186a7:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00186ac:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186b3:	75 05                	jne    c00186ba <CPU::displayFeatures()+0xc6>
c00186b5:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c00186ba:	52                   	push   edx
c00186bb:	52                   	push   edx
c00186bc:	50                   	push   eax
c00186bd:	68 1a aa 02 c0       	push   0xc002aa1a
c00186c2:	e8 2c a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186c7:	83 c4 10             	add    esp,0x10
c00186ca:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00186cf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00186d6:	75 05                	jne    c00186dd <CPU::displayFeatures()+0xe9>
c00186d8:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c00186dd:	51                   	push   ecx
c00186de:	51                   	push   ecx
c00186df:	50                   	push   eax
c00186e0:	68 31 aa 02 c0       	push   0xc002aa31
c00186e5:	e8 09 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00186f2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186f9:	75 05                	jne    c0018700 <CPU::displayFeatures()+0x10c>
c00186fb:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018700:	52                   	push   edx
c0018701:	52                   	push   edx
c0018702:	50                   	push   eax
c0018703:	68 48 aa 02 c0       	push   0xc002aa48
c0018708:	e8 e6 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001870d:	83 c4 10             	add    esp,0x10
c0018710:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0018715:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001871c:	75 05                	jne    c0018723 <CPU::displayFeatures()+0x12f>
c001871e:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018723:	51                   	push   ecx
c0018724:	51                   	push   ecx
c0018725:	50                   	push   eax
c0018726:	68 5f aa 02 c0       	push   0xc002aa5f
c001872b:	e8 c3 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018730:	83 c4 10             	add    esp,0x10
c0018733:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0018738:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001873f:	75 05                	jne    c0018746 <CPU::displayFeatures()+0x152>
c0018741:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018746:	52                   	push   edx
c0018747:	52                   	push   edx
c0018748:	50                   	push   eax
c0018749:	68 76 aa 02 c0       	push   0xc002aa76
c001874e:	e8 a0 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c001875b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018762:	75 05                	jne    c0018769 <CPU::displayFeatures()+0x175>
c0018764:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018769:	51                   	push   ecx
c001876a:	51                   	push   ecx
c001876b:	50                   	push   eax
c001876c:	68 8d aa 02 c0       	push   0xc002aa8d
c0018771:	e8 7d a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c001877e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018785:	75 05                	jne    c001878c <CPU::displayFeatures()+0x198>
c0018787:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c001878c:	52                   	push   edx
c001878d:	52                   	push   edx
c001878e:	50                   	push   eax
c001878f:	68 a4 aa 02 c0       	push   0xc002aaa4
c0018794:	e8 5a a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00187a1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00187a8:	75 05                	jne    c00187af <CPU::displayFeatures()+0x1bb>
c00187aa:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c00187af:	51                   	push   ecx
c00187b0:	51                   	push   ecx
c00187b1:	50                   	push   eax
c00187b2:	68 bb aa 02 c0       	push   0xc002aabb
c00187b7:	e8 37 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00187bc:	83 c4 10             	add    esp,0x10
c00187bf:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00187c4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00187cb:	75 05                	jne    c00187d2 <CPU::displayFeatures()+0x1de>
c00187cd:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c00187d2:	52                   	push   edx
c00187d3:	52                   	push   edx
c00187d4:	50                   	push   eax
c00187d5:	68 d2 aa 02 c0       	push   0xc002aad2
c00187da:	e8 14 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c00187e7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00187ee:	75 05                	jne    c00187f5 <CPU::displayFeatures()+0x201>
c00187f0:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c00187f5:	51                   	push   ecx
c00187f6:	51                   	push   ecx
c00187f7:	50                   	push   eax
c00187f8:	68 e9 aa 02 c0       	push   0xc002aae9
c00187fd:	e8 f1 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018802:	83 c4 10             	add    esp,0x10
c0018805:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c001880a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018811:	75 05                	jne    c0018818 <CPU::displayFeatures()+0x224>
c0018813:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c0018818:	52                   	push   edx
c0018819:	52                   	push   edx
c001881a:	50                   	push   eax
c001881b:	68 00 ab 02 c0       	push   0xc002ab00
c0018820:	e8 ce a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018825:	83 c4 10             	add    esp,0x10
c0018828:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c001882d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018834:	78 05                	js     c001883b <CPU::displayFeatures()+0x247>
c0018836:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c001883b:	51                   	push   ecx
c001883c:	51                   	push   ecx
c001883d:	50                   	push   eax
c001883e:	68 17 ab 02 c0       	push   0xc002ab17
c0018843:	e8 ab a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018848:	83 c4 10             	add    esp,0x10
c001884b:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0018850:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018857:	75 05                	jne    c001885e <CPU::displayFeatures()+0x26a>
c0018859:	b8 b6 94 02 c0       	mov    eax,0xc00294b6
c001885e:	52                   	push   edx
c001885f:	52                   	push   edx
c0018860:	50                   	push   eax
c0018861:	68 2e ab 02 c0       	push   0xc002ab2e
c0018866:	e8 88 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001886b:	83 c4 18             	add    esp,0x18
c001886e:	5b                   	pop    ebx
c001886f:	c3                   	ret    

c0018870 <CPU::detectFeatures()>:
c0018870:	55                   	push   ebp
c0018871:	57                   	push   edi
c0018872:	56                   	push   esi
c0018873:	53                   	push   ebx
c0018874:	83 ec 50             	sub    esp,0x50
c0018877:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001887b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018885:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001888c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018892:	6a 0d                	push   0xd
c0018894:	6a 00                	push   0x0
c0018896:	57                   	push   edi
c0018897:	e8 28 7e fe ff       	call   c00006c4 <memset>
c001889c:	83 c4 10             	add    esp,0x10
c001889f:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00188a4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188ab:	0f 84 20 09 00 00    	je     c00191d1 <CPU::detectFeatures()+0x961>
c00188b1:	83 ec 0c             	sub    esp,0xc
c00188b4:	6a 10                	push   0x10
c00188b6:	e8 f3 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c00188bb:	83 e0 01             	and    eax,0x1
c00188be:	8d 14 00             	lea    edx,[eax+eax*1]
c00188c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188c7:	83 e0 fd             	and    eax,0xfffffffd
c00188ca:	09 d0                	or     eax,edx
c00188cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00188d9:	e8 d0 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c00188de:	83 e0 01             	and    eax,0x1
c00188e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00188e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188ee:	83 e0 fb             	and    eax,0xfffffffb
c00188f1:	09 d0                	or     eax,edx
c00188f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018900:	e8 a9 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c0018905:	83 e0 01             	and    eax,0x1
c0018908:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001890f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018915:	83 e0 f7             	and    eax,0xfffffff7
c0018918:	09 d0                	or     eax,edx
c001891a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018920:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018927:	e8 82 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c001892c:	83 e0 01             	and    eax,0x1
c001892f:	c1 e0 04             	shl    eax,0x4
c0018932:	88 c2                	mov    dl,al
c0018934:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001893a:	83 e0 ef             	and    eax,0xffffffef
c001893d:	09 d0                	or     eax,edx
c001893f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018945:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001894c:	e8 5d fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c0018951:	83 e0 01             	and    eax,0x1
c0018954:	c1 e0 05             	shl    eax,0x5
c0018957:	88 c2                	mov    dl,al
c0018959:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001895f:	83 e0 df             	and    eax,0xffffffdf
c0018962:	09 d0                	or     eax,edx
c0018964:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001896a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018971:	e8 38 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c0018976:	83 e0 01             	and    eax,0x1
c0018979:	8d 14 00             	lea    edx,[eax+eax*1]
c001897c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018982:	83 e0 fd             	and    eax,0xfffffffd
c0018985:	09 d0                	or     eax,edx
c0018987:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001898d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018994:	e8 15 fb ff ff       	call   c00184ae <CPU::cpuidCheckEDX(unsigned int)>
c0018999:	83 e0 01             	and    eax,0x1
c001899c:	c1 e0 06             	shl    eax,0x6
c001899f:	88 c2                	mov    dl,al
c00189a1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189a7:	83 e0 bf             	and    eax,0xffffffbf
c00189aa:	09 d0                	or     eax,edx
c00189ac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189b2:	58                   	pop    eax
c00189b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189b7:	56                   	push   esi
c00189b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189bc:	55                   	push   ebp
c00189bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c1:	50                   	push   eax
c00189c2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00189c6:	52                   	push   edx
c00189c7:	6a 00                	push   0x0
c00189c9:	e8 5c fa ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189ce:	83 c4 1c             	add    esp,0x1c
c00189d1:	6a 04                	push   0x4
c00189d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00189d7:	50                   	push   eax
c00189d8:	57                   	push   edi
c00189d9:	e8 c2 7c fe ff       	call   c00006a0 <memcpy>
c00189de:	83 c4 0c             	add    esp,0xc
c00189e1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00189e7:	6a 04                	push   0x4
c00189e9:	56                   	push   esi
c00189ea:	50                   	push   eax
c00189eb:	e8 b0 7c fe ff       	call   c00006a0 <memcpy>
c00189f0:	83 c4 0c             	add    esp,0xc
c00189f3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00189f9:	6a 04                	push   0x4
c00189fb:	55                   	push   ebp
c00189fc:	50                   	push   eax
c00189fd:	e8 9e 7c fe ff       	call   c00006a0 <memcpy>
c0018a02:	58                   	pop    eax
c0018a03:	5a                   	pop    edx
c0018a04:	68 45 ab 02 c0       	push   0xc002ab45
c0018a09:	57                   	push   edi
c0018a0a:	e8 a5 7d fe ff       	call   c00007b4 <strcmp>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	85 c0                	test   eax,eax
c0018a14:	75 0f                	jne    c0018a25 <CPU::detectFeatures()+0x1b5>
c0018a16:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a20:	e9 22 02 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018a25:	50                   	push   eax
c0018a26:	50                   	push   eax
c0018a27:	68 52 ab 02 c0       	push   0xc002ab52
c0018a2c:	57                   	push   edi
c0018a2d:	e8 82 7d fe ff       	call   c00007b4 <strcmp>
c0018a32:	83 c4 10             	add    esp,0x10
c0018a35:	85 c0                	test   eax,eax
c0018a37:	74 dd                	je     c0018a16 <CPU::detectFeatures()+0x1a6>
c0018a39:	51                   	push   ecx
c0018a3a:	51                   	push   ecx
c0018a3b:	68 5f ab 02 c0       	push   0xc002ab5f
c0018a40:	57                   	push   edi
c0018a41:	e8 6e 7d fe ff       	call   c00007b4 <strcmp>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	85 c0                	test   eax,eax
c0018a4b:	74 2a                	je     c0018a77 <CPU::detectFeatures()+0x207>
c0018a4d:	52                   	push   edx
c0018a4e:	52                   	push   edx
c0018a4f:	68 6c ab 02 c0       	push   0xc002ab6c
c0018a54:	57                   	push   edi
c0018a55:	e8 5a 7d fe ff       	call   c00007b4 <strcmp>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	85 c0                	test   eax,eax
c0018a5f:	74 16                	je     c0018a77 <CPU::detectFeatures()+0x207>
c0018a61:	50                   	push   eax
c0018a62:	50                   	push   eax
c0018a63:	68 79 ab 02 c0       	push   0xc002ab79
c0018a68:	57                   	push   edi
c0018a69:	e8 46 7d fe ff       	call   c00007b4 <strcmp>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	85 c0                	test   eax,eax
c0018a73:	74 48                	je     c0018abd <CPU::detectFeatures()+0x24d>
c0018a75:	eb 0f                	jmp    c0018a86 <CPU::detectFeatures()+0x216>
c0018a77:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a81:	e9 c1 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018a86:	50                   	push   eax
c0018a87:	50                   	push   eax
c0018a88:	68 86 ab 02 c0       	push   0xc002ab86
c0018a8d:	57                   	push   edi
c0018a8e:	e8 21 7d fe ff       	call   c00007b4 <strcmp>
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	85 c0                	test   eax,eax
c0018a98:	74 23                	je     c0018abd <CPU::detectFeatures()+0x24d>
c0018a9a:	50                   	push   eax
c0018a9b:	50                   	push   eax
c0018a9c:	68 93 ab 02 c0       	push   0xc002ab93
c0018aa1:	57                   	push   edi
c0018aa2:	e8 0d 7d fe ff       	call   c00007b4 <strcmp>
c0018aa7:	83 c4 10             	add    esp,0x10
c0018aaa:	85 c0                	test   eax,eax
c0018aac:	75 1e                	jne    c0018acc <CPU::detectFeatures()+0x25c>
c0018aae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018ab8:	e9 8a 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018abd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ac7:	e9 7b 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018acc:	50                   	push   eax
c0018acd:	50                   	push   eax
c0018ace:	68 a0 ab 02 c0       	push   0xc002aba0
c0018ad3:	57                   	push   edi
c0018ad4:	e8 db 7c fe ff       	call   c00007b4 <strcmp>
c0018ad9:	83 c4 10             	add    esp,0x10
c0018adc:	85 c0                	test   eax,eax
c0018ade:	75 0f                	jne    c0018aef <CPU::detectFeatures()+0x27f>
c0018ae0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018aea:	e9 58 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018aef:	50                   	push   eax
c0018af0:	50                   	push   eax
c0018af1:	68 5f ab 02 c0       	push   0xc002ab5f
c0018af6:	57                   	push   edi
c0018af7:	e8 b8 7c fe ff       	call   c00007b4 <strcmp>
c0018afc:	83 c4 10             	add    esp,0x10
c0018aff:	85 c0                	test   eax,eax
c0018b01:	75 0f                	jne    c0018b12 <CPU::detectFeatures()+0x2a2>
c0018b03:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b0d:	e9 35 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018b12:	50                   	push   eax
c0018b13:	50                   	push   eax
c0018b14:	68 ad ab 02 c0       	push   0xc002abad
c0018b19:	57                   	push   edi
c0018b1a:	e8 95 7c fe ff       	call   c00007b4 <strcmp>
c0018b1f:	83 c4 10             	add    esp,0x10
c0018b22:	85 c0                	test   eax,eax
c0018b24:	75 0f                	jne    c0018b35 <CPU::detectFeatures()+0x2c5>
c0018b26:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b30:	e9 12 01 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018b35:	51                   	push   ecx
c0018b36:	51                   	push   ecx
c0018b37:	68 ba ab 02 c0       	push   0xc002abba
c0018b3c:	57                   	push   edi
c0018b3d:	e8 72 7c fe ff       	call   c00007b4 <strcmp>
c0018b42:	83 c4 10             	add    esp,0x10
c0018b45:	85 c0                	test   eax,eax
c0018b47:	75 0f                	jne    c0018b58 <CPU::detectFeatures()+0x2e8>
c0018b49:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b53:	e9 ef 00 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018b58:	52                   	push   edx
c0018b59:	52                   	push   edx
c0018b5a:	68 c7 ab 02 c0       	push   0xc002abc7
c0018b5f:	57                   	push   edi
c0018b60:	e8 4f 7c fe ff       	call   c00007b4 <strcmp>
c0018b65:	83 c4 10             	add    esp,0x10
c0018b68:	85 c0                	test   eax,eax
c0018b6a:	75 0f                	jne    c0018b7b <CPU::detectFeatures()+0x30b>
c0018b6c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b76:	e9 cc 00 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018b7b:	50                   	push   eax
c0018b7c:	50                   	push   eax
c0018b7d:	68 d4 ab 02 c0       	push   0xc002abd4
c0018b82:	57                   	push   edi
c0018b83:	e8 2c 7c fe ff       	call   c00007b4 <strcmp>
c0018b88:	83 c4 10             	add    esp,0x10
c0018b8b:	85 c0                	test   eax,eax
c0018b8d:	75 0f                	jne    c0018b9e <CPU::detectFeatures()+0x32e>
c0018b8f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b99:	e9 a9 00 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018b9e:	50                   	push   eax
c0018b9f:	50                   	push   eax
c0018ba0:	68 e1 ab 02 c0       	push   0xc002abe1
c0018ba5:	57                   	push   edi
c0018ba6:	e8 09 7c fe ff       	call   c00007b4 <strcmp>
c0018bab:	83 c4 10             	add    esp,0x10
c0018bae:	85 c0                	test   eax,eax
c0018bb0:	75 0f                	jne    c0018bc1 <CPU::detectFeatures()+0x351>
c0018bb2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018bbc:	e9 86 00 00 00       	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018bc1:	50                   	push   eax
c0018bc2:	50                   	push   eax
c0018bc3:	68 ee ab 02 c0       	push   0xc002abee
c0018bc8:	57                   	push   edi
c0018bc9:	e8 e6 7b fe ff       	call   c00007b4 <strcmp>
c0018bce:	83 c4 10             	add    esp,0x10
c0018bd1:	85 c0                	test   eax,eax
c0018bd3:	75 0c                	jne    c0018be1 <CPU::detectFeatures()+0x371>
c0018bd5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018bdf:	eb 66                	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018be1:	50                   	push   eax
c0018be2:	50                   	push   eax
c0018be3:	68 fb ab 02 c0       	push   0xc002abfb
c0018be8:	57                   	push   edi
c0018be9:	e8 c6 7b fe ff       	call   c00007b4 <strcmp>
c0018bee:	83 c4 10             	add    esp,0x10
c0018bf1:	85 c0                	test   eax,eax
c0018bf3:	75 0c                	jne    c0018c01 <CPU::detectFeatures()+0x391>
c0018bf5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018bff:	eb 46                	jmp    c0018c47 <CPU::detectFeatures()+0x3d7>
c0018c01:	50                   	push   eax
c0018c02:	50                   	push   eax
c0018c03:	68 08 ac 02 c0       	push   0xc002ac08
c0018c08:	57                   	push   edi
c0018c09:	e8 a6 7b fe ff       	call   c00007b4 <strcmp>
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	85 c0                	test   eax,eax
c0018c13:	74 e0                	je     c0018bf5 <CPU::detectFeatures()+0x385>
c0018c15:	50                   	push   eax
c0018c16:	50                   	push   eax
c0018c17:	68 15 ac 02 c0       	push   0xc002ac15
c0018c1c:	57                   	push   edi
c0018c1d:	e8 92 7b fe ff       	call   c00007b4 <strcmp>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	85 c0                	test   eax,eax
c0018c27:	74 cc                	je     c0018bf5 <CPU::detectFeatures()+0x385>
c0018c29:	51                   	push   ecx
c0018c2a:	51                   	push   ecx
c0018c2b:	68 22 ac 02 c0       	push   0xc002ac22
c0018c30:	57                   	push   edi
c0018c31:	e8 7e 7b fe ff       	call   c00007b4 <strcmp>
c0018c36:	83 c4 10             	add    esp,0x10
c0018c39:	85 c0                	test   eax,eax
c0018c3b:	74 b8                	je     c0018bf5 <CPU::detectFeatures()+0x385>
c0018c3d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c47:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c4c:	0f 86 be 00 00 00    	jbe    c0018d10 <CPU::detectFeatures()+0x4a0>
c0018c52:	83 ec 0c             	sub    esp,0xc
c0018c55:	68 80 00 00 00       	push   0x80
c0018c5a:	e8 ab f8 ff ff       	call   c001850a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c5f:	83 e0 01             	and    eax,0x1
c0018c62:	c1 e0 06             	shl    eax,0x6
c0018c65:	88 c2                	mov    dl,al
c0018c67:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c6d:	83 e0 bf             	and    eax,0xffffffbf
c0018c70:	09 d0                	or     eax,edx
c0018c72:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c78:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c7f:	e8 86 f8 ff ff       	call   c001850a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c84:	83 e0 01             	and    eax,0x1
c0018c87:	c1 e0 04             	shl    eax,0x4
c0018c8a:	88 c2                	mov    dl,al
c0018c8c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c92:	83 e0 ef             	and    eax,0xffffffef
c0018c95:	09 d0                	or     eax,edx
c0018c97:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c9d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ca4:	e8 61 f8 ff ff       	call   c001850a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ca9:	c1 e0 07             	shl    eax,0x7
c0018cac:	88 c2                	mov    dl,al
c0018cae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cb4:	83 e0 7f             	and    eax,0x7f
c0018cb7:	09 d0                	or     eax,edx
c0018cb9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cbf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cc6:	e8 6d f8 ff ff       	call   c0018538 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018ccb:	83 e0 01             	and    eax,0x1
c0018cce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cd5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cdb:	83 e0 f7             	and    eax,0xfffffff7
c0018cde:	09 d0                	or     eax,edx
c0018ce0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ce6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018ced:	e8 46 f8 ff ff       	call   c0018538 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	83 e0 01             	and    eax,0x1
c0018cf8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d05:	83 e0 fb             	and    eax,0xfffffffb
c0018d08:	09 d0                	or     eax,edx
c0018d0a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d10:	83 ec 0c             	sub    esp,0xc
c0018d13:	56                   	push   esi
c0018d14:	55                   	push   ebp
c0018d15:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d19:	57                   	push   edi
c0018d1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d1e:	50                   	push   eax
c0018d1f:	6a 01                	push   0x1
c0018d21:	e8 04 f7 ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d26:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d2a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d30:	88 ca                	mov    dl,cl
c0018d32:	83 e0 f0             	and    eax,0xfffffff0
c0018d35:	83 e2 0f             	and    edx,0xf
c0018d38:	09 d0                	or     eax,edx
c0018d3a:	88 ca                	mov    dl,cl
c0018d3c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d42:	c0 ea 04             	shr    dl,0x4
c0018d45:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d49:	0f b6 c2             	movzx  eax,dl
c0018d4c:	83 c4 20             	add    esp,0x20
c0018d4f:	c1 e0 06             	shl    eax,0x6
c0018d52:	89 c5                	mov    ebp,eax
c0018d54:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d5a:	66 25 3f c0          	and    ax,0xc03f
c0018d5e:	09 e8                	or     eax,ebp
c0018d60:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d67:	89 c8                	mov    eax,ecx
c0018d69:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018d6f:	c1 e8 08             	shr    eax,0x8
c0018d72:	83 e2 3f             	and    edx,0x3f
c0018d75:	83 e0 0f             	and    eax,0xf
c0018d78:	89 c5                	mov    ebp,eax
c0018d7a:	c1 e5 06             	shl    ebp,0x6
c0018d7d:	09 d5                	or     ebp,edx
c0018d7f:	89 ea                	mov    edx,ebp
c0018d81:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d87:	88 c2                	mov    dl,al
c0018d89:	c0 ea 02             	shr    dl,0x2
c0018d8c:	89 d5                	mov    ebp,edx
c0018d8e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018d94:	83 e2 c0             	and    edx,0xffffffc0
c0018d97:	09 d5                	or     ebp,edx
c0018d99:	89 ea                	mov    edx,ebp
c0018d9b:	89 cd                	mov    ebp,ecx
c0018d9d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018da3:	c1 ed 0c             	shr    ebp,0xc
c0018da6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018dac:	83 e5 03             	and    ebp,0x3
c0018daf:	83 e2 cf             	and    edx,0xffffffcf
c0018db2:	c1 e5 04             	shl    ebp,0x4
c0018db5:	09 d5                	or     ebp,edx
c0018db7:	3c 06                	cmp    al,0x6
c0018db9:	89 ea                	mov    edx,ebp
c0018dbb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018dc1:	74 04                	je     c0018dc7 <CPU::detectFeatures()+0x557>
c0018dc3:	3c 0f                	cmp    al,0xf
c0018dc5:	75 5c                	jne    c0018e23 <CPU::detectFeatures()+0x5b3>
c0018dc7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018dcb:	89 cd                	mov    ebp,ecx
c0018dcd:	c1 ed 10             	shr    ebp,0x10
c0018dd0:	c1 e5 04             	shl    ebp,0x4
c0018dd3:	09 ea                	or     edx,ebp
c0018dd5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018ddb:	0f b6 d2             	movzx  edx,dl
c0018dde:	66 81 e5 3f c0       	and    bp,0xc03f
c0018de3:	c1 e2 06             	shl    edx,0x6
c0018de6:	09 ea                	or     edx,ebp
c0018de8:	3c 0f                	cmp    al,0xf
c0018dea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018df1:	75 30                	jne    c0018e23 <CPU::detectFeatures()+0x5b3>
c0018df3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018df9:	c1 e9 14             	shr    ecx,0x14
c0018dfc:	83 e0 3f             	and    eax,0x3f
c0018dff:	83 c1 0f             	add    ecx,0xf
c0018e02:	88 ca                	mov    dl,cl
c0018e04:	c0 e9 02             	shr    cl,0x2
c0018e07:	c1 e2 06             	shl    edx,0x6
c0018e0a:	09 d0                	or     eax,edx
c0018e0c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e12:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e18:	83 e0 c0             	and    eax,0xffffffc0
c0018e1b:	09 c1                	or     ecx,eax
c0018e1d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e23:	83 ec 0c             	sub    esp,0xc
c0018e26:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e2d:	56                   	push   esi
c0018e2e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e32:	50                   	push   eax
c0018e33:	57                   	push   edi
c0018e34:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e38:	55                   	push   ebp
c0018e39:	68 00 00 00 80       	push   0x80000000
c0018e3e:	e8 e7 f5 ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e43:	83 c4 20             	add    esp,0x20
c0018e46:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e52:	76 1e                	jbe    c0018e72 <CPU::detectFeatures()+0x602>
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	56                   	push   esi
c0018e58:	50                   	push   eax
c0018e59:	57                   	push   edi
c0018e5a:	55                   	push   ebp
c0018e5b:	68 01 00 00 80       	push   0x80000001
c0018e60:	e8 c5 f5 ff ff       	call   c001842a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e65:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e6f:	83 c4 20             	add    esp,0x20
c0018e72:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e78:	83 f8 01             	cmp    eax,0x1
c0018e7b:	75 6f                	jne    c0018eec <CPU::detectFeatures()+0x67c>
c0018e7d:	51                   	push   ecx
c0018e7e:	51                   	push   ecx
c0018e7f:	68 2e ac 02 c0       	push   0xc002ac2e
c0018e84:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e88:	56                   	push   esi
c0018e89:	e8 d5 78 fe ff       	call   c0000763 <strcpy>
c0018e8e:	5f                   	pop    edi
c0018e8f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e95:	5d                   	pop    ebp
c0018e96:	66 c1 e8 06          	shr    ax,0x6
c0018e9a:	0f b6 c0             	movzx  eax,al
c0018e9d:	50                   	push   eax
c0018e9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea4:	c1 e8 0e             	shr    eax,0xe
c0018ea7:	0f b6 c0             	movzx  eax,al
c0018eaa:	50                   	push   eax
c0018eab:	e8 24 f2 ff ff       	call   c00180d4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018eb0:	5a                   	pop    edx
c0018eb1:	59                   	pop    ecx
c0018eb2:	50                   	push   eax
c0018eb3:	56                   	push   esi
c0018eb4:	e8 61 79 fe ff       	call   c000081a <strcat>
c0018eb9:	5f                   	pop    edi
c0018eba:	5d                   	pop    ebp
c0018ebb:	56                   	push   esi
c0018ebc:	53                   	push   ebx
c0018ebd:	e8 3a b0 ff ff       	call   c0013efc <Device::setName(char const*)>
c0018ec2:	58                   	pop    eax
c0018ec3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ec9:	5a                   	pop    edx
c0018eca:	68 35 ac 02 c0       	push   0xc002ac35
c0018ecf:	50                   	push   eax
c0018ed0:	e8 df 78 fe ff       	call   c00007b4 <strcmp>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	85 c0                	test   eax,eax
c0018eda:	0f 85 71 03 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e1>
c0018ee0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018ee7:	e9 65 03 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x9e1>
c0018eec:	83 f8 02             	cmp    eax,0x2
c0018eef:	0f 85 b5 00 00 00    	jne    c0018faa <CPU::detectFeatures()+0x73a>
c0018ef5:	57                   	push   edi
c0018ef6:	57                   	push   edi
c0018ef7:	68 47 ac 02 c0       	push   0xc002ac47
c0018efc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f00:	56                   	push   esi
c0018f01:	e8 5d 78 fe ff       	call   c0000763 <strcpy>
c0018f06:	5d                   	pop    ebp
c0018f07:	58                   	pop    eax
c0018f08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f0e:	66 c1 e8 06          	shr    ax,0x6
c0018f12:	0f b6 c0             	movzx  eax,al
c0018f15:	50                   	push   eax
c0018f16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1c:	c1 e8 0e             	shr    eax,0xe
c0018f1f:	0f b6 c0             	movzx  eax,al
c0018f22:	50                   	push   eax
c0018f23:	e8 18 f0 ff ff       	call   c0017f40 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f28:	5a                   	pop    edx
c0018f29:	59                   	pop    ecx
c0018f2a:	50                   	push   eax
c0018f2b:	56                   	push   esi
c0018f2c:	e8 e9 78 fe ff       	call   c000081a <strcat>
c0018f31:	5f                   	pop    edi
c0018f32:	5d                   	pop    ebp
c0018f33:	56                   	push   esi
c0018f34:	53                   	push   ebx
c0018f35:	e8 c2 af ff ff       	call   c0013efc <Device::setName(char const*)>
c0018f3a:	58                   	pop    eax
c0018f3b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f41:	5a                   	pop    edx
c0018f42:	68 4c ac 02 c0       	push   0xc002ac4c
c0018f47:	50                   	push   eax
c0018f48:	e8 67 78 fe ff       	call   c00007b4 <strcmp>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	85 c0                	test   eax,eax
c0018f52:	75 20                	jne    c0018f74 <CPU::detectFeatures()+0x704>
c0018f54:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c0018f5a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f60:	a8 01                	test   al,0x1
c0018f62:	74 10                	je     c0018f74 <CPU::detectFeatures()+0x704>
c0018f64:	83 e0 fe             	and    eax,0xfffffffe
c0018f67:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f6d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7a:	c1 e8 0e             	shr    eax,0xe
c0018f7d:	3c 05                	cmp    al,0x5
c0018f7f:	0f 85 cc 02 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e1>
c0018f85:	56                   	push   esi
c0018f86:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f8c:	83 e0 0f             	and    eax,0xf
c0018f8f:	50                   	push   eax
c0018f90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f96:	66 c1 e8 06          	shr    ax,0x6
c0018f9a:	0f b6 c0             	movzx  eax,al
c0018f9d:	50                   	push   eax
c0018f9e:	6a 05                	push   0x5
c0018fa0:	e8 11 f4 ff ff       	call   c00183b6 <CPU::AMD_K6_writeback(int, int, int)>
c0018fa5:	e9 1f 02 00 00       	jmp    c00191c9 <CPU::detectFeatures()+0x959>
c0018faa:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fad:	83 fa 01             	cmp    edx,0x1
c0018fb0:	76 09                	jbe    c0018fbb <CPU::detectFeatures()+0x74b>
c0018fb2:	83 f8 06             	cmp    eax,0x6
c0018fb5:	0f 85 91 01 00 00    	jne    c001914c <CPU::detectFeatures()+0x8dc>
c0018fbb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fc1:	c1 ea 0e             	shr    edx,0xe
c0018fc4:	80 fa 05             	cmp    dl,0x5
c0018fc7:	75 7b                	jne    c0019044 <CPU::detectFeatures()+0x7d4>
c0018fc9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fcf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fd4:	66 81 fa 00 01       	cmp    dx,0x100
c0018fd9:	75 0c                	jne    c0018fe7 <CPU::detectFeatures()+0x777>
c0018fdb:	51                   	push   ecx
c0018fdc:	51                   	push   ecx
c0018fdd:	68 53 ac 02 c0       	push   0xc002ac53
c0018fe2:	e9 dc 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0018fe7:	66 81 fa 00 02       	cmp    dx,0x200
c0018fec:	75 0c                	jne    c0018ffa <CPU::detectFeatures()+0x78a>
c0018fee:	52                   	push   edx
c0018fef:	52                   	push   edx
c0018ff0:	68 66 ac 02 c0       	push   0xc002ac66
c0018ff5:	e9 c9 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0018ffa:	66 81 fa 40 02       	cmp    dx,0x240
c0018fff:	75 0c                	jne    c001900d <CPU::detectFeatures()+0x79d>
c0019001:	50                   	push   eax
c0019002:	50                   	push   eax
c0019003:	68 78 ac 02 c0       	push   0xc002ac78
c0019008:	e9 b6 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001900d:	83 f8 06             	cmp    eax,0x6
c0019010:	75 0c                	jne    c001901e <CPU::detectFeatures()+0x7ae>
c0019012:	50                   	push   eax
c0019013:	50                   	push   eax
c0019014:	68 8a ac 02 c0       	push   0xc002ac8a
c0019019:	e9 a5 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001901e:	83 f8 04             	cmp    eax,0x4
c0019021:	75 0c                	jne    c001902f <CPU::detectFeatures()+0x7bf>
c0019023:	50                   	push   eax
c0019024:	50                   	push   eax
c0019025:	68 96 ac 02 c0       	push   0xc002ac96
c001902a:	e9 94 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001902f:	83 f8 03             	cmp    eax,0x3
c0019032:	0f 85 19 02 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e1>
c0019038:	50                   	push   eax
c0019039:	50                   	push   eax
c001903a:	68 9e ac 02 c0       	push   0xc002ac9e
c001903f:	e9 7f 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019044:	80 fa 06             	cmp    dl,0x6
c0019047:	0f 85 db 00 00 00    	jne    c0019128 <CPU::detectFeatures()+0x8b8>
c001904d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019053:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019058:	66 81 fa 80 01       	cmp    dx,0x180
c001905d:	75 0c                	jne    c001906b <CPU::detectFeatures()+0x7fb>
c001905f:	50                   	push   eax
c0019060:	50                   	push   eax
c0019061:	68 a9 ac 02 c0       	push   0xc002aca9
c0019066:	e9 58 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001906b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019071:	66 f7 c1 80 ff       	test   cx,0xff80
c0019076:	75 0c                	jne    c0019084 <CPU::detectFeatures()+0x814>
c0019078:	50                   	push   eax
c0019079:	50                   	push   eax
c001907a:	68 b9 ac 02 c0       	push   0xc002acb9
c001907f:	e9 3f 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019084:	66 81 fa 40 02       	cmp    dx,0x240
c0019089:	75 0c                	jne    c0019097 <CPU::detectFeatures()+0x827>
c001908b:	55                   	push   ebp
c001908c:	55                   	push   ebp
c001908d:	68 c0 ac 02 c0       	push   0xc002acc0
c0019092:	e9 2c 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019097:	66 81 fa 80 02       	cmp    dx,0x280
c001909c:	75 0c                	jne    c00190aa <CPU::detectFeatures()+0x83a>
c001909e:	57                   	push   edi
c001909f:	57                   	push   edi
c00190a0:	68 c9 ac 02 c0       	push   0xc002acc9
c00190a5:	e9 19 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c00190aa:	66 81 fa 40 03       	cmp    dx,0x340
c00190af:	74 ed                	je     c001909e <CPU::detectFeatures()+0x82e>
c00190b1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190b6:	75 0c                	jne    c00190c4 <CPU::detectFeatures()+0x854>
c00190b8:	56                   	push   esi
c00190b9:	56                   	push   esi
c00190ba:	68 d0 ac 02 c0       	push   0xc002acd0
c00190bf:	e9 ff 00 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c00190c4:	83 f8 06             	cmp    eax,0x6
c00190c7:	0f 84 45 ff ff ff    	je     c0019012 <CPU::detectFeatures()+0x7a2>
c00190cd:	83 f8 04             	cmp    eax,0x4
c00190d0:	0f 84 4d ff ff ff    	je     c0019023 <CPU::detectFeatures()+0x7b3>
c00190d6:	83 f8 03             	cmp    eax,0x3
c00190d9:	0f 85 72 01 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e1>
c00190df:	51                   	push   ecx
c00190e0:	51                   	push   ecx
c00190e1:	68 d9 ac 02 c0       	push   0xc002acd9
c00190e6:	53                   	push   ebx
c00190e7:	e8 10 ae ff ff       	call   c0013efc <Device::setName(char const*)>
c00190ec:	b1 c1                	mov    cl,0xc1
c00190ee:	88 c8                	mov    al,cl
c00190f0:	e6 22                	out    0x22,al
c00190f2:	e4 23                	in     al,0x23
c00190f4:	88 c2                	mov    dl,al
c00190f6:	88 c8                	mov    al,cl
c00190f8:	e6 22                	out    0x22,al
c00190fa:	88 d0                	mov    al,dl
c00190fc:	83 c8 10             	or     eax,0x10
c00190ff:	e6 23                	out    0x23,al
c0019101:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019108:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001910b:	89 d0                	mov    eax,edx
c001910d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019113:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019117:	40                   	inc    eax
c0019118:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001911e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019123:	e9 a1 00 00 00       	jmp    c00191c9 <CPU::detectFeatures()+0x959>
c0019128:	83 f8 06             	cmp    eax,0x6
c001912b:	0f 84 e1 fe ff ff    	je     c0019012 <CPU::detectFeatures()+0x7a2>
c0019131:	83 f8 04             	cmp    eax,0x4
c0019134:	0f 84 e9 fe ff ff    	je     c0019023 <CPU::detectFeatures()+0x7b3>
c001913a:	83 f8 03             	cmp    eax,0x3
c001913d:	0f 85 0e 01 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e1>
c0019143:	52                   	push   edx
c0019144:	52                   	push   edx
c0019145:	68 e4 ac 02 c0       	push   0xc002ace4
c001914a:	eb 77                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001914c:	83 f8 07             	cmp    eax,0x7
c001914f:	75 09                	jne    c001915a <CPU::detectFeatures()+0x8ea>
c0019151:	50                   	push   eax
c0019152:	50                   	push   eax
c0019153:	68 ee ac 02 c0       	push   0xc002acee
c0019158:	eb 69                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c001915a:	83 f8 0a             	cmp    eax,0xa
c001915d:	75 09                	jne    c0019168 <CPU::detectFeatures()+0x8f8>
c001915f:	50                   	push   eax
c0019160:	50                   	push   eax
c0019161:	68 f9 ac 02 c0       	push   0xc002acf9
c0019166:	eb 5b                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019168:	83 f8 0b             	cmp    eax,0xb
c001916b:	75 09                	jne    c0019176 <CPU::detectFeatures()+0x906>
c001916d:	50                   	push   eax
c001916e:	50                   	push   eax
c001916f:	68 01 ad 02 c0       	push   0xc002ad01
c0019174:	eb 4d                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019176:	83 f8 08             	cmp    eax,0x8
c0019179:	75 09                	jne    c0019184 <CPU::detectFeatures()+0x914>
c001917b:	50                   	push   eax
c001917c:	50                   	push   eax
c001917d:	68 0a ad 02 c0       	push   0xc002ad0a
c0019182:	eb 3f                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019184:	83 f8 09             	cmp    eax,0x9
c0019187:	75 09                	jne    c0019192 <CPU::detectFeatures()+0x922>
c0019189:	50                   	push   eax
c001918a:	50                   	push   eax
c001918b:	68 12 ad 02 c0       	push   0xc002ad12
c0019190:	eb 31                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c0019192:	83 f8 05             	cmp    eax,0x5
c0019195:	75 09                	jne    c00191a0 <CPU::detectFeatures()+0x930>
c0019197:	50                   	push   eax
c0019198:	50                   	push   eax
c0019199:	68 1a ad 02 c0       	push   0xc002ad1a
c001919e:	eb 23                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c00191a0:	83 f8 0c             	cmp    eax,0xc
c00191a3:	75 09                	jne    c00191ae <CPU::detectFeatures()+0x93e>
c00191a5:	55                   	push   ebp
c00191a6:	55                   	push   ebp
c00191a7:	68 28 ad 02 c0       	push   0xc002ad28
c00191ac:	eb 15                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c00191ae:	83 f8 0d             	cmp    eax,0xd
c00191b1:	75 09                	jne    c00191bc <CPU::detectFeatures()+0x94c>
c00191b3:	57                   	push   edi
c00191b4:	57                   	push   edi
c00191b5:	68 33 ad 02 c0       	push   0xc002ad33
c00191ba:	eb 07                	jmp    c00191c3 <CPU::detectFeatures()+0x953>
c00191bc:	56                   	push   esi
c00191bd:	56                   	push   esi
c00191be:	68 47 ad 02 c0       	push   0xc002ad47
c00191c3:	53                   	push   ebx
c00191c4:	e8 33 ad ff ff       	call   c0013efc <Device::setName(char const*)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	e9 80 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x9e1>
c00191d1:	51                   	push   ecx
c00191d2:	51                   	push   ecx
c00191d3:	68 93 ab 02 c0       	push   0xc002ab93
c00191d8:	57                   	push   edi
c00191d9:	e8 85 75 fe ff       	call   c0000763 <strcpy>
c00191de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191e8:	e8 c1 70 fe ff       	call   c00002ae <is486>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	85 c0                	test   eax,eax
c00191f2:	74 2b                	je     c001921f <CPU::detectFeatures()+0x9af>
c00191f4:	52                   	push   edx
c00191f5:	52                   	push   edx
c00191f6:	68 53 ad 02 c0       	push   0xc002ad53
c00191fb:	53                   	push   ebx
c00191fc:	e8 fb ac ff ff       	call   c0013efc <Device::setName(char const*)>
c0019201:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019208:	0f 20 c0             	mov    eax,cr0
c001920b:	83 e0 14             	and    eax,0x14
c001920e:	83 c4 10             	add    esp,0x10
c0019211:	83 f8 04             	cmp    eax,0x4
c0019214:	75 1f                	jne    c0019235 <CPU::detectFeatures()+0x9c5>
c0019216:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001921d:	eb 32                	jmp    c0019251 <CPU::detectFeatures()+0x9e1>
c001921f:	50                   	push   eax
c0019220:	50                   	push   eax
c0019221:	68 5e ad 02 c0       	push   0xc002ad5e
c0019226:	53                   	push   ebx
c0019227:	e8 d0 ac ff ff       	call   c0013efc <Device::setName(char const*)>
c001922c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019233:	eb d3                	jmp    c0019208 <CPU::detectFeatures()+0x998>
c0019235:	e8 4f 70 fe ff       	call   c0000289 <hasLegacyFPU>
c001923a:	83 e0 01             	and    eax,0x1
c001923d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019240:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019246:	83 e0 fd             	and    eax,0xfffffffd
c0019249:	09 d0                	or     eax,edx
c001924b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019251:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019258:	83 c4 4c             	add    esp,0x4c
c001925b:	5b                   	pop    ebx
c001925c:	5e                   	pop    esi
c001925d:	5f                   	pop    edi
c001925e:	5d                   	pop    ebp
c001925f:	c3                   	ret    

c0019260 <CPU::setupSMEP()>:
c0019260:	0f 20 e0             	mov    eax,cr4
c0019263:	0d 00 00 10 00       	or     eax,0x100000
c0019268:	0f 22 e0             	mov    cr4,eax
c001926b:	c3                   	ret    

c001926c <CPU::setupUMIP()>:
c001926c:	0f 20 e0             	mov    eax,cr4
c001926f:	80 cc 08             	or     ah,0x8
c0019272:	0f 22 e0             	mov    cr4,eax
c0019275:	c3                   	ret    

c0019276 <CPU::setupTSC()>:
c0019276:	0f 20 e0             	mov    eax,cr4
c0019279:	83 c8 04             	or     eax,0x4
c001927c:	0f 22 e0             	mov    cr4,eax
c001927f:	c3                   	ret    

c0019280 <CPU::setupLargePages()>:
c0019280:	0f 20 e0             	mov    eax,cr4
c0019283:	83 c8 10             	or     eax,0x10
c0019286:	0f 22 e0             	mov    cr4,eax
c0019289:	c3                   	ret    

c001928a <CPU::setupPAT()>:
c001928a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001928f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019296:	74 2c                	je     c00192c4 <CPU::setupPAT()+0x3a>
c0019298:	53                   	push   ebx
c0019299:	83 ec 10             	sub    esp,0x10
c001929c:	68 77 02 00 00       	push   0x277
c00192a1:	50                   	push   eax
c00192a2:	e8 25 59 ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c00192a7:	83 e2 f8             	and    edx,0xfffffff8
c00192aa:	83 ca 01             	or     edx,0x1
c00192ad:	52                   	push   edx
c00192ae:	50                   	push   eax
c00192af:	68 77 02 00 00       	push   0x277
c00192b4:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c00192ba:	e8 39 59 ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00192bf:	83 c4 28             	add    esp,0x28
c00192c2:	5b                   	pop    ebx
c00192c3:	c3                   	ret    
c00192c4:	c3                   	ret    
c00192c5:	90                   	nop

c00192c6 <CPU::setupMTRR()>:
c00192c6:	c3                   	ret    
c00192c7:	90                   	nop

c00192c8 <CPU::setupGlobalPages()>:
c00192c8:	0f 20 e0             	mov    eax,cr4
c00192cb:	0c 80                	or     al,0x80
c00192cd:	0f 22 e0             	mov    cr4,eax
c00192d0:	c3                   	ret    
c00192d1:	90                   	nop

c00192d2 <CPU::allowUsermodeDataAccess()>:
c00192d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192dd:	74 03                	je     c00192e2 <CPU::allowUsermodeDataAccess()+0x10>
c00192df:	0f 01 cb             	stac   
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <CPU::prohibitUsermodeDataAccess()>:
c00192e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192ef:	74 03                	je     c00192f4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00192f1:	0f 01 ca             	clac   
c00192f4:	c3                   	ret    
c00192f5:	90                   	nop

c00192f6 <CPU::setupSMAP()>:
c00192f6:	0f 20 e0             	mov    eax,cr4
c00192f9:	0d 00 00 20 00       	or     eax,0x200000
c00192fe:	0f 22 e0             	mov    cr4,eax
c0019301:	eb e1                	jmp    c00192e4 <CPU::prohibitUsermodeDataAccess()>
c0019303:	90                   	nop

c0019304 <CPU::setupFeatures()>:
c0019304:	83 ec 0c             	sub    esp,0xc
c0019307:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001930b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019312:	74 07                	je     c001931b <CPU::setupFeatures()+0x17>
c0019314:	52                   	push   edx
c0019315:	e8 46 ff ff ff       	call   c0019260 <CPU::setupSMEP()>
c001931a:	58                   	pop    eax
c001931b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019322:	74 07                	je     c001932b <CPU::setupFeatures()+0x27>
c0019324:	52                   	push   edx
c0019325:	e8 cc ff ff ff       	call   c00192f6 <CPU::setupSMAP()>
c001932a:	58                   	pop    eax
c001932b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019332:	74 07                	je     c001933b <CPU::setupFeatures()+0x37>
c0019334:	52                   	push   edx
c0019335:	e8 32 ff ff ff       	call   c001926c <CPU::setupUMIP()>
c001933a:	58                   	pop    eax
c001933b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019342:	74 07                	je     c001934b <CPU::setupFeatures()+0x47>
c0019344:	52                   	push   edx
c0019345:	e8 2c ff ff ff       	call   c0019276 <CPU::setupTSC()>
c001934a:	58                   	pop    eax
c001934b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019352:	74 07                	je     c001935b <CPU::setupFeatures()+0x57>
c0019354:	52                   	push   edx
c0019355:	e8 26 ff ff ff       	call   c0019280 <CPU::setupLargePages()>
c001935a:	59                   	pop    ecx
c001935b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019362:	74 07                	je     c001936b <CPU::setupFeatures()+0x67>
c0019364:	52                   	push   edx
c0019365:	e8 5e ff ff ff       	call   c00192c8 <CPU::setupGlobalPages()>
c001936a:	58                   	pop    eax
c001936b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019372:	74 0c                	je     c0019380 <CPU::setupFeatures()+0x7c>
c0019374:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019378:	83 c4 0c             	add    esp,0xc
c001937b:	e9 0a ff ff ff       	jmp    c001928a <CPU::setupPAT()>
c0019380:	83 c4 0c             	add    esp,0xc
c0019383:	c3                   	ret    

c0019384 <CPU::open(int, int, void*)>:
c0019384:	57                   	push   edi
c0019385:	56                   	push   esi
c0019386:	53                   	push   ebx
c0019387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001938b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001938f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019395:	83 ec 0c             	sub    esp,0xc
c0019398:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001939e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193a4:	50                   	push   eax
c00193a5:	e8 0e 5b ff ff       	call   c000eeb8 <GDT::setup()>
c00193aa:	83 c4 0c             	add    esp,0xc
c00193ad:	6a 00                	push   0x0
c00193af:	68 ef be ad de       	push   0xdeadbeef
c00193b4:	57                   	push   edi
c00193b5:	e8 ba 7e ff ff       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c00193ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193bd:	e8 92 7e ff ff       	call   c0011254 <TSS::flush()>
c00193c2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00193cb:	e8 44 5d ff ff       	call   c000f114 <IDT::setup()>
c00193d0:	b8 00 04 00 00       	mov    eax,0x400
c00193d5:	0f 23 f8             	mov    db7,eax
c00193d8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00193e2:	e8 da 68 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c00193e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00193ed:	89 30                	mov    DWORD PTR [eax],esi
c00193ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00193f5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00193f8:	58                   	pop    eax
c00193f9:	5a                   	pop    edx
c00193fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019400:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019404:	e8 9d 8e ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c0019409:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001940c:	e8 5f f4 ff ff       	call   c0018870 <CPU::detectFeatures()>
c0019411:	e8 5a be ff ff       	call   c0015270 <setupInterruptController()>
c0019416:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001941c:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c0019421:	83 e0 10             	and    eax,0x10
c0019424:	83 f8 01             	cmp    eax,0x1
c0019427:	19 c0                	sbb    eax,eax
c0019429:	83 e0 46             	and    eax,0x46
c001942c:	83 c0 1e             	add    eax,0x1e
c001942f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019432:	e8 05 d3 ff ff       	call   c001673c <setupTimer(int)>
c0019437:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001943d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019440:	e8 bf fe ff ff       	call   c0019304 <CPU::setupFeatures()>
c0019445:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019448:	e8 a7 f1 ff ff       	call   c00185f4 <CPU::displayFeatures()>
c001944d:	83 c4 10             	add    esp,0x10
c0019450:	31 c0                	xor    eax,eax
c0019452:	5b                   	pop    ebx
c0019453:	5e                   	pop    esi
c0019454:	5f                   	pop    edi
c0019455:	c3                   	ret    

c0019456 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019456:	57                   	push   edi
c0019457:	56                   	push   esi
c0019458:	53                   	push   ebx
c0019459:	51                   	push   ecx
c001945a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001945e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019461:	0f 02 c0             	lar    eax,ax
c0019464:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019467:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001946b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001946e:	88 ca                	mov    dl,cl
c0019470:	c0 ea 06             	shr    dl,0x6
c0019473:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019477:	89 ca                	mov    edx,ecx
c0019479:	66 c1 ea 03          	shr    dx,0x3
c001947d:	83 e2 07             	and    edx,0x7
c0019480:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019485:	88 17                	mov    BYTE PTR [edi],dl
c0019487:	0f 84 a6 01 00 00    	je     c0019633 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001948d:	83 e1 07             	and    ecx,0x7
c0019490:	80 f9 04             	cmp    cl,0x4
c0019493:	0f 84 98 00 00 00    	je     c0019531 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019499:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001949e:	0f 95 c0             	setne  al
c00194a1:	80 f9 05             	cmp    cl,0x5
c00194a4:	0f 95 c2             	setne  dl
c00194a7:	08 c2                	or     dl,al
c00194a9:	74 79                	je     c0019524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00194ab:	84 c9                	test   cl,cl
c00194ad:	75 05                	jne    c00194b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194af:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194b2:	eb 3c                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194b4:	80 f9 01             	cmp    cl,0x1
c00194b7:	75 05                	jne    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194b9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194bc:	eb 32                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194be:	80 f9 02             	cmp    cl,0x2
c00194c1:	75 05                	jne    c00194c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194c3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194c6:	eb 28                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194c8:	31 c0                	xor    eax,eax
c00194ca:	80 f9 03             	cmp    cl,0x3
c00194cd:	75 05                	jne    c00194d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194cf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194d2:	eb 1c                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194d4:	80 f9 05             	cmp    cl,0x5
c00194d7:	75 05                	jne    c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00194d9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194dc:	eb 12                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194de:	80 f9 06             	cmp    cl,0x6
c00194e1:	75 05                	jne    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00194e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194e6:	eb 08                	jmp    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e8:	80 f9 07             	cmp    cl,0x7
c00194eb:	75 03                	jne    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194ed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00194f0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00194f5:	75 10                	jne    c0019507 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00194f7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00194fb:	b9 03 00 00 00       	mov    ecx,0x3
c0019500:	01 d0                	add    eax,edx
c0019502:	e9 37 01 00 00       	jmp    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019507:	b9 02 00 00 00       	mov    ecx,0x2
c001950c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019511:	0f 85 27 01 00 00    	jne    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019517:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001951a:	b9 06 00 00 00       	mov    ecx,0x6
c001951f:	e9 1a 01 00 00       	jmp    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019524:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019527:	b9 06 00 00 00       	mov    ecx,0x6
c001952c:	e9 0f 01 00 00       	jmp    c0019640 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019531:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019534:	88 ca                	mov    dl,cl
c0019536:	c0 ea 06             	shr    dl,0x6
c0019539:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001953d:	89 ca                	mov    edx,ecx
c001953f:	66 c1 ea 03          	shr    dx,0x3
c0019543:	83 e2 07             	and    edx,0x7
c0019546:	80 e1 07             	and    cl,0x7
c0019549:	75 05                	jne    c0019550 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001954b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001954e:	eb 4c                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019550:	80 f9 01             	cmp    cl,0x1
c0019553:	75 05                	jne    c001955a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019555:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019558:	eb 42                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001955a:	80 f9 02             	cmp    cl,0x2
c001955d:	75 05                	jne    c0019564 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001955f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019562:	eb 38                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019564:	80 f9 03             	cmp    cl,0x3
c0019567:	75 05                	jne    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019569:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001956c:	eb 2e                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001956e:	80 f9 04             	cmp    cl,0x4
c0019571:	75 12                	jne    c0019585 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019573:	f6 c4 60             	test   ah,0x60
c0019576:	75 08                	jne    c0019580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019578:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001957b:	8d 78 14             	lea    edi,[eax+0x14]
c001957e:	eb 1c                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019580:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019583:	eb 17                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019585:	80 f9 05             	cmp    cl,0x5
c0019588:	75 05                	jne    c001958f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001958a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001958d:	eb 0d                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001958f:	80 f9 06             	cmp    cl,0x6
c0019592:	75 05                	jne    c0019599 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019594:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019597:	eb 03                	jmp    c001959c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019599:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001959c:	84 d2                	test   dl,dl
c001959e:	75 05                	jne    c00195a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00195a0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195a3:	eb 3c                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195a5:	80 fa 01             	cmp    dl,0x1
c00195a8:	75 05                	jne    c00195af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00195aa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195ad:	eb 32                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195af:	80 fa 02             	cmp    dl,0x2
c00195b2:	75 05                	jne    c00195b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195b4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195b7:	eb 28                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195b9:	80 fa 03             	cmp    dl,0x3
c00195bc:	75 05                	jne    c00195c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195be:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195c1:	eb 1e                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195c3:	31 c0                	xor    eax,eax
c00195c5:	80 fa 04             	cmp    dl,0x4
c00195c8:	74 17                	je     c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195ca:	80 fa 05             	cmp    dl,0x5
c00195cd:	75 05                	jne    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195cf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195d2:	eb 0d                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d4:	80 fa 06             	cmp    dl,0x6
c00195d7:	75 05                	jne    c00195de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00195d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195dc:	eb 03                	jmp    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195e1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195e6:	0f 94 c2             	sete   dl
c00195e9:	80 f9 05             	cmp    cl,0x5
c00195ec:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00195f0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00195f5:	d3 e0                	shl    eax,cl
c00195f7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00195fb:	74 0a                	je     c0019607 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00195fd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019600:	b9 07 00 00 00       	mov    ecx,0x7
c0019605:	eb 37                	jmp    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019607:	01 f8                	add    eax,edi
c0019609:	b9 03 00 00 00       	mov    ecx,0x3
c001960e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019613:	74 2b                	je     c0019640 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019615:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001961a:	75 0d                	jne    c0019629 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001961c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019620:	01 c8                	add    eax,ecx
c0019622:	b9 04 00 00 00       	mov    ecx,0x4
c0019627:	eb 17                	jmp    c0019640 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019629:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001962c:	b9 07 00 00 00       	mov    ecx,0x7
c0019631:	eb 0d                	jmp    c0019640 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019633:	b9 02 00 00 00       	mov    ecx,0x2
c0019638:	b2 01                	mov    dl,0x1
c001963a:	31 c0                	xor    eax,eax
c001963c:	eb 02                	jmp    c0019640 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001963e:	31 d2                	xor    edx,edx
c0019640:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019644:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019646:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001964a:	88 11                	mov    BYTE PTR [ecx],dl
c001964c:	5a                   	pop    edx
c001964d:	5b                   	pop    ebx
c001964e:	5e                   	pop    esi
c001964f:	5f                   	pop    edi
c0019650:	c3                   	ret    
c0019651:	90                   	nop

c0019652 <EnvVarContainer::getEnv(char const*)>:
c0019652:	57                   	push   edi
c0019653:	56                   	push   esi
c0019654:	53                   	push   ebx
c0019655:	31 db                	xor    ebx,ebx
c0019657:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001965b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001965d:	7e 2b                	jle    c001968a <EnvVarContainer::getEnv(char const*)+0x38>
c001965f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019666:	50                   	push   eax
c0019667:	50                   	push   eax
c0019668:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001966b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001966e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019672:	e8 3d 71 fe ff       	call   c00007b4 <strcmp>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	85 c0                	test   eax,eax
c001967c:	75 09                	jne    c0019687 <EnvVarContainer::getEnv(char const*)+0x35>
c001967e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019681:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019685:	eb 05                	jmp    c001968c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019687:	43                   	inc    ebx
c0019688:	eb d1                	jmp    c001965b <EnvVarContainer::getEnv(char const*)+0x9>
c001968a:	31 c0                	xor    eax,eax
c001968c:	5b                   	pop    ebx
c001968d:	5e                   	pop    esi
c001968e:	5f                   	pop    edi
c001968f:	c3                   	ret    

c0019690 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019690:	57                   	push   edi
c0019691:	56                   	push   esi
c0019692:	53                   	push   ebx
c0019693:	83 ec 1c             	sub    esp,0x1c
c0019696:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001969a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001969e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00196a2:	57                   	push   edi
c00196a3:	e8 39 70 fe ff       	call   c00006e1 <strlen>
c00196a8:	40                   	inc    eax
c00196a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00196ac:	e8 73 5f ff ff       	call   c000f624 <malloc>
c00196b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00196b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196b8:	e8 24 70 fe ff       	call   c00006e1 <strlen>
c00196bd:	40                   	inc    eax
c00196be:	89 04 24             	mov    DWORD PTR [esp],eax
c00196c1:	e8 5e 5f ff ff       	call   c000f624 <malloc>
c00196c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00196c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196cd:	e8 0f 70 fe ff       	call   c00006e1 <strlen>
c00196d2:	83 c4 0c             	add    esp,0xc
c00196d5:	40                   	inc    eax
c00196d6:	50                   	push   eax
c00196d7:	6a 00                	push   0x0
c00196d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00196dd:	e8 e2 6f fe ff       	call   c00006c4 <memset>
c00196e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00196e5:	e8 f7 6f fe ff       	call   c00006e1 <strlen>
c00196ea:	83 c4 0c             	add    esp,0xc
c00196ed:	40                   	inc    eax
c00196ee:	50                   	push   eax
c00196ef:	57                   	push   edi
c00196f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00196f4:	e8 a7 6f fe ff       	call   c00006a0 <memcpy>
c00196f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00196fc:	e8 e0 6f fe ff       	call   c00006e1 <strlen>
c0019701:	83 c4 0c             	add    esp,0xc
c0019704:	40                   	inc    eax
c0019705:	50                   	push   eax
c0019706:	6a 00                	push   0x0
c0019708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001970c:	e8 b3 6f fe ff       	call   c00006c4 <memset>
c0019711:	89 34 24             	mov    DWORD PTR [esp],esi
c0019714:	e8 c8 6f fe ff       	call   c00006e1 <strlen>
c0019719:	83 c4 0c             	add    esp,0xc
c001971c:	40                   	inc    eax
c001971d:	50                   	push   eax
c001971e:	56                   	push   esi
c001971f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019723:	e8 78 6f fe ff       	call   c00006a0 <memcpy>
c0019728:	8b 03                	mov    eax,DWORD PTR [ebx]
c001972a:	40                   	inc    eax
c001972b:	89 03                	mov    DWORD PTR [ebx],eax
c001972d:	c1 e0 03             	shl    eax,0x3
c0019730:	5a                   	pop    edx
c0019731:	59                   	pop    ecx
c0019732:	50                   	push   eax
c0019733:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019736:	e8 d5 5e ff ff       	call   c000f610 <realloc>
c001973b:	83 c4 0c             	add    esp,0xc
c001973e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019741:	6a 08                	push   0x8
c0019743:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019747:	52                   	push   edx
c0019748:	8b 13                	mov    edx,DWORD PTR [ebx]
c001974a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001974e:	50                   	push   eax
c001974f:	e8 4c 6f fe ff       	call   c00006a0 <memcpy>
c0019754:	83 c4 20             	add    esp,0x20
c0019757:	5b                   	pop    ebx
c0019758:	5e                   	pop    esi
c0019759:	5f                   	pop    edi
c001975a:	c3                   	ret    
c001975b:	90                   	nop

c001975c <EnvVarContainer::deleteEnv(char const*)>:
c001975c:	c3                   	ret    
c001975d:	90                   	nop

c001975e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001975e:	55                   	push   ebp
c001975f:	57                   	push   edi
c0019760:	56                   	push   esi
c0019761:	53                   	push   ebx
c0019762:	81 ec 38 01 00 00    	sub    esp,0x138
c0019768:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001976f:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019776:	68 14 01 00 00       	push   0x114
c001977b:	e8 a4 5e ff ff       	call   c000f624 <malloc>
c0019780:	83 c4 0c             	add    esp,0xc
c0019783:	89 c7                	mov    edi,eax
c0019785:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019788:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001978f:	50                   	push   eax
c0019790:	e8 b7 96 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0019795:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019798:	e8 81 99 ff ff       	call   c001311e <File::exists()>
c001979d:	83 c4 10             	add    esp,0x10
c00197a0:	84 c0                	test   al,al
c00197a2:	75 31                	jne    c00197d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00197a4:	51                   	push   ecx
c00197a5:	51                   	push   ecx
c00197a6:	6a 12                	push   0x12
c00197a8:	57                   	push   edi
c00197a9:	e8 02 97 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c00197ae:	8b 07                	mov    eax,DWORD PTR [edi]
c00197b0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00197b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00197b6:	e8 26 6f fe ff       	call   c00006e1 <strlen>
c00197bb:	5a                   	pop    edx
c00197bc:	31 d2                	xor    edx,edx
c00197be:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197c2:	51                   	push   ecx
c00197c3:	55                   	push   ebp
c00197c4:	52                   	push   edx
c00197c5:	50                   	push   eax
c00197c6:	57                   	push   edi
c00197c7:	ff d3                	call   ebx
c00197c9:	83 c4 14             	add    esp,0x14
c00197cc:	57                   	push   edi
c00197cd:	e8 3c 97 ff ff       	call   c0012f0e <File::close()>
c00197d2:	83 c4 10             	add    esp,0x10
c00197d5:	31 db                	xor    ebx,ebx
c00197d7:	50                   	push   eax
c00197d8:	31 ed                	xor    ebp,ebp
c00197da:	68 00 01 00 00       	push   0x100
c00197df:	6a 00                	push   0x0
c00197e1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00197e5:	50                   	push   eax
c00197e6:	e8 d9 6e fe ff       	call   c00006c4 <memset>
c00197eb:	58                   	pop    eax
c00197ec:	5a                   	pop    edx
c00197ed:	6a 01                	push   0x1
c00197ef:	57                   	push   edi
c00197f0:	e8 bb 96 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	83 ec 0c             	sub    esp,0xc
c00197fb:	8b 07                	mov    eax,DWORD PTR [edi]
c00197fd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019801:	51                   	push   ecx
c0019802:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019806:	52                   	push   edx
c0019807:	6a 00                	push   0x0
c0019809:	6a 01                	push   0x1
c001980b:	57                   	push   edi
c001980c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001980f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019813:	83 c4 20             	add    esp,0x20
c0019816:	3c 0d                	cmp    al,0xd
c0019818:	0f 84 12 01 00 00    	je     c0019930 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001981e:	85 db                	test   ebx,ebx
c0019820:	0f 84 fd 00 00 00    	je     c0019923 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019826:	3c 0a                	cmp    al,0xa
c0019828:	74 13                	je     c001983d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001982a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001982f:	74 0c                	je     c001983d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019831:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019837:	0f 8e e6 00 00 00    	jle    c0019923 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001983d:	83 ec 0c             	sub    esp,0xc
c0019840:	8d 53 01             	lea    edx,[ebx+0x1]
c0019843:	29 dd                	sub    ebp,ebx
c0019845:	52                   	push   edx
c0019846:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001984a:	e8 d5 5d ff ff       	call   c000f624 <malloc>
c001984f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019852:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019856:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019859:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001985d:	e8 c2 5d ff ff       	call   c000f624 <malloc>
c0019862:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019866:	83 c4 0c             	add    esp,0xc
c0019869:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001986d:	52                   	push   edx
c001986e:	6a 00                	push   0x0
c0019870:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019874:	e8 4b 6e fe ff       	call   c00006c4 <memset>
c0019879:	83 c4 0c             	add    esp,0xc
c001987c:	53                   	push   ebx
c001987d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019881:	55                   	push   ebp
c0019882:	01 eb                	add    ebx,ebp
c0019884:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019888:	e8 13 6e fe ff       	call   c00006a0 <memcpy>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019894:	51                   	push   ecx
c0019895:	6a 00                	push   0x0
c0019897:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001989b:	e8 24 6e fe ff       	call   c00006c4 <memset>
c00198a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198a3:	e8 39 6e fe ff       	call   c00006e1 <strlen>
c00198a8:	83 c4 0c             	add    esp,0xc
c00198ab:	50                   	push   eax
c00198ac:	53                   	push   ebx
c00198ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198b1:	e8 ea 6d fe ff       	call   c00006a0 <memcpy>
c00198b6:	5b                   	pop    ebx
c00198b7:	58                   	pop    eax
c00198b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198bc:	68 98 ad 02 c0       	push   0xc002ad98
c00198c1:	e8 2d 90 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00198c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00198c8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00198cb:	40                   	inc    eax
c00198cc:	83 c4 10             	add    esp,0x10
c00198cf:	89 06                	mov    DWORD PTR [esi],eax
c00198d1:	85 d2                	test   edx,edx
c00198d3:	75 0c                	jne    c00198e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c00198d5:	83 ec 0c             	sub    esp,0xc
c00198d8:	6a 08                	push   0x8
c00198da:	e8 45 5d ff ff       	call   c000f624 <malloc>
c00198df:	eb 0c                	jmp    c00198ed <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c00198e1:	c1 e0 03             	shl    eax,0x3
c00198e4:	51                   	push   ecx
c00198e5:	51                   	push   ecx
c00198e6:	50                   	push   eax
c00198e7:	52                   	push   edx
c00198e8:	e8 23 5d ff ff       	call   c000f610 <realloc>
c00198ed:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00198f0:	83 c4 10             	add    esp,0x10
c00198f3:	31 db                	xor    ebx,ebx
c00198f5:	52                   	push   edx
c00198f6:	6a 08                	push   0x8
c00198f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00198fc:	50                   	push   eax
c00198fd:	8b 16                	mov    edx,DWORD PTR [esi]
c00198ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019902:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019906:	50                   	push   eax
c0019907:	e8 94 6d fe ff       	call   c00006a0 <memcpy>
c001990c:	83 c4 0c             	add    esp,0xc
c001990f:	68 00 01 00 00       	push   0x100
c0019914:	6a 00                	push   0x0
c0019916:	55                   	push   ebp
c0019917:	31 ed                	xor    ebp,ebp
c0019919:	e8 a6 6d fe ff       	call   c00006c4 <memset>
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	eb 0d                	jmp    c0019930 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019923:	3c 3d                	cmp    al,0x3d
c0019925:	74 07                	je     c001992e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019927:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001992b:	45                   	inc    ebp
c001992c:	eb 02                	jmp    c0019930 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001992e:	89 eb                	mov    ebx,ebp
c0019930:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019935:	0f 85 bd fe ff ff    	jne    c00197f8 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001993b:	50                   	push   eax
c001993c:	50                   	push   eax
c001993d:	ff 36                	push   DWORD PTR [esi]
c001993f:	68 a6 ad 02 c0       	push   0xc002ada6
c0019944:	e8 aa 8f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019949:	81 c4 3c 01 00 00    	add    esp,0x13c
c001994f:	5b                   	pop    ebx
c0019950:	5e                   	pop    esi
c0019951:	5f                   	pop    edi
c0019952:	5d                   	pop    ebp
c0019953:	c3                   	ret    

c0019954 <EnvVarContainer::__loadSystem()>:
c0019954:	83 ec 10             	sub    esp,0x10
c0019957:	68 e0 cb 02 c0       	push   0xc002cbe0
c001995c:	68 d1 ad 02 c0       	push   0xc002add1
c0019961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019965:	e8 f4 fd ff ff       	call   c001975e <EnvVarContainer::loadFrom(char const*, char const*)>
c001996a:	83 c4 1c             	add    esp,0x1c
c001996d:	c3                   	ret    

c001996e <EnvVarContainer::__loadUser()>:
c001996e:	c3                   	ret    
c001996f:	90                   	nop

c0019970 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001997a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001997e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019989:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019990:	90                   	nop
c0019991:	c3                   	ret    

c0019992 <EnvVarContainer::~EnvVarContainer()>:
c0019992:	83 ec 0c             	sub    esp,0xc
c0019995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001999c:	85 c0                	test   eax,eax
c001999e:	74 1d                	je     c00199bd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00199a6:	85 c0                	test   eax,eax
c00199a8:	74 13                	je     c00199bd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00199b1:	83 ec 0c             	sub    esp,0xc
c00199b4:	50                   	push   eax
c00199b5:	e8 7a 5c ff ff       	call   c000f634 <free>
c00199ba:	83 c4 10             	add    esp,0x10
c00199bd:	90                   	nop
c00199be:	83 c4 0c             	add    esp,0xc
c00199c1:	c3                   	ret    

c00199c2 <Krnl::getEnv(Process*, char const*)>:
c00199c2:	53                   	push   ebx
c00199c3:	83 ec 08             	sub    esp,0x8
c00199c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00199ce:	39 05 f4 eb 02 c0    	cmp    DWORD PTR ds:0xc002ebf4,eax
c00199d4:	74 04                	je     c00199da <Krnl::getEnv(Process*, char const*)+0x18>
c00199d6:	85 c0                	test   eax,eax
c00199d8:	75 0b                	jne    c00199e5 <Krnl::getEnv(Process*, char const*)+0x23>
c00199da:	a1 d0 e1 02 c0       	mov    eax,ds:0xc002e1d0
c00199df:	85 c0                	test   eax,eax
c00199e1:	75 19                	jne    c00199fc <Krnl::getEnv(Process*, char const*)+0x3a>
c00199e3:	eb 27                	jmp    c0019a0c <Krnl::getEnv(Process*, char const*)+0x4a>
c00199e5:	52                   	push   edx
c00199e6:	52                   	push   edx
c00199e7:	53                   	push   ebx
c00199e8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c00199ee:	e8 5f fc ff ff       	call   c0019652 <EnvVarContainer::getEnv(char const*)>
c00199f3:	83 c4 10             	add    esp,0x10
c00199f6:	85 c0                	test   eax,eax
c00199f8:	75 28                	jne    c0019a22 <Krnl::getEnv(Process*, char const*)+0x60>
c00199fa:	eb de                	jmp    c00199da <Krnl::getEnv(Process*, char const*)+0x18>
c00199fc:	52                   	push   edx
c00199fd:	52                   	push   edx
c00199fe:	53                   	push   ebx
c00199ff:	50                   	push   eax
c0019a00:	e8 4d fc ff ff       	call   c0019652 <EnvVarContainer::getEnv(char const*)>
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	85 c0                	test   eax,eax
c0019a0a:	75 16                	jne    c0019a22 <Krnl::getEnv(Process*, char const*)+0x60>
c0019a0c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a10:	a1 d4 e1 02 c0       	mov    eax,ds:0xc002e1d4
c0019a15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a19:	83 c4 08             	add    esp,0x8
c0019a1c:	5b                   	pop    ebx
c0019a1d:	e9 30 fc ff ff       	jmp    c0019652 <EnvVarContainer::getEnv(char const*)>
c0019a22:	83 c4 08             	add    esp,0x8
c0019a25:	5b                   	pop    ebx
c0019a26:	c3                   	ret    

c0019a27 <Krnl::setEnvSystem(char const*, char const*)>:
c0019a27:	83 ec 10             	sub    esp,0x10
c0019a2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a32:	ff 35 d4 e1 02 c0    	push   DWORD PTR ds:0xc002e1d4
c0019a38:	e8 53 fc ff ff       	call   c0019690 <EnvVarContainer::setEnv(char const*, char const*)>
c0019a3d:	83 c4 1c             	add    esp,0x1c
c0019a40:	c3                   	ret    

c0019a41 <Krnl::setEnvUser(char const*, char const*)>:
c0019a41:	a1 d0 e1 02 c0       	mov    eax,ds:0xc002e1d0
c0019a46:	85 c0                	test   eax,eax
c0019a48:	74 15                	je     c0019a5f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019a4a:	83 ec 10             	sub    esp,0x10
c0019a4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a55:	50                   	push   eax
c0019a56:	e8 35 fc ff ff       	call   c0019690 <EnvVarContainer::setEnv(char const*, char const*)>
c0019a5b:	83 c4 1c             	add    esp,0x1c
c0019a5e:	c3                   	ret    
c0019a5f:	c3                   	ret    

c0019a60 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a64:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a6e:	e9 1d fc ff ff       	jmp    c0019690 <EnvVarContainer::setEnv(char const*, char const*)>

c0019a73 <Krnl::deleteEnvSystem(char const*)>:
c0019a73:	c3                   	ret    

c0019a74 <Krnl::deleteEnvUser(char const*)>:
c0019a74:	c3                   	ret    

c0019a75 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019a75:	c3                   	ret    

c0019a76 <Krnl::newProcessEnv(Process*)>:
c0019a76:	83 ec 28             	sub    esp,0x28
c0019a79:	6a 0c                	push   0xc
c0019a7b:	e8 a4 5b ff ff       	call   c000f624 <malloc>
c0019a80:	5a                   	pop    edx
c0019a81:	59                   	pop    ecx
c0019a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a86:	50                   	push   eax
c0019a87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a8b:	e8 e0 fe ff ff       	call   c0019970 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a94:	83 c4 2c             	add    esp,0x2c
c0019a97:	c3                   	ret    

c0019a98 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019a98:	56                   	push   esi
c0019a99:	53                   	push   ebx
c0019a9a:	83 ec 10             	sub    esp,0x10
c0019a9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019aa1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019aa7:	6a 0c                	push   0xc
c0019aa9:	e8 76 5b ff ff       	call   c000f624 <malloc>
c0019aae:	89 c3                	mov    ebx,eax
c0019ab0:	58                   	pop    eax
c0019ab1:	5a                   	pop    edx
c0019ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ab6:	53                   	push   ebx
c0019ab7:	e8 b4 fe ff ff       	call   c0019970 <EnvVarContainer::EnvVarContainer(Process*)>
c0019abc:	8b 06                	mov    eax,DWORD PTR [esi]
c0019abe:	89 03                	mov    DWORD PTR [ebx],eax
c0019ac0:	c1 e0 03             	shl    eax,0x3
c0019ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ac6:	e8 59 5b ff ff       	call   c000f624 <malloc>
c0019acb:	83 c4 0c             	add    esp,0xc
c0019ace:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ad1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019ad3:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019ada:	52                   	push   edx
c0019adb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ade:	50                   	push   eax
c0019adf:	e8 bc 6b fe ff       	call   c00006a0 <memcpy>
c0019ae4:	89 d8                	mov    eax,ebx
c0019ae6:	83 c4 14             	add    esp,0x14
c0019ae9:	5b                   	pop    ebx
c0019aea:	5e                   	pop    esi
c0019aeb:	c3                   	ret    

c0019aec <Krnl::loadSystemEnv()>:
c0019aec:	53                   	push   ebx
c0019aed:	83 ec 14             	sub    esp,0x14
c0019af0:	6a 0c                	push   0xc
c0019af2:	e8 2d 5b ff ff       	call   c000f624 <malloc>
c0019af7:	89 c3                	mov    ebx,eax
c0019af9:	58                   	pop    eax
c0019afa:	5a                   	pop    edx
c0019afb:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c0019b01:	53                   	push   ebx
c0019b02:	e8 69 fe ff ff       	call   c0019970 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b0a:	89 1d d4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1d4,ebx
c0019b10:	e8 3f fe ff ff       	call   c0019954 <EnvVarContainer::__loadSystem()>
c0019b15:	83 c4 18             	add    esp,0x18
c0019b18:	5b                   	pop    ebx
c0019b19:	c3                   	ret    

c0019b1a <Krnl::loadUserEnv()>:
c0019b1a:	53                   	push   ebx
c0019b1b:	83 ec 14             	sub    esp,0x14
c0019b1e:	6a 0c                	push   0xc
c0019b20:	e8 ff 5a ff ff       	call   c000f624 <malloc>
c0019b25:	89 c3                	mov    ebx,eax
c0019b27:	58                   	pop    eax
c0019b28:	5a                   	pop    edx
c0019b29:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c0019b2f:	53                   	push   ebx
c0019b30:	e8 3b fe ff ff       	call   c0019970 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b35:	89 1d d0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1d0,ebx
c0019b3b:	83 c4 18             	add    esp,0x18
c0019b3e:	5b                   	pop    ebx
c0019b3f:	c3                   	ret    

c0019b40 <Krnl::flushEnv()>:
c0019b40:	c3                   	ret    

c0019b41 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b45:	8b 15 d0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1d0
c0019b4b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019b51:	a1 d4 e1 02 c0       	mov    eax,ds:0xc002e1d4
c0019b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b58:	03 01                	add    eax,DWORD PTR [ecx]
c0019b5a:	85 d2                	test   edx,edx
c0019b5c:	74 02                	je     c0019b60 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019b5e:	03 02                	add    eax,DWORD PTR [edx]
c0019b60:	c3                   	ret    

c0019b61 <Krnl::getProcessEnvPair(Process*, int)>:
c0019b61:	57                   	push   edi
c0019b62:	8b 0d d0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1d0
c0019b68:	56                   	push   esi
c0019b69:	85 c9                	test   ecx,ecx
c0019b6b:	53                   	push   ebx
c0019b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b74:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019b7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b7e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019b80:	75 47                	jne    c0019bc9 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019b82:	39 c3                	cmp    ebx,eax
c0019b84:	7c 47                	jl     c0019bcd <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019b86:	8b 15 d4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1d4
c0019b8c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b8e:	01 c1                	add    ecx,eax
c0019b90:	39 d9                	cmp    ecx,ebx
c0019b92:	7e 6c                	jle    c0019c00 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019b94:	51                   	push   ecx
c0019b95:	89 d9                	mov    ecx,ebx
c0019b97:	29 c1                	sub    ecx,eax
c0019b99:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019b9c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019ba0:	53                   	push   ebx
c0019ba1:	68 f3 ad 02 c0       	push   0xc002adf3
c0019ba6:	e8 48 8d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019bab:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019bb1:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019bb3:	a1 d4 e1 02 c0       	mov    eax,ds:0xc002e1d4
c0019bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bbb:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019bbf:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019bc2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019bc5:	89 06                	mov    DWORD PTR [esi],eax
c0019bc7:	eb 51                	jmp    c0019c1a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019bc9:	39 c3                	cmp    ebx,eax
c0019bcb:	7d 05                	jge    c0019bd2 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019bcd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019bd0:	eb 20                	jmp    c0019bf2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019bd2:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019bd4:	8d 14 07             	lea    edx,[edi+eax*1]
c0019bd7:	39 da                	cmp    edx,ebx
c0019bd9:	7e 04                	jle    c0019bdf <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019bdb:	29 c3                	sub    ebx,eax
c0019bdd:	eb 10                	jmp    c0019bef <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019bdf:	8b 0d d4 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1d4
c0019be5:	03 11                	add    edx,DWORD PTR [ecx]
c0019be7:	39 da                	cmp    edx,ebx
c0019be9:	7e 15                	jle    c0019c00 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019beb:	29 c3                	sub    ebx,eax
c0019bed:	29 fb                	sub    ebx,edi
c0019bef:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019bf2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019bf6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019bf9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019bfc:	89 06                	mov    DWORD PTR [esi],eax
c0019bfe:	eb 1d                	jmp    c0019c1d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019c00:	83 ec 0c             	sub    esp,0xc
c0019c03:	68 07 ae 02 c0       	push   0xc002ae07
c0019c08:	e8 18 00 00 00       	call   c0019c25 <Krnl::panic(char const*)>
c0019c0d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019c13:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	89 f0                	mov    eax,esi
c0019c1f:	5b                   	pop    ebx
c0019c20:	5e                   	pop    esi
c0019c21:	5f                   	pop    edi
c0019c22:	c2 04 00             	ret    0x4

c0019c25 <Krnl::panic(char const*)>:
c0019c25:	55                   	push   ebp
c0019c26:	89 e5                	mov    ebp,esp
c0019c28:	53                   	push   ebx
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c2f:	fa                   	cli    
c0019c30:	c6 05 e0 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1e0,0x1
c0019c37:	53                   	push   ebx
c0019c38:	c6 05 e4 c5 02 c0 00 	mov    BYTE PTR ds:0xc002c5e4,0x0
c0019c3f:	68 21 ae 02 c0       	push   0xc002ae21
c0019c44:	e8 aa 8c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019c49:	58                   	pop    eax
c0019c4a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019c4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c55:	e8 5b 6e ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0019c5a:	83 c4 0c             	add    esp,0xc
c0019c5d:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019c62:	6a 01                	push   0x1
c0019c64:	6a 0f                	push   0xf
c0019c66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c6c:	e8 75 68 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c71:	58                   	pop    eax
c0019c72:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019c77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c7d:	e8 d4 70 ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0019c82:	58                   	pop    eax
c0019c83:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019c88:	5a                   	pop    edx
c0019c89:	68 3a ae 02 c0       	push   0xc002ae3a
c0019c8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c94:	e8 3b 72 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019c99:	59                   	pop    ecx
c0019c9a:	58                   	pop    eax
c0019c9b:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019ca0:	68 e0 ae 02 c0       	push   0xc002aee0
c0019ca5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cab:	e8 24 72 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cb0:	58                   	pop    eax
c0019cb1:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019cb6:	5a                   	pop    edx
c0019cb7:	68 56 ae 02 c0       	push   0xc002ae56
c0019cbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cc2:	e8 0d 72 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cc7:	59                   	pop    ecx
c0019cc8:	58                   	pop    eax
c0019cc9:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019cce:	53                   	push   ebx
c0019ccf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd5:	e8 fa 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cda:	58                   	pop    eax
c0019cdb:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019ce0:	5a                   	pop    edx
c0019ce1:	68 76 ae 02 c0       	push   0xc002ae76
c0019ce6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cec:	e8 e3 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cf1:	a1 dc e1 02 c0       	mov    eax,ds:0xc002e1dc
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	85 c0                	test   eax,eax
c0019cfb:	74 02                	je     c0019cff <Krnl::panic(char const*)+0xda>
c0019cfd:	ff d0                	call   eax
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d05:	e8 68 2e 00 00       	call   c001cb72 <Thr::getDriverNameFromAddress(unsigned long)>
c0019d0a:	83 c4 10             	add    esp,0x10
c0019d0d:	89 c3                	mov    ebx,eax
c0019d0f:	85 c0                	test   eax,eax
c0019d11:	0f 84 50 02 00 00    	je     c0019f67 <Krnl::panic(char const*)+0x342>
c0019d17:	83 ec 08             	sub    esp,0x8
c0019d1a:	8b 15 f4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebf4
c0019d20:	68 1c af 02 c0       	push   0xc002af1c
c0019d25:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019d2b:	e8 a4 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d30:	58                   	pop    eax
c0019d31:	5a                   	pop    edx
c0019d32:	8b 15 f4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebf4
c0019d38:	68 56 ae 02 c0       	push   0xc002ae56
c0019d3d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019d43:	e8 8c 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d48:	59                   	pop    ecx
c0019d49:	58                   	pop    eax
c0019d4a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019d4f:	53                   	push   ebx
c0019d50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d56:	e8 79 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	83 ec 08             	sub    esp,0x8
c0019d61:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019d66:	68 75 ae 02 c0       	push   0xc002ae75
c0019d6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d71:	e8 5e 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d76:	58                   	pop    eax
c0019d77:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019d7c:	5a                   	pop    edx
c0019d7d:	68 74 af 02 c0       	push   0xc002af74
c0019d82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d88:	e8 47 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d8d:	59                   	pop    ecx
c0019d8e:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019d93:	5b                   	pop    ebx
c0019d94:	68 b4 af 02 c0       	push   0xc002afb4
c0019d99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d9f:	e8 30 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019da4:	58                   	pop    eax
c0019da5:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019daa:	5a                   	pop    edx
c0019dab:	68 61 ae 02 c0       	push   0xc002ae61
c0019db0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db6:	e8 19 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019dbb:	59                   	pop    ecx
c0019dbc:	5b                   	pop    ebx
c0019dbd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019dc0:	68 79 ae 02 c0       	push   0xc002ae79
c0019dc5:	e8 29 8b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019dca:	58                   	pop    eax
c0019dcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019dce:	5a                   	pop    edx
c0019dcf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019dd2:	68 82 ae 02 c0       	push   0xc002ae82
c0019dd7:	e8 17 8b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019ddc:	59                   	pop    ecx
c0019ddd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019de0:	5b                   	pop    ebx
c0019de1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019de3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019de6:	68 8b ae 02 c0       	push   0xc002ae8b
c0019deb:	e8 03 8b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019df0:	58                   	pop    eax
c0019df1:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019df6:	5a                   	pop    edx
c0019df7:	68 f8 af 02 c0       	push   0xc002aff8
c0019dfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e02:	e8 cd 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e07:	59                   	pop    ecx
c0019e08:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e0d:	5b                   	pop    ebx
c0019e0e:	68 94 ae 02 c0       	push   0xc002ae94
c0019e13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e19:	e8 b6 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e1e:	0f 20 c0             	mov    eax,cr0
c0019e21:	5a                   	pop    edx
c0019e22:	59                   	pop    ecx
c0019e23:	50                   	push   eax
c0019e24:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e2f:	e8 c6 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019e34:	5b                   	pop    ebx
c0019e35:	58                   	pop    eax
c0019e36:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e3b:	68 9e ae 02 c0       	push   0xc002ae9e
c0019e40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e46:	e8 89 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e4b:	0f 20 d0             	mov    eax,cr2
c0019e4e:	5a                   	pop    edx
c0019e4f:	59                   	pop    ecx
c0019e50:	50                   	push   eax
c0019e51:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e5c:	e8 99 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019e61:	5b                   	pop    ebx
c0019e62:	58                   	pop    eax
c0019e63:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e68:	68 a8 ae 02 c0       	push   0xc002aea8
c0019e6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e73:	e8 5c 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e78:	0f 20 d8             	mov    eax,cr3
c0019e7b:	5a                   	pop    edx
c0019e7c:	59                   	pop    ecx
c0019e7d:	50                   	push   eax
c0019e7e:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e89:	e8 6c 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019e8e:	5b                   	pop    ebx
c0019e8f:	58                   	pop    eax
c0019e90:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019e95:	68 bb ae 02 c0       	push   0xc002aebb
c0019e9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea0:	e8 2f 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019ea5:	0f 20 e0             	mov    eax,cr4
c0019ea8:	5a                   	pop    edx
c0019ea9:	59                   	pop    ecx
c0019eaa:	50                   	push   eax
c0019eab:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019eb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb6:	e8 3f 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019ebb:	5b                   	pop    ebx
c0019ebc:	58                   	pop    eax
c0019ebd:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019ec2:	68 c5 ae 02 c0       	push   0xc002aec5
c0019ec7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecd:	e8 02 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019ed2:	5a                   	pop    edx
c0019ed3:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019ed8:	59                   	pop    ecx
c0019ed9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019edf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ee2:	50                   	push   eax
c0019ee3:	e8 12 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019ee8:	5b                   	pop    ebx
c0019ee9:	58                   	pop    eax
c0019eea:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019eef:	68 dc ae 02 c0       	push   0xc002aedc
c0019ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019efa:	e8 d5 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019eff:	5a                   	pop    edx
c0019f00:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019f05:	59                   	pop    ecx
c0019f06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f0f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f12:	50                   	push   eax
c0019f13:	e8 e2 6f ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019f18:	5b                   	pop    ebx
c0019f19:	58                   	pop    eax
c0019f1a:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019f1f:	68 dc ae 02 c0       	push   0xc002aedc
c0019f24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2a:	e8 a5 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f2f:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019f34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f37:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f3d:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f3f:	59                   	pop    ecx
c0019f40:	5b                   	pop    ebx
c0019f41:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f44:	50                   	push   eax
c0019f45:	e8 b0 6f ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	b2 fe                	mov    dl,0xfe
c0019f4f:	e4 60                	in     al,0x60
c0019f51:	3c 1c                	cmp    al,0x1c
c0019f53:	74 04                	je     c0019f59 <Krnl::panic(char const*)+0x334>
c0019f55:	3c 5a                	cmp    al,0x5a
c0019f57:	75 f6                	jne    c0019f4f <Krnl::panic(char const*)+0x32a>
c0019f59:	e4 64                	in     al,0x64
c0019f5b:	a8 02                	test   al,0x2
c0019f5d:	75 fa                	jne    c0019f59 <Krnl::panic(char const*)+0x334>
c0019f5f:	88 d0                	mov    al,dl
c0019f61:	e6 64                	out    0x64,al
c0019f63:	fa                   	cli    
c0019f64:	f4                   	hlt    
c0019f65:	eb e8                	jmp    c0019f4f <Krnl::panic(char const*)+0x32a>
c0019f67:	50                   	push   eax
c0019f68:	50                   	push   eax
c0019f69:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019f6e:	68 48 af 02 c0       	push   0xc002af48
c0019f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f79:	e8 56 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f7e:	58                   	pop    eax
c0019f7f:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019f84:	5a                   	pop    edx
c0019f85:	68 56 ae 02 c0       	push   0xc002ae56
c0019f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f90:	e8 3f 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f95:	59                   	pop    ecx
c0019f96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f9b:	5b                   	pop    ebx
c0019f9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f9f:	83 c0 0c             	add    eax,0xc
c0019fa2:	50                   	push   eax
c0019fa3:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0019fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fae:	e8 21 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	e9 a3 fd ff ff       	jmp    c0019d5e <Krnl::panic(char const*)+0x139>

c0019fbb <Net::switchEndian16(unsigned short)>:
c0019fbb:	83 ec 04             	sub    esp,0x4
c0019fbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fc2:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019fc6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019fca:	c1 f8 08             	sar    eax,0x8
c0019fcd:	89 c2                	mov    edx,eax
c0019fcf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019fd3:	c1 e0 08             	shl    eax,0x8
c0019fd6:	09 d0                	or     eax,edx
c0019fd8:	83 c4 04             	add    esp,0x4
c0019fdb:	c3                   	ret    

c0019fdc <Net::switchEndian32(unsigned int)>:
c0019fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe0:	c1 e8 18             	shr    eax,0x18
c0019fe3:	89 c2                	mov    edx,eax
c0019fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe9:	c1 e0 08             	shl    eax,0x8
c0019fec:	25 00 00 ff 00       	and    eax,0xff0000
c0019ff1:	09 c2                	or     edx,eax
c0019ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ff7:	c1 e8 08             	shr    eax,0x8
c0019ffa:	25 00 ff 00 00       	and    eax,0xff00
c0019fff:	09 c2                	or     edx,eax
c001a001:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a005:	c1 e0 18             	shl    eax,0x18
c001a008:	09 d0                	or     eax,edx
c001a00a:	c3                   	ret    

c001a00b <Net::crc32Calc(unsigned char*, int)>:
c001a00b:	83 ec 10             	sub    esp,0x10
c001a00e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a013:	75 07                	jne    c001a01c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a015:	b8 00 00 00 00       	mov    eax,0x0
c001a01a:	eb 7c                	jmp    c001a098 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a01c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a021:	7f 07                	jg     c001a02a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a023:	b8 00 00 00 00       	mov    eax,0x0
c001a028:	eb 6e                	jmp    c001a098 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a02a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a032:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a03a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a03e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a042:	7d 4e                	jge    c001a092 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a044:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a048:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a04c:	01 d0                	add    eax,edx
c001a04e:	8a 00                	mov    al,BYTE PTR [eax]
c001a050:	0f b6 c0             	movzx  eax,al
c001a053:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a057:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a05f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a064:	7f 26                	jg     c001a08c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a06a:	83 e0 01             	and    eax,0x1
c001a06d:	74 0d                	je     c001a07c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a06f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a073:	d1 e8                	shr    eax,1
c001a075:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a07a:	eb 06                	jmp    c001a082 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a080:	d1 e8                	shr    eax,1
c001a082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a086:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a08a:	eb d3                	jmp    c001a05f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a08c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a090:	eb a8                	jmp    c001a03a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a096:	f7 d0                	not    eax
c001a098:	83 c4 10             	add    esp,0x10
c001a09b:	c3                   	ret    

c001a09c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a09c:	83 ec 1c             	sub    esp,0x1c
c001a09f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a0af:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a0b4:	7f 14                	jg     c001a0ca <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a0b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a0bd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0c1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a0c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0c8:	eb e5                	jmp    c001a0af <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a0ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0ce:	8d 50 01             	lea    edx,[eax+0x1]
c001a0d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0d5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a0d8:	83 ec 04             	sub    esp,0x4
c001a0db:	6a 06                	push   0x6
c001a0dd:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a0e1:	50                   	push   eax
c001a0e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a0e6:	e8 b5 65 fe ff       	call   c00006a0 <memcpy>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a0f3:	83 ec 04             	sub    esp,0x4
c001a0f6:	6a 06                	push   0x6
c001a0f8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a0fc:	50                   	push   eax
c001a0fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a101:	e8 9a 65 fe ff       	call   c00006a0 <memcpy>
c001a106:	83 c4 10             	add    esp,0x10
c001a109:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a10e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a112:	0f b7 c0             	movzx  eax,ax
c001a115:	c1 f8 08             	sar    eax,0x8
c001a118:	89 c1                	mov    ecx,eax
c001a11a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a11e:	8d 50 01             	lea    edx,[eax+0x1]
c001a121:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a125:	88 ca                	mov    dl,cl
c001a127:	88 10                	mov    BYTE PTR [eax],dl
c001a129:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a12d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a131:	8d 48 01             	lea    ecx,[eax+0x1]
c001a134:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a138:	88 10                	mov    BYTE PTR [eax],dl
c001a13a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a142:	83 ec 04             	sub    esp,0x4
c001a145:	52                   	push   edx
c001a146:	50                   	push   eax
c001a147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a14b:	e8 50 65 fe ff       	call   c00006a0 <memcpy>
c001a150:	83 c4 10             	add    esp,0x10
c001a153:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a157:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a15b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a15f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a163:	83 ec 08             	sub    esp,0x8
c001a166:	50                   	push   eax
c001a167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a16b:	e8 9b fe ff ff       	call   c001a00b <Net::crc32Calc(unsigned char*, int)>
c001a170:	83 c4 10             	add    esp,0x10
c001a173:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a17b:	c1 e8 18             	shr    eax,0x18
c001a17e:	89 c1                	mov    ecx,eax
c001a180:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a184:	8d 50 01             	lea    edx,[eax+0x1]
c001a187:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a18b:	88 ca                	mov    dl,cl
c001a18d:	88 10                	mov    BYTE PTR [eax],dl
c001a18f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a193:	c1 e8 10             	shr    eax,0x10
c001a196:	89 c1                	mov    ecx,eax
c001a198:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a19c:	8d 50 01             	lea    edx,[eax+0x1]
c001a19f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1a3:	88 ca                	mov    dl,cl
c001a1a5:	88 10                	mov    BYTE PTR [eax],dl
c001a1a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ab:	c1 e8 08             	shr    eax,0x8
c001a1ae:	89 c1                	mov    ecx,eax
c001a1b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1b4:	8d 50 01             	lea    edx,[eax+0x1]
c001a1b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1bb:	88 ca                	mov    dl,cl
c001a1bd:	88 10                	mov    BYTE PTR [eax],dl
c001a1bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a1c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1ce:	88 10                	mov    BYTE PTR [eax],dl
c001a1d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1d4:	83 c4 1c             	add    esp,0x1c
c001a1d7:	c3                   	ret    

c001a1d8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a1d8:	83 ec 2c             	sub    esp,0x2c
c001a1db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1e3:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a1e8:	83 ec 04             	sub    esp,0x4
c001a1eb:	6a 06                	push   0x6
c001a1ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1f5:	83 c0 0e             	add    eax,0xe
c001a1f8:	50                   	push   eax
c001a1f9:	e8 a2 64 fe ff       	call   c00006a0 <memcpy>
c001a1fe:	83 c4 10             	add    esp,0x10
c001a201:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a206:	83 ec 04             	sub    esp,0x4
c001a209:	6a 06                	push   0x6
c001a20b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a20f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a213:	83 c0 08             	add    eax,0x8
c001a216:	50                   	push   eax
c001a217:	e8 84 64 fe ff       	call   c00006a0 <memcpy>
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a224:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a228:	8d 50 01             	lea    edx,[eax+0x1]
c001a22b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a22f:	8a 00                	mov    al,BYTE PTR [eax]
c001a231:	0f b6 c0             	movzx  eax,al
c001a234:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a239:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a23d:	8d 50 01             	lea    edx,[eax+0x1]
c001a240:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a244:	8a 00                	mov    al,BYTE PTR [eax]
c001a246:	0f b6 c0             	movzx  eax,al
c001a249:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a24e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a253:	c1 e0 08             	shl    eax,0x8
c001a256:	89 c2                	mov    edx,eax
c001a258:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a25c:	09 d0                	or     eax,edx
c001a25e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a262:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a266:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a26b:	75 3a                	jne    c001a2a7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a271:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a274:	66 3d dc 05          	cmp    ax,0x5dc
c001a278:	77 10                	ja     c001a28a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a27a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a27e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a281:	0f b7 c0             	movzx  eax,ax
c001a284:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a288:	eb 1d                	jmp    c001a2a7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a28a:	83 ec 0c             	sub    esp,0xc
c001a28d:	68 20 b0 02 c0       	push   0xc002b020
c001a292:	e8 5c 86 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a29e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a2a2:	e9 c0 00 00 00       	jmp    c001a367 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a2a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a2ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2af:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2b1:	83 ec 04             	sub    esp,0x4
c001a2b4:	52                   	push   edx
c001a2b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2b9:	50                   	push   eax
c001a2ba:	e8 e1 63 fe ff       	call   c00006a0 <memcpy>
c001a2bf:	83 c4 10             	add    esp,0x10
c001a2c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2c6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a2ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2ce:	8d 50 01             	lea    edx,[eax+0x1]
c001a2d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2d5:	8a 00                	mov    al,BYTE PTR [eax]
c001a2d7:	0f b6 c0             	movzx  eax,al
c001a2da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2e2:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2e9:	8a 00                	mov    al,BYTE PTR [eax]
c001a2eb:	0f b6 c0             	movzx  eax,al
c001a2ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2f6:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2fd:	8a 00                	mov    al,BYTE PTR [eax]
c001a2ff:	0f b6 c0             	movzx  eax,al
c001a302:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a30a:	8d 50 01             	lea    edx,[eax+0x1]
c001a30d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a311:	8a 00                	mov    al,BYTE PTR [eax]
c001a313:	0f b6 c0             	movzx  eax,al
c001a316:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a31e:	c1 e0 18             	shl    eax,0x18
c001a321:	89 c2                	mov    edx,eax
c001a323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a327:	c1 e0 10             	shl    eax,0x10
c001a32a:	09 c2                	or     edx,eax
c001a32c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a330:	c1 e0 08             	shl    eax,0x8
c001a333:	09 d0                	or     eax,edx
c001a335:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a339:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a33d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a341:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a345:	83 e8 04             	sub    eax,0x4
c001a348:	83 ec 08             	sub    esp,0x8
c001a34b:	50                   	push   eax
c001a34c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a350:	e8 b6 fc ff ff       	call   c001a00b <Net::crc32Calc(unsigned char*, int)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a35c:	0f 94 c2             	sete   dl
c001a35f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a363:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a366:	90                   	nop
c001a367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a36b:	83 c4 2c             	add    esp,0x2c
c001a36e:	c2 04 00             	ret    0x4

c001a371 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a371:	55                   	push   ebp
c001a372:	57                   	push   edi
c001a373:	56                   	push   esi
c001a374:	53                   	push   ebx
c001a375:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a37b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a382:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a384:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a387:	80 fb 40             	cmp    bl,0x40
c001a38a:	75 1b                	jne    c001a3a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a38c:	8a 16                	mov    dl,BYTE PTR [esi]
c001a38e:	84 d2                	test   dl,dl
c001a390:	0f 84 f1 00 00 00    	je     c001a487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a396:	8d 46 01             	lea    eax,[esi+0x1]
c001a399:	80 fa 3a             	cmp    dl,0x3a
c001a39c:	74 04                	je     c001a3a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a39e:	89 c6                	mov    esi,eax
c001a3a0:	eb ea                	jmp    c001a38c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a3a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a3a5:	89 c6                	mov    esi,eax
c001a3a7:	50                   	push   eax
c001a3a8:	6a 40                	push   0x40
c001a3aa:	6a 00                	push   0x0
c001a3ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3b0:	50                   	push   eax
c001a3b1:	e8 0e 63 fe ff       	call   c00006c4 <memset>
c001a3b6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a3bd:	31 c0                	xor    eax,eax
c001a3bf:	83 c4 10             	add    esp,0x10
c001a3c2:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a3c4:	84 c9                	test   cl,cl
c001a3c6:	0f 84 bb 00 00 00    	je     c001a487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3cc:	3d c7 00 00 00       	cmp    eax,0xc7
c001a3d1:	0f 8f b0 00 00 00    	jg     c001a487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3d7:	80 f9 0a             	cmp    cl,0xa
c001a3da:	0f 85 98 00 00 00    	jne    c001a478 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a3e0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a3e5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a3e9:	a8 df                	test   al,0xdf
c001a3eb:	0f 94 c1             	sete   cl
c001a3ee:	3c 23                	cmp    al,0x23
c001a3f0:	0f 94 c2             	sete   dl
c001a3f3:	08 d1                	or     cl,dl
c001a3f5:	75 4a                	jne    c001a441 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3f7:	8d 50 f7             	lea    edx,[eax-0x9]
c001a3fa:	80 fa 01             	cmp    dl,0x1
c001a3fd:	76 42                	jbe    c001a441 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3ff:	3c 5b                	cmp    al,0x5b
c001a401:	75 42                	jne    c001a445 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a403:	80 fb 40             	cmp    bl,0x40
c001a406:	75 39                	jne    c001a441 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a40f:	52                   	push   edx
c001a410:	e8 cc 62 fe ff       	call   c00006e1 <strlen>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	83 f8 3f             	cmp    eax,0x3f
c001a41b:	77 6a                	ja     c001a487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a41d:	50                   	push   eax
c001a41e:	50                   	push   eax
c001a41f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a423:	52                   	push   edx
c001a424:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a428:	52                   	push   edx
c001a429:	e8 35 63 fe ff       	call   c0000763 <strcpy>
c001a42e:	58                   	pop    eax
c001a42f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a433:	52                   	push   edx
c001a434:	e8 a8 62 fe ff       	call   c00006e1 <strlen>
c001a439:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a43e:	83 c4 10             	add    esp,0x10
c001a441:	31 d2                	xor    edx,edx
c001a443:	eb 3a                	jmp    c001a47f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a445:	80 fb 40             	cmp    bl,0x40
c001a448:	74 06                	je     c001a450 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a44a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a44e:	eb 20                	jmp    c001a470 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a450:	50                   	push   eax
c001a451:	50                   	push   eax
c001a452:	55                   	push   ebp
c001a453:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a457:	50                   	push   eax
c001a458:	e8 57 63 fe ff       	call   c00007b4 <strcmp>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	85 c0                	test   eax,eax
c001a462:	75 dd                	jne    c001a441 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a464:	eb e4                	jmp    c001a44a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a466:	8d 50 01             	lea    edx,[eax+0x1]
c001a469:	80 f9 3d             	cmp    cl,0x3d
c001a46c:	74 1d                	je     c001a48b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a46e:	89 d0                	mov    eax,edx
c001a470:	8a 08                	mov    cl,BYTE PTR [eax]
c001a472:	84 c9                	test   cl,cl
c001a474:	75 f0                	jne    c001a466 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a476:	eb 0f                	jmp    c001a487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a478:	8d 50 01             	lea    edx,[eax+0x1]
c001a47b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a47f:	47                   	inc    edi
c001a480:	89 d0                	mov    eax,edx
c001a482:	e9 3b ff ff ff       	jmp    c001a3c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a487:	31 c0                	xor    eax,eax
c001a489:	eb 33                	jmp    c001a4be <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a48b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a48f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a492:	50                   	push   eax
c001a493:	50                   	push   eax
c001a494:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a498:	50                   	push   eax
c001a499:	56                   	push   esi
c001a49a:	e8 15 63 fe ff       	call   c00007b4 <strcmp>
c001a49f:	83 c4 10             	add    esp,0x10
c001a4a2:	85 c0                	test   eax,eax
c001a4a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4a8:	75 97                	jne    c001a441 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a4aa:	51                   	push   ecx
c001a4ab:	51                   	push   ecx
c001a4ac:	52                   	push   edx
c001a4ad:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a4b4:	e8 aa 62 fe ff       	call   c0000763 <strcpy>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	b0 01                	mov    al,0x1
c001a4be:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a4c4:	5b                   	pop    ebx
c001a4c5:	5e                   	pop    esi
c001a4c6:	5f                   	pop    edi
c001a4c7:	5d                   	pop    ebp
c001a4c8:	c3                   	ret    

c001a4c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a4c9:	57                   	push   edi
c001a4ca:	56                   	push   esi
c001a4cb:	53                   	push   ebx
c001a4cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a4d2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a4d9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a4e0:	53                   	push   ebx
c001a4e1:	e8 fb 61 fe ff       	call   c00006e1 <strlen>
c001a4e6:	89 34 24             	mov    DWORD PTR [esp],esi
c001a4e9:	89 c7                	mov    edi,eax
c001a4eb:	e8 f1 61 fe ff       	call   c00006e1 <strlen>
c001a4f0:	83 c4 10             	add    esp,0x10
c001a4f3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a4f7:	3d ff 00 00 00       	cmp    eax,0xff
c001a4fc:	0f 87 d3 00 00 00    	ja     c001a5d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a502:	57                   	push   edi
c001a503:	57                   	push   edi
c001a504:	56                   	push   esi
c001a505:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a509:	56                   	push   esi
c001a50a:	e8 54 62 fe ff       	call   c0000763 <strcpy>
c001a50f:	58                   	pop    eax
c001a510:	5a                   	pop    edx
c001a511:	68 54 b4 02 c0       	push   0xc002b454
c001a516:	56                   	push   esi
c001a517:	e8 fe 62 fe ff       	call   c000081a <strcat>
c001a51c:	59                   	pop    ecx
c001a51d:	5f                   	pop    edi
c001a51e:	53                   	push   ebx
c001a51f:	56                   	push   esi
c001a520:	e8 f5 62 fe ff       	call   c000081a <strcat>
c001a525:	58                   	pop    eax
c001a526:	5a                   	pop    edx
c001a527:	68 6c b0 02 c0       	push   0xc002b06c
c001a52c:	56                   	push   esi
c001a52d:	e8 e8 62 fe ff       	call   c000081a <strcat>
c001a532:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a539:	e8 e6 50 ff ff       	call   c000f624 <malloc>
c001a53e:	83 c4 0c             	add    esp,0xc
c001a541:	89 c3                	mov    ebx,eax
c001a543:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c001a549:	56                   	push   esi
c001a54a:	50                   	push   eax
c001a54b:	e8 fc 88 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001a550:	83 c4 10             	add    esp,0x10
c001a553:	85 db                	test   ebx,ebx
c001a555:	74 7e                	je     c001a5d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a557:	51                   	push   ecx
c001a558:	51                   	push   ecx
c001a559:	6a 01                	push   0x1
c001a55b:	53                   	push   ebx
c001a55c:	e8 4f 89 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	85 c0                	test   eax,eax
c001a566:	74 08                	je     c001a570 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a56d:	53                   	push   ebx
c001a56e:	eb 5f                	jmp    c001a5cf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a570:	52                   	push   edx
c001a571:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a575:	50                   	push   eax
c001a576:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a57a:	50                   	push   eax
c001a57b:	53                   	push   ebx
c001a57c:	e8 db 8b ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001a581:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	89 c1                	mov    ecx,eax
c001a58a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a58e:	74 31                	je     c001a5c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a590:	83 ec 0c             	sub    esp,0xc
c001a593:	50                   	push   eax
c001a594:	e8 8b 50 ff ff       	call   c000f624 <malloc>
c001a599:	89 c6                	mov    esi,eax
c001a59b:	58                   	pop    eax
c001a59c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a59e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a5a2:	52                   	push   edx
c001a5a3:	56                   	push   esi
c001a5a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5ac:	53                   	push   ebx
c001a5ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5b0:	83 c4 20             	add    esp,0x20
c001a5b3:	85 c0                	test   eax,eax
c001a5b5:	75 0a                	jne    c001a5c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a5b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5bb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a5bf:	74 18                	je     c001a5d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a5c1:	83 ec 0c             	sub    esp,0xc
c001a5c4:	53                   	push   ebx
c001a5c5:	e8 44 89 ff ff       	call   c0012f0e <File::close()>
c001a5ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	31 c0                	xor    eax,eax
c001a5d7:	eb 3b                	jmp    c001a614 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a5d9:	83 ec 0c             	sub    esp,0xc
c001a5dc:	53                   	push   ebx
c001a5dd:	e8 2c 89 ff ff       	call   c0012f0e <File::close()>
c001a5e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5ea:	83 c4 0c             	add    esp,0xc
c001a5ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a5f4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a5fb:	56                   	push   esi
c001a5fc:	e8 70 fd ff ff       	call   c001a371 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a601:	89 34 24             	mov    DWORD PTR [esp],esi
c001a604:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a608:	e8 27 50 ff ff       	call   c000f634 <free>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a614:	81 c4 20 01 00 00    	add    esp,0x120
c001a61a:	5b                   	pop    ebx
c001a61b:	5e                   	pop    esi
c001a61c:	5f                   	pop    edi
c001a61d:	c3                   	ret    

c001a61e <Reg::getLine(char*, char*, char*)>:
c001a61e:	57                   	push   edi
c001a61f:	56                   	push   esi
c001a620:	53                   	push   ebx
c001a621:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a625:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a629:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a62d:	57                   	push   edi
c001a62e:	56                   	push   esi
c001a62f:	53                   	push   ebx
c001a630:	68 71 b0 02 c0       	push   0xc002b071
c001a635:	e8 8f fe ff ff       	call   c001a4c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a63a:	83 c4 10             	add    esp,0x10
c001a63d:	84 c0                	test   al,al
c001a63f:	75 10                	jne    c001a651 <Reg::getLine(char*, char*, char*)+0x33>
c001a641:	57                   	push   edi
c001a642:	56                   	push   esi
c001a643:	53                   	push   ebx
c001a644:	68 96 b0 02 c0       	push   0xc002b096
c001a649:	e8 7b fe ff ff       	call   c001a4c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a64e:	83 c4 10             	add    esp,0x10
c001a651:	5b                   	pop    ebx
c001a652:	5e                   	pop    esi
c001a653:	5f                   	pop    edi
c001a654:	c3                   	ret    

c001a655 <Reg::readInt(char*, char*, int*)>:
c001a655:	55                   	push   ebp
c001a656:	57                   	push   edi
c001a657:	56                   	push   esi
c001a658:	53                   	push   ebx
c001a659:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a65f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a663:	57                   	push   edi
c001a664:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a66b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a672:	e8 a7 ff ff ff       	call   c001a61e <Reg::getLine(char*, char*, char*)>
c001a677:	83 c4 10             	add    esp,0x10
c001a67a:	84 c0                	test   al,al
c001a67c:	0f 84 b3 00 00 00    	je     c001a735 <Reg::readInt(char*, char*, int*)+0xe0>
c001a682:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a686:	80 fa 2b             	cmp    dl,0x2b
c001a689:	74 0c                	je     c001a697 <Reg::readInt(char*, char*, int*)+0x42>
c001a68b:	80 fa 2d             	cmp    dl,0x2d
c001a68e:	75 0e                	jne    c001a69e <Reg::readInt(char*, char*, int*)+0x49>
c001a690:	ba 01 00 00 00       	mov    edx,0x1
c001a695:	eb 0b                	jmp    c001a6a2 <Reg::readInt(char*, char*, int*)+0x4d>
c001a697:	ba 01 00 00 00       	mov    edx,0x1
c001a69c:	eb 02                	jmp    c001a6a0 <Reg::readInt(char*, char*, int*)+0x4b>
c001a69e:	31 d2                	xor    edx,edx
c001a6a0:	31 c0                	xor    eax,eax
c001a6a2:	be 0a 00 00 00       	mov    esi,0xa
c001a6a7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a6ac:	75 20                	jne    c001a6ce <Reg::readInt(char*, char*, int*)+0x79>
c001a6ae:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a6b2:	80 f9 78             	cmp    cl,0x78
c001a6b5:	75 0a                	jne    c001a6c1 <Reg::readInt(char*, char*, int*)+0x6c>
c001a6b7:	83 c2 02             	add    edx,0x2
c001a6ba:	be 10 00 00 00       	mov    esi,0x10
c001a6bf:	eb 0d                	jmp    c001a6ce <Reg::readInt(char*, char*, int*)+0x79>
c001a6c1:	80 f9 62             	cmp    cl,0x62
c001a6c4:	75 08                	jne    c001a6ce <Reg::readInt(char*, char*, int*)+0x79>
c001a6c6:	83 c2 02             	add    edx,0x2
c001a6c9:	be 02 00 00 00       	mov    esi,0x2
c001a6ce:	01 d7                	add    edi,edx
c001a6d0:	31 d2                	xor    edx,edx
c001a6d2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a6d4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a6d8:	80 fb 0d             	cmp    bl,0xd
c001a6db:	0f 94 c3             	sete   bl
c001a6de:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a6e3:	0f 94 c1             	sete   cl
c001a6e6:	08 cb                	or     bl,cl
c001a6e8:	75 3a                	jne    c001a724 <Reg::readInt(char*, char*, int*)+0xcf>
c001a6ea:	0f af d6             	imul   edx,esi
c001a6ed:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a6f2:	83 fe 10             	cmp    esi,0x10
c001a6f5:	75 26                	jne    c001a71d <Reg::readInt(char*, char*, int*)+0xc8>
c001a6f7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a6fb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a6fe:	89 e9                	mov    ecx,ebp
c001a700:	80 f9 05             	cmp    cl,0x5
c001a703:	77 06                	ja     c001a70b <Reg::readInt(char*, char*, int*)+0xb6>
c001a705:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a709:	eb 16                	jmp    c001a721 <Reg::readInt(char*, char*, int*)+0xcc>
c001a70b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a70f:	83 e9 61             	sub    ecx,0x61
c001a712:	80 f9 05             	cmp    cl,0x5
c001a715:	77 06                	ja     c001a71d <Reg::readInt(char*, char*, int*)+0xc8>
c001a717:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a71b:	eb 04                	jmp    c001a721 <Reg::readInt(char*, char*, int*)+0xcc>
c001a71d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a721:	47                   	inc    edi
c001a722:	eb ae                	jmp    c001a6d2 <Reg::readInt(char*, char*, int*)+0x7d>
c001a724:	84 c0                	test   al,al
c001a726:	74 02                	je     c001a72a <Reg::readInt(char*, char*, int*)+0xd5>
c001a728:	f7 da                	neg    edx
c001a72a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a731:	89 10                	mov    DWORD PTR [eax],edx
c001a733:	88 d8                	mov    al,bl
c001a735:	81 c4 ec 00 00 00    	add    esp,0xec
c001a73b:	5b                   	pop    ebx
c001a73c:	5e                   	pop    esi
c001a73d:	5f                   	pop    edi
c001a73e:	5d                   	pop    ebp
c001a73f:	c3                   	ret    

c001a740 <Reg::readString(char*, char*, char*, int)>:
c001a740:	57                   	push   edi
c001a741:	56                   	push   esi
c001a742:	53                   	push   ebx
c001a743:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a749:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a750:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a754:	57                   	push   edi
c001a755:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a75c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a763:	e8 b6 fe ff ff       	call   c001a61e <Reg::getLine(char*, char*, char*)>
c001a768:	83 c4 10             	add    esp,0x10
c001a76b:	89 c6                	mov    esi,eax
c001a76d:	84 c0                	test   al,al
c001a76f:	74 44                	je     c001a7b5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a771:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a778:	31 c0                	xor    eax,eax
c001a77a:	4a                   	dec    edx
c001a77b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a77e:	84 c9                	test   cl,cl
c001a780:	74 0f                	je     c001a791 <Reg::readString(char*, char*, char*, int)+0x51>
c001a782:	39 c2                	cmp    edx,eax
c001a784:	7e 0b                	jle    c001a791 <Reg::readString(char*, char*, char*, int)+0x51>
c001a786:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a789:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a78e:	40                   	inc    eax
c001a78f:	eb ea                	jmp    c001a77b <Reg::readString(char*, char*, char*, int)+0x3b>
c001a791:	83 ec 0c             	sub    esp,0xc
c001a794:	53                   	push   ebx
c001a795:	e8 47 5f fe ff       	call   c00006e1 <strlen>
c001a79a:	83 c4 10             	add    esp,0x10
c001a79d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a7a2:	75 11                	jne    c001a7b5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a7a4:	83 ec 0c             	sub    esp,0xc
c001a7a7:	53                   	push   ebx
c001a7a8:	e8 34 5f fe ff       	call   c00006e1 <strlen>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a7b5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a7bb:	89 f0                	mov    eax,esi
c001a7bd:	5b                   	pop    ebx
c001a7be:	5e                   	pop    esi
c001a7bf:	5f                   	pop    edi
c001a7c0:	c3                   	ret    

c001a7c1 <Reg::readBool(char*, char*, bool*)>:
c001a7c1:	83 ec 20             	sub    esp,0x20
c001a7c4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7c8:	50                   	push   eax
c001a7c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7d1:	e8 7f fe ff ff       	call   c001a655 <Reg::readInt(char*, char*, int*)>
c001a7d6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a7db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a7df:	0f 95 02             	setne  BYTE PTR [edx]
c001a7e2:	83 c4 2c             	add    esp,0x2c
c001a7e5:	c3                   	ret    

c001a7e6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a7e6:	53                   	push   ebx
c001a7e7:	83 ec 1c             	sub    esp,0x1c
c001a7ea:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a7ee:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a7f2:	50                   	push   eax
c001a7f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7fb:	e8 c1 ff ff ff       	call   c001a7c1 <Reg::readBool(char*, char*, bool*)>
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	84 c0                	test   al,al
c001a805:	74 04                	je     c001a80b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a807:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a80b:	88 d8                	mov    al,bl
c001a80d:	83 c4 18             	add    esp,0x18
c001a810:	5b                   	pop    ebx
c001a811:	c3                   	ret    

c001a812 <Reg::readIntWithDefault(char*, char*, int)>:
c001a812:	53                   	push   ebx
c001a813:	83 ec 1c             	sub    esp,0x1c
c001a816:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a81a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a81e:	50                   	push   eax
c001a81f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a827:	e8 29 fe ff ff       	call   c001a655 <Reg::readInt(char*, char*, int*)>
c001a82c:	83 c4 10             	add    esp,0x10
c001a82f:	84 c0                	test   al,al
c001a831:	74 04                	je     c001a837 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a833:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a837:	89 d8                	mov    eax,ebx
c001a839:	83 c4 18             	add    esp,0x18
c001a83c:	5b                   	pop    ebx
c001a83d:	c3                   	ret    

c001a83e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a83e:	57                   	push   edi
c001a83f:	56                   	push   esi
c001a840:	53                   	push   ebx
c001a841:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a845:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a849:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a84d:	56                   	push   esi
c001a84e:	53                   	push   ebx
c001a84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a857:	e8 e4 fe ff ff       	call   c001a740 <Reg::readString(char*, char*, char*, int)>
c001a85c:	83 c4 10             	add    esp,0x10
c001a85f:	84 c0                	test   al,al
c001a861:	75 1b                	jne    c001a87e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a863:	50                   	push   eax
c001a864:	56                   	push   esi
c001a865:	4e                   	dec    esi
c001a866:	6a 00                	push   0x0
c001a868:	53                   	push   ebx
c001a869:	e8 56 5e fe ff       	call   c00006c4 <memset>
c001a86e:	83 c4 0c             	add    esp,0xc
c001a871:	56                   	push   esi
c001a872:	57                   	push   edi
c001a873:	53                   	push   ebx
c001a874:	89 fb                	mov    ebx,edi
c001a876:	e8 25 5e fe ff       	call   c00006a0 <memcpy>
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	89 d8                	mov    eax,ebx
c001a880:	5b                   	pop    ebx
c001a881:	5e                   	pop    esi
c001a882:	5f                   	pop    edi
c001a883:	c3                   	ret    

c001a884 <Sys::exit(regs*)>:
c001a884:	83 ec 18             	sub    esp,0x18
c001a887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a88b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a88e:	e8 e6 33 00 00       	call   c001dc79 <terminateTask(int)>
c001a893:	83 c8 ff             	or     eax,0xffffffff
c001a896:	83 c4 1c             	add    esp,0x1c
c001a899:	89 c2                	mov    edx,eax
c001a89b:	c3                   	ret    

c001a89c <Sys::getCwd(regs*)>:
c001a89c:	83 ec 10             	sub    esp,0x10
c001a89f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8a3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a8a6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a8b1:	e8 98 83 ff ff       	call   c0012c4e <Fs::getcwd(Process*, char*, int)>
c001a8b6:	83 c4 1c             	add    esp,0x1c
c001a8b9:	99                   	cdq    
c001a8ba:	c3                   	ret    

c001a8bb <Sys::getPID(regs*)>:
c001a8bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8c5:	99                   	cdq    
c001a8c6:	c3                   	ret    

c001a8c7 <Sys::loadDLL(regs*)>:
c001a8c7:	56                   	push   esi
c001a8c8:	53                   	push   ebx
c001a8c9:	31 d2                	xor    edx,edx
c001a8cb:	51                   	push   ecx
c001a8cc:	b8 01 00 00 00       	mov    eax,0x1
c001a8d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8d5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a8d9:	0f 84 8c 00 00 00    	je     c001a96b <Sys::loadDLL(regs*)+0xa4>
c001a8df:	83 ec 0c             	sub    esp,0xc
c001a8e2:	68 14 01 00 00       	push   0x114
c001a8e7:	e8 38 4d ff ff       	call   c000f624 <malloc>
c001a8ec:	83 c4 0c             	add    esp,0xc
c001a8ef:	89 c3                	mov    ebx,eax
c001a8f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a8f9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a8fc:	53                   	push   ebx
c001a8fd:	e8 4a 85 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	31 d2                	xor    edx,edx
c001a907:	b8 02 00 00 00       	mov    eax,0x2
c001a90c:	85 db                	test   ebx,ebx
c001a90e:	74 5b                	je     c001a96b <Sys::loadDLL(regs*)+0xa4>
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	53                   	push   ebx
c001a914:	e8 05 88 ff ff       	call   c001311e <File::exists()>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	84 c0                	test   al,al
c001a91e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a920:	75 11                	jne    c001a933 <Sys::loadDLL(regs*)+0x6c>
c001a922:	83 ec 0c             	sub    esp,0xc
c001a925:	53                   	push   ebx
c001a926:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	b8 03 00 00 00       	mov    eax,0x3
c001a931:	eb 36                	jmp    c001a969 <Sys::loadDLL(regs*)+0xa2>
c001a933:	83 ec 0c             	sub    esp,0xc
c001a936:	53                   	push   ebx
c001a937:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a93a:	58                   	pop    eax
c001a93b:	5a                   	pop    edx
c001a93c:	6a 00                	push   0x0
c001a93e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a941:	e8 7d 22 00 00       	call   c001cbc3 <Thr::loadDLL(char const*, bool)>
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	89 c1                	mov    ecx,eax
c001a94b:	31 d2                	xor    edx,edx
c001a94d:	b8 04 00 00 00       	mov    eax,0x4
c001a952:	85 c9                	test   ecx,ecx
c001a954:	74 15                	je     c001a96b <Sys::loadDLL(regs*)+0xa4>
c001a956:	53                   	push   ebx
c001a957:	53                   	push   ebx
c001a958:	ff 35 a8 d6 02 c0    	push   DWORD PTR ds:0xc002d6a8
c001a95e:	51                   	push   ecx
c001a95f:	e8 6e 24 00 00       	call   c001cdd2 <Thr::executeDLL(unsigned long, void*)>
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	31 c0                	xor    eax,eax
c001a969:	31 d2                	xor    edx,edx
c001a96b:	59                   	pop    ecx
c001a96c:	5b                   	pop    ebx
c001a96d:	5e                   	pop    esi
c001a96e:	c3                   	ret    

c001a96f <Sys::read(regs*)>:
c001a96f:	57                   	push   edi
c001a970:	56                   	push   esi
c001a971:	53                   	push   ebx
c001a972:	83 ec 10             	sub    esp,0x10
c001a975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a979:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a97c:	83 f8 02             	cmp    eax,0x2
c001a97f:	77 10                	ja     c001a991 <Sys::read(regs*)+0x22>
c001a981:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a986:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a989:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a98f:	eb 0e                	jmp    c001a99f <Sys::read(regs*)+0x30>
c001a991:	83 ec 0c             	sub    esp,0xc
c001a994:	50                   	push   eax
c001a995:	e8 13 6e ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	89 c1                	mov    ecx,eax
c001a99f:	83 c8 ff             	or     eax,0xffffffff
c001a9a2:	85 c9                	test   ecx,ecx
c001a9a4:	89 c2                	mov    edx,eax
c001a9a6:	74 28                	je     c001a9d0 <Sys::read(regs*)+0x61>
c001a9a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9b0:	31 ff                	xor    edi,edi
c001a9b2:	83 ec 0c             	sub    esp,0xc
c001a9b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a9bb:	52                   	push   edx
c001a9bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a9bf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a9c2:	57                   	push   edi
c001a9c3:	56                   	push   esi
c001a9c4:	51                   	push   ecx
c001a9c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a9cc:	83 c4 20             	add    esp,0x20
c001a9cf:	99                   	cdq    
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	5b                   	pop    ebx
c001a9d4:	5e                   	pop    esi
c001a9d5:	5f                   	pop    edi
c001a9d6:	c3                   	ret    

c001a9d7 <Sys::sbrk(regs*)>:
c001a9d7:	56                   	push   esi
c001a9d8:	53                   	push   ebx
c001a9d9:	50                   	push   eax
c001a9da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9e6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a9e9:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a9ef:	85 db                	test   ebx,ebx
c001a9f1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a9f4:	74 02                	je     c001a9f8 <Sys::sbrk(regs*)+0x21>
c001a9f6:	79 06                	jns    c001a9fe <Sys::sbrk(regs*)+0x27>
c001a9f8:	89 f0                	mov    eax,esi
c001a9fa:	31 d2                	xor    edx,edx
c001a9fc:	eb 2a                	jmp    c001aa28 <Sys::sbrk(regs*)+0x51>
c001a9fe:	83 c8 ff             	or     eax,0xffffffff
c001aa01:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aa07:	89 c2                	mov    edx,eax
c001aa09:	77 1d                	ja     c001aa28 <Sys::sbrk(regs*)+0x51>
c001aa0b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aa11:	50                   	push   eax
c001aa12:	c1 ea 0c             	shr    edx,0xc
c001aa15:	68 07 04 00 00       	push   0x407
c001aa1a:	52                   	push   edx
c001aa1b:	51                   	push   ecx
c001aa1c:	e8 ad 76 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001aa21:	89 f0                	mov    eax,esi
c001aa23:	31 d2                	xor    edx,edx
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	59                   	pop    ecx
c001aa29:	5b                   	pop    ebx
c001aa2a:	5e                   	pop    esi
c001aa2b:	c3                   	ret    

c001aa2c <Sys::setCwd(regs*)>:
c001aa2c:	83 ec 14             	sub    esp,0x14
c001aa2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa33:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aa36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa3b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa3e:	e8 7a 87 ff ff       	call   c00131bd <Fs::setcwd(Process*, char*)>
c001aa43:	83 c4 1c             	add    esp,0x1c
c001aa46:	99                   	cdq    
c001aa47:	c3                   	ret    

c001aa48 <Sys::setTime(regs*)>:
c001aa48:	55                   	push   ebp
c001aa49:	31 d2                	xor    edx,edx
c001aa4b:	57                   	push   edi
c001aa4c:	bf 18 00 00 00       	mov    edi,0x18
c001aa51:	56                   	push   esi
c001aa52:	53                   	push   ebx
c001aa53:	bb 3c 00 00 00       	mov    ebx,0x3c
c001aa58:	83 ec 30             	sub    esp,0x30
c001aa5b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001aa5f:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001aa62:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aa65:	f7 f3                	div    ebx
c001aa67:	89 d6                	mov    esi,edx
c001aa69:	31 d2                	xor    edx,edx
c001aa6b:	f7 f3                	div    ebx
c001aa6d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aa70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa74:	bb 10 0e 00 00       	mov    ebx,0xe10
c001aa79:	31 d2                	xor    edx,edx
c001aa7b:	f7 f3                	div    ebx
c001aa7d:	31 d2                	xor    edx,edx
c001aa7f:	bb 0c 00 00 00       	mov    ebx,0xc
c001aa84:	f7 f7                	div    edi
c001aa86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001aa89:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aa8d:	0f b7 cd             	movzx  ecx,bp
c001aa90:	56                   	push   esi
c001aa91:	89 c7                	mov    edi,eax
c001aa93:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001aa97:	c1 e6 10             	shl    esi,0x10
c001aa9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa9e:	83 e7 1f             	and    edi,0x1f
c001aaa1:	51                   	push   ecx
c001aaa2:	47                   	inc    edi
c001aaa3:	c1 e8 05             	shr    eax,0x5
c001aaa6:	31 d2                	xor    edx,edx
c001aaa8:	f7 f3                	div    ebx
c001aaaa:	31 db                	xor    ebx,ebx
c001aaac:	52                   	push   edx
c001aaad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aab1:	57                   	push   edi
c001aab2:	68 b1 b0 02 c0       	push   0xc002b0b1
c001aab7:	e8 37 7e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001aabc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aac0:	89 f8                	mov    eax,edi
c001aac2:	31 c9                	xor    ecx,ecx
c001aac4:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001aac8:	88 c1                	mov    cl,al
c001aaca:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001aad0:	88 d5                	mov    ch,dl
c001aad2:	c1 e0 10             	shl    eax,0x10
c001aad5:	0f b7 d1             	movzx  edx,cx
c001aad8:	09 c2                	or     edx,eax
c001aada:	89 d8                	mov    eax,ebx
c001aadc:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001aae1:	09 f0                	or     eax,esi
c001aae3:	89 c3                	mov    ebx,eax
c001aae5:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001aae9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aaed:	83 c4 18             	add    esp,0x18
c001aaf0:	53                   	push   ebx
c001aaf1:	52                   	push   edx
c001aaf2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aaf6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aafa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aafe:	e8 d4 8d ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c001ab03:	83 c4 0c             	add    esp,0xc
c001ab06:	52                   	push   edx
c001ab07:	50                   	push   eax
c001ab08:	56                   	push   esi
c001ab09:	e8 50 8f ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c001ab0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab16:	51                   	push   ecx
c001ab17:	89 d6                	mov    esi,edx
c001ab19:	51                   	push   ecx
c001ab1a:	c1 ee 10             	shr    esi,0x10
c001ab1d:	89 f3                	mov    ebx,esi
c001ab1f:	0f b6 f3             	movzx  esi,bl
c001ab22:	56                   	push   esi
c001ab23:	0f b6 f6             	movzx  esi,dh
c001ab26:	0f b6 d2             	movzx  edx,dl
c001ab29:	56                   	push   esi
c001ab2a:	52                   	push   edx
c001ab2b:	89 c2                	mov    edx,eax
c001ab2d:	c1 ea 10             	shr    edx,0x10
c001ab30:	52                   	push   edx
c001ab31:	0f b6 d4             	movzx  edx,ah
c001ab34:	0f b6 c0             	movzx  eax,al
c001ab37:	52                   	push   edx
c001ab38:	50                   	push   eax
c001ab39:	68 cd b0 02 c0       	push   0xc002b0cd
c001ab3e:	e8 b0 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ab43:	83 c4 2c             	add    esp,0x2c
c001ab46:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001ab4b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ab4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ab53:	53                   	push   ebx
c001ab54:	51                   	push   ecx
c001ab55:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ab5b:	e8 9e 8e ff ff       	call   c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ab60:	83 f0 01             	xor    eax,0x1
c001ab63:	31 d2                	xor    edx,edx
c001ab65:	0f b6 c0             	movzx  eax,al
c001ab68:	83 c4 3c             	add    esp,0x3c
c001ab6b:	5b                   	pop    ebx
c001ab6c:	5e                   	pop    esi
c001ab6d:	5f                   	pop    edi
c001ab6e:	5d                   	pop    ebp
c001ab6f:	c3                   	ret    

c001ab70 <Sys::timezone(regs*)>:
c001ab70:	53                   	push   ebx
c001ab71:	83 ec 08             	sub    esp,0x8
c001ab74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab78:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ab7c:	75 17                	jne    c001ab95 <Sys::timezone(regs*)+0x25>
c001ab7e:	83 ec 0c             	sub    esp,0xc
c001ab81:	68 e9 b0 02 c0       	push   0xc002b0e9
c001ab86:	e8 68 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ab8b:	83 c8 ff             	or     eax,0xffffffff
c001ab8e:	83 c4 10             	add    esp,0x10
c001ab91:	89 c2                	mov    edx,eax
c001ab93:	eb 20                	jmp    c001abb5 <Sys::timezone(regs*)+0x45>
c001ab95:	83 ec 0c             	sub    esp,0xc
c001ab98:	68 21 b1 02 c0       	push   0xc002b121
c001ab9d:	e8 51 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001aba2:	58                   	pop    eax
c001aba3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aba6:	e8 b5 8b ff ff       	call   c0013760 <User::loadClockSettings(int)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	b8 01 00 00 00       	mov    eax,0x1
c001abb3:	31 d2                	xor    edx,edx
c001abb5:	83 c4 08             	add    esp,0x8
c001abb8:	5b                   	pop    ebx
c001abb9:	c3                   	ret    

c001abba <Sys::write(regs*)>:
c001abba:	57                   	push   edi
c001abbb:	56                   	push   esi
c001abbc:	53                   	push   ebx
c001abbd:	83 ec 10             	sub    esp,0x10
c001abc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abc7:	83 f8 02             	cmp    eax,0x2
c001abca:	77 10                	ja     c001abdc <Sys::write(regs*)+0x22>
c001abcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abd1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abd4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001abda:	eb 0e                	jmp    c001abea <Sys::write(regs*)+0x30>
c001abdc:	83 ec 0c             	sub    esp,0xc
c001abdf:	50                   	push   eax
c001abe0:	e8 c8 6b ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	89 c1                	mov    ecx,eax
c001abea:	83 c8 ff             	or     eax,0xffffffff
c001abed:	85 c9                	test   ecx,ecx
c001abef:	89 c2                	mov    edx,eax
c001abf1:	74 28                	je     c001ac1b <Sys::write(regs*)+0x61>
c001abf3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abfb:	31 ff                	xor    edi,edi
c001abfd:	83 ec 0c             	sub    esp,0xc
c001ac00:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac02:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac06:	52                   	push   edx
c001ac07:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac0a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac0d:	57                   	push   edi
c001ac0e:	56                   	push   esi
c001ac0f:	51                   	push   ecx
c001ac10:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ac13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac17:	83 c4 20             	add    esp,0x20
c001ac1a:	99                   	cdq    
c001ac1b:	83 c4 10             	add    esp,0x10
c001ac1e:	5b                   	pop    ebx
c001ac1f:	5e                   	pop    esi
c001ac20:	5f                   	pop    edi
c001ac21:	c3                   	ret    

c001ac22 <Sys::yield(regs*)>:
c001ac22:	57                   	push   edi
c001ac23:	56                   	push   esi
c001ac24:	53                   	push   ebx
c001ac25:	e8 0c 26 00 00       	call   c001d236 <lockScheduler()>
c001ac2a:	e8 43 29 00 00       	call   c001d572 <schedule()>
c001ac2f:	e8 04 26 00 00       	call   c001d238 <unlockScheduler()>
c001ac34:	8b 35 30 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd30
c001ac3a:	8b 3d 34 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd34
c001ac40:	89 f0                	mov    eax,esi
c001ac42:	89 fb                	mov    ebx,edi
c001ac44:	89 f1                	mov    ecx,esi
c001ac46:	c1 e0 07             	shl    eax,0x7
c001ac49:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ac4d:	25 80 30 0f 00       	and    eax,0xf3080
c001ac52:	c1 eb 17             	shr    ebx,0x17
c001ac55:	31 c8                	xor    eax,ecx
c001ac57:	89 da                	mov    edx,ebx
c001ac59:	5b                   	pop    ebx
c001ac5a:	5e                   	pop    esi
c001ac5b:	5f                   	pop    edi
c001ac5c:	c3                   	ret    

c001ac5d <sysCallSeekDir(regs*)>:
c001ac5d:	31 c0                	xor    eax,eax
c001ac5f:	31 d2                	xor    edx,edx
c001ac61:	c3                   	ret    

c001ac62 <sysCallTellDir(regs*)>:
c001ac62:	31 c0                	xor    eax,eax
c001ac64:	31 d2                	xor    edx,edx
c001ac66:	c3                   	ret    

c001ac67 <sysCallVerify(regs*)>:
c001ac67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6b:	31 d2                	xor    edx,edx
c001ac6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac70:	c3                   	ret    

c001ac71 <sysCallGetArgc(regs*)>:
c001ac71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac79:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001ac7f:	99                   	cdq    
c001ac80:	c3                   	ret    

c001ac81 <sysFormatDisk(regs*)>:
c001ac81:	56                   	push   esi
c001ac82:	53                   	push   ebx
c001ac83:	53                   	push   ebx
c001ac84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac88:	8b 1d 28 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d828
c001ac8e:	eb 25                	jmp    c001acb5 <sysFormatDisk(regs*)+0x34>
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ac96:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ac98:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ac9b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ac9e:	50                   	push   eax
c001ac9f:	ff 34 85 c0 dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd2340]
c001aca6:	53                   	push   ebx
c001aca7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001acaa:	83 c4 20             	add    esp,0x20
c001acad:	83 f8 08             	cmp    eax,0x8
c001acb0:	75 12                	jne    c001acc4 <sysFormatDisk(regs*)+0x43>
c001acb2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001acb5:	85 db                	test   ebx,ebx
c001acb7:	75 d7                	jne    c001ac90 <sysFormatDisk(regs*)+0xf>
c001acb9:	59                   	pop    ecx
c001acba:	b8 03 00 00 00       	mov    eax,0x3
c001acbf:	31 d2                	xor    edx,edx
c001acc1:	5b                   	pop    ebx
c001acc2:	5e                   	pop    esi
c001acc3:	c3                   	ret    
c001acc4:	85 c0                	test   eax,eax
c001acc6:	74 1b                	je     c001ace3 <sysFormatDisk(regs*)+0x62>
c001acc8:	83 f8 09             	cmp    eax,0x9
c001accb:	74 0b                	je     c001acd8 <sysFormatDisk(regs*)+0x57>
c001accd:	59                   	pop    ecx
c001acce:	b8 02 00 00 00       	mov    eax,0x2
c001acd3:	31 d2                	xor    edx,edx
c001acd5:	5b                   	pop    ebx
c001acd6:	5e                   	pop    esi
c001acd7:	c3                   	ret    
c001acd8:	59                   	pop    ecx
c001acd9:	b8 01 00 00 00       	mov    eax,0x1
c001acde:	31 d2                	xor    edx,edx
c001ace0:	5b                   	pop    ebx
c001ace1:	5e                   	pop    esi
c001ace2:	c3                   	ret    
c001ace3:	59                   	pop    ecx
c001ace4:	31 c0                	xor    eax,eax
c001ace6:	31 d2                	xor    edx,edx
c001ace8:	5b                   	pop    ebx
c001ace9:	5e                   	pop    esi
c001acea:	c3                   	ret    

c001aceb <sysSetDiskVolumeLabel(regs*)>:
c001aceb:	56                   	push   esi
c001acec:	53                   	push   ebx
c001aced:	53                   	push   ebx
c001acee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acf2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001acf5:	83 f8 19             	cmp    eax,0x19
c001acf8:	77 29                	ja     c001ad23 <sysSetDiskVolumeLabel(regs*)+0x38>
c001acfa:	8b 0c 85 c0 dc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2340]
c001ad01:	85 c9                	test   ecx,ecx
c001ad03:	74 1e                	je     c001ad23 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ad05:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ad08:	85 d2                	test   edx,edx
c001ad0a:	74 17                	je     c001ad23 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ad0c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ad12:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ad14:	52                   	push   edx
c001ad15:	50                   	push   eax
c001ad16:	51                   	push   ecx
c001ad17:	53                   	push   ebx
c001ad18:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	99                   	cdq    
c001ad1f:	59                   	pop    ecx
c001ad20:	5b                   	pop    ebx
c001ad21:	5e                   	pop    esi
c001ad22:	c3                   	ret    
c001ad23:	59                   	pop    ecx
c001ad24:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad2e:	5b                   	pop    ebx
c001ad2f:	5e                   	pop    esi
c001ad30:	c3                   	ret    

c001ad31 <sysGetDiskVolumeLabel(regs*)>:
c001ad31:	57                   	push   edi
c001ad32:	56                   	push   esi
c001ad33:	53                   	push   ebx
c001ad34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad38:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ad3b:	83 fa 19             	cmp    edx,0x19
c001ad3e:	77 34                	ja     c001ad74 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad40:	8b 0c 95 c0 dc 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2340]
c001ad47:	85 c9                	test   ecx,ecx
c001ad49:	74 29                	je     c001ad74 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad4b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ad4e:	85 db                	test   ebx,ebx
c001ad50:	74 22                	je     c001ad74 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad52:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ad55:	85 c0                	test   eax,eax
c001ad57:	74 1b                	je     c001ad74 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad59:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ad5f:	83 ec 0c             	sub    esp,0xc
c001ad62:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ad64:	50                   	push   eax
c001ad65:	53                   	push   ebx
c001ad66:	52                   	push   edx
c001ad67:	51                   	push   ecx
c001ad68:	56                   	push   esi
c001ad69:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001ad6c:	83 c4 20             	add    esp,0x20
c001ad6f:	99                   	cdq    
c001ad70:	5b                   	pop    ebx
c001ad71:	5e                   	pop    esi
c001ad72:	5f                   	pop    edi
c001ad73:	c3                   	ret    
c001ad74:	5b                   	pop    ebx
c001ad75:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad7f:	5e                   	pop    esi
c001ad80:	5f                   	pop    edi
c001ad81:	c3                   	ret    

c001ad82 <sysShutdown(regs*)>:
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad89:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad8c:	85 c0                	test   eax,eax
c001ad8e:	74 18                	je     c001ada8 <sysShutdown(regs*)+0x26>
c001ad90:	83 f8 01             	cmp    eax,0x1
c001ad93:	74 38                	je     c001adcd <sysShutdown(regs*)+0x4b>
c001ad95:	83 f8 02             	cmp    eax,0x2
c001ad98:	74 24                	je     c001adbe <sysShutdown(regs*)+0x3c>
c001ad9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ada4:	83 c4 0c             	add    esp,0xc
c001ada7:	c3                   	ret    
c001ada8:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001adad:	8b 10                	mov    edx,DWORD PTR [eax]
c001adaf:	6a 00                	push   0x0
c001adb1:	6a 00                	push   0x0
c001adb3:	6a 00                	push   0x0
c001adb5:	50                   	push   eax
c001adb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	eb dc                	jmp    c001ad9a <sysShutdown(regs*)+0x18>
c001adbe:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001adc3:	8b 10                	mov    edx,DWORD PTR [eax]
c001adc5:	6a 00                	push   0x0
c001adc7:	6a 00                	push   0x0
c001adc9:	6a 01                	push   0x1
c001adcb:	eb e8                	jmp    c001adb5 <sysShutdown(regs*)+0x33>
c001adcd:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c001add2:	85 c0                	test   eax,eax
c001add4:	74 02                	je     c001add8 <sysShutdown(regs*)+0x56>
c001add6:	ff d0                	call   eax
c001add8:	31 c0                	xor    eax,eax
c001adda:	31 d2                	xor    edx,edx
c001addc:	83 c4 0c             	add    esp,0xc
c001addf:	c3                   	ret    

c001ade0 <sysCallRealpath(regs*)>:
c001ade0:	83 ec 0c             	sub    esp,0xc
c001ade3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001adea:	85 d2                	test   edx,edx
c001adec:	74 07                	je     c001adf5 <sysCallRealpath(regs*)+0x15>
c001adee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001adf1:	85 c0                	test   eax,eax
c001adf3:	75 0b                	jne    c001ae00 <sysCallRealpath(regs*)+0x20>
c001adf5:	b8 01 00 00 00       	mov    eax,0x1
c001adfa:	31 d2                	xor    edx,edx
c001adfc:	83 c4 0c             	add    esp,0xc
c001adff:	c3                   	ret    
c001ae00:	51                   	push   ecx
c001ae01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ae07:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ae0a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ae10:	51                   	push   ecx
c001ae11:	52                   	push   edx
c001ae12:	50                   	push   eax
c001ae13:	e8 8a 7e ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	31 c0                	xor    eax,eax
c001ae1d:	31 d2                	xor    edx,edx
c001ae1f:	83 c4 0c             	add    esp,0xc
c001ae22:	c3                   	ret    

c001ae23 <sysCallReadDir(regs*)>:
c001ae23:	53                   	push   ebx
c001ae24:	83 ec 18             	sub    esp,0x18
c001ae27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae2b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ae2e:	83 f8 02             	cmp    eax,0x2
c001ae31:	76 53                	jbe    c001ae86 <sysCallReadDir(regs*)+0x63>
c001ae33:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ae36:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ae3c:	77 4f                	ja     c001ae8d <sysCallReadDir(regs*)+0x6a>
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	50                   	push   eax
c001ae42:	e8 66 69 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	85 c0                	test   eax,eax
c001ae4c:	74 50                	je     c001ae9e <sysCallReadDir(regs*)+0x7b>
c001ae4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae5b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ae5f:	51                   	push   ecx
c001ae60:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae63:	6a 00                	push   0x0
c001ae65:	68 10 01 00 00       	push   0x110
c001ae6a:	50                   	push   eax
c001ae6b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ae6e:	83 c4 20             	add    esp,0x20
c001ae71:	85 c0                	test   eax,eax
c001ae73:	74 38                	je     c001aead <sysCallReadDir(regs*)+0x8a>
c001ae75:	83 f8 07             	cmp    eax,0x7
c001ae78:	74 0c                	je     c001ae86 <sysCallReadDir(regs*)+0x63>
c001ae7a:	b8 02 00 00 00       	mov    eax,0x2
c001ae7f:	31 d2                	xor    edx,edx
c001ae81:	83 c4 18             	add    esp,0x18
c001ae84:	5b                   	pop    ebx
c001ae85:	c3                   	ret    
c001ae86:	b8 01 00 00 00       	mov    eax,0x1
c001ae8b:	eb f2                	jmp    c001ae7f <sysCallReadDir(regs*)+0x5c>
c001ae8d:	83 ec 08             	sub    esp,0x8
c001ae90:	52                   	push   edx
c001ae91:	68 60 b1 02 c0       	push   0xc002b160
c001ae96:	e8 58 7a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aea3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aea8:	83 c4 18             	add    esp,0x18
c001aeab:	5b                   	pop    ebx
c001aeac:	c3                   	ret    
c001aead:	31 c0                	xor    eax,eax
c001aeaf:	eb ce                	jmp    c001ae7f <sysCallReadDir(regs*)+0x5c>

c001aeb1 <sysCallIsATTY(regs*)>:
c001aeb1:	83 ec 0c             	sub    esp,0xc
c001aeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aebb:	83 f8 02             	cmp    eax,0x2
c001aebe:	76 07                	jbe    c001aec7 <sysCallIsATTY(regs*)+0x16>
c001aec0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aec5:	75 26                	jne    c001aeed <sysCallIsATTY(regs*)+0x3c>
c001aec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aecc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aecf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aed5:	85 c0                	test   eax,eax
c001aed7:	74 24                	je     c001aefd <sysCallIsATTY(regs*)+0x4c>
c001aed9:	83 ec 0c             	sub    esp,0xc
c001aedc:	8b 10                	mov    edx,DWORD PTR [eax]
c001aede:	50                   	push   eax
c001aedf:	ff 12                	call   DWORD PTR [edx]
c001aee1:	31 d2                	xor    edx,edx
c001aee3:	0f b6 c0             	movzx  eax,al
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	83 c4 0c             	add    esp,0xc
c001aeec:	c3                   	ret    
c001aeed:	83 ec 0c             	sub    esp,0xc
c001aef0:	50                   	push   eax
c001aef1:	e8 b7 68 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	85 c0                	test   eax,eax
c001aefb:	75 dc                	jne    c001aed9 <sysCallIsATTY(regs*)+0x28>
c001aefd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af02:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af07:	83 c4 0c             	add    esp,0xc
c001af0a:	c3                   	ret    

c001af0b <sysCallSeek(regs*)>:
c001af0b:	53                   	push   ebx
c001af0c:	83 ec 08             	sub    esp,0x8
c001af0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af13:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af16:	83 f8 02             	cmp    eax,0x2
c001af19:	76 4a                	jbe    c001af65 <sysCallSeek(regs*)+0x5a>
c001af1b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af20:	77 32                	ja     c001af54 <sysCallSeek(regs*)+0x49>
c001af22:	83 ec 0c             	sub    esp,0xc
c001af25:	50                   	push   eax
c001af26:	e8 82 68 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001af2b:	83 c4 0c             	add    esp,0xc
c001af2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001af31:	31 db                	xor    ebx,ebx
c001af33:	53                   	push   ebx
c001af34:	51                   	push   ecx
c001af35:	50                   	push   eax
c001af36:	e8 33 80 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001af3b:	83 c4 10             	add    esp,0x10
c001af3e:	85 c0                	test   eax,eax
c001af40:	0f 95 c0             	setne  al
c001af43:	31 d2                	xor    edx,edx
c001af45:	0f b6 c0             	movzx  eax,al
c001af48:	f7 d8                	neg    eax
c001af4a:	83 d2 00             	adc    edx,0x0
c001af4d:	83 c4 08             	add    esp,0x8
c001af50:	f7 da                	neg    edx
c001af52:	5b                   	pop    ebx
c001af53:	c3                   	ret    
c001af54:	83 ec 08             	sub    esp,0x8
c001af57:	50                   	push   eax
c001af58:	68 cf b1 02 c0       	push   0xc002b1cf
c001af5d:	e8 91 79 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af6f:	83 c4 08             	add    esp,0x8
c001af72:	5b                   	pop    ebx
c001af73:	c3                   	ret    

c001af74 <sysCallTell(regs*)>:
c001af74:	53                   	push   ebx
c001af75:	83 ec 08             	sub    esp,0x8
c001af78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af7f:	83 f8 02             	cmp    eax,0x2
c001af82:	76 5e                	jbe    c001afe2 <sysCallTell(regs*)+0x6e>
c001af84:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af89:	77 2d                	ja     c001afb8 <sysCallTell(regs*)+0x44>
c001af8b:	83 ec 0c             	sub    esp,0xc
c001af8e:	50                   	push   eax
c001af8f:	e8 19 68 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001af94:	5a                   	pop    edx
c001af95:	59                   	pop    ecx
c001af96:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001af99:	50                   	push   eax
c001af9a:	e8 25 80 ff ff       	call   c0012fc4 <File::tell(unsigned long long*)>
c001af9f:	83 c4 10             	add    esp,0x10
c001afa2:	85 c0                	test   eax,eax
c001afa4:	0f 95 c0             	setne  al
c001afa7:	31 d2                	xor    edx,edx
c001afa9:	0f b6 c0             	movzx  eax,al
c001afac:	f7 d8                	neg    eax
c001afae:	83 d2 00             	adc    edx,0x0
c001afb1:	83 c4 08             	add    esp,0x8
c001afb4:	f7 da                	neg    edx
c001afb6:	5b                   	pop    ebx
c001afb7:	c3                   	ret    
c001afb8:	83 ec 08             	sub    esp,0x8
c001afbb:	50                   	push   eax
c001afbc:	68 e9 b1 02 c0       	push   0xc002b1e9
c001afc1:	e8 2d 79 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001afc6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001afd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001afd9:	31 d2                	xor    edx,edx
c001afdb:	31 c0                	xor    eax,eax
c001afdd:	83 c4 08             	add    esp,0x8
c001afe0:	5b                   	pop    ebx
c001afe1:	c3                   	ret    
c001afe2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afe7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afec:	83 c4 08             	add    esp,0x8
c001afef:	5b                   	pop    ebx
c001aff0:	c3                   	ret    

c001aff1 <sysCallSize(regs*)>:
c001aff1:	53                   	push   ebx
c001aff2:	83 ec 18             	sub    esp,0x18
c001aff5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aff9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001affc:	83 f8 02             	cmp    eax,0x2
c001afff:	76 64                	jbe    c001b065 <sysCallSize(regs*)+0x74>
c001b001:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b006:	77 33                	ja     c001b03b <sysCallSize(regs*)+0x4a>
c001b008:	83 ec 0c             	sub    esp,0xc
c001b00b:	50                   	push   eax
c001b00c:	e8 9c 67 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b011:	83 c4 0c             	add    esp,0xc
c001b014:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b018:	52                   	push   edx
c001b019:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b01c:	50                   	push   eax
c001b01d:	e8 3a 81 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b022:	83 c4 10             	add    esp,0x10
c001b025:	85 c0                	test   eax,eax
c001b027:	0f 95 c0             	setne  al
c001b02a:	31 d2                	xor    edx,edx
c001b02c:	0f b6 c0             	movzx  eax,al
c001b02f:	f7 d8                	neg    eax
c001b031:	83 d2 00             	adc    edx,0x0
c001b034:	83 c4 18             	add    esp,0x18
c001b037:	f7 da                	neg    edx
c001b039:	5b                   	pop    ebx
c001b03a:	c3                   	ret    
c001b03b:	83 ec 08             	sub    esp,0x8
c001b03e:	50                   	push   eax
c001b03f:	68 03 b2 02 c0       	push   0xc002b203
c001b044:	e8 aa 78 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b049:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b04c:	83 c4 10             	add    esp,0x10
c001b04f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b055:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b05c:	31 d2                	xor    edx,edx
c001b05e:	31 c0                	xor    eax,eax
c001b060:	83 c4 18             	add    esp,0x18
c001b063:	5b                   	pop    ebx
c001b064:	c3                   	ret    
c001b065:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b06a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b06f:	83 c4 18             	add    esp,0x18
c001b072:	5b                   	pop    ebx
c001b073:	c3                   	ret    

c001b074 <sysCallSizeFromFilename(regs*)>:
c001b074:	57                   	push   edi
c001b075:	56                   	push   esi
c001b076:	53                   	push   ebx
c001b077:	83 ec 20             	sub    esp,0x20
c001b07a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b07e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b081:	83 fb 02             	cmp    ebx,0x2
c001b084:	0f 86 99 00 00 00    	jbe    c001b123 <sysCallSizeFromFilename(regs*)+0xaf>
c001b08a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b090:	77 65                	ja     c001b0f7 <sysCallSizeFromFilename(regs*)+0x83>
c001b092:	83 ec 0c             	sub    esp,0xc
c001b095:	68 14 01 00 00       	push   0x114
c001b09a:	e8 85 45 ff ff       	call   c000f624 <malloc>
c001b09f:	83 c4 0c             	add    esp,0xc
c001b0a2:	89 c6                	mov    esi,eax
c001b0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0ac:	53                   	push   ebx
c001b0ad:	56                   	push   esi
c001b0ae:	e8 99 7d ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b0b3:	83 c4 0c             	add    esp,0xc
c001b0b6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b0ba:	50                   	push   eax
c001b0bb:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b0be:	56                   	push   esi
c001b0bf:	e8 98 80 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	85 f6                	test   esi,esi
c001b0c9:	74 14                	je     c001b0df <sysCallSizeFromFilename(regs*)+0x6b>
c001b0cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0cf:	8b 16                	mov    edx,DWORD PTR [esi]
c001b0d1:	83 ec 0c             	sub    esp,0xc
c001b0d4:	56                   	push   esi
c001b0d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0df:	85 c0                	test   eax,eax
c001b0e1:	0f 95 c0             	setne  al
c001b0e4:	31 d2                	xor    edx,edx
c001b0e6:	0f b6 c0             	movzx  eax,al
c001b0e9:	f7 d8                	neg    eax
c001b0eb:	83 d2 00             	adc    edx,0x0
c001b0ee:	83 c4 20             	add    esp,0x20
c001b0f1:	f7 da                	neg    edx
c001b0f3:	5b                   	pop    ebx
c001b0f4:	5e                   	pop    esi
c001b0f5:	5f                   	pop    edi
c001b0f6:	c3                   	ret    
c001b0f7:	83 ec 08             	sub    esp,0x8
c001b0fa:	53                   	push   ebx
c001b0fb:	68 03 b2 02 c0       	push   0xc002b203
c001b100:	e8 ee 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b105:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b108:	83 c4 10             	add    esp,0x10
c001b10b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b111:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b118:	31 d2                	xor    edx,edx
c001b11a:	83 c4 20             	add    esp,0x20
c001b11d:	31 c0                	xor    eax,eax
c001b11f:	5b                   	pop    ebx
c001b120:	5e                   	pop    esi
c001b121:	5f                   	pop    edi
c001b122:	c3                   	ret    
c001b123:	83 c4 20             	add    esp,0x20
c001b126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b12b:	5b                   	pop    ebx
c001b12c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b131:	5e                   	pop    esi
c001b132:	5f                   	pop    edi
c001b133:	c3                   	ret    

c001b134 <sysCallClose(regs*)>:
c001b134:	53                   	push   ebx
c001b135:	83 ec 08             	sub    esp,0x8
c001b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b13f:	83 f8 02             	cmp    eax,0x2
c001b142:	76 50                	jbe    c001b194 <sysCallClose(regs*)+0x60>
c001b144:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b149:	74 58                	je     c001b1a3 <sysCallClose(regs*)+0x6f>
c001b14b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b150:	74 60                	je     c001b1b2 <sysCallClose(regs*)+0x7e>
c001b152:	77 2f                	ja     c001b183 <sysCallClose(regs*)+0x4f>
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	50                   	push   eax
c001b158:	e8 50 66 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b15d:	89 c3                	mov    ebx,eax
c001b15f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b162:	e8 a7 7d ff ff       	call   c0012f0e <File::close()>
c001b167:	83 c4 10             	add    esp,0x10
c001b16a:	85 db                	test   ebx,ebx
c001b16c:	74 0c                	je     c001b17a <sysCallClose(regs*)+0x46>
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b173:	53                   	push   ebx
c001b174:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b177:	83 c4 10             	add    esp,0x10
c001b17a:	31 c0                	xor    eax,eax
c001b17c:	31 d2                	xor    edx,edx
c001b17e:	83 c4 08             	add    esp,0x8
c001b181:	5b                   	pop    ebx
c001b182:	c3                   	ret    
c001b183:	83 ec 08             	sub    esp,0x8
c001b186:	50                   	push   eax
c001b187:	68 84 b1 02 c0       	push   0xc002b184
c001b18c:	e8 62 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b191:	83 c4 10             	add    esp,0x10
c001b194:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b199:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b19e:	83 c4 08             	add    esp,0x8
c001b1a1:	5b                   	pop    ebx
c001b1a2:	c3                   	ret    
c001b1a3:	83 ec 0c             	sub    esp,0xc
c001b1a6:	68 1e b2 02 c0       	push   0xc002b21e
c001b1ab:	e8 43 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b1b0:	eb c5                	jmp    c001b177 <sysCallClose(regs*)+0x43>
c001b1b2:	83 ec 0c             	sub    esp,0xc
c001b1b5:	68 2c b2 02 c0       	push   0xc002b22c
c001b1ba:	eb ef                	jmp    c001b1ab <sysCallClose(regs*)+0x77>

c001b1bc <sysCallOpenDir(regs*)>:
c001b1bc:	56                   	push   esi
c001b1bd:	53                   	push   ebx
c001b1be:	53                   	push   ebx
c001b1bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1c3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b1c6:	85 f6                	test   esi,esi
c001b1c8:	74 59                	je     c001b223 <sysCallOpenDir(regs*)+0x67>
c001b1ca:	83 ec 0c             	sub    esp,0xc
c001b1cd:	68 14 01 00 00       	push   0x114
c001b1d2:	e8 4d 44 ff ff       	call   c000f624 <malloc>
c001b1d7:	83 c4 0c             	add    esp,0xc
c001b1da:	89 c6                	mov    esi,eax
c001b1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1e7:	56                   	push   esi
c001b1e8:	e8 0b 81 ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	85 f6                	test   esi,esi
c001b1f2:	74 2f                	je     c001b223 <sysCallOpenDir(regs*)+0x67>
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	56                   	push   esi
c001b1f8:	e8 5f 81 ff ff       	call   c001335c <Directory::open()>
c001b1fd:	83 c4 10             	add    esp,0x10
c001b200:	85 c0                	test   eax,eax
c001b202:	75 1f                	jne    c001b223 <sysCallOpenDir(regs*)+0x67>
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	56                   	push   esi
c001b208:	e8 ab 62 ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b20d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	89 02                	mov    DWORD PTR [edx],eax
c001b215:	c1 f8 1f             	sar    eax,0x1f
c001b218:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b21b:	31 c0                	xor    eax,eax
c001b21d:	59                   	pop    ecx
c001b21e:	31 d2                	xor    edx,edx
c001b220:	5b                   	pop    ebx
c001b221:	5e                   	pop    esi
c001b222:	c3                   	ret    
c001b223:	59                   	pop    ecx
c001b224:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b229:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b22e:	5b                   	pop    ebx
c001b22f:	5e                   	pop    esi
c001b230:	c3                   	ret    

c001b231 <sysCallCloseDir(regs*)>:
c001b231:	53                   	push   ebx
c001b232:	83 ec 08             	sub    esp,0x8
c001b235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b239:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b23c:	83 f8 02             	cmp    eax,0x2
c001b23f:	76 47                	jbe    c001b288 <sysCallCloseDir(regs*)+0x57>
c001b241:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b246:	77 2f                	ja     c001b277 <sysCallCloseDir(regs*)+0x46>
c001b248:	83 ec 0c             	sub    esp,0xc
c001b24b:	50                   	push   eax
c001b24c:	e8 5c 65 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b251:	89 c3                	mov    ebx,eax
c001b253:	89 04 24             	mov    DWORD PTR [esp],eax
c001b256:	e8 5d 81 ff ff       	call   c00133b8 <Directory::close()>
c001b25b:	83 c4 10             	add    esp,0x10
c001b25e:	85 db                	test   ebx,ebx
c001b260:	74 0c                	je     c001b26e <sysCallCloseDir(regs*)+0x3d>
c001b262:	83 ec 0c             	sub    esp,0xc
c001b265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b267:	53                   	push   ebx
c001b268:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b26b:	83 c4 10             	add    esp,0x10
c001b26e:	31 c0                	xor    eax,eax
c001b270:	31 d2                	xor    edx,edx
c001b272:	83 c4 08             	add    esp,0x8
c001b275:	5b                   	pop    ebx
c001b276:	c3                   	ret    
c001b277:	83 ec 08             	sub    esp,0x8
c001b27a:	50                   	push   eax
c001b27b:	68 ac b1 02 c0       	push   0xc002b1ac
c001b280:	e8 6e 76 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b28d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b292:	83 c4 08             	add    esp,0x8
c001b295:	5b                   	pop    ebx
c001b296:	c3                   	ret    

c001b297 <sysCallMakeDir(regs*)>:
c001b297:	56                   	push   esi
c001b298:	53                   	push   ebx
c001b299:	83 ec 10             	sub    esp,0x10
c001b29c:	68 14 01 00 00       	push   0x114
c001b2a1:	e8 7e 43 ff ff       	call   c000f624 <malloc>
c001b2a6:	83 c4 0c             	add    esp,0xc
c001b2a9:	89 c3                	mov    ebx,eax
c001b2ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b2ba:	53                   	push   ebx
c001b2bb:	e8 38 80 ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	85 db                	test   ebx,ebx
c001b2c5:	74 32                	je     c001b2f9 <sysCallMakeDir(regs*)+0x62>
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	53                   	push   ebx
c001b2cb:	e8 6c 82 ff ff       	call   c001353c <Directory::create()>
c001b2d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2d3:	89 c6                	mov    esi,eax
c001b2d5:	e8 de 80 ff ff       	call   c00133b8 <Directory::close()>
c001b2da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2e2:	83 c4 10             	add    esp,0x10
c001b2e5:	31 c0                	xor    eax,eax
c001b2e7:	59                   	pop    ecx
c001b2e8:	85 f6                	test   esi,esi
c001b2ea:	5b                   	pop    ebx
c001b2eb:	0f 95 c0             	setne  al
c001b2ee:	5e                   	pop    esi
c001b2ef:	31 d2                	xor    edx,edx
c001b2f1:	f7 d8                	neg    eax
c001b2f3:	83 d2 00             	adc    edx,0x0
c001b2f6:	f7 da                	neg    edx
c001b2f8:	c3                   	ret    
c001b2f9:	59                   	pop    ecx
c001b2fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b304:	5b                   	pop    ebx
c001b305:	5e                   	pop    esi
c001b306:	c3                   	ret    

c001b307 <sysCallWait(regs*)>:
c001b307:	83 ec 10             	sub    esp,0x10
c001b30a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b30e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b311:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b314:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b317:	e8 d1 23 00 00       	call   c001d6ed <waitTask(int, int*, int)>
c001b31c:	83 c4 1c             	add    esp,0x1c
c001b31f:	99                   	cdq    
c001b320:	c3                   	ret    

c001b321 <sysCallNotImpl(regs*)>:
c001b321:	83 ec 18             	sub    esp,0x18
c001b324:	68 3a b2 02 c0       	push   0xc002b23a
c001b329:	e8 f7 e8 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b333:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b338:	83 c4 1c             	add    esp,0x1c
c001b33b:	c3                   	ret    

c001b33c <sysPanic(regs*)>:
c001b33c:	83 ec 18             	sub    esp,0x18
c001b33f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b343:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b346:	e8 da e8 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001b34b:	c7 04 24 54 b2 02 c0 	mov    DWORD PTR [esp],0xc002b254
c001b352:	e8 ce e8 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001b357:	b8 01 00 00 00       	mov    eax,0x1
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	83 c4 1c             	add    esp,0x1c
c001b361:	c3                   	ret    

c001b362 <sysCallRmdir(regs*)>:
c001b362:	56                   	push   esi
c001b363:	53                   	push   ebx
c001b364:	83 ec 20             	sub    esp,0x20
c001b367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b36b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b36e:	68 14 01 00 00       	push   0x114
c001b373:	e8 ac 42 ff ff       	call   c000f624 <malloc>
c001b378:	83 c4 0c             	add    esp,0xc
c001b37b:	89 c3                	mov    ebx,eax
c001b37d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b382:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b385:	56                   	push   esi
c001b386:	53                   	push   ebx
c001b387:	e8 c0 7a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b38c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b38f:	e8 94 7c ff ff       	call   c0013028 <File::unlink()>
c001b394:	83 c4 10             	add    esp,0x10
c001b397:	85 db                	test   ebx,ebx
c001b399:	74 14                	je     c001b3af <sysCallRmdir(regs*)+0x4d>
c001b39b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b39f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3a1:	83 ec 0c             	sub    esp,0xc
c001b3a4:	53                   	push   ebx
c001b3a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3af:	85 c0                	test   eax,eax
c001b3b1:	0f 95 c0             	setne  al
c001b3b4:	31 d2                	xor    edx,edx
c001b3b6:	0f b6 c0             	movzx  eax,al
c001b3b9:	f7 d8                	neg    eax
c001b3bb:	83 d2 00             	adc    edx,0x0
c001b3be:	83 c4 14             	add    esp,0x14
c001b3c1:	f7 da                	neg    edx
c001b3c3:	5b                   	pop    ebx
c001b3c4:	5e                   	pop    esi
c001b3c5:	c3                   	ret    

c001b3c6 <sysCallUnlink(regs*)>:
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	83 ec 20             	sub    esp,0x20
c001b3cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3cf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b3d2:	68 14 01 00 00       	push   0x114
c001b3d7:	e8 48 42 ff ff       	call   c000f624 <malloc>
c001b3dc:	83 c4 0c             	add    esp,0xc
c001b3df:	89 c3                	mov    ebx,eax
c001b3e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3e9:	56                   	push   esi
c001b3ea:	53                   	push   ebx
c001b3eb:	e8 5c 7a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b3f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3f3:	e8 30 7c ff ff       	call   c0013028 <File::unlink()>
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	85 db                	test   ebx,ebx
c001b3fd:	74 14                	je     c001b413 <sysCallUnlink(regs*)+0x4d>
c001b3ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b403:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	53                   	push   ebx
c001b409:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b413:	85 c0                	test   eax,eax
c001b415:	0f 95 c0             	setne  al
c001b418:	31 d2                	xor    edx,edx
c001b41a:	0f b6 c0             	movzx  eax,al
c001b41d:	f7 d8                	neg    eax
c001b41f:	83 d2 00             	adc    edx,0x0
c001b422:	83 c4 14             	add    esp,0x14
c001b425:	f7 da                	neg    edx
c001b427:	5b                   	pop    ebx
c001b428:	5e                   	pop    esi
c001b429:	c3                   	ret    

c001b42a <sysCallGetArgv(regs*)>:
c001b42a:	83 ec 0c             	sub    esp,0xc
c001b42d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b431:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b434:	85 c0                	test   eax,eax
c001b436:	78 2b                	js     c001b463 <sysCallGetArgv(regs*)+0x39>
c001b438:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b43e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b441:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b447:	7d 1a                	jge    c001b463 <sysCallGetArgv(regs*)+0x39>
c001b449:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b450:	85 c0                	test   eax,eax
c001b452:	74 17                	je     c001b46b <sysCallGetArgv(regs*)+0x41>
c001b454:	83 ec 08             	sub    esp,0x8
c001b457:	50                   	push   eax
c001b458:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b45b:	e8 03 53 fe ff       	call   c0000763 <strcpy>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	31 c0                	xor    eax,eax
c001b465:	31 d2                	xor    edx,edx
c001b467:	83 c4 0c             	add    esp,0xc
c001b46a:	c3                   	ret    
c001b46b:	b8 01 00 00 00       	mov    eax,0x1
c001b470:	31 d2                	xor    edx,edx
c001b472:	83 c4 0c             	add    esp,0xc
c001b475:	c3                   	ret    

c001b476 <sysCallTTYName(regs*)>:
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	53                   	push   ebx
c001b479:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b47d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b480:	85 c0                	test   eax,eax
c001b482:	74 5f                	je     c001b4e3 <sysCallTTYName(regs*)+0x6d>
c001b484:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b487:	83 f8 02             	cmp    eax,0x2
c001b48a:	77 3e                	ja     c001b4ca <sysCallTTYName(regs*)+0x54>
c001b48c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b491:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b494:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b49a:	85 db                	test   ebx,ebx
c001b49c:	74 45                	je     c001b4e3 <sysCallTTYName(regs*)+0x6d>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4a3:	53                   	push   ebx
c001b4a4:	ff 10                	call   DWORD PTR [eax]
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	84 c0                	test   al,al
c001b4ab:	74 41                	je     c001b4ee <sysCallTTYName(regs*)+0x78>
c001b4ad:	83 ec 08             	sub    esp,0x8
c001b4b0:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b4b6:	53                   	push   ebx
c001b4b7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b4ba:	e8 a4 52 fe ff       	call   c0000763 <strcpy>
c001b4bf:	83 c4 10             	add    esp,0x10
c001b4c2:	31 c0                	xor    eax,eax
c001b4c4:	59                   	pop    ecx
c001b4c5:	31 d2                	xor    edx,edx
c001b4c7:	5b                   	pop    ebx
c001b4c8:	5e                   	pop    esi
c001b4c9:	c3                   	ret    
c001b4ca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b4cf:	74 bb                	je     c001b48c <sysCallTTYName(regs*)+0x16>
c001b4d1:	83 ec 0c             	sub    esp,0xc
c001b4d4:	50                   	push   eax
c001b4d5:	e8 d3 62 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b4da:	83 c4 10             	add    esp,0x10
c001b4dd:	89 c3                	mov    ebx,eax
c001b4df:	85 db                	test   ebx,ebx
c001b4e1:	75 bb                	jne    c001b49e <sysCallTTYName(regs*)+0x28>
c001b4e3:	59                   	pop    ecx
c001b4e4:	b8 01 00 00 00       	mov    eax,0x1
c001b4e9:	31 d2                	xor    edx,edx
c001b4eb:	5b                   	pop    ebx
c001b4ec:	5e                   	pop    esi
c001b4ed:	c3                   	ret    
c001b4ee:	59                   	pop    ecx
c001b4ef:	b8 02 00 00 00       	mov    eax,0x2
c001b4f4:	31 d2                	xor    edx,edx
c001b4f6:	5b                   	pop    ebx
c001b4f7:	5e                   	pop    esi
c001b4f8:	c3                   	ret    

c001b4f9 <sysCallUSleep(regs*)>:
c001b4f9:	83 ec 14             	sub    esp,0x14
c001b4fc:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b501:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b505:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b50c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b50f:	01 ca                	add    edx,ecx
c001b511:	52                   	push   edx
c001b512:	50                   	push   eax
c001b513:	e8 6e 22 00 00       	call   c001d786 <nanoSleep(unsigned long long)>
c001b518:	31 c0                	xor    eax,eax
c001b51a:	31 d2                	xor    edx,edx
c001b51c:	83 c4 1c             	add    esp,0x1c
c001b51f:	c3                   	ret    

c001b520 <sysCallSpawn(regs*)>:
c001b520:	56                   	push   esi
c001b521:	53                   	push   ebx
c001b522:	53                   	push   ebx
c001b523:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b527:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b52a:	85 f6                	test   esi,esi
c001b52c:	75 08                	jne    c001b536 <sysCallSpawn(regs*)+0x16>
c001b52e:	59                   	pop    ecx
c001b52f:	31 c0                	xor    eax,eax
c001b531:	31 d2                	xor    edx,edx
c001b533:	5b                   	pop    ebx
c001b534:	5e                   	pop    esi
c001b535:	c3                   	ret    
c001b536:	83 ec 0c             	sub    esp,0xc
c001b539:	68 3f 07 00 00       	push   0x73f
c001b53e:	e8 e1 40 ff ff       	call   c000f624 <malloc>
c001b543:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b546:	89 c6                	mov    esi,eax
c001b548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b550:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b553:	56                   	push   esi
c001b554:	e8 2d 19 00 00       	call   c001ce86 <Process::Process(char const*, Process*, char**)>
c001b559:	83 c4 20             	add    esp,0x20
c001b55c:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b563:	75 c9                	jne    c001b52e <sysCallSpawn(regs*)+0xe>
c001b565:	83 ec 0c             	sub    esp,0xc
c001b568:	56                   	push   esi
c001b569:	e8 de 1e 00 00       	call   c001d44c <Process::createUserThread()>
c001b56e:	8b 06                	mov    eax,DWORD PTR [esi]
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	99                   	cdq    
c001b574:	59                   	pop    ecx
c001b575:	5b                   	pop    ebx
c001b576:	5e                   	pop    esi
c001b577:	c3                   	ret    

c001b578 <sysCallGetEnv(regs*)>:
c001b578:	57                   	push   edi
c001b579:	56                   	push   esi
c001b57a:	53                   	push   ebx
c001b57b:	83 ec 1c             	sub    esp,0x1c
c001b57e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b582:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b587:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b58a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b58d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b590:	e8 ac e5 ff ff       	call   c0019b41 <Krnl::getProcessTotalEnvCount(Process*)>
c001b595:	83 c4 10             	add    esp,0x10
c001b598:	39 c7                	cmp    edi,eax
c001b59a:	7c 14                	jl     c001b5b0 <sysCallGetEnv(regs*)+0x38>
c001b59c:	85 f6                	test   esi,esi
c001b59e:	75 0b                	jne    c001b5ab <sysCallGetEnv(regs*)+0x33>
c001b5a0:	83 c4 10             	add    esp,0x10
c001b5a3:	31 c0                	xor    eax,eax
c001b5a5:	5b                   	pop    ebx
c001b5a6:	31 d2                	xor    edx,edx
c001b5a8:	5e                   	pop    esi
c001b5a9:	5f                   	pop    edi
c001b5aa:	c3                   	ret    
c001b5ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b5ae:	eb f0                	jmp    c001b5a0 <sysCallGetEnv(regs*)+0x28>
c001b5b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5b4:	52                   	push   edx
c001b5b5:	57                   	push   edi
c001b5b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b5bc:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b5bf:	50                   	push   eax
c001b5c0:	e8 9c e5 ff ff       	call   c0019b61 <Krnl::getProcessEnvPair(Process*, int)>
c001b5c5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5d0:	83 c4 0c             	add    esp,0xc
c001b5d3:	85 c9                	test   ecx,ecx
c001b5d5:	75 23                	jne    c001b5fa <sysCallGetEnv(regs*)+0x82>
c001b5d7:	83 ec 0c             	sub    esp,0xc
c001b5da:	50                   	push   eax
c001b5db:	e8 01 51 fe ff       	call   c00006e1 <strlen>
c001b5e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b5e3:	89 c3                	mov    ebx,eax
c001b5e5:	e8 f7 50 fe ff       	call   c00006e1 <strlen>
c001b5ea:	83 c4 10             	add    esp,0x10
c001b5ed:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b5f1:	83 c4 10             	add    esp,0x10
c001b5f4:	31 d2                	xor    edx,edx
c001b5f6:	5b                   	pop    ebx
c001b5f7:	5e                   	pop    esi
c001b5f8:	5f                   	pop    edi
c001b5f9:	c3                   	ret    
c001b5fa:	83 ec 08             	sub    esp,0x8
c001b5fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b600:	50                   	push   eax
c001b601:	56                   	push   esi
c001b602:	e8 5c 51 fe ff       	call   c0000763 <strcpy>
c001b607:	58                   	pop    eax
c001b608:	5a                   	pop    edx
c001b609:	68 63 b2 02 c0       	push   0xc002b263
c001b60e:	56                   	push   esi
c001b60f:	e8 06 52 fe ff       	call   c000081a <strcat>
c001b614:	59                   	pop    ecx
c001b615:	5b                   	pop    ebx
c001b616:	57                   	push   edi
c001b617:	56                   	push   esi
c001b618:	e8 fd 51 fe ff       	call   c000081a <strcat>
c001b61d:	83 c4 10             	add    esp,0x10
c001b620:	e9 7b ff ff ff       	jmp    c001b5a0 <sysCallGetEnv(regs*)+0x28>

c001b625 <sysAppSettings(regs*)>:
c001b625:	53                   	push   ebx
c001b626:	83 ec 08             	sub    esp,0x8
c001b629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b630:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b636:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b63b:	66 3d c0 09          	cmp    ax,0x9c0
c001b63f:	75 2f                	jne    c001b670 <sysAppSettings(regs*)+0x4b>
c001b641:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b647:	83 e0 1f             	and    eax,0x1f
c001b64a:	3c 01                	cmp    al,0x1
c001b64c:	74 2e                	je     c001b67c <sysAppSettings(regs*)+0x57>
c001b64e:	3c 07                	cmp    al,0x7
c001b650:	0f 84 bd 00 00 00    	je     c001b713 <sysAppSettings(regs*)+0xee>
c001b656:	84 c0                	test   al,al
c001b658:	0f 84 dc 00 00 00    	je     c001b73a <sysAppSettings(regs*)+0x115>
c001b65e:	3c 08                	cmp    al,0x8
c001b660:	74 6d                	je     c001b6cf <sysAppSettings(regs*)+0xaa>
c001b662:	0f b6 c0             	movzx  eax,al
c001b665:	83 c4 08             	add    esp,0x8
c001b668:	05 e8 03 00 00       	add    eax,0x3e8
c001b66d:	5b                   	pop    ebx
c001b66e:	99                   	cdq    
c001b66f:	c3                   	ret    
c001b670:	b8 01 00 00 00       	mov    eax,0x1
c001b675:	31 d2                	xor    edx,edx
c001b677:	83 c4 08             	add    esp,0x8
c001b67a:	5b                   	pop    ebx
c001b67b:	c3                   	ret    
c001b67c:	51                   	push   ecx
c001b67d:	68 00 01 00 00       	push   0x100
c001b682:	6a 00                	push   0x0
c001b684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b68c:	83 c0 0c             	add    eax,0xc
c001b68f:	50                   	push   eax
c001b690:	e8 2f 50 fe ff       	call   c00006c4 <memset>
c001b695:	83 c4 0c             	add    esp,0xc
c001b698:	68 ff 00 00 00       	push   0xff
c001b69d:	53                   	push   ebx
c001b69e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6a6:	83 c0 0c             	add    eax,0xc
c001b6a9:	50                   	push   eax
c001b6aa:	e8 f1 4f fe ff       	call   c00006a0 <memcpy>
c001b6af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b4:	5b                   	pop    ebx
c001b6b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b8:	5a                   	pop    edx
c001b6b9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b6bc:	52                   	push   edx
c001b6bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b6c3:	e8 60 52 ff ff       	call   c0010928 <VgaText::setTitle(char*)>
c001b6c8:	83 c4 10             	add    esp,0x10
c001b6cb:	31 c0                	xor    eax,eax
c001b6cd:	eb a6                	jmp    c001b675 <sysAppSettings(regs*)+0x50>
c001b6cf:	83 ec 08             	sub    esp,0x8
c001b6d2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b6d8:	83 e0 0f             	and    eax,0xf
c001b6db:	50                   	push   eax
c001b6dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b6ea:	e8 29 52 ff ff       	call   c0010918 <VgaText::setTitleColour(VgaColour)>
c001b6ef:	58                   	pop    eax
c001b6f0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b6f6:	5a                   	pop    edx
c001b6f7:	c1 e8 04             	shr    eax,0x4
c001b6fa:	83 e0 0f             	and    eax,0xf
c001b6fd:	50                   	push   eax
c001b6fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b703:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b70c:	e8 f7 51 ff ff       	call   c0010908 <VgaText::setTitleTextColour(VgaColour)>
c001b711:	eb b5                	jmp    c001b6c8 <sysAppSettings(regs*)+0xa3>
c001b713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b721:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b727:	c0 e8 06             	shr    al,0x6
c001b72a:	83 e0 01             	and    eax,0x1
c001b72d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b733:	31 c0                	xor    eax,eax
c001b735:	e9 3b ff ff ff       	jmp    c001b675 <sysAppSettings(regs*)+0x50>
c001b73a:	b8 02 00 00 00       	mov    eax,0x2
c001b73f:	e9 31 ff ff ff       	jmp    c001b675 <sysAppSettings(regs*)+0x50>

c001b744 <sysSetFatAttrib(regs*)>:
c001b744:	57                   	push   edi
c001b745:	56                   	push   esi
c001b746:	53                   	push   ebx
c001b747:	83 ec 1c             	sub    esp,0x1c
c001b74a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b74e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b751:	68 14 01 00 00       	push   0x114
c001b756:	e8 c9 3e ff ff       	call   c000f624 <malloc>
c001b75b:	83 c4 0c             	add    esp,0xc
c001b75e:	89 c3                	mov    ebx,eax
c001b760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b765:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b768:	57                   	push   edi
c001b769:	53                   	push   ebx
c001b76a:	e8 dd 76 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b76f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b772:	83 c4 0c             	add    esp,0xc
c001b775:	0f b6 d4             	movzx  edx,ah
c001b778:	0f b6 c0             	movzx  eax,al
c001b77b:	52                   	push   edx
c001b77c:	50                   	push   eax
c001b77d:	53                   	push   ebx
c001b77e:	e8 3f 79 ff ff       	call   c00130c2 <File::chfatattr(unsigned char, unsigned char)>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	85 db                	test   ebx,ebx
c001b788:	74 14                	je     c001b79e <sysSetFatAttrib(regs*)+0x5a>
c001b78a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	53                   	push   ebx
c001b794:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79e:	85 c0                	test   eax,eax
c001b7a0:	0f 95 c0             	setne  al
c001b7a3:	31 d2                	xor    edx,edx
c001b7a5:	0f b6 c0             	movzx  eax,al
c001b7a8:	f7 d8                	neg    eax
c001b7aa:	83 d2 00             	adc    edx,0x0
c001b7ad:	83 c4 10             	add    esp,0x10
c001b7b0:	f7 da                	neg    edx
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	5f                   	pop    edi
c001b7b5:	c3                   	ret    

c001b7b6 <sysPipe(regs*)>:
c001b7b6:	57                   	push   edi
c001b7b7:	56                   	push   esi
c001b7b8:	53                   	push   ebx
c001b7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b7c3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b7c6:	6a 20                	push   0x20
c001b7c8:	e8 57 3e ff ff       	call   c000f624 <malloc>
c001b7cd:	89 c3                	mov    ebx,eax
c001b7cf:	58                   	pop    eax
c001b7d0:	5a                   	pop    edx
c001b7d1:	68 00 50 00 00       	push   0x5000
c001b7d6:	53                   	push   ebx
c001b7d7:	e8 7c 4a ff ff       	call   c0010258 <Pipe::Pipe(int)>
c001b7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7df:	e8 d4 5c ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b7e4:	89 07                	mov    DWORD PTR [edi],eax
c001b7e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7e9:	e8 ca 5c ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	89 06                	mov    DWORD PTR [esi],eax
c001b7f3:	31 d2                	xor    edx,edx
c001b7f5:	5b                   	pop    ebx
c001b7f6:	31 c0                	xor    eax,eax
c001b7f8:	5e                   	pop    esi
c001b7f9:	5f                   	pop    edi
c001b7fa:	c3                   	ret    

c001b7fb <sysGetUnixTime(regs*)>:
c001b7fb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001b800:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b806:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b80a:	e9 27 80 ff ff       	jmp    c0013836 <Clock::timeInSecondsLocal()>

c001b80f <string_ends_with(char const*, char const*)>:
c001b80f:	57                   	push   edi
c001b810:	56                   	push   esi
c001b811:	53                   	push   ebx
c001b812:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b81a:	83 ec 0c             	sub    esp,0xc
c001b81d:	53                   	push   ebx
c001b81e:	e8 be 4e fe ff       	call   c00006e1 <strlen>
c001b823:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b826:	89 c6                	mov    esi,eax
c001b828:	e8 b4 4e fe ff       	call   c00006e1 <strlen>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	39 c6                	cmp    esi,eax
c001b832:	7d 06                	jge    c001b83a <string_ends_with(char const*, char const*)+0x2b>
c001b834:	5b                   	pop    ebx
c001b835:	31 c0                	xor    eax,eax
c001b837:	5e                   	pop    esi
c001b838:	5f                   	pop    edi
c001b839:	c3                   	ret    
c001b83a:	83 ec 08             	sub    esp,0x8
c001b83d:	29 c6                	sub    esi,eax
c001b83f:	57                   	push   edi
c001b840:	01 f3                	add    ebx,esi
c001b842:	53                   	push   ebx
c001b843:	e8 6c 4f fe ff       	call   c00007b4 <strcmp>
c001b848:	83 c4 10             	add    esp,0x10
c001b84b:	85 c0                	test   eax,eax
c001b84d:	5b                   	pop    ebx
c001b84e:	0f 94 c0             	sete   al
c001b851:	5e                   	pop    esi
c001b852:	0f b6 c0             	movzx  eax,al
c001b855:	5f                   	pop    edi
c001b856:	c3                   	ret    

c001b857 <sysCallOpen(regs*)>:
c001b857:	56                   	push   esi
c001b858:	53                   	push   ebx
c001b859:	81 ec 04 01 00 00    	sub    esp,0x104
c001b85f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b866:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b869:	85 c9                	test   ecx,ecx
c001b86b:	0f 84 b3 00 00 00    	je     c001b924 <sysCallOpen(regs*)+0xcd>
c001b871:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b874:	85 c0                	test   eax,eax
c001b876:	0f 84 a8 00 00 00    	je     c001b924 <sysCallOpen(regs*)+0xcd>
c001b87c:	52                   	push   edx
c001b87d:	68 65 b2 02 c0       	push   0xc002b265
c001b882:	50                   	push   eax
c001b883:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b887:	56                   	push   esi
c001b888:	e8 15 74 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b88d:	89 34 24             	mov    DWORD PTR [esp],esi
c001b890:	e8 4c 4e fe ff       	call   c00006e1 <strlen>
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	48                   	dec    eax
c001b899:	74 1d                	je     c001b8b8 <sysCallOpen(regs*)+0x61>
c001b89b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b89e:	eb 0f                	jmp    c001b8af <sysCallOpen(regs*)+0x58>
c001b8a0:	80 fa 3a             	cmp    dl,0x3a
c001b8a3:	74 0f                	je     c001b8b4 <sysCallOpen(regs*)+0x5d>
c001b8a5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b8a9:	48                   	dec    eax
c001b8aa:	74 0c                	je     c001b8b8 <sysCallOpen(regs*)+0x61>
c001b8ac:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b8af:	80 fa 2e             	cmp    dl,0x2e
c001b8b2:	75 ec                	jne    c001b8a0 <sysCallOpen(regs*)+0x49>
c001b8b4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b8b8:	83 ec 08             	sub    esp,0x8
c001b8bb:	68 69 b2 02 c0       	push   0xc002b269
c001b8c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8c3:	e8 47 ff ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b8c8:	83 c4 10             	add    esp,0x10
c001b8cb:	85 c0                	test   eax,eax
c001b8cd:	75 17                	jne    c001b8e6 <sysCallOpen(regs*)+0x8f>
c001b8cf:	83 ec 08             	sub    esp,0x8
c001b8d2:	68 8a b2 02 c0       	push   0xc002b28a
c001b8d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8da:	e8 30 ff ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	85 c0                	test   eax,eax
c001b8e4:	74 51                	je     c001b937 <sysCallOpen(regs*)+0xe0>
c001b8e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8e9:	83 ec 08             	sub    esp,0x8
c001b8ec:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b8f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8fc:	ff 30                	push   DWORD PTR [eax]
c001b8fe:	68 6e b2 02 c0       	push   0xc002b26e
c001b903:	e8 eb 6f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b908:	c7 04 24 7d b2 02 c0 	mov    DWORD PTR [esp],0xc002b27d
c001b90f:	e8 df 6f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b914:	83 c4 10             	add    esp,0x10
c001b917:	81 c4 04 01 00 00    	add    esp,0x104
c001b91d:	31 c0                	xor    eax,eax
c001b91f:	31 d2                	xor    edx,edx
c001b921:	5b                   	pop    ebx
c001b922:	5e                   	pop    esi
c001b923:	c3                   	ret    
c001b924:	81 c4 04 01 00 00    	add    esp,0x104
c001b92a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b92f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b934:	5b                   	pop    ebx
c001b935:	5e                   	pop    esi
c001b936:	c3                   	ret    
c001b937:	83 ec 08             	sub    esp,0x8
c001b93a:	68 6a b2 02 c0       	push   0xc002b26a
c001b93f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b942:	e8 6d 4e fe ff       	call   c00007b4 <strcmp>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	85 c0                	test   eax,eax
c001b94c:	74 98                	je     c001b8e6 <sysCallOpen(regs*)+0x8f>
c001b94e:	83 ec 08             	sub    esp,0x8
c001b951:	68 69 b2 02 c0       	push   0xc002b269
c001b956:	56                   	push   esi
c001b957:	e8 b3 fe ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	85 c0                	test   eax,eax
c001b961:	75 83                	jne    c001b8e6 <sysCallOpen(regs*)+0x8f>
c001b963:	83 ec 08             	sub    esp,0x8
c001b966:	68 8f b2 02 c0       	push   0xc002b28f
c001b96b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b96e:	e8 9c fe ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	85 c0                	test   eax,eax
c001b978:	0f 85 d9 00 00 00    	jne    c001ba57 <sysCallOpen(regs*)+0x200>
c001b97e:	83 ec 08             	sub    esp,0x8
c001b981:	68 94 b2 02 c0       	push   0xc002b294
c001b986:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b989:	e8 81 fe ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	85 c0                	test   eax,eax
c001b993:	0f 85 be 00 00 00    	jne    c001ba57 <sysCallOpen(regs*)+0x200>
c001b999:	83 ec 08             	sub    esp,0x8
c001b99c:	68 90 b2 02 c0       	push   0xc002b290
c001b9a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a4:	e8 0b 4e fe ff       	call   c00007b4 <strcmp>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	85 c0                	test   eax,eax
c001b9ae:	0f 84 a3 00 00 00    	je     c001ba57 <sysCallOpen(regs*)+0x200>
c001b9b4:	83 ec 08             	sub    esp,0x8
c001b9b7:	68 8f b2 02 c0       	push   0xc002b28f
c001b9bc:	56                   	push   esi
c001b9bd:	e8 4d fe ff ff       	call   c001b80f <string_ends_with(char const*, char const*)>
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	85 c0                	test   eax,eax
c001b9c7:	0f 85 8a 00 00 00    	jne    c001ba57 <sysCallOpen(regs*)+0x200>
c001b9cd:	83 ec 0c             	sub    esp,0xc
c001b9d0:	68 14 01 00 00       	push   0x114
c001b9d5:	e8 4a 3c ff ff       	call   c000f624 <malloc>
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	89 c6                	mov    esi,eax
c001b9df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9ea:	56                   	push   esi
c001b9eb:	e8 5c 74 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	85 f6                	test   esi,esi
c001b9f5:	0f 84 29 ff ff ff    	je     c001b924 <sysCallOpen(regs*)+0xcd>
c001b9fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b9fe:	0f b6 c2             	movzx  eax,dl
c001ba01:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ba04:	89 d0                	mov    eax,edx
c001ba06:	83 e0 01             	and    eax,0x1
c001ba09:	f6 c2 02             	test   dl,0x2
c001ba0c:	74 03                	je     c001ba11 <sysCallOpen(regs*)+0x1ba>
c001ba0e:	83 c8 02             	or     eax,0x2
c001ba11:	f6 c2 04             	test   dl,0x4
c001ba14:	74 03                	je     c001ba19 <sysCallOpen(regs*)+0x1c2>
c001ba16:	83 c8 04             	or     eax,0x4
c001ba19:	f6 c2 08             	test   dl,0x8
c001ba1c:	74 03                	je     c001ba21 <sysCallOpen(regs*)+0x1ca>
c001ba1e:	83 c8 0a             	or     eax,0xa
c001ba21:	83 e2 10             	and    edx,0x10
c001ba24:	74 03                	je     c001ba29 <sysCallOpen(regs*)+0x1d2>
c001ba26:	83 c8 12             	or     eax,0x12
c001ba29:	83 ec 08             	sub    esp,0x8
c001ba2c:	50                   	push   eax
c001ba2d:	56                   	push   esi
c001ba2e:	e8 7d 74 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	85 c0                	test   eax,eax
c001ba38:	0f 85 e6 fe ff ff    	jne    c001b924 <sysCallOpen(regs*)+0xcd>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	56                   	push   esi
c001ba42:	e8 71 5a ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001ba47:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba4a:	89 02                	mov    DWORD PTR [edx],eax
c001ba4c:	c1 f8 1f             	sar    eax,0x1f
c001ba4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba52:	e9 bd fe ff ff       	jmp    c001b914 <sysCallOpen(regs*)+0xbd>
c001ba57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba5a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001ba60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba67:	e9 ab fe ff ff       	jmp    c001b917 <sysCallOpen(regs*)+0xc0>

c001ba6c <Sys::loadSyscalls()>:
c001ba6c:	c7 05 00 e2 02 c0 22 ac 01 c0 	mov    DWORD PTR ds:0xc002e200,0xc001ac22
c001ba76:	c7 05 04 e2 02 c0 84 a8 01 c0 	mov    DWORD PTR ds:0xc002e204,0xc001a884
c001ba80:	c7 05 08 e2 02 c0 d7 a9 01 c0 	mov    DWORD PTR ds:0xc002e208,0xc001a9d7
c001ba8a:	c7 05 0c e2 02 c0 ba ab 01 c0 	mov    DWORD PTR ds:0xc002e20c,0xc001abba
c001ba94:	c7 05 10 e2 02 c0 6f a9 01 c0 	mov    DWORD PTR ds:0xc002e210,0xc001a96f
c001ba9e:	c7 05 14 e2 02 c0 bb a8 01 c0 	mov    DWORD PTR ds:0xc002e214,0xc001a8bb
c001baa8:	c7 05 18 e2 02 c0 9c a8 01 c0 	mov    DWORD PTR ds:0xc002e218,0xc001a89c
c001bab2:	c7 05 1c e2 02 c0 2c aa 01 c0 	mov    DWORD PTR ds:0xc002e21c,0xc001aa2c
c001babc:	c7 05 24 e2 02 c0 34 b1 01 c0 	mov    DWORD PTR ds:0xc002e224,0xc001b134
c001bac6:	c7 05 20 e2 02 c0 57 b8 01 c0 	mov    DWORD PTR ds:0xc002e220,0xc001b857
c001bad0:	c7 05 28 e2 02 c0 bc b1 01 c0 	mov    DWORD PTR ds:0xc002e228,0xc001b1bc
c001bada:	c7 05 2c e2 02 c0 23 ae 01 c0 	mov    DWORD PTR ds:0xc002e22c,0xc001ae23
c001bae4:	c7 05 30 e2 02 c0 5d ac 01 c0 	mov    DWORD PTR ds:0xc002e230,0xc001ac5d
c001baee:	c7 05 34 e2 02 c0 62 ac 01 c0 	mov    DWORD PTR ds:0xc002e234,0xc001ac62
c001baf8:	c7 05 38 e2 02 c0 97 b2 01 c0 	mov    DWORD PTR ds:0xc002e238,0xc001b297
c001bb02:	c7 05 3c e2 02 c0 31 b2 01 c0 	mov    DWORD PTR ds:0xc002e23c,0xc001b231
c001bb0c:	c7 05 40 e2 02 c0 0b af 01 c0 	mov    DWORD PTR ds:0xc002e240,0xc001af0b
c001bb16:	c7 05 44 e2 02 c0 74 af 01 c0 	mov    DWORD PTR ds:0xc002e244,0xc001af74
c001bb20:	c7 05 48 e2 02 c0 f1 af 01 c0 	mov    DWORD PTR ds:0xc002e248,0xc001aff1
c001bb2a:	c7 05 4c e2 02 c0 67 ac 01 c0 	mov    DWORD PTR ds:0xc002e24c,0xc001ac67
c001bb34:	c7 05 50 e2 02 c0 07 b3 01 c0 	mov    DWORD PTR ds:0xc002e250,0xc001b307
c001bb3e:	c7 05 54 e2 02 c0 21 b3 01 c0 	mov    DWORD PTR ds:0xc002e254,0xc001b321
c001bb48:	c7 05 58 e2 02 c0 21 b3 01 c0 	mov    DWORD PTR ds:0xc002e258,0xc001b321
c001bb52:	c7 05 5c e2 02 c0 62 b3 01 c0 	mov    DWORD PTR ds:0xc002e25c,0xc001b362
c001bb5c:	c7 05 60 e2 02 c0 c6 b3 01 c0 	mov    DWORD PTR ds:0xc002e260,0xc001b3c6
c001bb66:	c7 05 64 e2 02 c0 71 ac 01 c0 	mov    DWORD PTR ds:0xc002e264,0xc001ac71
c001bb70:	c7 05 68 e2 02 c0 2a b4 01 c0 	mov    DWORD PTR ds:0xc002e268,0xc001b42a
c001bb7a:	c7 05 6c e2 02 c0 e0 ad 01 c0 	mov    DWORD PTR ds:0xc002e26c,0xc001ade0
c001bb84:	c7 05 70 e2 02 c0 76 b4 01 c0 	mov    DWORD PTR ds:0xc002e270,0xc001b476
c001bb8e:	c7 05 74 e2 02 c0 b1 ae 01 c0 	mov    DWORD PTR ds:0xc002e274,0xc001aeb1
c001bb98:	c7 05 78 e2 02 c0 f9 b4 01 c0 	mov    DWORD PTR ds:0xc002e278,0xc001b4f9
c001bba2:	c7 05 7c e2 02 c0 74 b0 01 c0 	mov    DWORD PTR ds:0xc002e27c,0xc001b074
c001bbac:	c7 05 80 e2 02 c0 20 b5 01 c0 	mov    DWORD PTR ds:0xc002e280,0xc001b520
c001bbb6:	c7 05 84 e2 02 c0 78 b5 01 c0 	mov    DWORD PTR ds:0xc002e284,0xc001b578
c001bbc0:	c7 05 88 e2 02 c0 25 b6 01 c0 	mov    DWORD PTR ds:0xc002e288,0xc001b625
c001bbca:	c7 05 8c e2 02 c0 81 ac 01 c0 	mov    DWORD PTR ds:0xc002e28c,0xc001ac81
c001bbd4:	c7 05 90 e2 02 c0 eb ac 01 c0 	mov    DWORD PTR ds:0xc002e290,0xc001aceb
c001bbde:	c7 05 94 e2 02 c0 31 ad 01 c0 	mov    DWORD PTR ds:0xc002e294,0xc001ad31
c001bbe8:	c7 05 98 e2 02 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc002e298,0xc001b744
c001bbf2:	c7 05 9c e2 02 c0 3c b3 01 c0 	mov    DWORD PTR ds:0xc002e29c,0xc001b33c
c001bbfc:	c7 05 a0 e2 02 c0 82 ad 01 c0 	mov    DWORD PTR ds:0xc002e2a0,0xc001ad82
c001bc06:	c7 05 a4 e2 02 c0 b6 b7 01 c0 	mov    DWORD PTR ds:0xc002e2a4,0xc001b7b6
c001bc10:	c7 05 a8 e2 02 c0 fb b7 01 c0 	mov    DWORD PTR ds:0xc002e2a8,0xc001b7fb
c001bc1a:	c7 05 ac e2 02 c0 c7 a8 01 c0 	mov    DWORD PTR ds:0xc002e2ac,0xc001a8c7
c001bc24:	c7 05 b0 e2 02 c0 48 aa 01 c0 	mov    DWORD PTR ds:0xc002e2b0,0xc001aa48
c001bc2e:	c7 05 b4 e2 02 c0 70 ab 01 c0 	mov    DWORD PTR ds:0xc002e2b4,0xc001ab70
c001bc38:	c3                   	ret    

c001bc39 <Sys::systemCall(regs*, void*)>:
c001bc39:	53                   	push   ebx
c001bc3a:	83 ec 08             	sub    esp,0x8
c001bc3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc41:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bc44:	83 f8 7f             	cmp    eax,0x7f
c001bc47:	77 16                	ja     c001bc5f <Sys::systemCall(regs*, void*)+0x26>
c001bc49:	8b 14 85 00 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e00]
c001bc50:	85 d2                	test   edx,edx
c001bc52:	74 0b                	je     c001bc5f <Sys::systemCall(regs*, void*)+0x26>
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	53                   	push   ebx
c001bc58:	ff d2                	call   edx
c001bc5a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bc5d:	eb 0d                	jmp    c001bc6c <Sys::systemCall(regs*, void*)+0x33>
c001bc5f:	52                   	push   edx
c001bc60:	52                   	push   edx
c001bc61:	50                   	push   eax
c001bc62:	68 99 b2 02 c0       	push   0xc002b299
c001bc67:	e8 87 6c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc74:	31 d2                	xor    edx,edx
c001bc76:	83 c4 08             	add    esp,0x8
c001bc79:	5b                   	pop    ebx
c001bc7a:	c3                   	ret    

c001bc7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bc7b:	55                   	push   ebp
c001bc7c:	89 e5                	mov    ebp,esp
c001bc7e:	57                   	push   edi
c001bc7f:	56                   	push   esi
c001bc80:	53                   	push   ebx
c001bc81:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bc87:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bc8a:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bc8d:	85 c0                	test   eax,eax
c001bc8f:	0f 95 c1             	setne  cl
c001bc92:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bc96:	0f 94 c2             	sete   dl
c001bc99:	84 d1                	test   cl,dl
c001bc9b:	74 26                	je     c001bcc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bc9d:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bca4:	74 1d                	je     c001bcc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bca6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bca9:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bcaf:	89 d6                	mov    esi,edx
c001bcb1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bcb7:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bcbd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcc0:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bcc3:	83 ec 0c             	sub    esp,0xc
c001bcc6:	05 ff 0f 00 00       	add    eax,0xfff
c001bccb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bcce:	6a 01                	push   0x1
c001bcd0:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bcd6:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bcdc:	e8 22 5c ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	89 c6                	mov    esi,eax
c001bce6:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bcec:	0f 86 21 01 00 00    	jbe    c001be13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bcf2:	c1 eb 0c             	shr    ebx,0xc
c001bcf5:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bcff:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bd05:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bd08:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd0b:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bd11:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bd14:	29 d8                	sub    eax,ebx
c001bd16:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bd1c:	0f 83 f4 00 00 00    	jae    c001be16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bd22:	83 ec 0c             	sub    esp,0xc
c001bd25:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bd2b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bd2e:	3d 00 10 00 00       	cmp    eax,0x1000
c001bd33:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bd35:	52                   	push   edx
c001bd36:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bd3c:	52                   	push   edx
c001bd3d:	76 05                	jbe    c001bd44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bd3f:	b8 00 10 00 00       	mov    eax,0x1000
c001bd44:	31 d2                	xor    edx,edx
c001bd46:	52                   	push   edx
c001bd47:	50                   	push   eax
c001bd48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bd4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd4e:	83 c4 20             	add    esp,0x20
c001bd51:	85 c0                	test   eax,eax
c001bd53:	74 1f                	je     c001bd74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bd55:	51                   	push   ecx
c001bd56:	51                   	push   ecx
c001bd57:	50                   	push   eax
c001bd58:	68 ad b2 02 c0       	push   0xc002b2ad
c001bd5d:	e8 91 6b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bd62:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd65:	e8 fd 5e ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	31 c0                	xor    eax,eax
c001bd6f:	e9 7c 01 00 00       	jmp    c001bef0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bd74:	e8 bd 14 00 00       	call   c001d236 <lockScheduler()>
c001bd79:	e8 43 3f ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001bd7e:	6a 07                	push   0x7
c001bd80:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bd86:	56                   	push   esi
c001bd87:	50                   	push   eax
c001bd88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd8e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bd91:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bd97:	e8 32 62 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001bd9c:	83 c4 0c             	add    esp,0xc
c001bd9f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bda5:	6a 00                	push   0x0
c001bda7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bdad:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bdb0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bdb6:	e8 7d 60 ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001bdbb:	58                   	pop    eax
c001bdbc:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bdc2:	5a                   	pop    edx
c001bdc3:	68 07 04 00 00       	push   0x407
c001bdc8:	53                   	push   ebx
c001bdc9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bdcf:	50                   	push   eax
c001bdd0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bdd6:	6a 00                	push   0x0
c001bdd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bddd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bde0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bde6:	e8 9d 65 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bdeb:	83 c4 1c             	add    esp,0x1c
c001bdee:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bdf4:	68 00 10 00 00       	push   0x1000
c001bdf9:	50                   	push   eax
c001bdfa:	56                   	push   esi
c001bdfb:	e8 a0 48 fe ff       	call   c00006a0 <memcpy>
c001be00:	e8 33 14 00 00       	call   c001d238 <unlockScheduler()>
c001be05:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	e9 f5 fe ff ff       	jmp    c001bd08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001be13:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001be16:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001be20:	0f 86 bc 00 00 00    	jbe    c001bee2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001be26:	e8 0b 14 00 00       	call   c001d236 <lockScheduler()>
c001be2b:	51                   	push   ecx
c001be2c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001be32:	6a 00                	push   0x0
c001be34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be3c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001be42:	e8 f1 5f ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001be47:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	c1 e8 0c             	shr    eax,0xc
c001be53:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001be5d:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001be63:	e8 59 3e ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001be68:	6a 07                	push   0x7
c001be6a:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001be70:	56                   	push   esi
c001be71:	50                   	push   eax
c001be72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be78:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be7b:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001be81:	e8 48 61 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001be86:	58                   	pop    eax
c001be87:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001be8d:	5a                   	pop    edx
c001be8e:	68 07 04 00 00       	push   0x407
c001be93:	53                   	push   ebx
c001be94:	81 c3 00 10 00 00    	add    ebx,0x1000
c001be9a:	50                   	push   eax
c001be9b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bea1:	6a 00                	push   0x0
c001bea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001beb1:	e8 d2 64 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001beb6:	83 c4 1c             	add    esp,0x1c
c001beb9:	68 00 10 00 00       	push   0x1000
c001bebe:	6a 00                	push   0x0
c001bec0:	56                   	push   esi
c001bec1:	e8 fe 47 fe ff       	call   c00006c4 <memset>
c001bec6:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001becc:	83 c4 10             	add    esp,0x10
c001becf:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bed5:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bedb:	77 86                	ja     c001be63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bedd:	e8 56 13 00 00       	call   c001d238 <unlockScheduler()>
c001bee2:	83 ec 0c             	sub    esp,0xc
c001bee5:	56                   	push   esi
c001bee6:	e8 7c 5d ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001beeb:	83 c4 10             	add    esp,0x10
c001beee:	b0 01                	mov    al,0x1
c001bef0:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bef3:	5b                   	pop    ebx
c001bef4:	5e                   	pop    esi
c001bef5:	5f                   	pop    edi
c001bef6:	5d                   	pop    ebp
c001bef7:	c3                   	ret    

c001bef8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bef8:	55                   	push   ebp
c001bef9:	57                   	push   edi
c001befa:	56                   	push   esi
c001befb:	53                   	push   ebx
c001befc:	83 ec 48             	sub    esp,0x48
c001beff:	68 14 01 00 00       	push   0x114
c001bf04:	e8 1b 37 ff ff       	call   c000f624 <malloc>
c001bf09:	83 c4 0c             	add    esp,0xc
c001bf0c:	89 c6                	mov    esi,eax
c001bf0e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bf12:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bf16:	50                   	push   eax
c001bf17:	e8 30 6f ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001bf1c:	58                   	pop    eax
c001bf1d:	5a                   	pop    edx
c001bf1e:	6a 01                	push   0x1
c001bf20:	56                   	push   esi
c001bf21:	e8 8a 6f ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001bf26:	83 c4 10             	add    esp,0x10
c001bf29:	85 c0                	test   eax,eax
c001bf2b:	0f 85 47 01 00 00    	jne    c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf31:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bf39:	83 ec 0c             	sub    esp,0xc
c001bf3c:	6a 34                	push   0x34
c001bf3e:	e8 e1 36 ff ff       	call   c000f624 <malloc>
c001bf43:	89 c3                	mov    ebx,eax
c001bf45:	58                   	pop    eax
c001bf46:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf48:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bf4c:	57                   	push   edi
c001bf4d:	53                   	push   ebx
c001bf4e:	6a 00                	push   0x0
c001bf50:	6a 34                	push   0x34
c001bf52:	56                   	push   esi
c001bf53:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf56:	83 c4 20             	add    esp,0x20
c001bf59:	85 c0                	test   eax,eax
c001bf5b:	0f 85 17 01 00 00    	jne    c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf61:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bf67:	0f 85 0b 01 00 00    	jne    c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf70:	85 c0                	test   eax,eax
c001bf72:	0f 84 00 01 00 00    	je     c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf78:	31 d2                	xor    edx,edx
c001bf7a:	55                   	push   ebp
c001bf7b:	52                   	push   edx
c001bf7c:	50                   	push   eax
c001bf7d:	56                   	push   esi
c001bf7e:	e8 eb 6f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	85 c0                	test   eax,eax
c001bf88:	0f 85 ea 00 00 00    	jne    c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf8e:	83 ec 0c             	sub    esp,0xc
c001bf91:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf94:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bf98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf9c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bfa0:	0f af c2             	imul   eax,edx
c001bfa3:	50                   	push   eax
c001bfa4:	e8 7b 36 ff ff       	call   c000f624 <malloc>
c001bfa9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bfab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bfaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfb6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bfba:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bfbe:	0f af c2             	imul   eax,edx
c001bfc1:	99                   	cdq    
c001bfc2:	52                   	push   edx
c001bfc3:	50                   	push   eax
c001bfc4:	56                   	push   esi
c001bfc5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfc8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bfcb:	83 c4 20             	add    esp,0x20
c001bfce:	85 c0                	test   eax,eax
c001bfd0:	0f 84 a2 00 00 00    	je     c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfd6:	31 d2                	xor    edx,edx
c001bfd8:	51                   	push   ecx
c001bfd9:	52                   	push   edx
c001bfda:	50                   	push   eax
c001bfdb:	56                   	push   esi
c001bfdc:	e8 8d 6f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	85 c0                	test   eax,eax
c001bfe6:	0f 85 8c 00 00 00    	jne    c001c078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfec:	83 ec 0c             	sub    esp,0xc
c001bfef:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bff3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bff7:	31 ed                	xor    ebp,ebp
c001bff9:	0f af c2             	imul   eax,edx
c001bffc:	50                   	push   eax
c001bffd:	e8 22 36 ff ff       	call   c000f624 <malloc>
c001c002:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c008:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c00f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c013:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c017:	0f af c2             	imul   eax,edx
c001c01a:	99                   	cdq    
c001c01b:	52                   	push   edx
c001c01c:	50                   	push   eax
c001c01d:	56                   	push   esi
c001c01e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c021:	83 c4 20             	add    esp,0x20
c001c024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c02c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c030:	0f 86 80 00 00 00    	jbe    c001c0b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c036:	0f b7 fd             	movzx  edi,bp
c001c039:	c1 e7 05             	shl    edi,0x5
c001c03c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c040:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c043:	75 6b                	jne    c001c0b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c045:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c048:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c04c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c04f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c053:	52                   	push   edx
c001c054:	31 d2                	xor    edx,edx
c001c056:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c059:	52                   	push   edx
c001c05a:	50                   	push   eax
c001c05b:	56                   	push   esi
c001c05c:	e8 0d 6f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	85 c0                	test   eax,eax
c001c066:	74 17                	je     c001c07f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c068:	83 ec 0c             	sub    esp,0xc
c001c06b:	68 d8 b2 02 c0       	push   0xc002b2d8
c001c070:	e8 7e 68 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c075:	83 c4 10             	add    esp,0x10
c001c078:	31 c0                	xor    eax,eax
c001c07a:	e9 87 00 00 00       	jmp    c001c106 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c085:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c088:	50                   	push   eax
c001c089:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c08d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c091:	56                   	push   esi
c001c092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c096:	e8 e0 fb ff ff       	call   c001bc7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c09f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c0a3:	83 c4 20             	add    esp,0x20
c001c0a6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c0aa:	73 04                	jae    c001c0b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c0ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0b0:	45                   	inc    ebp
c001c0b1:	e9 76 ff ff ff       	jmp    c001c02c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c0b6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c0ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0c2:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c0c8:	83 ec 0c             	sub    esp,0xc
c001c0cb:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c0d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c0d6:	05 00 10 00 00       	add    eax,0x1000
c001c0db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e2:	e8 4d 35 ff ff       	call   c000f634 <free>
c001c0e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0ea:	e8 45 35 ff ff       	call   c000f634 <free>
c001c0ef:	58                   	pop    eax
c001c0f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0f4:	e8 3b 35 ff ff       	call   c000f634 <free>
c001c0f9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0fc:	e8 0d 6e ff ff       	call   c0012f0e <File::close()>
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	b0 01                	mov    al,0x1
c001c106:	83 c4 3c             	add    esp,0x3c
c001c109:	5b                   	pop    ebx
c001c10a:	5e                   	pop    esi
c001c10b:	5f                   	pop    edi
c001c10c:	5d                   	pop    ebp
c001c10d:	c3                   	ret    

c001c10e <Thr::runtimeReferenceHelper()>:
c001c10e:	83 ec 18             	sub    esp,0x18
c001c111:	68 e0 b2 02 c0       	push   0xc002b2e0
c001c116:	e8 d8 67 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c11b:	fa                   	cli    
c001c11c:	83 c4 10             	add    esp,0x10
c001c11f:	eb fe                	jmp    c001c11f <Thr::runtimeReferenceHelper()+0x11>

c001c121 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c121:	57                   	push   edi
c001c122:	56                   	push   esi
c001c123:	53                   	push   ebx
c001c124:	31 db                	xor    ebx,ebx
c001c126:	39 1d a0 eb 02 c0    	cmp    DWORD PTR ds:0xc002eba0,ebx
c001c12c:	7e 3c                	jle    c001c16a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c12e:	8b 34 9d 20 eb 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd14e0]
c001c135:	31 ff                	xor    edi,edi
c001c137:	39 3c 9d 20 ea 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd15e0],edi
c001c13e:	7e 27                	jle    c001c167 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c140:	50                   	push   eax
c001c141:	50                   	push   eax
c001c142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c146:	8b 06                	mov    eax,DWORD PTR [esi]
c001c148:	03 04 9d a0 ea 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1560]
c001c14f:	50                   	push   eax
c001c150:	e8 5f 46 fe ff       	call   c00007b4 <strcmp>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	85 c0                	test   eax,eax
c001c15a:	75 05                	jne    c001c161 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c15c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c15f:	eb 0b                	jmp    c001c16c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c161:	83 c6 10             	add    esi,0x10
c001c164:	47                   	inc    edi
c001c165:	eb d0                	jmp    c001c137 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c167:	43                   	inc    ebx
c001c168:	eb bc                	jmp    c001c126 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c16a:	31 c0                	xor    eax,eax
c001c16c:	5b                   	pop    ebx
c001c16d:	5e                   	pop    esi
c001c16e:	5f                   	pop    edi
c001c16f:	c3                   	ret    

c001c170 <Thr::loadKernelSymbolTable(char const*)>:
c001c170:	55                   	push   ebp
c001c171:	57                   	push   edi
c001c172:	56                   	push   esi
c001c173:	53                   	push   ebx
c001c174:	83 ec 68             	sub    esp,0x68
c001c177:	8b 35 f4 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebf4
c001c17d:	68 14 01 00 00       	push   0x114
c001c182:	e8 9d 34 ff ff       	call   c000f624 <malloc>
c001c187:	83 c4 0c             	add    esp,0xc
c001c18a:	89 c3                	mov    ebx,eax
c001c18c:	56                   	push   esi
c001c18d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c191:	50                   	push   eax
c001c192:	e8 b5 6c ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c197:	5e                   	pop    esi
c001c198:	5f                   	pop    edi
c001c199:	6a 01                	push   0x1
c001c19b:	53                   	push   ebx
c001c19c:	e8 0f 6d ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	85 c0                	test   eax,eax
c001c1a6:	74 17                	je     c001c1bf <Thr::loadKernelSymbolTable(char const*)+0x4f>
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	68 02 b3 02 c0       	push   0xc002b302
c001c1b0:	e8 70 da ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	31 c0                	xor    eax,eax
c001c1ba:	e9 5d 02 00 00       	jmp    c001c41c <Thr::loadKernelSymbolTable(char const*)+0x2ac>
c001c1bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c1c7:	83 ec 0c             	sub    esp,0xc
c001c1ca:	6a 34                	push   0x34
c001c1cc:	e8 53 34 ff ff       	call   c000f624 <malloc>
c001c1d1:	59                   	pop    ecx
c001c1d2:	89 c7                	mov    edi,eax
c001c1d4:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c1d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1da:	56                   	push   esi
c001c1db:	57                   	push   edi
c001c1dc:	6a 00                	push   0x0
c001c1de:	6a 34                	push   0x34
c001c1e0:	53                   	push   ebx
c001c1e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1e4:	83 c4 20             	add    esp,0x20
c001c1e7:	85 c0                	test   eax,eax
c001c1e9:	75 bd                	jne    c001c1a8 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c1eb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c1f1:	75 b5                	jne    c001c1a8 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c1f3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c1f6:	85 c0                	test   eax,eax
c001c1f8:	74 ae                	je     c001c1a8 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c1fa:	52                   	push   edx
c001c1fb:	31 d2                	xor    edx,edx
c001c1fd:	52                   	push   edx
c001c1fe:	50                   	push   eax
c001c1ff:	53                   	push   ebx
c001c200:	e8 69 6d ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	85 c0                	test   eax,eax
c001c20a:	75 9c                	jne    c001c1a8 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c20c:	83 ec 0c             	sub    esp,0xc
c001c20f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c213:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c217:	31 ed                	xor    ebp,ebp
c001c219:	0f af c2             	imul   eax,edx
c001c21c:	50                   	push   eax
c001c21d:	e8 02 34 ff ff       	call   c000f624 <malloc>
c001c222:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c228:	89 34 24             	mov    DWORD PTR [esp],esi
c001c22b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c22f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c233:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c237:	0f af c2             	imul   eax,edx
c001c23a:	99                   	cdq    
c001c23b:	52                   	push   edx
c001c23c:	50                   	push   eax
c001c23d:	53                   	push   ebx
c001c23e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c241:	83 c4 20             	add    esp,0x20
c001c244:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c24c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c254:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c25c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c264:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c268:	0f 86 aa 00 00 00    	jbe    c001c318 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c26e:	0f b7 f5             	movzx  esi,bp
c001c271:	6b f6 28             	imul   esi,esi,0x28
c001c274:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c278:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c27b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c27f:	50                   	push   eax
c001c280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c284:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c288:	8b 16                	mov    edx,DWORD PTR [esi]
c001c28a:	6b c0 28             	imul   eax,eax,0x28
c001c28d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c291:	89 d0                	mov    eax,edx
c001c293:	31 d2                	xor    edx,edx
c001c295:	52                   	push   edx
c001c296:	50                   	push   eax
c001c297:	53                   	push   ebx
c001c298:	e8 d1 6c ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c29d:	83 c4 0c             	add    esp,0xc
c001c2a0:	6a 20                	push   0x20
c001c2a2:	6a 00                	push   0x0
c001c2a4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c2a8:	52                   	push   edx
c001c2a9:	e8 16 44 fe ff       	call   c00006c4 <memset>
c001c2ae:	58                   	pop    eax
c001c2af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2b1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c2b5:	51                   	push   ecx
c001c2b6:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c2ba:	52                   	push   edx
c001c2bb:	6a 00                	push   0x0
c001c2bd:	6a 1f                	push   0x1f
c001c2bf:	53                   	push   ebx
c001c2c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2c3:	83 c4 18             	add    esp,0x18
c001c2c6:	68 19 b3 02 c0       	push   0xc002b319
c001c2cb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c2cf:	52                   	push   edx
c001c2d0:	e8 df 44 fe ff       	call   c00007b4 <strcmp>
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	85 c0                	test   eax,eax
c001c2da:	75 0f                	jne    c001c2eb <Thr::loadKernelSymbolTable(char const*)+0x17b>
c001c2dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c2df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2eb:	50                   	push   eax
c001c2ec:	50                   	push   eax
c001c2ed:	68 21 b3 02 c0       	push   0xc002b321
c001c2f2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c2f6:	50                   	push   eax
c001c2f7:	e8 b8 44 fe ff       	call   c00007b4 <strcmp>
c001c2fc:	83 c4 10             	add    esp,0x10
c001c2ff:	85 c0                	test   eax,eax
c001c301:	75 0f                	jne    c001c312 <Thr::loadKernelSymbolTable(char const*)+0x1a2>
c001c303:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c312:	45                   	inc    ebp
c001c313:	e9 4c ff ff ff       	jmp    c001c264 <Thr::loadKernelSymbolTable(char const*)+0xf4>
c001c318:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c31d:	75 10                	jne    c001c32f <Thr::loadKernelSymbolTable(char const*)+0x1bf>
c001c31f:	83 ec 0c             	sub    esp,0xc
c001c322:	68 29 b3 02 c0       	push   0xc002b329
c001c327:	e8 f9 d8 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c334:	75 10                	jne    c001c346 <Thr::loadKernelSymbolTable(char const*)+0x1d6>
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	68 29 b3 02 c0       	push   0xc002b329
c001c33e:	e8 e2 d8 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	31 d2                	xor    edx,edx
c001c348:	50                   	push   eax
c001c349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34d:	52                   	push   edx
c001c34e:	50                   	push   eax
c001c34f:	53                   	push   ebx
c001c350:	e8 19 6c ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c355:	5a                   	pop    edx
c001c356:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c35a:	e8 c5 32 ff ff       	call   c000f624 <malloc>
c001c35f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c367:	31 c9                	xor    ecx,ecx
c001c369:	5e                   	pop    esi
c001c36a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c36c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c370:	55                   	push   ebp
c001c371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c375:	51                   	push   ecx
c001c376:	52                   	push   edx
c001c377:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c37b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c37f:	53                   	push   ebx
c001c380:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c383:	83 c4 14             	add    esp,0x14
c001c386:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c38a:	e8 95 32 ff ff       	call   c000f624 <malloc>
c001c38f:	89 c6                	mov    esi,eax
c001c391:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c393:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c396:	56                   	push   esi
c001c397:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c39b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c39f:	51                   	push   ecx
c001c3a0:	52                   	push   edx
c001c3a1:	53                   	push   ebx
c001c3a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3a9:	8b 15 a0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eba0
c001c3af:	83 c4 1c             	add    esp,0x1c
c001c3b2:	c1 e8 04             	shr    eax,0x4
c001c3b5:	89 04 95 20 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15e0],eax
c001c3bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3c0:	31 d2                	xor    edx,edx
c001c3c2:	52                   	push   edx
c001c3c3:	50                   	push   eax
c001c3c4:	53                   	push   ebx
c001c3c5:	e8 a4 6b ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c3ca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c3cc:	31 d2                	xor    edx,edx
c001c3ce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3d1:	56                   	push   esi
c001c3d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3d6:	52                   	push   edx
c001c3d7:	50                   	push   eax
c001c3d8:	53                   	push   ebx
c001c3d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3dc:	83 c4 14             	add    esp,0x14
c001c3df:	53                   	push   ebx
c001c3e0:	e8 29 6b ff ff       	call   c0012f0e <File::close()>
c001c3e5:	5d                   	pop    ebp
c001c3e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c3ea:	e8 45 32 ff ff       	call   c000f634 <free>
c001c3ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3f2:	e8 3d 32 ff ff       	call   c000f634 <free>
c001c3f7:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c001c3fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c400:	8d 50 01             	lea    edx,[eax+0x1]
c001c403:	89 0c 85 20 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14e0],ecx
c001c40a:	89 34 85 a0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1560],esi
c001c411:	89 15 a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,edx
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	b0 01                	mov    al,0x1
c001c41c:	83 c4 5c             	add    esp,0x5c
c001c41f:	5b                   	pop    ebx
c001c420:	5e                   	pop    esi
c001c421:	5f                   	pop    edi
c001c422:	5d                   	pop    ebp
c001c423:	c3                   	ret    

c001c424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c424:	55                   	push   ebp
c001c425:	57                   	push   edi
c001c426:	56                   	push   esi
c001c427:	53                   	push   ebx
c001c428:	81 ec 68 03 00 00    	sub    esp,0x368
c001c42e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c435:	8b 1d f4 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002ebf4
c001c43b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c43f:	68 14 01 00 00       	push   0x114
c001c444:	e8 db 31 ff ff       	call   c000f624 <malloc>
c001c449:	83 c4 0c             	add    esp,0xc
c001c44c:	89 c5                	mov    ebp,eax
c001c44e:	53                   	push   ebx
c001c44f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c456:	50                   	push   eax
c001c457:	e8 f0 69 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c45c:	5e                   	pop    esi
c001c45d:	5f                   	pop    edi
c001c45e:	6a 01                	push   0x1
c001c460:	55                   	push   ebp
c001c461:	e8 4a 6a ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	85 c0                	test   eax,eax
c001c46b:	0f 85 8d 06 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c471:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c479:	83 ec 0c             	sub    esp,0xc
c001c47c:	6a 34                	push   0x34
c001c47e:	e8 a1 31 ff ff       	call   c000f624 <malloc>
c001c483:	5b                   	pop    ebx
c001c484:	89 c7                	mov    edi,eax
c001c486:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c48a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c48d:	53                   	push   ebx
c001c48e:	57                   	push   edi
c001c48f:	6a 00                	push   0x0
c001c491:	6a 34                	push   0x34
c001c493:	55                   	push   ebp
c001c494:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c497:	83 c4 20             	add    esp,0x20
c001c49a:	85 c0                	test   eax,eax
c001c49c:	0f 85 5c 06 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4a2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c4a8:	0f 85 50 06 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4ae:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c4b1:	85 c0                	test   eax,eax
c001c4b3:	0f 84 45 06 00 00    	je     c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4b9:	31 d2                	xor    edx,edx
c001c4bb:	51                   	push   ecx
c001c4bc:	52                   	push   edx
c001c4bd:	50                   	push   eax
c001c4be:	55                   	push   ebp
c001c4bf:	e8 aa 6a ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c4c4:	83 c4 10             	add    esp,0x10
c001c4c7:	85 c0                	test   eax,eax
c001c4c9:	0f 85 2f 06 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4cf:	83 ec 0c             	sub    esp,0xc
c001c4d2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c4d5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c4dd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4e1:	0f af c2             	imul   eax,edx
c001c4e4:	50                   	push   eax
c001c4e5:	e8 3a 31 ff ff       	call   c000f624 <malloc>
c001c4ea:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c4ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4f8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4fc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c500:	0f af c2             	imul   eax,edx
c001c503:	99                   	cdq    
c001c504:	52                   	push   edx
c001c505:	50                   	push   eax
c001c506:	55                   	push   ebp
c001c507:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c50a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c50d:	83 c4 20             	add    esp,0x20
c001c510:	85 c0                	test   eax,eax
c001c512:	0f 84 e6 05 00 00    	je     c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c518:	52                   	push   edx
c001c519:	31 d2                	xor    edx,edx
c001c51b:	52                   	push   edx
c001c51c:	50                   	push   eax
c001c51d:	55                   	push   ebp
c001c51e:	e8 4b 6a ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	85 c0                	test   eax,eax
c001c528:	0f 85 d0 05 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c535:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c539:	31 f6                	xor    esi,esi
c001c53b:	0f af c2             	imul   eax,edx
c001c53e:	50                   	push   eax
c001c53f:	e8 e0 30 ff ff       	call   c000f624 <malloc>
c001c544:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c547:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c54b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c54e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c552:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c556:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c55a:	0f af c2             	imul   eax,edx
c001c55d:	99                   	cdq    
c001c55e:	52                   	push   edx
c001c55f:	50                   	push   eax
c001c560:	55                   	push   ebp
c001c561:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c564:	83 c4 20             	add    esp,0x20
c001c567:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c56b:	0f 86 8a 00 00 00    	jbe    c001c5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c571:	0f b7 de             	movzx  ebx,si
c001c574:	c1 e3 05             	shl    ebx,0x5
c001c577:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c57b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c57e:	75 75                	jne    c001c5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c580:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c583:	31 d2                	xor    edx,edx
c001c585:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c589:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c58c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c590:	50                   	push   eax
c001c591:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c594:	52                   	push   edx
c001c595:	50                   	push   eax
c001c596:	55                   	push   ebp
c001c597:	e8 d2 69 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c59c:	83 c4 10             	add    esp,0x10
c001c59f:	85 c0                	test   eax,eax
c001c5a1:	0f 85 57 05 00 00    	jne    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c5a7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c5ae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c5b1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c5b5:	31 d2                	xor    edx,edx
c001c5b7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c5bb:	83 ec 0c             	sub    esp,0xc
c001c5be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5c2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c5c9:	50                   	push   eax
c001c5ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5d2:	52                   	push   edx
c001c5d3:	50                   	push   eax
c001c5d4:	55                   	push   ebp
c001c5d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5d8:	83 c4 1c             	add    esp,0x1c
c001c5db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c5de:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c5e1:	50                   	push   eax
c001c5e2:	6a 00                	push   0x0
c001c5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c5ec:	50                   	push   eax
c001c5ed:	e8 d2 40 fe ff       	call   c00006c4 <memset>
c001c5f2:	83 c4 10             	add    esp,0x10
c001c5f5:	46                   	inc    esi
c001c5f6:	e9 6c ff ff ff       	jmp    c001c567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c5fb:	53                   	push   ebx
c001c5fc:	31 db                	xor    ebx,ebx
c001c5fe:	68 00 01 00 00       	push   0x100
c001c603:	6a 00                	push   0x0
c001c605:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c609:	50                   	push   eax
c001c60a:	e8 b5 40 fe ff       	call   c00006c4 <memset>
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	68 00 01 00 00       	push   0x100
c001c617:	6a 00                	push   0x0
c001c619:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c620:	50                   	push   eax
c001c621:	e8 9e 40 fe ff       	call   c00006c4 <memset>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c631:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c639:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c641:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c649:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c651:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c655:	0f 86 30 01 00 00    	jbe    c001c78b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c65b:	0f b7 f3             	movzx  esi,bx
c001c65e:	6b f6 28             	imul   esi,esi,0x28
c001c661:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c665:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c66c:	52                   	push   edx
c001c66d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c671:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c675:	8b 06                	mov    eax,DWORD PTR [esi]
c001c677:	6b d2 28             	imul   edx,edx,0x28
c001c67a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c67e:	31 d2                	xor    edx,edx
c001c680:	52                   	push   edx
c001c681:	50                   	push   eax
c001c682:	55                   	push   ebp
c001c683:	e8 e6 68 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c688:	83 c4 0c             	add    esp,0xc
c001c68b:	6a 20                	push   0x20
c001c68d:	6a 00                	push   0x0
c001c68f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c696:	51                   	push   ecx
c001c697:	e8 28 40 fe ff       	call   c00006c4 <memset>
c001c69c:	59                   	pop    ecx
c001c69d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6a0:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6a4:	52                   	push   edx
c001c6a5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c6ac:	51                   	push   ecx
c001c6ad:	6a 00                	push   0x0
c001c6af:	6a 1f                	push   0x1f
c001c6b1:	55                   	push   ebp
c001c6b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6b5:	83 c4 1c             	add    esp,0x1c
c001c6b8:	6a 09                	push   0x9
c001c6ba:	68 43 b3 02 c0       	push   0xc002b343
c001c6bf:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c6c6:	51                   	push   ecx
c001c6c7:	e8 71 3f fe ff       	call   c000063d <memcmp>
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	85 c0                	test   eax,eax
c001c6d1:	75 21                	jne    c001c6f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c6db:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c6df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c6e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6e6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c6ed:	89 d0                	mov    eax,edx
c001c6ef:	40                   	inc    eax
c001c6f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6f4:	50                   	push   eax
c001c6f5:	6a 09                	push   0x9
c001c6f7:	68 4d b3 02 c0       	push   0xc002b34d
c001c6fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c703:	50                   	push   eax
c001c704:	e8 34 3f fe ff       	call   c000063d <memcmp>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	85 c0                	test   eax,eax
c001c70e:	75 21                	jne    c001c731 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c718:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c71c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c720:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c723:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c72a:	89 d0                	mov    eax,edx
c001c72c:	40                   	inc    eax
c001c72d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c731:	50                   	push   eax
c001c732:	50                   	push   eax
c001c733:	68 19 b3 02 c0       	push   0xc002b319
c001c738:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c73f:	50                   	push   eax
c001c740:	e8 6f 40 fe ff       	call   c00007b4 <strcmp>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	85 c0                	test   eax,eax
c001c74a:	75 0f                	jne    c001c75b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c74c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c74f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c75b:	50                   	push   eax
c001c75c:	50                   	push   eax
c001c75d:	68 21 b3 02 c0       	push   0xc002b321
c001c762:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c769:	50                   	push   eax
c001c76a:	e8 45 40 fe ff       	call   c00007b4 <strcmp>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	85 c0                	test   eax,eax
c001c774:	75 0f                	jne    c001c785 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c776:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c779:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c77d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c781:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c785:	43                   	inc    ebx
c001c786:	e9 c6 fe ff ff       	jmp    c001c651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c78b:	31 d2                	xor    edx,edx
c001c78d:	50                   	push   eax
c001c78e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c792:	52                   	push   edx
c001c793:	50                   	push   eax
c001c794:	55                   	push   ebp
c001c795:	e8 d4 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c79a:	58                   	pop    eax
c001c79b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c79f:	e8 80 2e ff ff       	call   c000f624 <malloc>
c001c7a4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c7ab:	31 d2                	xor    edx,edx
c001c7ad:	58                   	pop    eax
c001c7ae:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7b2:	53                   	push   ebx
c001c7b3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c7b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7bb:	52                   	push   edx
c001c7bc:	50                   	push   eax
c001c7bd:	55                   	push   ebp
c001c7be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7c1:	83 c4 14             	add    esp,0x14
c001c7c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7c8:	e8 57 2e ff ff       	call   c000f624 <malloc>
c001c7cd:	31 d2                	xor    edx,edx
c001c7cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7d3:	83 c4 0c             	add    esp,0xc
c001c7d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7da:	52                   	push   edx
c001c7db:	50                   	push   eax
c001c7dc:	55                   	push   ebp
c001c7dd:	e8 8c 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c7e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7e5:	31 d2                	xor    edx,edx
c001c7e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c7ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7f2:	52                   	push   edx
c001c7f3:	50                   	push   eax
c001c7f4:	55                   	push   ebp
c001c7f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7f8:	83 c4 20             	add    esp,0x20
c001c7fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c803:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c807:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c80b:	0f 84 f1 02 00 00    	je     c001cb02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c811:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c818:	31 d2                	xor    edx,edx
c001c81a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c81e:	c1 e8 03             	shr    eax,0x3
c001c821:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c825:	51                   	push   ecx
c001c826:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c82a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c82e:	52                   	push   edx
c001c82f:	50                   	push   eax
c001c830:	55                   	push   ebp
c001c831:	e8 38 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c836:	5b                   	pop    ebx
c001c837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c83b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c842:	e8 dd 2d ff ff       	call   c000f624 <malloc>
c001c847:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c84a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c84e:	31 d2                	xor    edx,edx
c001c850:	5e                   	pop    esi
c001c851:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c855:	50                   	push   eax
c001c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c85a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c85e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c865:	52                   	push   edx
c001c866:	50                   	push   eax
c001c867:	55                   	push   ebp
c001c868:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c86b:	83 c4 20             	add    esp,0x20
c001c86e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c876:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c87a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c87e:	0f 8d 62 02 00 00    	jge    c001cae6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c884:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c888:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c88c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c891:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c894:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c89c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c8a0:	89 d8                	mov    eax,ebx
c001c8a2:	c1 e8 08             	shr    eax,0x8
c001c8a5:	89 c6                	mov    esi,eax
c001c8a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c8ab:	c1 e6 04             	shl    esi,0x4
c001c8ae:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c8b2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c8b5:	85 d2                	test   edx,edx
c001c8b7:	0f 85 bf 00 00 00    	jne    c001c97c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8bd:	83 ec 0c             	sub    esp,0xc
c001c8c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c8c4:	03 06                	add    eax,DWORD PTR [esi]
c001c8c6:	50                   	push   eax
c001c8c7:	e8 55 f8 ff ff       	call   c001c121 <Thr::getAddressOfKernelSymbol(char const*)>
c001c8cc:	83 c4 10             	add    esp,0x10
c001c8cf:	89 c2                	mov    edx,eax
c001c8d1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c8d6:	85 c0                	test   eax,eax
c001c8d8:	0f 85 9e 00 00 00    	jne    c001c97c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8de:	83 ec 0c             	sub    esp,0xc
c001c8e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c8e5:	03 06                	add    eax,DWORD PTR [esi]
c001c8e7:	50                   	push   eax
c001c8e8:	e8 f1 19 ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001c8ed:	83 c4 10             	add    esp,0x10
c001c8f0:	89 c2                	mov    edx,eax
c001c8f2:	85 c0                	test   eax,eax
c001c8f4:	0f 85 82 00 00 00    	jne    c001c97c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c8fe:	50                   	push   eax
c001c8ff:	50                   	push   eax
c001c900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c904:	03 06                	add    eax,DWORD PTR [esi]
c001c906:	50                   	push   eax
c001c907:	68 57 b3 02 c0       	push   0xc002b357
c001c90c:	e8 e2 5f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c911:	58                   	pop    eax
c001c912:	5a                   	pop    edx
c001c913:	68 71 b3 02 c0       	push   0xc002b371
c001c918:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c91f:	50                   	push   eax
c001c920:	e8 3e 3e fe ff       	call   c0000763 <strcpy>
c001c925:	59                   	pop    ecx
c001c926:	58                   	pop    eax
c001c927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c92b:	03 06                	add    eax,DWORD PTR [esi]
c001c92d:	50                   	push   eax
c001c92e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c935:	50                   	push   eax
c001c936:	e8 df 3e fe ff       	call   c000081a <strcat>
c001c93b:	58                   	pop    eax
c001c93c:	5a                   	pop    edx
c001c93d:	68 07 b4 02 c0       	push   0xc002b407
c001c942:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c949:	50                   	push   eax
c001c94a:	e8 cb 3e fe ff       	call   c000081a <strcat>
c001c94f:	83 c4 10             	add    esp,0x10
c001c952:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c957:	0f 84 43 01 00 00    	je     c001caa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c967:	50                   	push   eax
c001c968:	e8 b8 d2 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c974:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c978:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c97c:	80 fb 01             	cmp    bl,0x1
c001c97f:	75 7d                	jne    c001c9fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c981:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c988:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c98c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c990:	01 ce                	add    esi,ecx
c001c992:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c998:	0f 94 c0             	sete   al
c001c99b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c9a1:	0f 94 c3             	sete   bl
c001c9a4:	09 c3                	or     ebx,eax
c001c9a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9a8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c9ad:	74 36                	je     c001c9e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c9af:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c9b2:	84 db                	test   bl,bl
c001c9b4:	75 0a                	jne    c001c9c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c9b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9ba:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c9be:	76 37                	jbe    c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9c0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c9c4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c9c9:	0f 84 d1 00 00 00    	je     c001caa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	68 88 b3 02 c0       	push   0xc002b388
c001c9d7:	e8 49 d2 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c9e3:	eb 12                	jmp    c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9e5:	01 c1                	add    ecx,eax
c001c9e7:	84 db                	test   bl,bl
c001c9e9:	75 0c                	jne    c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9ef:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c9f3:	77 02                	ja     c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9f5:	01 d1                	add    ecx,edx
c001c9f7:	89 0e                	mov    DWORD PTR [esi],ecx
c001c9f9:	e9 df 00 00 00       	jmp    c001cadd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c9fe:	80 fb 02             	cmp    bl,0x2
c001ca01:	75 71                	jne    c001ca74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ca03:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ca0a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ca0e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ca12:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ca18:	74 15                	je     c001ca2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca1a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ca20:	74 0d                	je     c001ca2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca26:	83 e8 04             	sub    eax,0x4
c001ca29:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ca2d:	76 1f                	jbe    c001ca4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ca2f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ca33:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca38:	74 66                	je     c001caa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca3a:	83 ec 0c             	sub    esp,0xc
c001ca3d:	68 a4 b3 02 c0       	push   0xc002b3a4
c001ca42:	e8 de d1 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ca47:	83 c4 10             	add    esp,0x10
c001ca4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca4e:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca50:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ca55:	74 13                	je     c001ca6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ca57:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ca5b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ca62:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ca66:	01 c8                	add    eax,ecx
c001ca68:	eb 04                	jmp    c001ca6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ca6a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ca6e:	01 c2                	add    edx,eax
c001ca70:	89 16                	mov    DWORD PTR [esi],edx
c001ca72:	eb 69                	jmp    c001cadd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ca74:	0f b6 db             	movzx  ebx,bl
c001ca77:	50                   	push   eax
c001ca78:	50                   	push   eax
c001ca79:	53                   	push   ebx
c001ca7a:	68 c0 b3 02 c0       	push   0xc002b3c0
c001ca7f:	e8 6f 5e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca8c:	74 12                	je     c001caa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	68 cb b3 02 c0       	push   0xc002b3cb
c001ca96:	e8 8a d1 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	eb 3d                	jmp    c001cadd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	55                   	push   ebp
c001caa4:	e8 65 64 ff ff       	call   c0012f0e <File::close()>
c001caa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001caaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cab2:	59                   	pop    ecx
c001cab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cab7:	e8 78 2b ff ff       	call   c000f634 <free>
c001cabc:	5b                   	pop    ebx
c001cabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cac1:	e8 6e 2b ff ff       	call   c000f634 <free>
c001cac6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cac9:	e8 66 2b ff ff       	call   c000f634 <free>
c001cace:	5e                   	pop    esi
c001cacf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad3:	e8 5c 2b ff ff       	call   c000f634 <free>
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	eb 21                	jmp    c001cafe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cadd:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cae1:	e9 90 fd ff ff       	jmp    c001c876 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cae6:	83 ec 0c             	sub    esp,0xc
c001cae9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caed:	e8 42 2b ff ff       	call   c000f634 <free>
c001caf2:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	e9 05 fd ff ff       	jmp    c001c803 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cafe:	31 c0                	xor    eax,eax
c001cb00:	eb 33                	jmp    c001cb35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cb02:	83 ec 0c             	sub    esp,0xc
c001cb05:	55                   	push   ebp
c001cb06:	e8 03 64 ff ff       	call   c0012f0e <File::close()>
c001cb0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb14:	58                   	pop    eax
c001cb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb19:	e8 16 2b ff ff       	call   c000f634 <free>
c001cb1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb21:	e8 0e 2b ff ff       	call   c000f634 <free>
c001cb26:	5a                   	pop    edx
c001cb27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb2b:	e8 04 2b ff ff       	call   c000f634 <free>
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	b0 01                	mov    al,0x1
c001cb35:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cb3b:	5b                   	pop    ebx
c001cb3c:	5e                   	pop    esi
c001cb3d:	5f                   	pop    edi
c001cb3e:	5d                   	pop    ebp
c001cb3f:	c3                   	ret    

c001cb40 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cb40:	56                   	push   esi
c001cb41:	31 d2                	xor    edx,edx
c001cb43:	53                   	push   ebx
c001cb44:	8b 1d 00 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e400
c001cb4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb4e:	39 d3                	cmp    ebx,edx
c001cb50:	7e 1b                	jle    c001cb6d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cb52:	8b 04 95 20 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd19e0]
c001cb59:	39 c8                	cmp    eax,ecx
c001cb5b:	77 0d                	ja     c001cb6a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cb5d:	8b 34 95 20 e4 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1be0]
c001cb64:	01 c6                	add    esi,eax
c001cb66:	39 ce                	cmp    esi,ecx
c001cb68:	77 05                	ja     c001cb6f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cb6a:	42                   	inc    edx
c001cb6b:	eb e1                	jmp    c001cb4e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cb6d:	31 c0                	xor    eax,eax
c001cb6f:	5b                   	pop    ebx
c001cb70:	5e                   	pop    esi
c001cb71:	c3                   	ret    

c001cb72 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cb72:	53                   	push   ebx
c001cb73:	31 c0                	xor    eax,eax
c001cb75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb79:	8b 1d 00 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e400
c001cb7f:	39 c3                	cmp    ebx,eax
c001cb81:	7e 22                	jle    c001cba5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cb83:	8b 14 85 20 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd19e0]
c001cb8a:	39 ca                	cmp    edx,ecx
c001cb8c:	77 14                	ja     c001cba2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cb8e:	03 14 85 20 e4 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1be0]
c001cb95:	39 ca                	cmp    edx,ecx
c001cb97:	76 09                	jbe    c001cba2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cb99:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c001cba0:	eb 05                	jmp    c001cba7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cba2:	40                   	inc    eax
c001cba3:	eb da                	jmp    c001cb7f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cba5:	31 c0                	xor    eax,eax
c001cba7:	5b                   	pop    ebx
c001cba8:	c3                   	ret    

c001cba9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cba9:	53                   	push   ebx
c001cbaa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cbae:	53                   	push   ebx
c001cbaf:	e8 8c ff ff ff       	call   c001cb40 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cbb4:	5a                   	pop    edx
c001cbb5:	31 d2                	xor    edx,edx
c001cbb7:	85 c0                	test   eax,eax
c001cbb9:	74 04                	je     c001cbbf <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cbbb:	89 da                	mov    edx,ebx
c001cbbd:	29 c2                	sub    edx,eax
c001cbbf:	89 d0                	mov    eax,edx
c001cbc1:	5b                   	pop    ebx
c001cbc2:	c3                   	ret    

c001cbc3 <Thr::loadDLL(char const*, bool)>:
c001cbc3:	55                   	push   ebp
c001cbc4:	57                   	push   edi
c001cbc5:	56                   	push   esi
c001cbc6:	53                   	push   ebx
c001cbc7:	81 ec 34 01 00 00    	sub    esp,0x134
c001cbcd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cbd4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001cbdb:	56                   	push   esi
c001cbdc:	68 e3 b3 02 c0       	push   0xc002b3e3
c001cbe1:	e8 0d 5d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001cbe6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cbed:	e8 32 2a ff ff       	call   c000f624 <malloc>
c001cbf2:	83 c4 0c             	add    esp,0xc
c001cbf5:	89 c3                	mov    ebx,eax
c001cbf7:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c001cbfd:	56                   	push   esi
c001cbfe:	50                   	push   eax
c001cbff:	e8 48 62 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001cc04:	83 c4 10             	add    esp,0x10
c001cc07:	85 db                	test   ebx,ebx
c001cc09:	75 3c                	jne    c001cc47 <Thr::loadDLL(char const*, bool)+0x84>
c001cc0b:	89 e8                	mov    eax,ebp
c001cc0d:	84 c0                	test   al,al
c001cc0f:	0f 84 b0 01 00 00    	je     c001cdc5 <Thr::loadDLL(char const*, bool)+0x202>
c001cc15:	50                   	push   eax
c001cc16:	50                   	push   eax
c001cc17:	68 f4 b3 02 c0       	push   0xc002b3f4
c001cc1c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cc20:	57                   	push   edi
c001cc21:	e8 3d 3b fe ff       	call   c0000763 <strcpy>
c001cc26:	58                   	pop    eax
c001cc27:	5a                   	pop    edx
c001cc28:	56                   	push   esi
c001cc29:	57                   	push   edi
c001cc2a:	e8 eb 3b fe ff       	call   c000081a <strcat>
c001cc2f:	59                   	pop    ecx
c001cc30:	58                   	pop    eax
c001cc31:	68 07 b4 02 c0       	push   0xc002b407
c001cc36:	57                   	push   edi
c001cc37:	e8 de 3b fe ff       	call   c000081a <strcat>
c001cc3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc3f:	e8 e1 cf ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001cc44:	83 c4 10             	add    esp,0x10
c001cc47:	50                   	push   eax
c001cc48:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cc4c:	50                   	push   eax
c001cc4d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cc51:	50                   	push   eax
c001cc52:	53                   	push   ebx
c001cc53:	e8 04 65 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001cc58:	83 c4 10             	add    esp,0x10
c001cc5b:	85 db                	test   ebx,ebx
c001cc5d:	74 0c                	je     c001cc6b <Thr::loadDLL(char const*, bool)+0xa8>
c001cc5f:	83 ec 0c             	sub    esp,0xc
c001cc62:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc64:	53                   	push   ebx
c001cc65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc68:	83 c4 10             	add    esp,0x10
c001cc6b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cc70:	75 0a                	jne    c001cc7c <Thr::loadDLL(char const*, bool)+0xb9>
c001cc72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc76:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cc7a:	75 3c                	jne    c001ccb8 <Thr::loadDLL(char const*, bool)+0xf5>
c001cc7c:	89 e8                	mov    eax,ebp
c001cc7e:	84 c0                	test   al,al
c001cc80:	0f 84 3d 01 00 00    	je     c001cdc3 <Thr::loadDLL(char const*, bool)+0x200>
c001cc86:	50                   	push   eax
c001cc87:	50                   	push   eax
c001cc88:	68 f4 b3 02 c0       	push   0xc002b3f4
c001cc8d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cc91:	53                   	push   ebx
c001cc92:	e8 cc 3a fe ff       	call   c0000763 <strcpy>
c001cc97:	58                   	pop    eax
c001cc98:	5a                   	pop    edx
c001cc99:	56                   	push   esi
c001cc9a:	53                   	push   ebx
c001cc9b:	e8 7a 3b fe ff       	call   c000081a <strcat>
c001cca0:	59                   	pop    ecx
c001cca1:	5f                   	pop    edi
c001cca2:	68 07 b4 02 c0       	push   0xc002b407
c001cca7:	53                   	push   ebx
c001cca8:	e8 6d 3b fe ff       	call   c000081a <strcat>
c001ccad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccb0:	e8 70 cf ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	e8 d6 4d ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001ccbd:	51                   	push   ecx
c001ccbe:	6a 03                	push   0x3
c001ccc0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ccc4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ccc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001ccce:	83 d3 00             	adc    ebx,0x0
c001ccd1:	89 ca                	mov    edx,ecx
c001ccd3:	89 d1                	mov    ecx,edx
c001ccd5:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001ccd9:	51                   	push   ecx
c001ccda:	50                   	push   eax
c001ccdb:	e8 ee 53 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001cce0:	89 34 24             	mov    DWORD PTR [esp],esi
c001cce3:	89 c3                	mov    ebx,eax
c001cce5:	e8 f7 39 fe ff       	call   c00006e1 <strlen>
c001ccea:	8b 3d 00 e4 02 c0    	mov    edi,DWORD PTR ds:0xc002e400
c001ccf0:	40                   	inc    eax
c001ccf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccf4:	e8 2b 29 ff ff       	call   c000f624 <malloc>
c001ccf9:	89 04 bd 20 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17e0],eax
c001cd00:	5f                   	pop    edi
c001cd01:	58                   	pop    eax
c001cd02:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c001cd07:	56                   	push   esi
c001cd08:	ff 34 85 20 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17e0]
c001cd0f:	e8 4f 3a fe ff       	call   c0000763 <strcpy>
c001cd14:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c001cd19:	8d 50 01             	lea    edx,[eax+0x1]
c001cd1c:	89 1c 85 20 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19e0],ebx
c001cd23:	89 15 00 e4 02 c0    	mov    DWORD PTR ds:0xc002e400,edx
c001cd29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd2d:	83 c4 0c             	add    esp,0xc
c001cd30:	89 14 85 20 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1be0],edx
c001cd37:	6a 01                	push   0x1
c001cd39:	53                   	push   ebx
c001cd3a:	56                   	push   esi
c001cd3b:	e8 e4 f6 ff ff       	call   c001c424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cd40:	83 c4 10             	add    esp,0x10
c001cd43:	89 c7                	mov    edi,eax
c001cd45:	fe c8                	dec    al
c001cd47:	74 16                	je     c001cd5f <Thr::loadDLL(char const*, bool)+0x19c>
c001cd49:	89 e8                	mov    eax,ebp
c001cd4b:	84 c0                	test   al,al
c001cd4d:	74 10                	je     c001cd5f <Thr::loadDLL(char const*, bool)+0x19c>
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	68 09 b4 02 c0       	push   0xc002b409
c001cd57:	e8 c9 ce ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	31 f6                	xor    esi,esi
c001cd61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd69:	05 ff 0f 00 00       	add    eax,0xfff
c001cd6e:	83 d2 00             	adc    edx,0x0
c001cd71:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cd75:	c1 ea 0c             	shr    edx,0xc
c001cd78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cd80:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cd84:	ba 00 00 00 00       	mov    edx,0x0
c001cd89:	89 d0                	mov    eax,edx
c001cd8b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001cd8f:	73 2c                	jae    c001cdbd <Thr::loadDLL(char const*, bool)+0x1fa>
c001cd91:	e8 fd 4c ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001cd96:	89 f5                	mov    ebp,esi
c001cd98:	c1 e5 0c             	shl    ebp,0xc
c001cd9b:	52                   	push   edx
c001cd9c:	01 dd                	add    ebp,ebx
c001cd9e:	52                   	push   edx
c001cd9f:	55                   	push   ebp
c001cda0:	50                   	push   eax
c001cda1:	e8 a2 4e ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cdac:	75 0c                	jne    c001cdba <Thr::loadDLL(char const*, bool)+0x1f7>
c001cdae:	83 ec 0c             	sub    esp,0xc
c001cdb1:	55                   	push   ebp
c001cdb2:	e8 80 2e ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	46                   	inc    esi
c001cdbb:	eb a4                	jmp    c001cd61 <Thr::loadDLL(char const*, bool)+0x19e>
c001cdbd:	89 f8                	mov    eax,edi
c001cdbf:	84 c0                	test   al,al
c001cdc1:	75 02                	jne    c001cdc5 <Thr::loadDLL(char const*, bool)+0x202>
c001cdc3:	31 db                	xor    ebx,ebx
c001cdc5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cdcb:	89 d8                	mov    eax,ebx
c001cdcd:	5b                   	pop    ebx
c001cdce:	5e                   	pop    esi
c001cdcf:	5f                   	pop    edi
c001cdd0:	5d                   	pop    ebp
c001cdd1:	c3                   	ret    

c001cdd2 <Thr::executeDLL(unsigned long, void*)>:
c001cdd2:	56                   	push   esi
c001cdd3:	53                   	push   ebx
c001cdd4:	51                   	push   ecx
c001cdd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cddd:	85 db                	test   ebx,ebx
c001cddf:	75 10                	jne    c001cdf1 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	68 28 b4 02 c0       	push   0xc002b428
c001cde9:	e8 37 ce ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cdf5:	89 d8                	mov    eax,ebx
c001cdf7:	5a                   	pop    edx
c001cdf8:	5b                   	pop    ebx
c001cdf9:	5e                   	pop    esi
c001cdfa:	ff e0                	jmp    eax

c001cdfc <changeTSS>:
c001cdfc:	83 ec 14             	sub    esp,0x14
c001cdff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce04:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ce07:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ce0c:	c1 e2 15             	shl    edx,0x15
c001ce0f:	29 d0                	sub    eax,edx
c001ce11:	50                   	push   eax
c001ce12:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001ce17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce1d:	05 7c 11 00 00       	add    eax,0x117c
c001ce22:	50                   	push   eax
c001ce23:	e8 1a 44 ff ff       	call   c0011242 <TSS::setESP(unsigned long)>
c001ce28:	83 c4 1c             	add    esp,0x1c
c001ce2b:	c3                   	ret    

c001ce2c <Process::addArgs(char**)>:
c001ce2c:	57                   	push   edi
c001ce2d:	56                   	push   esi
c001ce2e:	53                   	push   ebx
c001ce2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce37:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ce41:	85 ff                	test   edi,edi
c001ce43:	74 3d                	je     c001ce82 <Process::addArgs(char**)+0x56>
c001ce45:	8b 07                	mov    eax,DWORD PTR [edi]
c001ce47:	85 c0                	test   eax,eax
c001ce49:	74 37                	je     c001ce82 <Process::addArgs(char**)+0x56>
c001ce4b:	31 db                	xor    ebx,ebx
c001ce4d:	83 ec 0c             	sub    esp,0xc
c001ce50:	50                   	push   eax
c001ce51:	e8 8b 38 fe ff       	call   c00006e1 <strlen>
c001ce56:	40                   	inc    eax
c001ce57:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce5a:	e8 c5 27 ff ff       	call   c000f624 <malloc>
c001ce5f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ce66:	5a                   	pop    edx
c001ce67:	59                   	pop    ecx
c001ce68:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ce6b:	43                   	inc    ebx
c001ce6c:	50                   	push   eax
c001ce6d:	e8 f1 38 fe ff       	call   c0000763 <strcpy>
c001ce72:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ce7e:	85 c0                	test   eax,eax
c001ce80:	75 cb                	jne    c001ce4d <Process::addArgs(char**)+0x21>
c001ce82:	5b                   	pop    ebx
c001ce83:	5e                   	pop    esi
c001ce84:	5f                   	pop    edi
c001ce85:	c3                   	ret    

c001ce86 <Process::Process(char const*, Process*, char**)>:
c001ce86:	56                   	push   esi
c001ce87:	53                   	push   ebx
c001ce88:	83 ec 14             	sub    esp,0x14
c001ce8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce8f:	05 0c 02 00 00       	add    eax,0x20c
c001ce94:	bb 07 00 00 00       	mov    ebx,0x7
c001ce99:	89 c6                	mov    esi,eax
c001ce9b:	85 db                	test   ebx,ebx
c001ce9d:	78 12                	js     c001ceb1 <Process::Process(char const*, Process*, char**)+0x2b>
c001ce9f:	83 ec 0c             	sub    esp,0xc
c001cea2:	56                   	push   esi
c001cea3:	e8 6a b2 00 00       	call   c0028112 <ThreadControlBlock::ThreadControlBlock()>
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	83 c6 63             	add    esi,0x63
c001ceae:	4b                   	dec    ebx
c001ceaf:	eb ea                	jmp    c001ce9b <Process::Process(char const*, Process*, char**)+0x15>
c001ceb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cec3:	e8 ae cb ff ff       	call   c0019a76 <Krnl::newProcessEnv(Process*)>
c001cec8:	83 c4 10             	add    esp,0x10
c001cecb:	89 c2                	mov    edx,eax
c001cecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ced7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cee4:	a1 30 cc 02 c0       	mov    eax,ds:0xc002cc30
c001cee9:	8d 50 01             	lea    edx,[eax+0x1]
c001ceec:	89 15 30 cc 02 c0    	mov    DWORD PTR ds:0xc002cc30,edx
c001cef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cef6:	89 02                	mov    DWORD PTR [edx],eax
c001cef8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cf00:	83 ec 0c             	sub    esp,0xc
c001cf03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf07:	e8 18 27 ff ff       	call   c000f624 <malloc>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	89 c3                	mov    ebx,eax
c001cf11:	83 ec 08             	sub    esp,0x8
c001cf14:	6a 00                	push   0x0
c001cf16:	53                   	push   ebx
c001cf17:	e8 5a 55 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf23:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cf29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cf37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf3f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cf45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf49:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf4f:	85 c0                	test   eax,eax
c001cf51:	74 42                	je     c001cf95 <Process::Process(char const*, Process*, char**)+0x10f>
c001cf53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf57:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf5d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cf63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf67:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cf6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf71:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf77:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cf7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf81:	05 0c 01 00 00       	add    eax,0x10c
c001cf86:	83 ec 08             	sub    esp,0x8
c001cf89:	52                   	push   edx
c001cf8a:	50                   	push   eax
c001cf8b:	e8 d3 37 fe ff       	call   c0000763 <strcpy>
c001cf90:	83 c4 10             	add    esp,0x10
c001cf93:	eb 63                	jmp    c001cff8 <Process::Process(char const*, Process*, char**)+0x172>
c001cf95:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cf9d:	83 ec 0c             	sub    esp,0xc
c001cfa0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfa4:	e8 7b 26 ff ff       	call   c000f624 <malloc>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	89 c3                	mov    ebx,eax
c001cfae:	83 ec 08             	sub    esp,0x8
c001cfb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfb5:	53                   	push   ebx
c001cfb6:	e8 85 3f ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001cfbb:	83 c4 10             	add    esp,0x10
c001cfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cfc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfcc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cfd2:	83 ec 0c             	sub    esp,0xc
c001cfd5:	50                   	push   eax
c001cfd6:	e8 58 33 ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe2:	05 0c 01 00 00       	add    eax,0x10c
c001cfe7:	83 ec 08             	sub    esp,0x8
c001cfea:	68 52 b4 02 c0       	push   0xc002b452
c001cfef:	50                   	push   eax
c001cff0:	e8 6e 37 fe ff       	call   c0000763 <strcpy>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffc:	83 c0 0c             	add    eax,0xc
c001cfff:	83 ec 08             	sub    esp,0x8
c001d002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d006:	50                   	push   eax
c001d007:	e8 57 37 fe ff       	call   c0000763 <strcpy>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	83 ec 08             	sub    esp,0x8
c001d012:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d016:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d01a:	e8 0d fe ff ff       	call   c001ce2c <Process::addArgs(char**)>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	83 ec 08             	sub    esp,0x8
c001d025:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d029:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d02d:	e8 c6 ee ff ff       	call   c001bef8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d039:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d03d:	83 f0 01             	xor    eax,0x1
c001d040:	88 c2                	mov    dl,al
c001d042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d046:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d04c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d051:	83 ec 08             	sub    esp,0x8
c001d054:	50                   	push   eax
c001d055:	68 50 b5 02 c0       	push   0xc002b550
c001d05a:	e8 94 58 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	90                   	nop
c001d063:	83 c4 14             	add    esp,0x14
c001d066:	5b                   	pop    ebx
c001d067:	5e                   	pop    esi
c001d068:	c3                   	ret    
c001d069:	90                   	nop

c001d06a <Process::Process(bool, char const*, Process*, char**)>:
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	83 ec 24             	sub    esp,0x24
c001d06f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d073:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d07b:	05 0c 02 00 00       	add    eax,0x20c
c001d080:	bb 07 00 00 00       	mov    ebx,0x7
c001d085:	89 c6                	mov    esi,eax
c001d087:	85 db                	test   ebx,ebx
c001d089:	78 12                	js     c001d09d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d08b:	83 ec 0c             	sub    esp,0xc
c001d08e:	56                   	push   esi
c001d08f:	e8 7e b0 00 00       	call   c0028112 <ThreadControlBlock::ThreadControlBlock()>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	83 c6 63             	add    esi,0x63
c001d09a:	4b                   	dec    ebx
c001d09b:	eb ea                	jmp    c001d087 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d09d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0a1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0af:	e8 c2 c9 ff ff       	call   c0019a76 <Krnl::newProcessEnv(Process*)>
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	89 c2                	mov    edx,eax
c001d0b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0bd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d0c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0c7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d0d0:	a1 30 cc 02 c0       	mov    eax,ds:0xc002cc30
c001d0d5:	8d 50 01             	lea    edx,[eax+0x1]
c001d0d8:	89 15 30 cc 02 c0    	mov    DWORD PTR ds:0xc002cc30,edx
c001d0de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0e2:	89 02                	mov    DWORD PTR [edx],eax
c001d0e4:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d0ec:	83 ec 0c             	sub    esp,0xc
c001d0ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d0f3:	e8 2c 25 ff ff       	call   c000f624 <malloc>
c001d0f8:	83 c4 10             	add    esp,0x10
c001d0fb:	89 c3                	mov    ebx,eax
c001d0fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d102:	83 ec 08             	sub    esp,0x8
c001d105:	50                   	push   eax
c001d106:	53                   	push   ebx
c001d107:	e8 6a 53 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001d10c:	83 c4 10             	add    esp,0x10
c001d10f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d113:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d11d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d127:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d12b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d12f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d139:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d13f:	85 c0                	test   eax,eax
c001d141:	74 42                	je     c001d185 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d147:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d14d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d157:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d161:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d167:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d171:	05 0c 01 00 00       	add    eax,0x10c
c001d176:	83 ec 08             	sub    esp,0x8
c001d179:	52                   	push   edx
c001d17a:	50                   	push   eax
c001d17b:	e8 e3 35 fe ff       	call   c0000763 <strcpy>
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	eb 63                	jmp    c001d1e8 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d185:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d18d:	83 ec 0c             	sub    esp,0xc
c001d190:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d194:	e8 8b 24 ff ff       	call   c000f624 <malloc>
c001d199:	83 c4 10             	add    esp,0x10
c001d19c:	89 c3                	mov    ebx,eax
c001d19e:	83 ec 08             	sub    esp,0x8
c001d1a1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d1a5:	53                   	push   ebx
c001d1a6:	e8 95 3d ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001d1ab:	83 c4 10             	add    esp,0x10
c001d1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1b2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d1b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d1c2:	83 ec 0c             	sub    esp,0xc
c001d1c5:	50                   	push   eax
c001d1c6:	e8 68 31 ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1d2:	05 0c 01 00 00       	add    eax,0x10c
c001d1d7:	83 ec 08             	sub    esp,0x8
c001d1da:	68 52 b4 02 c0       	push   0xc002b452
c001d1df:	50                   	push   eax
c001d1e0:	e8 7e 35 fe ff       	call   c0000763 <strcpy>
c001d1e5:	83 c4 10             	add    esp,0x10
c001d1e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1ec:	83 c0 0c             	add    eax,0xc
c001d1ef:	83 ec 08             	sub    esp,0x8
c001d1f2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d1f6:	50                   	push   eax
c001d1f7:	e8 67 35 fe ff       	call   c0000763 <strcpy>
c001d1fc:	83 c4 10             	add    esp,0x10
c001d1ff:	83 ec 08             	sub    esp,0x8
c001d202:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d206:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d20a:	e8 1d fc ff ff       	call   c001ce2c <Process::addArgs(char**)>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	90                   	nop
c001d213:	83 c4 24             	add    esp,0x24
c001d216:	5b                   	pop    ebx
c001d217:	5e                   	pop    esi
c001d218:	c3                   	ret    

c001d219 <disableIRQs()>:
c001d219:	fa                   	cli    
c001d21a:	ff 05 cc eb 02 c0    	inc    DWORD PTR ds:0xc002ebcc
c001d220:	c3                   	ret    

c001d221 <getIRQNestingLevel()>:
c001d221:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c001d226:	c3                   	ret    

c001d227 <enableIRQs()>:
c001d227:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c001d22c:	48                   	dec    eax
c001d22d:	a3 cc eb 02 c0       	mov    ds:0xc002ebcc,eax
c001d232:	75 01                	jne    c001d235 <enableIRQs()+0xe>
c001d234:	fb                   	sti    
c001d235:	c3                   	ret    

c001d236 <lockScheduler()>:
c001d236:	eb e1                	jmp    c001d219 <disableIRQs()>

c001d238 <unlockScheduler()>:
c001d238:	eb ed                	jmp    c001d227 <enableIRQs()>

c001d23a <userModeEntryPoint(void*)>:
c001d23a:	83 ec 0c             	sub    esp,0xc
c001d23d:	e8 f6 ff ff ff       	call   c001d238 <unlockScheduler()>
c001d242:	fb                   	sti    
c001d243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d248:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d24b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d251:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d255:	83 c4 0c             	add    esp,0xc
c001d258:	e9 cd 30 fe ff       	jmp    c000032a <goToUsermode>

c001d25d <lockStuff()>:
c001d25d:	e8 b7 ff ff ff       	call   c001d219 <disableIRQs()>
c001d262:	ff 05 c8 eb 02 c0    	inc    DWORD PTR ds:0xc002ebc8
c001d268:	c3                   	ret    

c001d269 <taskStartupFunction>:
c001d269:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d26e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d271:	c3                   	ret    

c001d272 <updateTimeUsed()>:
c001d272:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c001d277:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d27d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d284:	74 50                	je     c001d2d6 <updateTimeUsed()+0x64>
c001d286:	57                   	push   edi
c001d287:	56                   	push   esi
c001d288:	53                   	push   ebx
c001d289:	0f 31                	rdtsc  
c001d28b:	89 c1                	mov    ecx,eax
c001d28d:	a3 08 ec 02 c0       	mov    ds:0xc002ec08,eax
c001d292:	2b 0d f8 eb 02 c0    	sub    ecx,DWORD PTR ds:0xc002ebf8
c001d298:	89 d3                	mov    ebx,edx
c001d29a:	89 0d 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,ecx
c001d2a0:	1b 1d fc eb 02 c0    	sbb    ebx,DWORD PTR ds:0xc002ebfc
c001d2a6:	a3 f8 eb 02 c0       	mov    ds:0xc002ebf8,eax
c001d2ab:	89 1d 04 ec 02 c0    	mov    DWORD PTR ds:0xc002ec04,ebx
c001d2b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2b6:	89 15 0c ec 02 c0    	mov    DWORD PTR ds:0xc002ec0c,edx
c001d2bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d2bf:	89 15 fc eb 02 c0    	mov    DWORD PTR ds:0xc002ebfc,edx
c001d2c5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d2c8:	01 f1                	add    ecx,esi
c001d2ca:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d2cd:	11 fb                	adc    ebx,edi
c001d2cf:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d2d2:	5b                   	pop    ebx
c001d2d3:	5e                   	pop    esi
c001d2d4:	5f                   	pop    edi
c001d2d5:	c3                   	ret    
c001d2d6:	c3                   	ret    

c001d2d7 <switchToThread(ThreadControlBlock*)>:
c001d2d7:	53                   	push   ebx
c001d2d8:	83 ec 08             	sub    esp,0x8
c001d2db:	a1 c8 eb 02 c0       	mov    eax,ds:0xc002ebc8
c001d2e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2e4:	85 c0                	test   eax,eax
c001d2e6:	75 30                	jne    c001d318 <switchToThread(ThreadControlBlock*)+0x41>
c001d2e8:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d2eb:	3c ff                	cmp    al,0xff
c001d2ed:	74 25                	je     c001d314 <switchToThread(ThreadControlBlock*)+0x3d>
c001d2ef:	0f b6 d0             	movzx  edx,al
c001d2f2:	b8 84 03 00 00       	mov    eax,0x384
c001d2f7:	29 d0                	sub    eax,edx
c001d2f9:	c1 e0 10             	shl    eax,0x10
c001d2fc:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d2ff:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d302:	e8 6b ff ff ff       	call   c001d272 <updateTimeUsed()>
c001d307:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d30b:	83 c4 08             	add    esp,0x8
c001d30e:	5b                   	pop    ebx
c001d30f:	e9 4e 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d314:	31 c0                	xor    eax,eax
c001d316:	eb e7                	jmp    c001d2ff <switchToThread(ThreadControlBlock*)+0x28>
c001d318:	c7 05 c4 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x1
c001d322:	83 c4 08             	add    esp,0x8
c001d325:	5b                   	pop    ebx
c001d326:	c3                   	ret    
c001d327:	90                   	nop

c001d328 <Semaphore::Semaphore(int)>:
c001d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d330:	89 10                	mov    DWORD PTR [eax],edx
c001d332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d336:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d33d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d341:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d34c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d353:	90                   	nop
c001d354:	c3                   	ret    
c001d355:	90                   	nop

c001d356 <Mutex::Mutex()>:
c001d356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d35a:	6a 01                	push   0x1
c001d35c:	50                   	push   eax
c001d35d:	e8 c6 ff ff ff       	call   c001d328 <Semaphore::Semaphore(int)>
c001d362:	83 c4 08             	add    esp,0x8
c001d365:	90                   	nop
c001d366:	c3                   	ret    
c001d367:	90                   	nop

c001d368 <Process::createThread(void (*)(void*), void*, int)>:
c001d368:	55                   	push   ebp
c001d369:	31 c9                	xor    ecx,ecx
c001d36b:	57                   	push   edi
c001d36c:	56                   	push   esi
c001d36d:	53                   	push   ebx
c001d36e:	83 ec 1c             	sub    esp,0x1c
c001d371:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d375:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d37c:	89 f2                	mov    edx,esi
c001d37e:	0f b7 c2             	movzx  eax,dx
c001d381:	83 e2 01             	and    edx,0x1
c001d384:	74 14                	je     c001d39a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d386:	d1 f8                	sar    eax,1
c001d388:	41                   	inc    ecx
c001d389:	89 c2                	mov    edx,eax
c001d38b:	83 f9 10             	cmp    ecx,0x10
c001d38e:	75 ee                	jne    c001d37e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d390:	83 c4 1c             	add    esp,0x1c
c001d393:	31 c0                	xor    eax,eax
c001d395:	5b                   	pop    ebx
c001d396:	5e                   	pop    esi
c001d397:	5f                   	pop    edi
c001d398:	5d                   	pop    ebp
c001d399:	c3                   	ret    
c001d39a:	83 ec 08             	sub    esp,0x8
c001d39d:	b8 01 00 00 00       	mov    eax,0x1
c001d3a2:	d3 e0                	shl    eax,cl
c001d3a4:	09 c6                	or     esi,eax
c001d3a6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d3ac:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d3b3:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d3b6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d3b9:	01 ce                	add    esi,ecx
c001d3bb:	89 f0                	mov    eax,esi
c001d3bd:	c1 e0 05             	shl    eax,0x5
c001d3c0:	01 c6                	add    esi,eax
c001d3c2:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d3c5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d3cb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d3d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d3d5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d3db:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d3e1:	89 ca                	mov    edx,ecx
c001d3e3:	f7 da                	neg    edx
c001d3e5:	c1 e2 15             	shl    edx,0x15
c001d3e8:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d3ee:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d3f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d3f8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d402:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d408:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d40c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d412:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d41c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d426:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d42d:	50                   	push   eax
c001d42e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d432:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d437:	e8 64 ab 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d443:	83 c4 1c             	add    esp,0x1c
c001d446:	5b                   	pop    ebx
c001d447:	5e                   	pop    esi
c001d448:	5f                   	pop    edi
c001d449:	5d                   	pop    ebp
c001d44a:	c3                   	ret    
c001d44b:	90                   	nop

c001d44c <Process::createUserThread()>:
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	68 80 00 00 00       	push   0x80
c001d454:	6a 00                	push   0x0
c001d456:	68 3a d2 01 c0       	push   0xc001d23a
c001d45b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d45f:	e8 04 ff ff ff       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c001d464:	83 c4 1c             	add    esp,0x1c
c001d467:	c3                   	ret    

c001d468 <setupMultitasking(void (*)())>:
c001d468:	56                   	push   esi
c001d469:	53                   	push   ebx
c001d46a:	53                   	push   ebx
c001d46b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d46f:	eb 10                	jmp    c001d481 <setupMultitasking(void (*)())+0x19>
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d479:	e8 74 aa 00 00       	call   c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	83 ec 0c             	sub    esp,0xc
c001d484:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d489:	e8 48 aa 00 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	84 c0                	test   al,al
c001d493:	74 dc                	je     c001d471 <setupMultitasking(void (*)())+0x9>
c001d495:	83 ec 0c             	sub    esp,0xc
c001d498:	68 3f 07 00 00       	push   0x73f
c001d49d:	e8 82 21 ff ff       	call   c000f624 <malloc>
c001d4a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4a9:	89 c3                	mov    ebx,eax
c001d4ab:	6a 00                	push   0x0
c001d4ad:	68 56 b4 02 c0       	push   0xc002b456
c001d4b2:	6a 01                	push   0x1
c001d4b4:	50                   	push   eax
c001d4b5:	e8 b0 fb ff ff       	call   c001d06a <Process::Process(bool, char const*, Process*, char**)>
c001d4ba:	83 c4 18             	add    esp,0x18
c001d4bd:	89 1d f4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebf4,ebx
c001d4c3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d4c9:	68 78 b5 02 c0       	push   0xc002b578
c001d4ce:	e8 20 54 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d4d3:	58                   	pop    eax
c001d4d4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d4da:	e8 d6 35 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c001d4df:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d4e7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d4ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d4f0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d4fa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d500:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d506:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d510:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d51a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d524:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d52a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d530:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d53a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d540:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d54a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d550:	5a                   	pop    edx
c001d551:	59                   	pop    ecx
c001d552:	68 52 b4 02 c0       	push   0xc002b452
c001d557:	50                   	push   eax
c001d558:	e8 06 32 fe ff       	call   c0000763 <strcpy>
c001d55d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d564:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d568:	83 c4 14             	add    esp,0x14
c001d56b:	5b                   	pop    ebx
c001d56c:	5e                   	pop    esi
c001d56d:	e9 e2 2d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d572 <schedule()>:
c001d572:	a1 c8 eb 02 c0       	mov    eax,ds:0xc002ebc8
c001d577:	85 c0                	test   eax,eax
c001d579:	74 0b                	je     c001d586 <schedule()+0x14>
c001d57b:	c7 05 c4 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x1
c001d585:	c3                   	ret    
c001d586:	53                   	push   ebx
c001d587:	83 ec 14             	sub    esp,0x14
c001d58a:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d58f:	e8 42 a9 00 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	84 c0                	test   al,al
c001d599:	75 38                	jne    c001d5d3 <schedule()+0x61>
c001d59b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d5a3:	4a                   	dec    edx
c001d5a4:	74 32                	je     c001d5d8 <schedule()+0x66>
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d5ae:	e8 1b a9 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d5b3:	c7 04 24 e8 eb 02 c0 	mov    DWORD PTR [esp],0xc002ebe8
c001d5ba:	89 c3                	mov    ebx,eax
c001d5bc:	e8 31 a9 00 00       	call   c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d5c1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d5c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5cb:	e8 07 fd ff ff       	call   c001d2d7 <switchToThread(ThreadControlBlock*)>
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	83 c4 08             	add    esp,0x8
c001d5d6:	5b                   	pop    ebx
c001d5d7:	c3                   	ret    
c001d5d8:	83 ec 08             	sub    esp,0x8
c001d5db:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d5e2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d5e8:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d5ed:	e8 ae a9 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	eb af                	jmp    c001d5a6 <schedule()+0x34>

c001d5f7 <unlockStuff()>:
c001d5f7:	a1 c8 eb 02 c0       	mov    eax,ds:0xc002ebc8
c001d5fc:	48                   	dec    eax
c001d5fd:	a3 c8 eb 02 c0       	mov    ds:0xc002ebc8,eax
c001d602:	75 09                	jne    c001d60d <unlockStuff()+0x16>
c001d604:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c001d609:	85 c0                	test   eax,eax
c001d60b:	75 05                	jne    c001d612 <unlockStuff()+0x1b>
c001d60d:	e9 15 fc ff ff       	jmp    c001d227 <enableIRQs()>
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c001d61f:	e8 4e ff ff ff       	call   c001d572 <schedule()>
c001d624:	83 c4 0c             	add    esp,0xc
c001d627:	e9 fb fb ff ff       	jmp    c001d227 <enableIRQs()>

c001d62c <Semaphore::tryAcquire()>:
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d633:	e8 25 fc ff ff       	call   c001d25d <lockStuff()>
c001d638:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d63b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d63d:	7c 0b                	jl     c001d64a <Semaphore::tryAcquire()+0x1e>
c001d63f:	e8 b3 ff ff ff       	call   c001d5f7 <unlockStuff()>
c001d644:	31 c0                	xor    eax,eax
c001d646:	83 c4 0c             	add    esp,0xc
c001d649:	c3                   	ret    
c001d64a:	42                   	inc    edx
c001d64b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d64e:	e8 a4 ff ff ff       	call   c001d5f7 <unlockStuff()>
c001d653:	b0 01                	mov    al,0x1
c001d655:	83 c4 0c             	add    esp,0xc
c001d658:	c3                   	ret    
c001d659:	90                   	nop

c001d65a <Semaphore::assertLocked(char const*)>:
c001d65a:	83 ec 0c             	sub    esp,0xc
c001d65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d665:	e8 f3 fb ff ff       	call   c001d25d <lockStuff()>
c001d66a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d66c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d66f:	7c 05                	jl     c001d676 <Semaphore::assertLocked(char const*)+0x1c>
c001d671:	83 c4 0c             	add    esp,0xc
c001d674:	eb 81                	jmp    c001d5f7 <unlockStuff()>
c001d676:	83 ec 0c             	sub    esp,0xc
c001d679:	52                   	push   edx
c001d67a:	e8 a6 c5 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001d67f:	83 c4 10             	add    esp,0x10
c001d682:	83 c4 0c             	add    esp,0xc
c001d685:	e9 6d ff ff ff       	jmp    c001d5f7 <unlockStuff()>

c001d68a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d68a:	83 ec 0c             	sub    esp,0xc
c001d68d:	e8 8f fb ff ff       	call   c001d221 <getIRQNestingLevel()>
c001d692:	83 ec 08             	sub    esp,0x8
c001d695:	50                   	push   eax
c001d696:	68 ac b5 02 c0       	push   0xc002b5ac
c001d69b:	e8 53 52 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d6a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d6ac:	e8 c1 fe ff ff       	call   c001d572 <schedule()>
c001d6b1:	e8 82 fb ff ff       	call   c001d238 <unlockScheduler()>
c001d6b6:	e8 66 fb ff ff       	call   c001d221 <getIRQNestingLevel()>
c001d6bb:	5a                   	pop    edx
c001d6bc:	59                   	pop    ecx
c001d6bd:	50                   	push   eax
c001d6be:	68 e0 b5 02 c0       	push   0xc002b5e0
c001d6c3:	e8 2b 52 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d6c8:	83 c4 1c             	add    esp,0x1c
c001d6cb:	c3                   	ret    

c001d6cc <blockTask(TaskState)>:
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6d3:	e8 5e fb ff ff       	call   c001d236 <lockScheduler()>
c001d6d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d6e0:	e8 8d fe ff ff       	call   c001d572 <schedule()>
c001d6e5:	83 c4 0c             	add    esp,0xc
c001d6e8:	e9 4b fb ff ff       	jmp    c001d238 <unlockScheduler()>

c001d6ed <waitTask(int, int*, int)>:
c001d6ed:	83 ec 18             	sub    esp,0x18
c001d6f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d6f9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d6fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d705:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d708:	6a 07                	push   0x7
c001d70a:	e8 bd ff ff ff       	call   c001d6cc <blockTask(TaskState)>
c001d70f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d71a:	85 d2                	test   edx,edx
c001d71c:	74 0a                	je     c001d728 <waitTask(int, int*, int)+0x3b>
c001d71e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d721:	89 02                	mov    DWORD PTR [edx],eax
c001d723:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d728:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d72b:	83 c4 0c             	add    esp,0xc
c001d72e:	c3                   	ret    

c001d72f <nanoSleepUntil(unsigned long long)>:
c001d72f:	83 ec 0c             	sub    esp,0xc
c001d732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d736:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d73a:	3b 05 30 dd 02 c0    	cmp    eax,DWORD PTR ds:0xc002dd30
c001d740:	89 d1                	mov    ecx,edx
c001d742:	1b 0d 34 dd 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dd34
c001d748:	73 04                	jae    c001d74e <nanoSleepUntil(unsigned long long)+0x1f>
c001d74a:	83 c4 0c             	add    esp,0xc
c001d74d:	c3                   	ret    
c001d74e:	e8 0a fb ff ff       	call   c001d25d <lockStuff()>
c001d753:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d759:	83 ec 08             	sub    esp,0x8
c001d75c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d75f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d762:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d768:	68 dc eb 02 c0       	push   0xc002ebdc
c001d76d:	e8 2e a8 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d772:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d779:	e8 4e ff ff ff       	call   c001d6cc <blockTask(TaskState)>
c001d77e:	83 c4 1c             	add    esp,0x1c
c001d781:	e9 71 fe ff ff       	jmp    c001d5f7 <unlockStuff()>

c001d786 <nanoSleep(unsigned long long)>:
c001d786:	a1 30 dd 02 c0       	mov    eax,ds:0xc002dd30
c001d78b:	8b 15 34 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd34
c001d791:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d795:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d799:	eb 94                	jmp    c001d72f <nanoSleepUntil(unsigned long long)>

c001d79b <sleep(unsigned long long)>:
c001d79b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d7a3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d7a8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d7ac:	01 ca                	add    edx,ecx
c001d7ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d7b6:	eb ce                	jmp    c001d786 <nanoSleep(unsigned long long)>

c001d7b8 <Semaphore::acquire()>:
c001d7b8:	83 ec 0c             	sub    esp,0xc
c001d7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7bf:	e8 99 fa ff ff       	call   c001d25d <lockStuff()>
c001d7c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d7c7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d7c9:	7d 0c                	jge    c001d7d7 <Semaphore::acquire()+0x1f>
c001d7cb:	42                   	inc    edx
c001d7cc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d7cf:	83 c4 0c             	add    esp,0xc
c001d7d2:	e9 20 fe ff ff       	jmp    c001d5f7 <unlockStuff()>
c001d7d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d7dd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d7e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d7e7:	85 d2                	test   edx,edx
c001d7e9:	74 2a                	je     c001d815 <Semaphore::acquire()+0x5d>
c001d7eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d7ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d7f4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d7f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d7fd:	83 ec 0c             	sub    esp,0xc
c001d800:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d803:	6a 05                	push   0x5
c001d805:	e8 c2 fe ff ff       	call   c001d6cc <blockTask(TaskState)>
c001d80a:	83 c4 10             	add    esp,0x10
c001d80d:	83 c4 0c             	add    esp,0xc
c001d810:	e9 e2 fd ff ff       	jmp    c001d5f7 <unlockStuff()>
c001d815:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d81b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d81e:	eb d7                	jmp    c001d7f7 <Semaphore::acquire()+0x3f>

c001d820 <taskReturned>:
c001d820:	83 ec 18             	sub    esp,0x18
c001d823:	68 14 b6 02 c0       	push   0xc002b614
c001d828:	e8 f8 c3 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	83 ec 0c             	sub    esp,0xc
c001d833:	6a 02                	push   0x2
c001d835:	e8 92 fe ff ff       	call   c001d6cc <blockTask(TaskState)>
c001d83a:	e8 f7 f9 ff ff       	call   c001d236 <lockScheduler()>
c001d83f:	e8 2e fd ff ff       	call   c001d572 <schedule()>
c001d844:	e8 ef f9 ff ff       	call   c001d238 <unlockScheduler()>
c001d849:	83 c4 10             	add    esp,0x10
c001d84c:	eb e2                	jmp    c001d830 <taskReturned+0x10>

c001d84e <unblockTask(ThreadControlBlock*)>:
c001d84e:	53                   	push   ebx
c001d84f:	83 ec 08             	sub    esp,0x8
c001d852:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d856:	e8 db f9 ff ff       	call   c001d236 <lockScheduler()>
c001d85b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d85e:	85 c0                	test   eax,eax
c001d860:	74 5c                	je     c001d8be <unblockTask(ThreadControlBlock*)+0x70>
c001d862:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d865:	48                   	dec    eax
c001d866:	74 31                	je     c001d899 <unblockTask(ThreadControlBlock*)+0x4b>
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d870:	e8 59 a6 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	85 c0                	test   eax,eax
c001d87a:	75 17                	jne    c001d893 <unblockTask(ThreadControlBlock*)+0x45>
c001d87c:	eb 65                	jmp    c001d8e3 <unblockTask(ThreadControlBlock*)+0x95>
c001d87e:	83 ec 08             	sub    esp,0x8
c001d881:	50                   	push   eax
c001d882:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d887:	e8 1c a9 00 00       	call   c00281a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d88c:	83 c4 10             	add    esp,0x10
c001d88f:	85 c0                	test   eax,eax
c001d891:	74 50                	je     c001d8e3 <unblockTask(ThreadControlBlock*)+0x95>
c001d893:	39 c3                	cmp    ebx,eax
c001d895:	75 e7                	jne    c001d87e <unblockTask(ThreadControlBlock*)+0x30>
c001d897:	eb 1c                	jmp    c001d8b5 <unblockTask(ThreadControlBlock*)+0x67>
c001d899:	83 ec 0c             	sub    esp,0xc
c001d89c:	68 04 b7 02 c0       	push   0xc002b704
c001d8a1:	e8 4d 50 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d8a6:	c7 04 24 90 b6 02 c0 	mov    DWORD PTR [esp],0xc002b690
c001d8ad:	e8 41 50 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	83 c4 08             	add    esp,0x8
c001d8b8:	5b                   	pop    ebx
c001d8b9:	e9 7a f9 ff ff       	jmp    c001d238 <unlockScheduler()>
c001d8be:	83 ec 0c             	sub    esp,0xc
c001d8c1:	68 48 b6 02 c0       	push   0xc002b648
c001d8c6:	e8 28 50 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d8cb:	c7 04 24 90 b6 02 c0 	mov    DWORD PTR [esp],0xc002b690
c001d8d2:	e8 1c 50 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d8d7:	83 c4 10             	add    esp,0x10
c001d8da:	83 c4 08             	add    esp,0x8
c001d8dd:	5b                   	pop    ebx
c001d8de:	e9 55 f9 ff ff       	jmp    c001d238 <unlockScheduler()>
c001d8e3:	83 ec 08             	sub    esp,0x8
c001d8e6:	53                   	push   ebx
c001d8e7:	68 e8 eb 02 c0       	push   0xc002ebe8
c001d8ec:	e8 af a6 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	83 c4 08             	add    esp,0x8
c001d8f7:	5b                   	pop    ebx
c001d8f8:	e9 3b f9 ff ff       	jmp    c001d238 <unlockScheduler()>

c001d8fd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d8fd:	55                   	push   ebp
c001d8fe:	57                   	push   edi
c001d8ff:	56                   	push   esi
c001d900:	53                   	push   ebx
c001d901:	83 ec 1c             	sub    esp,0x1c
c001d904:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d908:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d90b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d911:	85 ff                	test   edi,edi
c001d913:	7e 20                	jle    c001d935 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d915:	31 f6                	xor    esi,esi
c001d917:	83 ec 0c             	sub    esp,0xc
c001d91a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d921:	46                   	inc    esi
c001d922:	e8 0d 1d ff ff       	call   c000f634 <free>
c001d927:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d92a:	83 c4 10             	add    esp,0x10
c001d92d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d933:	7f e2                	jg     c001d917 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d935:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d93f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d944:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d947:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d94a:	d3 c0                	rol    eax,cl
c001d94c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d953:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d956:	89 f7                	mov    edi,esi
c001d958:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d960:	0f 85 74 01 00 00    	jne    c001dada <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d966:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d96c:	85 ed                	test   ebp,ebp
c001d96e:	74 1b                	je     c001d98b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	55                   	push   ebp
c001d974:	e8 19 c0 ff ff       	call   c0019992 <EnvVarContainer::~EnvVarContainer()>
c001d979:	59                   	pop    ecx
c001d97a:	5e                   	pop    esi
c001d97b:	6a 0c                	push   0xc
c001d97d:	55                   	push   ebp
c001d97e:	e8 90 4e ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001d983:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d986:	83 c4 10             	add    esp,0x10
c001d989:	89 f7                	mov    edi,esi
c001d98b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d991:	85 c0                	test   eax,eax
c001d993:	0f 84 aa 00 00 00    	je     c001da43 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d999:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d99c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d9a0:	31 c9                	xor    ecx,ecx
c001d9a2:	eb 10                	jmp    c001d9b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d9a4:	41                   	inc    ecx
c001d9a5:	83 f9 10             	cmp    ecx,0x10
c001d9a8:	0f 84 95 00 00 00    	je     c001da43 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d9ae:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d9b4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d9bb:	d3 fa                	sar    edx,cl
c001d9bd:	83 e2 01             	and    edx,0x1
c001d9c0:	74 e2                	je     c001d9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9c2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d9c5:	01 ca                	add    edx,ecx
c001d9c7:	89 d5                	mov    ebp,edx
c001d9c9:	c1 e5 05             	shl    ebp,0x5
c001d9cc:	01 ea                	add    edx,ebp
c001d9ce:	01 d0                	add    eax,edx
c001d9d0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d9d6:	83 fd 07             	cmp    ebp,0x7
c001d9d9:	75 c9                	jne    c001d9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9db:	05 40 02 00 00       	add    eax,0x240
c001d9e0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d9e3:	83 fd ff             	cmp    ebp,0xffffffff
c001d9e6:	0f 8c 08 01 00 00    	jl     c001daf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d9ec:	0f 84 b9 01 00 00    	je     c001dbab <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d9f2:	85 ed                	test   ebp,ebp
c001d9f4:	0f 84 a0 01 00 00    	je     c001db9a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d9fa:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d9fc:	75 a6                	jne    c001d9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9fe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001da04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da08:	01 d0                	add    eax,edx
c001da0a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001da0e:	83 ec 0c             	sub    esp,0xc
c001da11:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001da17:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da1a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da20:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001da27:	50                   	push   eax
c001da28:	e8 21 fe ff ff       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001da2d:	83 c4 10             	add    esp,0x10
c001da30:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001da33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da37:	89 f7                	mov    edi,esi
c001da39:	41                   	inc    ecx
c001da3a:	83 f9 10             	cmp    ecx,0x10
c001da3d:	0f 85 6b ff ff ff    	jne    c001d9ae <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001da43:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001da49:	85 c0                	test   eax,eax
c001da4b:	74 5d                	je     c001daaa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001da4d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001da53:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001da59:	74 4f                	je     c001daaa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	68 e8 eb 02 c0       	push   0xc002ebe8
c001da63:	e8 66 a4 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da68:	c7 04 24 e8 eb 02 c0 	mov    DWORD PTR [esp],0xc002ebe8
c001da6f:	89 c7                	mov    edi,eax
c001da71:	e8 60 a4 00 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	84 c0                	test   al,al
c001da7b:	0f 84 e4 00 00 00    	je     c001db65 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001da81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da84:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da8a:	85 d2                	test   edx,edx
c001da8c:	74 0f                	je     c001da9d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001da8e:	83 ec 0c             	sub    esp,0xc
c001da91:	8b 02                	mov    eax,DWORD PTR [edx]
c001da93:	52                   	push   edx
c001da94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da97:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da9a:	83 c4 10             	add    esp,0x10
c001da9d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001daa7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001daaa:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dab0:	85 db                	test   ebx,ebx
c001dab2:	74 16                	je     c001daca <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dab4:	83 ec 0c             	sub    esp,0xc
c001dab7:	53                   	push   ebx
c001dab8:	e8 a5 43 ff ff       	call   c0011e62 <VAS::~VAS()>
c001dabd:	58                   	pop    eax
c001dabe:	5a                   	pop    edx
c001dabf:	6a 10                	push   0x10
c001dac1:	53                   	push   ebx
c001dac2:	e8 4c 4d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001dac7:	83 c4 10             	add    esp,0x10
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	68 5d b4 02 c0       	push   0xc002b45d
c001dad2:	e8 1c 4e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dad7:	83 c4 10             	add    esp,0x10
c001dada:	83 ec 08             	sub    esp,0x8
c001dadd:	68 3f 07 00 00       	push   0x73f
c001dae2:	68 6b b4 02 c0       	push   0xc002b46b
c001dae7:	e8 07 4e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001daec:	83 c4 2c             	add    esp,0x2c
c001daef:	5b                   	pop    ebx
c001daf0:	5e                   	pop    esi
c001daf1:	5f                   	pop    edi
c001daf2:	5d                   	pop    ebp
c001daf3:	c3                   	ret    
c001daf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	68 48 b7 02 c0       	push   0xc002b748
c001db00:	e8 20 c1 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001db05:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001db08:	83 c4 10             	add    esp,0x10
c001db0b:	89 f7                	mov    edi,esi
c001db0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db11:	e9 8e fe ff ff       	jmp    c001d9a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001db16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db1c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001db22:	75 1c                	jne    c001db40 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	68 b0 b7 02 c0       	push   0xc002b7b0
c001db2c:	e8 c2 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db31:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001db38:	e8 8f fb ff ff       	call   c001d6cc <blockTask(TaskState)>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	83 ec 08             	sub    esp,0x8
c001db43:	56                   	push   esi
c001db44:	68 e8 eb 02 c0       	push   0xc002ebe8
c001db49:	e8 52 a4 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db4e:	c7 04 24 e8 eb 02 c0 	mov    DWORD PTR [esp],0xc002ebe8
c001db55:	e8 74 a3 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db5a:	83 c4 10             	add    esp,0x10
c001db5d:	39 f8                	cmp    eax,edi
c001db5f:	0f 84 1c ff ff ff    	je     c001da81 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001db65:	83 ec 0c             	sub    esp,0xc
c001db68:	68 e8 eb 02 c0       	push   0xc002ebe8
c001db6d:	e8 5c a3 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db72:	c7 04 24 e8 eb 02 c0 	mov    DWORD PTR [esp],0xc002ebe8
c001db79:	89 c6                	mov    esi,eax
c001db7b:	e8 72 a3 00 00       	call   c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db80:	83 c4 10             	add    esp,0x10
c001db83:	39 f3                	cmp    ebx,esi
c001db85:	74 b9                	je     c001db40 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db87:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001db8a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001db8d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001db93:	75 ab                	jne    c001db40 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db95:	e9 7c ff ff ff       	jmp    c001db16 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001db9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db9e:	83 ec 0c             	sub    esp,0xc
c001dba1:	68 7c b7 02 c0       	push   0xc002b77c
c001dba6:	e9 55 ff ff ff       	jmp    c001db00 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dbab:	8b 36                	mov    esi,DWORD PTR [esi]
c001dbad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dbb1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dbb4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbb7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dbbd:	01 d7                	add    edi,edx
c001dbbf:	89 f8                	mov    eax,edi
c001dbc1:	e9 44 fe ff ff       	jmp    c001da0a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dbc6 <cleanerTaskFunction(void*)>:
c001dbc6:	53                   	push   ebx
c001dbc7:	83 ec 08             	sub    esp,0x8
c001dbca:	e8 69 f6 ff ff       	call   c001d238 <unlockScheduler()>
c001dbcf:	e8 62 f6 ff ff       	call   c001d236 <lockScheduler()>
c001dbd4:	80 3d ac eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebac,0x0
c001dbdb:	0f 85 8e 00 00 00    	jne    c001dc6f <cleanerTaskFunction(void*)+0xa9>
c001dbe1:	83 ec 0c             	sub    esp,0xc
c001dbe4:	6a 02                	push   0x2
c001dbe6:	e8 9f fa ff ff       	call   c001d68a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dbeb:	83 c4 10             	add    esp,0x10
c001dbee:	c6 05 ac eb 02 c0 00 	mov    BYTE PTR ds:0xc002ebac,0x0
c001dbf5:	e8 63 f6 ff ff       	call   c001d25d <lockStuff()>
c001dbfa:	e8 37 f6 ff ff       	call   c001d236 <lockScheduler()>
c001dbff:	83 ec 0c             	sub    esp,0xc
c001dc02:	68 d0 eb 02 c0       	push   0xc002ebd0
c001dc07:	e8 ca a2 00 00       	call   c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dc0c:	83 c4 10             	add    esp,0x10
c001dc0f:	84 c0                	test   al,al
c001dc11:	75 40                	jne    c001dc53 <cleanerTaskFunction(void*)+0x8d>
c001dc13:	83 ec 0c             	sub    esp,0xc
c001dc16:	68 d0 eb 02 c0       	push   0xc002ebd0
c001dc1b:	e8 ae a2 00 00       	call   c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc20:	c7 04 24 d0 eb 02 c0 	mov    DWORD PTR [esp],0xc002ebd0
c001dc27:	89 c3                	mov    ebx,eax
c001dc29:	e8 c4 a2 00 00       	call   c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc2e:	c7 04 24 81 b4 02 c0 	mov    DWORD PTR [esp],0xc002b481
c001dc35:	e8 b9 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dc3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc3d:	e8 bb fc ff ff       	call   c001d8fd <cleanupTerminatedTask(ThreadControlBlock*)>
c001dc42:	c7 04 24 9a b4 02 c0 	mov    DWORD PTR [esp],0xc002b49a
c001dc49:	e8 a5 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dc4e:	83 c4 10             	add    esp,0x10
c001dc51:	eb ac                	jmp    c001dbff <cleanerTaskFunction(void*)+0x39>
c001dc53:	e8 e0 f5 ff ff       	call   c001d238 <unlockScheduler()>
c001dc58:	e8 9a f9 ff ff       	call   c001d5f7 <unlockStuff()>
c001dc5d:	e8 d4 f5 ff ff       	call   c001d236 <lockScheduler()>
c001dc62:	80 3d ac eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebac,0x0
c001dc69:	0f 84 72 ff ff ff    	je     c001dbe1 <cleanerTaskFunction(void*)+0x1b>
c001dc6f:	e8 c4 f5 ff ff       	call   c001d238 <unlockScheduler()>
c001dc74:	e9 75 ff ff ff       	jmp    c001dbee <cleanerTaskFunction(void*)+0x28>

c001dc79 <terminateTask(int)>:
c001dc79:	83 ec 14             	sub    esp,0x14
c001dc7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc84:	83 c0 0c             	add    eax,0xc
c001dc87:	50                   	push   eax
c001dc88:	68 d8 b7 02 c0       	push   0xc002b7d8
c001dc8d:	e8 61 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dc92:	e8 c6 f5 ff ff       	call   c001d25d <lockStuff()>
c001dc97:	e8 9a f5 ff ff       	call   c001d236 <lockScheduler()>
c001dc9c:	c7 04 24 ad b4 02 c0 	mov    DWORD PTR [esp],0xc002b4ad
c001dca3:	e8 4b 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dca8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001dcb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dcbc:	5a                   	pop    edx
c001dcbd:	59                   	pop    ecx
c001dcbe:	50                   	push   eax
c001dcbf:	68 d0 eb 02 c0       	push   0xc002ebd0
c001dcc4:	e8 d7 a2 00 00       	call   c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcce:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001dcd5:	c7 04 24 c7 b4 02 c0 	mov    DWORD PTR [esp],0xc002b4c7
c001dcdc:	e8 12 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	a1 a8 eb 02 c0       	mov    eax,ds:0xc002eba8
c001dce9:	85 c0                	test   eax,eax
c001dceb:	74 5a                	je     c001dd47 <terminateTask(int)+0xce>
c001dced:	83 ec 0c             	sub    esp,0xc
c001dcf0:	68 e1 b4 02 c0       	push   0xc002b4e1
c001dcf5:	e8 f9 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dcfa:	58                   	pop    eax
c001dcfb:	c6 05 ac eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebac,0x1
c001dd02:	ff 35 a8 eb 02 c0    	push   DWORD PTR ds:0xc002eba8
c001dd08:	e8 41 fb ff ff       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001dd0d:	c7 04 24 fb b4 02 c0 	mov    DWORD PTR [esp],0xc002b4fb
c001dd14:	e8 da 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	e8 17 f5 ff ff       	call   c001d238 <unlockScheduler()>
c001dd21:	e8 d1 f8 ff ff       	call   c001d5f7 <unlockStuff()>
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	68 33 b5 02 c0       	push   0xc002b533
c001dd2e:	e8 c0 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd33:	83 c4 10             	add    esp,0x10
c001dd36:	e8 fb f4 ff ff       	call   c001d236 <lockScheduler()>
c001dd3b:	e8 32 f8 ff ff       	call   c001d572 <schedule()>
c001dd40:	e8 f3 f4 ff ff       	call   c001d238 <unlockScheduler()>
c001dd45:	eb ef                	jmp    c001dd36 <terminateTask(int)+0xbd>
c001dd47:	83 ec 0c             	sub    esp,0xc
c001dd4a:	68 15 b5 02 c0       	push   0xc002b515
c001dd4f:	e8 9f 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	eb c3                	jmp    c001dd1c <terminateTask(int)+0xa3>

c001dd59 <Thr::terminateFromIRQ(int)>:
c001dd59:	83 ec 18             	sub    esp,0x18
c001dd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd60:	e8 14 ff ff ff       	call   c001dc79 <terminateTask(int)>
c001dd65:	90                   	nop

c001dd66 <Semaphore::release()>:
c001dd66:	83 ec 0c             	sub    esp,0xc
c001dd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6d:	e8 eb f4 ff ff       	call   c001d25d <lockStuff()>
c001dd72:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dd75:	85 d2                	test   edx,edx
c001dd77:	74 1a                	je     c001dd93 <Semaphore::release()+0x2d>
c001dd79:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dd82:	52                   	push   edx
c001dd83:	e8 c6 fa ff ff       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001dd88:	83 c4 10             	add    esp,0x10
c001dd8b:	83 c4 0c             	add    esp,0xc
c001dd8e:	e9 64 f8 ff ff       	jmp    c001d5f7 <unlockStuff()>
c001dd93:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dd96:	83 c4 0c             	add    esp,0xc
c001dd99:	e9 59 f8 ff ff       	jmp    c001d5f7 <unlockStuff()>

c001dd9e <__static_initialization_and_destruction_0(int, int)>:
c001dd9e:	83 ec 0c             	sub    esp,0xc
c001dda1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dda6:	0f 85 88 00 00 00    	jne    c001de34 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ddac:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ddb4:	75 7e                	jne    c001de34 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	68 e8 eb 02 c0       	push   0xc002ebe8
c001ddbe:	e8 8d a3 00 00       	call   c0028150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ddc3:	83 c4 10             	add    esp,0x10
c001ddc6:	83 ec 04             	sub    esp,0x4
c001ddc9:	68 cc c5 02 c0       	push   0xc002c5cc
c001ddce:	68 e8 eb 02 c0       	push   0xc002ebe8
c001ddd3:	68 10 81 02 c0       	push   0xc0028110
c001ddd8:	e8 b0 49 ff ff       	call   c001278d <__cxa_atexit>
c001dddd:	83 c4 10             	add    esp,0x10
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	68 dc eb 02 c0       	push   0xc002ebdc
c001dde8:	e8 63 a3 00 00       	call   c0028150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dded:	83 c4 10             	add    esp,0x10
c001ddf0:	83 ec 04             	sub    esp,0x4
c001ddf3:	68 cc c5 02 c0       	push   0xc002c5cc
c001ddf8:	68 dc eb 02 c0       	push   0xc002ebdc
c001ddfd:	68 10 81 02 c0       	push   0xc0028110
c001de02:	e8 86 49 ff ff       	call   c001278d <__cxa_atexit>
c001de07:	83 c4 10             	add    esp,0x10
c001de0a:	83 ec 0c             	sub    esp,0xc
c001de0d:	68 d0 eb 02 c0       	push   0xc002ebd0
c001de12:	e8 39 a3 00 00       	call   c0028150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001de17:	83 c4 10             	add    esp,0x10
c001de1a:	83 ec 04             	sub    esp,0x4
c001de1d:	68 cc c5 02 c0       	push   0xc002c5cc
c001de22:	68 d0 eb 02 c0       	push   0xc002ebd0
c001de27:	68 10 81 02 c0       	push   0xc0028110
c001de2c:	e8 5c 49 ff ff       	call   c001278d <__cxa_atexit>
c001de31:	83 c4 10             	add    esp,0x10
c001de34:	90                   	nop
c001de35:	83 c4 0c             	add    esp,0xc
c001de38:	c3                   	ret    

c001de39 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	83 ec 08             	sub    esp,0x8
c001de3f:	68 ff ff 00 00       	push   0xffff
c001de44:	6a 01                	push   0x1
c001de46:	e8 53 ff ff ff       	call   c001dd9e <__static_initialization_and_destruction_0(int, int)>
c001de4b:	83 c4 10             	add    esp,0x10
c001de4e:	83 c4 0c             	add    esp,0xc
c001de51:	c3                   	ret    

c001de52 <Vm::inbv(unsigned short)>:
c001de52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001de56:	66 81 fa fe fe       	cmp    dx,0xfefe
c001de5b:	75 06                	jne    c001de63 <Vm::inbv(unsigned short)+0x11>
c001de5d:	a0 2c ec 02 c0       	mov    al,ds:0xc002ec2c
c001de62:	c3                   	ret    
c001de63:	ec                   	in     al,dx
c001de64:	c3                   	ret    

c001de65 <Vm::outbv(unsigned short, unsigned char)>:
c001de65:	53                   	push   ebx
c001de66:	83 ec 08             	sub    esp,0x8
c001de69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001de71:	66 81 fa fe fe       	cmp    dx,0xfefe
c001de76:	75 38                	jne    c001deb0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001de78:	0f b6 c3             	movzx  eax,bl
c001de7b:	51                   	push   ecx
c001de7c:	51                   	push   ecx
c001de7d:	50                   	push   eax
c001de7e:	68 f7 b7 02 c0       	push   0xc002b7f7
c001de83:	e8 6b 4a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001de88:	8b 15 2c ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec2c
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	8d 42 01             	lea    eax,[edx+0x1]
c001de94:	88 9a 40 ec 02 c0    	mov    BYTE PTR [edx-0x3ffd13c0],bl
c001de9a:	a3 2c ec 02 c0       	mov    ds:0xc002ec2c,eax
c001de9f:	83 f8 20             	cmp    eax,0x20
c001dea2:	75 0f                	jne    c001deb3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dea4:	c7 05 2c ec 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ec2c,0x1f
c001deae:	eb 03                	jmp    c001deb3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001deb0:	88 d8                	mov    al,bl
c001deb2:	ee                   	out    dx,al
c001deb3:	83 c4 08             	add    esp,0x8
c001deb6:	5b                   	pop    ebx
c001deb7:	c3                   	ret    

c001deb8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001deb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001debd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dec2:	c1 e0 04             	shl    eax,0x4
c001dec5:	01 d0                	add    eax,edx
c001dec7:	c3                   	ret    

c001dec8 <Vm::getSegment(unsigned int)>:
c001dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decc:	c1 e8 10             	shr    eax,0x10
c001decf:	c3                   	ret    

c001ded0 <Vm::getOffset(unsigned int)>:
c001ded0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded4:	c3                   	ret    

c001ded5 <Vm::mainloop2()>:
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	e8 59 f3 ff ff       	call   c001d236 <lockScheduler()>
c001dedd:	83 ec 0c             	sub    esp,0xc
c001dee0:	c6 05 25 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec25,0x1
c001dee7:	6a 02                	push   0x2
c001dee9:	e8 9c f7 ff ff       	call   c001d68a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001deee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001def7:	52                   	push   edx
c001def8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001defc:	52                   	push   edx
c001defd:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001df01:	52                   	push   edx
c001df02:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001df06:	50                   	push   eax
c001df07:	e8 ee 23 fe ff       	call   c00002fa <goToVM86>
c001df0c:	83 c4 2c             	add    esp,0x2c
c001df0f:	c3                   	ret    

c001df10 <Vm::mainVm8086Loop(void*)>:
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	e8 20 f3 ff ff       	call   c001d238 <unlockScheduler()>
c001df18:	83 c4 0c             	add    esp,0xc
c001df1b:	eb b8                	jmp    c001ded5 <Vm::mainloop2()>

c001df1d <Vm::mainloop3(unsigned long)>:
c001df1d:	53                   	push   ebx
c001df1e:	83 ec 08             	sub    esp,0x8
c001df21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df25:	e8 0c f3 ff ff       	call   c001d236 <lockScheduler()>
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	89 1d 20 ec 02 c0    	mov    DWORD PTR ds:0xc002ec20,ebx
c001df33:	6a 02                	push   0x2
c001df35:	c6 05 24 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec24,0x1
c001df3c:	e8 49 f7 ff ff       	call   c001d68a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001df41:	83 c4 18             	add    esp,0x18
c001df44:	5b                   	pop    ebx
c001df45:	eb 8e                	jmp    c001ded5 <Vm::mainloop2()>

c001df47 <Vm::initialise8086()>:
c001df47:	83 ec 0c             	sub    esp,0xc
c001df4a:	68 80 00 00 00       	push   0x80
c001df4f:	6a 00                	push   0x0
c001df51:	68 10 df 01 c0       	push   0xc001df10
c001df56:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c001df5c:	e8 07 f4 ff ff       	call   c001d368 <Process::createThread(void (*)(void*), void*, int)>
c001df61:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001df68:	a3 28 ec 02 c0       	mov    ds:0xc002ec28,eax
c001df6d:	68 00 01 00 00       	push   0x100
c001df72:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c001df77:	6a 00                	push   0x0
c001df79:	6a 00                	push   0x0
c001df7b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001df81:	e8 3c 43 ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df86:	83 c4 2c             	add    esp,0x2c
c001df89:	c3                   	ret    

c001df8a <Vm::finish8086()>:
c001df8a:	53                   	push   ebx
c001df8b:	83 ec 08             	sub    esp,0x8
c001df8e:	e8 a3 f2 ff ff       	call   c001d236 <lockScheduler()>
c001df93:	80 3d 24 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002ec24,0x0
c001df9a:	75 0c                	jne    c001dfa8 <Vm::finish8086()+0x1e>
c001df9c:	e8 d1 f5 ff ff       	call   c001d572 <schedule()>
c001dfa1:	e8 92 f2 ff ff       	call   c001d238 <unlockScheduler()>
c001dfa6:	eb e6                	jmp    c001df8e <Vm::finish8086()+0x4>
c001dfa8:	83 ec 0c             	sub    esp,0xc
c001dfab:	8b 1d 20 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec20
c001dfb1:	ff 35 28 ec 02 c0    	push   DWORD PTR ds:0xc002ec28
c001dfb7:	c6 05 24 ec 02 c0 00 	mov    BYTE PTR ds:0xc002ec24,0x0
c001dfbe:	e8 8b f8 ff ff       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001dfc3:	e8 70 f2 ff ff       	call   c001d238 <unlockScheduler()>
c001dfc8:	89 d8                	mov    eax,ebx
c001dfca:	83 c4 18             	add    esp,0x18
c001dfcd:	5b                   	pop    ebx
c001dfce:	c3                   	ret    

c001dfcf <Vm::getOutput8086(unsigned char*)>:
c001dfcf:	83 ec 10             	sub    esp,0x10
c001dfd2:	ff 35 2c ec 02 c0    	push   DWORD PTR ds:0xc002ec2c
c001dfd8:	68 40 ec 02 c0       	push   0xc002ec40
c001dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfe1:	e8 ba 26 fe ff       	call   c00006a0 <memcpy>
c001dfe6:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c001dfeb:	c7 05 2c ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec2c,0x0
c001dff5:	83 c4 1c             	add    esp,0x1c
c001dff8:	c3                   	ret    

c001dff9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dff9:	55                   	push   ebp
c001dffa:	57                   	push   edi
c001dffb:	56                   	push   esi
c001dffc:	53                   	push   ebx
c001dffd:	83 ec 2c             	sub    esp,0x2c
c001e000:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e004:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e008:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e00c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e010:	e8 21 f2 ff ff       	call   c001d236 <lockScheduler()>
c001e015:	a0 25 ec 02 c0       	mov    al,ds:0xc002ec25
c001e01a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e01e:	84 c0                	test   al,al
c001e020:	75 0c                	jne    c001e02e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e022:	e8 4b f5 ff ff       	call   c001d572 <schedule()>
c001e027:	e8 0c f2 ff ff       	call   c001d238 <unlockScheduler()>
c001e02c:	eb e2                	jmp    c001e010 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e02e:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c001e033:	c7 05 2c ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec2c,0x0
c001e03d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e041:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e045:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e049:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e04d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e051:	50                   	push   eax
c001e052:	6a 20                	push   0x20
c001e054:	6a 00                	push   0x0
c001e056:	68 40 ec 02 c0       	push   0xc002ec40
c001e05b:	e8 64 26 fe ff       	call   c00006c4 <memset>
c001e060:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e067:	e8 b8 15 ff ff       	call   c000f624 <malloc>
c001e06c:	83 c4 0c             	add    esp,0xc
c001e06f:	89 c7                	mov    edi,eax
c001e071:	ff 35 f4 eb 02 c0    	push   DWORD PTR ds:0xc002ebf4
c001e077:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e07b:	50                   	push   eax
c001e07c:	e8 cb 4d ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001e081:	83 c4 10             	add    esp,0x10
c001e084:	85 ff                	test   edi,edi
c001e086:	75 0a                	jne    c001e092 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 13 b8 02 c0       	push   0xc002b813
c001e090:	eb 27                	jmp    c001e0b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e092:	50                   	push   eax
c001e093:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e097:	50                   	push   eax
c001e098:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e09c:	50                   	push   eax
c001e09d:	57                   	push   edi
c001e09e:	e8 b9 50 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001e0a3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e0a8:	83 c4 10             	add    esp,0x10
c001e0ab:	89 e8                	mov    eax,ebp
c001e0ad:	84 c0                	test   al,al
c001e0af:	74 19                	je     c001e0ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 27 b8 02 c0       	push   0xc002b827
c001e0b9:	e8 67 bb ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001e0be:	31 ed                	xor    ebp,ebp
c001e0c0:	e8 73 f1 ff ff       	call   c001d238 <unlockScheduler()>
c001e0c5:	83 c4 10             	add    esp,0x10
c001e0c8:	eb 75                	jmp    c001e13f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e0ca:	50                   	push   eax
c001e0cb:	50                   	push   eax
c001e0cc:	6a 01                	push   0x1
c001e0ce:	57                   	push   edi
c001e0cf:	e8 dc 4d ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	85 c0                	test   eax,eax
c001e0d9:	74 17                	je     c001e0f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e0db:	83 ec 0c             	sub    esp,0xc
c001e0de:	68 40 b8 02 c0       	push   0xc002b840
c001e0e3:	e8 3d bb ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001e0e8:	e8 4b f1 ff ff       	call   c001d238 <unlockScheduler()>
c001e0ed:	83 c4 10             	add    esp,0x10
c001e0f0:	eb 4d                	jmp    c001e13f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e0f2:	0f b7 f6             	movzx  esi,si
c001e0f5:	50                   	push   eax
c001e0f6:	0f b7 db             	movzx  ebx,bx
c001e0f9:	50                   	push   eax
c001e0fa:	56                   	push   esi
c001e0fb:	53                   	push   ebx
c001e0fc:	e8 b7 fd ff ff       	call   c001deb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e101:	5a                   	pop    edx
c001e102:	8b 17                	mov    edx,DWORD PTR [edi]
c001e104:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e108:	51                   	push   ecx
c001e109:	50                   	push   eax
c001e10a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e10e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e112:	57                   	push   edi
c001e113:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e116:	83 c4 14             	add    esp,0x14
c001e119:	57                   	push   edi
c001e11a:	e8 ef 4d ff ff       	call   c0012f0e <File::close()>
c001e11f:	c6 05 25 ec 02 c0 00 	mov    BYTE PTR ds:0xc002ec25,0x0
c001e126:	e8 0d f1 ff ff       	call   c001d238 <unlockScheduler()>
c001e12b:	59                   	pop    ecx
c001e12c:	ff 35 28 ec 02 c0    	push   DWORD PTR ds:0xc002ec28
c001e132:	e8 17 f7 ff ff       	call   c001d84e <unblockTask(ThreadControlBlock*)>
c001e137:	83 c4 10             	add    esp,0x10
c001e13a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e13f:	83 c4 2c             	add    esp,0x2c
c001e142:	89 e8                	mov    eax,ebp
c001e144:	5b                   	pop    ebx
c001e145:	5e                   	pop    esi
c001e146:	5f                   	pop    edi
c001e147:	5d                   	pop    ebp
c001e148:	c3                   	ret    

c001e149 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e149:	57                   	push   edi
c001e14a:	56                   	push   esi
c001e14b:	53                   	push   ebx
c001e14c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e154:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e158:	83 e8 06             	sub    eax,0x6
c001e15b:	0f b7 c0             	movzx  eax,ax
c001e15e:	50                   	push   eax
c001e15f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e164:	50                   	push   eax
c001e165:	e8 4e fd ff ff       	call   c001deb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e16a:	5a                   	pop    edx
c001e16b:	5e                   	pop    esi
c001e16c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e16f:	8d 56 fa             	lea    edx,[esi-0x6]
c001e172:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e178:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e17b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e17e:	83 c2 02             	add    edx,0x2
c001e181:	66 89 10             	mov    WORD PTR [eax],dx
c001e184:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e187:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e18b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e18e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e192:	89 d6                	mov    esi,edx
c001e194:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e19a:	66 81 e6 ff fd       	and    si,0xfdff
c001e19f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e1a3:	74 07                	je     c001e1ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e1a5:	89 d6                	mov    esi,edx
c001e1a7:	66 81 ce 00 02       	or     si,0x200
c001e1ac:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1b5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e1b9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e1c1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e1c4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e1cc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e1cf:	5b                   	pop    ebx
c001e1d0:	5e                   	pop    esi
c001e1d1:	5f                   	pop    edi
c001e1d2:	c3                   	ret    

c001e1d3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e1d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e1dd:	c1 e0 04             	shl    eax,0x4
c001e1e0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e1e3:	c3                   	ret    

c001e1e4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e1e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e1ee:	c1 e0 04             	shl    eax,0x4
c001e1f1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e1f5:	c3                   	ret    

c001e1f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e1f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e200:	c1 e0 04             	shl    eax,0x4
c001e203:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e206:	c3                   	ret    

c001e207 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e207:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e20c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e211:	c1 e0 04             	shl    eax,0x4
c001e214:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e218:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e21b:	c3                   	ret    

c001e21c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e21c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e221:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e226:	c1 e0 04             	shl    eax,0x4
c001e229:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e22d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e231:	c3                   	ret    

c001e232 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e232:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e237:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e23c:	c1 e0 04             	shl    eax,0x4
c001e23f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e243:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e246:	c3                   	ret    

c001e247 <Vm::faultHandler(regs*)>:
c001e247:	55                   	push   ebp
c001e248:	57                   	push   edi
c001e249:	56                   	push   esi
c001e24a:	53                   	push   ebx
c001e24b:	83 ec 1c             	sub    esp,0x1c
c001e24e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e252:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e255:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e258:	0f b7 c1             	movzx  eax,cx
c001e25b:	50                   	push   eax
c001e25c:	0f b7 c3             	movzx  eax,bx
c001e25f:	c1 e3 04             	shl    ebx,0x4
c001e262:	50                   	push   eax
c001e263:	e8 50 fc ff ff       	call   c001deb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e268:	5a                   	pop    edx
c001e269:	89 c5                	mov    ebp,eax
c001e26b:	5e                   	pop    esi
c001e26c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e270:	50                   	push   eax
c001e271:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e275:	50                   	push   eax
c001e276:	e8 3d fc ff ff       	call   c001deb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e27b:	01 cb                	add    ebx,ecx
c001e27d:	89 c6                	mov    esi,eax
c001e27f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e283:	50                   	push   eax
c001e284:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e288:	50                   	push   eax
c001e289:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e28d:	50                   	push   eax
c001e28e:	55                   	push   ebp
c001e28f:	53                   	push   ebx
c001e290:	b3 06                	mov    bl,0x6
c001e292:	68 59 b8 02 c0       	push   0xc002b859
c001e297:	e8 57 46 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e29c:	83 c4 20             	add    esp,0x20
c001e29f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e2a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e2a9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e2ad:	3c 9d                	cmp    al,0x9d
c001e2af:	0f 84 d7 02 00 00    	je     c001e58c <Vm::faultHandler(regs*)+0x345>
c001e2b5:	0f 87 a3 00 00 00    	ja     c001e35e <Vm::faultHandler(regs*)+0x117>
c001e2bb:	3c 66                	cmp    al,0x66
c001e2bd:	0f 84 15 02 00 00    	je     c001e4d8 <Vm::faultHandler(regs*)+0x291>
c001e2c3:	77 5f                	ja     c001e324 <Vm::faultHandler(regs*)+0xdd>
c001e2c5:	3c 36                	cmp    al,0x36
c001e2c7:	0f 84 f1 01 00 00    	je     c001e4be <Vm::faultHandler(regs*)+0x277>
c001e2cd:	77 28                	ja     c001e2f7 <Vm::faultHandler(regs*)+0xb0>
c001e2cf:	3c 26                	cmp    al,0x26
c001e2d1:	0f 84 99 01 00 00    	je     c001e470 <Vm::faultHandler(regs*)+0x229>
c001e2d7:	3c 2e                	cmp    al,0x2e
c001e2d9:	0f 85 3b 07 00 00    	jne    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e2df:	83 ec 0c             	sub    esp,0xc
c001e2e2:	31 db                	xor    ebx,ebx
c001e2e4:	68 6e b8 02 c0       	push   0xc002b86e
c001e2e9:	e8 05 46 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e2ee:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	45                   	inc    ebp
c001e2f5:	eb b2                	jmp    c001e2a9 <Vm::faultHandler(regs*)+0x62>
c001e2f7:	3c 64                	cmp    al,0x64
c001e2f9:	0f 84 8b 01 00 00    	je     c001e48a <Vm::faultHandler(regs*)+0x243>
c001e2ff:	0f 87 9f 01 00 00    	ja     c001e4a4 <Vm::faultHandler(regs*)+0x25d>
c001e305:	3c 3e                	cmp    al,0x3e
c001e307:	0f 85 0d 07 00 00    	jne    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e30d:	83 ec 0c             	sub    esp,0xc
c001e310:	b3 01                	mov    bl,0x1
c001e312:	68 72 b8 02 c0       	push   0xc002b872
c001e317:	e8 d7 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e31c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e31f:	83 c4 10             	add    esp,0x10
c001e322:	eb d0                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e324:	3c 6d                	cmp    al,0x6d
c001e326:	0f 84 af 03 00 00    	je     c001e6db <Vm::faultHandler(regs*)+0x494>
c001e32c:	77 15                	ja     c001e343 <Vm::faultHandler(regs*)+0xfc>
c001e32e:	3c 67                	cmp    al,0x67
c001e330:	0f 84 bf 01 00 00    	je     c001e4f5 <Vm::faultHandler(regs*)+0x2ae>
c001e336:	3c 6c                	cmp    al,0x6c
c001e338:	0f 84 3f 03 00 00    	je     c001e67d <Vm::faultHandler(regs*)+0x436>
c001e33e:	e9 d7 06 00 00       	jmp    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e343:	3c 6f                	cmp    al,0x6f
c001e345:	0f 84 a4 04 00 00    	je     c001e7ef <Vm::faultHandler(regs*)+0x5a8>
c001e34b:	0f 82 11 04 00 00    	jb     c001e762 <Vm::faultHandler(regs*)+0x51b>
c001e351:	3c 9c                	cmp    al,0x9c
c001e353:	0f 84 ba 01 00 00    	je     c001e513 <Vm::faultHandler(regs*)+0x2cc>
c001e359:	e9 bc 06 00 00       	jmp    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e35e:	3c ec                	cmp    al,0xec
c001e360:	0f 84 24 06 00 00    	je     c001e98a <Vm::faultHandler(regs*)+0x743>
c001e366:	0f 87 93 00 00 00    	ja     c001e3ff <Vm::faultHandler(regs*)+0x1b8>
c001e36c:	3c e4                	cmp    al,0xe4
c001e36e:	0f 84 5c 05 00 00    	je     c001e8d0 <Vm::faultHandler(regs*)+0x689>
c001e374:	77 6a                	ja     c001e3e0 <Vm::faultHandler(regs*)+0x199>
c001e376:	3c cd                	cmp    al,0xcd
c001e378:	0f 84 7e 02 00 00    	je     c001e5fc <Vm::faultHandler(regs*)+0x3b5>
c001e37e:	3c cf                	cmp    al,0xcf
c001e380:	0f 85 94 06 00 00    	jne    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e386:	83 ec 0c             	sub    esp,0xc
c001e389:	68 b6 b8 02 c0       	push   0xc002b8b6
c001e38e:	e8 60 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e393:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e396:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e399:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e39d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e3a0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e3a4:	0d 00 02 02 00       	or     eax,0x20200
c001e3a9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e3ac:	56                   	push   esi
c001e3ad:	53                   	push   ebx
c001e3ae:	52                   	push   edx
c001e3af:	68 bc b8 02 c0       	push   0xc002b8bc
c001e3b4:	e8 3a 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e3b9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e3bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c3:	66 c1 e8 09          	shr    ax,0x9
c001e3c7:	83 e0 01             	and    eax,0x1
c001e3ca:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e3cd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e3d0:	83 c0 06             	add    eax,0x6
c001e3d3:	25 ff ff 00 00       	and    eax,0xffff
c001e3d8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e3db:	e9 95 02 00 00       	jmp    c001e675 <Vm::faultHandler(regs*)+0x42e>
c001e3e0:	3c e6                	cmp    al,0xe6
c001e3e2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e3e6:	0f 84 4e 05 00 00    	je     c001e93a <Vm::faultHandler(regs*)+0x6f3>
c001e3ec:	0f 82 0a 05 00 00    	jb     c001e8fc <Vm::faultHandler(regs*)+0x6b5>
c001e3f2:	3c e7                	cmp    al,0xe7
c001e3f4:	0f 84 69 05 00 00    	je     c001e963 <Vm::faultHandler(regs*)+0x71c>
c001e3fa:	e9 1b 06 00 00       	jmp    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e3ff:	3c ef                	cmp    al,0xef
c001e401:	0f 84 e6 05 00 00    	je     c001e9ed <Vm::faultHandler(regs*)+0x7a6>
c001e407:	77 37                	ja     c001e440 <Vm::faultHandler(regs*)+0x1f9>
c001e409:	3c ed                	cmp    al,0xed
c001e40b:	0f 84 a3 05 00 00    	je     c001e9b4 <Vm::faultHandler(regs*)+0x76d>
c001e411:	3c ee                	cmp    al,0xee
c001e413:	0f 85 01 06 00 00    	jne    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e419:	52                   	push   edx
c001e41a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e41d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e420:	68 57 b9 02 c0       	push   0xc002b957
c001e425:	e8 c9 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e42a:	59                   	pop    ecx
c001e42b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e42f:	5b                   	pop    ebx
c001e430:	50                   	push   eax
c001e431:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e435:	50                   	push   eax
c001e436:	e8 2a fa ff ff       	call   c001de65 <Vm::outbv(unsigned short, unsigned char)>
c001e43b:	e9 a5 05 00 00       	jmp    c001e9e5 <Vm::faultHandler(regs*)+0x79e>
c001e440:	3c fa                	cmp    al,0xfa
c001e442:	0f 84 f7 01 00 00    	je     c001e63f <Vm::faultHandler(regs*)+0x3f8>
c001e448:	3c fb                	cmp    al,0xfb
c001e44a:	0f 84 0a 02 00 00    	je     c001e65a <Vm::faultHandler(regs*)+0x413>
c001e450:	3c f3                	cmp    al,0xf3
c001e452:	0f 85 c2 05 00 00    	jne    c001ea1a <Vm::faultHandler(regs*)+0x7d3>
c001e458:	83 ec 0c             	sub    esp,0xc
c001e45b:	68 8f b8 02 c0       	push   0xc002b88f
c001e460:	e8 8e 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e465:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	e9 84 fe ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e470:	83 ec 0c             	sub    esp,0xc
c001e473:	b3 02                	mov    bl,0x2
c001e475:	68 6a b8 02 c0       	push   0xc002b86a
c001e47a:	e8 74 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e47f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e482:	83 c4 10             	add    esp,0x10
c001e485:	e9 6a fe ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e48a:	83 ec 0c             	sub    esp,0xc
c001e48d:	b3 03                	mov    bl,0x3
c001e48f:	68 76 b8 02 c0       	push   0xc002b876
c001e494:	e8 5a 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e499:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e49c:	83 c4 10             	add    esp,0x10
c001e49f:	e9 50 fe ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e4a4:	83 ec 0c             	sub    esp,0xc
c001e4a7:	b3 04                	mov    bl,0x4
c001e4a9:	68 7a b8 02 c0       	push   0xc002b87a
c001e4ae:	e8 40 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4b3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4b6:	83 c4 10             	add    esp,0x10
c001e4b9:	e9 36 fe ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	b3 05                	mov    bl,0x5
c001e4c3:	68 7e b8 02 c0       	push   0xc002b87e
c001e4c8:	e8 26 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4cd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	e9 1c fe ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	68 82 b8 02 c0       	push   0xc002b882
c001e4e0:	e8 0e 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4e5:	83 c4 10             	add    esp,0x10
c001e4e8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4eb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e4f0:	e9 ff fd ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e4f5:	50                   	push   eax
c001e4f6:	50                   	push   eax
c001e4f7:	6a 01                	push   0x1
c001e4f9:	68 87 b8 02 c0       	push   0xc002b887
c001e4fe:	e8 f0 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e503:	83 c4 10             	add    esp,0x10
c001e506:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e509:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e50e:	e9 e1 fd ff ff       	jmp    c001e2f4 <Vm::faultHandler(regs*)+0xad>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 95 b8 02 c0       	push   0xc002b895
c001e51b:	e8 d3 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e520:	83 c4 10             	add    esp,0x10
c001e523:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e526:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e52b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e52e:	74 2f                	je     c001e55f <Vm::faultHandler(regs*)+0x318>
c001e530:	83 ea 04             	sub    edx,0x4
c001e533:	25 ff 0d 00 00       	and    eax,0xdff
c001e538:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e53e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e541:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e544:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e54a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e54e:	0f 84 bf 04 00 00    	je     c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e554:	80 cc 02             	or     ah,0x2
c001e557:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e55a:	e9 b4 04 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e55f:	83 ea 02             	sub    edx,0x2
c001e562:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e568:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e56b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e56f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e575:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e579:	74 05                	je     c001e580 <Vm::faultHandler(regs*)+0x339>
c001e57b:	80 cc 02             	or     ah,0x2
c001e57e:	eb 03                	jmp    c001e583 <Vm::faultHandler(regs*)+0x33c>
c001e580:	80 e4 fd             	and    ah,0xfd
c001e583:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e587:	e9 87 04 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	68 9c b8 02 c0       	push   0xc002b89c
c001e594:	e8 5a 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e599:	83 c4 10             	add    esp,0x10
c001e59c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5a1:	74 28                	je     c001e5cb <Vm::faultHandler(regs*)+0x384>
c001e5a3:	8b 06                	mov    eax,DWORD PTR [esi]
c001e5a5:	25 ff 0d 00 00       	and    eax,0xdff
c001e5aa:	0d 00 02 02 00       	or     eax,0x20200
c001e5af:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e5b2:	8b 06                	mov    eax,DWORD PTR [esi]
c001e5b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e5ba:	c1 e8 09             	shr    eax,0x9
c001e5bd:	83 e0 01             	and    eax,0x1
c001e5c0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e5c3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e5c6:	83 c0 04             	add    eax,0x4
c001e5c9:	eb 24                	jmp    c001e5ef <Vm::faultHandler(regs*)+0x3a8>
c001e5cb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e5ce:	0d 00 02 02 00       	or     eax,0x20200
c001e5d3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e5d6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e5d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e5df:	66 c1 e8 09          	shr    ax,0x9
c001e5e3:	83 e0 01             	and    eax,0x1
c001e5e6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e5e9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e5ec:	83 c0 02             	add    eax,0x2
c001e5ef:	25 ff ff 00 00       	and    eax,0xffff
c001e5f4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e5f7:	e9 17 04 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e5fc:	53                   	push   ebx
c001e5fd:	53                   	push   ebx
c001e5fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e602:	50                   	push   eax
c001e603:	68 a2 b8 02 c0       	push   0xc002b8a2
c001e608:	e8 e6 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e60d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e611:	83 c4 10             	add    esp,0x10
c001e614:	3c ee                	cmp    al,0xee
c001e616:	75 10                	jne    c001e628 <Vm::faultHandler(regs*)+0x3e1>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e61e:	e8 fa f8 ff ff       	call   c001df1d <Vm::mainloop3(unsigned long)>
c001e623:	e9 c0 03 00 00       	jmp    c001e9e8 <Vm::faultHandler(regs*)+0x7a1>
c001e628:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e62c:	83 ec 0c             	sub    esp,0xc
c001e62f:	53                   	push   ebx
c001e630:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e634:	53                   	push   ebx
c001e635:	55                   	push   ebp
c001e636:	50                   	push   eax
c001e637:	57                   	push   edi
c001e638:	e8 0c fb ff ff       	call   c001e149 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e63d:	eb 36                	jmp    c001e675 <Vm::faultHandler(regs*)+0x42e>
c001e63f:	83 ec 0c             	sub    esp,0xc
c001e642:	68 ac b8 02 c0       	push   0xc002b8ac
c001e647:	e8 a7 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e64c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e651:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e655:	e9 8b 03 00 00       	jmp    c001e9e5 <Vm::faultHandler(regs*)+0x79e>
c001e65a:	83 ec 0c             	sub    esp,0xc
c001e65d:	68 b1 b8 02 c0       	push   0xc002b8b1
c001e662:	e8 8c 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e66c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e670:	e9 70 03 00 00       	jmp    c001e9e5 <Vm::faultHandler(regs*)+0x79e>
c001e675:	83 c4 20             	add    esp,0x20
c001e678:	e9 99 03 00 00       	jmp    c001ea16 <Vm::faultHandler(regs*)+0x7cf>
c001e67d:	83 ec 0c             	sub    esp,0xc
c001e680:	68 ef b8 02 c0       	push   0xc002b8ef
c001e685:	e8 69 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e68a:	83 c4 10             	add    esp,0x10
c001e68d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e690:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e695:	74 0d                	je     c001e6a4 <Vm::faultHandler(regs*)+0x45d>
c001e697:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e69e:	0f 87 9e 01 00 00    	ja     c001e842 <Vm::faultHandler(regs*)+0x5fb>
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6ab:	0f b7 db             	movzx  ebx,bx
c001e6ae:	50                   	push   eax
c001e6af:	e8 9e f7 ff ff       	call   c001de52 <Vm::inbv(unsigned short)>
c001e6b4:	83 c4 0c             	add    esp,0xc
c001e6b7:	0f b6 c0             	movzx  eax,al
c001e6ba:	50                   	push   eax
c001e6bb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e6bf:	50                   	push   eax
c001e6c0:	53                   	push   ebx
c001e6c1:	e8 41 fb ff ff       	call   c001e207 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e6c6:	83 c4 10             	add    esp,0x10
c001e6c9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e6cc:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e6d0:	74 03                	je     c001e6d5 <Vm::faultHandler(regs*)+0x48e>
c001e6d2:	48                   	dec    eax
c001e6d3:	eb 01                	jmp    c001e6d6 <Vm::faultHandler(regs*)+0x48f>
c001e6d5:	40                   	inc    eax
c001e6d6:	0f b7 c0             	movzx  eax,ax
c001e6d9:	eb 7f                	jmp    c001e75a <Vm::faultHandler(regs*)+0x513>
c001e6db:	83 ec 0c             	sub    esp,0xc
c001e6de:	68 21 b9 02 c0       	push   0xc002b921
c001e6e3:	e8 0b 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e6e8:	83 c4 10             	add    esp,0x10
c001e6eb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e6ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e6f3:	74 0d                	je     c001e702 <Vm::faultHandler(regs*)+0x4bb>
c001e6f5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e6fc:	0f 87 40 01 00 00    	ja     c001e842 <Vm::faultHandler(regs*)+0x5fb>
c001e702:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e705:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e709:	0f b7 db             	movzx  ebx,bx
c001e70c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e711:	74 20                	je     c001e733 <Vm::faultHandler(regs*)+0x4ec>
c001e713:	ed                   	in     eax,dx
c001e714:	51                   	push   ecx
c001e715:	50                   	push   eax
c001e716:	56                   	push   esi
c001e717:	53                   	push   ebx
c001e718:	e8 15 fb ff ff       	call   c001e232 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e71d:	83 c4 10             	add    esp,0x10
c001e720:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e723:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e727:	74 05                	je     c001e72e <Vm::faultHandler(regs*)+0x4e7>
c001e729:	83 e8 04             	sub    eax,0x4
c001e72c:	eb 27                	jmp    c001e755 <Vm::faultHandler(regs*)+0x50e>
c001e72e:	83 c0 04             	add    eax,0x4
c001e731:	eb 22                	jmp    c001e755 <Vm::faultHandler(regs*)+0x50e>
c001e733:	66 ed                	in     ax,dx
c001e735:	0f b7 c0             	movzx  eax,ax
c001e738:	52                   	push   edx
c001e739:	50                   	push   eax
c001e73a:	56                   	push   esi
c001e73b:	53                   	push   ebx
c001e73c:	e8 db fa ff ff       	call   c001e21c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e741:	83 c4 10             	add    esp,0x10
c001e744:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e747:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e74b:	74 05                	je     c001e752 <Vm::faultHandler(regs*)+0x50b>
c001e74d:	83 e8 02             	sub    eax,0x2
c001e750:	eb 03                	jmp    c001e755 <Vm::faultHandler(regs*)+0x50e>
c001e752:	83 c0 02             	add    eax,0x2
c001e755:	25 ff ff 00 00       	and    eax,0xffff
c001e75a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e75d:	e9 b1 02 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	4b                   	dec    ebx
c001e766:	68 27 b9 02 c0       	push   0xc002b927
c001e76b:	e8 83 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e770:	83 c4 10             	add    esp,0x10
c001e773:	80 fb 05             	cmp    bl,0x5
c001e776:	77 0a                	ja     c001e782 <Vm::faultHandler(regs*)+0x53b>
c001e778:	0f b6 db             	movzx  ebx,bl
c001e77b:	ff 24 9d 98 b9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4668]
c001e782:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e786:	eb 1b                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x55c>
c001e788:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e78c:	eb 15                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x55c>
c001e78e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e792:	eb 0f                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x55c>
c001e794:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e798:	eb 09                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x55c>
c001e79a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e79d:	eb 04                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x55c>
c001e79f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e7a3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e7a8:	74 0d                	je     c001e7b7 <Vm::faultHandler(regs*)+0x570>
c001e7aa:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e7b1:	0f 87 8b 00 00 00    	ja     c001e842 <Vm::faultHandler(regs*)+0x5fb>
c001e7b7:	53                   	push   ebx
c001e7b8:	53                   	push   ebx
c001e7b9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e7bd:	52                   	push   edx
c001e7be:	50                   	push   eax
c001e7bf:	e8 0f fa ff ff       	call   c001e1d3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e7c4:	5e                   	pop    esi
c001e7c5:	0f b6 c0             	movzx  eax,al
c001e7c8:	5d                   	pop    ebp
c001e7c9:	50                   	push   eax
c001e7ca:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e7ce:	50                   	push   eax
c001e7cf:	e8 91 f6 ff ff       	call   c001de65 <Vm::outbv(unsigned short, unsigned char)>
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e7da:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e7de:	74 03                	je     c001e7e3 <Vm::faultHandler(regs*)+0x59c>
c001e7e0:	48                   	dec    eax
c001e7e1:	eb 01                	jmp    c001e7e4 <Vm::faultHandler(regs*)+0x59d>
c001e7e3:	40                   	inc    eax
c001e7e4:	0f b7 c0             	movzx  eax,ax
c001e7e7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e7ea:	e9 24 02 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e7ef:	83 ec 0c             	sub    esp,0xc
c001e7f2:	4b                   	dec    ebx
c001e7f3:	68 27 b9 02 c0       	push   0xc002b927
c001e7f8:	e8 f6 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	80 fb 05             	cmp    bl,0x5
c001e803:	77 0a                	ja     c001e80f <Vm::faultHandler(regs*)+0x5c8>
c001e805:	0f b6 db             	movzx  ebx,bl
c001e808:	ff 24 9d b0 b9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4650]
c001e80f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e813:	eb 1b                	jmp    c001e830 <Vm::faultHandler(regs*)+0x5e9>
c001e815:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e819:	eb 15                	jmp    c001e830 <Vm::faultHandler(regs*)+0x5e9>
c001e81b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e81f:	eb 0f                	jmp    c001e830 <Vm::faultHandler(regs*)+0x5e9>
c001e821:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e825:	eb 09                	jmp    c001e830 <Vm::faultHandler(regs*)+0x5e9>
c001e827:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e82a:	eb 04                	jmp    c001e830 <Vm::faultHandler(regs*)+0x5e9>
c001e82c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e830:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e833:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e838:	74 39                	je     c001e873 <Vm::faultHandler(regs*)+0x62c>
c001e83a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e840:	76 31                	jbe    c001e873 <Vm::faultHandler(regs*)+0x62c>
c001e842:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e846:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e84a:	51                   	push   ecx
c001e84b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e84f:	51                   	push   ecx
c001e850:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e854:	51                   	push   ecx
c001e855:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e859:	51                   	push   ecx
c001e85a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e85e:	52                   	push   edx
c001e85f:	50                   	push   eax
c001e860:	50                   	push   eax
c001e861:	68 f4 b8 02 c0       	push   0xc002b8f4
c001e866:	e8 88 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e86b:	83 c4 20             	add    esp,0x20
c001e86e:	e9 fb 01 00 00       	jmp    c001ea6e <Vm::faultHandler(regs*)+0x827>
c001e873:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e876:	0f b7 d3             	movzx  edx,bx
c001e879:	81 e6 00 04 00 00    	and    esi,0x400
c001e87f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e882:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e887:	74 1d                	je     c001e8a6 <Vm::faultHandler(regs*)+0x65f>
c001e889:	51                   	push   ecx
c001e88a:	51                   	push   ecx
c001e88b:	52                   	push   edx
c001e88c:	50                   	push   eax
c001e88d:	e8 64 f9 ff ff       	call   c001e1f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e892:	83 c4 10             	add    esp,0x10
c001e895:	89 ea                	mov    edx,ebp
c001e897:	ef                   	out    dx,eax
c001e898:	85 f6                	test   esi,esi
c001e89a:	74 05                	je     c001e8a1 <Vm::faultHandler(regs*)+0x65a>
c001e89c:	83 eb 04             	sub    ebx,0x4
c001e89f:	eb 21                	jmp    c001e8c2 <Vm::faultHandler(regs*)+0x67b>
c001e8a1:	83 c3 04             	add    ebx,0x4
c001e8a4:	eb 1c                	jmp    c001e8c2 <Vm::faultHandler(regs*)+0x67b>
c001e8a6:	51                   	push   ecx
c001e8a7:	51                   	push   ecx
c001e8a8:	52                   	push   edx
c001e8a9:	50                   	push   eax
c001e8aa:	e8 35 f9 ff ff       	call   c001e1e4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	89 ea                	mov    edx,ebp
c001e8b4:	66 ef                	out    dx,ax
c001e8b6:	85 f6                	test   esi,esi
c001e8b8:	74 05                	je     c001e8bf <Vm::faultHandler(regs*)+0x678>
c001e8ba:	83 eb 02             	sub    ebx,0x2
c001e8bd:	eb 03                	jmp    c001e8c2 <Vm::faultHandler(regs*)+0x67b>
c001e8bf:	83 c3 02             	add    ebx,0x2
c001e8c2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e8c8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e8cb:	e9 43 01 00 00       	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e8d0:	53                   	push   ebx
c001e8d1:	53                   	push   ebx
c001e8d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8d6:	50                   	push   eax
c001e8d7:	68 2d b9 02 c0       	push   0xc002b92d
c001e8dc:	e8 12 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e8e1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e8e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8ef:	e8 5e f5 ff ff       	call   c001de52 <Vm::inbv(unsigned short)>
c001e8f4:	0f b6 c0             	movzx  eax,al
c001e8f7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e8fa:	eb 5e                	jmp    c001e95a <Vm::faultHandler(regs*)+0x713>
c001e8fc:	51                   	push   ecx
c001e8fd:	51                   	push   ecx
c001e8fe:	53                   	push   ebx
c001e8ff:	68 33 b9 02 c0       	push   0xc002b933
c001e904:	e8 ea 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e909:	83 c4 10             	add    esp,0x10
c001e90c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e911:	74 07                	je     c001e91a <Vm::faultHandler(regs*)+0x6d3>
c001e913:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e917:	ed                   	in     eax,dx
c001e918:	eb 14                	jmp    c001e92e <Vm::faultHandler(regs*)+0x6e7>
c001e91a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e91d:	66 31 db             	xor    bx,bx
c001e920:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e923:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e927:	66 ed                	in     ax,dx
c001e929:	0f b7 c0             	movzx  eax,ax
c001e92c:	09 d8                	or     eax,ebx
c001e92e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e931:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e935:	e9 dc 00 00 00       	jmp    c001ea16 <Vm::faultHandler(regs*)+0x7cf>
c001e93a:	50                   	push   eax
c001e93b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e93e:	53                   	push   ebx
c001e93f:	68 39 b9 02 c0       	push   0xc002b939
c001e944:	e8 aa 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e949:	58                   	pop    eax
c001e94a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e94e:	5a                   	pop    edx
c001e94f:	50                   	push   eax
c001e950:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e954:	50                   	push   eax
c001e955:	e8 0b f5 ff ff       	call   c001de65 <Vm::outbv(unsigned short, unsigned char)>
c001e95a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e95e:	e9 85 00 00 00       	jmp    c001e9e8 <Vm::faultHandler(regs*)+0x7a1>
c001e963:	50                   	push   eax
c001e964:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e967:	53                   	push   ebx
c001e968:	68 42 b9 02 c0       	push   0xc002b942
c001e96d:	e8 81 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e979:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e97e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e981:	74 03                	je     c001e986 <Vm::faultHandler(regs*)+0x73f>
c001e983:	ef                   	out    dx,eax
c001e984:	eb ab                	jmp    c001e931 <Vm::faultHandler(regs*)+0x6ea>
c001e986:	66 ef                	out    dx,ax
c001e988:	eb a7                	jmp    c001e931 <Vm::faultHandler(regs*)+0x6ea>
c001e98a:	55                   	push   ebp
c001e98b:	55                   	push   ebp
c001e98c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e98f:	68 4b b9 02 c0       	push   0xc002b94b
c001e994:	e8 5a 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e999:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e9a0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e9a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9a7:	e8 a6 f4 ff ff       	call   c001de52 <Vm::inbv(unsigned short)>
c001e9ac:	0f b6 c0             	movzx  eax,al
c001e9af:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e9b2:	eb 31                	jmp    c001e9e5 <Vm::faultHandler(regs*)+0x79e>
c001e9b4:	56                   	push   esi
c001e9b5:	56                   	push   esi
c001e9b6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e9b9:	68 51 b9 02 c0       	push   0xc002b951
c001e9be:	e8 30 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e9c3:	83 c4 10             	add    esp,0x10
c001e9c6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e9c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9ce:	74 03                	je     c001e9d3 <Vm::faultHandler(regs*)+0x78c>
c001e9d0:	ed                   	in     eax,dx
c001e9d1:	eb 0d                	jmp    c001e9e0 <Vm::faultHandler(regs*)+0x799>
c001e9d3:	66 ed                	in     ax,dx
c001e9d5:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e9d8:	0f b7 c0             	movzx  eax,ax
c001e9db:	66 31 d2             	xor    dx,dx
c001e9de:	09 d0                	or     eax,edx
c001e9e0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e9e3:	eb 2e                	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001e9e5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	eb 29                	jmp    c001ea16 <Vm::faultHandler(regs*)+0x7cf>
c001e9ed:	50                   	push   eax
c001e9ee:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e9f1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e9f4:	68 60 b9 02 c0       	push   0xc002b960
c001e9f9:	e8 f5 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ea04:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea09:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ea0c:	74 03                	je     c001ea11 <Vm::faultHandler(regs*)+0x7ca>
c001ea0e:	ef                   	out    dx,eax
c001ea0f:	eb 02                	jmp    c001ea13 <Vm::faultHandler(regs*)+0x7cc>
c001ea11:	66 ef                	out    dx,ax
c001ea13:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea16:	b0 01                	mov    al,0x1
c001ea18:	eb 56                	jmp    c001ea70 <Vm::faultHandler(regs*)+0x829>
c001ea1a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ea1e:	51                   	push   ecx
c001ea1f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ea23:	51                   	push   ecx
c001ea24:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ea28:	51                   	push   ecx
c001ea29:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ea2d:	51                   	push   ecx
c001ea2e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ea32:	52                   	push   edx
c001ea33:	50                   	push   eax
c001ea34:	50                   	push   eax
c001ea35:	68 69 b9 02 c0       	push   0xc002b969
c001ea3a:	e8 b4 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ea3f:	83 c4 20             	add    esp,0x20
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	6a 60                	push   0x60
c001ea47:	e8 06 f4 ff ff       	call   c001de52 <Vm::inbv(unsigned short)>
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	3c 1c                	cmp    al,0x1c
c001ea51:	74 04                	je     c001ea57 <Vm::faultHandler(regs*)+0x810>
c001ea53:	3c 5a                	cmp    al,0x5a
c001ea55:	75 eb                	jne    c001ea42 <Vm::faultHandler(regs*)+0x7fb>
c001ea57:	3c 1c                	cmp    al,0x1c
c001ea59:	74 04                	je     c001ea5f <Vm::faultHandler(regs*)+0x818>
c001ea5b:	3c 5a                	cmp    al,0x5a
c001ea5d:	75 0f                	jne    c001ea6e <Vm::faultHandler(regs*)+0x827>
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	6a 60                	push   0x60
c001ea64:	e8 e9 f3 ff ff       	call   c001de52 <Vm::inbv(unsigned short)>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	eb e9                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x810>
c001ea6e:	31 c0                	xor    eax,eax
c001ea70:	83 c4 1c             	add    esp,0x1c
c001ea73:	5b                   	pop    ebx
c001ea74:	5e                   	pop    esi
c001ea75:	5f                   	pop    edi
c001ea76:	5d                   	pop    ebp
c001ea77:	c3                   	ret    

c001ea78 <Vm::fpuInternalTo32(unsigned long long)>:
c001ea78:	57                   	push   edi
c001ea79:	56                   	push   esi
c001ea7a:	53                   	push   ebx
c001ea7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea83:	89 d6                	mov    esi,edx
c001ea85:	89 d7                	mov    edi,edx
c001ea87:	89 c1                	mov    ecx,eax
c001ea89:	c1 ef 14             	shr    edi,0x14
c001ea8c:	89 d3                	mov    ebx,edx
c001ea8e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ea94:	31 d2                	xor    edx,edx
c001ea96:	89 f8                	mov    eax,edi
c001ea98:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ea9e:	bf ff 00 00 00       	mov    edi,0xff
c001eaa3:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eaa8:	83 d2 ff             	adc    edx,0xffffffff
c001eaab:	39 c7                	cmp    edi,eax
c001eaad:	bf 00 00 00 00       	mov    edi,0x0
c001eab2:	19 d7                	sbb    edi,edx
c001eab4:	72 15                	jb     c001eacb <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eab6:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eaba:	c1 e0 17             	shl    eax,0x17
c001eabd:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eac3:	09 f1                	or     ecx,esi
c001eac5:	09 c1                	or     ecx,eax
c001eac7:	89 cf                	mov    edi,ecx
c001eac9:	eb 02                	jmp    c001eacd <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001eacb:	31 ff                	xor    edi,edi
c001eacd:	89 f8                	mov    eax,edi
c001eacf:	5b                   	pop    ebx
c001ead0:	5e                   	pop    esi
c001ead1:	5f                   	pop    edi
c001ead2:	c3                   	ret    

c001ead3 <Vm::fpuInternalTo64(unsigned long long)>:
c001ead3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eadb:	c3                   	ret    

c001eadc <Vm::fpu32ToInternal(unsigned int)>:
c001eadc:	57                   	push   edi
c001eadd:	31 ff                	xor    edi,edi
c001eadf:	56                   	push   esi
c001eae0:	53                   	push   ebx
c001eae1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eae5:	89 cb                	mov    ebx,ecx
c001eae7:	89 ce                	mov    esi,ecx
c001eae9:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eaef:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eaf5:	c1 e9 17             	shr    ecx,0x17
c001eaf8:	89 f0                	mov    eax,esi
c001eafa:	0f b6 d1             	movzx  edx,cl
c001eafd:	81 c2 80 03 00 00    	add    edx,0x380
c001eb03:	89 d1                	mov    ecx,edx
c001eb05:	89 fa                	mov    edx,edi
c001eb07:	c1 e1 14             	shl    ecx,0x14
c001eb0a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eb0e:	c1 e0 1d             	shl    eax,0x1d
c001eb11:	89 d7                	mov    edi,edx
c001eb13:	89 c6                	mov    esi,eax
c001eb15:	89 ca                	mov    edx,ecx
c001eb17:	89 f0                	mov    eax,esi
c001eb19:	09 fa                	or     edx,edi
c001eb1b:	09 da                	or     edx,ebx
c001eb1d:	5b                   	pop    ebx
c001eb1e:	5e                   	pop    esi
c001eb1f:	5f                   	pop    edi
c001eb20:	c3                   	ret    

c001eb21 <Vm::fpu64ToInternal(unsigned long long)>:
c001eb21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb29:	c3                   	ret    

c001eb2a <Vm::fpuFloatToLong(unsigned long long)>:
c001eb2a:	57                   	push   edi
c001eb2b:	31 c0                	xor    eax,eax
c001eb2d:	56                   	push   esi
c001eb2e:	31 d2                	xor    edx,edx
c001eb30:	53                   	push   ebx
c001eb31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb39:	89 d9                	mov    ecx,ebx
c001eb3b:	c1 e9 14             	shr    ecx,0x14
c001eb3e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eb44:	89 cf                	mov    edi,ecx
c001eb46:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001eb4c:	78 33                	js     c001eb81 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eb4e:	89 d9                	mov    ecx,ebx
c001eb50:	89 f0                	mov    eax,esi
c001eb52:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eb58:	81 c9 00 00 10 00    	or     ecx,0x100000
c001eb5e:	89 ca                	mov    edx,ecx
c001eb60:	b9 34 00 00 00       	mov    ecx,0x34
c001eb65:	29 f9                	sub    ecx,edi
c001eb67:	0f ad d0             	shrd   eax,edx,cl
c001eb6a:	d3 fa                	sar    edx,cl
c001eb6c:	f6 c1 20             	test   cl,0x20
c001eb6f:	74 05                	je     c001eb76 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001eb71:	89 d0                	mov    eax,edx
c001eb73:	c1 fa 1f             	sar    edx,0x1f
c001eb76:	85 db                	test   ebx,ebx
c001eb78:	79 07                	jns    c001eb81 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eb7a:	f7 d8                	neg    eax
c001eb7c:	83 d2 00             	adc    edx,0x0
c001eb7f:	f7 da                	neg    edx
c001eb81:	5b                   	pop    ebx
c001eb82:	5e                   	pop    esi
c001eb83:	5f                   	pop    edi
c001eb84:	c3                   	ret    

c001eb85 <Vm::fpuULongToFloat(unsigned long long)>:
c001eb85:	57                   	push   edi
c001eb86:	31 c9                	xor    ecx,ecx
c001eb88:	56                   	push   esi
c001eb89:	53                   	push   ebx
c001eb8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb8e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eb92:	0f ba e7 14          	bt     edi,0x14
c001eb96:	72 07                	jb     c001eb9f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eb98:	01 f6                	add    esi,esi
c001eb9a:	11 ff                	adc    edi,edi
c001eb9c:	41                   	inc    ecx
c001eb9d:	eb f3                	jmp    c001eb92 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eb9f:	89 fa                	mov    edx,edi
c001eba1:	89 f0                	mov    eax,esi
c001eba3:	bb 33 04 00 00       	mov    ebx,0x433
c001eba8:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ebae:	29 cb                	sub    ebx,ecx
c001ebb0:	89 d9                	mov    ecx,ebx
c001ebb2:	5b                   	pop    ebx
c001ebb3:	c1 e1 14             	shl    ecx,0x14
c001ebb6:	5e                   	pop    esi
c001ebb7:	09 ca                	or     edx,ecx
c001ebb9:	5f                   	pop    edi
c001ebba:	c3                   	ret    

c001ebbb <Vm::fpuLongToFloat(long long)>:
c001ebbb:	56                   	push   esi
c001ebbc:	31 c0                	xor    eax,eax
c001ebbe:	53                   	push   ebx
c001ebbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebc7:	39 c8                	cmp    eax,ecx
c001ebc9:	19 d8                	sbb    eax,ebx
c001ebcb:	7d 04                	jge    c001ebd1 <Vm::fpuLongToFloat(long long)+0x16>
c001ebcd:	31 f6                	xor    esi,esi
c001ebcf:	eb 0c                	jmp    c001ebdd <Vm::fpuLongToFloat(long long)+0x22>
c001ebd1:	f7 d9                	neg    ecx
c001ebd3:	be 01 00 00 00       	mov    esi,0x1
c001ebd8:	83 d3 00             	adc    ebx,0x0
c001ebdb:	f7 db                	neg    ebx
c001ebdd:	31 c0                	xor    eax,eax
c001ebdf:	0f ba e3 14          	bt     ebx,0x14
c001ebe3:	72 07                	jb     c001ebec <Vm::fpuLongToFloat(long long)+0x31>
c001ebe5:	01 c9                	add    ecx,ecx
c001ebe7:	11 db                	adc    ebx,ebx
c001ebe9:	40                   	inc    eax
c001ebea:	eb f3                	jmp    c001ebdf <Vm::fpuLongToFloat(long long)+0x24>
c001ebec:	ba 33 04 00 00       	mov    edx,0x433
c001ebf1:	29 c2                	sub    edx,eax
c001ebf3:	89 c8                	mov    eax,ecx
c001ebf5:	c1 e2 14             	shl    edx,0x14
c001ebf8:	89 d9                	mov    ecx,ebx
c001ebfa:	89 f3                	mov    ebx,esi
c001ebfc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ec02:	09 ca                	or     edx,ecx
c001ec04:	84 db                	test   bl,bl
c001ec06:	74 06                	je     c001ec0e <Vm::fpuLongToFloat(long long)+0x53>
c001ec08:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ec0e:	5b                   	pop    ebx
c001ec0f:	5e                   	pop    esi
c001ec10:	c3                   	ret    

c001ec11 <Vm::fpuGet0()>:
c001ec11:	31 c0                	xor    eax,eax
c001ec13:	31 d2                	xor    edx,edx
c001ec15:	c3                   	ret    

c001ec16 <Vm::fpuGet1()>:
c001ec16:	b8 01 00 00 00       	mov    eax,0x1
c001ec1b:	31 d2                	xor    edx,edx
c001ec1d:	c3                   	ret    

c001ec1e <Vm::fpuGetPi()>:
c001ec1e:	b8 03 00 00 00       	mov    eax,0x3
c001ec23:	31 d2                	xor    edx,edx
c001ec25:	c3                   	ret    

c001ec26 <Vm::fpuGetLog2E()>:
c001ec26:	83 ec 18             	sub    esp,0x18
c001ec29:	68 c8 b9 02 c0       	push   0xc002b9c8
c001ec2e:	e8 f2 af ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ec33:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec38:	31 d2                	xor    edx,edx
c001ec3a:	83 c4 1c             	add    esp,0x1c
c001ec3d:	c3                   	ret    

c001ec3e <Vm::fpuGetLogE2()>:
c001ec3e:	83 ec 18             	sub    esp,0x18
c001ec41:	68 d4 b9 02 c0       	push   0xc002b9d4
c001ec46:	e8 da af ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ec4b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec50:	31 d2                	xor    edx,edx
c001ec52:	83 c4 1c             	add    esp,0x1c
c001ec55:	c3                   	ret    

c001ec56 <Vm::fpuGetLog210()>:
c001ec56:	83 ec 18             	sub    esp,0x18
c001ec59:	68 e0 b9 02 c0       	push   0xc002b9e0
c001ec5e:	e8 c2 af ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ec63:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec68:	31 d2                	xor    edx,edx
c001ec6a:	83 c4 1c             	add    esp,0x1c
c001ec6d:	c3                   	ret    

c001ec6e <Vm::fpuGetLog102()>:
c001ec6e:	83 ec 18             	sub    esp,0x18
c001ec71:	68 ed b9 02 c0       	push   0xc002b9ed
c001ec76:	e8 aa af ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001ec7b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec80:	31 d2                	xor    edx,edx
c001ec82:	83 c4 1c             	add    esp,0x1c
c001ec85:	c3                   	ret    

c001ec86 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ec86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec8a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ec8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec92:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ec96:	0f 92 c0             	setb   al
c001ec99:	c3                   	ret    

c001ec9a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ec9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ec9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca2:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001eca6:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ecaa:	09 c2                	or     edx,eax
c001ecac:	0f 94 c0             	sete   al
c001ecaf:	c3                   	ret    

c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ecb0:	57                   	push   edi
c001ecb1:	56                   	push   esi
c001ecb2:	53                   	push   ebx
c001ecb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecb7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecbb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ecbf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ecc3:	57                   	push   edi
c001ecc4:	56                   	push   esi
c001ecc5:	53                   	push   ebx
c001ecc6:	51                   	push   ecx
c001ecc7:	e8 ce ff ff ff       	call   c001ec9a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	88 c2                	mov    dl,al
c001ecd1:	31 c0                	xor    eax,eax
c001ecd3:	84 d2                	test   dl,dl
c001ecd5:	75 0c                	jne    c001ece3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ecd7:	57                   	push   edi
c001ecd8:	56                   	push   esi
c001ecd9:	53                   	push   ebx
c001ecda:	51                   	push   ecx
c001ecdb:	e8 a6 ff ff ff       	call   c001ec86 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	83 e0 01             	and    eax,0x1
c001ece6:	5b                   	pop    ebx
c001ece7:	88 c1                	mov    cl,al
c001ece9:	83 e2 01             	and    edx,0x1
c001ecec:	a0 61 ec 02 c0       	mov    al,ds:0xc002ec61
c001ecf1:	c1 e2 06             	shl    edx,0x6
c001ecf4:	83 e0 ba             	and    eax,0xffffffba
c001ecf7:	5e                   	pop    esi
c001ecf8:	09 c8                	or     eax,ecx
c001ecfa:	5f                   	pop    edi
c001ecfb:	09 d0                	or     eax,edx
c001ecfd:	a2 61 ec 02 c0       	mov    ds:0xc002ec61,al
c001ed02:	c3                   	ret    

c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ed03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed0b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ed0f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ed13:	c3                   	ret    

c001ed14 <Vm::fpuAbs(unsigned long long)>:
c001ed14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed1c:	c3                   	ret    

c001ed1d <Vm::fpuChs(unsigned long long)>:
c001ed1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed21:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed25:	f7 d8                	neg    eax
c001ed27:	83 d2 00             	adc    edx,0x0
c001ed2a:	f7 da                	neg    edx
c001ed2c:	c3                   	ret    

c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ed2d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ed31:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ed36:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ed3a:	eb c7                	jmp    c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ed3c:	53                   	push   ebx
c001ed3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed49:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed4d:	0f af ca             	imul   ecx,edx
c001ed50:	0f af d8             	imul   ebx,eax
c001ed53:	f7 e2                	mul    edx
c001ed55:	01 d9                	add    ecx,ebx
c001ed57:	5b                   	pop    ebx
c001ed58:	01 ca                	add    edx,ecx
c001ed5a:	c3                   	ret    

c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ed5b:	83 ec 0c             	sub    esp,0xc
c001ed5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6e:	e8 e9 70 00 00       	call   c0025e5c <__udivdi3>
c001ed73:	83 c4 1c             	add    esp,0x1c
c001ed76:	c3                   	ret    

c001ed77 <Vm::fpuSquare(unsigned long long)>:
c001ed77:	50                   	push   eax
c001ed78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed80:	52                   	push   edx
c001ed81:	50                   	push   eax
c001ed82:	52                   	push   edx
c001ed83:	50                   	push   eax
c001ed84:	e8 b3 ff ff ff       	call   c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ed89:	83 c4 14             	add    esp,0x14
c001ed8c:	c3                   	ret    

c001ed8d <Vm::fpuGetReg(int)>:
c001ed8d:	83 ec 0c             	sub    esp,0xc
c001ed90:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ed95:	76 10                	jbe    c001eda7 <Vm::fpuGetReg(int)+0x1a>
c001ed97:	83 ec 0c             	sub    esp,0xc
c001ed9a:	68 fa b9 02 c0       	push   0xc002b9fa
c001ed9f:	e8 81 ae ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001eda4:	83 c4 10             	add    esp,0x10
c001eda7:	a0 61 ec 02 c0       	mov    al,ds:0xc002ec61
c001edac:	b9 08 00 00 00       	mov    ecx,0x8
c001edb1:	c0 e8 03             	shr    al,0x3
c001edb4:	83 e0 07             	and    eax,0x7
c001edb7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001edbb:	99                   	cdq    
c001edbc:	f7 f9                	idiv   ecx
c001edbe:	8b 04 d5 64 ec 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd139c]
c001edc5:	8b 14 d5 68 ec 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1398]
c001edcc:	83 c4 0c             	add    esp,0xc
c001edcf:	c3                   	ret    

c001edd0 <Vm::fpuSetReg(int, unsigned long long)>:
c001edd0:	57                   	push   edi
c001edd1:	56                   	push   esi
c001edd2:	52                   	push   edx
c001edd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001edd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eddb:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ede0:	76 10                	jbe    c001edf2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ede2:	83 ec 0c             	sub    esp,0xc
c001ede5:	68 0d ba 02 c0       	push   0xc002ba0d
c001edea:	e8 36 ae ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	a0 61 ec 02 c0       	mov    al,ds:0xc002ec61
c001edf7:	b9 08 00 00 00       	mov    ecx,0x8
c001edfc:	c0 e8 03             	shr    al,0x3
c001edff:	83 e0 07             	and    eax,0x7
c001ee02:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ee06:	99                   	cdq    
c001ee07:	f7 f9                	idiv   ecx
c001ee09:	89 34 d5 64 ec 02 c0 	mov    DWORD PTR [edx*8-0x3ffd139c],esi
c001ee10:	89 3c d5 68 ec 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1398],edi
c001ee17:	58                   	pop    eax
c001ee18:	5e                   	pop    esi
c001ee19:	5f                   	pop    edi
c001ee1a:	c3                   	ret    

c001ee1b <Vm::fpuPush(unsigned long long)>:
c001ee1b:	a0 61 ec 02 c0       	mov    al,ds:0xc002ec61
c001ee20:	c0 e8 03             	shr    al,0x3
c001ee23:	83 e0 07             	and    eax,0x7
c001ee26:	83 c0 07             	add    eax,0x7
c001ee29:	88 c2                	mov    dl,al
c001ee2b:	83 e0 07             	and    eax,0x7
c001ee2e:	83 e2 07             	and    edx,0x7
c001ee31:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ee38:	8a 15 61 ec 02 c0    	mov    dl,BYTE PTR ds:0xc002ec61
c001ee3e:	83 e2 c7             	and    edx,0xffffffc7
c001ee41:	09 ca                	or     edx,ecx
c001ee43:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee47:	88 15 61 ec 02 c0    	mov    BYTE PTR ds:0xc002ec61,dl
c001ee4d:	89 0c c5 68 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1398],ecx
c001ee54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ee58:	89 14 c5 64 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd139c],edx
c001ee5f:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c001ee64:	83 f8 08             	cmp    eax,0x8
c001ee67:	75 08                	jne    c001ee71 <Vm::fpuPush(unsigned long long)+0x56>
c001ee69:	80 0d 60 ec 02 c0 40 	or     BYTE PTR ds:0xc002ec60,0x40
c001ee70:	c3                   	ret    
c001ee71:	40                   	inc    eax
c001ee72:	a3 a4 ec 02 c0       	mov    ds:0xc002eca4,eax
c001ee77:	c3                   	ret    

c001ee78 <Vm::fpuPop()>:
c001ee78:	8a 0d 61 ec 02 c0    	mov    cl,BYTE PTR ds:0xc002ec61
c001ee7e:	53                   	push   ebx
c001ee7f:	c0 e9 03             	shr    cl,0x3
c001ee82:	8a 1d 61 ec 02 c0    	mov    bl,BYTE PTR ds:0xc002ec61
c001ee88:	83 e1 07             	and    ecx,0x7
c001ee8b:	83 e3 c7             	and    ebx,0xffffffc7
c001ee8e:	8b 04 cd 64 ec 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd139c]
c001ee95:	8b 14 cd 68 ec 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1398]
c001ee9c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001eea3:	83 e1 38             	and    ecx,0x38
c001eea6:	09 d9                	or     ecx,ebx
c001eea8:	88 0d 61 ec 02 c0    	mov    BYTE PTR ds:0xc002ec61,cl
c001eeae:	8b 0d a4 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002eca4
c001eeb4:	85 c9                	test   ecx,ecx
c001eeb6:	74 09                	je     c001eec1 <Vm::fpuPop()+0x49>
c001eeb8:	49                   	dec    ecx
c001eeb9:	89 0d a4 ec 02 c0    	mov    DWORD PTR ds:0xc002eca4,ecx
c001eebf:	eb 07                	jmp    c001eec8 <Vm::fpuPop()+0x50>
c001eec1:	80 0d 60 ec 02 c0 40 	or     BYTE PTR ds:0xc002ec60,0x40
c001eec8:	5b                   	pop    ebx
c001eec9:	c3                   	ret    

c001eeca <Vm::x87Handler(regs*)>:
c001eeca:	55                   	push   ebp
c001eecb:	57                   	push   edi
c001eecc:	56                   	push   esi
c001eecd:	53                   	push   ebx
c001eece:	83 ec 1c             	sub    esp,0x1c
c001eed1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eed5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001eeda:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001eedd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001eee5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001eee9:	50                   	push   eax
c001eeea:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001eeee:	50                   	push   eax
c001eeef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eef3:	50                   	push   eax
c001eef4:	53                   	push   ebx
c001eef5:	e8 5c a5 ff ff       	call   c0019456 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001eefa:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001eefd:	83 c4 10             	add    esp,0x10
c001ef00:	89 c6                	mov    esi,eax
c001ef02:	80 fa d9             	cmp    dl,0xd9
c001ef05:	0f 85 52 01 00 00    	jne    c001f05d <Vm::x87Handler(regs*)+0x193>
c001ef0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0f:	8d 50 20             	lea    edx,[eax+0x20]
c001ef12:	80 fa 0e             	cmp    dl,0xe
c001ef15:	0f 87 86 00 00 00    	ja     c001efa1 <Vm::x87Handler(regs*)+0xd7>
c001ef1b:	0f b6 d2             	movzx  edx,dl
c001ef1e:	ff 24 95 20 ba 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd45e0]
c001ef25:	e8 e7 fc ff ff       	call   c001ec11 <Vm::fpuGet0()>
c001ef2a:	eb 05                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001ef2c:	e8 e5 fc ff ff       	call   c001ec16 <Vm::fpuGet1()>
c001ef31:	57                   	push   edi
c001ef32:	57                   	push   edi
c001ef33:	52                   	push   edx
c001ef34:	50                   	push   eax
c001ef35:	e8 e1 fe ff ff       	call   c001ee1b <Vm::fpuPush(unsigned long long)>
c001ef3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	b0 01                	mov    al,0x1
c001ef43:	e9 e3 09 00 00       	jmp    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	6a 00                	push   0x0
c001ef4d:	e8 3b fe ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001ef52:	59                   	pop    ecx
c001ef53:	5e                   	pop    esi
c001ef54:	52                   	push   edx
c001ef55:	50                   	push   eax
c001ef56:	e8 c2 fd ff ff       	call   c001ed1d <Vm::fpuChs(unsigned long long)>
c001ef5b:	eb 13                	jmp    c001ef70 <Vm::x87Handler(regs*)+0xa6>
c001ef5d:	83 ec 0c             	sub    esp,0xc
c001ef60:	6a 00                	push   0x0
c001ef62:	e8 26 fe ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001ef67:	5f                   	pop    edi
c001ef68:	5d                   	pop    ebp
c001ef69:	52                   	push   edx
c001ef6a:	50                   	push   eax
c001ef6b:	e8 a4 fd ff ff       	call   c001ed14 <Vm::fpuAbs(unsigned long long)>
c001ef70:	83 c4 0c             	add    esp,0xc
c001ef73:	52                   	push   edx
c001ef74:	50                   	push   eax
c001ef75:	6a 00                	push   0x0
c001ef77:	e8 54 fe ff ff       	call   c001edd0 <Vm::fpuSetReg(int, unsigned long long)>
c001ef7c:	eb bc                	jmp    c001ef3a <Vm::x87Handler(regs*)+0x70>
c001ef7e:	e8 d3 fc ff ff       	call   c001ec56 <Vm::fpuGetLog210()>
c001ef83:	eb ac                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001ef85:	e8 9c fc ff ff       	call   c001ec26 <Vm::fpuGetLog2E()>
c001ef8a:	eb a5                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001ef8c:	e8 8d fc ff ff       	call   c001ec1e <Vm::fpuGetPi()>
c001ef91:	eb 9e                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001ef93:	e8 d6 fc ff ff       	call   c001ec6e <Vm::fpuGetLog102()>
c001ef98:	eb 97                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001ef9a:	e8 9f fc ff ff       	call   c001ec3e <Vm::fpuGetLogE2()>
c001ef9f:	eb 90                	jmp    c001ef31 <Vm::x87Handler(regs*)+0x67>
c001efa1:	8d 50 40             	lea    edx,[eax+0x40]
c001efa4:	80 fa 07             	cmp    dl,0x7
c001efa7:	77 15                	ja     c001efbe <Vm::x87Handler(regs*)+0xf4>
c001efa9:	83 ec 0c             	sub    esp,0xc
c001efac:	2d c0 00 00 00       	sub    eax,0xc0
c001efb1:	50                   	push   eax
c001efb2:	e8 d6 fd ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001efb7:	59                   	pop    ecx
c001efb8:	5e                   	pop    esi
c001efb9:	e9 75 ff ff ff       	jmp    c001ef33 <Vm::x87Handler(regs*)+0x69>
c001efbe:	8d 50 38             	lea    edx,[eax+0x38]
c001efc1:	80 fa 07             	cmp    dl,0x7
c001efc4:	77 3c                	ja     c001f002 <Vm::x87Handler(regs*)+0x138>
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	2d c8 00 00 00       	sub    eax,0xc8
c001efce:	50                   	push   eax
c001efcf:	e8 b9 fd ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001efd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efdb:	89 c6                	mov    esi,eax
c001efdd:	89 d7                	mov    edi,edx
c001efdf:	e8 a9 fd ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001efe4:	83 c4 0c             	add    esp,0xc
c001efe7:	52                   	push   edx
c001efe8:	50                   	push   eax
c001efe9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efed:	2d c8 00 00 00       	sub    eax,0xc8
c001eff2:	50                   	push   eax
c001eff3:	e8 d8 fd ff ff       	call   c001edd0 <Vm::fpuSetReg(int, unsigned long long)>
c001eff8:	83 c4 0c             	add    esp,0xc
c001effb:	57                   	push   edi
c001effc:	56                   	push   esi
c001effd:	e9 73 ff ff ff       	jmp    c001ef75 <Vm::x87Handler(regs*)+0xab>
c001f002:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f006:	84 d2                	test   dl,dl
c001f008:	75 0f                	jne    c001f019 <Vm::x87Handler(regs*)+0x14f>
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	ff 36                	push   DWORD PTR [esi]
c001f00f:	e8 c8 fa ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f014:	e9 bf 00 00 00       	jmp    c001f0d8 <Vm::x87Handler(regs*)+0x20e>
c001f019:	80 fa 03             	cmp    dl,0x3
c001f01c:	75 13                	jne    c001f031 <Vm::x87Handler(regs*)+0x167>
c001f01e:	e8 55 fe ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f023:	55                   	push   ebp
c001f024:	55                   	push   ebp
c001f025:	52                   	push   edx
c001f026:	50                   	push   eax
c001f027:	e8 4c fa ff ff       	call   c001ea78 <Vm::fpuInternalTo32(unsigned long long)>
c001f02c:	e9 88 00 00 00       	jmp    c001f0b9 <Vm::x87Handler(regs*)+0x1ef>
c001f031:	80 fa 05             	cmp    dl,0x5
c001f034:	75 0e                	jne    c001f044 <Vm::x87Handler(regs*)+0x17a>
c001f036:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f039:	66 a3 62 ec 02 c0    	mov    ds:0xc002ec62,ax
c001f03f:	e9 df 00 00 00       	jmp    c001f123 <Vm::x87Handler(regs*)+0x259>
c001f044:	31 c0                	xor    eax,eax
c001f046:	80 fa 07             	cmp    dl,0x7
c001f049:	0f 85 dc 08 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f04f:	66 a1 62 ec 02 c0    	mov    ax,ds:0xc002ec62
c001f055:	66 89 06             	mov    WORD PTR [esi],ax
c001f058:	e9 c6 00 00 00       	jmp    c001f123 <Vm::x87Handler(regs*)+0x259>
c001f05d:	80 fa d8             	cmp    dl,0xd8
c001f060:	0f 84 c9 00 00 00    	je     c001f12f <Vm::x87Handler(regs*)+0x265>
c001f066:	80 fa dc             	cmp    dl,0xdc
c001f069:	0f 84 0d 02 00 00    	je     c001f27c <Vm::x87Handler(regs*)+0x3b2>
c001f06f:	80 fa de             	cmp    dl,0xde
c001f072:	0f 84 cd 02 00 00    	je     c001f345 <Vm::x87Handler(regs*)+0x47b>
c001f078:	80 fa dd             	cmp    dl,0xdd
c001f07b:	0f 84 5f 04 00 00    	je     c001f4e0 <Vm::x87Handler(regs*)+0x616>
c001f081:	80 fa da             	cmp    dl,0xda
c001f084:	0f 84 24 05 00 00    	je     c001f5ae <Vm::x87Handler(regs*)+0x6e4>
c001f08a:	80 fa df             	cmp    dl,0xdf
c001f08d:	0f 84 68 05 00 00    	je     c001f5fb <Vm::x87Handler(regs*)+0x731>
c001f093:	31 c0                	xor    eax,eax
c001f095:	80 fa db             	cmp    dl,0xdb
c001f098:	0f 85 8d 08 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f09e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0a2:	80 fa 03             	cmp    dl,0x3
c001f0a5:	0f 85 70 06 00 00    	jne    c001f71b <Vm::x87Handler(regs*)+0x851>
c001f0ab:	e8 c8 fd ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f0b0:	55                   	push   ebp
c001f0b1:	55                   	push   ebp
c001f0b2:	52                   	push   edx
c001f0b3:	50                   	push   eax
c001f0b4:	e8 71 fa ff ff       	call   c001eb2a <Vm::fpuFloatToLong(unsigned long long)>
c001f0b9:	83 c4 10             	add    esp,0x10
c001f0bc:	89 06                	mov    DWORD PTR [esi],eax
c001f0be:	eb 63                	jmp    c001f123 <Vm::x87Handler(regs*)+0x259>
c001f0c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0c4:	84 d2                	test   dl,dl
c001f0c6:	0f 85 e6 05 00 00    	jne    c001f6b2 <Vm::x87Handler(regs*)+0x7e8>
c001f0cc:	57                   	push   edi
c001f0cd:	57                   	push   edi
c001f0ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f0d1:	ff 36                	push   DWORD PTR [esi]
c001f0d3:	e8 49 fa ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f0d8:	5e                   	pop    esi
c001f0d9:	5f                   	pop    edi
c001f0da:	52                   	push   edx
c001f0db:	50                   	push   eax
c001f0dc:	e8 3a fd ff ff       	call   c001ee1b <Vm::fpuPush(unsigned long long)>
c001f0e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0e5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f0e8:	e9 51 fe ff ff       	jmp    c001ef3e <Vm::x87Handler(regs*)+0x74>
c001f0ed:	80 fa 03             	cmp    dl,0x3
c001f0f0:	0f 85 d7 06 00 00    	jne    c001f7cd <Vm::x87Handler(regs*)+0x903>
c001f0f6:	57                   	push   edi
c001f0f7:	57                   	push   edi
c001f0f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f0fb:	ff 36                	push   DWORD PTR [esi]
c001f0fd:	e8 1f fa ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f102:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f109:	89 c6                	mov    esi,eax
c001f10b:	89 d7                	mov    edi,edx
c001f10d:	e8 7b fc ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f112:	57                   	push   edi
c001f113:	56                   	push   esi
c001f114:	52                   	push   edx
c001f115:	50                   	push   eax
c001f116:	e8 95 fb ff ff       	call   c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f11b:	83 c4 20             	add    esp,0x20
c001f11e:	e8 55 fd ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f123:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f127:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f12a:	e9 12 fe ff ff       	jmp    c001ef41 <Vm::x87Handler(regs*)+0x77>
c001f12f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f133:	8d 50 40             	lea    edx,[eax+0x40]
c001f136:	80 fa 07             	cmp    dl,0x7
c001f139:	77 29                	ja     c001f164 <Vm::x87Handler(regs*)+0x29a>
c001f13b:	83 ec 0c             	sub    esp,0xc
c001f13e:	2d c0 00 00 00       	sub    eax,0xc0
c001f143:	50                   	push   eax
c001f144:	e8 44 fc ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f149:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f150:	89 c6                	mov    esi,eax
c001f152:	89 d7                	mov    edi,edx
c001f154:	e8 34 fc ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f159:	57                   	push   edi
c001f15a:	56                   	push   esi
c001f15b:	52                   	push   edx
c001f15c:	50                   	push   eax
c001f15d:	e8 a1 fb ff ff       	call   c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f162:	eb 2f                	jmp    c001f193 <Vm::x87Handler(regs*)+0x2c9>
c001f164:	8d 50 38             	lea    edx,[eax+0x38]
c001f167:	80 fa 07             	cmp    dl,0x7
c001f16a:	77 2f                	ja     c001f19b <Vm::x87Handler(regs*)+0x2d1>
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	2d c8 00 00 00       	sub    eax,0xc8
c001f174:	50                   	push   eax
c001f175:	e8 13 fc ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f17a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f181:	89 c6                	mov    esi,eax
c001f183:	89 d7                	mov    edi,edx
c001f185:	e8 03 fc ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f18a:	57                   	push   edi
c001f18b:	56                   	push   esi
c001f18c:	52                   	push   edx
c001f18d:	50                   	push   eax
c001f18e:	e8 a9 fb ff ff       	call   c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f193:	83 c4 1c             	add    esp,0x1c
c001f196:	e9 d8 fd ff ff       	jmp    c001ef73 <Vm::x87Handler(regs*)+0xa9>
c001f19b:	8d 50 30             	lea    edx,[eax+0x30]
c001f19e:	80 fa 07             	cmp    dl,0x7
c001f1a1:	77 0d                	ja     c001f1b0 <Vm::x87Handler(regs*)+0x2e6>
c001f1a3:	83 ec 0c             	sub    esp,0xc
c001f1a6:	2d d0 00 00 00       	sub    eax,0xd0
c001f1ab:	e9 99 03 00 00       	jmp    c001f549 <Vm::x87Handler(regs*)+0x67f>
c001f1b0:	8d 50 28             	lea    edx,[eax+0x28]
c001f1b3:	80 fa 07             	cmp    dl,0x7
c001f1b6:	77 0d                	ja     c001f1c5 <Vm::x87Handler(regs*)+0x2fb>
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	2d d8 00 00 00       	sub    eax,0xd8
c001f1c0:	e9 c0 03 00 00       	jmp    c001f585 <Vm::x87Handler(regs*)+0x6bb>
c001f1c5:	8d 50 20             	lea    edx,[eax+0x20]
c001f1c8:	80 fa 07             	cmp    dl,0x7
c001f1cb:	77 1b                	ja     c001f1e8 <Vm::x87Handler(regs*)+0x31e>
c001f1cd:	83 ec 0c             	sub    esp,0xc
c001f1d0:	2d e0 00 00 00       	sub    eax,0xe0
c001f1d5:	50                   	push   eax
c001f1d6:	e8 b2 fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f1db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1e2:	89 c6                	mov    esi,eax
c001f1e4:	89 d7                	mov    edi,edx
c001f1e6:	eb 22                	jmp    c001f20a <Vm::x87Handler(regs*)+0x340>
c001f1e8:	8d 50 18             	lea    edx,[eax+0x18]
c001f1eb:	80 fa 07             	cmp    dl,0x7
c001f1ee:	77 2d                	ja     c001f21d <Vm::x87Handler(regs*)+0x353>
c001f1f0:	83 ec 0c             	sub    esp,0xc
c001f1f3:	6a 00                	push   0x0
c001f1f5:	e8 93 fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f1fa:	89 c6                	mov    esi,eax
c001f1fc:	89 d7                	mov    edi,edx
c001f1fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f202:	2d e8 00 00 00       	sub    eax,0xe8
c001f207:	89 04 24             	mov    DWORD PTR [esp],eax
c001f20a:	e8 7e fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f20f:	57                   	push   edi
c001f210:	56                   	push   esi
c001f211:	52                   	push   edx
c001f212:	50                   	push   eax
c001f213:	e8 15 fb ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f218:	e9 76 ff ff ff       	jmp    c001f193 <Vm::x87Handler(regs*)+0x2c9>
c001f21d:	8d 50 10             	lea    edx,[eax+0x10]
c001f220:	80 fa 07             	cmp    dl,0x7
c001f223:	77 1b                	ja     c001f240 <Vm::x87Handler(regs*)+0x376>
c001f225:	83 ec 0c             	sub    esp,0xc
c001f228:	2d f0 00 00 00       	sub    eax,0xf0
c001f22d:	50                   	push   eax
c001f22e:	e8 5a fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f233:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f23a:	89 c6                	mov    esi,eax
c001f23c:	89 d7                	mov    edi,edx
c001f23e:	eb 22                	jmp    c001f262 <Vm::x87Handler(regs*)+0x398>
c001f240:	3c f7                	cmp    al,0xf7
c001f242:	0f 86 d1 03 00 00    	jbe    c001f619 <Vm::x87Handler(regs*)+0x74f>
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	6a 00                	push   0x0
c001f24d:	e8 3b fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f252:	89 c6                	mov    esi,eax
c001f254:	89 d7                	mov    edi,edx
c001f256:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f25a:	2d f8 00 00 00       	sub    eax,0xf8
c001f25f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f262:	e8 26 fb ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f267:	57                   	push   edi
c001f268:	56                   	push   esi
c001f269:	52                   	push   edx
c001f26a:	50                   	push   eax
c001f26b:	e8 eb fa ff ff       	call   c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f270:	83 c4 1c             	add    esp,0x1c
c001f273:	52                   	push   edx
c001f274:	50                   	push   eax
c001f275:	6a 00                	push   0x0
c001f277:	e9 51 02 00 00       	jmp    c001f4cd <Vm::x87Handler(regs*)+0x603>
c001f27c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f280:	8d 50 40             	lea    edx,[eax+0x40]
c001f283:	80 fa 07             	cmp    dl,0x7
c001f286:	77 37                	ja     c001f2bf <Vm::x87Handler(regs*)+0x3f5>
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	2d c0 00 00 00       	sub    eax,0xc0
c001f290:	50                   	push   eax
c001f291:	e8 f7 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f296:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f29d:	89 c6                	mov    esi,eax
c001f29f:	89 d7                	mov    edi,edx
c001f2a1:	e8 e7 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f2a6:	57                   	push   edi
c001f2a7:	56                   	push   esi
c001f2a8:	52                   	push   edx
c001f2a9:	50                   	push   eax
c001f2aa:	e8 54 fa ff ff       	call   c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2af:	83 c4 1c             	add    esp,0x1c
c001f2b2:	52                   	push   edx
c001f2b3:	50                   	push   eax
c001f2b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2b8:	2d c0 00 00 00       	sub    eax,0xc0
c001f2bd:	eb 3d                	jmp    c001f2fc <Vm::x87Handler(regs*)+0x432>
c001f2bf:	8d 50 38             	lea    edx,[eax+0x38]
c001f2c2:	80 fa 07             	cmp    dl,0x7
c001f2c5:	77 3b                	ja     c001f302 <Vm::x87Handler(regs*)+0x438>
c001f2c7:	83 ec 0c             	sub    esp,0xc
c001f2ca:	2d c8 00 00 00       	sub    eax,0xc8
c001f2cf:	50                   	push   eax
c001f2d0:	e8 b8 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f2d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2dc:	89 c6                	mov    esi,eax
c001f2de:	89 d7                	mov    edi,edx
c001f2e0:	e8 a8 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f2e5:	57                   	push   edi
c001f2e6:	56                   	push   esi
c001f2e7:	52                   	push   edx
c001f2e8:	50                   	push   eax
c001f2e9:	e8 4e fa ff ff       	call   c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f2ee:	83 c4 1c             	add    esp,0x1c
c001f2f1:	52                   	push   edx
c001f2f2:	50                   	push   eax
c001f2f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2f7:	2d c8 00 00 00       	sub    eax,0xc8
c001f2fc:	50                   	push   eax
c001f2fd:	e9 75 fc ff ff       	jmp    c001ef77 <Vm::x87Handler(regs*)+0xad>
c001f302:	83 c0 18             	add    eax,0x18
c001f305:	3c 07                	cmp    al,0x7
c001f307:	0f 87 3b 04 00 00    	ja     c001f748 <Vm::x87Handler(regs*)+0x87e>
c001f30d:	83 ec 0c             	sub    esp,0xc
c001f310:	6a 00                	push   0x0
c001f312:	e8 76 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f317:	89 c6                	mov    esi,eax
c001f319:	89 d7                	mov    edi,edx
c001f31b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f31f:	2d e8 00 00 00       	sub    eax,0xe8
c001f324:	89 04 24             	mov    DWORD PTR [esp],eax
c001f327:	e8 61 fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f32c:	57                   	push   edi
c001f32d:	56                   	push   esi
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	e8 f8 f9 ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f335:	83 c4 1c             	add    esp,0x1c
c001f338:	52                   	push   edx
c001f339:	50                   	push   eax
c001f33a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f33e:	2d e8 00 00 00       	sub    eax,0xe8
c001f343:	eb b7                	jmp    c001f2fc <Vm::x87Handler(regs*)+0x432>
c001f345:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f349:	8d 50 40             	lea    edx,[eax+0x40]
c001f34c:	80 fa 07             	cmp    dl,0x7
c001f34f:	77 3a                	ja     c001f38b <Vm::x87Handler(regs*)+0x4c1>
c001f351:	83 ec 0c             	sub    esp,0xc
c001f354:	2d c0 00 00 00       	sub    eax,0xc0
c001f359:	50                   	push   eax
c001f35a:	e8 2e fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f35f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f366:	89 c6                	mov    esi,eax
c001f368:	89 d7                	mov    edi,edx
c001f36a:	e8 1e fa ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f36f:	57                   	push   edi
c001f370:	56                   	push   esi
c001f371:	52                   	push   edx
c001f372:	50                   	push   eax
c001f373:	e8 8b f9 ff ff       	call   c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f378:	83 c4 1c             	add    esp,0x1c
c001f37b:	52                   	push   edx
c001f37c:	50                   	push   eax
c001f37d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f381:	2d c0 00 00 00       	sub    eax,0xc0
c001f386:	e9 9e 01 00 00       	jmp    c001f529 <Vm::x87Handler(regs*)+0x65f>
c001f38b:	8d 50 20             	lea    edx,[eax+0x20]
c001f38e:	80 fa 07             	cmp    dl,0x7
c001f391:	77 3a                	ja     c001f3cd <Vm::x87Handler(regs*)+0x503>
c001f393:	83 ec 0c             	sub    esp,0xc
c001f396:	2d e0 00 00 00       	sub    eax,0xe0
c001f39b:	50                   	push   eax
c001f39c:	e8 ec f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f3a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3a8:	89 c6                	mov    esi,eax
c001f3aa:	89 d7                	mov    edi,edx
c001f3ac:	e8 dc f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f3b1:	57                   	push   edi
c001f3b2:	56                   	push   esi
c001f3b3:	52                   	push   edx
c001f3b4:	50                   	push   eax
c001f3b5:	e8 73 f9 ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3ba:	83 c4 1c             	add    esp,0x1c
c001f3bd:	52                   	push   edx
c001f3be:	50                   	push   eax
c001f3bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3c3:	2d e0 00 00 00       	sub    eax,0xe0
c001f3c8:	e9 5c 01 00 00       	jmp    c001f529 <Vm::x87Handler(regs*)+0x65f>
c001f3cd:	8d 50 18             	lea    edx,[eax+0x18]
c001f3d0:	80 fa 07             	cmp    dl,0x7
c001f3d3:	77 3b                	ja     c001f410 <Vm::x87Handler(regs*)+0x546>
c001f3d5:	83 ec 0c             	sub    esp,0xc
c001f3d8:	6a 00                	push   0x0
c001f3da:	e8 ae f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f3df:	89 c6                	mov    esi,eax
c001f3e1:	89 d7                	mov    edi,edx
c001f3e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3e7:	2d e8 00 00 00       	sub    eax,0xe8
c001f3ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3ef:	e8 99 f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f3f4:	57                   	push   edi
c001f3f5:	56                   	push   esi
c001f3f6:	52                   	push   edx
c001f3f7:	50                   	push   eax
c001f3f8:	e8 30 f9 ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3fd:	83 c4 1c             	add    esp,0x1c
c001f400:	52                   	push   edx
c001f401:	50                   	push   eax
c001f402:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f406:	2d e8 00 00 00       	sub    eax,0xe8
c001f40b:	e9 19 01 00 00       	jmp    c001f529 <Vm::x87Handler(regs*)+0x65f>
c001f410:	8d 50 38             	lea    edx,[eax+0x38]
c001f413:	80 fa 07             	cmp    dl,0x7
c001f416:	77 37                	ja     c001f44f <Vm::x87Handler(regs*)+0x585>
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	2d c8 00 00 00       	sub    eax,0xc8
c001f420:	50                   	push   eax
c001f421:	e8 67 f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f426:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f42d:	89 c6                	mov    esi,eax
c001f42f:	89 d7                	mov    edi,edx
c001f431:	e8 57 f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f436:	57                   	push   edi
c001f437:	56                   	push   esi
c001f438:	52                   	push   edx
c001f439:	50                   	push   eax
c001f43a:	e8 fd f8 ff ff       	call   c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f43f:	83 c4 1c             	add    esp,0x1c
c001f442:	52                   	push   edx
c001f443:	50                   	push   eax
c001f444:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f448:	2d c8 00 00 00       	sub    eax,0xc8
c001f44d:	eb 7d                	jmp    c001f4cc <Vm::x87Handler(regs*)+0x602>
c001f44f:	3c f7                	cmp    al,0xf7
c001f451:	76 38                	jbe    c001f48b <Vm::x87Handler(regs*)+0x5c1>
c001f453:	83 ec 0c             	sub    esp,0xc
c001f456:	6a 00                	push   0x0
c001f458:	e8 30 f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f45d:	89 c6                	mov    esi,eax
c001f45f:	89 d7                	mov    edi,edx
c001f461:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f465:	2d f8 00 00 00       	sub    eax,0xf8
c001f46a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f46d:	e8 1b f9 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f472:	57                   	push   edi
c001f473:	56                   	push   esi
c001f474:	52                   	push   edx
c001f475:	50                   	push   eax
c001f476:	e8 e0 f8 ff ff       	call   c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f47b:	83 c4 1c             	add    esp,0x1c
c001f47e:	52                   	push   edx
c001f47f:	50                   	push   eax
c001f480:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f484:	2d f8 00 00 00       	sub    eax,0xf8
c001f489:	eb 41                	jmp    c001f4cc <Vm::x87Handler(regs*)+0x602>
c001f48b:	8d 50 10             	lea    edx,[eax+0x10]
c001f48e:	80 fa 07             	cmp    dl,0x7
c001f491:	0f 87 5a 01 00 00    	ja     c001f5f1 <Vm::x87Handler(regs*)+0x727>
c001f497:	83 ec 0c             	sub    esp,0xc
c001f49a:	2d f0 00 00 00       	sub    eax,0xf0
c001f49f:	50                   	push   eax
c001f4a0:	e8 e8 f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f4a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ac:	89 c6                	mov    esi,eax
c001f4ae:	89 d7                	mov    edi,edx
c001f4b0:	e8 d8 f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f4b5:	57                   	push   edi
c001f4b6:	56                   	push   esi
c001f4b7:	52                   	push   edx
c001f4b8:	50                   	push   eax
c001f4b9:	e8 9d f8 ff ff       	call   c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4be:	83 c4 1c             	add    esp,0x1c
c001f4c1:	52                   	push   edx
c001f4c2:	50                   	push   eax
c001f4c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c7:	2d f0 00 00 00       	sub    eax,0xf0
c001f4cc:	50                   	push   eax
c001f4cd:	e8 fe f8 ff ff       	call   c001edd0 <Vm::fpuSetReg(int, unsigned long long)>
c001f4d2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f4d6:	e8 9d f9 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f4db:	e9 5e fa ff ff       	jmp    c001ef3e <Vm::x87Handler(regs*)+0x74>
c001f4e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e4:	8d 50 30             	lea    edx,[eax+0x30]
c001f4e7:	80 fa 07             	cmp    dl,0x7
c001f4ea:	77 1d                	ja     c001f509 <Vm::x87Handler(regs*)+0x63f>
c001f4ec:	83 ec 0c             	sub    esp,0xc
c001f4ef:	6a 00                	push   0x0
c001f4f1:	e8 97 f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f4f6:	83 c4 0c             	add    esp,0xc
c001f4f9:	52                   	push   edx
c001f4fa:	50                   	push   eax
c001f4fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ff:	2d d0 00 00 00       	sub    eax,0xd0
c001f504:	e9 f3 fd ff ff       	jmp    c001f2fc <Vm::x87Handler(regs*)+0x432>
c001f509:	8d 50 28             	lea    edx,[eax+0x28]
c001f50c:	80 fa 07             	cmp    dl,0x7
c001f50f:	77 28                	ja     c001f539 <Vm::x87Handler(regs*)+0x66f>
c001f511:	83 ec 0c             	sub    esp,0xc
c001f514:	6a 00                	push   0x0
c001f516:	e8 72 f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f51b:	83 c4 0c             	add    esp,0xc
c001f51e:	52                   	push   edx
c001f51f:	50                   	push   eax
c001f520:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f524:	2d d8 00 00 00       	sub    eax,0xd8
c001f529:	50                   	push   eax
c001f52a:	e8 a1 f8 ff ff       	call   c001edd0 <Vm::fpuSetReg(int, unsigned long long)>
c001f52f:	e8 44 f9 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f534:	e9 01 fa ff ff       	jmp    c001ef3a <Vm::x87Handler(regs*)+0x70>
c001f539:	8d 50 20             	lea    edx,[eax+0x20]
c001f53c:	80 fa 07             	cmp    dl,0x7
c001f53f:	77 30                	ja     c001f571 <Vm::x87Handler(regs*)+0x6a7>
c001f541:	83 ec 0c             	sub    esp,0xc
c001f544:	2d e0 00 00 00       	sub    eax,0xe0
c001f549:	50                   	push   eax
c001f54a:	e8 3e f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f54f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f556:	89 c6                	mov    esi,eax
c001f558:	89 d7                	mov    edi,edx
c001f55a:	e8 2e f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f55f:	57                   	push   edi
c001f560:	56                   	push   esi
c001f561:	52                   	push   edx
c001f562:	50                   	push   eax
c001f563:	e8 48 f7 ff ff       	call   c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f568:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f56c:	e9 54 02 00 00       	jmp    c001f7c5 <Vm::x87Handler(regs*)+0x8fb>
c001f571:	8d 50 18             	lea    edx,[eax+0x18]
c001f574:	80 fa 07             	cmp    dl,0x7
c001f577:	0f 87 43 fb ff ff    	ja     c001f0c0 <Vm::x87Handler(regs*)+0x1f6>
c001f57d:	83 ec 0c             	sub    esp,0xc
c001f580:	2d e8 00 00 00       	sub    eax,0xe8
c001f585:	50                   	push   eax
c001f586:	e8 02 f8 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f58b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f592:	89 c6                	mov    esi,eax
c001f594:	89 d7                	mov    edi,edx
c001f596:	e8 f2 f7 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f59b:	57                   	push   edi
c001f59c:	56                   	push   esi
c001f59d:	52                   	push   edx
c001f59e:	50                   	push   eax
c001f59f:	e8 0c f7 ff ff       	call   c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5a4:	83 c4 20             	add    esp,0x20
c001f5a7:	e8 cc f8 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f5ac:	eb 62                	jmp    c001f610 <Vm::x87Handler(regs*)+0x746>
c001f5ae:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f5b2:	0f 85 0f 01 00 00    	jne    c001f6c7 <Vm::x87Handler(regs*)+0x7fd>
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	6a 01                	push   0x1
c001f5bd:	e8 cb f7 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f5c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5c9:	89 c6                	mov    esi,eax
c001f5cb:	89 d7                	mov    edi,edx
c001f5cd:	e8 bb f7 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f5d2:	57                   	push   edi
c001f5d3:	56                   	push   esi
c001f5d4:	52                   	push   edx
c001f5d5:	50                   	push   eax
c001f5d6:	e8 d5 f6 ff ff       	call   c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5db:	83 c4 20             	add    esp,0x20
c001f5de:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5e2:	e8 91 f8 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f5e7:	e8 8c f8 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f5ec:	e9 50 f9 ff ff       	jmp    c001ef41 <Vm::x87Handler(regs*)+0x77>
c001f5f1:	3c d9                	cmp    al,0xd9
c001f5f3:	0f 85 b5 02 00 00    	jne    c001f8ae <Vm::x87Handler(regs*)+0x9e4>
c001f5f9:	eb bd                	jmp    c001f5b8 <Vm::x87Handler(regs*)+0x6ee>
c001f5fb:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f5ff:	0f 85 ea 02 00 00    	jne    c001f8ef <Vm::x87Handler(regs*)+0xa25>
c001f605:	0f b7 05 60 ec 02 c0 	movzx  eax,WORD PTR ds:0xc002ec60
c001f60c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f610:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f614:	e9 28 f9 ff ff       	jmp    c001ef41 <Vm::x87Handler(regs*)+0x77>
c001f619:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f61d:	84 d2                	test   dl,dl
c001f61f:	75 0f                	jne    c001f630 <Vm::x87Handler(regs*)+0x766>
c001f621:	83 ec 0c             	sub    esp,0xc
c001f624:	ff 36                	push   DWORD PTR [esi]
c001f626:	e8 b1 f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f62b:	e9 2c 01 00 00       	jmp    c001f75c <Vm::x87Handler(regs*)+0x892>
c001f630:	80 fa 01             	cmp    dl,0x1
c001f633:	75 0f                	jne    c001f644 <Vm::x87Handler(regs*)+0x77a>
c001f635:	83 ec 0c             	sub    esp,0xc
c001f638:	ff 36                	push   DWORD PTR [esi]
c001f63a:	e8 9d f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f63f:	e9 81 02 00 00       	jmp    c001f8c5 <Vm::x87Handler(regs*)+0x9fb>
c001f644:	80 fa 04             	cmp    dl,0x4
c001f647:	75 0f                	jne    c001f658 <Vm::x87Handler(regs*)+0x78e>
c001f649:	83 ec 0c             	sub    esp,0xc
c001f64c:	ff 36                	push   DWORD PTR [esi]
c001f64e:	e8 89 f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f653:	e9 86 01 00 00       	jmp    c001f7de <Vm::x87Handler(regs*)+0x914>
c001f658:	80 fa 05             	cmp    dl,0x5
c001f65b:	75 1b                	jne    c001f678 <Vm::x87Handler(regs*)+0x7ae>
c001f65d:	83 ec 0c             	sub    esp,0xc
c001f660:	6a 00                	push   0x0
c001f662:	e8 26 f7 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f667:	89 c7                	mov    edi,eax
c001f669:	89 d5                	mov    ebp,edx
c001f66b:	58                   	pop    eax
c001f66c:	ff 36                	push   DWORD PTR [esi]
c001f66e:	e8 69 f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f673:	e9 a3 01 00 00       	jmp    c001f81b <Vm::x87Handler(regs*)+0x951>
c001f678:	80 fa 06             	cmp    dl,0x6
c001f67b:	75 0f                	jne    c001f68c <Vm::x87Handler(regs*)+0x7c2>
c001f67d:	83 ec 0c             	sub    esp,0xc
c001f680:	ff 36                	push   DWORD PTR [esi]
c001f682:	e8 55 f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f687:	e9 ae 01 00 00       	jmp    c001f83a <Vm::x87Handler(regs*)+0x970>
c001f68c:	31 c0                	xor    eax,eax
c001f68e:	80 fa 07             	cmp    dl,0x7
c001f691:	0f 85 94 02 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f697:	83 ec 0c             	sub    esp,0xc
c001f69a:	6a 00                	push   0x0
c001f69c:	e8 ec f6 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f6a1:	89 c7                	mov    edi,eax
c001f6a3:	89 d5                	mov    ebp,edx
c001f6a5:	58                   	pop    eax
c001f6a6:	ff 36                	push   DWORD PTR [esi]
c001f6a8:	e8 2f f4 ff ff       	call   c001eadc <Vm::fpu32ToInternal(unsigned int)>
c001f6ad:	e9 cb 01 00 00       	jmp    c001f87d <Vm::x87Handler(regs*)+0x9b3>
c001f6b2:	80 fa 03             	cmp    dl,0x3
c001f6b5:	0f 85 d3 01 00 00    	jne    c001f88e <Vm::x87Handler(regs*)+0x9c4>
c001f6bb:	e8 b8 f7 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f6c0:	51                   	push   ecx
c001f6c1:	51                   	push   ecx
c001f6c2:	e9 de 01 00 00       	jmp    c001f8a5 <Vm::x87Handler(regs*)+0x9db>
c001f6c7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6cb:	80 fa 01             	cmp    dl,0x1
c001f6ce:	75 09                	jne    c001f6d9 <Vm::x87Handler(regs*)+0x80f>
c001f6d0:	57                   	push   edi
c001f6d1:	57                   	push   edi
c001f6d2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f6d4:	e9 e3 01 00 00       	jmp    c001f8bc <Vm::x87Handler(regs*)+0x9f2>
c001f6d9:	80 fa 04             	cmp    dl,0x4
c001f6dc:	75 12                	jne    c001f6f0 <Vm::x87Handler(regs*)+0x826>
c001f6de:	31 d2                	xor    edx,edx
c001f6e0:	51                   	push   ecx
c001f6e1:	51                   	push   ecx
c001f6e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f6e4:	52                   	push   edx
c001f6e5:	50                   	push   eax
c001f6e6:	e8 d0 f4 ff ff       	call   c001ebbb <Vm::fpuLongToFloat(long long)>
c001f6eb:	e9 ee 00 00 00       	jmp    c001f7de <Vm::x87Handler(regs*)+0x914>
c001f6f0:	31 c0                	xor    eax,eax
c001f6f2:	80 fa 07             	cmp    dl,0x7
c001f6f5:	0f 85 30 02 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f6fb:	83 ec 0c             	sub    esp,0xc
c001f6fe:	6a 00                	push   0x0
c001f700:	e8 88 f6 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f705:	89 c7                	mov    edi,eax
c001f707:	89 d5                	mov    ebp,edx
c001f709:	58                   	pop    eax
c001f70a:	8b 06                	mov    eax,DWORD PTR [esi]
c001f70c:	5a                   	pop    edx
c001f70d:	31 d2                	xor    edx,edx
c001f70f:	52                   	push   edx
c001f710:	50                   	push   eax
c001f711:	e8 a5 f4 ff ff       	call   c001ebbb <Vm::fpuLongToFloat(long long)>
c001f716:	e9 62 01 00 00       	jmp    c001f87d <Vm::x87Handler(regs*)+0x9b3>
c001f71b:	84 d2                	test   dl,dl
c001f71d:	75 0d                	jne    c001f72c <Vm::x87Handler(regs*)+0x862>
c001f71f:	31 d2                	xor    edx,edx
c001f721:	55                   	push   ebp
c001f722:	55                   	push   ebp
c001f723:	8b 06                	mov    eax,DWORD PTR [esi]
c001f725:	52                   	push   edx
c001f726:	50                   	push   eax
c001f727:	e9 d3 01 00 00       	jmp    c001f8ff <Vm::x87Handler(regs*)+0xa35>
c001f72c:	31 c0                	xor    eax,eax
c001f72e:	80 fa 02             	cmp    dl,0x2
c001f731:	0f 85 f4 01 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f737:	83 ec 0c             	sub    esp,0xc
c001f73a:	6a 00                	push   0x0
c001f73c:	e8 4c f6 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f741:	59                   	pop    ecx
c001f742:	5f                   	pop    edi
c001f743:	e9 6a f9 ff ff       	jmp    c001f0b2 <Vm::x87Handler(regs*)+0x1e8>
c001f748:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f74c:	84 d2                	test   dl,dl
c001f74e:	75 2a                	jne    c001f77a <Vm::x87Handler(regs*)+0x8b0>
c001f750:	50                   	push   eax
c001f751:	50                   	push   eax
c001f752:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f755:	ff 36                	push   DWORD PTR [esi]
c001f757:	e8 c5 f3 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f75c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f763:	89 c6                	mov    esi,eax
c001f765:	89 d7                	mov    edi,edx
c001f767:	e8 21 f6 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f76c:	57                   	push   edi
c001f76d:	56                   	push   esi
c001f76e:	52                   	push   edx
c001f76f:	50                   	push   eax
c001f770:	e8 8e f5 ff ff       	call   c001ed03 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f775:	e9 64 01 00 00       	jmp    c001f8de <Vm::x87Handler(regs*)+0xa14>
c001f77a:	80 fa 01             	cmp    dl,0x1
c001f77d:	75 11                	jne    c001f790 <Vm::x87Handler(regs*)+0x8c6>
c001f77f:	50                   	push   eax
c001f780:	50                   	push   eax
c001f781:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f784:	ff 36                	push   DWORD PTR [esi]
c001f786:	e8 96 f3 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f78b:	e9 35 01 00 00       	jmp    c001f8c5 <Vm::x87Handler(regs*)+0x9fb>
c001f790:	80 fa 02             	cmp    dl,0x2
c001f793:	0f 85 54 f9 ff ff    	jne    c001f0ed <Vm::x87Handler(regs*)+0x223>
c001f799:	55                   	push   ebp
c001f79a:	55                   	push   ebp
c001f79b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f79e:	ff 36                	push   DWORD PTR [esi]
c001f7a0:	e8 7c f3 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f7a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7ac:	89 c6                	mov    esi,eax
c001f7ae:	89 d7                	mov    edi,edx
c001f7b0:	e8 d8 f5 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f7b5:	57                   	push   edi
c001f7b6:	56                   	push   esi
c001f7b7:	52                   	push   edx
c001f7b8:	50                   	push   eax
c001f7b9:	e8 f2 f4 ff ff       	call   c001ecb0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f7c2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f7c5:	83 c4 20             	add    esp,0x20
c001f7c8:	e9 74 f7 ff ff       	jmp    c001ef41 <Vm::x87Handler(regs*)+0x77>
c001f7cd:	80 fa 04             	cmp    dl,0x4
c001f7d0:	75 2a                	jne    c001f7fc <Vm::x87Handler(regs*)+0x932>
c001f7d2:	51                   	push   ecx
c001f7d3:	51                   	push   ecx
c001f7d4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7d7:	ff 36                	push   DWORD PTR [esi]
c001f7d9:	e8 43 f3 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f7de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7e5:	89 c6                	mov    esi,eax
c001f7e7:	89 d7                	mov    edi,edx
c001f7e9:	e8 9f f5 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f7ee:	57                   	push   edi
c001f7ef:	56                   	push   esi
c001f7f0:	52                   	push   edx
c001f7f1:	50                   	push   eax
c001f7f2:	e8 36 f5 ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7f7:	e9 e2 00 00 00       	jmp    c001f8de <Vm::x87Handler(regs*)+0xa14>
c001f7fc:	80 fa 05             	cmp    dl,0x5
c001f7ff:	75 28                	jne    c001f829 <Vm::x87Handler(regs*)+0x95f>
c001f801:	83 ec 0c             	sub    esp,0xc
c001f804:	6a 00                	push   0x0
c001f806:	e8 82 f5 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f80b:	89 c7                	mov    edi,eax
c001f80d:	89 d5                	mov    ebp,edx
c001f80f:	58                   	pop    eax
c001f810:	5a                   	pop    edx
c001f811:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f814:	ff 36                	push   DWORD PTR [esi]
c001f816:	e8 06 f3 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f81b:	83 c4 10             	add    esp,0x10
c001f81e:	55                   	push   ebp
c001f81f:	57                   	push   edi
c001f820:	52                   	push   edx
c001f821:	50                   	push   eax
c001f822:	e8 06 f5 ff ff       	call   c001ed2d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f827:	eb 60                	jmp    c001f889 <Vm::x87Handler(regs*)+0x9bf>
c001f829:	80 fa 06             	cmp    dl,0x6
c001f82c:	75 2a                	jne    c001f858 <Vm::x87Handler(regs*)+0x98e>
c001f82e:	51                   	push   ecx
c001f82f:	51                   	push   ecx
c001f830:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f833:	ff 36                	push   DWORD PTR [esi]
c001f835:	e8 e7 f2 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f83a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f841:	89 c6                	mov    esi,eax
c001f843:	89 d7                	mov    edi,edx
c001f845:	e8 43 f5 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f84a:	57                   	push   edi
c001f84b:	56                   	push   esi
c001f84c:	52                   	push   edx
c001f84d:	50                   	push   eax
c001f84e:	e8 08 f5 ff ff       	call   c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f853:	e9 86 00 00 00       	jmp    c001f8de <Vm::x87Handler(regs*)+0xa14>
c001f858:	31 c0                	xor    eax,eax
c001f85a:	80 fa 07             	cmp    dl,0x7
c001f85d:	0f 85 c8 00 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f863:	83 ec 0c             	sub    esp,0xc
c001f866:	6a 00                	push   0x0
c001f868:	e8 20 f5 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f86d:	89 c7                	mov    edi,eax
c001f86f:	89 d5                	mov    ebp,edx
c001f871:	58                   	pop    eax
c001f872:	5a                   	pop    edx
c001f873:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f876:	ff 36                	push   DWORD PTR [esi]
c001f878:	e8 a4 f2 ff ff       	call   c001eb21 <Vm::fpu64ToInternal(unsigned long long)>
c001f87d:	83 c4 10             	add    esp,0x10
c001f880:	55                   	push   ebp
c001f881:	57                   	push   edi
c001f882:	52                   	push   edx
c001f883:	50                   	push   eax
c001f884:	e8 d2 f4 ff ff       	call   c001ed5b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f889:	83 c4 0c             	add    esp,0xc
c001f88c:	eb 53                	jmp    c001f8e1 <Vm::x87Handler(regs*)+0xa17>
c001f88e:	31 c0                	xor    eax,eax
c001f890:	80 fa 02             	cmp    dl,0x2
c001f893:	0f 85 92 00 00 00    	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f899:	83 ec 0c             	sub    esp,0xc
c001f89c:	6a 00                	push   0x0
c001f89e:	e8 ea f4 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f8a3:	59                   	pop    ecx
c001f8a4:	5f                   	pop    edi
c001f8a5:	52                   	push   edx
c001f8a6:	50                   	push   eax
c001f8a7:	e8 27 f2 ff ff       	call   c001ead3 <Vm::fpuInternalTo64(unsigned long long)>
c001f8ac:	eb 70                	jmp    c001f91e <Vm::x87Handler(regs*)+0xa54>
c001f8ae:	31 c0                	xor    eax,eax
c001f8b0:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f8b5:	75 74                	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f8b7:	50                   	push   eax
c001f8b8:	50                   	push   eax
c001f8b9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f8bc:	31 d2                	xor    edx,edx
c001f8be:	52                   	push   edx
c001f8bf:	50                   	push   eax
c001f8c0:	e8 f6 f2 ff ff       	call   c001ebbb <Vm::fpuLongToFloat(long long)>
c001f8c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8cc:	89 c6                	mov    esi,eax
c001f8ce:	89 d7                	mov    edi,edx
c001f8d0:	e8 b8 f4 ff ff       	call   c001ed8d <Vm::fpuGetReg(int)>
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	52                   	push   edx
c001f8d8:	50                   	push   eax
c001f8d9:	e8 5e f4 ff ff       	call   c001ed3c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	52                   	push   edx
c001f8e2:	50                   	push   eax
c001f8e3:	6a 00                	push   0x0
c001f8e5:	e8 e6 f4 ff ff       	call   c001edd0 <Vm::fpuSetReg(int, unsigned long long)>
c001f8ea:	e9 f2 f7 ff ff       	jmp    c001f0e1 <Vm::x87Handler(regs*)+0x217>
c001f8ef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8f3:	80 fa 05             	cmp    dl,0x5
c001f8f6:	75 11                	jne    c001f909 <Vm::x87Handler(regs*)+0xa3f>
c001f8f8:	55                   	push   ebp
c001f8f9:	55                   	push   ebp
c001f8fa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8fd:	ff 36                	push   DWORD PTR [esi]
c001f8ff:	e8 81 f2 ff ff       	call   c001eb85 <Vm::fpuULongToFloat(unsigned long long)>
c001f904:	e9 cf f7 ff ff       	jmp    c001f0d8 <Vm::x87Handler(regs*)+0x20e>
c001f909:	31 c0                	xor    eax,eax
c001f90b:	80 fa 07             	cmp    dl,0x7
c001f90e:	75 1b                	jne    c001f92b <Vm::x87Handler(regs*)+0xa61>
c001f910:	e8 63 f5 ff ff       	call   c001ee78 <Vm::fpuPop()>
c001f915:	51                   	push   ecx
c001f916:	51                   	push   ecx
c001f917:	52                   	push   edx
c001f918:	50                   	push   eax
c001f919:	e8 0c f2 ff ff       	call   c001eb2a <Vm::fpuFloatToLong(unsigned long long)>
c001f91e:	83 c4 10             	add    esp,0x10
c001f921:	89 06                	mov    DWORD PTR [esi],eax
c001f923:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f926:	e9 f8 f7 ff ff       	jmp    c001f123 <Vm::x87Handler(regs*)+0x259>
c001f92b:	83 c4 1c             	add    esp,0x1c
c001f92e:	5b                   	pop    ebx
c001f92f:	5e                   	pop    esi
c001f930:	5f                   	pop    edi
c001f931:	5d                   	pop    ebp
c001f932:	c3                   	ret    

c001f933 <__static_initialization_and_destruction_0(int, int)>:
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f93b:	75 1a                	jne    c001f957 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f93d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f945:	75 10                	jne    c001f957 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f947:	83 ec 0c             	sub    esp,0xc
c001f94a:	68 60 ec 02 c0       	push   0xc002ec60
c001f94f:	e8 5c 88 00 00       	call   c00281b0 <Vm::_FPUState::_FPUState()>
c001f954:	83 c4 10             	add    esp,0x10
c001f957:	90                   	nop
c001f958:	83 c4 0c             	add    esp,0xc
c001f95b:	c3                   	ret    

c001f95c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	83 ec 08             	sub    esp,0x8
c001f962:	68 ff ff 00 00       	push   0xffff
c001f967:	6a 01                	push   0x1
c001f969:	e8 c5 ff ff ff       	call   c001f933 <__static_initialization_and_destruction_0(int, int)>
c001f96e:	83 c4 10             	add    esp,0x10
c001f971:	83 c4 0c             	add    esp,0xc
c001f974:	c3                   	ret    
c001f975:	90                   	nop

c001f976 <FAT::getName()>:
c001f976:	b8 5c ba 02 c0       	mov    eax,0xc002ba5c
c001f97b:	c3                   	ret    

c001f97c <FAT::tell(void*, unsigned long long*)>:
c001f97c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f981:	75 06                	jne    c001f989 <FAT::tell(void*, unsigned long long*)+0xd>
c001f983:	b8 04 00 00 00       	mov    eax,0x4
c001f988:	c3                   	ret    
c001f989:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f98e:	75 06                	jne    c001f996 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f990:	b8 04 00 00 00       	mov    eax,0x4
c001f995:	c3                   	ret    
c001f996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f99a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f99d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f9a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9a4:	89 01                	mov    DWORD PTR [ecx],eax
c001f9a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9a9:	b8 00 00 00 00       	mov    eax,0x0
c001f9ae:	c3                   	ret    
c001f9af:	90                   	nop

c001f9b0 <FAT::stat(void*, unsigned long long*)>:
c001f9b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f9b5:	75 06                	jne    c001f9bd <FAT::stat(void*, unsigned long long*)+0xd>
c001f9b7:	b8 04 00 00 00       	mov    eax,0x4
c001f9bc:	c3                   	ret    
c001f9bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9c2:	75 06                	jne    c001f9ca <FAT::stat(void*, unsigned long long*)+0x1a>
c001f9c4:	b8 04 00 00 00       	mov    eax,0x4
c001f9c9:	c3                   	ret    
c001f9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f9d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f9d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9d8:	89 01                	mov    DWORD PTR [ecx],eax
c001f9da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9dd:	b8 00 00 00 00       	mov    eax,0x0
c001f9e2:	c3                   	ret    
c001f9e3:	90                   	nop

c001f9e4 <FAT::~FAT()>:
c001f9e4:	83 ec 0c             	sub    esp,0xc
c001f9e7:	ba e0 ba 02 c0       	mov    edx,0xc002bae0
c001f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f0:	89 10                	mov    DWORD PTR [eax],edx
c001f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	50                   	push   eax
c001f9fa:	e8 1d 32 ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	90                   	nop
c001fa03:	83 c4 0c             	add    esp,0xc
c001fa06:	c3                   	ret    
c001fa07:	90                   	nop

c001fa08 <FAT::~FAT()>:
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	83 ec 0c             	sub    esp,0xc
c001fa0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa12:	e8 cd ff ff ff       	call   c001f9e4 <FAT::~FAT()>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	83 ec 08             	sub    esp,0x8
c001fa1d:	6a 08                	push   0x8
c001fa1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa23:	e8 eb 2d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001fa28:	83 c4 10             	add    esp,0x10
c001fa2b:	83 c4 0c             	add    esp,0xc
c001fa2e:	c3                   	ret    
c001fa2f:	90                   	nop

c001fa30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fa30:	83 ec 1c             	sub    esp,0x1c
c001fa33:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fa3a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fa3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa43:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fa4a:	83 f8 ff             	cmp    eax,0xffffffff
c001fa4d:	75 34                	jne    c001fa83 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fa4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fa53:	88 c2                	mov    dl,al
c001fa55:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fa5a:	01 d0                	add    eax,edx
c001fa5c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fa60:	8b 15 c0 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecc0
c001fa66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa6a:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c001fa71:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fa76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa7a:	89 14 85 60 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12a0],edx
c001fa81:	eb 17                	jmp    c001fa9a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fa83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fa87:	88 c2                	mov    dl,al
c001fa89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa8d:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fa94:	01 d0                	add    eax,edx
c001fa96:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fa9a:	83 ec 04             	sub    esp,0x4
c001fa9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faa5:	8d 44 24 15          	lea    eax,[esp+0x15]
c001faa9:	50                   	push   eax
c001faaa:	e8 72 70 fe ff       	call   c0006b21 <f_getlabel>
c001faaf:	83 c4 10             	add    esp,0x10
c001fab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fab6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fabb:	75 07                	jne    c001fac4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fabd:	b8 00 00 00 00       	mov    eax,0x0
c001fac2:	eb 05                	jmp    c001fac9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fac4:	b8 01 00 00 00       	mov    eax,0x1
c001fac9:	83 c4 1c             	add    esp,0x1c
c001facc:	c3                   	ret    
c001facd:	90                   	nop

c001face <FAT::setlabel(LogicalDisk*, int, char*)>:
c001face:	57                   	push   edi
c001facf:	83 ec 58             	sub    esp,0x58
c001fad2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fada:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fade:	b9 0f 00 00 00       	mov    ecx,0xf
c001fae3:	b8 00 00 00 00       	mov    eax,0x0
c001fae8:	fc                   	cld    
c001fae9:	89 d7                	mov    edi,edx
c001faeb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001faed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001faf1:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001faf8:	83 f8 ff             	cmp    eax,0xffffffff
c001fafb:	75 34                	jne    c001fb31 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fafd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb01:	88 c2                	mov    dl,al
c001fb03:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fb08:	01 d0                	add    eax,edx
c001fb0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb0e:	8b 15 c0 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecc0
c001fb14:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb18:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c001fb1f:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fb24:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fb28:	89 14 85 60 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12a0],edx
c001fb2f:	eb 17                	jmp    c001fb48 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fb31:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb35:	88 c2                	mov    dl,al
c001fb37:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb3b:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fb42:	01 d0                	add    eax,edx
c001fb44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb48:	83 ec 08             	sub    esp,0x8
c001fb4b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fb4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fb53:	50                   	push   eax
c001fb54:	e8 c1 0c fe ff       	call   c000081a <strcat>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fb63:	50                   	push   eax
c001fb64:	e8 a6 71 fe ff       	call   c0006d0f <f_setlabel>
c001fb69:	83 c4 10             	add    esp,0x10
c001fb6c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fb70:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fb75:	75 07                	jne    c001fb7e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fb77:	b8 00 00 00 00       	mov    eax,0x0
c001fb7c:	eb 05                	jmp    c001fb83 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fb7e:	b8 01 00 00 00       	mov    eax,0x1
c001fb83:	83 c4 58             	add    esp,0x58
c001fb86:	5f                   	pop    edi
c001fb87:	c3                   	ret    

c001fb88 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fb88:	83 ec 2c             	sub    esp,0x2c
c001fb8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fb93:	83 ec 08             	sub    esp,0x8
c001fb96:	68 80 ba 02 c0       	push   0xc002ba80
c001fb9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb9f:	e8 10 0c fe ff       	call   c00007b4 <strcmp>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	85 c0                	test   eax,eax
c001fba9:	0f 94 c0             	sete   al
c001fbac:	84 c0                	test   al,al
c001fbae:	74 0d                	je     c001fbbd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fbb0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fbb8:	e9 a6 00 00 00       	jmp    c001fc63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fbbd:	83 ec 08             	sub    esp,0x8
c001fbc0:	68 72 ba 02 c0       	push   0xc002ba72
c001fbc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fbc9:	e8 e6 0b fe ff       	call   c00007b4 <strcmp>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	85 c0                	test   eax,eax
c001fbd3:	0f 94 c0             	sete   al
c001fbd6:	84 c0                	test   al,al
c001fbd8:	74 0a                	je     c001fbe4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fbda:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fbe2:	eb 7f                	jmp    c001fc63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fbe4:	83 ec 08             	sub    esp,0x8
c001fbe7:	68 78 ba 02 c0       	push   0xc002ba78
c001fbec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fbf0:	e8 bf 0b fe ff       	call   c00007b4 <strcmp>
c001fbf5:	83 c4 10             	add    esp,0x10
c001fbf8:	85 c0                	test   eax,eax
c001fbfa:	0f 94 c0             	sete   al
c001fbfd:	84 c0                	test   al,al
c001fbff:	74 0a                	je     c001fc0b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fc01:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fc09:	eb 58                	jmp    c001fc63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc0b:	83 ec 08             	sub    esp,0x8
c001fc0e:	68 0c 89 02 c0       	push   0xc002890c
c001fc13:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc17:	e8 98 0b fe ff       	call   c00007b4 <strcmp>
c001fc1c:	83 c4 10             	add    esp,0x10
c001fc1f:	85 c0                	test   eax,eax
c001fc21:	0f 94 c0             	sete   al
c001fc24:	84 c0                	test   al,al
c001fc26:	74 0a                	je     c001fc32 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fc28:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fc30:	eb 31                	jmp    c001fc63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc32:	83 ec 08             	sub    esp,0x8
c001fc35:	68 7e ba 02 c0       	push   0xc002ba7e
c001fc3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc3e:	e8 71 0b fe ff       	call   c00007b4 <strcmp>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	85 c0                	test   eax,eax
c001fc48:	0f 94 c0             	sete   al
c001fc4b:	84 c0                	test   al,al
c001fc4d:	74 0a                	je     c001fc59 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fc4f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fc57:	eb 0a                	jmp    c001fc63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc59:	b8 08 00 00 00       	mov    eax,0x8
c001fc5e:	e9 04 01 00 00       	jmp    c001fd67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc63:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fc6a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fc6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc73:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fc7a:	83 f8 ff             	cmp    eax,0xffffffff
c001fc7d:	75 34                	jne    c001fcb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fc7f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fc83:	88 c2                	mov    dl,al
c001fc85:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fc8a:	01 d0                	add    eax,edx
c001fc8c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fc90:	8b 15 c0 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecc0
c001fc96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc9a:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c001fca1:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fcaa:	89 14 85 60 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12a0],edx
c001fcb1:	eb 17                	jmp    c001fcca <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fcb3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fcb7:	88 c2                	mov    dl,al
c001fcb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcbd:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fcc4:	01 d0                	add    eax,edx
c001fcc6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fcca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcce:	88 04 24             	mov    BYTE PTR [esp],al
c001fcd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fcd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fce1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fce6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	68 00 20 00 00       	push   0x2000
c001fcf6:	e8 29 f9 fe ff       	call   c000f624 <malloc>
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fd02:	68 00 20 00 00       	push   0x2000
c001fd07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd0f:	50                   	push   eax
c001fd10:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fd14:	50                   	push   eax
c001fd15:	e8 40 74 fe ff       	call   c000715a <f_mkfs>
c001fd1a:	83 c4 10             	add    esp,0x10
c001fd1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd26:	75 07                	jne    c001fd2f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fd28:	b8 00 00 00 00       	mov    eax,0x0
c001fd2d:	eb 38                	jmp    c001fd67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd2f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fd34:	75 17                	jne    c001fd4d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	68 b0 ba 02 c0       	push   0xc002bab0
c001fd3e:	e8 b0 2b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001fd43:	83 c4 10             	add    esp,0x10
c001fd46:	b8 09 00 00 00       	mov    eax,0x9
c001fd4b:	eb 1a                	jmp    c001fd67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd51:	83 ec 08             	sub    esp,0x8
c001fd54:	50                   	push   eax
c001fd55:	68 84 ba 02 c0       	push   0xc002ba84
c001fd5a:	e8 94 2b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001fd5f:	83 c4 10             	add    esp,0x10
c001fd62:	b8 01 00 00 00       	mov    eax,0x1
c001fd67:	83 c4 2c             	add    esp,0x2c
c001fd6a:	c3                   	ret    
c001fd6b:	90                   	nop

c001fd6c <FAT::tryMount(LogicalDisk*, int)>:
c001fd6c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fd72:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fd77:	83 f8 14             	cmp    eax,0x14
c001fd7a:	75 17                	jne    c001fd93 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	68 96 ba 02 c0       	push   0xc002ba96
c001fd84:	e8 9c 9e ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	b0 00                	mov    al,0x0
c001fd8e:	e9 d7 01 00 00       	jmp    c001ff6a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fd93:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fd9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fda0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fda6:	3d 00 02 00 00       	cmp    eax,0x200
c001fdab:	74 07                	je     c001fdb4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fdad:	b0 00                	mov    al,0x0
c001fdaf:	e9 b6 01 00 00       	jmp    c001ff6a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fdb4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fdbc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fdc3:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c001fdca:	83 f8 ff             	cmp    eax,0xffffffff
c001fdcd:	74 07                	je     c001fdd6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fdcf:	b0 01                	mov    al,0x1
c001fdd1:	e9 94 01 00 00       	jmp    c001ff6a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fdd6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fde0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fde8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fdef:	88 c2                	mov    dl,al
c001fdf1:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fdf6:	01 d0                	add    eax,edx
c001fdf8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fdff:	8b 15 c0 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecc0
c001fe05:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fe0c:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c001fe13:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001fe18:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fe1f:	89 14 85 60 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12a0],edx
c001fe26:	83 ec 0c             	sub    esp,0xc
c001fe29:	68 54 02 00 00       	push   0x254
c001fe2e:	e8 f1 f7 fe ff       	call   c000f624 <malloc>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fe3d:	83 ec 04             	sub    esp,0x4
c001fe40:	6a 00                	push   0x0
c001fe42:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe49:	50                   	push   eax
c001fe4a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe51:	e8 c2 4e fe ff       	call   c0004d18 <f_mount>
c001fe56:	83 c4 10             	add    esp,0x10
c001fe59:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fe60:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fe68:	74 19                	je     c001fe83 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe74:	e8 cb f7 fe ff       	call   c000f644 <rfree>
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	b0 00                	mov    al,0x0
c001fe7e:	e9 e7 00 00 00       	jmp    c001ff6a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe83:	83 ec 04             	sub    esp,0x4
c001fe86:	68 00 01 00 00       	push   0x100
c001fe8b:	6a 00                	push   0x0
c001fe8d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fe94:	50                   	push   eax
c001fe95:	e8 2a 08 fe ff       	call   c00006c4 <memset>
c001fe9a:	83 c4 10             	add    esp,0x10
c001fe9d:	83 ec 08             	sub    esp,0x8
c001fea0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fea7:	50                   	push   eax
c001fea8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001feaf:	50                   	push   eax
c001feb0:	e8 65 09 fe ff       	call   c000081a <strcat>
c001feb5:	83 c4 10             	add    esp,0x10
c001feb8:	83 ec 08             	sub    esp,0x8
c001febb:	68 a4 ba 02 c0       	push   0xc002baa4
c001fec0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fec7:	50                   	push   eax
c001fec8:	e8 4d 09 fe ff       	call   c000081a <strcat>
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	83 ec 04             	sub    esp,0x4
c001fed3:	6a 01                	push   0x1
c001fed5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fedc:	50                   	push   eax
c001fedd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fee1:	50                   	push   eax
c001fee2:	e8 93 4e fe ff       	call   c0004d7a <f_open>
c001fee7:	83 c4 10             	add    esp,0x10
c001feea:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fef1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fef8:	85 c0                	test   eax,eax
c001fefa:	74 0a                	je     c001ff06 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fefc:	78 2d                	js     c001ff2b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fefe:	83 e8 04             	sub    eax,0x4
c001ff01:	83 f8 01             	cmp    eax,0x1
c001ff04:	77 25                	ja     c001ff2b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ff06:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff15:	50                   	push   eax
c001ff16:	e8 b1 59 fe ff       	call   c00058cc <f_close>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	90                   	nop
c001ff1f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ff27:	74 3a                	je     c001ff63 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001ff29:	eb 2d                	jmp    c001ff58 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ff35:	e8 0a f7 fe ff       	call   c000f644 <rfree>
c001ff3a:	83 c4 10             	add    esp,0x10
c001ff3d:	83 ec 04             	sub    esp,0x4
c001ff40:	6a 00                	push   0x0
c001ff42:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ff49:	50                   	push   eax
c001ff4a:	6a 00                	push   0x0
c001ff4c:	e8 c7 4d fe ff       	call   c0004d18 <f_mount>
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	b0 00                	mov    al,0x0
c001ff56:	eb 12                	jmp    c001ff6a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ff58:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c001ff5d:	40                   	inc    eax
c001ff5e:	a3 c0 ec 02 c0       	mov    ds:0xc002ecc0,eax
c001ff63:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ff6a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ff70:	c3                   	ret    
c001ff71:	90                   	nop

c001ff72 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ff72:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ff78:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001ff80:	74 0a                	je     c001ff8c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001ff82:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001ff8a:	75 0a                	jne    c001ff96 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001ff8c:	b8 04 00 00 00       	mov    eax,0x4
c001ff91:	e9 db 00 00 00       	jmp    c0020071 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff96:	83 ec 08             	sub    esp,0x8
c001ff99:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ffa0:	50                   	push   eax
c001ffa1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001ffa8:	e8 29 5f fe ff       	call   c0005ed6 <f_readdir>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001ffb7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ffbd:	83 ec 0c             	sub    esp,0xc
c001ffc0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ffc7:	83 c0 1a             	add    eax,0x1a
c001ffca:	50                   	push   eax
c001ffcb:	e8 11 07 fe ff       	call   c00006e1 <strlen>
c001ffd0:	83 c4 10             	add    esp,0x10
c001ffd3:	ba 00 00 00 00       	mov    edx,0x0
c001ffd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ffdc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ffe0:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ffe7:	0f b6 c0             	movzx  eax,al
c001ffea:	83 e0 10             	and    eax,0x10
c001ffed:	74 07                	je     c001fff6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ffef:	b8 02 00 00 00       	mov    eax,0x2
c001fff4:	eb 05                	jmp    c001fffb <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fff6:	b8 01 00 00 00       	mov    eax,0x1
c001fffb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffff:	83 ec 08             	sub    esp,0x8
c0020002:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020009:	83 c0 1a             	add    eax,0x1a
c002000c:	50                   	push   eax
c002000d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020011:	83 c0 10             	add    eax,0x10
c0020014:	50                   	push   eax
c0020015:	e8 49 07 fe ff       	call   c0000763 <strcpy>
c002001a:	83 c4 10             	add    esp,0x10
c002001d:	83 ec 04             	sub    esp,0x4
c0020020:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020027:	8d 44 24 08          	lea    eax,[esp+0x8]
c002002b:	50                   	push   eax
c002002c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020033:	e8 68 06 fe ff       	call   c00006a0 <memcpy>
c0020038:	83 c4 10             	add    esp,0x10
c002003b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020042:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020048:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002004f:	84 c0                	test   al,al
c0020051:	75 07                	jne    c002005a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020053:	b8 07 00 00 00       	mov    eax,0x7
c0020058:	eb 17                	jmp    c0020071 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002005a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020061:	85 c0                	test   eax,eax
c0020063:	75 07                	jne    c002006c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020065:	b8 00 00 00 00       	mov    eax,0x0
c002006a:	eb 05                	jmp    c0020071 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002006c:	b8 01 00 00 00       	mov    eax,0x1
c0020071:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020077:	c3                   	ret    

c0020078 <FAT::read(void*, unsigned long, void*, int*)>:
c0020078:	83 ec 1c             	sub    esp,0x1c
c002007b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020080:	74 07                	je     c0020089 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020082:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020087:	75 07                	jne    c0020090 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020089:	b8 04 00 00 00       	mov    eax,0x4
c002008e:	eb 3d                	jmp    c00200cd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020090:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020094:	50                   	push   eax
c0020095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020099:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002009d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200a1:	e8 10 51 fe ff       	call   c00051b6 <f_read>
c00200a6:	83 c4 10             	add    esp,0x10
c00200a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200b1:	89 c2                	mov    edx,eax
c00200b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00200b7:	89 10                	mov    DWORD PTR [eax],edx
c00200b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200bd:	85 c0                	test   eax,eax
c00200bf:	75 07                	jne    c00200c8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00200c1:	b8 00 00 00 00       	mov    eax,0x0
c00200c6:	eb 05                	jmp    c00200cd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00200c8:	b8 01 00 00 00       	mov    eax,0x1
c00200cd:	83 c4 1c             	add    esp,0x1c
c00200d0:	c3                   	ret    
c00200d1:	90                   	nop

c00200d2 <FAT::write(void*, unsigned long, void*, int*)>:
c00200d2:	83 ec 1c             	sub    esp,0x1c
c00200d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00200da:	74 07                	je     c00200e3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00200dc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00200e1:	75 07                	jne    c00200ea <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00200e3:	b8 04 00 00 00       	mov    eax,0x4
c00200e8:	eb 3d                	jmp    c0020127 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00200ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200ee:	50                   	push   eax
c00200ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200fb:	e8 36 53 fe ff       	call   c0005436 <f_write>
c0020100:	83 c4 10             	add    esp,0x10
c0020103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020107:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002010b:	89 c2                	mov    edx,eax
c002010d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020111:	89 10                	mov    DWORD PTR [eax],edx
c0020113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020117:	85 c0                	test   eax,eax
c0020119:	75 07                	jne    c0020122 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002011b:	b8 00 00 00 00       	mov    eax,0x0
c0020120:	eb 05                	jmp    c0020127 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020122:	b8 01 00 00 00       	mov    eax,0x1
c0020127:	83 c4 1c             	add    esp,0x1c
c002012a:	c3                   	ret    
c002012b:	90                   	nop

c002012c <FAT::close(void*)>:
c002012c:	83 ec 1c             	sub    esp,0x1c
c002012f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020134:	75 07                	jne    c002013d <FAT::close(void*)+0x11>
c0020136:	b8 04 00 00 00       	mov    eax,0x4
c002013b:	eb 36                	jmp    c0020173 <FAT::close(void*)+0x47>
c002013d:	83 ec 0c             	sub    esp,0xc
c0020140:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020144:	e8 83 57 fe ff       	call   c00058cc <f_close>
c0020149:	83 c4 10             	add    esp,0x10
c002014c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020157:	e8 d8 f4 fe ff       	call   c000f634 <free>
c002015c:	83 c4 10             	add    esp,0x10
c002015f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020163:	85 c0                	test   eax,eax
c0020165:	75 07                	jne    c002016e <FAT::close(void*)+0x42>
c0020167:	b8 00 00 00 00       	mov    eax,0x0
c002016c:	eb 05                	jmp    c0020173 <FAT::close(void*)+0x47>
c002016e:	b8 01 00 00 00       	mov    eax,0x1
c0020173:	83 c4 1c             	add    esp,0x1c
c0020176:	c3                   	ret    
c0020177:	90                   	nop

c0020178 <FAT::closeDir(void*)>:
c0020178:	83 ec 1c             	sub    esp,0x1c
c002017b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020180:	75 07                	jne    c0020189 <FAT::closeDir(void*)+0x11>
c0020182:	b8 04 00 00 00       	mov    eax,0x4
c0020187:	eb 36                	jmp    c00201bf <FAT::closeDir(void*)+0x47>
c0020189:	83 ec 0c             	sub    esp,0xc
c002018c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020190:	e8 1f 5d fe ff       	call   c0005eb4 <f_closedir>
c0020195:	83 c4 10             	add    esp,0x10
c0020198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002019c:	83 ec 0c             	sub    esp,0xc
c002019f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201a3:	e8 8c f4 fe ff       	call   c000f634 <free>
c00201a8:	83 c4 10             	add    esp,0x10
c00201ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201af:	85 c0                	test   eax,eax
c00201b1:	75 07                	jne    c00201ba <FAT::closeDir(void*)+0x42>
c00201b3:	b8 00 00 00 00       	mov    eax,0x0
c00201b8:	eb 05                	jmp    c00201bf <FAT::closeDir(void*)+0x47>
c00201ba:	b8 01 00 00 00       	mov    eax,0x1
c00201bf:	83 c4 1c             	add    esp,0x1c
c00201c2:	c3                   	ret    
c00201c3:	90                   	nop

c00201c4 <FAT::seek(void*, unsigned long long)>:
c00201c4:	83 ec 2c             	sub    esp,0x2c
c00201c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00201cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00201d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00201dc:	75 07                	jne    c00201e5 <FAT::seek(void*, unsigned long long)+0x21>
c00201de:	b8 04 00 00 00       	mov    eax,0x4
c00201e3:	eb 2f                	jmp    c0020214 <FAT::seek(void*, unsigned long long)+0x50>
c00201e5:	83 ec 04             	sub    esp,0x4
c00201e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00201ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00201f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00201f4:	e8 02 57 fe ff       	call   c00058fb <f_lseek>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020204:	85 c0                	test   eax,eax
c0020206:	75 07                	jne    c002020f <FAT::seek(void*, unsigned long long)+0x4b>
c0020208:	b8 00 00 00 00       	mov    eax,0x0
c002020d:	eb 05                	jmp    c0020214 <FAT::seek(void*, unsigned long long)+0x50>
c002020f:	b8 01 00 00 00       	mov    eax,0x1
c0020214:	83 c4 2c             	add    esp,0x2c
c0020217:	c3                   	ret    

c0020218 <fatWrapperReadDisk>:
c0020218:	83 ec 1c             	sub    esp,0x1c
c002021b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002021f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020227:	89 04 24             	mov    DWORD PTR [esp],eax
c002022a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002022e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020232:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020237:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c002023e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020249:	52                   	push   edx
c002024a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002024e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020252:	50                   	push   eax
c0020253:	e8 f0 5d ff ff       	call   c0016048 <LogicalDisk::read(unsigned long long, int, void*)>
c0020258:	83 c4 20             	add    esp,0x20
c002025b:	83 c4 1c             	add    esp,0x1c
c002025e:	c3                   	ret    

c002025f <fatWrapperWriteDisk>:
c002025f:	83 ec 1c             	sub    esp,0x1c
c0020262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020266:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002026a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002026e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020271:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020275:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020279:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002027e:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c0020285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020290:	52                   	push   edx
c0020291:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020295:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020299:	50                   	push   eax
c002029a:	e8 15 5e ff ff       	call   c00160b4 <LogicalDisk::write(unsigned long long, int, void*)>
c002029f:	83 c4 20             	add    esp,0x20
c00202a2:	83 c4 1c             	add    esp,0x1c
c00202a5:	c3                   	ret    

c00202a6 <fatWrapperIoctl>:
c00202a6:	53                   	push   ebx
c00202a7:	83 ec 28             	sub    esp,0x28
c00202aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00202ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00202b2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00202b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00202ba:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00202bf:	75 31                	jne    c00202f2 <fatWrapperIoctl+0x4c>
c00202c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202c9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202ce:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c00202d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00202db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00202e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202e5:	66 89 02             	mov    WORD PTR [edx],ax
c00202e8:	b8 00 00 00 00       	mov    eax,0x0
c00202ed:	e9 b2 00 00 00       	jmp    c00203a4 <fatWrapperIoctl+0xfe>
c00202f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00202f7:	75 6a                	jne    c0020363 <fatWrapperIoctl+0xbd>
c00202f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020301:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020306:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c002030d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020313:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020319:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002031f:	89 c8                	mov    eax,ecx
c0020321:	89 da                	mov    edx,ebx
c0020323:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020327:	c1 e0 0a             	shl    eax,0xa
c002032a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002032f:	8b 0c 8d c0 dc 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2340]
c0020336:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002033c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020342:	89 cb                	mov    ebx,ecx
c0020344:	c1 fb 1f             	sar    ebx,0x1f
c0020347:	53                   	push   ebx
c0020348:	51                   	push   ecx
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	e8 0c 5b 00 00       	call   c0025e5c <__udivdi3>
c0020350:	83 c4 10             	add    esp,0x10
c0020353:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020357:	89 01                	mov    DWORD PTR [ecx],eax
c0020359:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002035c:	b8 00 00 00 00       	mov    eax,0x0
c0020361:	eb 41                	jmp    c00203a4 <fatWrapperIoctl+0xfe>
c0020363:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020368:	75 07                	jne    c0020371 <fatWrapperIoctl+0xcb>
c002036a:	b8 00 00 00 00       	mov    eax,0x0
c002036f:	eb 33                	jmp    c00203a4 <fatWrapperIoctl+0xfe>
c0020371:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020376:	75 19                	jne    c0020391 <fatWrapperIoctl+0xeb>
c0020378:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002037c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020380:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020384:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002038a:	b8 00 00 00 00       	mov    eax,0x0
c002038f:	eb 13                	jmp    c00203a4 <fatWrapperIoctl+0xfe>
c0020391:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020396:	75 07                	jne    c002039f <fatWrapperIoctl+0xf9>
c0020398:	b8 00 00 00 00       	mov    eax,0x0
c002039d:	eb 05                	jmp    c00203a4 <fatWrapperIoctl+0xfe>
c002039f:	b8 04 00 00 00       	mov    eax,0x4
c00203a4:	83 c4 28             	add    esp,0x28
c00203a7:	5b                   	pop    ebx
c00203a8:	c3                   	ret    
c00203a9:	90                   	nop

c00203aa <FAT::FAT()>:
c00203aa:	83 ec 1c             	sub    esp,0x1c
c00203ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203b1:	83 ec 0c             	sub    esp,0xc
c00203b4:	50                   	push   eax
c00203b5:	e8 3e 28 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c00203ba:	83 c4 10             	add    esp,0x10
c00203bd:	ba e0 ba 02 c0       	mov    edx,0xc002bae0
c00203c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203c6:	89 10                	mov    DWORD PTR [eax],edx
c00203c8:	c7 05 c0 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ecc0,0x0
c00203d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00203da:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00203df:	7f 15                	jg     c00203f6 <FAT::FAT()+0x4c>
c00203e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203e5:	c7 04 85 e0 ec 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1320],0xffffffff
c00203f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00203f4:	eb e4                	jmp    c00203da <FAT::FAT()+0x30>
c00203f6:	90                   	nop
c00203f7:	83 c4 1c             	add    esp,0x1c
c00203fa:	c3                   	ret    
c00203fb:	90                   	nop

c00203fc <FAT::fixFilepath(char*)>:
c00203fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020400:	8a 00                	mov    al,BYTE PTR [eax]
c0020402:	3c 40                	cmp    al,0x40
c0020404:	7e 2c                	jle    c0020432 <FAT::fixFilepath(char*)+0x36>
c0020406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002040a:	8a 00                	mov    al,BYTE PTR [eax]
c002040c:	83 e8 41             	sub    eax,0x41
c002040f:	88 c2                	mov    dl,al
c0020411:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020415:	88 10                	mov    BYTE PTR [eax],dl
c0020417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002041b:	8a 00                	mov    al,BYTE PTR [eax]
c002041d:	0f be c0             	movsx  eax,al
c0020420:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0020427:	83 c0 30             	add    eax,0x30
c002042a:	88 c2                	mov    dl,al
c002042c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020430:	88 10                	mov    BYTE PTR [eax],dl
c0020432:	90                   	nop
c0020433:	c3                   	ret    

c0020434 <FAT::open(char const*, void**, FileOpenMode)>:
c0020434:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002043a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020442:	74 0a                	je     c002044e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020444:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002044c:	75 0a                	jne    c0020458 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002044e:	b8 04 00 00 00       	mov    eax,0x4
c0020453:	e9 fd 00 00 00       	jmp    c0020555 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020458:	83 ec 08             	sub    esp,0x8
c002045b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020462:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020466:	50                   	push   eax
c0020467:	e8 f7 02 fe ff       	call   c0000763 <strcpy>
c002046c:	83 c4 10             	add    esp,0x10
c002046f:	83 ec 08             	sub    esp,0x8
c0020472:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020476:	50                   	push   eax
c0020477:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002047e:	e8 79 ff ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002048e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020495:	83 e0 01             	and    eax,0x1
c0020498:	74 08                	je     c00204a2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002049a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00204a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204a9:	83 e0 04             	and    eax,0x4
c00204ac:	74 10                	je     c00204be <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00204ae:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00204b6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00204be:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204c5:	83 e0 02             	and    eax,0x2
c00204c8:	74 08                	je     c00204d2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00204ca:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00204d2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204d9:	83 e0 08             	and    eax,0x8
c00204dc:	74 08                	je     c00204e6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00204de:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00204e6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204ed:	83 e0 10             	and    eax,0x10
c00204f0:	74 08                	je     c00204fa <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00204f2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00204fa:	83 ec 0c             	sub    esp,0xc
c00204fd:	68 50 02 00 00       	push   0x250
c0020502:	e8 1d f1 fe ff       	call   c000f624 <malloc>
c0020507:	83 c4 10             	add    esp,0x10
c002050a:	89 c2                	mov    edx,eax
c002050c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020513:	89 10                	mov    DWORD PTR [eax],edx
c0020515:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002051d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020524:	8b 00                	mov    eax,DWORD PTR [eax]
c0020526:	83 ec 04             	sub    esp,0x4
c0020529:	52                   	push   edx
c002052a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002052e:	52                   	push   edx
c002052f:	50                   	push   eax
c0020530:	e8 45 48 fe ff       	call   c0004d7a <f_open>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002053f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020547:	74 07                	je     c0020550 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020549:	b8 01 00 00 00       	mov    eax,0x1
c002054e:	eb 05                	jmp    c0020555 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020550:	b8 00 00 00 00       	mov    eax,0x0
c0020555:	81 c4 1c 01 00 00    	add    esp,0x11c
c002055b:	c3                   	ret    

c002055c <FAT::openDir(char const*, void**)>:
c002055c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020562:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002056a:	74 0a                	je     c0020576 <FAT::openDir(char const*, void**)+0x1a>
c002056c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020574:	75 07                	jne    c002057d <FAT::openDir(char const*, void**)+0x21>
c0020576:	b8 04 00 00 00       	mov    eax,0x4
c002057b:	eb 7d                	jmp    c00205fa <FAT::openDir(char const*, void**)+0x9e>
c002057d:	83 ec 08             	sub    esp,0x8
c0020580:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020587:	8d 44 24 18          	lea    eax,[esp+0x18]
c002058b:	50                   	push   eax
c002058c:	e8 d2 01 fe ff       	call   c0000763 <strcpy>
c0020591:	83 c4 10             	add    esp,0x10
c0020594:	83 ec 08             	sub    esp,0x8
c0020597:	8d 44 24 14          	lea    eax,[esp+0x14]
c002059b:	50                   	push   eax
c002059c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00205a3:	e8 54 fe ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c00205a8:	83 c4 10             	add    esp,0x10
c00205ab:	83 ec 0c             	sub    esp,0xc
c00205ae:	6a 4c                	push   0x4c
c00205b0:	e8 6f f0 fe ff       	call   c000f624 <malloc>
c00205b5:	83 c4 10             	add    esp,0x10
c00205b8:	89 c2                	mov    edx,eax
c00205ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00205c1:	89 10                	mov    DWORD PTR [eax],edx
c00205c3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00205ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00205cc:	83 ec 08             	sub    esp,0x8
c00205cf:	8d 54 24 14          	lea    edx,[esp+0x14]
c00205d3:	52                   	push   edx
c00205d4:	50                   	push   eax
c00205d5:	e8 d8 57 fe ff       	call   c0005db2 <f_opendir>
c00205da:	83 c4 10             	add    esp,0x10
c00205dd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00205e4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00205ec:	74 07                	je     c00205f5 <FAT::openDir(char const*, void**)+0x99>
c00205ee:	b8 01 00 00 00       	mov    eax,0x1
c00205f3:	eb 05                	jmp    c00205fa <FAT::openDir(char const*, void**)+0x9e>
c00205f5:	b8 00 00 00 00       	mov    eax,0x0
c00205fa:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020600:	c3                   	ret    
c0020601:	90                   	nop

c0020602 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020602:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020608:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020610:	75 0a                	jne    c002061c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020612:	b8 04 00 00 00       	mov    eax,0x4
c0020617:	e9 c9 00 00 00       	jmp    c00206e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002061c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020624:	75 0a                	jne    c0020630 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020626:	b8 04 00 00 00       	mov    eax,0x4
c002062b:	e9 b5 00 00 00       	jmp    c00206e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020630:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020638:	75 0a                	jne    c0020644 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002063a:	b8 04 00 00 00       	mov    eax,0x4
c002063f:	e9 a1 00 00 00       	jmp    c00206e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020644:	83 ec 08             	sub    esp,0x8
c0020647:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002064e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020655:	50                   	push   eax
c0020656:	e8 08 01 fe ff       	call   c0000763 <strcpy>
c002065b:	83 c4 10             	add    esp,0x10
c002065e:	83 ec 08             	sub    esp,0x8
c0020661:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020668:	50                   	push   eax
c0020669:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020670:	e8 87 fd ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	83 ec 08             	sub    esp,0x8
c002067b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002067f:	50                   	push   eax
c0020680:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020687:	50                   	push   eax
c0020688:	e8 e4 58 fe ff       	call   c0005f71 <f_stat>
c002068d:	83 c4 10             	add    esp,0x10
c0020690:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020697:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002069e:	85 c0                	test   eax,eax
c00206a0:	74 07                	je     c00206a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00206a2:	83 f8 04             	cmp    eax,0x4
c00206a5:	74 32                	je     c00206d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00206a7:	eb 37                	jmp    c00206e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00206a9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206ad:	0f b6 c0             	movzx  eax,al
c00206b0:	83 e0 10             	and    eax,0x10
c00206b3:	0f 95 c2             	setne  dl
c00206b6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00206bd:	88 10                	mov    BYTE PTR [eax],dl
c00206bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00206c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00206c6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00206cd:	89 01                	mov    DWORD PTR [ecx],eax
c00206cf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206d2:	b8 00 00 00 00       	mov    eax,0x0
c00206d7:	eb 0c                	jmp    c00206e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00206d9:	b8 02 00 00 00       	mov    eax,0x2
c00206de:	eb 05                	jmp    c00206e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00206e0:	b8 01 00 00 00       	mov    eax,0x1
c00206e5:	81 c4 2c 02 00 00    	add    esp,0x22c
c00206eb:	c3                   	ret    

c00206ec <FAT::unlink(char const*)>:
c00206ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206fa:	75 07                	jne    c0020703 <FAT::unlink(char const*)+0x17>
c00206fc:	b8 04 00 00 00       	mov    eax,0x4
c0020701:	eb 5c                	jmp    c002075f <FAT::unlink(char const*)+0x73>
c0020703:	83 ec 08             	sub    esp,0x8
c0020706:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002070d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020711:	50                   	push   eax
c0020712:	e8 4c 00 fe ff       	call   c0000763 <strcpy>
c0020717:	83 c4 10             	add    esp,0x10
c002071a:	83 ec 08             	sub    esp,0x8
c002071d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020721:	50                   	push   eax
c0020722:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020729:	e8 ce fc ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c002072e:	83 c4 10             	add    esp,0x10
c0020731:	83 ec 0c             	sub    esp,0xc
c0020734:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020738:	50                   	push   eax
c0020739:	e8 85 5b fe ff       	call   c00062c3 <f_unlink>
c002073e:	83 c4 10             	add    esp,0x10
c0020741:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020748:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002074f:	85 c0                	test   eax,eax
c0020751:	75 07                	jne    c002075a <FAT::unlink(char const*)+0x6e>
c0020753:	b8 00 00 00 00       	mov    eax,0x0
c0020758:	eb 05                	jmp    c002075f <FAT::unlink(char const*)+0x73>
c002075a:	b8 01 00 00 00       	mov    eax,0x1
c002075f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020765:	c3                   	ret    

c0020766 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020766:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002076c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020773:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002077a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002077e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020782:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002078a:	75 0a                	jne    c0020796 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002078c:	b8 04 00 00 00       	mov    eax,0x4
c0020791:	e9 1c 01 00 00       	jmp    c00208b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020796:	83 ec 08             	sub    esp,0x8
c0020799:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00207a0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00207a4:	50                   	push   eax
c00207a5:	e8 b9 ff fd ff       	call   c0000763 <strcpy>
c00207aa:	83 c4 10             	add    esp,0x10
c00207ad:	83 ec 08             	sub    esp,0x8
c00207b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00207b4:	50                   	push   eax
c00207b5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00207bc:	e8 3b fc ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c00207c1:	83 c4 10             	add    esp,0x10
c00207c4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00207cc:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00207d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207d9:	83 e0 01             	and    eax,0x1
c00207dc:	74 08                	je     c00207e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00207de:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00207e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207eb:	83 e0 02             	and    eax,0x2
c00207ee:	74 08                	je     c00207f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00207f0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00207f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207fd:	83 e0 04             	and    eax,0x4
c0020800:	74 08                	je     c002080a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020802:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002080a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002080f:	83 e0 08             	and    eax,0x8
c0020812:	74 08                	je     c002081c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020814:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002081c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020821:	83 e0 01             	and    eax,0x1
c0020824:	74 08                	je     c002082e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020826:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002082e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020833:	83 e0 02             	and    eax,0x2
c0020836:	74 08                	je     c0020840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020838:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020840:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020845:	83 e0 04             	and    eax,0x4
c0020848:	74 08                	je     c0020852 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002084a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020852:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020857:	83 e0 08             	and    eax,0x8
c002085a:	74 08                	je     c0020864 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002085c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020864:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002086b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020872:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002087a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020882:	83 ec 04             	sub    esp,0x4
c0020885:	52                   	push   edx
c0020886:	50                   	push   eax
c0020887:	8d 44 24 24          	lea    eax,[esp+0x24]
c002088b:	50                   	push   eax
c002088c:	e8 d4 60 fe ff       	call   c0006965 <f_chmod>
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002089b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00208a2:	85 c0                	test   eax,eax
c00208a4:	75 07                	jne    c00208ad <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00208a6:	b8 00 00 00 00       	mov    eax,0x0
c00208ab:	eb 05                	jmp    c00208b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00208ad:	b8 01 00 00 00       	mov    eax,0x1
c00208b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00208b8:	c3                   	ret    
c00208b9:	90                   	nop

c00208ba <FAT::rename(char const*, char const*)>:
c00208ba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00208c0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00208c8:	74 0a                	je     c00208d4 <FAT::rename(char const*, char const*)+0x1a>
c00208ca:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00208d2:	75 0a                	jne    c00208de <FAT::rename(char const*, char const*)+0x24>
c00208d4:	b8 04 00 00 00       	mov    eax,0x4
c00208d9:	e9 98 00 00 00       	jmp    c0020976 <FAT::rename(char const*, char const*)+0xbc>
c00208de:	83 ec 08             	sub    esp,0x8
c00208e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00208e8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00208ef:	50                   	push   eax
c00208f0:	e8 6e fe fd ff       	call   c0000763 <strcpy>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	83 ec 08             	sub    esp,0x8
c00208fb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020902:	50                   	push   eax
c0020903:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002090a:	e8 ed fa ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c002090f:	83 c4 10             	add    esp,0x10
c0020912:	83 ec 08             	sub    esp,0x8
c0020915:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002091c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020920:	50                   	push   eax
c0020921:	e8 3d fe fd ff       	call   c0000763 <strcpy>
c0020926:	83 c4 10             	add    esp,0x10
c0020929:	83 ec 08             	sub    esp,0x8
c002092c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020930:	50                   	push   eax
c0020931:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020938:	e8 bf fa ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c002093d:	83 c4 10             	add    esp,0x10
c0020940:	83 ec 08             	sub    esp,0x8
c0020943:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020947:	50                   	push   eax
c0020948:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002094f:	50                   	push   eax
c0020950:	e8 1d 5d fe ff       	call   c0006672 <f_rename>
c0020955:	83 c4 10             	add    esp,0x10
c0020958:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002095f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020966:	85 c0                	test   eax,eax
c0020968:	75 07                	jne    c0020971 <FAT::rename(char const*, char const*)+0xb7>
c002096a:	b8 00 00 00 00       	mov    eax,0x0
c002096f:	eb 05                	jmp    c0020976 <FAT::rename(char const*, char const*)+0xbc>
c0020971:	b8 01 00 00 00       	mov    eax,0x1
c0020976:	81 c4 1c 02 00 00    	add    esp,0x21c
c002097c:	c3                   	ret    
c002097d:	90                   	nop

c002097e <FAT::mkdir(char const*)>:
c002097e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020984:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002098c:	75 07                	jne    c0020995 <FAT::mkdir(char const*)+0x17>
c002098e:	b8 04 00 00 00       	mov    eax,0x4
c0020993:	eb 5c                	jmp    c00209f1 <FAT::mkdir(char const*)+0x73>
c0020995:	83 ec 08             	sub    esp,0x8
c0020998:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002099f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209a3:	50                   	push   eax
c00209a4:	e8 ba fd fd ff       	call   c0000763 <strcpy>
c00209a9:	83 c4 10             	add    esp,0x10
c00209ac:	83 ec 08             	sub    esp,0x8
c00209af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209b3:	50                   	push   eax
c00209b4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209bb:	e8 3c fa ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c00209c0:	83 c4 10             	add    esp,0x10
c00209c3:	83 ec 0c             	sub    esp,0xc
c00209c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209ca:	50                   	push   eax
c00209cb:	e8 76 5a fe ff       	call   c0006446 <f_mkdir>
c00209d0:	83 c4 10             	add    esp,0x10
c00209d3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209da:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00209e1:	85 c0                	test   eax,eax
c00209e3:	75 07                	jne    c00209ec <FAT::mkdir(char const*)+0x6e>
c00209e5:	b8 00 00 00 00       	mov    eax,0x0
c00209ea:	eb 05                	jmp    c00209f1 <FAT::mkdir(char const*)+0x73>
c00209ec:	b8 01 00 00 00       	mov    eax,0x1
c00209f1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209f7:	c3                   	ret    

c00209f8 <FAT::exists(char const*)>:
c00209f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209fe:	83 ec 08             	sub    esp,0x8
c0020a01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a0c:	50                   	push   eax
c0020a0d:	e8 51 fd fd ff       	call   c0000763 <strcpy>
c0020a12:	83 c4 10             	add    esp,0x10
c0020a15:	83 ec 08             	sub    esp,0x8
c0020a18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a1c:	50                   	push   eax
c0020a1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a24:	e8 d3 f9 ff ff       	call   c00203fc <FAT::fixFilepath(char*)>
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	83 ec 08             	sub    esp,0x8
c0020a2f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020a36:	50                   	push   eax
c0020a37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a3b:	50                   	push   eax
c0020a3c:	e8 30 55 fe ff       	call   c0005f71 <f_stat>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a4b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a52:	85 c0                	test   eax,eax
c0020a54:	75 04                	jne    c0020a5a <FAT::exists(char const*)+0x62>
c0020a56:	b0 01                	mov    al,0x1
c0020a58:	eb 02                	jmp    c0020a5c <FAT::exists(char const*)+0x64>
c0020a5a:	b0 00                	mov    al,0x0
c0020a5c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020a62:	c3                   	ret    
c0020a63:	90                   	nop

c0020a64 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020a64:	b8 08 00 00 00       	mov    eax,0x8
c0020a69:	c3                   	ret    

c0020a6a <ISO9660::seek(void*, unsigned long long)>:
c0020a6a:	53                   	push   ebx
c0020a6b:	b8 04 00 00 00       	mov    eax,0x4
c0020a70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020a74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020a7c:	85 d2                	test   edx,edx
c0020a7e:	74 17                	je     c0020a97 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020a80:	89 c8                	mov    eax,ecx
c0020a82:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020a85:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020a88:	b8 01 00 00 00       	mov    eax,0x1
c0020a8d:	73 08                	jae    c0020a97 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020a8f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020a92:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020a95:	31 c0                	xor    eax,eax
c0020a97:	5b                   	pop    ebx
c0020a98:	c3                   	ret    
c0020a99:	90                   	nop

c0020a9a <ISO9660::tell(void*, unsigned long long*)>:
c0020a9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020aa2:	85 d2                	test   edx,edx
c0020aa4:	74 12                	je     c0020ab8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020aa6:	85 c0                	test   eax,eax
c0020aa8:	74 0e                	je     c0020ab8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020aaa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020aad:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020ab0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020ab3:	89 10                	mov    DWORD PTR [eax],edx
c0020ab5:	31 c0                	xor    eax,eax
c0020ab7:	c3                   	ret    
c0020ab8:	b8 04 00 00 00       	mov    eax,0x4
c0020abd:	c3                   	ret    

c0020abe <ISO9660::getName()>:
c0020abe:	b8 3c bb 02 c0       	mov    eax,0xc002bb3c
c0020ac3:	c3                   	ret    

c0020ac4 <ISO9660::stat(void*, unsigned long long*)>:
c0020ac4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020acc:	85 d2                	test   edx,edx
c0020ace:	74 12                	je     c0020ae2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ad0:	85 c0                	test   eax,eax
c0020ad2:	74 0e                	je     c0020ae2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ad4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020ad7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ada:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020add:	89 10                	mov    DWORD PTR [eax],edx
c0020adf:	31 c0                	xor    eax,eax
c0020ae1:	c3                   	ret    
c0020ae2:	b8 04 00 00 00       	mov    eax,0x4
c0020ae7:	c3                   	ret    

c0020ae8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020ae8:	b8 01 00 00 00       	mov    eax,0x1
c0020aed:	c3                   	ret    

c0020aee <ISO9660::unlink(char const*)>:
c0020aee:	b8 01 00 00 00       	mov    eax,0x1
c0020af3:	c3                   	ret    

c0020af4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020af4:	b8 01 00 00 00       	mov    eax,0x1
c0020af9:	c3                   	ret    

c0020afa <ISO9660::rename(char const*, char const*)>:
c0020afa:	b8 01 00 00 00       	mov    eax,0x1
c0020aff:	c3                   	ret    

c0020b00 <ISO9660::mkdir(char const*)>:
c0020b00:	b8 01 00 00 00       	mov    eax,0x1
c0020b05:	c3                   	ret    

c0020b06 <ISO9660::close(void*)>:
c0020b06:	83 ec 0c             	sub    esp,0xc
c0020b09:	b8 04 00 00 00       	mov    eax,0x4
c0020b0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b12:	85 d2                	test   edx,edx
c0020b14:	74 0e                	je     c0020b24 <ISO9660::close(void*)+0x1e>
c0020b16:	83 ec 0c             	sub    esp,0xc
c0020b19:	52                   	push   edx
c0020b1a:	e8 15 eb fe ff       	call   c000f634 <free>
c0020b1f:	83 c4 10             	add    esp,0x10
c0020b22:	31 c0                	xor    eax,eax
c0020b24:	83 c4 0c             	add    esp,0xc
c0020b27:	c3                   	ret    

c0020b28 <ISO9660::closeDir(void*)>:
c0020b28:	83 ec 0c             	sub    esp,0xc
c0020b2b:	b8 04 00 00 00       	mov    eax,0x4
c0020b30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b34:	85 d2                	test   edx,edx
c0020b36:	74 0e                	je     c0020b46 <ISO9660::closeDir(void*)+0x1e>
c0020b38:	83 ec 0c             	sub    esp,0xc
c0020b3b:	52                   	push   edx
c0020b3c:	e8 f3 ea fe ff       	call   c000f634 <free>
c0020b41:	83 c4 10             	add    esp,0x10
c0020b44:	31 c0                	xor    eax,eax
c0020b46:	83 c4 0c             	add    esp,0xc
c0020b49:	c3                   	ret    

c0020b4a <ISO9660::~ISO9660()>:
c0020b4a:	83 ec 0c             	sub    esp,0xc
c0020b4d:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0020b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b56:	89 10                	mov    DWORD PTR [eax],edx
c0020b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5c:	83 ec 0c             	sub    esp,0xc
c0020b5f:	50                   	push   eax
c0020b60:	e8 b7 20 ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0020b65:	83 c4 10             	add    esp,0x10
c0020b68:	90                   	nop
c0020b69:	83 c4 0c             	add    esp,0xc
c0020b6c:	c3                   	ret    
c0020b6d:	90                   	nop

c0020b6e <ISO9660::~ISO9660()>:
c0020b6e:	83 ec 0c             	sub    esp,0xc
c0020b71:	83 ec 0c             	sub    esp,0xc
c0020b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b78:	e8 cd ff ff ff       	call   c0020b4a <ISO9660::~ISO9660()>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	83 ec 08             	sub    esp,0x8
c0020b83:	6a 08                	push   0x8
c0020b85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b89:	e8 85 1c ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0020b8e:	83 c4 10             	add    esp,0x10
c0020b91:	83 c4 0c             	add    esp,0xc
c0020b94:	c3                   	ret    

c0020b95 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020b95:	55                   	push   ebp
c0020b96:	31 c9                	xor    ecx,ecx
c0020b98:	57                   	push   edi
c0020b99:	56                   	push   esi
c0020b9a:	53                   	push   ebx
c0020b9b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020b9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020ba3:	89 eb                	mov    ebx,ebp
c0020ba5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020ba9:	39 ce                	cmp    esi,ecx
c0020bab:	7e 17                	jle    c0020bc4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020bad:	31 d2                	xor    edx,edx
c0020baf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020bb3:	7d 13                	jge    c0020bc8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020bb5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020bb9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020bbc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020bbf:	75 0d                	jne    c0020bce <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020bc1:	42                   	inc    edx
c0020bc2:	eb eb                	jmp    c0020baf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020bc4:	31 c0                	xor    eax,eax
c0020bc6:	eb 0a                	jmp    c0020bd2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020bc8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020bcc:	eb 04                	jmp    c0020bd2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020bce:	41                   	inc    ecx
c0020bcf:	43                   	inc    ebx
c0020bd0:	eb d7                	jmp    c0020ba9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020bd2:	5b                   	pop    ebx
c0020bd3:	5e                   	pop    esi
c0020bd4:	5f                   	pop    edi
c0020bd5:	5d                   	pop    ebp
c0020bd6:	c3                   	ret    

c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020bd7:	56                   	push   esi
c0020bd8:	53                   	push   ebx
c0020bd9:	52                   	push   edx
c0020bda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bde:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020be2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020be6:	39 0d c0 ed 02 c0    	cmp    DWORD PTR ds:0xc002edc0,ecx
c0020bec:	75 08                	jne    c0020bf6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020bee:	38 05 34 cc 02 c0    	cmp    BYTE PTR ds:0xc002cc34,al
c0020bf4:	74 2b                	je     c0020c21 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	a2 34 cc 02 c0       	mov    ds:0xc002cc34,al
c0020bfe:	68 e0 ed 02 c0       	push   0xc002ede0
c0020c03:	0f be c0             	movsx  eax,al
c0020c06:	6a 01                	push   0x1
c0020c08:	89 0d c0 ed 02 c0    	mov    DWORD PTR ds:0xc002edc0,ecx
c0020c0e:	31 db                	xor    ebx,ebx
c0020c10:	53                   	push   ebx
c0020c11:	51                   	push   ecx
c0020c12:	ff 34 85 bc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2444]
c0020c19:	e8 2a 54 ff ff       	call   c0016048 <LogicalDisk::read(unsigned long long, int, void*)>
c0020c1e:	83 c4 20             	add    esp,0x20
c0020c21:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020c29:	c7 44 24 14 e0 ed 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ede0
c0020c31:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020c35:	58                   	pop    eax
c0020c36:	5b                   	pop    ebx
c0020c37:	5e                   	pop    esi
c0020c38:	e9 63 fa fd ff       	jmp    c00006a0 <memcpy>
c0020c3d:	90                   	nop

c0020c3e <ISO9660::tryMount(LogicalDisk*, int)>:
c0020c3e:	81 ec 10 08 00 00    	sub    esp,0x810
c0020c44:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020c4b:	83 c0 41             	add    eax,0x41
c0020c4e:	0f be c0             	movsx  eax,al
c0020c51:	50                   	push   eax
c0020c52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c56:	50                   	push   eax
c0020c57:	6a 10                	push   0x10
c0020c59:	e8 79 ff ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c5e:	83 c4 10             	add    esp,0x10
c0020c61:	31 c0                	xor    eax,eax
c0020c63:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020c68:	75 1d                	jne    c0020c87 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c6a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020c6f:	75 16                	jne    c0020c87 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c71:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020c76:	75 0f                	jne    c0020c87 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c78:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020c7d:	75 08                	jne    c0020c87 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c7f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020c84:	0f 94 c0             	sete   al
c0020c87:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020c8d:	c3                   	ret    

c0020c8e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020c8e:	55                   	push   ebp
c0020c8f:	57                   	push   edi
c0020c90:	56                   	push   esi
c0020c91:	53                   	push   ebx
c0020c92:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020c98:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020c9f:	85 ed                	test   ebp,ebp
c0020ca1:	0f 84 d6 01 00 00    	je     c0020e7d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020ca7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020caf:	0f 84 c8 01 00 00    	je     c0020e7d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020cb5:	b8 01 00 00 00       	mov    eax,0x1
c0020cba:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020cbe:	0f 85 be 01 00 00    	jne    c0020e82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020cc4:	31 d2                	xor    edx,edx
c0020cc6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020cd0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020cd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020cd7:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020cda:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020ce1:	01 f0                	add    eax,esi
c0020ce3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020ce6:	11 fa                	adc    edx,edi
c0020ce8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020cec:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020cf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cf4:	19 d1                	sbb    ecx,edx
c0020cf6:	72 0a                	jb     c0020d02 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020cf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d00:	eb 13                	jmp    c0020d15 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d0a:	29 f0                	sub    eax,esi
c0020d0c:	19 fa                	sbb    edx,edi
c0020d0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d18:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020d1b:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020d1f:	51                   	push   ecx
c0020d20:	c1 e0 0b             	shl    eax,0xb
c0020d23:	01 c6                	add    esi,eax
c0020d25:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d29:	11 d7                	adc    edi,edx
c0020d2b:	50                   	push   eax
c0020d2c:	89 fa                	mov    edx,edi
c0020d2e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020d32:	89 f0                	mov    eax,esi
c0020d34:	53                   	push   ebx
c0020d35:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020d39:	50                   	push   eax
c0020d3a:	e8 98 fe ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d43:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020d46:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020d4a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020d50:	83 c4 10             	add    esp,0x10
c0020d53:	b8 00 08 00 00       	mov    eax,0x800
c0020d58:	29 d0                	sub    eax,edx
c0020d5a:	39 c1                	cmp    ecx,eax
c0020d5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020d60:	83 d9 00             	sbb    ecx,0x0
c0020d63:	7d 1c                	jge    c0020d81 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020d65:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020d6a:	75 12                	jne    c0020d7e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020d6c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020d73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020d79:	e9 fb 00 00 00       	jmp    c0020e79 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020d7e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d81:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020d84:	31 d2                	xor    edx,edx
c0020d86:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020d8a:	39 c2                	cmp    edx,eax
c0020d8c:	7d 14                	jge    c0020da2 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020d8e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020d95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d99:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020d9c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020d9f:	42                   	inc    edx
c0020da0:	eb e8                	jmp    c0020d8a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020da2:	89 c3                	mov    ebx,eax
c0020da4:	85 c0                	test   eax,eax
c0020da6:	79 02                	jns    c0020daa <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020da8:	31 db                	xor    ebx,ebx
c0020daa:	99                   	cdq    
c0020dab:	01 c3                	add    ebx,eax
c0020dad:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020db4:	01 c6                	add    esi,eax
c0020db6:	11 d7                	adc    edi,edx
c0020db8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020dbc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020dc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020dc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020dc7:	29 c6                	sub    esi,eax
c0020dc9:	19 d7                	sbb    edi,edx
c0020dcb:	89 34 24             	mov    DWORD PTR [esp],esi
c0020dce:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020dd2:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020dd7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020dda:	b8 00 00 00 00       	mov    eax,0x0
c0020ddf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020de3:	7d 3e                	jge    c0020e23 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020de5:	52                   	push   edx
c0020de6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020dea:	50                   	push   eax
c0020deb:	53                   	push   ebx
c0020dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020df0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020df4:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020df8:	50                   	push   eax
c0020df9:	e8 d9 fd ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020dfe:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020e06:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020e0b:	81 c3 00 08 00 00    	add    ebx,0x800
c0020e11:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020e19:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020e1e:	83 c4 10             	add    esp,0x10
c0020e21:	eb af                	jmp    c0020dd2 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020e23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e27:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020e2a:	74 32                	je     c0020e5e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020e2c:	50                   	push   eax
c0020e2d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020e31:	50                   	push   eax
c0020e32:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020e36:	50                   	push   eax
c0020e37:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020e3b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020e3f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020e43:	56                   	push   esi
c0020e44:	e8 8e fd ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e49:	83 c4 0c             	add    esp,0xc
c0020e4c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020e50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020e54:	50                   	push   eax
c0020e55:	53                   	push   ebx
c0020e56:	e8 45 f8 fd ff       	call   c00006a0 <memcpy>
c0020e5b:	83 c4 10             	add    esp,0x10
c0020e5e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020e65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e6d:	89 38                	mov    DWORD PTR [eax],edi
c0020e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e73:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020e76:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020e79:	31 c0                	xor    eax,eax
c0020e7b:	eb 05                	jmp    c0020e82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020e7d:	b8 04 00 00 00       	mov    eax,0x4
c0020e82:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020e88:	5b                   	pop    ebx
c0020e89:	5e                   	pop    esi
c0020e8a:	5f                   	pop    edi
c0020e8b:	5d                   	pop    ebp
c0020e8c:	c3                   	ret    
c0020e8d:	90                   	nop

c0020e8e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020e8e:	55                   	push   ebp
c0020e8f:	57                   	push   edi
c0020e90:	56                   	push   esi
c0020e91:	53                   	push   ebx
c0020e92:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020e98:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020e9f:	85 f6                	test   esi,esi
c0020ea1:	0f 84 64 02 00 00    	je     c002110b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020ea7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020eaf:	0f 84 56 02 00 00    	je     c002110b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020eb5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020eb8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020ebb:	75 0a                	jne    c0020ec7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020ebd:	b8 07 00 00 00       	mov    eax,0x7
c0020ec2:	e9 49 02 00 00       	jmp    c0021110 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020ec7:	50                   	push   eax
c0020ec8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020ecc:	50                   	push   eax
c0020ecd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ed4:	53                   	push   ebx
c0020ed5:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ed7:	c1 e0 0b             	shl    eax,0xb
c0020eda:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020edd:	c1 e8 0b             	shr    eax,0xb
c0020ee0:	50                   	push   eax
c0020ee1:	e8 f1 fc ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ee6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ee9:	83 c4 10             	add    esp,0x10
c0020eec:	89 c1                	mov    ecx,eax
c0020eee:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020ef1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020ef7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020efa:	84 db                	test   bl,bl
c0020efc:	0f 85 90 00 00 00    	jne    c0020f92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020f02:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020f08:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020f0e:	29 c7                	sub    edi,eax
c0020f10:	89 fb                	mov    ebx,edi
c0020f12:	c1 fb 1f             	sar    ebx,0x1f
c0020f15:	01 f8                	add    eax,edi
c0020f17:	11 da                	adc    edx,ebx
c0020f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f21:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020f24:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020f27:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020f2a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020f2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f34:	89 d8                	mov    eax,ebx
c0020f36:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020f39:	ba 00 00 00 00       	mov    edx,0x0
c0020f3e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020f42:	b8 00 00 00 00       	mov    eax,0x0
c0020f47:	73 0b                	jae    c0020f54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020f49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020f4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020f50:	29 f8                	sub    eax,edi
c0020f52:	19 da                	sbb    edx,ebx
c0020f54:	89 d3                	mov    ebx,edx
c0020f56:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020f59:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020f5c:	09 c3                	or     ebx,eax
c0020f5e:	0f 84 59 ff ff ff    	je     c0020ebd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020f64:	55                   	push   ebp
c0020f65:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020f69:	50                   	push   eax
c0020f6a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020f71:	53                   	push   ebx
c0020f72:	8b 06                	mov    eax,DWORD PTR [esi]
c0020f74:	c1 e0 0b             	shl    eax,0xb
c0020f77:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020f7b:	c1 e8 0b             	shr    eax,0xb
c0020f7e:	50                   	push   eax
c0020f7f:	e8 53 fc ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f84:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020f87:	83 c4 10             	add    esp,0x10
c0020f8a:	25 ff 07 00 00       	and    eax,0x7ff
c0020f8f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020f92:	57                   	push   edi
c0020f93:	6a 28                	push   0x28
c0020f95:	6a 00                	push   0x0
c0020f97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f9b:	50                   	push   eax
c0020f9c:	e8 23 f7 fd ff       	call   c00006c4 <memset>
c0020fa1:	31 d2                	xor    edx,edx
c0020fa3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020fa6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020fac:	89 f8                	mov    eax,edi
c0020fae:	83 c0 21             	add    eax,0x21
c0020fb1:	83 d2 00             	adc    edx,0x0
c0020fb4:	89 c7                	mov    edi,eax
c0020fb6:	89 d5                	mov    ebp,edx
c0020fb8:	83 c4 10             	add    esp,0x10
c0020fbb:	31 c9                	xor    ecx,ecx
c0020fbd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020fc4:	83 f9 28             	cmp    ecx,0x28
c0020fc7:	88 04 24             	mov    BYTE PTR [esp],al
c0020fca:	0f 94 c2             	sete   dl
c0020fcd:	88 d0                	mov    al,dl
c0020fcf:	ba ff 07 00 00       	mov    edx,0x7ff
c0020fd4:	39 fa                	cmp    edx,edi
c0020fd6:	ba 00 00 00 00       	mov    edx,0x0
c0020fdb:	19 ea                	sbb    edx,ebp
c0020fdd:	0f 92 c2             	setb   dl
c0020fe0:	09 c2                	or     edx,eax
c0020fe2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020fe6:	0f 94 c0             	sete   al
c0020fe9:	08 d0                	or     al,dl
c0020feb:	75 16                	jne    c0021003 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020fed:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020ff1:	74 10                	je     c0021003 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020ff3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020ff6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020ffa:	41                   	inc    ecx
c0020ffb:	83 c7 01             	add    edi,0x1
c0020ffe:	83 d5 00             	adc    ebp,0x0
c0021001:	eb ba                	jmp    c0020fbd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021003:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002100a:	83 ec 0c             	sub    esp,0xc
c002100d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021011:	57                   	push   edi
c0021012:	e8 ca f6 fd ff       	call   c00006e1 <strlen>
c0021017:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002101f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021023:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c002102a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002102d:	5a                   	pop    edx
c002102e:	25 ff 07 00 00       	and    eax,0x7ff
c0021033:	01 c8                	add    eax,ecx
c0021035:	59                   	pop    ecx
c0021036:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002103c:	83 e0 02             	and    eax,0x2
c002103f:	3c 01                	cmp    al,0x1
c0021041:	19 c0                	sbb    eax,eax
c0021043:	83 c0 02             	add    eax,0x2
c0021046:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002104a:	57                   	push   edi
c002104b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002104f:	50                   	push   eax
c0021050:	e8 0e f7 fd ff       	call   c0000763 <strcpy>
c0021055:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021059:	83 c4 10             	add    esp,0x10
c002105c:	84 c0                	test   al,al
c002105e:	75 21                	jne    c0021081 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021060:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021068:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021070:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021078:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002107f:	eb 28                	jmp    c00210a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021081:	fe c8                	dec    al
c0021083:	75 24                	jne    c00210a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021085:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002108d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021095:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002109d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00210a4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00210a9:	0f b6 fb             	movzx  edi,bl
c00210ac:	31 db                	xor    ebx,ebx
c00210ae:	50                   	push   eax
c00210af:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00210b6:	8d 44 24 48          	lea    eax,[esp+0x48]
c00210ba:	50                   	push   eax
c00210bb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00210c2:	e8 d9 f5 fd ff       	call   c00006a0 <memcpy>
c00210c7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00210ce:	89 f9                	mov    ecx,edi
c00210d0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00210d6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00210d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00210dc:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00210df:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00210e2:	83 c4 10             	add    esp,0x10
c00210e5:	39 c7                	cmp    edi,eax
c00210e7:	89 df                	mov    edi,ebx
c00210e9:	19 d7                	sbb    edi,edx
c00210eb:	72 10                	jb     c00210fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00210ed:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00210f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00210fb:	eb 0a                	jmp    c0021107 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00210fd:	29 c8                	sub    eax,ecx
c00210ff:	19 da                	sbb    edx,ebx
c0021101:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021104:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021107:	31 c0                	xor    eax,eax
c0021109:	eb 05                	jmp    c0021110 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002110b:	b8 04 00 00 00       	mov    eax,0x4
c0021110:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021116:	5b                   	pop    ebx
c0021117:	5e                   	pop    esi
c0021118:	5f                   	pop    edi
c0021119:	5d                   	pop    ebp
c002111a:	c3                   	ret    

c002111b <readRoot(unsigned int*, unsigned int*, char)>:
c002111b:	81 ec 40 08 00 00    	sub    esp,0x840
c0021121:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021129:	50                   	push   eax
c002112a:	8d 44 24 38          	lea    eax,[esp+0x38]
c002112e:	50                   	push   eax
c002112f:	6a 10                	push   0x10
c0021131:	e8 a1 fa ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021136:	83 c4 0c             	add    esp,0xc
c0021139:	6a 22                	push   0x22
c002113b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021142:	50                   	push   eax
c0021143:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021147:	50                   	push   eax
c0021148:	e8 53 f5 fd ff       	call   c00006a0 <memcpy>
c002114d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021154:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021158:	89 10                	mov    DWORD PTR [eax],edx
c002115a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021161:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021165:	89 10                	mov    DWORD PTR [eax],edx
c0021167:	b0 01                	mov    al,0x1
c0021169:	81 c4 4c 08 00 00    	add    esp,0x84c
c002116f:	c3                   	ret    

c0021170 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021170:	55                   	push   ebp
c0021171:	57                   	push   edi
c0021172:	56                   	push   esi
c0021173:	53                   	push   ebx
c0021174:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002117a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021181:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002118c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021190:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021194:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021198:	75 03                	jne    c002119d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002119a:	83 c3 02             	add    ebx,0x2
c002119d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00211a0:	75 03                	jne    c00211a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00211a2:	43                   	inc    ebx
c00211a3:	eb f8                	jmp    c002119d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00211a5:	51                   	push   ecx
c00211a6:	68 00 01 00 00       	push   0x100
c00211ab:	6a 00                	push   0x0
c00211ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211b1:	50                   	push   eax
c00211b2:	e8 0d f5 fd ff       	call   c00006c4 <memset>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	31 d2                	xor    edx,edx
c00211bc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00211bf:	84 c0                	test   al,al
c00211c1:	74 21                	je     c00211e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00211c3:	3c 2f                	cmp    al,0x2f
c00211c5:	75 0b                	jne    c00211d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00211c7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00211cb:	bd 01 00 00 00       	mov    ebp,0x1
c00211d0:	eb 14                	jmp    c00211e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00211d2:	8d 48 9f             	lea    ecx,[eax-0x61]
c00211d5:	80 f9 19             	cmp    cl,0x19
c00211d8:	77 03                	ja     c00211dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00211da:	83 e8 20             	sub    eax,0x20
c00211dd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00211e1:	42                   	inc    edx
c00211e2:	eb d8                	jmp    c00211bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00211e4:	31 ed                	xor    ebp,ebp
c00211e6:	83 ec 0c             	sub    esp,0xc
c00211e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00211f0:	e8 2f e4 fe ff       	call   c000f624 <malloc>
c00211f5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00211fc:	89 c6                	mov    esi,eax
c00211fe:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021204:	c1 ef 0b             	shr    edi,0xb
c0021207:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002120e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002121a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002121e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021225:	74 28                	je     c002124f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021227:	52                   	push   edx
c0021228:	57                   	push   edi
c0021229:	50                   	push   eax
c002122a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002122e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021235:	e8 9d f9 ff ff       	call   c0020bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002123a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002123e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021245:	05 00 08 00 00       	add    eax,0x800
c002124a:	83 c4 10             	add    esp,0x10
c002124d:	eb cb                	jmp    c002121a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002124f:	83 ec 0c             	sub    esp,0xc
c0021252:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021256:	57                   	push   edi
c0021257:	e8 85 f4 fd ff       	call   c00006e1 <strlen>
c002125c:	50                   	push   eax
c002125d:	57                   	push   edi
c002125e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021265:	56                   	push   esi
c0021266:	e8 2a f9 ff ff       	call   c0020b95 <__memmem(unsigned char*, int, unsigned char*, int)>
c002126b:	83 c4 20             	add    esp,0x20
c002126e:	85 c0                	test   eax,eax
c0021270:	75 13                	jne    c0021285 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021272:	83 ec 0c             	sub    esp,0xc
c0021275:	56                   	push   esi
c0021276:	e8 b9 e3 fe ff       	call   c000f634 <free>
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	31 c0                	xor    eax,eax
c0021280:	e9 b3 00 00 00       	jmp    c0021338 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021285:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021289:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002128d:	c1 e7 08             	shl    edi,0x8
c0021290:	c1 e2 10             	shl    edx,0x10
c0021293:	09 d7                	or     edi,edx
c0021295:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021299:	09 d7                	or     edi,edx
c002129b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002129f:	c1 e2 18             	shl    edx,0x18
c00212a2:	09 d7                	or     edi,edx
c00212a4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00212a8:	89 d1                	mov    ecx,edx
c00212aa:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00212ae:	c1 e1 08             	shl    ecx,0x8
c00212b1:	c1 e2 10             	shl    edx,0x10
c00212b4:	09 ca                	or     edx,ecx
c00212b6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00212ba:	09 ca                	or     edx,ecx
c00212bc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00212c0:	c1 e1 18             	shl    ecx,0x18
c00212c3:	09 ca                	or     edx,ecx
c00212c5:	89 e9                	mov    ecx,ebp
c00212c7:	84 c9                	test   cl,cl
c00212c9:	74 3c                	je     c0021307 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00212cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212cf:	83 ec 0c             	sub    esp,0xc
c00212d2:	56                   	push   esi
c00212d3:	e8 5c e3 fe ff       	call   c000f634 <free>
c00212d8:	83 c4 0c             	add    esp,0xc
c00212db:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212e2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00212e7:	50                   	push   eax
c00212e8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212ef:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00212fa:	52                   	push   edx
c00212fb:	57                   	push   edi
c00212fc:	53                   	push   ebx
c00212fd:	e8 6e fe ff ff       	call   c0021170 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021302:	83 c4 20             	add    esp,0x20
c0021305:	eb 31                	jmp    c0021338 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021307:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002130a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021311:	d0 e8                	shr    al,1
c0021313:	89 3b                	mov    DWORD PTR [ebx],edi
c0021315:	83 e0 01             	and    eax,0x1
c0021318:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002131f:	83 ec 0c             	sub    esp,0xc
c0021322:	89 13                	mov    DWORD PTR [ebx],edx
c0021324:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002132b:	89 03                	mov    DWORD PTR [ebx],eax
c002132d:	56                   	push   esi
c002132e:	e8 01 e3 fe ff       	call   c000f634 <free>
c0021333:	83 c4 10             	add    esp,0x10
c0021336:	b0 01                	mov    al,0x1
c0021338:	81 c4 1c 01 00 00    	add    esp,0x11c
c002133e:	5b                   	pop    ebx
c002133f:	5e                   	pop    esi
c0021340:	5f                   	pop    edi
c0021341:	5d                   	pop    ebp
c0021342:	c3                   	ret    

c0021343 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021343:	55                   	push   ebp
c0021344:	57                   	push   edi
c0021345:	56                   	push   esi
c0021346:	53                   	push   ebx
c0021347:	83 ec 20             	sub    esp,0x20
c002134a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002134e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021352:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021356:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002135e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021366:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002136b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021371:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021377:	57                   	push   edi
c0021378:	8d 44 24 14          	lea    eax,[esp+0x14]
c002137c:	50                   	push   eax
c002137d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021381:	50                   	push   eax
c0021382:	e8 94 fd ff ff       	call   c002111b <readRoot(unsigned int*, unsigned int*, char)>
c0021387:	5a                   	pop    edx
c0021388:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002138c:	e8 50 f3 fd ff       	call   c00006e1 <strlen>
c0021391:	83 c4 10             	add    esp,0x10
c0021394:	83 f8 03             	cmp    eax,0x3
c0021397:	77 17                	ja     c00213b0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021399:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002139d:	89 03                	mov    DWORD PTR [ebx],eax
c002139f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213a3:	89 06                	mov    DWORD PTR [esi],eax
c00213a5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00213ac:	b0 01                	mov    al,0x1
c00213ae:	eb 19                	jmp    c00213c9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00213b0:	50                   	push   eax
c00213b1:	55                   	push   ebp
c00213b2:	57                   	push   edi
c00213b3:	56                   	push   esi
c00213b4:	53                   	push   ebx
c00213b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00213c1:	e8 aa fd ff ff       	call   c0021170 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00213c6:	83 c4 20             	add    esp,0x20
c00213c9:	83 c4 1c             	add    esp,0x1c
c00213cc:	5b                   	pop    ebx
c00213cd:	5e                   	pop    esi
c00213ce:	5f                   	pop    edi
c00213cf:	5d                   	pop    ebp
c00213d0:	c3                   	ret    
c00213d1:	90                   	nop

c00213d2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00213d2:	57                   	push   edi
c00213d3:	56                   	push   esi
c00213d4:	53                   	push   ebx
c00213d5:	83 ec 10             	sub    esp,0x10
c00213d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00213e0:	85 ff                	test   edi,edi
c00213e2:	0f 84 9d 00 00 00    	je     c0021485 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00213e8:	85 f6                	test   esi,esi
c00213ea:	0f 84 95 00 00 00    	je     c0021485 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00213f0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00213f5:	74 17                	je     c002140e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00213f7:	83 ec 0c             	sub    esp,0xc
c00213fa:	68 57 bb 02 c0       	push   0xc002bb57
c00213ff:	e8 ef 14 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	b8 03 00 00 00       	mov    eax,0x3
c002140c:	eb 7c                	jmp    c002148a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002140e:	83 ec 0c             	sub    esp,0xc
c0021411:	6a 1c                	push   0x1c
c0021413:	e8 0c e2 fe ff       	call   c000f624 <malloc>
c0021418:	89 07                	mov    DWORD PTR [edi],eax
c002141a:	89 c3                	mov    ebx,eax
c002141c:	58                   	pop    eax
c002141d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021421:	50                   	push   eax
c0021422:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021425:	50                   	push   eax
c0021426:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002142a:	50                   	push   eax
c002142b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002142f:	50                   	push   eax
c0021430:	56                   	push   esi
c0021431:	e8 0d ff ff ff       	call   c0021343 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021436:	83 c4 20             	add    esp,0x20
c0021439:	84 c0                	test   al,al
c002143b:	74 07                	je     c0021444 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002143d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021442:	74 0b                	je     c002144f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021444:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021448:	b8 01 00 00 00       	mov    eax,0x1
c002144d:	eb 3b                	jmp    c002148a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002144f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021453:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021457:	89 03                	mov    DWORD PTR [ebx],eax
c0021459:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002146b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021472:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021475:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002147c:	8a 06                	mov    al,BYTE PTR [esi]
c002147e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021481:	31 c0                	xor    eax,eax
c0021483:	eb 05                	jmp    c002148a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021485:	b8 04 00 00 00       	mov    eax,0x4
c002148a:	83 c4 10             	add    esp,0x10
c002148d:	5b                   	pop    ebx
c002148e:	5e                   	pop    esi
c002148f:	5f                   	pop    edi
c0021490:	c3                   	ret    
c0021491:	90                   	nop

c0021492 <ISO9660::exists(char const*)>:
c0021492:	83 ec 28             	sub    esp,0x28
c0021495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021499:	8d 54 24 18          	lea    edx,[esp+0x18]
c002149d:	52                   	push   edx
c002149e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00214a1:	52                   	push   edx
c00214a2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00214a6:	52                   	push   edx
c00214a7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00214ab:	52                   	push   edx
c00214ac:	50                   	push   eax
c00214ad:	e8 91 fe ff ff       	call   c0021343 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00214b2:	83 c4 3c             	add    esp,0x3c
c00214b5:	c3                   	ret    

c00214b6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00214b6:	56                   	push   esi
c00214b7:	53                   	push   ebx
c00214b8:	83 ec 14             	sub    esp,0x14
c00214bb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00214bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00214c3:	85 db                	test   ebx,ebx
c00214c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00214c9:	0f 94 c2             	sete   dl
c00214cc:	85 f6                	test   esi,esi
c00214ce:	0f 94 c0             	sete   al
c00214d1:	08 c2                	or     dl,al
c00214d3:	75 68                	jne    c002153d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00214d5:	85 c9                	test   ecx,ecx
c00214d7:	74 64                	je     c002153d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00214d9:	83 ec 0c             	sub    esp,0xc
c00214dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00214df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00214e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00214f0:	50                   	push   eax
c00214f1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00214f4:	50                   	push   eax
c00214f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214f9:	50                   	push   eax
c00214fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214fe:	50                   	push   eax
c00214ff:	51                   	push   ecx
c0021500:	e8 3e fe ff ff       	call   c0021343 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021505:	83 c4 20             	add    esp,0x20
c0021508:	ba 01 00 00 00       	mov    edx,0x1
c002150d:	84 c0                	test   al,al
c002150f:	74 31                	je     c0021542 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021511:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021515:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002151c:	89 03                	mov    DWORD PTR [ebx],eax
c002151e:	ba 00 00 00 00       	mov    edx,0x0
c0021523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021527:	85 c0                	test   eax,eax
c0021529:	0f 95 06             	setne  BYTE PTR [esi]
c002152c:	74 14                	je     c0021542 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002152e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021534:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002153b:	eb 05                	jmp    c0021542 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002153d:	ba 04 00 00 00       	mov    edx,0x4
c0021542:	83 c4 14             	add    esp,0x14
c0021545:	89 d0                	mov    eax,edx
c0021547:	5b                   	pop    ebx
c0021548:	5e                   	pop    esi
c0021549:	c3                   	ret    

c002154a <ISO9660::openDir(char const*, void**)>:
c002154a:	57                   	push   edi
c002154b:	56                   	push   esi
c002154c:	53                   	push   ebx
c002154d:	83 ec 10             	sub    esp,0x10
c0021550:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021554:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021558:	85 ff                	test   edi,edi
c002155a:	0f 84 95 00 00 00    	je     c00215f5 <ISO9660::openDir(char const*, void**)+0xab>
c0021560:	85 f6                	test   esi,esi
c0021562:	0f 84 8d 00 00 00    	je     c00215f5 <ISO9660::openDir(char const*, void**)+0xab>
c0021568:	83 ec 0c             	sub    esp,0xc
c002156b:	6a 1c                	push   0x1c
c002156d:	e8 b2 e0 fe ff       	call   c000f624 <malloc>
c0021572:	89 07                	mov    DWORD PTR [edi],eax
c0021574:	89 c3                	mov    ebx,eax
c0021576:	59                   	pop    ecx
c0021577:	8d 44 24 18          	lea    eax,[esp+0x18]
c002157b:	50                   	push   eax
c002157c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002157f:	50                   	push   eax
c0021580:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021584:	50                   	push   eax
c0021585:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021589:	50                   	push   eax
c002158a:	56                   	push   esi
c002158b:	e8 b3 fd ff ff       	call   c0021343 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021590:	83 c4 20             	add    esp,0x20
c0021593:	84 c0                	test   al,al
c0021595:	74 07                	je     c002159e <ISO9660::openDir(char const*, void**)+0x54>
c0021597:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002159c:	75 21                	jne    c00215bf <ISO9660::openDir(char const*, void**)+0x75>
c002159e:	0f b6 c0             	movzx  eax,al
c00215a1:	52                   	push   edx
c00215a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00215a6:	50                   	push   eax
c00215a7:	68 7d bb 02 c0       	push   0xc002bb7d
c00215ac:	e8 42 13 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00215b1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00215b5:	83 c4 10             	add    esp,0x10
c00215b8:	b8 01 00 00 00       	mov    eax,0x1
c00215bd:	eb 3b                	jmp    c00215fa <ISO9660::openDir(char const*, void**)+0xb0>
c00215bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215c3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00215c7:	89 03                	mov    DWORD PTR [ebx],eax
c00215c9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00215d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00215db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00215e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00215e5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00215ec:	8a 06                	mov    al,BYTE PTR [esi]
c00215ee:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00215f1:	31 c0                	xor    eax,eax
c00215f3:	eb 05                	jmp    c00215fa <ISO9660::openDir(char const*, void**)+0xb0>
c00215f5:	b8 04 00 00 00       	mov    eax,0x4
c00215fa:	83 c4 10             	add    esp,0x10
c00215fd:	5b                   	pop    ebx
c00215fe:	5e                   	pop    esi
c00215ff:	5f                   	pop    edi
c0021600:	c3                   	ret    
c0021601:	90                   	nop

c0021602 <ISO9660::ISO9660()>:
c0021602:	83 ec 0c             	sub    esp,0xc
c0021605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021609:	83 ec 0c             	sub    esp,0xc
c002160c:	50                   	push   eax
c002160d:	e8 e6 15 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c0021612:	83 c4 10             	add    esp,0x10
c0021615:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c002161a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161e:	89 10                	mov    DWORD PTR [eax],edx
c0021620:	90                   	nop
c0021621:	83 c4 0c             	add    esp,0xc
c0021624:	c3                   	ret    
c0021625:	90                   	nop

c0021626 <SoundChannel::~SoundChannel()>:
c0021626:	83 ec 0c             	sub    esp,0xc
c0021629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021630:	83 ec 0c             	sub    esp,0xc
c0021633:	50                   	push   eax
c0021634:	e8 fb df fe ff       	call   c000f634 <free>
c0021639:	83 c4 10             	add    esp,0x10
c002163c:	90                   	nop
c002163d:	83 c4 0c             	add    esp,0xc
c0021640:	c3                   	ret    
c0021641:	90                   	nop

c0021642 <SoundChannel::setSpeed(float)>:
c0021642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002164a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002164d:	c3                   	ret    

c002164e <SoundChannel::getSpeed()>:
c002164e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021652:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021655:	c3                   	ret    

c0021656 <SoundChannel::setVolume(int)>:
c0021656:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002165a:	83 f8 64             	cmp    eax,0x64
c002165d:	7e 05                	jle    c0021664 <SoundChannel::setVolume(int)+0xe>
c002165f:	b8 64 00 00 00       	mov    eax,0x64
c0021664:	85 c0                	test   eax,eax
c0021666:	79 02                	jns    c002166a <SoundChannel::setVolume(int)+0x14>
c0021668:	31 c0                	xor    eax,eax
c002166a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002166e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021671:	c3                   	ret    

c0021672 <SoundChannel::getVolume()>:
c0021672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021676:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021679:	c3                   	ret    

c002167a <SoundChannel::pause()>:
c002167a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002167e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021682:	c3                   	ret    
c0021683:	90                   	nop

c0021684 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021684:	83 ec 1c             	sub    esp,0x1c
c0021687:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002168b:	e8 ea ff ff ff       	call   c002167a <SoundChannel::pause()>
c0021690:	83 c4 04             	add    esp,0x4
c0021693:	6a 50                	push   0x50
c0021695:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021699:	e8 b8 ff ff ff       	call   c0021656 <SoundChannel::setVolume(int)>
c002169e:	83 c4 08             	add    esp,0x8
c00216a1:	a1 18 bc 02 c0       	mov    eax,ds:0xc002bc18
c00216a6:	50                   	push   eax
c00216a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00216ab:	e8 92 ff ff ff       	call   c0021642 <SoundChannel::setSpeed(float)>
c00216b0:	83 c4 08             	add    esp,0x8
c00216b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00216bb:	89 10                	mov    DWORD PTR [eax],edx
c00216bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00216d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216d3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00216d8:	75 23                	jne    c00216fd <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00216da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216de:	8b 10                	mov    edx,DWORD PTR [eax]
c00216e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216e7:	0f af c2             	imul   eax,edx
c00216ea:	85 c0                	test   eax,eax
c00216ec:	79 03                	jns    c00216f1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00216ee:	83 c0 03             	add    eax,0x3
c00216f1:	c1 f8 02             	sar    eax,0x2
c00216f4:	05 a0 0f 00 00       	add    eax,0xfa0
c00216f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00216fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021701:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021705:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002170c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021717:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002171e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021722:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021725:	c1 e0 02             	shl    eax,0x2
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	50                   	push   eax
c002172c:	e8 f3 de fe ff       	call   c000f624 <malloc>
c0021731:	83 c4 10             	add    esp,0x10
c0021734:	89 c2                	mov    edx,eax
c0021736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002173a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002173d:	83 ec 04             	sub    esp,0x4
c0021740:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021744:	50                   	push   eax
c0021745:	6a 01                	push   0x1
c0021747:	6a 04                	push   0x4
c0021749:	e8 3a 72 fe ff       	call   c0008988 <src_new>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	89 c2                	mov    edx,eax
c0021753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021757:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002175e:	85 c0                	test   eax,eax
c0021760:	74 10                	je     c0021772 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021762:	83 ec 0c             	sub    esp,0xc
c0021765:	68 fc bb 02 c0       	push   0xc002bbfc
c002176a:	e8 b6 84 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c002176f:	83 c4 10             	add    esp,0x10
c0021772:	a0 e0 f9 02 c0       	mov    al,ds:0xc002f9e0
c0021777:	83 f0 01             	xor    eax,0x1
c002177a:	84 c0                	test   al,al
c002177c:	74 57                	je     c00217d5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002177e:	a1 1c bc 02 c0       	mov    eax,ds:0xc002bc1c
c0021783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021787:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002178f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021797:	7f 35                	jg     c00217ce <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021799:	83 ec 0c             	sub    esp,0xc
c002179c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217a0:	e8 e2 4f 00 00       	call   c0026787 <__floatsisf>
c00217a5:	83 c4 10             	add    esp,0x10
c00217a8:	8b 15 1c bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc1c
c00217ae:	83 ec 08             	sub    esp,0x8
c00217b1:	52                   	push   edx
c00217b2:	50                   	push   eax
c00217b3:	e8 e1 4b 00 00       	call   c0026399 <__mulsf3>
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	89 c2                	mov    edx,eax
c00217bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217c1:	89 14 85 e0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a20],edx
c00217c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00217cc:	eb c1                	jmp    c002178f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00217ce:	c6 05 e0 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9e0,0x1
c00217d5:	90                   	nop
c00217d6:	83 c4 1c             	add    esp,0x1c
c00217d9:	c3                   	ret    

c00217da <SoundChannel::play()>:
c00217da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217de:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00217e2:	c3                   	ret    
c00217e3:	90                   	nop

c00217e4 <SoundChannel::paused()>:
c00217e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00217eb:	c3                   	ret    

c00217ec <SoundChannel::getSampleRate()>:
c00217ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217f2:	c3                   	ret    
c00217f3:	90                   	nop

c00217f4 <SoundChannel::getBits()>:
c00217f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217fb:	c3                   	ret    

c00217fc <SoundChannel::getBufferUsed()>:
c00217fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021800:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021803:	c3                   	ret    

c0021804 <SoundChannel::getBufferSize()>:
c0021804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021808:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002180b:	c3                   	ret    

c002180c <SoundChannel::unbuffer(float*, int, int)>:
c002180c:	56                   	push   esi
c002180d:	53                   	push   ebx
c002180e:	83 ec 40             	sub    esp,0x40
c0021811:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021815:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002181c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002181f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021823:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021827:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002182b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002182f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021833:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021837:	e8 4b 4f 00 00       	call   c0026787 <__floatsisf>
c002183c:	5a                   	pop    edx
c002183d:	89 c6                	mov    esi,eax
c002183f:	ff 33                	push   DWORD PTR [ebx]
c0021841:	e8 41 4f 00 00       	call   c0026787 <__floatsisf>
c0021846:	59                   	pop    ecx
c0021847:	5a                   	pop    edx
c0021848:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002184b:	50                   	push   eax
c002184c:	e8 48 4b 00 00       	call   c0026399 <__mulsf3>
c0021851:	59                   	pop    ecx
c0021852:	5a                   	pop    edx
c0021853:	50                   	push   eax
c0021854:	56                   	push   esi
c0021855:	e8 02 4d 00 00       	call   c002655c <__divsf3>
c002185a:	89 04 24             	mov    DWORD PTR [esp],eax
c002185d:	e8 f5 61 00 00       	call   c0027a57 <__extendsfdf2>
c0021862:	59                   	pop    ecx
c0021863:	5e                   	pop    esi
c0021864:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021868:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002186c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021874:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021878:	50                   	push   eax
c0021879:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002187c:	e8 fc 6c fe ff       	call   c000857d <src_process>
c0021881:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021885:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021888:	83 c4 0c             	add    esp,0xc
c002188b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002188e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021891:	29 d0                	sub    eax,edx
c0021893:	c1 e0 02             	shl    eax,0x2
c0021896:	50                   	push   eax
c0021897:	8d 04 91             	lea    eax,[ecx+edx*4]
c002189a:	50                   	push   eax
c002189b:	51                   	push   ecx
c002189c:	e8 c7 ed fd ff       	call   c0000668 <memmove>
c00218a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00218a5:	83 c4 44             	add    esp,0x44
c00218a8:	5b                   	pop    ebx
c00218a9:	5e                   	pop    esi
c00218aa:	c3                   	ret    
c00218ab:	90                   	nop

c00218ac <SoundChannel::buffer8(unsigned char*, int)>:
c00218ac:	55                   	push   ebp
c00218ad:	57                   	push   edi
c00218ae:	56                   	push   esi
c00218af:	53                   	push   ebx
c00218b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00218b8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00218bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218bf:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00218c2:	74 7a                	je     c002193e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00218c4:	85 ff                	test   edi,edi
c00218c6:	7e 76                	jle    c002193e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00218c8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00218cc:	8d 70 01             	lea    esi,[eax+0x1]
c00218cf:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00218d2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00218d5:	8b 1c 9d e0 f5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0a20]
c00218dc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00218df:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00218e2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00218e5:	74 5e                	je     c0021945 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00218e7:	83 ff 01             	cmp    edi,0x1
c00218ea:	74 4b                	je     c0021937 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00218ec:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00218f0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00218f3:	8d 70 01             	lea    esi,[eax+0x1]
c00218f6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00218f9:	8b 1c 9d e0 f5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0a20]
c0021900:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021903:	b8 02 00 00 00       	mov    eax,0x2
c0021908:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002190b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002190e:	75 23                	jne    c0021933 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021910:	eb 27                	jmp    c0021939 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021912:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021917:	8d 71 01             	lea    esi,[ecx+0x1]
c002191a:	40                   	inc    eax
c002191b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002191e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021921:	8b 1c 9d e0 f5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0a20]
c0021928:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002192b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002192e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021931:	74 06                	je     c0021939 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021933:	39 c7                	cmp    edi,eax
c0021935:	75 db                	jne    c0021912 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021937:	89 f8                	mov    eax,edi
c0021939:	5b                   	pop    ebx
c002193a:	5e                   	pop    esi
c002193b:	5f                   	pop    edi
c002193c:	5d                   	pop    ebp
c002193d:	c3                   	ret    
c002193e:	5b                   	pop    ebx
c002193f:	31 c0                	xor    eax,eax
c0021941:	5e                   	pop    esi
c0021942:	5f                   	pop    edi
c0021943:	5d                   	pop    ebp
c0021944:	c3                   	ret    
c0021945:	b8 01 00 00 00       	mov    eax,0x1
c002194a:	eb ed                	jmp    c0021939 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002194c <SoundDevice::SoundDevice(char const*)>:
c002194c:	83 ec 1c             	sub    esp,0x1c
c002194f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021953:	83 ec 08             	sub    esp,0x8
c0021956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002195a:	50                   	push   eax
c002195b:	e8 aa 25 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0021960:	83 c4 10             	add    esp,0x10
c0021963:	ba 28 bc 02 c0       	mov    edx,0xc002bc28
c0021968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002196c:	89 10                	mov    DWORD PTR [eax],edx
c002196e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021972:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002197c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021980:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002198a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021992:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021997:	7f 19                	jg     c00219b2 <SoundDevice::SoundDevice(char const*)+0x66>
c0021999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002199d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219a1:	83 c2 54             	add    edx,0x54
c00219a4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00219ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00219b0:	eb e0                	jmp    c0021992 <SoundDevice::SoundDevice(char const*)+0x46>
c00219b2:	90                   	nop
c00219b3:	83 c4 1c             	add    esp,0x1c
c00219b6:	c3                   	ret    
c00219b7:	90                   	nop

c00219b8 <SoundDevice::~SoundDevice()>:
c00219b8:	53                   	push   ebx
c00219b9:	83 ec 18             	sub    esp,0x18
c00219bc:	ba 28 bc 02 c0       	mov    edx,0xc002bc28
c00219c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c5:	89 10                	mov    DWORD PTR [eax],edx
c00219c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00219cf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00219d4:	7f 46                	jg     c0021a1c <SoundDevice::~SoundDevice()+0x64>
c00219d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219de:	83 c2 54             	add    edx,0x54
c00219e1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00219e5:	85 c0                	test   eax,eax
c00219e7:	74 2d                	je     c0021a16 <SoundDevice::~SoundDevice()+0x5e>
c00219e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219f1:	83 c2 54             	add    edx,0x54
c00219f4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00219f8:	85 db                	test   ebx,ebx
c00219fa:	74 1a                	je     c0021a16 <SoundDevice::~SoundDevice()+0x5e>
c00219fc:	83 ec 0c             	sub    esp,0xc
c00219ff:	53                   	push   ebx
c0021a00:	e8 21 fc ff ff       	call   c0021626 <SoundChannel::~SoundChannel()>
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	83 ec 08             	sub    esp,0x8
c0021a0b:	6a 2c                	push   0x2c
c0021a0d:	53                   	push   ebx
c0021a0e:	e8 00 0e ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021a13:	83 c4 10             	add    esp,0x10
c0021a16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a1a:	eb b3                	jmp    c00219cf <SoundDevice::~SoundDevice()+0x17>
c0021a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	50                   	push   eax
c0021a24:	e8 c3 21 ff ff       	call   c0013bec <Device::~Device()>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	90                   	nop
c0021a2d:	83 c4 18             	add    esp,0x18
c0021a30:	5b                   	pop    ebx
c0021a31:	c3                   	ret    

c0021a32 <SoundDevice::~SoundDevice()>:
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	83 ec 0c             	sub    esp,0xc
c0021a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a3c:	e8 77 ff ff ff       	call   c00219b8 <SoundDevice::~SoundDevice()>
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	83 ec 08             	sub    esp,0x8
c0021a47:	68 e4 01 00 00       	push   0x1e4
c0021a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a50:	e8 be 0d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021a55:	83 c4 10             	add    esp,0x10
c0021a58:	83 c4 0c             	add    esp,0xc
c0021a5b:	c3                   	ret    

c0021a5c <SoundDevice::getFreeChannelNum()>:
c0021a5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a60:	31 c0                	xor    eax,eax
c0021a62:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021a6a:	74 09                	je     c0021a75 <SoundDevice::getFreeChannelNum()+0x19>
c0021a6c:	40                   	inc    eax
c0021a6d:	83 f8 20             	cmp    eax,0x20
c0021a70:	75 f0                	jne    c0021a62 <SoundDevice::getFreeChannelNum()+0x6>
c0021a72:	83 c8 ff             	or     eax,0xffffffff
c0021a75:	c3                   	ret    

c0021a76 <SoundDevice::addChannel(SoundChannel*)>:
c0021a76:	56                   	push   esi
c0021a77:	53                   	push   ebx
c0021a78:	51                   	push   ecx
c0021a79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021a81:	53                   	push   ebx
c0021a82:	e8 d5 ff ff ff       	call   c0021a5c <SoundDevice::getFreeChannelNum()>
c0021a87:	5a                   	pop    edx
c0021a88:	83 f8 ff             	cmp    eax,0xffffffff
c0021a8b:	74 51                	je     c0021ade <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021a8d:	85 f6                	test   esi,esi
c0021a8f:	74 4d                	je     c0021ade <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021a91:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021a98:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021a9f:	75 30                	jne    c0021ad1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021aa1:	83 ec 0c             	sub    esp,0xc
c0021aa4:	56                   	push   esi
c0021aa5:	e8 42 fd ff ff       	call   c00217ec <SoundChannel::getSampleRate()>
c0021aaa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021ab0:	89 34 24             	mov    DWORD PTR [esp],esi
c0021ab3:	e8 3c fd ff ff       	call   c00217f4 <SoundChannel::getBits()>
c0021ab8:	83 c4 0c             	add    esp,0xc
c0021abb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021ac1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021ac3:	50                   	push   eax
c0021ac4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021aca:	53                   	push   ebx
c0021acb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021ace:	83 c4 10             	add    esp,0x10
c0021ad1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021ad7:	b8 01 00 00 00       	mov    eax,0x1
c0021adc:	eb 03                	jmp    c0021ae1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021ade:	83 c8 ff             	or     eax,0xffffffff
c0021ae1:	5a                   	pop    edx
c0021ae2:	5b                   	pop    ebx
c0021ae3:	5e                   	pop    esi
c0021ae4:	c3                   	ret    
c0021ae5:	90                   	nop

c0021ae6 <SoundDevice::removeChannel(int)>:
c0021ae6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aee:	83 fa 1f             	cmp    edx,0x1f
c0021af1:	77 23                	ja     c0021b16 <SoundDevice::removeChannel(int)+0x30>
c0021af3:	8d 14 90             	lea    edx,[eax+edx*4]
c0021af6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021afd:	74 17                	je     c0021b16 <SoundDevice::removeChannel(int)+0x30>
c0021aff:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021b09:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021b0f:	75 05                	jne    c0021b16 <SoundDevice::removeChannel(int)+0x30>
c0021b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b13:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021b16:	c3                   	ret    
c0021b17:	90                   	nop

c0021b18 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021b18:	57                   	push   edi
c0021b19:	56                   	push   esi
c0021b1a:	53                   	push   ebx
c0021b1b:	31 db                	xor    ebx,ebx
c0021b1d:	83 ec 10             	sub    esp,0x10
c0021b20:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021b24:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021b28:	0f 8d cb 00 00 00    	jge    c0021bf9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021b2e:	83 ec 0c             	sub    esp,0xc
c0021b31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021b38:	e8 1a 5f 00 00       	call   c0027a57 <__extendsfdf2>
c0021b3d:	83 c4 10             	add    esp,0x10
c0021b40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b48:	68 00 00 f0 3f       	push   0x3ff00000
c0021b4d:	6a 00                	push   0x0
c0021b4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b57:	e8 87 4e 00 00       	call   c00269e3 <__adddf3>
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b67:	68 00 00 e0 3f       	push   0x3fe00000
c0021b6c:	6a 00                	push   0x0
c0021b6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b76:	e8 e5 54 00 00       	call   c0027060 <__muldf3>
c0021b7b:	83 c4 10             	add    esp,0x10
c0021b7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b86:	68 00 00 60 40       	push   0x40600000
c0021b8b:	6a 00                	push   0x0
c0021b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b95:	e8 c6 54 00 00       	call   c0027060 <__muldf3>
c0021b9a:	59                   	pop    ecx
c0021b9b:	5f                   	pop    edi
c0021b9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ba0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021ba4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ba8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bac:	e8 82 5d 00 00       	call   c0027933 <__truncdfsf2>
c0021bb1:	5a                   	pop    edx
c0021bb2:	89 c7                	mov    edi,eax
c0021bb4:	59                   	pop    ecx
c0021bb5:	68 00 00 fe 42       	push   0x42fe0000
c0021bba:	50                   	push   eax
c0021bbb:	e8 1d 4e 00 00       	call   c00269dd <__gesf2>
c0021bc0:	83 c4 10             	add    esp,0x10
c0021bc3:	85 c0                	test   eax,eax
c0021bc5:	78 06                	js     c0021bcd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021bc7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021bcb:	eb 26                	jmp    c0021bf3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021bcd:	50                   	push   eax
c0021bce:	50                   	push   eax
c0021bcf:	6a 00                	push   0x0
c0021bd1:	57                   	push   edi
c0021bd2:	e8 0a 4e 00 00       	call   c00269e1 <__lesf2>
c0021bd7:	83 c4 10             	add    esp,0x10
c0021bda:	85 c0                	test   eax,eax
c0021bdc:	7f 06                	jg     c0021be4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021bde:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021be2:	eb 0f                	jmp    c0021bf3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021be4:	83 ec 0c             	sub    esp,0xc
c0021be7:	57                   	push   edi
c0021be8:	e8 ff 5e 00 00       	call   c0027aec <lrintf>
c0021bed:	83 c4 10             	add    esp,0x10
c0021bf0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021bf3:	43                   	inc    ebx
c0021bf4:	e9 2b ff ff ff       	jmp    c0021b24 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021bf9:	83 c4 10             	add    esp,0x10
c0021bfc:	5b                   	pop    ebx
c0021bfd:	5e                   	pop    esi
c0021bfe:	5f                   	pop    edi
c0021bff:	c3                   	ret    

c0021c00 <SoundDevice::getAudio(int, float*, float*)>:
c0021c00:	55                   	push   ebp
c0021c01:	57                   	push   edi
c0021c02:	56                   	push   esi
c0021c03:	53                   	push   ebx
c0021c04:	31 db                	xor    ebx,ebx
c0021c06:	83 ec 20             	sub    esp,0x20
c0021c09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021c0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021c11:	c1 e0 02             	shl    eax,0x2
c0021c14:	50                   	push   eax
c0021c15:	6a 00                	push   0x0
c0021c17:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021c1b:	e8 a4 ea fd ff       	call   c00006c4 <memset>
c0021c20:	83 c4 10             	add    esp,0x10
c0021c23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021c27:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021c2e:	85 c0                	test   eax,eax
c0021c30:	0f 84 d7 00 00 00    	je     c0021d0d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	50                   	push   eax
c0021c3a:	e8 a5 fb ff ff       	call   c00217e4 <SoundChannel::paused()>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	84 c0                	test   al,al
c0021c44:	0f 85 c3 00 00 00    	jne    c0021d0d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c4a:	83 ec 0c             	sub    esp,0xc
c0021c4d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021c54:	e8 19 fa ff ff       	call   c0021672 <SoundChannel::getVolume()>
c0021c59:	83 c4 10             	add    esp,0x10
c0021c5c:	85 c0                	test   eax,eax
c0021c5e:	0f 84 a9 00 00 00    	je     c0021d0d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c64:	83 ec 0c             	sub    esp,0xc
c0021c67:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021c6e:	e8 ff f9 ff ff       	call   c0021672 <SoundChannel::getVolume()>
c0021c73:	83 ec 0c             	sub    esp,0xc
c0021c76:	50                   	push   eax
c0021c77:	e8 0b 4b 00 00       	call   c0026787 <__floatsisf>
c0021c7c:	59                   	pop    ecx
c0021c7d:	5d                   	pop    ebp
c0021c7e:	31 ed                	xor    ebp,ebp
c0021c80:	68 00 00 c8 42       	push   0x42c80000
c0021c85:	50                   	push   eax
c0021c86:	e8 d1 48 00 00       	call   c002655c <__divsf3>
c0021c8b:	83 c4 10             	add    esp,0x10
c0021c8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021c92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021c96:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021c9c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021ca0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ca7:	e8 60 fb ff ff       	call   c002180c <SoundChannel::unbuffer(float*, int, int)>
c0021cac:	83 c4 20             	add    esp,0x20
c0021caf:	89 c1                	mov    ecx,eax
c0021cb1:	39 cd                	cmp    ebp,ecx
c0021cb3:	7d 52                	jge    c0021d07 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021cb5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021cb9:	50                   	push   eax
c0021cba:	50                   	push   eax
c0021cbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021cbf:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021cc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021cc6:	e8 ce 46 00 00       	call   c0026399 <__mulsf3>
c0021ccb:	5a                   	pop    edx
c0021ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021cd0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021cd6:	e8 ac 4a 00 00       	call   c0026787 <__floatsisf>
c0021cdb:	59                   	pop    ecx
c0021cdc:	5a                   	pop    edx
c0021cdd:	50                   	push   eax
c0021cde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ce2:	e8 75 48 00 00       	call   c002655c <__divsf3>
c0021ce7:	59                   	pop    ecx
c0021ce8:	5a                   	pop    edx
c0021ce9:	50                   	push   eax
c0021cea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021cee:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021cf1:	e8 80 43 00 00       	call   c0026076 <__addsf3>
c0021cf6:	83 c4 10             	add    esp,0x10
c0021cf9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021cfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021d01:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021d04:	45                   	inc    ebp
c0021d05:	eb aa                	jmp    c0021cb1 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021d07:	39 cf                	cmp    edi,ecx
c0021d09:	7e 02                	jle    c0021d0d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021d0b:	89 cf                	mov    edi,ecx
c0021d0d:	43                   	inc    ebx
c0021d0e:	83 fb 20             	cmp    ebx,0x20
c0021d11:	0f 85 10 ff ff ff    	jne    c0021c27 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021d17:	83 c4 1c             	add    esp,0x1c
c0021d1a:	89 f8                	mov    eax,edi
c0021d1c:	5b                   	pop    ebx
c0021d1d:	5e                   	pop    esi
c0021d1e:	5f                   	pop    edi
c0021d1f:	5d                   	pop    ebp
c0021d20:	c3                   	ret    
c0021d21:	90                   	nop

c0021d22 <PCI::open(int, int, void*)>:
c0021d22:	83 ec 18             	sub    esp,0x18
c0021d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d29:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d2b:	50                   	push   eax
c0021d2c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021d2f:	31 c0                	xor    eax,eax
c0021d31:	83 c4 1c             	add    esp,0x1c
c0021d34:	c3                   	ret    
c0021d35:	90                   	nop

c0021d36 <PCI::close(int, int, void*)>:
c0021d36:	31 c0                	xor    eax,eax
c0021d38:	c3                   	ret    
c0021d39:	90                   	nop

c0021d3a <PCI::PCI()>:
c0021d3a:	83 ec 0c             	sub    esp,0xc
c0021d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d41:	83 ec 08             	sub    esp,0x8
c0021d44:	68 58 bc 02 c0       	push   0xc002bc58
c0021d49:	50                   	push   eax
c0021d4a:	e8 3f 18 ff ff       	call   c001358e <Bus::Bus(char const*)>
c0021d4f:	83 c4 10             	add    esp,0x10
c0021d52:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0021d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5b:	89 10                	mov    DWORD PTR [eax],edx
c0021d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d67:	0f b6 d0             	movzx  edx,al
c0021d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d7f:	0f b6 d0             	movzx  edx,al
c0021d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d86:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d95:	8d 50 01             	lea    edx,[eax+0x1]
c0021d98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d9c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021da2:	0f b6 d0             	movzx  edx,al
c0021da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021dad:	83 c9 c0             	or     ecx,0xffffffc0
c0021db0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021db4:	90                   	nop
c0021db5:	83 c4 0c             	add    esp,0xc
c0021db8:	c3                   	ret    
c0021db9:	90                   	nop

c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021dba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021dbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dc3:	89 ca                	mov    edx,ecx
c0021dc5:	c1 e0 10             	shl    eax,0x10
c0021dc8:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021dce:	09 d0                	or     eax,edx
c0021dd0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021dd5:	c1 e2 08             	shl    edx,0x8
c0021dd8:	09 d0                	or     eax,edx
c0021dda:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021ddf:	c1 e2 0b             	shl    edx,0xb
c0021de2:	09 d0                	or     eax,edx
c0021de4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021de9:	0d 00 00 00 80       	or     eax,0x80000000
c0021dee:	ef                   	out    dx,eax
c0021def:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021df4:	ed                   	in     eax,dx
c0021df5:	83 e1 02             	and    ecx,0x2
c0021df8:	0f b6 c9             	movzx  ecx,cl
c0021dfb:	c1 e1 03             	shl    ecx,0x3
c0021dfe:	d3 e8                	shr    eax,cl
c0021e00:	c3                   	ret    
c0021e01:	90                   	nop

c0021e02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021e02:	6a 00                	push   0x0
c0021e04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e09:	50                   	push   eax
c0021e0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e0f:	50                   	push   eax
c0021e10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e15:	50                   	push   eax
c0021e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e1a:	e8 9b ff ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e1f:	83 c4 14             	add    esp,0x14
c0021e22:	c3                   	ret    
c0021e23:	90                   	nop

c0021e24 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021e24:	6a 0e                	push   0xe
c0021e26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e2b:	50                   	push   eax
c0021e2c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e31:	50                   	push   eax
c0021e32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e37:	50                   	push   eax
c0021e38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e3c:	e8 79 ff ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e41:	83 c4 14             	add    esp,0x14
c0021e44:	0f b6 c0             	movzx  eax,al
c0021e47:	c3                   	ret    

c0021e48 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021e48:	55                   	push   ebp
c0021e49:	57                   	push   edi
c0021e4a:	56                   	push   esi
c0021e4b:	53                   	push   ebx
c0021e4c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021e51:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021e56:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021e5b:	6a 0a                	push   0xa
c0021e5d:	56                   	push   esi
c0021e5e:	55                   	push   ebp
c0021e5f:	57                   	push   edi
c0021e60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021e64:	e8 51 ff ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e69:	6a 0a                	push   0xa
c0021e6b:	89 c3                	mov    ebx,eax
c0021e6d:	56                   	push   esi
c0021e6e:	0f b6 db             	movzx  ebx,bl
c0021e71:	55                   	push   ebp
c0021e72:	57                   	push   edi
c0021e73:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021e77:	e8 3e ff ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e7c:	83 c4 28             	add    esp,0x28
c0021e7f:	25 00 ff 00 00       	and    eax,0xff00
c0021e84:	09 d8                	or     eax,ebx
c0021e86:	5b                   	pop    ebx
c0021e87:	5e                   	pop    esi
c0021e88:	5f                   	pop    edi
c0021e89:	5d                   	pop    ebp
c0021e8a:	c3                   	ret    
c0021e8b:	90                   	nop

c0021e8c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021e8c:	6a 08                	push   0x8
c0021e8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e93:	50                   	push   eax
c0021e94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e99:	50                   	push   eax
c0021e9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e9f:	50                   	push   eax
c0021ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ea4:	e8 11 ff ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ea9:	83 c4 14             	add    esp,0x14
c0021eac:	0f b6 c4             	movzx  eax,ah
c0021eaf:	c3                   	ret    

c0021eb0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021eb0:	6a 08                	push   0x8
c0021eb2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eb7:	50                   	push   eax
c0021eb8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ebd:	50                   	push   eax
c0021ebe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ec3:	50                   	push   eax
c0021ec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ec8:	e8 ed fe ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ecd:	83 c4 14             	add    esp,0x14
c0021ed0:	c3                   	ret    
c0021ed1:	90                   	nop

c0021ed2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021ed2:	6a 3c                	push   0x3c
c0021ed4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ed9:	50                   	push   eax
c0021eda:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021edf:	50                   	push   eax
c0021ee0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ee5:	50                   	push   eax
c0021ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021eea:	e8 cb fe ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021eef:	83 c4 14             	add    esp,0x14
c0021ef2:	c3                   	ret    
c0021ef3:	90                   	nop

c0021ef4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021ef4:	6a 18                	push   0x18
c0021ef6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021efb:	50                   	push   eax
c0021efc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f01:	50                   	push   eax
c0021f02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f07:	50                   	push   eax
c0021f08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f0c:	e8 a9 fe ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f11:	83 c4 14             	add    esp,0x14
c0021f14:	0f b6 c4             	movzx  eax,ah
c0021f17:	c3                   	ret    

c0021f18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021f18:	55                   	push   ebp
c0021f19:	57                   	push   edi
c0021f1a:	56                   	push   esi
c0021f1b:	53                   	push   ebx
c0021f1c:	50                   	push   eax
c0021f1d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021f21:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021f26:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021f2b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021f30:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021f37:	8d 43 12             	lea    eax,[ebx+0x12]
c0021f3a:	83 c3 10             	add    ebx,0x10
c0021f3d:	0f b6 c0             	movzx  eax,al
c0021f40:	0f b6 db             	movzx  ebx,bl
c0021f43:	50                   	push   eax
c0021f44:	51                   	push   ecx
c0021f45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f49:	57                   	push   edi
c0021f4a:	55                   	push   ebp
c0021f4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021f4f:	e8 66 fe ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f54:	53                   	push   ebx
c0021f55:	89 c6                	mov    esi,eax
c0021f57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021f5b:	c1 e6 10             	shl    esi,0x10
c0021f5e:	51                   	push   ecx
c0021f5f:	57                   	push   edi
c0021f60:	55                   	push   ebp
c0021f61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f65:	e8 50 fe ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f6a:	83 c4 2c             	add    esp,0x2c
c0021f6d:	0f b7 c0             	movzx  eax,ax
c0021f70:	5b                   	pop    ebx
c0021f71:	09 f0                	or     eax,esi
c0021f73:	5e                   	pop    esi
c0021f74:	5f                   	pop    edi
c0021f75:	5d                   	pop    ebp
c0021f76:	c3                   	ret    
c0021f77:	90                   	nop

c0021f78 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021f78:	53                   	push   ebx
c0021f79:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021f7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f87:	c1 e1 10             	shl    ecx,0x10
c0021f8a:	25 fc 00 00 00       	and    eax,0xfc
c0021f8f:	09 c1                	or     ecx,eax
c0021f91:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f96:	c1 e0 08             	shl    eax,0x8
c0021f99:	09 c1                	or     ecx,eax
c0021f9b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021fa0:	c1 e0 0b             	shl    eax,0xb
c0021fa3:	09 c1                	or     ecx,eax
c0021fa5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021fab:	89 c8                	mov    eax,ecx
c0021fad:	ef                   	out    dx,eax
c0021fae:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021fb3:	ed                   	in     eax,dx
c0021fb4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021fb9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021fbe:	74 0a                	je     c0021fca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021fc0:	0f b7 d8             	movzx  ebx,ax
c0021fc3:	89 d0                	mov    eax,edx
c0021fc5:	c1 e0 10             	shl    eax,0x10
c0021fc8:	eb 05                	jmp    c0021fcf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021fca:	66 31 c0             	xor    ax,ax
c0021fcd:	89 d3                	mov    ebx,edx
c0021fcf:	09 c3                	or     ebx,eax
c0021fd1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021fd6:	89 c8                	mov    eax,ecx
c0021fd8:	ef                   	out    dx,eax
c0021fd9:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021fde:	89 d8                	mov    eax,ebx
c0021fe0:	ef                   	out    dx,eax
c0021fe1:	5b                   	pop    ebx
c0021fe2:	c3                   	ret    
c0021fe3:	90                   	nop

c0021fe4 <PCI::checkBus(unsigned char)>:
c0021fe4:	56                   	push   esi
c0021fe5:	53                   	push   ebx
c0021fe6:	31 db                	xor    ebx,ebx
c0021fe8:	51                   	push   ecx
c0021fe9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021fee:	52                   	push   edx
c0021fef:	53                   	push   ebx
c0021ff0:	43                   	inc    ebx
c0021ff1:	56                   	push   esi
c0021ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ff6:	e8 2b 03 00 00       	call   c0022326 <PCI::checkDevice(unsigned char, unsigned char)>
c0021ffb:	83 c4 10             	add    esp,0x10
c0021ffe:	83 fb 20             	cmp    ebx,0x20
c0022001:	75 eb                	jne    c0021fee <PCI::checkBus(unsigned char)+0xa>
c0022003:	58                   	pop    eax
c0022004:	5b                   	pop    ebx
c0022005:	5e                   	pop    esi
c0022006:	c3                   	ret    
c0022007:	90                   	nop

c0022008 <PCI::foundDevice(PCIDeviceInfo)>:
c0022008:	55                   	push   ebp
c0022009:	57                   	push   edi
c002200a:	56                   	push   esi
c002200b:	53                   	push   ebx
c002200c:	83 ec 1c             	sub    esp,0x1c
c002200f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022013:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022019:	0f 84 52 01 00 00    	je     c0022171 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002201f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022023:	66 81 f9 06 04       	cmp    cx,0x406
c0022028:	75 2c                	jne    c0022056 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002202a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002202f:	50                   	push   eax
c0022030:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022035:	50                   	push   eax
c0022036:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002203b:	50                   	push   eax
c002203c:	56                   	push   esi
c002203d:	e8 b2 fe ff ff       	call   c0021ef4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022042:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022046:	0f b6 c0             	movzx  eax,al
c0022049:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002204d:	83 c4 2c             	add    esp,0x2c
c0022050:	5b                   	pop    ebx
c0022051:	5e                   	pop    esi
c0022052:	5f                   	pop    edi
c0022053:	5d                   	pop    ebp
c0022054:	eb 8e                	jmp    c0021fe4 <PCI::checkBus(unsigned char)>
c0022056:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002205a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022064:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022068:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002206c:	88 d3                	mov    bl,dl
c002206e:	85 c0                	test   eax,eax
c0022070:	74 33                	je     c00220a5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022072:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022075:	85 d2                	test   edx,edx
c0022077:	74 28                	je     c00220a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022079:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002207f:	31 ef                	xor    edi,ebp
c0022081:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022087:	75 18                	jne    c00220a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022089:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002208d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022093:	75 0c                	jne    c00220a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022095:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002209b:	0f 84 d0 00 00 00    	je     c0022171 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00220a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00220a3:	eb c9                	jmp    c002206e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00220a5:	66 81 f9 01 06       	cmp    cx,0x601
c00220aa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00220ae:	75 19                	jne    c00220c9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00220b0:	83 ec 0c             	sub    esp,0xc
c00220b3:	68 64 01 00 00       	push   0x164
c00220b8:	e8 67 d5 fe ff       	call   c000f624 <malloc>
c00220bd:	89 c5                	mov    ebp,eax
c00220bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00220c2:	e8 95 0f 00 00       	call   c002305c <SATABus::SATABus()>
c00220c7:	eb 1e                	jmp    c00220e7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00220c9:	66 81 f9 01 01       	cmp    cx,0x101
c00220ce:	75 60                	jne    c0022130 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00220d0:	83 ec 0c             	sub    esp,0xc
c00220d3:	68 70 02 00 00       	push   0x270
c00220d8:	e8 47 d5 fe ff       	call   c000f624 <malloc>
c00220dd:	89 c5                	mov    ebp,eax
c00220df:	89 04 24             	mov    DWORD PTR [esp],eax
c00220e2:	e8 03 03 00 00       	call   c00223ea <IDE::IDE()>
c00220e7:	58                   	pop    eax
c00220e8:	5a                   	pop    edx
c00220e9:	55                   	push   ebp
c00220ea:	56                   	push   esi
c00220eb:	e8 2a 1c ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00220f0:	83 ec 1c             	sub    esp,0x1c
c00220f3:	b9 09 00 00 00       	mov    ecx,0x9
c00220f8:	fc                   	cld    
c00220f9:	89 e7                	mov    edi,esp
c00220fb:	89 de                	mov    esi,ebx
c00220fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00220ff:	55                   	push   ebp
c0022100:	e8 1f 1b ff ff       	call   c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c0022105:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022108:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002210c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022114:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002211c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022127:	83 c4 4c             	add    esp,0x4c
c002212a:	5b                   	pop    ebx
c002212b:	5e                   	pop    esi
c002212c:	5f                   	pop    edi
c002212d:	5d                   	pop    ebp
c002212e:	ff e0                	jmp    eax
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	68 58 01 00 00       	push   0x158
c0022138:	e8 e7 d4 fe ff       	call   c000f624 <malloc>
c002213d:	89 c5                	mov    ebp,eax
c002213f:	58                   	pop    eax
c0022140:	5a                   	pop    edx
c0022141:	68 60 bc 02 c0       	push   0xc002bc60
c0022146:	55                   	push   ebp
c0022147:	e8 c4 1e ff ff       	call   c0014010 <DriverlessDevice::DriverlessDevice(char const*)>
c002214c:	59                   	pop    ecx
c002214d:	5f                   	pop    edi
c002214e:	55                   	push   ebp
c002214f:	56                   	push   esi
c0022150:	e8 c5 1b ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0022155:	b9 09 00 00 00       	mov    ecx,0x9
c002215a:	fc                   	cld    
c002215b:	89 df                	mov    edi,ebx
c002215d:	89 de                	mov    esi,ebx
c002215f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022161:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022165:	83 c4 2c             	add    esp,0x2c
c0022168:	5b                   	pop    ebx
c0022169:	5e                   	pop    esi
c002216a:	5f                   	pop    edi
c002216b:	5d                   	pop    ebp
c002216c:	e9 b3 1a ff ff       	jmp    c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c0022171:	83 c4 1c             	add    esp,0x1c
c0022174:	5b                   	pop    ebx
c0022175:	5e                   	pop    esi
c0022176:	5f                   	pop    edi
c0022177:	5d                   	pop    ebp
c0022178:	c3                   	ret    
c0022179:	90                   	nop

c002217a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002217a:	55                   	push   ebp
c002217b:	57                   	push   edi
c002217c:	56                   	push   esi
c002217d:	53                   	push   ebx
c002217e:	83 ec 5c             	sub    esp,0x5c
c0022181:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022185:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022189:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002218d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022192:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022196:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002219a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002219f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221a3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00221a8:	6a 0c                	push   0xc
c00221aa:	55                   	push   ebp
c00221ab:	53                   	push   ebx
c00221ac:	57                   	push   edi
c00221ad:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00221b4:	e8 01 fc ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221b9:	55                   	push   ebp
c00221ba:	53                   	push   ebx
c00221bb:	57                   	push   edi
c00221bc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00221c3:	e8 80 fc ff ff       	call   c0021e48 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00221c8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00221cd:	83 c4 24             	add    esp,0x24
c00221d0:	55                   	push   ebp
c00221d1:	53                   	push   ebx
c00221d2:	57                   	push   edi
c00221d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00221d7:	e8 f6 fc ff ff       	call   c0021ed2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00221dc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00221e0:	6a 3c                	push   0x3c
c00221e2:	55                   	push   ebp
c00221e3:	53                   	push   ebx
c00221e4:	57                   	push   edi
c00221e5:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00221ec:	e8 c9 fb ff ff       	call   c0021dba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221f1:	0f b6 c4             	movzx  eax,ah
c00221f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221f8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00221fc:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022200:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0022205:	83 c4 24             	add    esp,0x24
c0022208:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002220e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022215:	74 6c                	je     c0022283 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022217:	31 f6                	xor    esi,esi
c0022219:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c002221f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022225:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002222b:	7e 56                	jle    c0022283 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002222d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022230:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022237:	39 cb                	cmp    ebx,ecx
c0022239:	75 45                	jne    c0022280 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002223b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022242:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022246:	75 38                	jne    c0022280 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022248:	83 ec 0c             	sub    esp,0xc
c002224b:	68 7a bc 02 c0       	push   0xc002bc7a
c0022250:	e8 9e 06 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022255:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c002225b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022261:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022269:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002226d:	52                   	push   edx
c002226e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022272:	53                   	push   ebx
c0022273:	68 9f bc 02 c0       	push   0xc002bc9f
c0022278:	e8 76 06 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002227d:	83 c4 20             	add    esp,0x20
c0022280:	46                   	inc    esi
c0022281:	eb 96                	jmp    c0022219 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022283:	31 d2                	xor    edx,edx
c0022285:	83 ec 0c             	sub    esp,0xc
c0022288:	55                   	push   ebp
c0022289:	53                   	push   ebx
c002228a:	57                   	push   edi
c002228b:	52                   	push   edx
c002228c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022290:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022297:	e8 7c fc ff ff       	call   c0021f18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002229c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00222a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222a4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00222a8:	42                   	inc    edx
c00222a9:	83 c4 20             	add    esp,0x20
c00222ac:	83 fa 06             	cmp    edx,0x6
c00222af:	75 d4                	jne    c0022285 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00222b1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00222b5:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00222b9:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00222bd:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00222c1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00222c5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00222c9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00222ce:	86 e0                	xchg   al,ah
c00222d0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00222d5:	55                   	push   ebp
c00222d6:	53                   	push   ebx
c00222d7:	57                   	push   edi
c00222d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00222dc:	e8 ab fb ff ff       	call   c0021e8c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00222e1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00222e5:	55                   	push   ebp
c00222e6:	53                   	push   ebx
c00222e7:	57                   	push   edi
c00222e8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00222ef:	e8 0e fb ff ff       	call   c0021e02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00222f4:	83 ec 0c             	sub    esp,0xc
c00222f7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00222fc:	b9 09 00 00 00       	mov    ecx,0x9
c0022301:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022305:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022309:	fc                   	cld    
c002230a:	89 e7                	mov    edi,esp
c002230c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002230e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022315:	e8 ee fc ff ff       	call   c0022008 <PCI::foundDevice(PCIDeviceInfo)>
c002231a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022320:	5b                   	pop    ebx
c0022321:	5e                   	pop    esi
c0022322:	5f                   	pop    edi
c0022323:	5d                   	pop    ebp
c0022324:	c3                   	ret    
c0022325:	90                   	nop

c0022326 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022326:	55                   	push   ebp
c0022327:	57                   	push   edi
c0022328:	56                   	push   esi
c0022329:	53                   	push   ebx
c002232a:	83 ec 0c             	sub    esp,0xc
c002232d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022331:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022336:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002233b:	6a 00                	push   0x0
c002233d:	56                   	push   esi
c002233e:	57                   	push   edi
c002233f:	55                   	push   ebp
c0022340:	e8 bd fa ff ff       	call   c0021e02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022345:	6a 00                	push   0x0
c0022347:	56                   	push   esi
c0022348:	57                   	push   edi
c0022349:	55                   	push   ebp
c002234a:	e8 2b fe ff ff       	call   c002217a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002234f:	83 c4 20             	add    esp,0x20
c0022352:	6a 00                	push   0x0
c0022354:	56                   	push   esi
c0022355:	57                   	push   edi
c0022356:	55                   	push   ebp
c0022357:	e8 c8 fa ff ff       	call   c0021e24 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002235c:	83 c4 10             	add    esp,0x10
c002235f:	84 c0                	test   al,al
c0022361:	79 27                	jns    c002238a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022363:	bb 01 00 00 00       	mov    ebx,0x1
c0022368:	53                   	push   ebx
c0022369:	56                   	push   esi
c002236a:	57                   	push   edi
c002236b:	55                   	push   ebp
c002236c:	e8 91 fa ff ff       	call   c0021e02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022371:	83 c4 10             	add    esp,0x10
c0022374:	66 40                	inc    ax
c0022376:	74 0c                	je     c0022384 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022378:	53                   	push   ebx
c0022379:	56                   	push   esi
c002237a:	57                   	push   edi
c002237b:	55                   	push   ebp
c002237c:	e8 f9 fd ff ff       	call   c002217a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	43                   	inc    ebx
c0022385:	83 fb 08             	cmp    ebx,0x8
c0022388:	75 de                	jne    c0022368 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002238a:	83 c4 0c             	add    esp,0xc
c002238d:	5b                   	pop    ebx
c002238e:	5e                   	pop    esi
c002238f:	5f                   	pop    edi
c0022390:	5d                   	pop    ebp
c0022391:	c3                   	ret    

c0022392 <PCI::detect()>:
c0022392:	56                   	push   esi
c0022393:	53                   	push   ebx
c0022394:	53                   	push   ebx
c0022395:	31 db                	xor    ebx,ebx
c0022397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002239b:	6a 00                	push   0x0
c002239d:	6a 00                	push   0x0
c002239f:	6a 00                	push   0x0
c00223a1:	56                   	push   esi
c00223a2:	e8 7d fa ff ff       	call   c0021e24 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00223a7:	83 c4 10             	add    esp,0x10
c00223aa:	a8 80                	test   al,0x80
c00223ac:	75 21                	jne    c00223cf <PCI::detect()+0x3d>
c00223ae:	51                   	push   ecx
c00223af:	51                   	push   ecx
c00223b0:	6a 00                	push   0x0
c00223b2:	56                   	push   esi
c00223b3:	e8 2c fc ff ff       	call   c0021fe4 <PCI::checkBus(unsigned char)>
c00223b8:	83 c4 10             	add    esp,0x10
c00223bb:	eb 24                	jmp    c00223e1 <PCI::detect()+0x4f>
c00223bd:	52                   	push   edx
c00223be:	52                   	push   edx
c00223bf:	53                   	push   ebx
c00223c0:	43                   	inc    ebx
c00223c1:	56                   	push   esi
c00223c2:	e8 1d fc ff ff       	call   c0021fe4 <PCI::checkBus(unsigned char)>
c00223c7:	83 c4 10             	add    esp,0x10
c00223ca:	83 fb 08             	cmp    ebx,0x8
c00223cd:	74 12                	je     c00223e1 <PCI::detect()+0x4f>
c00223cf:	53                   	push   ebx
c00223d0:	6a 00                	push   0x0
c00223d2:	6a 00                	push   0x0
c00223d4:	56                   	push   esi
c00223d5:	e8 28 fa ff ff       	call   c0021e02 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00223da:	83 c4 10             	add    esp,0x10
c00223dd:	66 40                	inc    ax
c00223df:	74 dc                	je     c00223bd <PCI::detect()+0x2b>
c00223e1:	58                   	pop    eax
c00223e2:	5b                   	pop    ebx
c00223e3:	5e                   	pop    esi
c00223e4:	c3                   	ret    
c00223e5:	90                   	nop

c00223e6 <IDE::close(int, int, void*)>:
c00223e6:	83 c8 ff             	or     eax,0xffffffff
c00223e9:	c3                   	ret    

c00223ea <IDE::IDE()>:
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f1:	83 ec 08             	sub    esp,0x8
c00223f4:	68 e8 bc 02 c0       	push   0xc002bce8
c00223f9:	50                   	push   eax
c00223fa:	e8 a7 1c ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0022407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240b:	89 10                	mov    DWORD PTR [eax],edx
c002240d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022411:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022418:	90                   	nop
c0022419:	83 c4 0c             	add    esp,0xc
c002241c:	c3                   	ret    
c002241d:	90                   	nop

c002241e <IDE::prepareInterrupt(unsigned char)>:
c002241e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022423:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022427:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002242f:	c3                   	ret    

c0022430 <selectDrive(unsigned char, unsigned char)>:
c0022430:	c3                   	ret    
c0022431:	90                   	nop

c0022432 <IDE::getBase(unsigned char)>:
c0022432:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022443:	c3                   	ret    

c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022444:	55                   	push   ebp
c0022445:	57                   	push   edi
c0022446:	56                   	push   esi
c0022447:	53                   	push   ebx
c0022448:	83 ec 1c             	sub    esp,0x1c
c002244b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002244f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022453:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022456:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002245a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002245e:	80 f9 03             	cmp    cl,0x3
c0022461:	77 51                	ja     c00224b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022467:	0f b6 f2             	movzx  esi,dl
c002246a:	0f b6 db             	movzx  ebx,bl
c002246d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022470:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022474:	83 ca 80             	or     edx,0xffffff80
c0022477:	0f b6 d2             	movzx  edx,dl
c002247a:	52                   	push   edx
c002247b:	6a 0c                	push   0xc
c002247d:	56                   	push   esi
c002247e:	57                   	push   edi
c002247f:	e8 c0 ff ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022484:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022489:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002248d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022491:	ee                   	out    dx,al
c0022492:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022497:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002249b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002249f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00224a3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00224ab:	83 c4 2c             	add    esp,0x2c
c00224ae:	5b                   	pop    ebx
c00224af:	5e                   	pop    esi
c00224b0:	5f                   	pop    edi
c00224b1:	5d                   	pop    ebp
c00224b2:	eb 90                	jmp    c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224b4:	80 fb 07             	cmp    bl,0x7
c00224b7:	77 12                	ja     c00224cb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00224b9:	0f b6 d2             	movzx  edx,dl
c00224bc:	0f b6 db             	movzx  ebx,bl
c00224bf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00224c7:	89 da                	mov    edx,ebx
c00224c9:	eb 2f                	jmp    c00224fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00224cb:	80 fb 0d             	cmp    bl,0xd
c00224ce:	77 13                	ja     c00224e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00224d0:	0f b6 d2             	movzx  edx,dl
c00224d3:	0f b6 db             	movzx  ebx,bl
c00224d6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00224dd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00224e1:	eb 17                	jmp    c00224fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00224e3:	80 fb 15             	cmp    bl,0x15
c00224e6:	77 13                	ja     c00224fb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00224e8:	0f b6 d2             	movzx  edx,dl
c00224eb:	0f b6 db             	movzx  ebx,bl
c00224ee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00224f6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00224fa:	ee                   	out    dx,al
c00224fb:	83 c4 1c             	add    esp,0x1c
c00224fe:	5b                   	pop    ebx
c00224ff:	5e                   	pop    esi
c0022500:	5f                   	pop    edi
c0022501:	5d                   	pop    ebp
c0022502:	c3                   	ret    
c0022503:	90                   	nop

c0022504 <IDE::read(unsigned char, unsigned char)>:
c0022504:	55                   	push   ebp
c0022505:	57                   	push   edi
c0022506:	56                   	push   esi
c0022507:	53                   	push   ebx
c0022508:	83 ec 1c             	sub    esp,0x1c
c002250b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002250f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022513:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022516:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002251a:	3c 03                	cmp    al,0x3
c002251c:	77 43                	ja     c0022561 <IDE::read(unsigned char, unsigned char)+0x5d>
c002251e:	0f b6 f2             	movzx  esi,dl
c0022521:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022524:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022528:	83 c8 80             	or     eax,0xffffff80
c002252b:	0f b6 c0             	movzx  eax,al
c002252e:	50                   	push   eax
c002252f:	6a 0c                	push   0xc
c0022531:	56                   	push   esi
c0022532:	57                   	push   edi
c0022533:	e8 0c ff ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022538:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002253d:	0f b6 c3             	movzx  eax,bl
c0022540:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022544:	ec                   	in     al,dx
c0022545:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022549:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002254e:	52                   	push   edx
c002254f:	6a 0c                	push   0xc
c0022551:	56                   	push   esi
c0022552:	57                   	push   edi
c0022553:	e8 ec fe ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022558:	83 c4 20             	add    esp,0x20
c002255b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002255f:	eb 49                	jmp    c00225aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0022561:	80 fb 07             	cmp    bl,0x7
c0022564:	77 12                	ja     c0022578 <IDE::read(unsigned char, unsigned char)+0x74>
c0022566:	0f b6 d2             	movzx  edx,dl
c0022569:	0f b6 c3             	movzx  eax,bl
c002256c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022574:	89 c2                	mov    edx,eax
c0022576:	eb 31                	jmp    c00225a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022578:	80 fb 0d             	cmp    bl,0xd
c002257b:	77 13                	ja     c0022590 <IDE::read(unsigned char, unsigned char)+0x8c>
c002257d:	0f b6 d2             	movzx  edx,dl
c0022580:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022587:	0f b6 d3             	movzx  edx,bl
c002258a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002258e:	eb 19                	jmp    c00225a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022590:	31 c0                	xor    eax,eax
c0022592:	80 fb 15             	cmp    bl,0x15
c0022595:	77 13                	ja     c00225aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0022597:	0f b6 d2             	movzx  edx,dl
c002259a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00225a2:	0f b6 d3             	movzx  edx,bl
c00225a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00225a9:	ec                   	in     al,dx
c00225aa:	83 c4 1c             	add    esp,0x1c
c00225ad:	5b                   	pop    ebx
c00225ae:	5e                   	pop    esi
c00225af:	5f                   	pop    edi
c00225b0:	5d                   	pop    ebp
c00225b1:	c3                   	ret    

c00225b2 <IDE::waitInterrupt(unsigned char)>:
c00225b2:	55                   	push   ebp
c00225b3:	57                   	push   edi
c00225b4:	56                   	push   esi
c00225b5:	53                   	push   ebx
c00225b6:	31 db                	xor    ebx,ebx
c00225b8:	83 ec 0c             	sub    esp,0xc
c00225bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00225bf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00225c4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00225cc:	89 e8                	mov    eax,ebp
c00225ce:	84 c0                	test   al,al
c00225d0:	75 34                	jne    c0022606 <IDE::waitInterrupt(unsigned char)+0x54>
c00225d2:	52                   	push   edx
c00225d3:	6a 0c                	push   0xc
c00225d5:	56                   	push   esi
c00225d6:	57                   	push   edi
c00225d7:	e8 28 ff ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c00225dc:	83 c4 10             	add    esp,0x10
c00225df:	a8 01                	test   al,0x1
c00225e1:	75 2b                	jne    c002260e <IDE::waitInterrupt(unsigned char)+0x5c>
c00225e3:	f6 c3 04             	test   bl,0x4
c00225e6:	75 16                	jne    c00225fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00225e8:	83 fb 32             	cmp    ebx,0x32
c00225eb:	7e 11                	jle    c00225fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00225ed:	50                   	push   eax
c00225ee:	50                   	push   eax
c00225ef:	6a 00                	push   0x0
c00225f1:	68 80 96 98 00       	push   0x989680
c00225f6:	e8 8b b1 ff ff       	call   c001d786 <nanoSleep(unsigned long long)>
c00225fb:	83 c4 10             	add    esp,0x10
c00225fe:	83 fb 3c             	cmp    ebx,0x3c
c0022601:	74 0b                	je     c002260e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022603:	43                   	inc    ebx
c0022604:	eb be                	jmp    c00225c4 <IDE::waitInterrupt(unsigned char)+0x12>
c0022606:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002260e:	83 c4 0c             	add    esp,0xc
c0022611:	89 e8                	mov    eax,ebp
c0022613:	5b                   	pop    ebx
c0022614:	5e                   	pop    esi
c0022615:	5f                   	pop    edi
c0022616:	5d                   	pop    ebp
c0022617:	c3                   	ret    

c0022618 <ideChannel0IRQHandler(regs*, void*)>:
c0022618:	83 ec 10             	sub    esp,0x10
c002261b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002261f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022626:	6a 07                	push   0x7
c0022628:	6a 00                	push   0x0
c002262a:	50                   	push   eax
c002262b:	e8 d4 fe ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022630:	83 c4 1c             	add    esp,0x1c
c0022633:	c3                   	ret    

c0022634 <ideChannel1IRQHandler(regs*, void*)>:
c0022634:	83 ec 10             	sub    esp,0x10
c0022637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002263b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022642:	6a 07                	push   0x7
c0022644:	6a 01                	push   0x1
c0022646:	50                   	push   eax
c0022647:	e8 b8 fe ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c002264c:	83 c4 1c             	add    esp,0x1c
c002264f:	c3                   	ret    

c0022650 <IDE::enableIRQs(unsigned char, bool)>:
c0022650:	57                   	push   edi
c0022651:	56                   	push   esi
c0022652:	be 04 00 00 00       	mov    esi,0x4
c0022657:	53                   	push   ebx
c0022658:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002265d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022661:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022666:	0f 94 c0             	sete   al
c0022669:	d1 e0                	shl    eax,1
c002266b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022672:	0f b6 c0             	movzx  eax,al
c0022675:	50                   	push   eax
c0022676:	6a 0c                	push   0xc
c0022678:	57                   	push   edi
c0022679:	53                   	push   ebx
c002267a:	e8 c5 fd ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002267f:	83 c4 10             	add    esp,0x10
c0022682:	50                   	push   eax
c0022683:	6a 0c                	push   0xc
c0022685:	57                   	push   edi
c0022686:	53                   	push   ebx
c0022687:	e8 78 fe ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c002268c:	83 c4 10             	add    esp,0x10
c002268f:	4e                   	dec    esi
c0022690:	75 f0                	jne    c0022682 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022692:	5b                   	pop    ebx
c0022693:	5e                   	pop    esi
c0022694:	5f                   	pop    edi
c0022695:	c3                   	ret    

c0022696 <IDE::open(int, int, void*)>:
c0022696:	55                   	push   ebp
c0022697:	57                   	push   edi
c0022698:	56                   	push   esi
c0022699:	53                   	push   ebx
c002269a:	83 ec 1c             	sub    esp,0x1c
c002269d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00226a1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00226aa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00226b3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00226ba:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00226c1:	0f 85 b0 02 00 00    	jne    c0022977 <IDE::open(int, int, void*)+0x2e1>
c00226c7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00226cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00226d1:	83 e0 7f             	and    eax,0x7f
c00226d4:	3c 05                	cmp    al,0x5
c00226d6:	74 04                	je     c00226dc <IDE::open(int, int, void*)+0x46>
c00226d8:	3c 0f                	cmp    al,0xf
c00226da:	75 32                	jne    c002270e <IDE::open(int, int, void*)+0x78>
c00226dc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00226e2:	83 e0 fc             	and    eax,0xfffffffc
c00226e5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00226ec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00226f2:	83 e0 fc             	and    eax,0xfffffffc
c00226f5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00226fc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022702:	83 e0 fc             	and    eax,0xfffffffc
c0022705:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002270c:	eb 14                	jmp    c0022722 <IDE::open(int, int, void*)+0x8c>
c002270e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022718:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022722:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022729:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022730:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022734:	89 c6                	mov    esi,eax
c0022736:	bf f8 0c 00 00       	mov    edi,0xcf8
c002273b:	c1 e6 10             	shl    esi,0x10
c002273e:	89 e8                	mov    eax,ebp
c0022740:	89 fa                	mov    edx,edi
c0022742:	c1 e0 0b             	shl    eax,0xb
c0022745:	09 f0                	or     eax,esi
c0022747:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002274e:	c1 e6 08             	shl    esi,0x8
c0022751:	09 c6                	or     esi,eax
c0022753:	89 f0                	mov    eax,esi
c0022755:	0d 08 00 00 80       	or     eax,0x80000008
c002275a:	ef                   	out    dx,eax
c002275b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022760:	89 ca                	mov    edx,ecx
c0022762:	ed                   	in     eax,dx
c0022763:	c1 e8 10             	shr    eax,0x10
c0022766:	3d ff ff 00 00       	cmp    eax,0xffff
c002276b:	0f 84 f5 00 00 00    	je     c0022866 <IDE::open(int, int, void*)+0x1d0>
c0022771:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022777:	89 fa                	mov    edx,edi
c0022779:	89 f0                	mov    eax,esi
c002277b:	ef                   	out    dx,eax
c002277c:	b0 fe                	mov    al,0xfe
c002277e:	89 ca                	mov    edx,ecx
c0022780:	ee                   	out    dx,al
c0022781:	89 f0                	mov    eax,esi
c0022783:	89 fa                	mov    edx,edi
c0022785:	ef                   	out    dx,eax
c0022786:	89 ca                	mov    edx,ecx
c0022788:	ed                   	in     eax,dx
c0022789:	3c fe                	cmp    al,0xfe
c002278b:	0f 85 a9 00 00 00    	jne    c002283a <IDE::open(int, int, void*)+0x1a4>
c0022791:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c0022797:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002279e:	74 33                	je     c00227d3 <IDE::open(int, int, void*)+0x13d>
c00227a0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00227a6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00227aa:	40                   	inc    eax
c00227ab:	83 ec 0c             	sub    esp,0xc
c00227ae:	0f b6 c0             	movzx  eax,al
c00227b1:	50                   	push   eax
c00227b2:	55                   	push   ebp
c00227b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00227b7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00227bd:	51                   	push   ecx
c00227be:	e8 25 52 ff ff       	call   c00179e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00227c3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00227c8:	83 c4 1c             	add    esp,0x1c
c00227cb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00227d1:	eb 0a                	jmp    c00227dd <IDE::open(int, int, void*)+0x147>
c00227d3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00227dd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00227e4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00227eb:	c1 e1 10             	shl    ecx,0x10
c00227ee:	c1 e0 08             	shl    eax,0x8
c00227f1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00227f6:	09 c1                	or     ecx,eax
c00227f8:	89 fa                	mov    edx,edi
c00227fa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022801:	c1 e0 0b             	shl    eax,0xb
c0022804:	09 c1                	or     ecx,eax
c0022806:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002280c:	89 c8                	mov    eax,ecx
c002280e:	ef                   	out    dx,eax
c002280f:	be fc 0c 00 00       	mov    esi,0xcfc
c0022814:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002281a:	89 f2                	mov    edx,esi
c002281c:	ee                   	out    dx,al
c002281d:	89 c8                	mov    eax,ecx
c002281f:	89 fa                	mov    edx,edi
c0022821:	ef                   	out    dx,eax
c0022822:	89 f2                	mov    edx,esi
c0022824:	ed                   	in     eax,dx
c0022825:	0f b6 c0             	movzx  eax,al
c0022828:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002282e:	74 46                	je     c0022876 <IDE::open(int, int, void*)+0x1e0>
c0022830:	83 ec 0c             	sub    esp,0xc
c0022833:	68 00 bd 02 c0       	push   0xc002bd00
c0022838:	eb 34                	jmp    c002286e <IDE::open(int, int, void*)+0x1d8>
c002283a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022843:	75 17                	jne    c002285c <IDE::open(int, int, void*)+0x1c6>
c0022845:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002284a:	74 07                	je     c0022853 <IDE::open(int, int, void*)+0x1bd>
c002284c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022851:	75 09                	jne    c002285c <IDE::open(int, int, void*)+0x1c6>
c0022853:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002285a:	eb 1a                	jmp    c0022876 <IDE::open(int, int, void*)+0x1e0>
c002285c:	83 ec 0c             	sub    esp,0xc
c002285f:	68 08 bd 02 c0       	push   0xc002bd08
c0022864:	eb 08                	jmp    c002286e <IDE::open(int, int, void*)+0x1d8>
c0022866:	83 ec 0c             	sub    esp,0xc
c0022869:	68 39 bd 02 c0       	push   0xc002bd39
c002286e:	e8 b2 73 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002287d:	79 1a                	jns    c0022899 <IDE::open(int, int, void*)+0x203>
c002287f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022885:	83 e0 fc             	and    eax,0xfffffffc
c0022888:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002288f:	83 c0 08             	add    eax,0x8
c0022892:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022899:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002289f:	89 c2                	mov    edx,eax
c00228a1:	83 e2 0f             	and    edx,0xf
c00228a4:	66 83 fa 08          	cmp    dx,0x8
c00228a8:	75 0a                	jne    c00228b4 <IDE::open(int, int, void*)+0x21e>
c00228aa:	83 e8 02             	sub    eax,0x2
c00228ad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00228b4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00228ba:	89 c2                	mov    edx,eax
c00228bc:	83 e2 0f             	and    edx,0xf
c00228bf:	66 83 fa 08          	cmp    dx,0x8
c00228c3:	75 0a                	jne    c00228cf <IDE::open(int, int, void*)+0x239>
c00228c5:	83 e8 02             	sub    eax,0x2
c00228c8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00228cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00228d6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00228dd:	89 d0                	mov    eax,edx
c00228df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00228e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00228e6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00228ea:	8d 4a 01             	lea    ecx,[edx+0x1]
c00228ed:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00228f2:	0f b6 c9             	movzx  ecx,cl
c00228f5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00228fc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00228ff:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022903:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022907:	8d 50 02             	lea    edx,[eax+0x2]
c002290a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002290f:	0f b6 d2             	movzx  edx,dl
c0022912:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022918:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002291b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002291f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022923:	8d 48 03             	lea    ecx,[eax+0x3]
c0022926:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002292b:	0f b6 c9             	movzx  ecx,cl
c002292e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022934:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022937:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002293b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002293f:	8d 50 04             	lea    edx,[eax+0x4]
c0022942:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022948:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002294d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022954:	66 85 f6             	test   si,si
c0022957:	74 3e                	je     c0022997 <IDE::open(int, int, void*)+0x301>
c0022959:	0f b6 d2             	movzx  edx,dl
c002295c:	83 c0 05             	add    eax,0x5
c002295f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022962:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022966:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002296a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022970:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022975:	eb 20                	jmp    c0022997 <IDE::open(int, int, void*)+0x301>
c0022977:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022981:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002298b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022992:	e9 02 ff ff ff       	jmp    c0022899 <IDE::open(int, int, void*)+0x203>
c0022997:	52                   	push   edx
c0022998:	52                   	push   edx
c0022999:	6a 00                	push   0x0
c002299b:	53                   	push   ebx
c002299c:	e8 7d fa ff ff       	call   c002241e <IDE::prepareInterrupt(unsigned char)>
c00229a1:	59                   	pop    ecx
c00229a2:	5e                   	pop    esi
c00229a3:	6a 01                	push   0x1
c00229a5:	53                   	push   ebx
c00229a6:	e8 73 fa ff ff       	call   c002241e <IDE::prepareInterrupt(unsigned char)>
c00229ab:	83 c4 0c             	add    esp,0xc
c00229ae:	6a 00                	push   0x0
c00229b0:	6a 00                	push   0x0
c00229b2:	53                   	push   ebx
c00229b3:	e8 98 fc ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c00229b8:	83 c4 0c             	add    esp,0xc
c00229bb:	6a 00                	push   0x0
c00229bd:	6a 01                	push   0x1
c00229bf:	53                   	push   ebx
c00229c0:	e8 8b fc ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00229cf:	74 40                	je     c0022a11 <IDE::open(int, int, void*)+0x37b>
c00229d1:	83 ec 0c             	sub    esp,0xc
c00229d4:	68 63 bd 02 c0       	push   0xc002bd63
c00229d9:	e8 15 ff fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00229de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00229e1:	6a 01                	push   0x1
c00229e3:	68 18 26 02 c0       	push   0xc0022618
c00229e8:	6a 0e                	push   0xe
c00229ea:	53                   	push   ebx
c00229eb:	e8 ae 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229f0:	83 c4 14             	add    esp,0x14
c00229f3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00229f9:	53                   	push   ebx
c00229fa:	6a 01                	push   0x1
c00229fc:	68 34 26 02 c0       	push   0xc0022634
c0022a01:	6a 0f                	push   0xf
c0022a03:	53                   	push   ebx
c0022a04:	e8 95 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a09:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022a0f:	eb 4a                	jmp    c0022a5b <IDE::open(int, int, void*)+0x3c5>
c0022a11:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022a1b:	50                   	push   eax
c0022a1c:	6a 0f                	push   0xf
c0022a1e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a24:	68 7f bd 02 c0       	push   0xc002bd7f
c0022a29:	e8 c5 fe fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022a2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022a31:	6a 00                	push   0x0
c0022a33:	68 18 26 02 c0       	push   0xc0022618
c0022a38:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a3e:	53                   	push   ebx
c0022a3f:	e8 5a 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a44:	83 c4 14             	add    esp,0x14
c0022a47:	53                   	push   ebx
c0022a48:	6a 00                	push   0x0
c0022a4a:	68 34 26 02 c0       	push   0xc0022634
c0022a4f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022a55:	53                   	push   ebx
c0022a56:	e8 43 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022a5d:	83 c4 20             	add    esp,0x20
c0022a60:	83 ec 0c             	sub    esp,0xc
c0022a63:	53                   	push   ebx
c0022a64:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022a67:	83 c4 0c             	add    esp,0xc
c0022a6a:	6a 07                	push   0x7
c0022a6c:	6a 00                	push   0x0
c0022a6e:	53                   	push   ebx
c0022a6f:	e8 90 fa ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022a74:	83 c4 0c             	add    esp,0xc
c0022a77:	6a 07                	push   0x7
c0022a79:	6a 01                	push   0x1
c0022a7b:	53                   	push   ebx
c0022a7c:	e8 83 fa ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022a81:	83 c4 0c             	add    esp,0xc
c0022a84:	6a 01                	push   0x1
c0022a86:	6a 00                	push   0x0
c0022a88:	53                   	push   ebx
c0022a89:	e8 c2 fb ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c0022a8e:	83 c4 0c             	add    esp,0xc
c0022a91:	6a 01                	push   0x1
c0022a93:	6a 01                	push   0x1
c0022a95:	53                   	push   ebx
c0022a96:	e8 b5 fb ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c0022a9b:	83 c4 2c             	add    esp,0x2c
c0022a9e:	31 c0                	xor    eax,eax
c0022aa0:	5b                   	pop    ebx
c0022aa1:	5e                   	pop    esi
c0022aa2:	5f                   	pop    edi
c0022aa3:	5d                   	pop    ebp
c0022aa4:	c3                   	ret    
c0022aa5:	90                   	nop

c0022aa6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022aa6:	55                   	push   ebp
c0022aa7:	57                   	push   edi
c0022aa8:	56                   	push   esi
c0022aa9:	53                   	push   ebx
c0022aaa:	83 ec 1c             	sub    esp,0x1c
c0022aad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022ab1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ab5:	8d 50 f8             	lea    edx,[eax-0x8]
c0022ab8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022abc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022ac0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022ac4:	80 fa 03             	cmp    dl,0x3
c0022ac7:	77 5d                	ja     c0022b26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022ac9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022acd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ad1:	0f b6 db             	movzx  ebx,bl
c0022ad4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022ad7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022adb:	83 ca 80             	or     edx,0xffffff80
c0022ade:	0f b6 d2             	movzx  edx,dl
c0022ae1:	52                   	push   edx
c0022ae2:	6a 0c                	push   0xc
c0022ae4:	53                   	push   ebx
c0022ae5:	56                   	push   esi
c0022ae6:	e8 59 f9 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022aeb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022af8:	0f b6 c0             	movzx  eax,al
c0022afb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022aff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022b01:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022b06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022b0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022b12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022b1a:	83 c4 2c             	add    esp,0x2c
c0022b1d:	5b                   	pop    ebx
c0022b1e:	5e                   	pop    esi
c0022b1f:	5f                   	pop    edi
c0022b20:	5d                   	pop    ebp
c0022b21:	e9 1e f9 ff ff       	jmp    c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b26:	3c 07                	cmp    al,0x7
c0022b28:	77 10                	ja     c0022b3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022b2a:	0f b6 db             	movzx  ebx,bl
c0022b2d:	0f b6 d0             	movzx  edx,al
c0022b30:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022b38:	eb 2d                	jmp    c0022b67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b3a:	3c 0d                	cmp    al,0xd
c0022b3c:	77 13                	ja     c0022b51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022b3e:	0f b6 db             	movzx  ebx,bl
c0022b41:	0f b6 c0             	movzx  eax,al
c0022b44:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022b4b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022b4f:	eb 16                	jmp    c0022b67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b51:	3c 15                	cmp    al,0x15
c0022b53:	77 14                	ja     c0022b69 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022b55:	0f b6 db             	movzx  ebx,bl
c0022b58:	0f b6 c0             	movzx  eax,al
c0022b5b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022b63:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022b67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022b69:	83 c4 1c             	add    esp,0x1c
c0022b6c:	5b                   	pop    ebx
c0022b6d:	5e                   	pop    esi
c0022b6e:	5f                   	pop    edi
c0022b6f:	5d                   	pop    ebp
c0022b70:	c3                   	ret    
c0022b71:	90                   	nop

c0022b72 <IDE::detect()>:
c0022b72:	55                   	push   ebp
c0022b73:	57                   	push   edi
c0022b74:	56                   	push   esi
c0022b75:	53                   	push   ebx
c0022b76:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022b7c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022b83:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022b8a:	0f 85 be 02 00 00    	jne    c0022e4e <IDE::detect()+0x2dc>
c0022b90:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022b97:	31 f6                	xor    esi,esi
c0022b99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022ba1:	31 ed                	xor    ebp,ebp
c0022ba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ba7:	c1 e0 06             	shl    eax,0x6
c0022baa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022bb2:	89 e8                	mov    eax,ebp
c0022bb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022bb8:	c1 e0 04             	shl    eax,0x4
c0022bbb:	83 c8 a0             	or     eax,0xffffffa0
c0022bbe:	0f b6 c0             	movzx  eax,al
c0022bc1:	50                   	push   eax
c0022bc2:	6a 06                	push   0x6
c0022bc4:	56                   	push   esi
c0022bc5:	53                   	push   ebx
c0022bc6:	e8 79 f8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022bcb:	83 c4 0c             	add    esp,0xc
c0022bce:	6a 0c                	push   0xc
c0022bd0:	56                   	push   esi
c0022bd1:	53                   	push   ebx
c0022bd2:	e8 2d f9 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022bd7:	83 c4 0c             	add    esp,0xc
c0022bda:	6a 0c                	push   0xc
c0022bdc:	56                   	push   esi
c0022bdd:	53                   	push   ebx
c0022bde:	e8 21 f9 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022be3:	83 c4 0c             	add    esp,0xc
c0022be6:	6a 0c                	push   0xc
c0022be8:	56                   	push   esi
c0022be9:	53                   	push   ebx
c0022bea:	e8 15 f9 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022bef:	83 c4 0c             	add    esp,0xc
c0022bf2:	6a 0c                	push   0xc
c0022bf4:	56                   	push   esi
c0022bf5:	53                   	push   ebx
c0022bf6:	e8 09 f9 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022bfb:	68 ec 00 00 00       	push   0xec
c0022c00:	6a 07                	push   0x7
c0022c02:	56                   	push   esi
c0022c03:	53                   	push   ebx
c0022c04:	e8 3b f8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c09:	83 c4 1c             	add    esp,0x1c
c0022c0c:	6a 0c                	push   0xc
c0022c0e:	56                   	push   esi
c0022c0f:	53                   	push   ebx
c0022c10:	e8 ef f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c15:	83 c4 0c             	add    esp,0xc
c0022c18:	6a 0c                	push   0xc
c0022c1a:	56                   	push   esi
c0022c1b:	53                   	push   ebx
c0022c1c:	e8 e3 f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c21:	83 c4 0c             	add    esp,0xc
c0022c24:	6a 0c                	push   0xc
c0022c26:	56                   	push   esi
c0022c27:	53                   	push   ebx
c0022c28:	e8 d7 f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c2d:	83 c4 0c             	add    esp,0xc
c0022c30:	6a 0c                	push   0xc
c0022c32:	56                   	push   esi
c0022c33:	53                   	push   ebx
c0022c34:	e8 cb f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c39:	83 c4 0c             	add    esp,0xc
c0022c3c:	6a 0c                	push   0xc
c0022c3e:	56                   	push   esi
c0022c3f:	53                   	push   ebx
c0022c40:	e8 bf f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c45:	83 c4 10             	add    esp,0x10
c0022c48:	84 c0                	test   al,al
c0022c4a:	0f 84 8b 01 00 00    	je     c0022ddb <IDE::detect()+0x269>
c0022c50:	31 ff                	xor    edi,edi
c0022c52:	50                   	push   eax
c0022c53:	6a 0c                	push   0xc
c0022c55:	56                   	push   esi
c0022c56:	53                   	push   ebx
c0022c57:	e8 a8 f8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022c5c:	83 c4 10             	add    esp,0x10
c0022c5f:	a8 01                	test   al,0x1
c0022c61:	0f 85 8e 01 00 00    	jne    c0022df5 <IDE::detect()+0x283>
c0022c67:	84 c0                	test   al,al
c0022c69:	78 04                	js     c0022c6f <IDE::detect()+0xfd>
c0022c6b:	a8 08                	test   al,0x8
c0022c6d:	75 27                	jne    c0022c96 <IDE::detect()+0x124>
c0022c6f:	47                   	inc    edi
c0022c70:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022c76:	7e da                	jle    c0022c52 <IDE::detect()+0xe0>
c0022c78:	50                   	push   eax
c0022c79:	50                   	push   eax
c0022c7a:	6a 00                	push   0x0
c0022c7c:	68 40 4b 4c 00       	push   0x4c4b40
c0022c81:	e8 00 ab ff ff       	call   c001d786 <nanoSleep(unsigned long long)>
c0022c86:	83 c4 10             	add    esp,0x10
c0022c89:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022c8f:	75 c1                	jne    c0022c52 <IDE::detect()+0xe0>
c0022c91:	e9 5f 01 00 00       	jmp    c0022df5 <IDE::detect()+0x283>
c0022c96:	31 c9                	xor    ecx,ecx
c0022c98:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022c9c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022ca0:	83 ec 0c             	sub    esp,0xc
c0022ca3:	68 80 00 00 00       	push   0x80
c0022ca8:	57                   	push   edi
c0022ca9:	6a 00                	push   0x0
c0022cab:	56                   	push   esi
c0022cac:	53                   	push   ebx
c0022cad:	e8 f4 fd ff ff       	call   c0022aa6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022cb2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022cb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022cbb:	89 d1                	mov    ecx,edx
c0022cbd:	c1 e0 06             	shl    eax,0x6
c0022cc0:	01 d8                	add    eax,ebx
c0022cc2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022cc9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022cd0:	89 f2                	mov    edx,esi
c0022cd2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022cd8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022cdc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022ce2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ce6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022ced:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022cf5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022cfc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022d04:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022d0a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022d11:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022d17:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022d1b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d1f:	83 c4 20             	add    esp,0x20
c0022d22:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022d25:	83 c0 02             	add    eax,0x2
c0022d28:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022d2e:	83 c7 02             	add    edi,0x2
c0022d31:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022d34:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022d3a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022d3e:	75 e2                	jne    c0022d22 <IDE::detect()+0x1b0>
c0022d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d44:	c1 e0 06             	shl    eax,0x6
c0022d47:	01 d8                	add    eax,ebx
c0022d49:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022d4f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022d56:	66 c1 ea 09          	shr    dx,0x9
c0022d5a:	83 e2 01             	and    edx,0x1
c0022d5d:	84 c9                	test   cl,cl
c0022d5f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022d65:	75 2f                	jne    c0022d96 <IDE::detect()+0x224>
c0022d67:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022d6d:	85 c0                	test   eax,eax
c0022d6f:	74 66                	je     c0022dd7 <IDE::detect()+0x265>
c0022d71:	50                   	push   eax
c0022d72:	55                   	push   ebp
c0022d73:	56                   	push   esi
c0022d74:	68 9b bd 02 c0       	push   0xc002bd9b
c0022d79:	e8 75 fb fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022d7e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022d85:	e8 9a c8 fe ff       	call   c000f624 <malloc>
c0022d8a:	89 c7                	mov    edi,eax
c0022d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d8f:	e8 78 06 00 00       	call   c002340c <ATA::ATA()>
c0022d94:	eb 28                	jmp    c0022dbe <IDE::detect()+0x24c>
c0022d96:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022d9c:	55                   	push   ebp
c0022d9d:	56                   	push   esi
c0022d9e:	68 ca bd 02 c0       	push   0xc002bdca
c0022da3:	e8 4b fb fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022da8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022daf:	e8 70 c8 fe ff       	call   c000f624 <malloc>
c0022db4:	89 c7                	mov    edi,eax
c0022db6:	89 04 24             	mov    DWORD PTR [esp],eax
c0022db9:	e8 84 0c 00 00       	call   c0023a42 <ATAPI::ATAPI()>
c0022dbe:	5a                   	pop    edx
c0022dbf:	59                   	pop    ecx
c0022dc0:	57                   	push   edi
c0022dc1:	53                   	push   ebx
c0022dc2:	e8 53 0f ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0022dc7:	8b 07                	mov    eax,DWORD PTR [edi]
c0022dc9:	53                   	push   ebx
c0022dca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022dce:	6a 00                	push   0x0
c0022dd0:	57                   	push   edi
c0022dd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022dd4:	83 c4 20             	add    esp,0x20
c0022dd7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022ddb:	4d                   	dec    ebp
c0022ddc:	74 0a                	je     c0022de8 <IDE::detect()+0x276>
c0022dde:	bd 01 00 00 00       	mov    ebp,0x1
c0022de3:	e9 bb fd ff ff       	jmp    c0022ba3 <IDE::detect()+0x31>
c0022de8:	4e                   	dec    esi
c0022de9:	74 63                	je     c0022e4e <IDE::detect()+0x2dc>
c0022deb:	be 01 00 00 00       	mov    esi,0x1
c0022df0:	e9 ac fd ff ff       	jmp    c0022ba1 <IDE::detect()+0x2f>
c0022df5:	50                   	push   eax
c0022df6:	6a 04                	push   0x4
c0022df8:	56                   	push   esi
c0022df9:	53                   	push   ebx
c0022dfa:	e8 05 f7 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022dff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e03:	83 c4 0c             	add    esp,0xc
c0022e06:	6a 05                	push   0x5
c0022e08:	56                   	push   esi
c0022e09:	53                   	push   ebx
c0022e0a:	e8 f5 f6 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022e0f:	83 c4 10             	add    esp,0x10
c0022e12:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022e16:	80 fa 14             	cmp    dl,0x14
c0022e19:	75 04                	jne    c0022e1f <IDE::detect()+0x2ad>
c0022e1b:	3c eb                	cmp    al,0xeb
c0022e1d:	eb 07                	jmp    c0022e26 <IDE::detect()+0x2b4>
c0022e1f:	3c 96                	cmp    al,0x96
c0022e21:	75 b8                	jne    c0022ddb <IDE::detect()+0x269>
c0022e23:	80 fa 69             	cmp    dl,0x69
c0022e26:	75 b3                	jne    c0022ddb <IDE::detect()+0x269>
c0022e28:	68 a1 00 00 00       	push   0xa1
c0022e2d:	6a 07                	push   0x7
c0022e2f:	56                   	push   esi
c0022e30:	53                   	push   ebx
c0022e31:	e8 0e f6 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e36:	5f                   	pop    edi
c0022e37:	58                   	pop    eax
c0022e38:	6a 00                	push   0x0
c0022e3a:	68 40 42 0f 00       	push   0xf4240
c0022e3f:	e8 42 a9 ff ff       	call   c001d786 <nanoSleep(unsigned long long)>
c0022e44:	83 c4 10             	add    esp,0x10
c0022e47:	b1 01                	mov    cl,0x1
c0022e49:	e9 4a fe ff ff       	jmp    c0022c98 <IDE::detect()+0x126>
c0022e4e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022e54:	5b                   	pop    ebx
c0022e55:	5e                   	pop    esi
c0022e56:	5f                   	pop    edi
c0022e57:	5d                   	pop    ebp
c0022e58:	c3                   	ret    
c0022e59:	90                   	nop

c0022e5a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022e5a:	55                   	push   ebp
c0022e5b:	57                   	push   edi
c0022e5c:	56                   	push   esi
c0022e5d:	53                   	push   ebx
c0022e5e:	83 ec 1c             	sub    esp,0x1c
c0022e61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e69:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022e71:	88 c3                	mov    bl,al
c0022e73:	84 c0                	test   al,al
c0022e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e79:	0f 84 67 01 00 00    	je     c0022fe6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022e7f:	83 ec 0c             	sub    esp,0xc
c0022e82:	68 fb bd 02 c0       	push   0xc002bdfb
c0022e87:	e8 67 fa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022e8c:	83 c4 10             	add    esp,0x10
c0022e8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e93:	3c 01                	cmp    al,0x1
c0022e95:	75 17                	jne    c0022eae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022e97:	83 ec 0c             	sub    esp,0xc
c0022e9a:	b3 13                	mov    bl,0x13
c0022e9c:	68 07 be 02 c0       	push   0xc002be07
c0022ea1:	e8 4d fa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022ea6:	83 c4 10             	add    esp,0x10
c0022ea9:	e9 25 01 00 00       	jmp    c0022fd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022eae:	3c 02                	cmp    al,0x2
c0022eb0:	0f 85 ef 00 00 00    	jne    c0022fa5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022eb6:	d1 e6                	shl    esi,1
c0022eb8:	09 ee                	or     esi,ebp
c0022eba:	52                   	push   edx
c0022ebb:	89 f0                	mov    eax,esi
c0022ebd:	6a 01                	push   0x1
c0022ebf:	0f b6 f0             	movzx  esi,al
c0022ec2:	c1 e6 06             	shl    esi,0x6
c0022ec5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022ecd:	50                   	push   eax
c0022ece:	57                   	push   edi
c0022ecf:	e8 30 f6 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0022ed4:	83 c4 10             	add    esp,0x10
c0022ed7:	89 c6                	mov    esi,eax
c0022ed9:	a8 01                	test   al,0x1
c0022edb:	74 12                	je     c0022eef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022edd:	83 ec 0c             	sub    esp,0xc
c0022ee0:	b3 07                	mov    bl,0x7
c0022ee2:	68 1c be 02 c0       	push   0xc002be1c
c0022ee7:	e8 07 fa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022eec:	83 c4 10             	add    esp,0x10
c0022eef:	f7 c6 02 00 00 00    	test   esi,0x2
c0022ef5:	74 12                	je     c0022f09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022ef7:	83 ec 0c             	sub    esp,0xc
c0022efa:	b3 03                	mov    bl,0x3
c0022efc:	68 3a be 02 c0       	push   0xc002be3a
c0022f01:	e8 ed f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f06:	83 c4 10             	add    esp,0x10
c0022f09:	f7 c6 04 00 00 00    	test   esi,0x4
c0022f0f:	74 12                	je     c0022f23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022f11:	83 ec 0c             	sub    esp,0xc
c0022f14:	b3 14                	mov    bl,0x14
c0022f16:	68 5a be 02 c0       	push   0xc002be5a
c0022f1b:	e8 d3 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f20:	83 c4 10             	add    esp,0x10
c0022f23:	f7 c6 08 00 00 00    	test   esi,0x8
c0022f29:	74 12                	je     c0022f3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022f2b:	83 ec 0c             	sub    esp,0xc
c0022f2e:	b3 03                	mov    bl,0x3
c0022f30:	68 3a be 02 c0       	push   0xc002be3a
c0022f35:	e8 b9 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	f7 c6 10 00 00 00    	test   esi,0x10
c0022f43:	74 12                	je     c0022f57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022f45:	83 ec 0c             	sub    esp,0xc
c0022f48:	b3 15                	mov    bl,0x15
c0022f4a:	68 72 be 02 c0       	push   0xc002be72
c0022f4f:	e8 9f f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f54:	83 c4 10             	add    esp,0x10
c0022f57:	f7 c6 20 00 00 00    	test   esi,0x20
c0022f5d:	74 12                	je     c0022f71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022f5f:	83 ec 0c             	sub    esp,0xc
c0022f62:	b3 03                	mov    bl,0x3
c0022f64:	68 3a be 02 c0       	push   0xc002be3a
c0022f69:	e8 85 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f6e:	83 c4 10             	add    esp,0x10
c0022f71:	f7 c6 40 00 00 00    	test   esi,0x40
c0022f77:	74 12                	je     c0022f8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022f79:	83 ec 0c             	sub    esp,0xc
c0022f7c:	b3 16                	mov    bl,0x16
c0022f7e:	68 8c be 02 c0       	push   0xc002be8c
c0022f83:	e8 6b f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f88:	83 c4 10             	add    esp,0x10
c0022f8b:	89 f0                	mov    eax,esi
c0022f8d:	84 c0                	test   al,al
c0022f8f:	79 42                	jns    c0022fd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022f91:	83 ec 0c             	sub    esp,0xc
c0022f94:	b3 0d                	mov    bl,0xd
c0022f96:	68 ad be 02 c0       	push   0xc002bead
c0022f9b:	e8 53 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fa0:	83 c4 10             	add    esp,0x10
c0022fa3:	eb 2e                	jmp    c0022fd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fa5:	3c 03                	cmp    al,0x3
c0022fa7:	75 14                	jne    c0022fbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022fa9:	83 ec 0c             	sub    esp,0xc
c0022fac:	b3 17                	mov    bl,0x17
c0022fae:	68 c1 be 02 c0       	push   0xc002bec1
c0022fb3:	e8 3b f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fb8:	83 c4 10             	add    esp,0x10
c0022fbb:	eb 16                	jmp    c0022fd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fbd:	3c 04                	cmp    al,0x4
c0022fbf:	75 12                	jne    c0022fd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fc1:	83 ec 0c             	sub    esp,0xc
c0022fc4:	b3 08                	mov    bl,0x8
c0022fc6:	68 d7 be 02 c0       	push   0xc002bed7
c0022fcb:	e8 23 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fd0:	83 c4 10             	add    esp,0x10
c0022fd3:	50                   	push   eax
c0022fd4:	50                   	push   eax
c0022fd5:	0f b6 c3             	movzx  eax,bl
c0022fd8:	50                   	push   eax
c0022fd9:	68 ef be 02 c0       	push   0xc002beef
c0022fde:	e8 10 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fe3:	83 c4 10             	add    esp,0x10
c0022fe6:	83 c4 1c             	add    esp,0x1c
c0022fe9:	88 d8                	mov    al,bl
c0022feb:	5b                   	pop    ebx
c0022fec:	5e                   	pop    esi
c0022fed:	5f                   	pop    edi
c0022fee:	5d                   	pop    ebp
c0022fef:	c3                   	ret    

c0022ff0 <IDE::polling(unsigned char, unsigned int)>:
c0022ff0:	57                   	push   edi
c0022ff1:	56                   	push   esi
c0022ff2:	53                   	push   ebx
c0022ff3:	bb 04 00 00 00       	mov    ebx,0x4
c0022ff8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022ffc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023001:	52                   	push   edx
c0023002:	6a 0c                	push   0xc
c0023004:	56                   	push   esi
c0023005:	57                   	push   edi
c0023006:	e8 f9 f4 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	4b                   	dec    ebx
c002300f:	75 f0                	jne    c0023001 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023011:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023016:	50                   	push   eax
c0023017:	6a 0c                	push   0xc
c0023019:	56                   	push   esi
c002301a:	57                   	push   edi
c002301b:	e8 e4 f4 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0023020:	83 c4 10             	add    esp,0x10
c0023023:	a8 01                	test   al,0x1
c0023025:	74 12                	je     c0023039 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023027:	83 ec 0c             	sub    esp,0xc
c002302a:	68 09 bf 02 c0       	push   0xc002bf09
c002302f:	e8 bf f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023034:	83 c4 10             	add    esp,0x10
c0023037:	eb 17                	jmp    c0023050 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023039:	a8 20                	test   al,0x20
c002303b:	75 0f                	jne    c002304c <IDE::polling(unsigned char, unsigned int)+0x5c>
c002303d:	4b                   	dec    ebx
c002303e:	74 10                	je     c0023050 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023040:	84 c0                	test   al,al
c0023042:	78 d2                	js     c0023016 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023044:	a8 08                	test   al,0x8
c0023046:	74 ce                	je     c0023016 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023048:	31 c0                	xor    eax,eax
c002304a:	eb 06                	jmp    c0023052 <IDE::polling(unsigned char, unsigned int)+0x62>
c002304c:	b0 01                	mov    al,0x1
c002304e:	eb 02                	jmp    c0023052 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023050:	b0 02                	mov    al,0x2
c0023052:	5b                   	pop    ebx
c0023053:	5e                   	pop    esi
c0023054:	5f                   	pop    edi
c0023055:	c3                   	ret    

c0023056 <SATABus::close(int, int, void*)>:
c0023056:	31 c0                	xor    eax,eax
c0023058:	c3                   	ret    
c0023059:	90                   	nop

c002305a <SATABus::detect()>:
c002305a:	c3                   	ret    
c002305b:	90                   	nop

c002305c <SATABus::SATABus()>:
c002305c:	83 ec 0c             	sub    esp,0xc
c002305f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023063:	83 ec 08             	sub    esp,0x8
c0023066:	68 4c bf 02 c0       	push   0xc002bf4c
c002306b:	50                   	push   eax
c002306c:	e8 35 10 ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c0023071:	83 c4 10             	add    esp,0x10
c0023074:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	89 10                	mov    DWORD PTR [eax],edx
c002307f:	83 ec 0c             	sub    esp,0xc
c0023082:	6a 50                	push   0x50
c0023084:	e8 00 cd fe ff       	call   c000fd89 <Phys::allocateContiguousPages(int)>
c0023089:	83 c4 10             	add    esp,0x10
c002308c:	89 c2                	mov    edx,eax
c002308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023092:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	6a 50                	push   0x50
c002309d:	e8 61 e8 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00230a2:	83 c4 10             	add    esp,0x10
c00230a5:	89 c2                	mov    edx,eax
c00230a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00230b1:	e8 dd e9 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00230b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00230ba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00230c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00230c4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00230ca:	83 ec 0c             	sub    esp,0xc
c00230cd:	6a 03                	push   0x3
c00230cf:	6a 50                	push   0x50
c00230d1:	51                   	push   ecx
c00230d2:	52                   	push   edx
c00230d3:	50                   	push   eax
c00230d4:	e8 e9 f1 fe ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00230d9:	83 c4 20             	add    esp,0x20
c00230dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00230e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00230f0:	83 ec 04             	sub    esp,0x4
c00230f3:	52                   	push   edx
c00230f4:	50                   	push   eax
c00230f5:	68 70 bf 02 c0       	push   0xc002bf70
c00230fa:	e8 f4 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00230ff:	83 c4 10             	add    esp,0x10
c0023102:	90                   	nop
c0023103:	83 c4 0c             	add    esp,0xc
c0023106:	c3                   	ret    
c0023107:	90                   	nop

c0023108 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023108:	83 ec 0c             	sub    esp,0xc
c002310b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002310f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023112:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023115:	09 c2                	or     edx,eax
c0023117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023121:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023123:	31 c0                	xor    eax,eax
c0023125:	c1 e9 08             	shr    ecx,0x8
c0023128:	83 e1 0f             	and    ecx,0xf
c002312b:	39 c8                	cmp    eax,ecx
c002312d:	74 0a                	je     c0023139 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002312f:	f6 c2 01             	test   dl,0x1
c0023132:	74 18                	je     c002314c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023134:	d1 ea                	shr    edx,1
c0023136:	40                   	inc    eax
c0023137:	eb f2                	jmp    c002312b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023139:	83 ec 0c             	sub    esp,0xc
c002313c:	68 94 bf 02 c0       	push   0xc002bf94
c0023141:	e8 df 6a ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0023146:	83 c4 10             	add    esp,0x10
c0023149:	83 c8 ff             	or     eax,0xffffffff
c002314c:	83 c4 0c             	add    esp,0xc
c002314f:	c3                   	ret    

c0023150 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023154:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023157:	89 c2                	mov    edx,eax
c0023159:	c1 ea 08             	shr    edx,0x8
c002315c:	83 e2 0f             	and    edx,0xf
c002315f:	fe ca                	dec    dl
c0023161:	75 31                	jne    c0023194 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023163:	83 e0 0f             	and    eax,0xf
c0023166:	3c 03                	cmp    al,0x3
c0023168:	75 2a                	jne    c0023194 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002316a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002316d:	b8 02 00 00 00       	mov    eax,0x2
c0023172:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023178:	74 1c                	je     c0023196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002317a:	b8 04 00 00 00       	mov    eax,0x4
c002317f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023185:	74 0f                	je     c0023196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023187:	31 c0                	xor    eax,eax
c0023189:	83 fa 03             	cmp    edx,0x3
c002318c:	0f 94 c0             	sete   al
c002318f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023193:	c3                   	ret    
c0023194:	31 c0                	xor    eax,eax
c0023196:	c3                   	ret    
c0023197:	90                   	nop

c0023198 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002319c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002319f:	0f ba e2 0f          	bt     edx,0xf
c00231a3:	72 f7                	jb     c002319c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00231a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231a8:	83 ca 10             	or     edx,0x10
c00231ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231b1:	83 ca 01             	or     edx,0x1
c00231b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231b7:	c3                   	ret    

c00231b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00231b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00231bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231bf:	83 e2 fe             	and    edx,0xfffffffe
c00231c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231c8:	83 e2 ef             	and    edx,0xffffffef
c00231cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231d1:	0f ba e2 0e          	bt     edx,0xe
c00231d5:	72 f7                	jb     c00231ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00231d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231da:	0f ba e2 0f          	bt     edx,0xf
c00231de:	72 ee                	jb     c00231ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00231e0:	c3                   	ret    
c00231e1:	90                   	nop

c00231e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00231e2:	55                   	push   ebp
c00231e3:	57                   	push   edi
c00231e4:	56                   	push   esi
c00231e5:	53                   	push   ebx
c00231e6:	83 ec 1c             	sub    esp,0x1c
c00231e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00231ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00231f1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00231f5:	53                   	push   ebx
c00231f6:	89 fd                	mov    ebp,edi
c00231f8:	56                   	push   esi
c00231f9:	c1 e5 0a             	shl    ebp,0xa
c00231fc:	e8 b7 ff ff ff       	call   c00231b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023201:	83 ec 0c             	sub    esp,0xc
c0023204:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002320a:	01 e8                	add    eax,ebp
c002320c:	89 03                	mov    DWORD PTR [ebx],eax
c002320e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023210:	68 00 04 00 00       	push   0x400
c0023215:	6a 00                	push   0x0
c0023217:	50                   	push   eax
c0023218:	e8 a7 d4 fd ff       	call   c00006c4 <memset>
c002321d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023223:	89 fa                	mov    edx,edi
c0023225:	01 e8                	add    eax,ebp
c0023227:	c1 e7 0d             	shl    edi,0xd
c002322a:	89 03                	mov    DWORD PTR [ebx],eax
c002322c:	c1 e2 08             	shl    edx,0x8
c002322f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023236:	81 c2 00 80 00 00    	add    edx,0x8000
c002323c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023240:	89 d0                	mov    eax,edx
c0023242:	83 c4 1c             	add    esp,0x1c
c0023245:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002324b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002324e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023251:	68 00 01 00 00       	push   0x100
c0023256:	6a 00                	push   0x0
c0023258:	50                   	push   eax
c0023259:	e8 66 d4 fd ff       	call   c00006c4 <memset>
c002325e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023262:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023268:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002326e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023272:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023275:	83 c4 10             	add    esp,0x10
c0023278:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002327f:	31 ff                	xor    edi,edi
c0023281:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023287:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002328d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023291:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023297:	83 c5 20             	add    ebp,0x20
c002329a:	01 f8                	add    eax,edi
c002329c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002329f:	52                   	push   edx
c00232a0:	68 00 01 00 00       	push   0x100
c00232a5:	6a 00                	push   0x0
c00232a7:	50                   	push   eax
c00232a8:	e8 17 d4 fd ff       	call   c00006c4 <memset>
c00232ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232b1:	83 c4 10             	add    esp,0x10
c00232b4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00232ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00232c1:	01 f8                	add    eax,edi
c00232c3:	81 c7 00 01 00 00    	add    edi,0x100
c00232c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00232cc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00232d2:	75 b3                	jne    c0023287 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00232d4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00232d8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00232dc:	83 c4 1c             	add    esp,0x1c
c00232df:	5b                   	pop    ebx
c00232e0:	5e                   	pop    esi
c00232e1:	5f                   	pop    edi
c00232e2:	5d                   	pop    ebp
c00232e3:	e9 b0 fe ff ff       	jmp    c0023198 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00232e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00232e8:	55                   	push   ebp
c00232e9:	57                   	push   edi
c00232ea:	56                   	push   esi
c00232eb:	53                   	push   ebx
c00232ec:	31 db                	xor    ebx,ebx
c00232ee:	83 ec 0c             	sub    esp,0xc
c00232f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00232f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00232f9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00232fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0023302:	0f 84 aa 00 00 00    	je     c00233b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023308:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002330c:	89 d8                	mov    eax,ebx
c002330e:	c1 e0 07             	shl    eax,0x7
c0023311:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023318:	55                   	push   ebp
c0023319:	56                   	push   esi
c002331a:	e8 31 fe ff ff       	call   c0023150 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002331f:	5a                   	pop    edx
c0023320:	83 f8 01             	cmp    eax,0x1
c0023323:	59                   	pop    ecx
c0023324:	75 30                	jne    c0023356 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023326:	50                   	push   eax
c0023327:	50                   	push   eax
c0023328:	53                   	push   ebx
c0023329:	68 b9 bf 02 c0       	push   0xc002bfb9
c002332e:	e8 c0 f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023333:	83 c4 0c             	add    esp,0xc
c0023336:	53                   	push   ebx
c0023337:	55                   	push   ebp
c0023338:	56                   	push   esi
c0023339:	e8 a4 fe ff ff       	call   c00231e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002333e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023345:	e8 da c2 fe ff       	call   c000f624 <malloc>
c002334a:	89 c5                	mov    ebp,eax
c002334c:	89 04 24             	mov    DWORD PTR [esp],eax
c002334f:	e8 60 0d 00 00       	call   c00240b4 <SATA::SATA()>
c0023354:	eb 33                	jmp    c0023389 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023356:	83 f8 04             	cmp    eax,0x4
c0023359:	75 47                	jne    c00233a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002335b:	50                   	push   eax
c002335c:	50                   	push   eax
c002335d:	53                   	push   ebx
c002335e:	68 d0 bf 02 c0       	push   0xc002bfd0
c0023363:	e8 8b f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023368:	83 c4 0c             	add    esp,0xc
c002336b:	53                   	push   ebx
c002336c:	55                   	push   ebp
c002336d:	56                   	push   esi
c002336e:	e8 6f fe ff ff       	call   c00231e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023373:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002337a:	e8 a5 c2 fe ff       	call   c000f624 <malloc>
c002337f:	89 c5                	mov    ebp,eax
c0023381:	89 04 24             	mov    DWORD PTR [esp],eax
c0023384:	e8 53 11 00 00       	call   c00244dc <SATAPI::SATAPI()>
c0023389:	5a                   	pop    edx
c002338a:	59                   	pop    ecx
c002338b:	55                   	push   ebp
c002338c:	56                   	push   esi
c002338d:	e8 88 09 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0023392:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023395:	56                   	push   esi
c0023396:	6a 00                	push   0x0
c0023398:	53                   	push   ebx
c0023399:	55                   	push   ebp
c002339a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002339d:	83 c4 20             	add    esp,0x20
c00233a0:	eb 10                	jmp    c00233b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00233a2:	50                   	push   eax
c00233a3:	50                   	push   eax
c00233a4:	53                   	push   ebx
c00233a5:	68 e9 bf 02 c0       	push   0xc002bfe9
c00233aa:	e8 44 f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00233af:	83 c4 10             	add    esp,0x10
c00233b2:	d1 ef                	shr    edi,1
c00233b4:	43                   	inc    ebx
c00233b5:	83 fb 20             	cmp    ebx,0x20
c00233b8:	0f 85 3e ff ff ff    	jne    c00232fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00233be:	83 c4 0c             	add    esp,0xc
c00233c1:	5b                   	pop    ebx
c00233c2:	5e                   	pop    esi
c00233c3:	5f                   	pop    edi
c00233c4:	5d                   	pop    ebp
c00233c5:	c3                   	ret    

c00233c6 <SATABus::open(int, int, void*)>:
c00233c6:	83 ec 14             	sub    esp,0x14
c00233c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233cd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00233d3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00233d9:	52                   	push   edx
c00233da:	50                   	push   eax
c00233db:	e8 08 ff ff ff       	call   c00232e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00233e0:	31 c0                	xor    eax,eax
c00233e2:	83 c4 1c             	add    esp,0x1c
c00233e5:	c3                   	ret    

c00233e6 <ATA::close(int, int, void*)>:
c00233e6:	83 ec 0c             	sub    esp,0xc
c00233e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00233f3:	85 c0                	test   eax,eax
c00233f5:	74 0c                	je     c0023403 <ATA::close(int, int, void*)+0x1d>
c00233f7:	83 ec 0c             	sub    esp,0xc
c00233fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00233fc:	50                   	push   eax
c00233fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023400:	83 c4 10             	add    esp,0x10
c0023403:	31 c0                	xor    eax,eax
c0023405:	83 c4 0c             	add    esp,0xc
c0023408:	c3                   	ret    
c0023409:	90                   	nop

c002340a <ATA::powerSaving(PowerSavingLevel)>:
c002340a:	c3                   	ret    
c002340b:	90                   	nop

c002340c <ATA::ATA()>:
c002340c:	83 ec 0c             	sub    esp,0xc
c002340f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023413:	83 ec 04             	sub    esp,0x4
c0023416:	68 00 02 00 00       	push   0x200
c002341b:	68 d8 c0 02 c0       	push   0xc002c0d8
c0023420:	50                   	push   eax
c0023421:	e8 04 0d ff ff       	call   c001412a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023426:	83 c4 10             	add    esp,0x10
c0023429:	ba 48 c0 02 c0       	mov    edx,0xc002c048
c002342e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023432:	89 10                	mov    DWORD PTR [eax],edx
c0023434:	90                   	nop
c0023435:	83 c4 0c             	add    esp,0xc
c0023438:	c3                   	ret    
c0023439:	90                   	nop

c002343a <ATA::flush(bool)>:
c002343a:	53                   	push   ebx
c002343b:	83 ec 08             	sub    esp,0x8
c002343e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023447:	19 c0                	sbb    eax,eax
c0023449:	83 e0 fd             	and    eax,0xfffffffd
c002344c:	05 ea 00 00 00       	add    eax,0xea
c0023451:	50                   	push   eax
c0023452:	6a 07                	push   0x7
c0023454:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002345b:	50                   	push   eax
c002345c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023462:	e8 dd ef ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023467:	83 c4 0c             	add    esp,0xc
c002346a:	6a 00                	push   0x0
c002346c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023473:	50                   	push   eax
c0023474:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002347a:	e8 71 fb ff ff       	call   c0022ff0 <IDE::polling(unsigned char, unsigned int)>
c002347f:	83 c4 18             	add    esp,0x18
c0023482:	5b                   	pop    ebx
c0023483:	c3                   	ret    

c0023484 <ATA::readyForCommand()>:
c0023484:	56                   	push   esi
c0023485:	53                   	push   ebx
c0023486:	31 db                	xor    ebx,ebx
c0023488:	50                   	push   eax
c0023489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002348d:	50                   	push   eax
c002348e:	6a 0c                	push   0xc
c0023490:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023497:	50                   	push   eax
c0023498:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002349e:	e8 61 f0 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c00234a3:	83 c4 10             	add    esp,0x10
c00234a6:	a8 88                	test   al,0x88
c00234a8:	74 23                	je     c00234cd <ATA::readyForCommand()+0x49>
c00234aa:	43                   	inc    ebx
c00234ab:	83 fb 63             	cmp    ebx,0x63
c00234ae:	7e dd                	jle    c002348d <ATA::readyForCommand()+0x9>
c00234b0:	51                   	push   ecx
c00234b1:	51                   	push   ecx
c00234b2:	6a 00                	push   0x0
c00234b4:	68 40 42 0f 00       	push   0xf4240
c00234b9:	e8 c8 a2 ff ff       	call   c001d786 <nanoSleep(unsigned long long)>
c00234be:	83 c4 10             	add    esp,0x10
c00234c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00234c7:	75 c4                	jne    c002348d <ATA::readyForCommand()+0x9>
c00234c9:	31 c0                	xor    eax,eax
c00234cb:	eb 02                	jmp    c00234cf <ATA::readyForCommand()+0x4b>
c00234cd:	b0 01                	mov    al,0x1
c00234cf:	5a                   	pop    edx
c00234d0:	5b                   	pop    ebx
c00234d1:	5e                   	pop    esi
c00234d2:	c3                   	ret    
c00234d3:	90                   	nop

c00234d4 <ATA::access(unsigned long long, int, void*, bool)>:
c00234d4:	55                   	push   ebp
c00234d5:	57                   	push   edi
c00234d6:	56                   	push   esi
c00234d7:	53                   	push   ebx
c00234d8:	83 ec 2c             	sub    esp,0x2c
c00234db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00234df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00234e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00234e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00234eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00234ef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00234f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00234fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023501:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023507:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002350b:	c1 e0 06             	shl    eax,0x6
c002350e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023516:	74 5d                	je     c0023575 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023518:	89 fa                	mov    edx,edi
c002351a:	89 f0                	mov    eax,esi
c002351c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023520:	c1 ea 1c             	shr    edx,0x1c
c0023523:	89 d1                	mov    ecx,edx
c0023525:	09 c1                	or     ecx,eax
c0023527:	74 25                	je     c002354e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023529:	31 ed                	xor    ebp,ebp
c002352b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023532:	89 fa                	mov    edx,edi
c0023534:	89 f0                	mov    eax,esi
c0023536:	0f ad d0             	shrd   eax,edx,cl
c0023539:	d3 ea                	shr    edx,cl
c002353b:	f6 c1 20             	test   cl,0x20
c002353e:	74 02                	je     c0023542 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023540:	89 d0                	mov    eax,edx
c0023542:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023546:	45                   	inc    ebp
c0023547:	83 fd 06             	cmp    ebp,0x6
c002354a:	75 df                	jne    c002352b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002354c:	eb 76                	jmp    c00235c4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002354e:	89 f0                	mov    eax,esi
c0023550:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023555:	89 fa                	mov    edx,edi
c0023557:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002355e:	0f ac d0 10          	shrd   eax,edx,0x10
c0023562:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023567:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002356b:	c1 ee 18             	shr    esi,0x18
c002356e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023573:	eb 56                	jmp    c00235cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023575:	6a 00                	push   0x0
c0023577:	6a 3f                	push   0x3f
c0023579:	57                   	push   edi
c002357a:	56                   	push   esi
c002357b:	e8 dc 29 00 00       	call   c0025f5c <__umoddi3>
c0023580:	83 c4 10             	add    esp,0x10
c0023583:	40                   	inc    eax
c0023584:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023588:	6a 00                	push   0x0
c002358a:	68 f0 03 00 00       	push   0x3f0
c002358f:	57                   	push   edi
c0023590:	56                   	push   esi
c0023591:	e8 c6 28 00 00       	call   c0025e5c <__udivdi3>
c0023596:	83 c4 10             	add    esp,0x10
c0023599:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002359e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00235a5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00235aa:	6a 00                	push   0x0
c00235ac:	6a 3f                	push   0x3f
c00235ae:	57                   	push   edi
c00235af:	56                   	push   esi
c00235b0:	e8 a7 28 00 00       	call   c0025e5c <__udivdi3>
c00235b5:	83 c4 10             	add    esp,0x10
c00235b8:	89 c6                	mov    esi,eax
c00235ba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00235bf:	83 e6 0f             	and    esi,0xf
c00235c2:	eb 07                	jmp    c00235cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00235c4:	31 f6                	xor    esi,esi
c00235c6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00235cb:	bf 01 00 00 00       	mov    edi,0x1
c00235d0:	50                   	push   eax
c00235d1:	6a 00                	push   0x0
c00235d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235da:	50                   	push   eax
c00235db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00235df:	e8 6c f0 ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c00235e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235e7:	e8 98 fe ff ff       	call   c0023484 <ATA::readyForCommand()>
c00235ec:	83 c4 10             	add    esp,0x10
c00235ef:	84 c0                	test   al,al
c00235f1:	0f 84 50 02 00 00    	je     c0023847 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00235f7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00235fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023603:	c1 e0 04             	shl    eax,0x4
c0023606:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002360d:	09 c6                	or     esi,eax
c002360f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023614:	75 05                	jne    c002361b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023616:	83 ce a0             	or     esi,0xffffffa0
c0023619:	eb 03                	jmp    c002361e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002361b:	83 ce e0             	or     esi,0xffffffe0
c002361e:	89 f0                	mov    eax,esi
c0023620:	0f b6 f0             	movzx  esi,al
c0023623:	56                   	push   esi
c0023624:	6a 06                	push   0x6
c0023626:	51                   	push   ecx
c0023627:	52                   	push   edx
c0023628:	e8 17 ee ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002362d:	83 c4 10             	add    esp,0x10
c0023630:	6a 00                	push   0x0
c0023632:	6a 01                	push   0x1
c0023634:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002363b:	50                   	push   eax
c002363c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023642:	e8 fd ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023647:	83 c4 10             	add    esp,0x10
c002364a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002364f:	75 6e                	jne    c00236bf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023651:	6a 00                	push   0x0
c0023653:	6a 08                	push   0x8
c0023655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002365c:	50                   	push   eax
c002365d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023663:	e8 dc ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023668:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002366d:	50                   	push   eax
c002366e:	6a 09                	push   0x9
c0023670:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023677:	50                   	push   eax
c0023678:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002367e:	e8 c1 ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023683:	83 c4 20             	add    esp,0x20
c0023686:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002368b:	50                   	push   eax
c002368c:	6a 0a                	push   0xa
c002368e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023695:	50                   	push   eax
c0023696:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002369c:	e8 a3 ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00236a6:	50                   	push   eax
c00236a7:	6a 0b                	push   0xb
c00236a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236b0:	50                   	push   eax
c00236b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236b7:	e8 88 ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236bc:	83 c4 20             	add    esp,0x20
c00236bf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00236c4:	50                   	push   eax
c00236c5:	6a 02                	push   0x2
c00236c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236ce:	50                   	push   eax
c00236cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236d5:	e8 6a ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236da:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00236df:	50                   	push   eax
c00236e0:	6a 03                	push   0x3
c00236e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236e9:	50                   	push   eax
c00236ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236f0:	e8 4f ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f5:	83 c4 20             	add    esp,0x20
c00236f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00236fd:	50                   	push   eax
c00236fe:	6a 04                	push   0x4
c0023700:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023707:	50                   	push   eax
c0023708:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002370e:	e8 31 ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023718:	50                   	push   eax
c0023719:	6a 05                	push   0x5
c002371b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023722:	50                   	push   eax
c0023723:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023729:	e8 16 ed ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372e:	83 c4 20             	add    esp,0x20
c0023731:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023736:	0f 94 c0             	sete   al
c0023739:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002373e:	74 09                	je     c0023749 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023740:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023747:	eb 07                	jmp    c0023750 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023749:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023750:	0f b6 c0             	movzx  eax,al
c0023753:	50                   	push   eax
c0023754:	6a 07                	push   0x7
c0023756:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002375d:	50                   	push   eax
c002375e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023764:	e8 db ec ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023769:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002376d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023771:	83 c4 10             	add    esp,0x10
c0023774:	85 f6                	test   esi,esi
c0023776:	0f 84 ac 00 00 00    	je     c0023828 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002377c:	50                   	push   eax
c002377d:	6a 01                	push   0x1
c002377f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023786:	50                   	push   eax
c0023787:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002378d:	e8 5e f8 ff ff       	call   c0022ff0 <IDE::polling(unsigned char, unsigned int)>
c0023792:	83 c4 10             	add    esp,0x10
c0023795:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002379b:	84 c0                	test   al,al
c002379d:	74 20                	je     c00237bf <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002379f:	0f b6 f8             	movzx  edi,al
c00237a2:	0f b6 d2             	movzx  edx,dl
c00237a5:	57                   	push   edi
c00237a6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00237ad:	50                   	push   eax
c00237ae:	52                   	push   edx
c00237af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237b5:	e8 a0 f6 ff ff       	call   c0022e5a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00237ba:	e9 85 00 00 00       	jmp    c0023844 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00237bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00237c4:	74 41                	je     c0023807 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00237c6:	31 c9                	xor    ecx,ecx
c00237c8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00237cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00237d0:	50                   	push   eax
c00237d1:	50                   	push   eax
c00237d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00237d9:	50                   	push   eax
c00237da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237e0:	e8 4d ec ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c00237e5:	89 c2                	mov    edx,eax
c00237e7:	89 e8                	mov    eax,ebp
c00237e9:	66 ef                	out    dx,ax
c00237eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00237ef:	83 c4 10             	add    esp,0x10
c00237f2:	41                   	inc    ecx
c00237f3:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00237f9:	75 cd                	jne    c00237c8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00237fb:	4e                   	dec    esi
c00237fc:	81 c7 00 02 00 00    	add    edi,0x200
c0023802:	e9 6d ff ff ff       	jmp    c0023774 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023807:	0f b6 d2             	movzx  edx,dl
c002380a:	51                   	push   ecx
c002380b:	51                   	push   ecx
c002380c:	52                   	push   edx
c002380d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023813:	e8 1a ec ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c0023818:	b9 00 01 00 00       	mov    ecx,0x100
c002381d:	89 c2                	mov    edx,eax
c002381f:	fc                   	cld    
c0023820:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023823:	83 c4 10             	add    esp,0x10
c0023826:	eb d3                	jmp    c00237fb <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023828:	31 ff                	xor    edi,edi
c002382a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002382f:	74 16                	je     c0023847 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023831:	50                   	push   eax
c0023832:	50                   	push   eax
c0023833:	31 c0                	xor    eax,eax
c0023835:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002383a:	0f 94 c0             	sete   al
c002383d:	50                   	push   eax
c002383e:	53                   	push   ebx
c002383f:	e8 f6 fb ff ff       	call   c002343a <ATA::flush(bool)>
c0023844:	83 c4 10             	add    esp,0x10
c0023847:	83 c4 2c             	add    esp,0x2c
c002384a:	89 f8                	mov    eax,edi
c002384c:	5b                   	pop    ebx
c002384d:	5e                   	pop    esi
c002384e:	5f                   	pop    edi
c002384f:	5d                   	pop    ebp
c0023850:	c3                   	ret    
c0023851:	90                   	nop

c0023852 <ATA::read(unsigned long long, int, void*)>:
c0023852:	57                   	push   edi
c0023853:	b8 04 00 00 00       	mov    eax,0x4
c0023858:	56                   	push   esi
c0023859:	53                   	push   ebx
c002385a:	83 ec 10             	sub    esp,0x10
c002385d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023861:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023865:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023868:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002386c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023870:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023876:	77 3b                	ja     c00238b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023878:	b8 06 00 00 00       	mov    eax,0x6
c002387d:	85 d2                	test   edx,edx
c002387f:	74 32                	je     c00238b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023881:	50                   	push   eax
c0023882:	50                   	push   eax
c0023883:	6a 00                	push   0x0
c0023885:	52                   	push   edx
c0023886:	53                   	push   ebx
c0023887:	57                   	push   edi
c0023888:	56                   	push   esi
c0023889:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002388d:	e8 42 fc ff ff       	call   c00234d4 <ATA::access(unsigned long long, int, void*, bool)>
c0023892:	83 c4 20             	add    esp,0x20
c0023895:	85 c0                	test   eax,eax
c0023897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002389b:	75 11                	jne    c00238ae <ATA::read(unsigned long long, int, void*)+0x5c>
c002389d:	01 1d e8 f9 02 c0    	add    DWORD PTR ds:0xc002f9e8,ebx
c00238a3:	e8 b0 ce fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c00238a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238ac:	eb 05                	jmp    c00238b3 <ATA::read(unsigned long long, int, void*)+0x61>
c00238ae:	b8 01 00 00 00       	mov    eax,0x1
c00238b3:	83 c4 10             	add    esp,0x10
c00238b6:	5b                   	pop    ebx
c00238b7:	5e                   	pop    esi
c00238b8:	5f                   	pop    edi
c00238b9:	c3                   	ret    

c00238ba <ATA::write(unsigned long long, int, void*)>:
c00238ba:	57                   	push   edi
c00238bb:	b8 04 00 00 00       	mov    eax,0x4
c00238c0:	56                   	push   esi
c00238c1:	53                   	push   ebx
c00238c2:	83 ec 10             	sub    esp,0x10
c00238c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00238c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00238cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00238d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00238d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00238de:	77 3b                	ja     c002391b <ATA::write(unsigned long long, int, void*)+0x61>
c00238e0:	b8 06 00 00 00       	mov    eax,0x6
c00238e5:	85 d2                	test   edx,edx
c00238e7:	74 32                	je     c002391b <ATA::write(unsigned long long, int, void*)+0x61>
c00238e9:	50                   	push   eax
c00238ea:	50                   	push   eax
c00238eb:	6a 01                	push   0x1
c00238ed:	52                   	push   edx
c00238ee:	53                   	push   ebx
c00238ef:	57                   	push   edi
c00238f0:	56                   	push   esi
c00238f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00238f5:	e8 da fb ff ff       	call   c00234d4 <ATA::access(unsigned long long, int, void*, bool)>
c00238fa:	83 c4 20             	add    esp,0x20
c00238fd:	85 c0                	test   eax,eax
c00238ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023903:	75 11                	jne    c0023916 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023905:	01 1d e4 f9 02 c0    	add    DWORD PTR ds:0xc002f9e4,ebx
c002390b:	e8 48 ce fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0023910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023914:	eb 05                	jmp    c002391b <ATA::write(unsigned long long, int, void*)+0x61>
c0023916:	b8 01 00 00 00       	mov    eax,0x1
c002391b:	83 c4 10             	add    esp,0x10
c002391e:	5b                   	pop    ebx
c002391f:	5e                   	pop    esi
c0023920:	5f                   	pop    edi
c0023921:	c3                   	ret    

c0023922 <ATA::detectCHS()>:
c0023922:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023926:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002392c:	c1 e0 06             	shl    eax,0x6
c002392f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023935:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002393f:	c7 44 24 04 2c c0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c02c
c0023947:	e9 d9 62 ff ff       	jmp    c0019c25 <Krnl::panic(char const*)>

c002394c <ATA::open(int, int, void*)>:
c002394c:	53                   	push   ebx
c002394d:	83 ec 08             	sub    esp,0x8
c0023950:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023954:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023958:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002395c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023962:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023968:	c1 e0 06             	shl    eax,0x6
c002396b:	01 d0                	add    eax,edx
c002396d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023974:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002397a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023981:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002398b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023991:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023998:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002399f:	75 0c                	jne    c00239ad <ATA::open(int, int, void*)+0x61>
c00239a1:	83 ec 0c             	sub    esp,0xc
c00239a4:	53                   	push   ebx
c00239a5:	e8 78 ff ff ff       	call   c0023922 <ATA::detectCHS()>
c00239aa:	83 c4 10             	add    esp,0x10
c00239ad:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00239b3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00239b9:	c1 e0 06             	shl    eax,0x6
c00239bc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00239c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00239cd:	d1 e8                	shr    eax,1
c00239cf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00239d5:	6a 04                	push   0x4
c00239d7:	6a 0c                	push   0xc
c00239d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239e0:	50                   	push   eax
c00239e1:	52                   	push   edx
c00239e2:	e8 5d ea ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e7:	90                   	nop
c00239e8:	90                   	nop
c00239e9:	6a 00                	push   0x0
c00239eb:	6a 0c                	push   0xc
c00239ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239f4:	50                   	push   eax
c00239f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239fb:	e8 44 ea ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a00:	83 c4 14             	add    esp,0x14
c0023a03:	53                   	push   ebx
c0023a04:	e8 89 07 ff ff       	call   c0014192 <PhysicalDisk::startCache()>
c0023a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a0c:	e8 4f 28 ff ff       	call   c0016260 <createPartitionsForDisk(PhysicalDisk*)>
c0023a11:	31 c0                	xor    eax,eax
c0023a13:	83 c4 18             	add    esp,0x18
c0023a16:	5b                   	pop    ebx
c0023a17:	c3                   	ret    

c0023a18 <ATAPI::write(unsigned long long, int, void*)>:
c0023a18:	b8 03 00 00 00       	mov    eax,0x3
c0023a1d:	c3                   	ret    

c0023a1e <ATAPI::close(int, int, void*)>:
c0023a1e:	83 ec 0c             	sub    esp,0xc
c0023a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023a2b:	85 c0                	test   eax,eax
c0023a2d:	74 0c                	je     c0023a3b <ATAPI::close(int, int, void*)+0x1d>
c0023a2f:	83 ec 0c             	sub    esp,0xc
c0023a32:	8b 10                	mov    edx,DWORD PTR [eax]
c0023a34:	50                   	push   eax
c0023a35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	31 c0                	xor    eax,eax
c0023a3d:	83 c4 0c             	add    esp,0xc
c0023a40:	c3                   	ret    
c0023a41:	90                   	nop

c0023a42 <ATAPI::ATAPI()>:
c0023a42:	83 ec 0c             	sub    esp,0xc
c0023a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a49:	83 ec 04             	sub    esp,0x4
c0023a4c:	68 00 08 00 00       	push   0x800
c0023a51:	68 b1 c1 02 c0       	push   0xc002c1b1
c0023a56:	50                   	push   eax
c0023a57:	e8 ce 06 ff ff       	call   c001412a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023a5c:	83 c4 10             	add    esp,0x10
c0023a5f:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0023a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a68:	89 10                	mov    DWORD PTR [eax],edx
c0023a6a:	90                   	nop
c0023a6b:	83 c4 0c             	add    esp,0xc
c0023a6e:	c3                   	ret    
c0023a6f:	90                   	nop

c0023a70 <ATAPI::readyForCommand()>:
c0023a70:	56                   	push   esi
c0023a71:	53                   	push   ebx
c0023a72:	31 db                	xor    ebx,ebx
c0023a74:	50                   	push   eax
c0023a75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023a79:	50                   	push   eax
c0023a7a:	6a 0c                	push   0xc
c0023a7c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023a83:	50                   	push   eax
c0023a84:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023a8a:	e8 75 ea ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0023a8f:	83 c4 10             	add    esp,0x10
c0023a92:	a8 88                	test   al,0x88
c0023a94:	74 23                	je     c0023ab9 <ATAPI::readyForCommand()+0x49>
c0023a96:	43                   	inc    ebx
c0023a97:	83 fb 63             	cmp    ebx,0x63
c0023a9a:	7e dd                	jle    c0023a79 <ATAPI::readyForCommand()+0x9>
c0023a9c:	51                   	push   ecx
c0023a9d:	51                   	push   ecx
c0023a9e:	6a 00                	push   0x0
c0023aa0:	68 40 42 0f 00       	push   0xf4240
c0023aa5:	e8 dc 9c ff ff       	call   c001d786 <nanoSleep(unsigned long long)>
c0023aaa:	83 c4 10             	add    esp,0x10
c0023aad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ab3:	75 c4                	jne    c0023a79 <ATAPI::readyForCommand()+0x9>
c0023ab5:	31 c0                	xor    eax,eax
c0023ab7:	eb 02                	jmp    c0023abb <ATAPI::readyForCommand()+0x4b>
c0023ab9:	b0 01                	mov    al,0x1
c0023abb:	5a                   	pop    edx
c0023abc:	5b                   	pop    ebx
c0023abd:	5e                   	pop    esi
c0023abe:	c3                   	ret    
c0023abf:	90                   	nop

c0023ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023ac0:	55                   	push   ebp
c0023ac1:	57                   	push   edi
c0023ac2:	56                   	push   esi
c0023ac3:	53                   	push   ebx
c0023ac4:	83 ec 20             	sub    esp,0x20
c0023ac7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023acb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023acf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023ad3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023ad7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023adb:	6a 01                	push   0x1
c0023add:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ae4:	50                   	push   eax
c0023ae5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023aeb:	e8 60 eb ff ff       	call   c0022650 <IDE::enableIRQs(unsigned char, bool)>
c0023af0:	5e                   	pop    esi
c0023af1:	58                   	pop    eax
c0023af2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023af9:	50                   	push   eax
c0023afa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b00:	e8 19 e9 ff ff       	call   c002241e <IDE::prepareInterrupt(unsigned char)>
c0023b05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023b08:	e8 63 ff ff ff       	call   c0023a70 <ATAPI::readyForCommand()>
c0023b0d:	83 c4 10             	add    esp,0x10
c0023b10:	84 c0                	test   al,al
c0023b12:	75 0a                	jne    c0023b1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023b14:	bb 01 00 00 00       	mov    ebx,0x1
c0023b19:	e9 57 02 00 00       	jmp    c0023d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023b1e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023b24:	c1 e0 04             	shl    eax,0x4
c0023b27:	0f b6 c0             	movzx  eax,al
c0023b2a:	50                   	push   eax
c0023b2b:	6a 06                	push   0x6
c0023b2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b34:	50                   	push   eax
c0023b35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b3b:	e8 04 e9 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b40:	6a 00                	push   0x0
c0023b42:	6a 01                	push   0x1
c0023b44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b4b:	50                   	push   eax
c0023b4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b52:	e8 ed e8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b57:	83 c4 20             	add    esp,0x20
c0023b5a:	0f b6 c3             	movzx  eax,bl
c0023b5d:	0f b6 df             	movzx  ebx,bh
c0023b60:	50                   	push   eax
c0023b61:	6a 04                	push   0x4
c0023b63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b6a:	50                   	push   eax
c0023b6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b71:	e8 ce e8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b76:	53                   	push   ebx
c0023b77:	6a 05                	push   0x5
c0023b79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b80:	50                   	push   eax
c0023b81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b87:	e8 b8 e8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b8c:	83 c4 20             	add    esp,0x20
c0023b8f:	68 a0 00 00 00       	push   0xa0
c0023b94:	6a 07                	push   0x7
c0023b96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b9d:	50                   	push   eax
c0023b9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ba4:	e8 9b e8 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ba9:	83 c4 0c             	add    esp,0xc
c0023bac:	6a 01                	push   0x1
c0023bae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023bb5:	50                   	push   eax
c0023bb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bbc:	e8 2f f4 ff ff       	call   c0022ff0 <IDE::polling(unsigned char, unsigned int)>
c0023bc1:	83 c4 10             	add    esp,0x10
c0023bc4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023bca:	84 c0                	test   al,al
c0023bcc:	74 23                	je     c0023bf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023bce:	0f b6 d8             	movzx  ebx,al
c0023bd1:	0f b6 d2             	movzx  edx,dl
c0023bd4:	53                   	push   ebx
c0023bd5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023bdc:	50                   	push   eax
c0023bdd:	52                   	push   edx
c0023bde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023be4:	e8 71 f2 ff ff       	call   c0022e5a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023be9:	83 c4 10             	add    esp,0x10
c0023bec:	e9 84 01 00 00       	jmp    c0023d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023bf1:	0f b6 d2             	movzx  edx,dl
c0023bf4:	53                   	push   ebx
c0023bf5:	53                   	push   ebx
c0023bf6:	52                   	push   edx
c0023bf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bfd:	e8 30 e8 ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c0023c02:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023c06:	b9 06 00 00 00       	mov    ecx,0x6
c0023c0b:	89 c2                	mov    edx,eax
c0023c0d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023c10:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023c1d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023c24:	85 db                	test   ebx,ebx
c0023c26:	0f 84 ec 00 00 00    	je     c0023d18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023c2c:	51                   	push   ecx
c0023c2d:	51                   	push   ecx
c0023c2e:	52                   	push   edx
c0023c2f:	50                   	push   eax
c0023c30:	e8 7d e9 ff ff       	call   c00225b2 <IDE::waitInterrupt(unsigned char)>
c0023c35:	83 c4 10             	add    esp,0x10
c0023c38:	84 c0                	test   al,al
c0023c3a:	0f 84 d4 fe ff ff    	je     c0023b14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023c40:	56                   	push   esi
c0023c41:	56                   	push   esi
c0023c42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c49:	50                   	push   eax
c0023c4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c50:	e8 c9 e7 ff ff       	call   c002241e <IDE::prepareInterrupt(unsigned char)>
c0023c55:	83 c4 0c             	add    esp,0xc
c0023c58:	6a 04                	push   0x4
c0023c5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c61:	50                   	push   eax
c0023c62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c68:	e8 97 e8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0023c6d:	83 c4 0c             	add    esp,0xc
c0023c70:	89 c6                	mov    esi,eax
c0023c72:	6a 05                	push   0x5
c0023c74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c7b:	50                   	push   eax
c0023c7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c82:	e8 7d e8 ff ff       	call   c0022504 <IDE::read(unsigned char, unsigned char)>
c0023c87:	89 f1                	mov    ecx,esi
c0023c89:	0f b6 c0             	movzx  eax,al
c0023c8c:	0f b6 f1             	movzx  esi,cl
c0023c8f:	c1 e0 08             	shl    eax,0x8
c0023c92:	09 c6                	or     esi,eax
c0023c94:	d1 fe                	sar    esi,1
c0023c96:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023c9a:	83 c4 10             	add    esp,0x10
c0023c9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023ca2:	74 41                	je     c0023ce5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023ca4:	31 c9                	xor    ecx,ecx
c0023ca6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023cac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023cb3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023cb7:	75 0a                	jne    c0023cc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023cb9:	01 c9                	add    ecx,ecx
c0023cbb:	01 cd                	add    ebp,ecx
c0023cbd:	4b                   	dec    ebx
c0023cbe:	e9 54 ff ff ff       	jmp    c0023c17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023cc3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023cc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ccc:	51                   	push   ecx
c0023ccd:	51                   	push   ecx
c0023cce:	52                   	push   edx
c0023ccf:	50                   	push   eax
c0023cd0:	e8 5d e7 ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c0023cd5:	89 c2                	mov    edx,eax
c0023cd7:	89 f0                	mov    eax,esi
c0023cd9:	66 ef                	out    dx,ax
c0023cdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023cdf:	83 c4 10             	add    esp,0x10
c0023ce2:	41                   	inc    ecx
c0023ce3:	eb c1                	jmp    c0023ca6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023ce5:	31 f6                	xor    esi,esi
c0023ce7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023ced:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023cf4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023cf8:	75 06                	jne    c0023d00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023cfa:	01 f6                	add    esi,esi
c0023cfc:	01 f5                	add    ebp,esi
c0023cfe:	eb bd                	jmp    c0023cbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023d00:	51                   	push   ecx
c0023d01:	51                   	push   ecx
c0023d02:	52                   	push   edx
c0023d03:	50                   	push   eax
c0023d04:	e8 29 e7 ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c0023d09:	89 c2                	mov    edx,eax
c0023d0b:	66 ed                	in     ax,dx
c0023d0d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023d12:	83 c4 10             	add    esp,0x10
c0023d15:	46                   	inc    esi
c0023d16:	eb cf                	jmp    c0023ce7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023d18:	51                   	push   ecx
c0023d19:	51                   	push   ecx
c0023d1a:	52                   	push   edx
c0023d1b:	50                   	push   eax
c0023d1c:	e8 91 e8 ff ff       	call   c00225b2 <IDE::waitInterrupt(unsigned char)>
c0023d21:	83 c4 10             	add    esp,0x10
c0023d24:	84 c0                	test   al,al
c0023d26:	0f 84 e8 fd ff ff    	je     c0023b14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023d2c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d31:	52                   	push   edx
c0023d32:	52                   	push   edx
c0023d33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d3a:	50                   	push   eax
c0023d3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d41:	e8 d8 e6 ff ff       	call   c002241e <IDE::prepareInterrupt(unsigned char)>
c0023d46:	83 c4 10             	add    esp,0x10
c0023d49:	50                   	push   eax
c0023d4a:	50                   	push   eax
c0023d4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d52:	50                   	push   eax
c0023d53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d59:	e8 d4 e6 ff ff       	call   c0022432 <IDE::getBase(unsigned char)>
c0023d5e:	8d 50 07             	lea    edx,[eax+0x7]
c0023d61:	ec                   	in     al,dx
c0023d62:	83 c4 10             	add    esp,0x10
c0023d65:	a8 88                	test   al,0x88
c0023d67:	74 0a                	je     c0023d73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023d69:	4b                   	dec    ebx
c0023d6a:	75 dd                	jne    c0023d49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023d6c:	bb 02 00 00 00       	mov    ebx,0x2
c0023d71:	eb 02                	jmp    c0023d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023d73:	31 db                	xor    ebx,ebx
c0023d75:	83 c4 1c             	add    esp,0x1c
c0023d78:	89 d8                	mov    eax,ebx
c0023d7a:	5b                   	pop    ebx
c0023d7b:	5e                   	pop    esi
c0023d7c:	5f                   	pop    edi
c0023d7d:	5d                   	pop    ebp
c0023d7e:	c3                   	ret    
c0023d7f:	90                   	nop

c0023d80 <ATAPI::diskRemoved()>:
c0023d80:	83 ec 18             	sub    esp,0x18
c0023d83:	68 bd c1 02 c0       	push   0xc002c1bd
c0023d88:	e8 66 eb fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d91:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023d98:	83 c4 1c             	add    esp,0x1c
c0023d9b:	c3                   	ret    

c0023d9c <ATAPI::eject()>:
c0023d9c:	57                   	push   edi
c0023d9d:	b9 03 00 00 00       	mov    ecx,0x3
c0023da2:	53                   	push   ebx
c0023da3:	83 ec 14             	sub    esp,0x14
c0023da6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023daa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023dae:	fc                   	cld    
c0023daf:	31 c0                	xor    eax,eax
c0023db1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023db3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023db8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023dbd:	50                   	push   eax
c0023dbe:	50                   	push   eax
c0023dbf:	6a 00                	push   0x0
c0023dc1:	6a 00                	push   0x0
c0023dc3:	6a 00                	push   0x0
c0023dc5:	6a 02                	push   0x2
c0023dc7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023dcb:	50                   	push   eax
c0023dcc:	53                   	push   ebx
c0023dcd:	e8 ee fc ff ff       	call   c0023ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023dd2:	83 c4 14             	add    esp,0x14
c0023dd5:	53                   	push   ebx
c0023dd6:	e8 a5 ff ff ff       	call   c0023d80 <ATAPI::diskRemoved()>
c0023ddb:	83 c4 24             	add    esp,0x24
c0023dde:	5b                   	pop    ebx
c0023ddf:	5f                   	pop    edi
c0023de0:	c3                   	ret    
c0023de1:	90                   	nop

c0023de2 <ATAPI::diskInserted()>:
c0023de2:	53                   	push   ebx
c0023de3:	83 ec 14             	sub    esp,0x14
c0023de6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023dea:	68 d4 c1 02 c0       	push   0xc002c1d4
c0023def:	e8 ff ea fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023df4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023dfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dfe:	e8 8f 03 ff ff       	call   c0014192 <PhysicalDisk::startCache()>
c0023e03:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023e07:	83 c4 18             	add    esp,0x18
c0023e0a:	5b                   	pop    ebx
c0023e0b:	e9 50 24 ff ff       	jmp    c0016260 <createPartitionsForDisk(PhysicalDisk*)>

c0023e10 <ATAPI::detectMedia()>:
c0023e10:	56                   	push   esi
c0023e11:	53                   	push   ebx
c0023e12:	83 ec 28             	sub    esp,0x28
c0023e15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e19:	6a 0c                	push   0xc
c0023e1b:	6a 00                	push   0x0
c0023e1d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023e21:	56                   	push   esi
c0023e22:	e8 9d c8 fd ff       	call   c00006c4 <memset>
c0023e27:	58                   	pop    eax
c0023e28:	5a                   	pop    edx
c0023e29:	6a 00                	push   0x0
c0023e2b:	6a 00                	push   0x0
c0023e2d:	6a 00                	push   0x0
c0023e2f:	6a 00                	push   0x0
c0023e31:	56                   	push   esi
c0023e32:	53                   	push   ebx
c0023e33:	e8 88 fc ff ff       	call   c0023ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e38:	83 c4 1c             	add    esp,0x1c
c0023e3b:	6a 0c                	push   0xc
c0023e3d:	6a 00                	push   0x0
c0023e3f:	56                   	push   esi
c0023e40:	e8 7f c8 fd ff       	call   c00006c4 <memset>
c0023e45:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023e4a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023e4f:	59                   	pop    ecx
c0023e50:	58                   	pop    eax
c0023e51:	6a 01                	push   0x1
c0023e53:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023e57:	50                   	push   eax
c0023e58:	6a 00                	push   0x0
c0023e5a:	6a 12                	push   0x12
c0023e5c:	56                   	push   esi
c0023e5d:	53                   	push   ebx
c0023e5e:	e8 5d fc ff ff       	call   c0023ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023e67:	83 c4 20             	add    esp,0x20
c0023e6a:	83 e0 7f             	and    eax,0x7f
c0023e6d:	3c 70                	cmp    al,0x70
c0023e6f:	74 15                	je     c0023e86 <ATAPI::detectMedia()+0x76>
c0023e71:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023e78:	75 0c                	jne    c0023e86 <ATAPI::detectMedia()+0x76>
c0023e7a:	83 ec 0c             	sub    esp,0xc
c0023e7d:	53                   	push   ebx
c0023e7e:	e8 5f ff ff ff       	call   c0023de2 <ATAPI::diskInserted()>
c0023e83:	83 c4 10             	add    esp,0x10
c0023e86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023e8a:	83 e0 0f             	and    eax,0xf
c0023e8d:	3c 02                	cmp    al,0x2
c0023e8f:	75 1b                	jne    c0023eac <ATAPI::detectMedia()+0x9c>
c0023e91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023e96:	75 2d                	jne    c0023ec5 <ATAPI::detectMedia()+0xb5>
c0023e98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023e9f:	74 24                	je     c0023ec5 <ATAPI::detectMedia()+0xb5>
c0023ea1:	83 ec 0c             	sub    esp,0xc
c0023ea4:	53                   	push   ebx
c0023ea5:	e8 d6 fe ff ff       	call   c0023d80 <ATAPI::diskRemoved()>
c0023eaa:	eb 16                	jmp    c0023ec2 <ATAPI::detectMedia()+0xb2>
c0023eac:	84 c0                	test   al,al
c0023eae:	75 15                	jne    c0023ec5 <ATAPI::detectMedia()+0xb5>
c0023eb0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023eb7:	75 0c                	jne    c0023ec5 <ATAPI::detectMedia()+0xb5>
c0023eb9:	83 ec 0c             	sub    esp,0xc
c0023ebc:	53                   	push   ebx
c0023ebd:	e8 20 ff ff ff       	call   c0023de2 <ATAPI::diskInserted()>
c0023ec2:	83 c4 10             	add    esp,0x10
c0023ec5:	83 c4 24             	add    esp,0x24
c0023ec8:	5b                   	pop    ebx
c0023ec9:	5e                   	pop    esi
c0023eca:	c3                   	ret    
c0023ecb:	90                   	nop

c0023ecc <ATAPI::open(int, int, void*)>:
c0023ecc:	53                   	push   ebx
c0023ecd:	83 ec 08             	sub    esp,0x8
c0023ed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ed4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023edc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023ee2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023ee8:	c1 e0 06             	shl    eax,0x6
c0023eeb:	01 d0                	add    eax,edx
c0023eed:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023ef4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023efa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023f01:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023f0b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023f11:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0023f18:	6a 04                	push   0x4
c0023f1a:	6a 0c                	push   0xc
c0023f1c:	51                   	push   ecx
c0023f1d:	52                   	push   edx
c0023f1e:	e8 21 e5 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f23:	90                   	nop
c0023f24:	90                   	nop
c0023f25:	6a 00                	push   0x0
c0023f27:	6a 0c                	push   0xc
c0023f29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f30:	50                   	push   eax
c0023f31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f37:	e8 08 e5 ff ff       	call   c0022444 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f3c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023f43:	83 c4 14             	add    esp,0x14
c0023f46:	53                   	push   ebx
c0023f47:	e8 c4 fe ff ff       	call   c0023e10 <ATAPI::detectMedia()>
c0023f4c:	31 c0                	xor    eax,eax
c0023f4e:	83 c4 18             	add    esp,0x18
c0023f51:	5b                   	pop    ebx
c0023f52:	c3                   	ret    
c0023f53:	90                   	nop

c0023f54 <ATAPI::read(unsigned long long, int, void*)>:
c0023f54:	55                   	push   ebp
c0023f55:	57                   	push   edi
c0023f56:	56                   	push   esi
c0023f57:	53                   	push   ebx
c0023f58:	83 ec 1c             	sub    esp,0x1c
c0023f5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023f67:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023f6e:	74 41                	je     c0023fb1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023f70:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023f74:	b9 03 00 00 00       	mov    ecx,0x3
c0023f79:	fc                   	cld    
c0023f7a:	31 c0                	xor    eax,eax
c0023f7c:	86 fb                	xchg   bl,bh
c0023f7e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023f80:	c1 c3 10             	rol    ebx,0x10
c0023f83:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023f88:	89 e8                	mov    eax,ebp
c0023f8a:	86 fb                	xchg   bl,bh
c0023f8c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023f90:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023f94:	50                   	push   eax
c0023f95:	50                   	push   eax
c0023f96:	55                   	push   ebp
c0023f97:	c1 e5 0b             	shl    ebp,0xb
c0023f9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023f9e:	6a 00                	push   0x0
c0023fa0:	55                   	push   ebp
c0023fa1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023fa5:	50                   	push   eax
c0023fa6:	56                   	push   esi
c0023fa7:	e8 14 fb ff ff       	call   c0023ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023fac:	83 c4 20             	add    esp,0x20
c0023faf:	eb 1a                	jmp    c0023fcb <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023fb1:	83 ec 0c             	sub    esp,0xc
c0023fb4:	56                   	push   esi
c0023fb5:	e8 56 fe ff ff       	call   c0023e10 <ATAPI::detectMedia()>
c0023fba:	83 c4 10             	add    esp,0x10
c0023fbd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023fc4:	75 aa                	jne    c0023f70 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023fc6:	b8 02 00 00 00       	mov    eax,0x2
c0023fcb:	83 c4 1c             	add    esp,0x1c
c0023fce:	5b                   	pop    ebx
c0023fcf:	5e                   	pop    esi
c0023fd0:	5f                   	pop    edi
c0023fd1:	5d                   	pop    ebp
c0023fd2:	c3                   	ret    
c0023fd3:	90                   	nop

c0023fd4 <SATA::close(int, int, void*)>:
c0023fd4:	83 ec 0c             	sub    esp,0xc
c0023fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fe1:	85 c0                	test   eax,eax
c0023fe3:	74 0c                	je     c0023ff1 <SATA::close(int, int, void*)+0x1d>
c0023fe5:	83 ec 0c             	sub    esp,0xc
c0023fe8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fea:	50                   	push   eax
c0023feb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fee:	83 c4 10             	add    esp,0x10
c0023ff1:	31 c0                	xor    eax,eax
c0023ff3:	83 c4 0c             	add    esp,0xc
c0023ff6:	c3                   	ret    
c0023ff7:	90                   	nop

c0023ff8 <SATA::powerSaving(PowerSavingLevel)>:
c0023ff8:	c3                   	ret    
c0023ff9:	90                   	nop

c0023ffa <SATA::open(int, int, void*)>:
c0023ffa:	56                   	push   esi
c0023ffb:	53                   	push   ebx
c0023ffc:	50                   	push   eax
c0023ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024005:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002400f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024015:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002401f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024023:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002402d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024033:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002403a:	e8 82 bc fe ff       	call   c000fcc1 <Phys::allocatePage()>
c002403f:	89 c6                	mov    esi,eax
c0024041:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024047:	81 c6 00 10 00 00    	add    esi,0x1000
c002404d:	e8 6f bc fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024052:	39 c6                	cmp    esi,eax
c0024054:	74 10                	je     c0024066 <SATA::open(int, int, void*)+0x6c>
c0024056:	83 ec 0c             	sub    esp,0xc
c0024059:	68 a8 c0 02 c0       	push   0xc002c0a8
c002405e:	e8 c2 5b ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0024063:	83 c4 10             	add    esp,0x10
c0024066:	83 ec 0c             	sub    esp,0xc
c0024069:	6a 02                	push   0x2
c002406b:	e8 93 d8 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0024070:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024076:	e8 18 da fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c002407b:	6a 03                	push   0x3
c002407d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024083:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024089:	50                   	push   eax
c002408a:	e8 3f df fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c002408f:	83 c4 14             	add    esp,0x14
c0024092:	68 bc c0 02 c0       	push   0xc002c0bc
c0024097:	e8 57 e8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002409c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002409f:	e8 ee 00 ff ff       	call   c0014192 <PhysicalDisk::startCache()>
c00240a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240a7:	e8 b4 21 ff ff       	call   c0016260 <createPartitionsForDisk(PhysicalDisk*)>
c00240ac:	83 c4 14             	add    esp,0x14
c00240af:	31 c0                	xor    eax,eax
c00240b1:	5b                   	pop    ebx
c00240b2:	5e                   	pop    esi
c00240b3:	c3                   	ret    

c00240b4 <SATA::SATA()>:
c00240b4:	83 ec 0c             	sub    esp,0xc
c00240b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240bb:	83 ec 04             	sub    esp,0x4
c00240be:	68 00 02 00 00       	push   0x200
c00240c3:	68 d7 c0 02 c0       	push   0xc002c0d7
c00240c8:	50                   	push   eax
c00240c9:	e8 5c 00 ff ff       	call   c001412a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240ce:	83 c4 10             	add    esp,0x10
c00240d1:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c00240d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240da:	89 10                	mov    DWORD PTR [eax],edx
c00240dc:	90                   	nop
c00240dd:	83 c4 0c             	add    esp,0xc
c00240e0:	c3                   	ret    
c00240e1:	90                   	nop

c00240e2 <SATA::access(unsigned long long, int, void*, bool)>:
c00240e2:	55                   	push   ebp
c00240e3:	57                   	push   edi
c00240e4:	56                   	push   esi
c00240e5:	53                   	push   ebx
c00240e6:	83 ec 2c             	sub    esp,0x2c
c00240e9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00240ed:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00240f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00240f4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00240f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024100:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024104:	b8 ed c0 02 c0       	mov    eax,0xc002c0ed
c0024109:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c002410e:	84 db                	test   bl,bl
c0024110:	74 05                	je     c0024117 <SATA::access(unsigned long long, int, void*, bool)+0x35>
c0024112:	b8 e7 c0 02 c0       	mov    eax,0xc002c0e7
c0024117:	83 ec 0c             	sub    esp,0xc
c002411a:	50                   	push   eax
c002411b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002411f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0024123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024127:	68 f2 c0 02 c0       	push   0xc002c0f2
c002412c:	e8 c2 e7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024131:	83 c4 20             	add    esp,0x20
c0024134:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024139:	7e 30                	jle    c002416b <SATA::access(unsigned long long, int, void*, bool)+0x89>
c002413b:	51                   	push   ecx
c002413c:	51                   	push   ecx
c002413d:	53                   	push   ebx
c002413e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024142:	6a 10                	push   0x10
c0024144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002414c:	55                   	push   ebp
c002414d:	e8 90 ff ff ff       	call   c00240e2 <SATA::access(unsigned long long, int, void*, bool)>
c0024152:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c0024157:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c002415c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0024161:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c0024169:	eb c6                	jmp    c0024131 <SATA::access(unsigned long long, int, void*, bool)+0x4f>
c002416b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002416f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0024172:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024176:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c002417c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024182:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002418c:	89 d8                	mov    eax,ebx
c002418e:	c1 e0 07             	shl    eax,0x7
c0024191:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024195:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002419f:	57                   	push   edi
c00241a0:	8d 43 02             	lea    eax,[ebx+0x2]
c00241a3:	57                   	push   edi
c00241a4:	c1 e0 07             	shl    eax,0x7
c00241a7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00241ab:	50                   	push   eax
c00241ac:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00241b2:	e8 51 ef ff ff       	call   c0023108 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00241b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00241bb:	58                   	pop    eax
c00241bc:	5a                   	pop    edx
c00241bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241c1:	68 24 c1 02 c0       	push   0xc002c124
c00241c6:	e8 28 e7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00241cb:	83 c4 10             	add    esp,0x10
c00241ce:	b9 01 00 00 00       	mov    ecx,0x1
c00241d3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00241d8:	0f 84 e7 01 00 00    	je     c00243c5 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c00241de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00241e2:	c1 e0 09             	shl    eax,0x9
c00241e5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00241ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00241ee:	74 17                	je     c0024207 <SATA::access(unsigned long long, int, void*, bool)+0x125>
c00241f0:	51                   	push   ecx
c00241f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241f5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00241f9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00241ff:	e8 9c c4 fd ff       	call   c00006a0 <memcpy>
c0024204:	83 c4 10             	add    esp,0x10
c0024207:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002420d:	8d 43 02             	lea    eax,[ebx+0x2]
c0024210:	c1 e0 07             	shl    eax,0x7
c0024213:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024217:	8b 00                	mov    eax,DWORD PTR [eax]
c0024219:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002421f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024225:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024229:	c1 e1 05             	shl    ecx,0x5
c002422c:	01 c8                	add    eax,ecx
c002422e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024232:	8b 38                	mov    edi,DWORD PTR [eax]
c0024234:	83 e1 01             	and    ecx,0x1
c0024237:	83 e7 bf             	and    edi,0xffffffbf
c002423a:	c1 e1 06             	shl    ecx,0x6
c002423d:	09 f9                	or     ecx,edi
c002423f:	88 08                	mov    BYTE PTR [eax],cl
c0024241:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024243:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024249:	81 c9 05 00 01 00    	or     ecx,0x10005
c002424f:	89 08                	mov    DWORD PTR [eax],ecx
c0024251:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024257:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c002425d:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c0024263:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c0024266:	52                   	push   edx
c0024267:	68 90 00 00 00       	push   0x90
c002426c:	6a 00                	push   0x0
c002426e:	57                   	push   edi
c002426f:	e8 50 c4 fd ff       	call   c00006c4 <memset>
c0024274:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002427a:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c002427e:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c0024284:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024288:	83 c4 10             	add    esp,0x10
c002428b:	8d 48 ff             	lea    ecx,[eax-0x1]
c002428e:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c0024294:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002429a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002429f:	09 c8                	or     eax,ecx
c00242a1:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c00242a7:	66 8b 07             	mov    ax,WORD PTR [edi]
c00242aa:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c00242b1:	66 25 00 7f          	and    ax,0x7f00
c00242b5:	66 0d 27 80          	or     ax,0x8027
c00242b9:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00242be:	66 89 07             	mov    WORD PTR [edi],ax
c00242c1:	19 c0                	sbb    eax,eax
c00242c3:	83 e0 f0             	and    eax,0xfffffff0
c00242c6:	83 c0 35             	add    eax,0x35
c00242c9:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c00242cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00242cf:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c00242d3:	89 f0                	mov    eax,esi
c00242d5:	c1 e8 10             	shr    eax,0x10
c00242d8:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c00242db:	89 f0                	mov    eax,esi
c00242dd:	89 de                	mov    esi,ebx
c00242df:	c1 e8 18             	shr    eax,0x18
c00242e2:	c1 e6 07             	shl    esi,0x7
c00242e5:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c00242e8:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00242ec:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00242f0:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c00242f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00242f7:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c00242fa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00242fe:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c0024302:	31 c0                	xor    eax,eax
c0024304:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002430a:	80 e1 88             	and    cl,0x88
c002430d:	74 0a                	je     c0024319 <SATA::access(unsigned long long, int, void*, bool)+0x237>
c002430f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024314:	74 0a                	je     c0024320 <SATA::access(unsigned long long, int, void*, bool)+0x23e>
c0024316:	40                   	inc    eax
c0024317:	eb eb                	jmp    c0024304 <SATA::access(unsigned long long, int, void*, bool)+0x222>
c0024319:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002431e:	75 0a                	jne    c002432a <SATA::access(unsigned long long, int, void*, bool)+0x248>
c0024320:	83 ec 0c             	sub    esp,0xc
c0024323:	68 2d c1 02 c0       	push   0xc002c12d
c0024328:	eb 56                	jmp    c0024380 <SATA::access(unsigned long long, int, void*, bool)+0x29e>
c002432a:	b8 01 00 00 00       	mov    eax,0x1
c002432f:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024333:	c1 e3 07             	shl    ebx,0x7
c0024336:	d3 e0                	shl    eax,cl
c0024338:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002433c:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024342:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c0024348:	85 c8                	test   eax,ecx
c002434a:	74 20                	je     c002436c <SATA::access(unsigned long long, int, void*, bool)+0x28a>
c002434c:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c0024352:	0f ba e1 1e          	bt     ecx,0x1e
c0024356:	73 ea                	jae    c0024342 <SATA::access(unsigned long long, int, void*, bool)+0x260>
c0024358:	83 ec 0c             	sub    esp,0xc
c002435b:	68 3b c1 02 c0       	push   0xc002c13b
c0024360:	e8 c0 58 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0024365:	83 c4 10             	add    esp,0x10
c0024368:	31 c9                	xor    ecx,ecx
c002436a:	eb 59                	jmp    c00243c5 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002436c:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0024372:	0f ba e0 1e          	bt     eax,0x1e
c0024376:	73 17                	jae    c002438f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0024378:	83 ec 0c             	sub    esp,0xc
c002437b:	68 3b c1 02 c0       	push   0xc002c13b
c0024380:	e8 a0 58 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0024385:	83 c4 10             	add    esp,0x10
c0024388:	b9 01 00 00 00       	mov    ecx,0x1
c002438d:	eb 36                	jmp    c00243c5 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002438f:	83 ec 0c             	sub    esp,0xc
c0024392:	68 4c c1 02 c0       	push   0xc002c14c
c0024397:	e8 57 e5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	31 c9                	xor    ecx,ecx
c00243a1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00243a6:	75 1d                	jne    c00243c5 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c00243a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00243ab:	50                   	push   eax
c00243ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243b0:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00243b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00243ba:	e8 e1 c2 fd ff       	call   c00006a0 <memcpy>
c00243bf:	83 c4 10             	add    esp,0x10
c00243c2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00243c5:	83 c4 2c             	add    esp,0x2c
c00243c8:	89 c8                	mov    eax,ecx
c00243ca:	5b                   	pop    ebx
c00243cb:	5e                   	pop    esi
c00243cc:	5f                   	pop    edi
c00243cd:	5d                   	pop    ebp
c00243ce:	c3                   	ret    
c00243cf:	90                   	nop

c00243d0 <SATA::read(unsigned long long, int, void*)>:
c00243d0:	55                   	push   ebp
c00243d1:	b8 04 00 00 00       	mov    eax,0x4
c00243d6:	57                   	push   edi
c00243d7:	56                   	push   esi
c00243d8:	53                   	push   ebx
c00243d9:	83 ec 1c             	sub    esp,0x1c
c00243dc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00243e0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00243e4:	8d 55 ff             	lea    edx,[ebp-0x1]
c00243e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00243eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00243ef:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00243f5:	77 4b                	ja     c0024442 <SATA::read(unsigned long long, int, void*)+0x72>
c00243f7:	b8 06 00 00 00       	mov    eax,0x6
c00243fc:	85 db                	test   ebx,ebx
c00243fe:	74 42                	je     c0024442 <SATA::read(unsigned long long, int, void*)+0x72>
c0024400:	52                   	push   edx
c0024401:	52                   	push   edx
c0024402:	6a 00                	push   0x0
c0024404:	53                   	push   ebx
c0024405:	55                   	push   ebp
c0024406:	57                   	push   edi
c0024407:	56                   	push   esi
c0024408:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002440c:	e8 d1 fc ff ff       	call   c00240e2 <SATA::access(unsigned long long, int, void*, bool)>
c0024411:	83 c4 20             	add    esp,0x20
c0024414:	85 c0                	test   eax,eax
c0024416:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002441a:	75 21                	jne    c002443d <SATA::read(unsigned long long, int, void*)+0x6d>
c002441c:	01 2d e8 f9 02 c0    	add    DWORD PTR ds:0xc002f9e8,ebp
c0024422:	e8 31 c3 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0024427:	50                   	push   eax
c0024428:	50                   	push   eax
c0024429:	53                   	push   ebx
c002442a:	68 64 c1 02 c0       	push   0xc002c164
c002442f:	e8 bf e4 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024434:	83 c4 10             	add    esp,0x10
c0024437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002443b:	eb 05                	jmp    c0024442 <SATA::read(unsigned long long, int, void*)+0x72>
c002443d:	b8 01 00 00 00       	mov    eax,0x1
c0024442:	83 c4 1c             	add    esp,0x1c
c0024445:	5b                   	pop    ebx
c0024446:	5e                   	pop    esi
c0024447:	5f                   	pop    edi
c0024448:	5d                   	pop    ebp
c0024449:	c3                   	ret    

c002444a <SATA::write(unsigned long long, int, void*)>:
c002444a:	57                   	push   edi
c002444b:	b8 04 00 00 00       	mov    eax,0x4
c0024450:	56                   	push   esi
c0024451:	53                   	push   ebx
c0024452:	83 ec 10             	sub    esp,0x10
c0024455:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024459:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002445d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024460:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024464:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024468:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002446e:	77 3b                	ja     c00244ab <SATA::write(unsigned long long, int, void*)+0x61>
c0024470:	b8 06 00 00 00       	mov    eax,0x6
c0024475:	85 d2                	test   edx,edx
c0024477:	74 32                	je     c00244ab <SATA::write(unsigned long long, int, void*)+0x61>
c0024479:	50                   	push   eax
c002447a:	50                   	push   eax
c002447b:	6a 01                	push   0x1
c002447d:	52                   	push   edx
c002447e:	53                   	push   ebx
c002447f:	57                   	push   edi
c0024480:	56                   	push   esi
c0024481:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024485:	e8 58 fc ff ff       	call   c00240e2 <SATA::access(unsigned long long, int, void*, bool)>
c002448a:	83 c4 20             	add    esp,0x20
c002448d:	85 c0                	test   eax,eax
c002448f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024493:	75 11                	jne    c00244a6 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024495:	01 1d e4 f9 02 c0    	add    DWORD PTR ds:0xc002f9e4,ebx
c002449b:	e8 b8 c2 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c00244a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244a4:	eb 05                	jmp    c00244ab <SATA::write(unsigned long long, int, void*)+0x61>
c00244a6:	b8 01 00 00 00       	mov    eax,0x1
c00244ab:	83 c4 10             	add    esp,0x10
c00244ae:	5b                   	pop    ebx
c00244af:	5e                   	pop    esi
c00244b0:	5f                   	pop    edi
c00244b1:	c3                   	ret    

c00244b2 <SATAPI::write(unsigned long long, int, void*)>:
c00244b2:	b8 03 00 00 00       	mov    eax,0x3
c00244b7:	c3                   	ret    

c00244b8 <SATAPI::close(int, int, void*)>:
c00244b8:	83 ec 0c             	sub    esp,0xc
c00244bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244c5:	85 c0                	test   eax,eax
c00244c7:	74 0c                	je     c00244d5 <SATAPI::close(int, int, void*)+0x1d>
c00244c9:	83 ec 0c             	sub    esp,0xc
c00244cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00244ce:	50                   	push   eax
c00244cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244d2:	83 c4 10             	add    esp,0x10
c00244d5:	31 c0                	xor    eax,eax
c00244d7:	83 c4 0c             	add    esp,0xc
c00244da:	c3                   	ret    
c00244db:	90                   	nop

c00244dc <SATAPI::SATAPI()>:
c00244dc:	83 ec 0c             	sub    esp,0xc
c00244df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e3:	83 ec 04             	sub    esp,0x4
c00244e6:	68 00 08 00 00       	push   0x800
c00244eb:	68 b0 c1 02 c0       	push   0xc002c1b0
c00244f0:	50                   	push   eax
c00244f1:	e8 34 fc fe ff       	call   c001412a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c00244fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024502:	89 10                	mov    DWORD PTR [eax],edx
c0024504:	90                   	nop
c0024505:	83 c4 0c             	add    esp,0xc
c0024508:	c3                   	ret    
c0024509:	90                   	nop

c002450a <SATAPI::diskRemoved()>:
c002450a:	83 ec 18             	sub    esp,0x18
c002450d:	68 bc c1 02 c0       	push   0xc002c1bc
c0024512:	e8 dc e3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002451b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024522:	83 c4 1c             	add    esp,0x1c
c0024525:	c3                   	ret    

c0024526 <SATAPI::diskInserted()>:
c0024526:	53                   	push   ebx
c0024527:	83 ec 14             	sub    esp,0x14
c002452a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002452e:	68 d3 c1 02 c0       	push   0xc002c1d3
c0024533:	e8 bb e3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024538:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002453f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024542:	e8 4b fc fe ff       	call   c0014192 <PhysicalDisk::startCache()>
c0024547:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002454b:	83 c4 18             	add    esp,0x18
c002454e:	5b                   	pop    ebx
c002454f:	e9 0c 1d ff ff       	jmp    c0016260 <createPartitionsForDisk(PhysicalDisk*)>

c0024554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024554:	55                   	push   ebp
c0024555:	57                   	push   edi
c0024556:	56                   	push   esi
c0024557:	53                   	push   ebx
c0024558:	83 ec 24             	sub    esp,0x24
c002455b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002455f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024563:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024569:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002456d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024571:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024577:	8d 5f 02             	lea    ebx,[edi+0x2]
c002457a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024580:	c1 e3 07             	shl    ebx,0x7
c0024583:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024587:	89 f8                	mov    eax,edi
c0024589:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002458d:	c1 e0 07             	shl    eax,0x7
c0024590:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024594:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024598:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00245a2:	53                   	push   ebx
c00245a3:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00245a9:	e8 5a eb ff ff       	call   c0023108 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00245ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00245b2:	83 c4 10             	add    esp,0x10
c00245b5:	b8 01 00 00 00       	mov    eax,0x1
c00245ba:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00245bf:	0f 84 9a 01 00 00    	je     c002475f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c00245c5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00245cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245cd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00245d3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00245d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00245dd:	c1 e1 05             	shl    ecx,0x5
c00245e0:	01 c8                	add    eax,ecx
c00245e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00245e4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00245ea:	81 c9 25 00 01 00    	or     ecx,0x10025
c00245f0:	89 08                	mov    DWORD PTR [eax],ecx
c00245f2:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00245f8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00245fe:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024604:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024607:	52                   	push   edx
c0024608:	68 90 00 00 00       	push   0x90
c002460d:	6a 00                	push   0x0
c002460f:	53                   	push   ebx
c0024610:	e8 af c0 fd ff       	call   c00006c4 <memset>
c0024615:	83 c4 0c             	add    esp,0xc
c0024618:	8d 43 40             	lea    eax,[ebx+0x40]
c002461b:	6a 0c                	push   0xc
c002461d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024621:	50                   	push   eax
c0024622:	e8 79 c0 fd ff       	call   c00006a0 <memcpy>
c0024627:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002462d:	89 ea                	mov    edx,ebp
c002462f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024635:	c1 ea 18             	shr    edx,0x18
c0024638:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002463c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002463f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024642:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024646:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002464c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024652:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024657:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002465b:	09 c8                	or     eax,ecx
c002465d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024661:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024667:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002466a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024671:	66 25 00 7f          	and    ax,0x7f00
c0024675:	66 0d 27 80          	or     ax,0x8027
c0024679:	66 89 03             	mov    WORD PTR [ebx],ax
c002467c:	89 e8                	mov    eax,ebp
c002467e:	c1 e8 10             	shr    eax,0x10
c0024681:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024684:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024688:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002468b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002468f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024692:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024696:	83 c4 10             	add    esp,0x10
c0024699:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002469d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00246a1:	31 c0                	xor    eax,eax
c00246a3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00246a9:	80 e1 88             	and    cl,0x88
c00246ac:	74 0a                	je     c00246b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00246ae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00246b3:	74 0a                	je     c00246bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00246b5:	40                   	inc    eax
c00246b6:	eb eb                	jmp    c00246a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00246b8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00246bd:	75 0f                	jne    c00246ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00246bf:	83 ec 0c             	sub    esp,0xc
c00246c2:	68 2d c1 02 c0       	push   0xc002c12d
c00246c7:	e8 59 55 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c00246cc:	eb 3a                	jmp    c0024708 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00246ce:	b8 01 00 00 00       	mov    eax,0x1
c00246d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00246d7:	c1 e7 07             	shl    edi,0x7
c00246da:	d3 e0                	shl    eax,cl
c00246dc:	03 3c 24             	add    edi,DWORD PTR [esp]
c00246df:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00246e5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00246eb:	85 d0                	test   eax,edx
c00246ed:	74 23                	je     c0024712 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00246ef:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00246f5:	0f ba e2 1e          	bt     edx,0x1e
c00246f9:	73 ea                	jae    c00246e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00246fb:	83 ec 0c             	sub    esp,0xc
c00246fe:	68 eb c1 02 c0       	push   0xc002c1eb
c0024703:	e8 eb e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	b8 01 00 00 00       	mov    eax,0x1
c0024710:	eb 4d                	jmp    c002475f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c0024712:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024718:	0f ba e0 1e          	bt     eax,0x1e
c002471c:	73 0a                	jae    c0024728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002471e:	83 ec 0c             	sub    esp,0xc
c0024721:	68 fe c1 02 c0       	push   0xc002c1fe
c0024726:	eb db                	jmp    c0024703 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024728:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002472d:	74 1e                	je     c002474d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002472f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024734:	74 17                	je     c002474d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024736:	50                   	push   eax
c0024737:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002473b:	ff b6 78 01 00 00    	push   DWORD PTR [esi+0x178]
c0024741:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024745:	e8 56 bf fd ff       	call   c00006a0 <memcpy>
c002474a:	83 c4 10             	add    esp,0x10
c002474d:	83 ec 0c             	sub    esp,0xc
c0024750:	68 13 c2 02 c0       	push   0xc002c213
c0024755:	e8 99 e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002475a:	83 c4 10             	add    esp,0x10
c002475d:	31 c0                	xor    eax,eax
c002475f:	83 c4 1c             	add    esp,0x1c
c0024762:	5b                   	pop    ebx
c0024763:	5e                   	pop    esi
c0024764:	5f                   	pop    edi
c0024765:	5d                   	pop    ebp
c0024766:	c3                   	ret    
c0024767:	90                   	nop

c0024768 <SATAPI::detectMedia()>:
c0024768:	56                   	push   esi
c0024769:	53                   	push   ebx
c002476a:	83 ec 28             	sub    esp,0x28
c002476d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024771:	6a 0c                	push   0xc
c0024773:	6a 00                	push   0x0
c0024775:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024779:	56                   	push   esi
c002477a:	e8 45 bf fd ff       	call   c00006c4 <memset>
c002477f:	83 c4 0c             	add    esp,0xc
c0024782:	6a 00                	push   0x0
c0024784:	6a 00                	push   0x0
c0024786:	6a 00                	push   0x0
c0024788:	6a 00                	push   0x0
c002478a:	6a 00                	push   0x0
c002478c:	56                   	push   esi
c002478d:	53                   	push   ebx
c002478e:	e8 c1 fd ff ff       	call   c0024554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024793:	83 c4 1c             	add    esp,0x1c
c0024796:	6a 0c                	push   0xc
c0024798:	6a 00                	push   0x0
c002479a:	56                   	push   esi
c002479b:	e8 24 bf fd ff       	call   c00006c4 <memset>
c00247a0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00247a5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00247aa:	83 c4 0c             	add    esp,0xc
c00247ad:	6a 01                	push   0x1
c00247af:	8d 44 24 16          	lea    eax,[esp+0x16]
c00247b3:	50                   	push   eax
c00247b4:	6a 00                	push   0x0
c00247b6:	6a 00                	push   0x0
c00247b8:	6a 12                	push   0x12
c00247ba:	56                   	push   esi
c00247bb:	53                   	push   ebx
c00247bc:	e8 93 fd ff ff       	call   c0024554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00247c1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247c5:	83 c4 20             	add    esp,0x20
c00247c8:	83 e0 7f             	and    eax,0x7f
c00247cb:	3c 70                	cmp    al,0x70
c00247cd:	74 15                	je     c00247e4 <SATAPI::detectMedia()+0x7c>
c00247cf:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00247d6:	75 0c                	jne    c00247e4 <SATAPI::detectMedia()+0x7c>
c00247d8:	83 ec 0c             	sub    esp,0xc
c00247db:	53                   	push   ebx
c00247dc:	e8 45 fd ff ff       	call   c0024526 <SATAPI::diskInserted()>
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247e8:	83 e0 0f             	and    eax,0xf
c00247eb:	3c 02                	cmp    al,0x2
c00247ed:	75 1b                	jne    c002480a <SATAPI::detectMedia()+0xa2>
c00247ef:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247f4:	75 2d                	jne    c0024823 <SATAPI::detectMedia()+0xbb>
c00247f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00247fd:	74 24                	je     c0024823 <SATAPI::detectMedia()+0xbb>
c00247ff:	83 ec 0c             	sub    esp,0xc
c0024802:	53                   	push   ebx
c0024803:	e8 02 fd ff ff       	call   c002450a <SATAPI::diskRemoved()>
c0024808:	eb 16                	jmp    c0024820 <SATAPI::detectMedia()+0xb8>
c002480a:	84 c0                	test   al,al
c002480c:	75 15                	jne    c0024823 <SATAPI::detectMedia()+0xbb>
c002480e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024815:	75 0c                	jne    c0024823 <SATAPI::detectMedia()+0xbb>
c0024817:	83 ec 0c             	sub    esp,0xc
c002481a:	53                   	push   ebx
c002481b:	e8 06 fd ff ff       	call   c0024526 <SATAPI::diskInserted()>
c0024820:	83 c4 10             	add    esp,0x10
c0024823:	83 c4 24             	add    esp,0x24
c0024826:	5b                   	pop    ebx
c0024827:	5e                   	pop    esi
c0024828:	c3                   	ret    
c0024829:	90                   	nop

c002482a <SATAPI::open(int, int, void*)>:
c002482a:	56                   	push   esi
c002482b:	53                   	push   ebx
c002482c:	50                   	push   eax
c002482d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024831:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024835:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002483f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024845:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002484f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024853:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002485d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024863:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002486a:	e8 52 b4 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c002486f:	89 c6                	mov    esi,eax
c0024871:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024877:	81 c6 00 10 00 00    	add    esi,0x1000
c002487d:	e8 3f b4 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024882:	39 c6                	cmp    esi,eax
c0024884:	74 10                	je     c0024896 <SATAPI::open(int, int, void*)+0x6c>
c0024886:	83 ec 0c             	sub    esp,0xc
c0024889:	68 a8 c0 02 c0       	push   0xc002c0a8
c002488e:	e8 92 53 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0024893:	83 c4 10             	add    esp,0x10
c0024896:	83 ec 0c             	sub    esp,0xc
c0024899:	6a 02                	push   0x2
c002489b:	e8 63 d0 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00248a0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00248a6:	e8 e8 d1 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00248ab:	6a 03                	push   0x3
c00248ad:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00248b3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00248b9:	50                   	push   eax
c00248ba:	e8 0f d7 fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00248bf:	83 c4 14             	add    esp,0x14
c00248c2:	68 bc c0 02 c0       	push   0xc002c0bc
c00248c7:	e8 27 e0 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00248cc:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00248d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248d6:	e8 8d fe ff ff       	call   c0024768 <SATAPI::detectMedia()>
c00248db:	83 c4 14             	add    esp,0x14
c00248de:	31 c0                	xor    eax,eax
c00248e0:	5b                   	pop    ebx
c00248e1:	5e                   	pop    esi
c00248e2:	c3                   	ret    
c00248e3:	90                   	nop

c00248e4 <SATAPI::read(unsigned long long, int, void*)>:
c00248e4:	55                   	push   ebp
c00248e5:	57                   	push   edi
c00248e6:	56                   	push   esi
c00248e7:	53                   	push   ebx
c00248e8:	83 ec 1c             	sub    esp,0x1c
c00248eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00248f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00248f7:	80 be 74 01 00 00 00 	cmp    BYTE PTR [esi+0x174],0x0
c00248fe:	74 17                	je     c0024917 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0024900:	83 fb 04             	cmp    ebx,0x4
c0024903:	7e 2e                	jle    c0024933 <SATAPI::read(unsigned long long, int, void*)+0x4f>
c0024905:	83 ec 0c             	sub    esp,0xc
c0024908:	68 28 c2 02 c0       	push   0xc002c228
c002490d:	e8 13 53 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0024912:	83 c4 10             	add    esp,0x10
c0024915:	eb 1c                	jmp    c0024933 <SATAPI::read(unsigned long long, int, void*)+0x4f>
c0024917:	83 ec 0c             	sub    esp,0xc
c002491a:	56                   	push   esi
c002491b:	e8 48 fe ff ff       	call   c0024768 <SATAPI::detectMedia()>
c0024920:	83 c4 10             	add    esp,0x10
c0024923:	b8 02 00 00 00       	mov    eax,0x2
c0024928:	80 be 74 01 00 00 00 	cmp    BYTE PTR [esi+0x174],0x0
c002492f:	75 cf                	jne    c0024900 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024931:	eb 40                	jmp    c0024973 <SATAPI::read(unsigned long long, int, void*)+0x8f>
c0024933:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024937:	b9 03 00 00 00       	mov    ecx,0x3
c002493c:	fc                   	cld    
c002493d:	31 c0                	xor    eax,eax
c002493f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024941:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c0024945:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002494a:	89 e8                	mov    eax,ebp
c002494c:	86 e0                	xchg   al,ah
c002494e:	c1 c0 10             	rol    eax,0x10
c0024951:	86 e0                	xchg   al,ah
c0024953:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024957:	50                   	push   eax
c0024958:	53                   	push   ebx
c0024959:	c1 e3 0b             	shl    ebx,0xb
c002495c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024960:	6a 00                	push   0x0
c0024962:	6a 00                	push   0x0
c0024964:	53                   	push   ebx
c0024965:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024969:	50                   	push   eax
c002496a:	56                   	push   esi
c002496b:	e8 e4 fb ff ff       	call   c0024554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024970:	83 c4 20             	add    esp,0x20
c0024973:	83 c4 1c             	add    esp,0x1c
c0024976:	5b                   	pop    ebx
c0024977:	5e                   	pop    esi
c0024978:	5f                   	pop    edi
c0024979:	5d                   	pop    ebp
c002497a:	c3                   	ret    
c002497b:	90                   	nop

c002497c <SATAPI::eject()>:
c002497c:	c3                   	ret    
c002497d:	90                   	nop

c002497e <AVX::open(int, int, void*)>:
c002497e:	83 ec 0c             	sub    esp,0xc
c0024981:	e8 42 11 00 00       	call   c0025ac8 <avxInit>
c0024986:	b8 00 00 00 00       	mov    eax,0x0
c002498b:	83 c4 0c             	add    esp,0xc
c002498e:	c3                   	ret    
c002498f:	90                   	nop

c0024990 <AVX::close(int, int, void*)>:
c0024990:	83 ec 0c             	sub    esp,0xc
c0024993:	e8 31 11 00 00       	call   c0025ac9 <avxClose>
c0024998:	b8 00 00 00 00       	mov    eax,0x0
c002499d:	83 c4 0c             	add    esp,0xc
c00249a0:	c3                   	ret    
c00249a1:	90                   	nop

c00249a2 <AVX::available()>:
c00249a2:	83 ec 0c             	sub    esp,0xc
c00249a5:	e8 16 11 00 00       	call   c0025ac0 <avxDetect>
c00249aa:	85 c0                	test   eax,eax
c00249ac:	0f 95 c0             	setne  al
c00249af:	83 c4 0c             	add    esp,0xc
c00249b2:	c3                   	ret    
c00249b3:	90                   	nop

c00249b4 <AVX::save(void*)>:
c00249b4:	83 ec 0c             	sub    esp,0xc
c00249b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00249bb:	83 ec 0c             	sub    esp,0xc
c00249be:	50                   	push   eax
c00249bf:	e8 02 11 00 00       	call   c0025ac6 <avxSave>
c00249c4:	83 c4 10             	add    esp,0x10
c00249c7:	90                   	nop
c00249c8:	83 c4 0c             	add    esp,0xc
c00249cb:	c3                   	ret    

c00249cc <AVX::load(void*)>:
c00249cc:	83 ec 0c             	sub    esp,0xc
c00249cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00249d3:	83 ec 0c             	sub    esp,0xc
c00249d6:	50                   	push   eax
c00249d7:	e8 eb 10 00 00       	call   c0025ac7 <avxLoad>
c00249dc:	83 c4 10             	add    esp,0x10
c00249df:	90                   	nop
c00249e0:	83 c4 0c             	add    esp,0xc
c00249e3:	c3                   	ret    

c00249e4 <AVX::AVX()>:
c00249e4:	83 ec 0c             	sub    esp,0xc
c00249e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249eb:	83 ec 08             	sub    esp,0x8
c00249ee:	68 88 c2 02 c0       	push   0xc002c288
c00249f3:	50                   	push   eax
c00249f4:	e8 0f f8 fe ff       	call   c0014208 <FPU::FPU(char const*)>
c00249f9:	83 c4 10             	add    esp,0x10
c00249fc:	ba 98 c2 02 c0       	mov    edx,0xc002c298
c0024a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a05:	89 10                	mov    DWORD PTR [eax],edx
c0024a07:	90                   	nop
c0024a08:	83 c4 0c             	add    esp,0xc
c0024a0b:	c3                   	ret    

c0024a0c <MMX::available()>:
c0024a0c:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0024a11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024a17:	83 e0 20             	and    eax,0x20
c0024a1a:	84 c0                	test   al,al
c0024a1c:	0f 95 c0             	setne  al
c0024a1f:	c3                   	ret    

c0024a20 <MMX::open(int, int, void*)>:
c0024a20:	83 ec 0c             	sub    esp,0xc
c0024a23:	e8 24 11 00 00       	call   c0025b4c <x87Init>
c0024a28:	b8 00 00 00 00       	mov    eax,0x0
c0024a2d:	83 c4 0c             	add    esp,0xc
c0024a30:	c3                   	ret    
c0024a31:	90                   	nop

c0024a32 <MMX::close(int, int, void*)>:
c0024a32:	83 ec 0c             	sub    esp,0xc
c0024a35:	e8 2c 11 00 00       	call   c0025b66 <x87Close>
c0024a3a:	b8 00 00 00 00       	mov    eax,0x0
c0024a3f:	83 c4 0c             	add    esp,0xc
c0024a42:	c3                   	ret    
c0024a43:	90                   	nop

c0024a44 <MMX::save(void*)>:
c0024a44:	83 ec 0c             	sub    esp,0xc
c0024a47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a4b:	83 ec 0c             	sub    esp,0xc
c0024a4e:	50                   	push   eax
c0024a4f:	e8 ed 10 00 00       	call   c0025b41 <x87Save>
c0024a54:	83 c4 10             	add    esp,0x10
c0024a57:	90                   	nop
c0024a58:	83 c4 0c             	add    esp,0xc
c0024a5b:	c3                   	ret    

c0024a5c <MMX::load(void*)>:
c0024a5c:	83 ec 0c             	sub    esp,0xc
c0024a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a63:	83 ec 0c             	sub    esp,0xc
c0024a66:	50                   	push   eax
c0024a67:	e8 db 10 00 00       	call   c0025b47 <x87Load>
c0024a6c:	83 c4 10             	add    esp,0x10
c0024a6f:	90                   	nop
c0024a70:	83 c4 0c             	add    esp,0xc
c0024a73:	c3                   	ret    

c0024a74 <MMX::MMX()>:
c0024a74:	83 ec 0c             	sub    esp,0xc
c0024a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a7b:	83 ec 08             	sub    esp,0x8
c0024a7e:	68 c8 c2 02 c0       	push   0xc002c2c8
c0024a83:	50                   	push   eax
c0024a84:	e8 7f f7 fe ff       	call   c0014208 <FPU::FPU(char const*)>
c0024a89:	83 c4 10             	add    esp,0x10
c0024a8c:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0024a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a95:	89 10                	mov    DWORD PTR [eax],edx
c0024a97:	90                   	nop
c0024a98:	83 c4 0c             	add    esp,0xc
c0024a9b:	c3                   	ret    

c0024a9c <SSE::open(int, int, void*)>:
c0024a9c:	83 ec 0c             	sub    esp,0xc
c0024a9f:	e8 60 10 00 00       	call   c0025b04 <sseInit>
c0024aa4:	b8 00 00 00 00       	mov    eax,0x0
c0024aa9:	83 c4 0c             	add    esp,0xc
c0024aac:	c3                   	ret    
c0024aad:	90                   	nop

c0024aae <SSE::close(int, int, void*)>:
c0024aae:	83 ec 0c             	sub    esp,0xc
c0024ab1:	e8 5e 10 00 00       	call   c0025b14 <sseClose>
c0024ab6:	b8 00 00 00 00       	mov    eax,0x0
c0024abb:	83 c4 0c             	add    esp,0xc
c0024abe:	c3                   	ret    
c0024abf:	90                   	nop

c0024ac0 <SSE::available()>:
c0024ac0:	83 ec 1c             	sub    esp,0x1c
c0024ac3:	e8 18 10 00 00       	call   c0025ae0 <absolutelyNoChanceInHell>
c0024ac8:	85 c0                	test   eax,eax
c0024aca:	0f 95 c0             	setne  al
c0024acd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ad1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024ad5:	83 c4 1c             	add    esp,0x1c
c0024ad8:	c3                   	ret    
c0024ad9:	90                   	nop

c0024ada <SSE::save(void*)>:
c0024ada:	83 ec 0c             	sub    esp,0xc
c0024add:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ae1:	83 ec 0c             	sub    esp,0xc
c0024ae4:	50                   	push   eax
c0024ae5:	e8 0e 10 00 00       	call   c0025af8 <sseSave>
c0024aea:	83 c4 10             	add    esp,0x10
c0024aed:	90                   	nop
c0024aee:	83 c4 0c             	add    esp,0xc
c0024af1:	c3                   	ret    

c0024af2 <SSE::load(void*)>:
c0024af2:	83 ec 0c             	sub    esp,0xc
c0024af5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024af9:	83 ec 0c             	sub    esp,0xc
c0024afc:	50                   	push   eax
c0024afd:	e8 fc 0f 00 00       	call   c0025afe <sseLoad>
c0024b02:	83 c4 10             	add    esp,0x10
c0024b05:	90                   	nop
c0024b06:	83 c4 0c             	add    esp,0xc
c0024b09:	c3                   	ret    

c0024b0a <SSE::SSE()>:
c0024b0a:	83 ec 0c             	sub    esp,0xc
c0024b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b11:	83 ec 08             	sub    esp,0x8
c0024b14:	68 08 c3 02 c0       	push   0xc002c308
c0024b19:	50                   	push   eax
c0024b1a:	e8 e9 f6 fe ff       	call   c0014208 <FPU::FPU(char const*)>
c0024b1f:	83 c4 10             	add    esp,0x10
c0024b22:	ba 18 c3 02 c0       	mov    edx,0xc002c318
c0024b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b2b:	89 10                	mov    DWORD PTR [eax],edx
c0024b2d:	90                   	nop
c0024b2e:	83 c4 0c             	add    esp,0xc
c0024b31:	c3                   	ret    

c0024b32 <x87::open(int, int, void*)>:
c0024b32:	83 ec 0c             	sub    esp,0xc
c0024b35:	e8 12 10 00 00       	call   c0025b4c <x87Init>
c0024b3a:	b8 00 00 00 00       	mov    eax,0x0
c0024b3f:	83 c4 0c             	add    esp,0xc
c0024b42:	c3                   	ret    
c0024b43:	90                   	nop

c0024b44 <x87::close(int, int, void*)>:
c0024b44:	83 ec 0c             	sub    esp,0xc
c0024b47:	e8 1a 10 00 00       	call   c0025b66 <x87Close>
c0024b4c:	b8 00 00 00 00       	mov    eax,0x0
c0024b51:	83 c4 0c             	add    esp,0xc
c0024b54:	c3                   	ret    
c0024b55:	90                   	nop

c0024b56 <x87::available()>:
c0024b56:	83 ec 0c             	sub    esp,0xc
c0024b59:	e8 c8 0f 00 00       	call   c0025b26 <x87Detect>
c0024b5e:	85 c0                	test   eax,eax
c0024b60:	0f 95 c0             	setne  al
c0024b63:	83 c4 0c             	add    esp,0xc
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop

c0024b68 <x87::save(void*)>:
c0024b68:	83 ec 0c             	sub    esp,0xc
c0024b6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b6f:	83 ec 0c             	sub    esp,0xc
c0024b72:	50                   	push   eax
c0024b73:	e8 c9 0f 00 00       	call   c0025b41 <x87Save>
c0024b78:	83 c4 10             	add    esp,0x10
c0024b7b:	90                   	nop
c0024b7c:	83 c4 0c             	add    esp,0xc
c0024b7f:	c3                   	ret    

c0024b80 <x87::load(void*)>:
c0024b80:	83 ec 0c             	sub    esp,0xc
c0024b83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b87:	83 ec 0c             	sub    esp,0xc
c0024b8a:	50                   	push   eax
c0024b8b:	e8 b7 0f 00 00       	call   c0025b47 <x87Load>
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	90                   	nop
c0024b94:	83 c4 0c             	add    esp,0xc
c0024b97:	c3                   	ret    

c0024b98 <x87::x87()>:
c0024b98:	83 ec 0c             	sub    esp,0xc
c0024b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b9f:	83 ec 08             	sub    esp,0x8
c0024ba2:	68 48 c3 02 c0       	push   0xc002c348
c0024ba7:	50                   	push   eax
c0024ba8:	e8 5b f6 fe ff       	call   c0014208 <FPU::FPU(char const*)>
c0024bad:	83 c4 10             	add    esp,0x10
c0024bb0:	ba 58 c3 02 c0       	mov    edx,0xc002c358
c0024bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bb9:	89 10                	mov    DWORD PTR [eax],edx
c0024bbb:	90                   	nop
c0024bbc:	83 c4 0c             	add    esp,0xc
c0024bbf:	c3                   	ret    

c0024bc0 <APIC::disable()>:
c0024bc0:	90                   	nop
c0024bc1:	c3                   	ret    

c0024bc2 <APIC::close(int, int, void*)>:
c0024bc2:	55                   	push   ebp
c0024bc3:	89 e5                	mov    ebp,esp
c0024bc5:	83 ec 08             	sub    esp,0x8
c0024bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bcd:	83 c0 3c             	add    eax,0x3c
c0024bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bd2:	83 ec 0c             	sub    esp,0xc
c0024bd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bd8:	ff d0                	call   eax
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	b8 00 00 00 00       	mov    eax,0x0
c0024be2:	c9                   	leave  
c0024be3:	c3                   	ret    

c0024be4 <IOAPIC::close(int, int, void*)>:
c0024be4:	b8 00 00 00 00       	mov    eax,0x0
c0024be9:	c3                   	ret    

c0024bea <APIC::io_wait()>:
c0024bea:	eb 00                	jmp    c0024bec <APIC::io_wait()+0x2>
c0024bec:	eb 00                	jmp    c0024bee <APIC::io_wait()+0x4>
c0024bee:	90                   	nop
c0024bef:	c3                   	ret    

c0024bf0 <APIC::getBase()>:
c0024bf0:	55                   	push   ebp
c0024bf1:	89 e5                	mov    ebp,esp
c0024bf3:	83 ec 18             	sub    esp,0x18
c0024bf6:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0024bfb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024c01:	83 e0 08             	and    eax,0x8
c0024c04:	84 c0                	test   al,al
c0024c06:	75 07                	jne    c0024c0f <APIC::getBase()+0x1f>
c0024c08:	b8 00 00 00 00       	mov    eax,0x0
c0024c0d:	eb 21                	jmp    c0024c30 <APIC::getBase()+0x40>
c0024c0f:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0024c14:	83 ec 08             	sub    esp,0x8
c0024c17:	6a 1b                	push   0x1b
c0024c19:	50                   	push   eax
c0024c1a:	e8 ad 9f fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0024c1f:	83 c4 10             	add    esp,0x10
c0024c22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024c25:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024c28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024c2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024c30:	c9                   	leave  
c0024c31:	c3                   	ret    

c0024c32 <APIC::eoi(unsigned char)>:
c0024c32:	55                   	push   ebp
c0024c33:	89 e5                	mov    ebp,esp
c0024c35:	83 ec 28             	sub    esp,0x28
c0024c38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024c3e:	83 ec 0c             	sub    esp,0xc
c0024c41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c44:	e8 a7 ff ff ff       	call   c0024bf0 <APIC::getBase()>
c0024c49:	83 c4 10             	add    esp,0x10
c0024c4c:	05 b0 00 00 00       	add    eax,0xb0
c0024c51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024c57:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024c5d:	90                   	nop
c0024c5e:	c9                   	leave  
c0024c5f:	c3                   	ret    

c0024c60 <APIC::open(int, int, void*)>:
c0024c60:	55                   	push   ebp
c0024c61:	89 e5                	mov    ebp,esp
c0024c63:	57                   	push   edi
c0024c64:	56                   	push   esi
c0024c65:	53                   	push   ebx
c0024c66:	83 ec 2c             	sub    esp,0x2c
c0024c69:	83 ec 0c             	sub    esp,0xc
c0024c6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c6f:	e8 7c ff ff ff       	call   c0024bf0 <APIC::getBase()>
c0024c74:	83 c4 10             	add    esp,0x10
c0024c77:	89 c2                	mov    edx,eax
c0024c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c7c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024c82:	0f b6 f8             	movzx  edi,al
c0024c85:	89 d0                	mov    eax,edx
c0024c87:	ba 00 00 00 00       	mov    edx,0x0
c0024c8c:	89 c1                	mov    ecx,eax
c0024c8e:	80 e5 ff             	and    ch,0xff
c0024c91:	89 cb                	mov    ebx,ecx
c0024c93:	0f b6 f2             	movzx  esi,dl
c0024c96:	89 d8                	mov    eax,ebx
c0024c98:	89 f2                	mov    edx,esi
c0024c9a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024c9d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024ca0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024ca4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024ca8:	83 e0 00             	and    eax,0x0
c0024cab:	09 d0                	or     eax,edx
c0024cad:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024cb4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024cba:	8d 50 01             	lea    edx,[eax+0x1]
c0024cbd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cc0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024cc6:	0f b6 d0             	movzx  edx,al
c0024cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ccc:	83 c2 08             	add    edx,0x8
c0024ccf:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024cd3:	0f b6 c9             	movzx  ecx,cl
c0024cd6:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024cdc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024ce0:	83 ec 0c             	sub    esp,0xc
c0024ce3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ce6:	e8 05 ff ff ff       	call   c0024bf0 <APIC::getBase()>
c0024ceb:	83 c4 10             	add    esp,0x10
c0024cee:	05 f0 00 00 00       	add    eax,0xf0
c0024cf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024cf6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cfb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024cfe:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024d05:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024d0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024d0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024d12:	89 10                	mov    DWORD PTR [eax],edx
c0024d14:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024d1b:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c0024d20:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024d23:	7d 7c                	jge    c0024da1 <APIC::open(int, int, void*)+0x141>
c0024d25:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d28:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c0024d2f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024d32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d35:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c0024d3c:	c1 e8 08             	shr    eax,0x8
c0024d3f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024d43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d46:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c0024d4d:	c1 e8 18             	shr    eax,0x18
c0024d50:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024d53:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0024d57:	75 40                	jne    c0024d99 <APIC::open(int, int, void*)+0x139>
c0024d59:	83 ec 0c             	sub    esp,0xc
c0024d5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d5f:	e8 8c fe ff ff       	call   c0024bf0 <APIC::getBase()>
c0024d64:	83 c4 10             	add    esp,0x10
c0024d67:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024d6b:	75 07                	jne    c0024d74 <APIC::open(int, int, void*)+0x114>
c0024d6d:	ba 60 03 00 00       	mov    edx,0x360
c0024d72:	eb 05                	jmp    c0024d79 <APIC::open(int, int, void*)+0x119>
c0024d74:	ba 50 03 00 00       	mov    edx,0x350
c0024d79:	01 d0                	add    eax,edx
c0024d7b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024d7e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d83:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024d86:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024d8d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024d91:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024d94:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024d97:	89 10                	mov    DWORD PTR [eax],edx
c0024d99:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024d9c:	e9 7a ff ff ff       	jmp    c0024d1b <APIC::open(int, int, void*)+0xbb>
c0024da1:	b8 00 00 00 00       	mov    eax,0x0
c0024da6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024da9:	5b                   	pop    ebx
c0024daa:	5e                   	pop    esi
c0024dab:	5f                   	pop    edi
c0024dac:	5d                   	pop    ebp
c0024dad:	c3                   	ret    

c0024dae <IOAPIC::IOAPIC()>:
c0024dae:	83 ec 0c             	sub    esp,0xc
c0024db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db5:	83 ec 08             	sub    esp,0x8
c0024db8:	68 88 c3 02 c0       	push   0xc002c388
c0024dbd:	50                   	push   eax
c0024dbe:	e8 47 f1 fe ff       	call   c0013f0a <Device::Device(char const*)>
c0024dc3:	83 c4 10             	add    esp,0x10
c0024dc6:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c0024dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dcf:	89 10                	mov    DWORD PTR [eax],edx
c0024dd1:	90                   	nop
c0024dd2:	83 c4 0c             	add    esp,0xc
c0024dd5:	c3                   	ret    

c0024dd6 <APIC::APIC()>:
c0024dd6:	53                   	push   ebx
c0024dd7:	83 ec 18             	sub    esp,0x18
c0024dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dde:	83 ec 08             	sub    esp,0x8
c0024de1:	68 90 c3 02 c0       	push   0xc002c390
c0024de6:	50                   	push   eax
c0024de7:	e8 76 f8 fe ff       	call   c0014662 <InterruptController::InterruptController(char const*)>
c0024dec:	83 c4 10             	add    esp,0x10
c0024def:	ba 68 c4 02 c0       	mov    edx,0xc002c468
c0024df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024df8:	89 10                	mov    DWORD PTR [eax],edx
c0024dfa:	a0 40 fa 02 c0       	mov    al,ds:0xc002fa40
c0024dff:	83 f0 01             	xor    eax,0x1
c0024e02:	84 c0                	test   al,al
c0024e04:	0f 84 a1 00 00 00    	je     c0024eab <APIC::APIC()+0xd5>
c0024e0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024e0f:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0024e14:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024e18:	0f 83 86 00 00 00    	jae    c0024ea4 <APIC::APIC()+0xce>
c0024e1e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024e26:	83 ec 0c             	sub    esp,0xc
c0024e29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024e2d:	e8 f2 a7 fe ff       	call   c000f624 <malloc>
c0024e32:	83 c4 10             	add    esp,0x10
c0024e35:	89 c3                	mov    ebx,eax
c0024e37:	83 ec 0c             	sub    esp,0xc
c0024e3a:	53                   	push   ebx
c0024e3b:	e8 6e ff ff ff       	call   c0024dae <IOAPIC::IOAPIC()>
c0024e40:	83 c4 10             	add    esp,0x10
c0024e43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0024e47:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024e50:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0024e57:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0024e5c:	40                   	inc    eax
c0024e5d:	a3 00 fa 02 c0       	mov    ds:0xc002fa00,eax
c0024e62:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0024e67:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024e6d:	83 ec 08             	sub    esp,0x8
c0024e70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024e74:	50                   	push   eax
c0024e75:	e8 a0 ee fe ff       	call   c0013d1a <Device::addChild(Device*)>
c0024e7a:	83 c4 10             	add    esp,0x10
c0024e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024e81:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e83:	83 c0 08             	add    eax,0x8
c0024e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e88:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024e8d:	6a 00                	push   0x0
c0024e8f:	6a 00                	push   0x0
c0024e91:	52                   	push   edx
c0024e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024e96:	ff d0                	call   eax
c0024e98:	83 c4 10             	add    esp,0x10
c0024e9b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024e9f:	e9 6b ff ff ff       	jmp    c0024e0f <APIC::APIC()+0x39>
c0024ea4:	c6 05 40 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa40,0x1
c0024eab:	90                   	nop
c0024eac:	83 c4 18             	add    esp,0x18
c0024eaf:	5b                   	pop    ebx
c0024eb0:	c3                   	ret    
c0024eb1:	90                   	nop

c0024eb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024eb2:	55                   	push   ebp
c0024eb3:	89 e5                	mov    ebp,esp
c0024eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024eb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ebe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024ec1:	72 1d                	jb     c0024ee0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ec6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ecf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024ed5:	01 d0                	add    eax,edx
c0024ed7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024eda:	73 04                	jae    c0024ee0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024edc:	b0 01                	mov    al,0x1
c0024ede:	eb 02                	jmp    c0024ee2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024ee0:	b0 00                	mov    al,0x0
c0024ee2:	5d                   	pop    ebp
c0024ee3:	c3                   	ret    

c0024ee4 <IOAPIC::read(int)>:
c0024ee4:	55                   	push   ebp
c0024ee5:	89 e5                	mov    ebp,esp
c0024ee7:	83 ec 10             	sub    esp,0x10
c0024eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024eed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024ef3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024ef6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ef9:	0f b6 d0             	movzx  edx,al
c0024efc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024eff:	89 10                	mov    DWORD PTR [eax],edx
c0024f01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024f04:	83 c0 10             	add    eax,0x10
c0024f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f09:	c9                   	leave  
c0024f0a:	c3                   	ret    
c0024f0b:	90                   	nop

c0024f0c <IOAPIC::open(int, int, void*)>:
c0024f0c:	55                   	push   ebp
c0024f0d:	89 e5                	mov    ebp,esp
c0024f0f:	57                   	push   edi
c0024f10:	56                   	push   esi
c0024f11:	53                   	push   ebx
c0024f12:	83 ec 0c             	sub    esp,0xc
c0024f15:	83 ec 0c             	sub    esp,0xc
c0024f18:	68 bb c3 02 c0       	push   0xc002c3bb
c0024f1d:	e8 d1 d9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024f22:	83 c4 10             	add    esp,0x10
c0024f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024f2b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f3a:	8b 14 85 60 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fa0]
c0024f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f4d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f53:	8b 14 85 e0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f20]
c0024f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f5d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f66:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f6f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f75:	0f b6 f8             	movzx  edi,al
c0024f78:	89 d0                	mov    eax,edx
c0024f7a:	ba 00 00 00 00       	mov    edx,0x0
c0024f7f:	89 c1                	mov    ecx,eax
c0024f81:	80 e5 ff             	and    ch,0xff
c0024f84:	89 cb                	mov    ebx,ecx
c0024f86:	0f b6 f2             	movzx  esi,dl
c0024f89:	89 d8                	mov    eax,ebx
c0024f8b:	89 f2                	mov    edx,esi
c0024f8d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f90:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f93:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f97:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f9b:	83 e0 00             	and    eax,0x0
c0024f9e:	09 d0                	or     eax,edx
c0024fa0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fa7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024fad:	8d 50 01             	lea    edx,[eax+0x1]
c0024fb0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024fb3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024fb9:	0f b6 d0             	movzx  edx,al
c0024fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fbf:	83 c2 08             	add    edx,0x8
c0024fc2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024fc6:	0f b6 c9             	movzx  ecx,cl
c0024fc9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024fcf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024fd3:	83 ec 08             	sub    esp,0x8
c0024fd6:	6a 01                	push   0x1
c0024fd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fdb:	e8 04 ff ff ff       	call   c0024ee4 <IOAPIC::read(int)>
c0024fe0:	83 c4 10             	add    esp,0x10
c0024fe3:	c1 f8 10             	sar    eax,0x10
c0024fe6:	0f b6 c0             	movzx  eax,al
c0024fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0024fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fef:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024ff5:	b8 00 00 00 00       	mov    eax,0x0
c0024ffa:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024ffd:	5b                   	pop    ebx
c0024ffe:	5e                   	pop    esi
c0024fff:	5f                   	pop    edi
c0025000:	5d                   	pop    ebp
c0025001:	c3                   	ret    

c0025002 <IOAPIC::write(int, int)>:
c0025002:	55                   	push   ebp
c0025003:	89 e5                	mov    ebp,esp
c0025005:	83 ec 10             	sub    esp,0x10
c0025008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002500b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025011:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025017:	0f b6 d0             	movzx  edx,al
c002501a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002501d:	89 10                	mov    DWORD PTR [eax],edx
c002501f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025022:	8d 50 10             	lea    edx,[eax+0x10]
c0025025:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025028:	89 02                	mov    DWORD PTR [edx],eax
c002502a:	90                   	nop
c002502b:	c9                   	leave  
c002502c:	c3                   	ret    
c002502d:	90                   	nop

c002502e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002502e:	55                   	push   ebp
c002502f:	89 e5                	mov    ebp,esp
c0025031:	53                   	push   ebx
c0025032:	83 ec 2c             	sub    esp,0x2c
c0025035:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025038:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002503b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002503e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025041:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025044:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025047:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002504a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002504d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025050:	88 d8                	mov    al,bl
c0025052:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025055:	88 c8                	mov    al,cl
c0025057:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002505a:	88 d0                	mov    al,dl
c002505c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002505f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025063:	83 c0 08             	add    eax,0x8
c0025066:	01 c0                	add    eax,eax
c0025068:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002506b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002506f:	83 c0 08             	add    eax,0x8
c0025072:	01 c0                	add    eax,eax
c0025074:	40                   	inc    eax
c0025075:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025078:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002507b:	50                   	push   eax
c002507c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002507f:	e8 60 fe ff ff       	call   c0024ee4 <IOAPIC::read(int)>
c0025084:	83 c4 08             	add    esp,0x8
c0025087:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002508a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025091:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025094:	c1 e0 18             	shl    eax,0x18
c0025097:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002509a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002509d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00250a0:	52                   	push   edx
c00250a1:	50                   	push   eax
c00250a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250a5:	e8 58 ff ff ff       	call   c0025002 <IOAPIC::write(int, int)>
c00250aa:	83 c4 0c             	add    esp,0xc
c00250ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00250b0:	50                   	push   eax
c00250b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250b4:	e8 2b fe ff ff       	call   c0024ee4 <IOAPIC::read(int)>
c00250b9:	83 c4 08             	add    esp,0x8
c00250bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00250bf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00250c6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00250cd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00250d4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00250d8:	74 09                	je     c00250e3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00250da:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00250e1:	eb 07                	jmp    c00250ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00250e3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00250ea:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00250ee:	74 09                	je     c00250f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00250f0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00250f7:	eb 07                	jmp    c0025100 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00250f9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025100:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025107:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002510b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002510e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025111:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025114:	52                   	push   edx
c0025115:	50                   	push   eax
c0025116:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025119:	e8 e4 fe ff ff       	call   c0025002 <IOAPIC::write(int, int)>
c002511e:	83 c4 0c             	add    esp,0xc
c0025121:	90                   	nop
c0025122:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025125:	c9                   	leave  
c0025126:	c3                   	ret    
c0025127:	90                   	nop

c0025128 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025128:	55                   	push   ebp
c0025129:	89 e5                	mov    ebp,esp
c002512b:	57                   	push   edi
c002512c:	56                   	push   esi
c002512d:	53                   	push   ebx
c002512e:	83 ec 2c             	sub    esp,0x2c
c0025131:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025134:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025137:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002513b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002513f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025143:	74 5a                	je     c002519f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025145:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025149:	7f 44                	jg     c002518f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002514b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002514e:	05 00 c9 02 c0       	add    eax,0xc002c900
c0025153:	8a 00                	mov    al,BYTE PTR [eax]
c0025155:	0f b6 c0             	movzx  eax,al
c0025158:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002515b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002515e:	66 8b 84 00 00 e0 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2000]
c0025166:	0f b7 c0             	movzx  eax,ax
c0025169:	83 e0 02             	and    eax,0x2
c002516c:	85 c0                	test   eax,eax
c002516e:	74 04                	je     c0025174 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025170:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025174:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025177:	66 8b 84 00 00 e0 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2000]
c002517f:	0f b7 c0             	movzx  eax,ax
c0025182:	83 e0 08             	and    eax,0x8
c0025185:	85 c0                	test   eax,eax
c0025187:	74 16                	je     c002519f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025189:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002518d:	eb 10                	jmp    c002519f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002518f:	83 ec 0c             	sub    esp,0xc
c0025192:	68 cc c3 02 c0       	push   0xc002c3cc
c0025197:	e8 89 4a ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c002519c:	83 c4 10             	add    esp,0x10
c002519f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00251a3:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00251a8:	83 ec 08             	sub    esp,0x8
c00251ab:	50                   	push   eax
c00251ac:	68 04 c4 02 c0       	push   0xc002c404
c00251b1:	e8 3d d7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00251b6:	83 c4 10             	add    esp,0x10
c00251b9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00251c0:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00251c5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00251c8:	7d 67                	jge    c0025231 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00251ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00251cd:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c00251d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00251d7:	83 ec 08             	sub    esp,0x8
c00251da:	52                   	push   edx
c00251db:	50                   	push   eax
c00251dc:	e8 d1 fc ff ff       	call   c0024eb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00251e1:	83 c4 10             	add    esp,0x10
c00251e4:	84 c0                	test   al,al
c00251e6:	74 44                	je     c002522c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00251e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00251eb:	8b 1c 85 20 fa 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd05e0]
c00251f2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00251f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00251f9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00251fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025200:	83 c0 20             	add    eax,0x20
c0025203:	0f b6 f0             	movzx  esi,al
c0025206:	b8 00 00 00 00       	mov    eax,0x0
c002520b:	99                   	cdq    
c002520c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002520f:	0f b6 c9             	movzx  ecx,cl
c0025212:	83 ec 04             	sub    esp,0x4
c0025215:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025218:	57                   	push   edi
c0025219:	56                   	push   esi
c002521a:	52                   	push   edx
c002521b:	50                   	push   eax
c002521c:	51                   	push   ecx
c002521d:	53                   	push   ebx
c002521e:	e8 0b fe ff ff       	call   c002502e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025223:	83 c4 20             	add    esp,0x20
c0025226:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002522a:	eb 05                	jmp    c0025231 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002522c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002522f:	eb 8f                	jmp    c00251c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025231:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025234:	83 f0 01             	xor    eax,0x1
c0025237:	84 c0                	test   al,al
c0025239:	74 10                	je     c002524b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	68 1b c4 02 c0       	push   0xc002c41b
c0025243:	e8 dd 49 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002524f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025256:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002525a:	7f 65                	jg     c00252c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002525c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002525f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025262:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025269:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002526c:	01 ca                	add    edx,ecx
c002526e:	83 c2 54             	add    edx,0x54
c0025271:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025275:	85 c0                	test   eax,eax
c0025277:	75 43                	jne    c00252bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002527c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002527f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025286:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025289:	01 ca                	add    edx,ecx
c002528b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002528e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025291:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025298:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002529b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00252a2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00252a5:	01 ca                	add    edx,ecx
c00252a7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00252ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00252b0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00252b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252b7:	83 e8 20             	sub    eax,0x20
c00252ba:	eb 1a                	jmp    c00252d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00252bc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00252bf:	eb 95                	jmp    c0025256 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00252c1:	83 ec 0c             	sub    esp,0xc
c00252c4:	68 28 c4 02 c0       	push   0xc002c428
c00252c9:	e8 57 49 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c00252ce:	83 c4 10             	add    esp,0x10
c00252d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00252d6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00252d9:	5b                   	pop    ebx
c00252da:	5e                   	pop    esi
c00252db:	5f                   	pop    edi
c00252dc:	5d                   	pop    ebp
c00252dd:	c3                   	ret    

c00252de <PIC::disable()>:
c00252de:	55                   	push   ebp
c00252df:	89 e5                	mov    ebp,esp
c00252e1:	83 ec 10             	sub    esp,0x10
c00252e4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00252ea:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00252ee:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00252f1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00252f5:	ee                   	out    dx,al
c00252f6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00252fc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025300:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025303:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025307:	ee                   	out    dx,al
c0025308:	90                   	nop
c0025309:	c9                   	leave  
c002530a:	c3                   	ret    
c002530b:	90                   	nop

c002530c <PIC::close(int, int, void*)>:
c002530c:	55                   	push   ebp
c002530d:	89 e5                	mov    ebp,esp
c002530f:	83 ec 08             	sub    esp,0x8
c0025312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025315:	8b 00                	mov    eax,DWORD PTR [eax]
c0025317:	83 c0 3c             	add    eax,0x3c
c002531a:	8b 00                	mov    eax,DWORD PTR [eax]
c002531c:	83 ec 0c             	sub    esp,0xc
c002531f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025322:	ff d0                	call   eax
c0025324:	83 c4 10             	add    esp,0x10
c0025327:	b8 00 00 00 00       	mov    eax,0x0
c002532c:	c9                   	leave  
c002532d:	c3                   	ret    

c002532e <PIC::PIC()>:
c002532e:	83 ec 0c             	sub    esp,0xc
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	83 ec 08             	sub    esp,0x8
c0025338:	68 d4 c4 02 c0       	push   0xc002c4d4
c002533d:	50                   	push   eax
c002533e:	e8 1f f3 fe ff       	call   c0014662 <InterruptController::InterruptController(char const*)>
c0025343:	83 c4 10             	add    esp,0x10
c0025346:	ba 00 c5 02 c0       	mov    edx,0xc002c500
c002534b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534f:	89 10                	mov    DWORD PTR [eax],edx
c0025351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025355:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002535b:	0f b6 d0             	movzx  edx,al
c002535e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025362:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025373:	0f b6 d0             	movzx  edx,al
c0025376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002537f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025383:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025389:	8d 50 01             	lea    edx,[eax+0x1]
c002538c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025390:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025396:	0f b6 d0             	movzx  edx,al
c0025399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00253a1:	83 e1 3f             	and    ecx,0x3f
c00253a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00253a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253b2:	0f b6 d0             	movzx  edx,al
c00253b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00253c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253ca:	0f b6 d0             	movzx  edx,al
c00253cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00253d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253e0:	8d 50 01             	lea    edx,[eax+0x1]
c00253e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00253e7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00253ed:	0f b6 d0             	movzx  edx,al
c00253f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00253f8:	83 e1 3f             	and    ecx,0x3f
c00253fb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00253ff:	90                   	nop
c0025400:	83 c4 0c             	add    esp,0xc
c0025403:	c3                   	ret    

c0025404 <PIC::ioWait()>:
c0025404:	eb 00                	jmp    c0025406 <PIC::ioWait()+0x2>
c0025406:	eb 00                	jmp    c0025408 <PIC::ioWait()+0x4>
c0025408:	90                   	nop
c0025409:	c3                   	ret    

c002540a <PIC::getIRQReg(int)>:
c002540a:	55                   	push   ebp
c002540b:	89 e5                	mov    ebp,esp
c002540d:	83 ec 10             	sub    esp,0x10
c0025410:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025413:	0f b6 c0             	movzx  eax,al
c0025416:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002541c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002541f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025422:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025426:	ee                   	out    dx,al
c0025427:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002542a:	0f b6 c0             	movzx  eax,al
c002542d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025433:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025436:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025439:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002543d:	ee                   	out    dx,al
c002543e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025444:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025448:	89 c2                	mov    edx,eax
c002544a:	ec                   	in     al,dx
c002544b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002544e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025451:	0f b6 c0             	movzx  eax,al
c0025454:	c1 e0 08             	shl    eax,0x8
c0025457:	89 c1                	mov    ecx,eax
c0025459:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002545f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025463:	89 c2                	mov    edx,eax
c0025465:	ec                   	in     al,dx
c0025466:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025469:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002546c:	0f b6 c0             	movzx  eax,al
c002546f:	09 c8                	or     eax,ecx
c0025471:	c9                   	leave  
c0025472:	c3                   	ret    
c0025473:	90                   	nop

c0025474 <PIC::eoi(unsigned char)>:
c0025474:	55                   	push   ebp
c0025475:	89 e5                	mov    ebp,esp
c0025477:	83 ec 14             	sub    esp,0x14
c002547a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002547d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025480:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025484:	75 1e                	jne    c00254a4 <PIC::eoi(unsigned char)+0x30>
c0025486:	6a 0b                	push   0xb
c0025488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002548b:	e8 7a ff ff ff       	call   c002540a <PIC::getIRQReg(int)>
c0025490:	83 c4 08             	add    esp,0x8
c0025493:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025497:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002549b:	25 80 00 00 00       	and    eax,0x80
c00254a0:	85 c0                	test   eax,eax
c00254a2:	74 5f                	je     c0025503 <PIC::eoi(unsigned char)+0x8f>
c00254a4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00254a8:	75 2d                	jne    c00254d7 <PIC::eoi(unsigned char)+0x63>
c00254aa:	6a 0b                	push   0xb
c00254ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254af:	e8 56 ff ff ff       	call   c002540a <PIC::getIRQReg(int)>
c00254b4:	83 c4 08             	add    esp,0x8
c00254b7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00254bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00254be:	66 85 c0             	test   ax,ax
c00254c1:	78 14                	js     c00254d7 <PIC::eoi(unsigned char)+0x63>
c00254c3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00254c9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00254cd:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00254d0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00254d4:	ee                   	out    dx,al
c00254d5:	eb 2d                	jmp    c0025504 <PIC::eoi(unsigned char)+0x90>
c00254d7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00254db:	76 12                	jbe    c00254ef <PIC::eoi(unsigned char)+0x7b>
c00254dd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00254e3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00254e7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00254ea:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00254ee:	ee                   	out    dx,al
c00254ef:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00254f5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00254f9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00254fc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025500:	ee                   	out    dx,al
c0025501:	eb 01                	jmp    c0025504 <PIC::eoi(unsigned char)+0x90>
c0025503:	90                   	nop
c0025504:	c9                   	leave  
c0025505:	c3                   	ret    

c0025506 <PIC::remap()>:
c0025506:	55                   	push   ebp
c0025507:	89 e5                	mov    ebp,esp
c0025509:	83 ec 48             	sub    esp,0x48
c002550c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025513:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002551a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025520:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025523:	89 c2                	mov    edx,eax
c0025525:	ec                   	in     al,dx
c0025526:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025529:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002552c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002552f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025535:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025538:	89 c2                	mov    edx,eax
c002553a:	ec                   	in     al,dx
c002553b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002553e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025541:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025544:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002554a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002554e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025551:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025554:	ee                   	out    dx,al
c0025555:	83 ec 0c             	sub    esp,0xc
c0025558:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002555b:	e8 a4 fe ff ff       	call   c0025404 <PIC::ioWait()>
c0025560:	83 c4 10             	add    esp,0x10
c0025563:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025569:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002556d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025570:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025573:	ee                   	out    dx,al
c0025574:	83 ec 0c             	sub    esp,0xc
c0025577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002557a:	e8 85 fe ff ff       	call   c0025404 <PIC::ioWait()>
c002557f:	83 c4 10             	add    esp,0x10
c0025582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025585:	0f b6 c0             	movzx  eax,al
c0025588:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002558e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025591:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025594:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025597:	ee                   	out    dx,al
c0025598:	83 ec 0c             	sub    esp,0xc
c002559b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002559e:	e8 61 fe ff ff       	call   c0025404 <PIC::ioWait()>
c00255a3:	83 c4 10             	add    esp,0x10
c00255a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00255a9:	0f b6 c0             	movzx  eax,al
c00255ac:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00255b2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00255b5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00255b8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00255bb:	ee                   	out    dx,al
c00255bc:	83 ec 0c             	sub    esp,0xc
c00255bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255c2:	e8 3d fe ff ff       	call   c0025404 <PIC::ioWait()>
c00255c7:	83 c4 10             	add    esp,0x10
c00255ca:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00255d0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00255d4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00255d7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00255da:	ee                   	out    dx,al
c00255db:	83 ec 0c             	sub    esp,0xc
c00255de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255e1:	e8 1e fe ff ff       	call   c0025404 <PIC::ioWait()>
c00255e6:	83 c4 10             	add    esp,0x10
c00255e9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00255ef:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00255f3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00255f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255f9:	ee                   	out    dx,al
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025600:	e8 ff fd ff ff       	call   c0025404 <PIC::ioWait()>
c0025605:	83 c4 10             	add    esp,0x10
c0025608:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002560e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025612:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025615:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025618:	ee                   	out    dx,al
c0025619:	83 ec 0c             	sub    esp,0xc
c002561c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002561f:	e8 e0 fd ff ff       	call   c0025404 <PIC::ioWait()>
c0025624:	83 c4 10             	add    esp,0x10
c0025627:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002562d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025631:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025634:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025637:	ee                   	out    dx,al
c0025638:	83 ec 0c             	sub    esp,0xc
c002563b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002563e:	e8 c1 fd ff ff       	call   c0025404 <PIC::ioWait()>
c0025643:	83 c4 10             	add    esp,0x10
c0025646:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002564a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025650:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025653:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025656:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025659:	ee                   	out    dx,al
c002565a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002565e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025664:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025667:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002566a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002566d:	ee                   	out    dx,al
c002566e:	90                   	nop
c002566f:	c9                   	leave  
c0025670:	c3                   	ret    
c0025671:	90                   	nop

c0025672 <PIC::open(int, int, void*)>:
c0025672:	55                   	push   ebp
c0025673:	89 e5                	mov    ebp,esp
c0025675:	83 ec 18             	sub    esp,0x18
c0025678:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002567e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025682:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025685:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025689:	ee                   	out    dx,al
c002568a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025690:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025694:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025697:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002569b:	ee                   	out    dx,al
c002569c:	83 ec 0c             	sub    esp,0xc
c002569f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256a2:	e8 5f fe ff ff       	call   c0025506 <PIC::remap()>
c00256a7:	83 c4 10             	add    esp,0x10
c00256aa:	b8 00 00 00 00       	mov    eax,0x0
c00256af:	c9                   	leave  
c00256b0:	c3                   	ret    
c00256b1:	90                   	nop

c00256b2 <APICTimer::close(int, int, void*)>:
c00256b2:	b8 00 00 00 00       	mov    eax,0x0
c00256b7:	c3                   	ret    

c00256b8 <apicTimerHandler(regs*, void*)>:
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00256c1:	99                   	cdq    
c00256c2:	52                   	push   edx
c00256c3:	50                   	push   eax
c00256c4:	6a 00                	push   0x0
c00256c6:	68 00 ca 9a 3b       	push   0x3b9aca00
c00256cb:	e8 8c 07 00 00       	call   c0025e5c <__udivdi3>
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	83 ec 08             	sub    esp,0x8
c00256d6:	52                   	push   edx
c00256d7:	50                   	push   eax
c00256d8:	e8 28 0f ff ff       	call   c0016605 <timerHandler(unsigned long long)>
c00256dd:	83 c4 10             	add    esp,0x10
c00256e0:	90                   	nop
c00256e1:	83 c4 0c             	add    esp,0xc
c00256e4:	c3                   	ret    
c00256e5:	90                   	nop

c00256e6 <APICTimer::write(int)>:
c00256e6:	53                   	push   ebx
c00256e7:	83 ec 28             	sub    esp,0x28
c00256ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00256ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00256f2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00256f8:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00256fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025703:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025709:	83 ec 0c             	sub    esp,0xc
c002570c:	50                   	push   eax
c002570d:	e8 de f4 ff ff       	call   c0024bf0 <APIC::getBase()>
c0025712:	83 c4 10             	add    esp,0x10
c0025715:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025719:	a1 30 dd 02 c0       	mov    eax,ds:0xc002dd30
c002571e:	8b 15 34 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd34
c0025724:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025728:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002572c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025730:	05 e0 03 00 00       	add    eax,0x3e0
c0025735:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002573b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002573f:	05 80 03 00 00       	add    eax,0x380
c0025744:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002574a:	fb                   	sti    
c002574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025753:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025758:	83 d2 00             	adc    edx,0x0
c002575b:	89 c1                	mov    ecx,eax
c002575d:	89 d3                	mov    ebx,edx
c002575f:	a1 30 dd 02 c0       	mov    eax,ds:0xc002dd30
c0025764:	8b 15 34 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd34
c002576a:	39 c8                	cmp    eax,ecx
c002576c:	89 d0                	mov    eax,edx
c002576e:	19 d8                	sbb    eax,ebx
c0025770:	73 02                	jae    c0025774 <APICTimer::write(int)+0x8e>
c0025772:	eb d7                	jmp    c002574b <APICTimer::write(int)+0x65>
c0025774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025778:	05 20 03 00 00       	add    eax,0x320
c002577d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025787:	05 90 03 00 00       	add    eax,0x390
c002578c:	8b 00                	mov    eax,DWORD PTR [eax]
c002578e:	f7 d0                	not    eax
c0025790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025794:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002579c:	ba 00 00 00 00       	mov    edx,0x0
c00257a1:	f7 f3                	div    ebx
c00257a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00257ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257b1:	0d 00 00 02 00       	or     eax,0x20000
c00257b6:	89 c2                	mov    edx,eax
c00257b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257bc:	05 20 03 00 00       	add    eax,0x320
c00257c1:	89 10                	mov    DWORD PTR [eax],edx
c00257c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257c7:	05 e0 03 00 00       	add    eax,0x3e0
c00257cc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00257d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257d6:	05 80 03 00 00       	add    eax,0x380
c00257db:	89 c2                	mov    edx,eax
c00257dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257e1:	89 02                	mov    DWORD PTR [edx],eax
c00257e3:	90                   	nop
c00257e4:	83 c4 28             	add    esp,0x28
c00257e7:	5b                   	pop    ebx
c00257e8:	c3                   	ret    
c00257e9:	90                   	nop

c00257ea <APICTimer::open(int, int, void*)>:
c00257ea:	57                   	push   edi
c00257eb:	56                   	push   esi
c00257ec:	53                   	push   ebx
c00257ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257f3:	83 c0 24             	add    eax,0x24
c00257f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00257f8:	83 ec 08             	sub    esp,0x8
c00257fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025803:	ff d0                	call   eax
c0025805:	83 c4 10             	add    esp,0x10
c0025808:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c002580d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025813:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025819:	83 ec 0c             	sub    esp,0xc
c002581c:	50                   	push   eax
c002581d:	e8 ce f3 ff ff       	call   c0024bf0 <APIC::getBase()>
c0025822:	83 c4 10             	add    esp,0x10
c0025825:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002582b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002582f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025835:	0f b6 f8             	movzx  edi,al
c0025838:	89 d0                	mov    eax,edx
c002583a:	ba 00 00 00 00       	mov    edx,0x0
c002583f:	89 c1                	mov    ecx,eax
c0025841:	80 e5 ff             	and    ch,0xff
c0025844:	89 cb                	mov    ebx,ecx
c0025846:	0f b6 f2             	movzx  esi,dl
c0025849:	89 d8                	mov    eax,ebx
c002584b:	89 f2                	mov    edx,esi
c002584d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025851:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025854:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025858:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002585c:	83 e0 00             	and    eax,0x0
c002585f:	09 d0                	or     eax,edx
c0025861:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025869:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002586f:	8d 50 01             	lea    edx,[eax+0x1]
c0025872:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025876:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002587c:	0f b6 d0             	movzx  edx,al
c002587f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025883:	83 c2 08             	add    edx,0x8
c0025886:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002588a:	0f b6 c9             	movzx  ecx,cl
c002588d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025893:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002589b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002589f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00258a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00258ad:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00258b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00258b7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00258bd:	83 ec 0c             	sub    esp,0xc
c00258c0:	51                   	push   ecx
c00258c1:	6a 01                	push   0x1
c00258c3:	68 b8 56 02 c0       	push   0xc00256b8
c00258c8:	52                   	push   edx
c00258c9:	50                   	push   eax
c00258ca:	e8 cf e3 fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00258cf:	83 c4 20             	add    esp,0x20
c00258d2:	89 c2                	mov    edx,eax
c00258d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00258de:	b8 00 00 00 00       	mov    eax,0x0
c00258e3:	5b                   	pop    ebx
c00258e4:	5e                   	pop    esi
c00258e5:	5f                   	pop    edi
c00258e6:	c3                   	ret    
c00258e7:	90                   	nop

c00258e8 <APICTimer::APICTimer()>:
c00258e8:	83 ec 0c             	sub    esp,0xc
c00258eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ef:	83 ec 08             	sub    esp,0x8
c00258f2:	68 40 c5 02 c0       	push   0xc002c540
c00258f7:	50                   	push   eax
c00258f8:	e8 79 0c ff ff       	call   c0016576 <Timer::Timer(char const*)>
c00258fd:	83 c4 10             	add    esp,0x10
c0025900:	ba 54 c5 02 c0       	mov    edx,0xc002c554
c0025905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025909:	89 10                	mov    DWORD PTR [eax],edx
c002590b:	90                   	nop
c002590c:	83 c4 0c             	add    esp,0xc
c002590f:	c3                   	ret    

c0025910 <PIT::write(int)>:
c0025910:	83 ec 10             	sub    esp,0x10
c0025913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025917:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002591b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025921:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025925:	a3 44 fa 02 c0       	mov    ds:0xc002fa44,eax
c002592a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002592f:	99                   	cdq    
c0025930:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025938:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002593f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025944:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025948:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002594d:	ee                   	out    dx,al
c002594e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025952:	0f b6 c0             	movzx  eax,al
c0025955:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002595c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025960:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025964:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025969:	ee                   	out    dx,al
c002596a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002596e:	c1 f8 08             	sar    eax,0x8
c0025971:	0f b6 c0             	movzx  eax,al
c0025974:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002597b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002597f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025983:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025988:	ee                   	out    dx,al
c0025989:	90                   	nop
c002598a:	83 c4 10             	add    esp,0x10
c002598d:	c3                   	ret    

c002598e <pitHandler(regs*, void*)>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	a1 44 fa 02 c0       	mov    eax,ds:0xc002fa44
c0025996:	99                   	cdq    
c0025997:	52                   	push   edx
c0025998:	50                   	push   eax
c0025999:	6a 00                	push   0x0
c002599b:	68 00 ca 9a 3b       	push   0x3b9aca00
c00259a0:	e8 b7 04 00 00       	call   c0025e5c <__udivdi3>
c00259a5:	83 c4 10             	add    esp,0x10
c00259a8:	83 ec 08             	sub    esp,0x8
c00259ab:	52                   	push   edx
c00259ac:	50                   	push   eax
c00259ad:	e8 53 0c ff ff       	call   c0016605 <timerHandler(unsigned long long)>
c00259b2:	83 c4 10             	add    esp,0x10
c00259b5:	90                   	nop
c00259b6:	83 c4 0c             	add    esp,0xc
c00259b9:	c3                   	ret    

c00259ba <PIT::open(int, int, void*)>:
c00259ba:	83 ec 0c             	sub    esp,0xc
c00259bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c3:	83 c0 24             	add    eax,0x24
c00259c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c8:	83 ec 08             	sub    esp,0x8
c00259cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259d3:	ff d0                	call   eax
c00259d5:	83 c4 10             	add    esp,0x10
c00259d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	6a 00                	push   0x0
c00259e1:	6a 01                	push   0x1
c00259e3:	68 8e 59 02 c0       	push   0xc002598e
c00259e8:	6a 00                	push   0x0
c00259ea:	50                   	push   eax
c00259eb:	e8 ae e2 fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00259f0:	83 c4 20             	add    esp,0x20
c00259f3:	89 c2                	mov    edx,eax
c00259f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00259ff:	b8 00 00 00 00       	mov    eax,0x0
c0025a04:	83 c4 0c             	add    esp,0xc
c0025a07:	c3                   	ret    

c0025a08 <PIT::close(int, int, void*)>:
c0025a08:	83 ec 0c             	sub    esp,0xc
c0025a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a1d:	6a 01                	push   0x1
c0025a1f:	68 8e 59 02 c0       	push   0xc002598e
c0025a24:	6a 00                	push   0x0
c0025a26:	50                   	push   eax
c0025a27:	e8 b0 e2 fe ff       	call   c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025a2c:	83 c4 10             	add    esp,0x10
c0025a2f:	b8 00 00 00 00       	mov    eax,0x0
c0025a34:	83 c4 0c             	add    esp,0xc
c0025a37:	c3                   	ret    

c0025a38 <PIT::PIT()>:
c0025a38:	83 ec 0c             	sub    esp,0xc
c0025a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3f:	83 ec 08             	sub    esp,0x8
c0025a42:	68 7c c5 02 c0       	push   0xc002c57c
c0025a47:	50                   	push   eax
c0025a48:	e8 29 0b ff ff       	call   c0016576 <Timer::Timer(char const*)>
c0025a4d:	83 c4 10             	add    esp,0x10
c0025a50:	ba a4 c5 02 c0       	mov    edx,0xc002c5a4
c0025a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a59:	89 10                	mov    DWORD PTR [eax],edx
c0025a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a65:	0f b6 d0             	movzx  edx,al
c0025a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a7d:	0f b6 d0             	movzx  edx,al
c0025a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a84:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a93:	8d 50 01             	lea    edx,[eax+0x1]
c0025a96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a9a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025aa0:	0f b6 d0             	movzx  edx,al
c0025aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025aab:	83 e1 3f             	and    ecx,0x3f
c0025aae:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ab2:	90                   	nop
c0025ab3:	83 c4 0c             	add    esp,0xc
c0025ab6:	c3                   	ret    
c0025ab7:	66 90                	xchg   ax,ax
c0025ab9:	66 90                	xchg   ax,ax
c0025abb:	66 90                	xchg   ax,ax
c0025abd:	66 90                	xchg   ax,ax
c0025abf:	90                   	nop

c0025ac0 <avxDetect>:
c0025ac0:	b8 00 00 00 00       	mov    eax,0x0
c0025ac5:	c3                   	ret    

c0025ac6 <avxSave>:
c0025ac6:	c3                   	ret    

c0025ac7 <avxLoad>:
c0025ac7:	c3                   	ret    

c0025ac8 <avxInit>:
c0025ac8:	c3                   	ret    

c0025ac9 <avxClose>:
c0025ac9:	c3                   	ret    

c0025aca <wouldSheSayYes>:
c0025aca:	c3                   	ret    
c0025acb:	49                   	dec    ecx
c0025acc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025ad0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025ad4:	75 20                	jne    c0025af6 <sseDetect.noSSE+0x1>
c0025ad6:	4e                   	dec    esi
c0025ad7:	79 61                	jns    c0025b3a <x87Detect+0x14>
c0025ad9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025ade:	66 90                	xchg   ax,ax

c0025ae0 <absolutelyNoChanceInHell>:
c0025ae0:	b8 01 00 00 00       	mov    eax,0x1
c0025ae5:	0f a2                	cpuid  
c0025ae7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025aed:	74 06                	je     c0025af5 <sseDetect.noSSE>
c0025aef:	b8 01 00 00 00       	mov    eax,0x1
c0025af4:	c3                   	ret    

c0025af5 <sseDetect.noSSE>:
c0025af5:	31 c0                	xor    eax,eax
c0025af7:	c3                   	ret    

c0025af8 <sseSave>:
c0025af8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025afd:	c3                   	ret    

c0025afe <sseLoad>:
c0025afe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025b03:	c3                   	ret    

c0025b04 <sseInit>:
c0025b04:	e8 43 00 00 00       	call   c0025b4c <x87Init>
c0025b09:	0f 20 e0             	mov    eax,cr4
c0025b0c:	66 0d 00 06          	or     ax,0x600
c0025b10:	0f 22 e0             	mov    cr4,eax
c0025b13:	c3                   	ret    

c0025b14 <sseClose>:
c0025b14:	c3                   	ret    
c0025b15:	66 90                	xchg   ax,ax
c0025b17:	66 90                	xchg   ax,ax
c0025b19:	66 90                	xchg   ax,ax
c0025b1b:	66 90                	xchg   ax,ax
c0025b1d:	66 90                	xchg   ax,ax
c0025b1f:	90                   	nop

c0025b20 <value_37F>:
c0025b20:	7f 03                	jg     c0025b25 <value_37A+0x1>

c0025b22 <value_37E>:
c0025b22:	7e 03                	jle    c0025b27 <x87Detect+0x1>

c0025b24 <value_37A>:
c0025b24:	7a 03                	jp     c0025b29 <x87Detect+0x3>

c0025b26 <x87Detect>:
c0025b26:	b8 01 00 00 00       	mov    eax,0x1
c0025b2b:	0f a2                	cpuid  
c0025b2d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025b33:	74 06                	je     c0025b3b <x87Detect.nox87>
c0025b35:	b8 01 00 00 00       	mov    eax,0x1
c0025b3a:	c3                   	ret    

c0025b3b <x87Detect.nox87>:
c0025b3b:	b8 00 00 00 00       	mov    eax,0x0
c0025b40:	c3                   	ret    

c0025b41 <x87Save>:
c0025b41:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025b46:	c3                   	ret    

c0025b47 <x87Load>:
c0025b47:	dd 64 24 08          	frstor [esp+0x8]
c0025b4b:	c3                   	ret    

c0025b4c <x87Init>:
c0025b4c:	9b db e3             	finit  
c0025b4f:	0f 20 c0             	mov    eax,cr0
c0025b52:	66 25 fb ff          	and    ax,0xfffb
c0025b56:	66 0d 22 00          	or     ax,0x22
c0025b5a:	0f 22 c0             	mov    cr0,eax
c0025b5d:	0f 06                	clts   
c0025b5f:	d9 2d 24 5b 02 c0    	fldcw  WORD PTR ds:0xc0025b24
c0025b65:	c3                   	ret    

c0025b66 <x87Close>:
c0025b66:	c3                   	ret    
c0025b67:	90                   	nop

c0025b68 <__do_global_ctors_aux>:
c0025b68:	a1 ac 86 02 c0       	mov    eax,ds:0xc00286ac
c0025b6d:	83 f8 ff             	cmp    eax,0xffffffff
c0025b70:	74 1a                	je     c0025b8c <__do_global_ctors_aux+0x24>
c0025b72:	55                   	push   ebp
c0025b73:	89 e5                	mov    ebp,esp
c0025b75:	53                   	push   ebx
c0025b76:	52                   	push   edx
c0025b77:	bb ac 86 02 c0       	mov    ebx,0xc00286ac
c0025b7c:	ff d0                	call   eax
c0025b7e:	83 eb 04             	sub    ebx,0x4
c0025b81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025b83:	83 f8 ff             	cmp    eax,0xffffffff
c0025b86:	75 f4                	jne    c0025b7c <__do_global_ctors_aux+0x14>
c0025b88:	58                   	pop    eax
c0025b89:	5b                   	pop    ebx
c0025b8a:	5d                   	pop    ebp
c0025b8b:	c3                   	ret    
c0025b8c:	c3                   	ret    
c0025b8d:	66 90                	xchg   ax,ax
c0025b8f:	90                   	nop

c0025b90 <__divdi3>:
c0025b90:	55                   	push   ebp
c0025b91:	57                   	push   edi
c0025b92:	56                   	push   esi
c0025b93:	53                   	push   ebx
c0025b94:	83 ec 1c             	sub    esp,0x1c
c0025b97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025b9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025ba2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025ba6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025baa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025bae:	85 db                	test   ebx,ebx
c0025bb0:	0f 88 8e 00 00 00    	js     c0025c44 <__divdi3+0xb4>
c0025bb6:	89 dd                	mov    ebp,ebx
c0025bb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025bc0:	89 d3                	mov    ebx,edx
c0025bc2:	85 d2                	test   edx,edx
c0025bc4:	79 0d                	jns    c0025bd3 <__divdi3+0x43>
c0025bc6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025bca:	f7 d8                	neg    eax
c0025bcc:	83 d2 00             	adc    edx,0x0
c0025bcf:	f7 da                	neg    edx
c0025bd1:	89 d3                	mov    ebx,edx
c0025bd3:	89 c7                	mov    edi,eax
c0025bd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025bd8:	85 db                	test   ebx,ebx
c0025bda:	75 48                	jne    c0025c24 <__divdi3+0x94>
c0025bdc:	39 ef                	cmp    edi,ebp
c0025bde:	76 24                	jbe    c0025c04 <__divdi3+0x74>
c0025be0:	89 ea                	mov    edx,ebp
c0025be2:	f7 f7                	div    edi
c0025be4:	89 c1                	mov    ecx,eax
c0025be6:	31 f6                	xor    esi,esi
c0025be8:	89 c8                	mov    eax,ecx
c0025bea:	89 f2                	mov    edx,esi
c0025bec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025bf0:	85 c9                	test   ecx,ecx
c0025bf2:	74 07                	je     c0025bfb <__divdi3+0x6b>
c0025bf4:	f7 d8                	neg    eax
c0025bf6:	83 d2 00             	adc    edx,0x0
c0025bf9:	f7 da                	neg    edx
c0025bfb:	83 c4 1c             	add    esp,0x1c
c0025bfe:	5b                   	pop    ebx
c0025bff:	5e                   	pop    esi
c0025c00:	5f                   	pop    edi
c0025c01:	5d                   	pop    ebp
c0025c02:	c3                   	ret    
c0025c03:	90                   	nop
c0025c04:	85 ff                	test   edi,edi
c0025c06:	75 0b                	jne    c0025c13 <__divdi3+0x83>
c0025c08:	b8 01 00 00 00       	mov    eax,0x1
c0025c0d:	31 d2                	xor    edx,edx
c0025c0f:	f7 f3                	div    ebx
c0025c11:	89 c7                	mov    edi,eax
c0025c13:	31 d2                	xor    edx,edx
c0025c15:	89 e8                	mov    eax,ebp
c0025c17:	f7 f7                	div    edi
c0025c19:	89 c6                	mov    esi,eax
c0025c1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025c1e:	f7 f7                	div    edi
c0025c20:	89 c1                	mov    ecx,eax
c0025c22:	eb c4                	jmp    c0025be8 <__divdi3+0x58>
c0025c24:	39 eb                	cmp    ebx,ebp
c0025c26:	77 3c                	ja     c0025c64 <__divdi3+0xd4>
c0025c28:	0f bd f3             	bsr    esi,ebx
c0025c2b:	83 f6 1f             	xor    esi,0x1f
c0025c2e:	75 40                	jne    c0025c70 <__divdi3+0xe0>
c0025c30:	39 eb                	cmp    ebx,ebp
c0025c32:	72 09                	jb     c0025c3d <__divdi3+0xad>
c0025c34:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025c37:	0f 87 97 00 00 00    	ja     c0025cd4 <__divdi3+0x144>
c0025c3d:	b9 01 00 00 00       	mov    ecx,0x1
c0025c42:	eb a4                	jmp    c0025be8 <__divdi3+0x58>
c0025c44:	f7 d9                	neg    ecx
c0025c46:	83 d3 00             	adc    ebx,0x0
c0025c49:	f7 db                	neg    ebx
c0025c4b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025c4e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025c52:	89 dd                	mov    ebp,ebx
c0025c54:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025c5c:	e9 5f ff ff ff       	jmp    c0025bc0 <__divdi3+0x30>
c0025c61:	8d 76 00             	lea    esi,[esi+0x0]
c0025c64:	31 f6                	xor    esi,esi
c0025c66:	31 c9                	xor    ecx,ecx
c0025c68:	e9 7b ff ff ff       	jmp    c0025be8 <__divdi3+0x58>
c0025c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0025c70:	b8 20 00 00 00       	mov    eax,0x20
c0025c75:	29 f0                	sub    eax,esi
c0025c77:	89 f1                	mov    ecx,esi
c0025c79:	d3 e3                	shl    ebx,cl
c0025c7b:	89 fa                	mov    edx,edi
c0025c7d:	88 c1                	mov    cl,al
c0025c7f:	d3 ea                	shr    edx,cl
c0025c81:	09 da                	or     edx,ebx
c0025c83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025c87:	89 f1                	mov    ecx,esi
c0025c89:	d3 e7                	shl    edi,cl
c0025c8b:	89 eb                	mov    ebx,ebp
c0025c8d:	88 c1                	mov    cl,al
c0025c8f:	d3 eb                	shr    ebx,cl
c0025c91:	89 f1                	mov    ecx,esi
c0025c93:	d3 e5                	shl    ebp,cl
c0025c95:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025c98:	88 c1                	mov    cl,al
c0025c9a:	d3 ea                	shr    edx,cl
c0025c9c:	09 d5                	or     ebp,edx
c0025c9e:	89 e8                	mov    eax,ebp
c0025ca0:	89 da                	mov    edx,ebx
c0025ca2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025ca6:	89 d3                	mov    ebx,edx
c0025ca8:	89 c5                	mov    ebp,eax
c0025caa:	f7 e7                	mul    edi
c0025cac:	39 d3                	cmp    ebx,edx
c0025cae:	72 18                	jb     c0025cc8 <__divdi3+0x138>
c0025cb0:	74 0a                	je     c0025cbc <__divdi3+0x12c>
c0025cb2:	89 e9                	mov    ecx,ebp
c0025cb4:	31 f6                	xor    esi,esi
c0025cb6:	e9 2d ff ff ff       	jmp    c0025be8 <__divdi3+0x58>
c0025cbb:	90                   	nop
c0025cbc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025cbf:	89 f1                	mov    ecx,esi
c0025cc1:	d3 e7                	shl    edi,cl
c0025cc3:	39 c7                	cmp    edi,eax
c0025cc5:	73 eb                	jae    c0025cb2 <__divdi3+0x122>
c0025cc7:	90                   	nop
c0025cc8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025ccb:	31 f6                	xor    esi,esi
c0025ccd:	e9 16 ff ff ff       	jmp    c0025be8 <__divdi3+0x58>
c0025cd2:	66 90                	xchg   ax,ax
c0025cd4:	31 c9                	xor    ecx,ecx
c0025cd6:	e9 0d ff ff ff       	jmp    c0025be8 <__divdi3+0x58>
c0025cdb:	90                   	nop

c0025cdc <__moddi3>:
c0025cdc:	55                   	push   ebp
c0025cdd:	57                   	push   edi
c0025cde:	56                   	push   esi
c0025cdf:	53                   	push   ebx
c0025ce0:	83 ec 2c             	sub    esp,0x2c
c0025ce3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025ce7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025ceb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025cef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025cf3:	85 db                	test   ebx,ebx
c0025cf5:	0f 88 85 00 00 00    	js     c0025d80 <__moddi3+0xa4>
c0025cfb:	89 de                	mov    esi,ebx
c0025cfd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025d05:	89 d7                	mov    edi,edx
c0025d07:	85 d2                	test   edx,edx
c0025d09:	79 09                	jns    c0025d14 <__moddi3+0x38>
c0025d0b:	f7 d8                	neg    eax
c0025d0d:	83 d2 00             	adc    edx,0x0
c0025d10:	f7 da                	neg    edx
c0025d12:	89 d7                	mov    edi,edx
c0025d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d18:	89 cd                	mov    ebp,ecx
c0025d1a:	85 ff                	test   edi,edi
c0025d1c:	75 52                	jne    c0025d70 <__moddi3+0x94>
c0025d1e:	89 c3                	mov    ebx,eax
c0025d20:	39 f0                	cmp    eax,esi
c0025d22:	76 24                	jbe    c0025d48 <__moddi3+0x6c>
c0025d24:	89 c8                	mov    eax,ecx
c0025d26:	89 f2                	mov    edx,esi
c0025d28:	f7 f3                	div    ebx
c0025d2a:	89 d6                	mov    esi,edx
c0025d2c:	89 f0                	mov    eax,esi
c0025d2e:	31 d2                	xor    edx,edx
c0025d30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d34:	85 c9                	test   ecx,ecx
c0025d36:	74 07                	je     c0025d3f <__moddi3+0x63>
c0025d38:	f7 d8                	neg    eax
c0025d3a:	83 d2 00             	adc    edx,0x0
c0025d3d:	f7 da                	neg    edx
c0025d3f:	83 c4 2c             	add    esp,0x2c
c0025d42:	5b                   	pop    ebx
c0025d43:	5e                   	pop    esi
c0025d44:	5f                   	pop    edi
c0025d45:	5d                   	pop    ebp
c0025d46:	c3                   	ret    
c0025d47:	90                   	nop
c0025d48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0025d4c:	85 db                	test   ebx,ebx
c0025d4e:	75 0d                	jne    c0025d5d <__moddi3+0x81>
c0025d50:	b8 01 00 00 00       	mov    eax,0x1
c0025d55:	31 d2                	xor    edx,edx
c0025d57:	f7 f7                	div    edi
c0025d59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d5d:	89 f0                	mov    eax,esi
c0025d5f:	31 d2                	xor    edx,edx
c0025d61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d65:	f7 f7                	div    edi
c0025d67:	89 e8                	mov    eax,ebp
c0025d69:	f7 f7                	div    edi
c0025d6b:	89 d6                	mov    esi,edx
c0025d6d:	eb bd                	jmp    c0025d2c <__moddi3+0x50>
c0025d6f:	90                   	nop
c0025d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025d74:	39 f7                	cmp    edi,esi
c0025d76:	76 20                	jbe    c0025d98 <__moddi3+0xbc>
c0025d78:	89 c8                	mov    eax,ecx
c0025d7a:	89 f2                	mov    edx,esi
c0025d7c:	eb b2                	jmp    c0025d30 <__moddi3+0x54>
c0025d7e:	66 90                	xchg   ax,ax
c0025d80:	f7 d9                	neg    ecx
c0025d82:	83 d3 00             	adc    ebx,0x0
c0025d85:	f7 db                	neg    ebx
c0025d87:	89 de                	mov    esi,ebx
c0025d89:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025d91:	e9 6f ff ff ff       	jmp    c0025d05 <__moddi3+0x29>
c0025d96:	66 90                	xchg   ax,ax
c0025d98:	0f bd c7             	bsr    eax,edi
c0025d9b:	83 f0 1f             	xor    eax,0x1f
c0025d9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025da2:	75 24                	jne    c0025dc8 <__moddi3+0xec>
c0025da4:	39 f7                	cmp    edi,esi
c0025da6:	72 06                	jb     c0025dae <__moddi3+0xd2>
c0025da8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0025dac:	77 0c                	ja     c0025dba <__moddi3+0xde>
c0025dae:	89 e9                	mov    ecx,ebp
c0025db0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025db4:	19 fe                	sbb    esi,edi
c0025db6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025dba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dbe:	89 f2                	mov    edx,esi
c0025dc0:	e9 6b ff ff ff       	jmp    c0025d30 <__moddi3+0x54>
c0025dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0025dc8:	b8 20 00 00 00       	mov    eax,0x20
c0025dcd:	89 c2                	mov    edx,eax
c0025dcf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025dd3:	29 da                	sub    edx,ebx
c0025dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025dd9:	88 d9                	mov    cl,bl
c0025ddb:	d3 e7                	shl    edi,cl
c0025ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025de1:	88 d1                	mov    cl,dl
c0025de3:	d3 e8                	shr    eax,cl
c0025de5:	09 c7                	or     edi,eax
c0025de7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0025deb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025def:	89 d8                	mov    eax,ebx
c0025df1:	88 d9                	mov    cl,bl
c0025df3:	d3 e7                	shl    edi,cl
c0025df5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025df9:	89 f3                	mov    ebx,esi
c0025dfb:	88 d1                	mov    cl,dl
c0025dfd:	d3 eb                	shr    ebx,cl
c0025dff:	89 c7                	mov    edi,eax
c0025e01:	88 c1                	mov    cl,al
c0025e03:	d3 e6                	shl    esi,cl
c0025e05:	89 e8                	mov    eax,ebp
c0025e07:	88 d1                	mov    cl,dl
c0025e09:	d3 e8                	shr    eax,cl
c0025e0b:	09 f0                	or     eax,esi
c0025e0d:	89 f9                	mov    ecx,edi
c0025e0f:	d3 e5                	shl    ebp,cl
c0025e11:	89 da                	mov    edx,ebx
c0025e13:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025e17:	89 d3                	mov    ebx,edx
c0025e19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025e1d:	89 c6                	mov    esi,eax
c0025e1f:	89 d1                	mov    ecx,edx
c0025e21:	39 d3                	cmp    ebx,edx
c0025e23:	72 27                	jb     c0025e4c <__moddi3+0x170>
c0025e25:	74 21                	je     c0025e48 <__moddi3+0x16c>
c0025e27:	29 f5                	sub    ebp,esi
c0025e29:	19 cb                	sbb    ebx,ecx
c0025e2b:	89 de                	mov    esi,ebx
c0025e2d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025e31:	d3 e6                	shl    esi,cl
c0025e33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025e37:	89 f9                	mov    ecx,edi
c0025e39:	d3 ed                	shr    ebp,cl
c0025e3b:	09 ee                	or     esi,ebp
c0025e3d:	89 f0                	mov    eax,esi
c0025e3f:	d3 eb                	shr    ebx,cl
c0025e41:	89 da                	mov    edx,ebx
c0025e43:	e9 e8 fe ff ff       	jmp    c0025d30 <__moddi3+0x54>
c0025e48:	39 c5                	cmp    ebp,eax
c0025e4a:	73 db                	jae    c0025e27 <__moddi3+0x14b>
c0025e4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025e50:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025e54:	89 d1                	mov    ecx,edx
c0025e56:	89 c6                	mov    esi,eax
c0025e58:	eb cd                	jmp    c0025e27 <__moddi3+0x14b>
c0025e5a:	66 90                	xchg   ax,ax

c0025e5c <__udivdi3>:
c0025e5c:	55                   	push   ebp
c0025e5d:	57                   	push   edi
c0025e5e:	56                   	push   esi
c0025e5f:	53                   	push   ebx
c0025e60:	83 ec 1c             	sub    esp,0x1c
c0025e63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0025e6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0025e6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025e73:	85 d2                	test   edx,edx
c0025e75:	75 41                	jne    c0025eb8 <__udivdi3+0x5c>
c0025e77:	39 f7                	cmp    edi,esi
c0025e79:	76 15                	jbe    c0025e90 <__udivdi3+0x34>
c0025e7b:	89 e8                	mov    eax,ebp
c0025e7d:	89 f2                	mov    edx,esi
c0025e7f:	f7 f7                	div    edi
c0025e81:	31 db                	xor    ebx,ebx
c0025e83:	89 da                	mov    edx,ebx
c0025e85:	83 c4 1c             	add    esp,0x1c
c0025e88:	5b                   	pop    ebx
c0025e89:	5e                   	pop    esi
c0025e8a:	5f                   	pop    edi
c0025e8b:	5d                   	pop    ebp
c0025e8c:	c3                   	ret    
c0025e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0025e90:	89 f9                	mov    ecx,edi
c0025e92:	85 ff                	test   edi,edi
c0025e94:	75 0b                	jne    c0025ea1 <__udivdi3+0x45>
c0025e96:	b8 01 00 00 00       	mov    eax,0x1
c0025e9b:	31 d2                	xor    edx,edx
c0025e9d:	f7 f7                	div    edi
c0025e9f:	89 c1                	mov    ecx,eax
c0025ea1:	31 d2                	xor    edx,edx
c0025ea3:	89 f0                	mov    eax,esi
c0025ea5:	f7 f1                	div    ecx
c0025ea7:	89 c3                	mov    ebx,eax
c0025ea9:	89 e8                	mov    eax,ebp
c0025eab:	f7 f1                	div    ecx
c0025ead:	89 da                	mov    edx,ebx
c0025eaf:	83 c4 1c             	add    esp,0x1c
c0025eb2:	5b                   	pop    ebx
c0025eb3:	5e                   	pop    esi
c0025eb4:	5f                   	pop    edi
c0025eb5:	5d                   	pop    ebp
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop
c0025eb8:	39 f2                	cmp    edx,esi
c0025eba:	77 1c                	ja     c0025ed8 <__udivdi3+0x7c>
c0025ebc:	0f bd da             	bsr    ebx,edx
c0025ebf:	83 f3 1f             	xor    ebx,0x1f
c0025ec2:	75 24                	jne    c0025ee8 <__udivdi3+0x8c>
c0025ec4:	39 f2                	cmp    edx,esi
c0025ec6:	72 08                	jb     c0025ed0 <__udivdi3+0x74>
c0025ec8:	39 ef                	cmp    edi,ebp
c0025eca:	0f 87 84 00 00 00    	ja     c0025f54 <__udivdi3+0xf8>
c0025ed0:	b8 01 00 00 00       	mov    eax,0x1
c0025ed5:	eb ac                	jmp    c0025e83 <__udivdi3+0x27>
c0025ed7:	90                   	nop
c0025ed8:	31 db                	xor    ebx,ebx
c0025eda:	31 c0                	xor    eax,eax
c0025edc:	89 da                	mov    edx,ebx
c0025ede:	83 c4 1c             	add    esp,0x1c
c0025ee1:	5b                   	pop    ebx
c0025ee2:	5e                   	pop    esi
c0025ee3:	5f                   	pop    edi
c0025ee4:	5d                   	pop    ebp
c0025ee5:	c3                   	ret    
c0025ee6:	66 90                	xchg   ax,ax
c0025ee8:	b8 20 00 00 00       	mov    eax,0x20
c0025eed:	29 d8                	sub    eax,ebx
c0025eef:	88 d9                	mov    cl,bl
c0025ef1:	d3 e2                	shl    edx,cl
c0025ef3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025ef7:	89 fa                	mov    edx,edi
c0025ef9:	88 c1                	mov    cl,al
c0025efb:	d3 ea                	shr    edx,cl
c0025efd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025f01:	09 d1                	or     ecx,edx
c0025f03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025f07:	88 d9                	mov    cl,bl
c0025f09:	d3 e7                	shl    edi,cl
c0025f0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025f0f:	89 f7                	mov    edi,esi
c0025f11:	88 c1                	mov    cl,al
c0025f13:	d3 ef                	shr    edi,cl
c0025f15:	88 d9                	mov    cl,bl
c0025f17:	d3 e6                	shl    esi,cl
c0025f19:	89 ea                	mov    edx,ebp
c0025f1b:	88 c1                	mov    cl,al
c0025f1d:	d3 ea                	shr    edx,cl
c0025f1f:	09 d6                	or     esi,edx
c0025f21:	89 f0                	mov    eax,esi
c0025f23:	89 fa                	mov    edx,edi
c0025f25:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025f29:	89 d7                	mov    edi,edx
c0025f2b:	89 c6                	mov    esi,eax
c0025f2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025f31:	39 d7                	cmp    edi,edx
c0025f33:	72 13                	jb     c0025f48 <__udivdi3+0xec>
c0025f35:	74 09                	je     c0025f40 <__udivdi3+0xe4>
c0025f37:	89 f0                	mov    eax,esi
c0025f39:	31 db                	xor    ebx,ebx
c0025f3b:	e9 43 ff ff ff       	jmp    c0025e83 <__udivdi3+0x27>
c0025f40:	88 d9                	mov    cl,bl
c0025f42:	d3 e5                	shl    ebp,cl
c0025f44:	39 c5                	cmp    ebp,eax
c0025f46:	73 ef                	jae    c0025f37 <__udivdi3+0xdb>
c0025f48:	8d 46 ff             	lea    eax,[esi-0x1]
c0025f4b:	31 db                	xor    ebx,ebx
c0025f4d:	e9 31 ff ff ff       	jmp    c0025e83 <__udivdi3+0x27>
c0025f52:	66 90                	xchg   ax,ax
c0025f54:	31 c0                	xor    eax,eax
c0025f56:	e9 28 ff ff ff       	jmp    c0025e83 <__udivdi3+0x27>
c0025f5b:	90                   	nop

c0025f5c <__umoddi3>:
c0025f5c:	55                   	push   ebp
c0025f5d:	57                   	push   edi
c0025f5e:	56                   	push   esi
c0025f5f:	53                   	push   ebx
c0025f60:	83 ec 1c             	sub    esp,0x1c
c0025f63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025f67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0025f6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025f73:	89 da                	mov    edx,ebx
c0025f75:	85 c0                	test   eax,eax
c0025f77:	75 37                	jne    c0025fb0 <__umoddi3+0x54>
c0025f79:	39 df                	cmp    edi,ebx
c0025f7b:	76 13                	jbe    c0025f90 <__umoddi3+0x34>
c0025f7d:	89 f0                	mov    eax,esi
c0025f7f:	f7 f7                	div    edi
c0025f81:	89 d0                	mov    eax,edx
c0025f83:	31 d2                	xor    edx,edx
c0025f85:	83 c4 1c             	add    esp,0x1c
c0025f88:	5b                   	pop    ebx
c0025f89:	5e                   	pop    esi
c0025f8a:	5f                   	pop    edi
c0025f8b:	5d                   	pop    ebp
c0025f8c:	c3                   	ret    
c0025f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f90:	89 fd                	mov    ebp,edi
c0025f92:	85 ff                	test   edi,edi
c0025f94:	75 0b                	jne    c0025fa1 <__umoddi3+0x45>
c0025f96:	b8 01 00 00 00       	mov    eax,0x1
c0025f9b:	31 d2                	xor    edx,edx
c0025f9d:	f7 f7                	div    edi
c0025f9f:	89 c5                	mov    ebp,eax
c0025fa1:	89 d8                	mov    eax,ebx
c0025fa3:	31 d2                	xor    edx,edx
c0025fa5:	f7 f5                	div    ebp
c0025fa7:	89 f0                	mov    eax,esi
c0025fa9:	f7 f5                	div    ebp
c0025fab:	89 d0                	mov    eax,edx
c0025fad:	eb d4                	jmp    c0025f83 <__umoddi3+0x27>
c0025faf:	90                   	nop
c0025fb0:	89 f1                	mov    ecx,esi
c0025fb2:	39 d8                	cmp    eax,ebx
c0025fb4:	76 0a                	jbe    c0025fc0 <__umoddi3+0x64>
c0025fb6:	89 f0                	mov    eax,esi
c0025fb8:	83 c4 1c             	add    esp,0x1c
c0025fbb:	5b                   	pop    ebx
c0025fbc:	5e                   	pop    esi
c0025fbd:	5f                   	pop    edi
c0025fbe:	5d                   	pop    ebp
c0025fbf:	c3                   	ret    
c0025fc0:	0f bd e8             	bsr    ebp,eax
c0025fc3:	83 f5 1f             	xor    ebp,0x1f
c0025fc6:	75 1c                	jne    c0025fe4 <__umoddi3+0x88>
c0025fc8:	39 d8                	cmp    eax,ebx
c0025fca:	72 04                	jb     c0025fd0 <__umoddi3+0x74>
c0025fcc:	39 f7                	cmp    edi,esi
c0025fce:	77 08                	ja     c0025fd8 <__umoddi3+0x7c>
c0025fd0:	89 da                	mov    edx,ebx
c0025fd2:	29 fe                	sub    esi,edi
c0025fd4:	19 c2                	sbb    edx,eax
c0025fd6:	89 f1                	mov    ecx,esi
c0025fd8:	89 c8                	mov    eax,ecx
c0025fda:	83 c4 1c             	add    esp,0x1c
c0025fdd:	5b                   	pop    ebx
c0025fde:	5e                   	pop    esi
c0025fdf:	5f                   	pop    edi
c0025fe0:	5d                   	pop    ebp
c0025fe1:	c3                   	ret    
c0025fe2:	66 90                	xchg   ax,ax
c0025fe4:	ba 20 00 00 00       	mov    edx,0x20
c0025fe9:	29 ea                	sub    edx,ebp
c0025feb:	89 e9                	mov    ecx,ebp
c0025fed:	d3 e0                	shl    eax,cl
c0025fef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025ff3:	89 f8                	mov    eax,edi
c0025ff5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025ff9:	88 d1                	mov    cl,dl
c0025ffb:	d3 e8                	shr    eax,cl
c0025ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026001:	09 c1                	or     ecx,eax
c0026003:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026007:	89 e9                	mov    ecx,ebp
c0026009:	d3 e7                	shl    edi,cl
c002600b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002600f:	89 d8                	mov    eax,ebx
c0026011:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026015:	88 d1                	mov    cl,dl
c0026017:	d3 e8                	shr    eax,cl
c0026019:	89 c7                	mov    edi,eax
c002601b:	89 e9                	mov    ecx,ebp
c002601d:	d3 e3                	shl    ebx,cl
c002601f:	89 f0                	mov    eax,esi
c0026021:	88 d1                	mov    cl,dl
c0026023:	d3 e8                	shr    eax,cl
c0026025:	09 d8                	or     eax,ebx
c0026027:	89 e9                	mov    ecx,ebp
c0026029:	d3 e6                	shl    esi,cl
c002602b:	89 f3                	mov    ebx,esi
c002602d:	89 fa                	mov    edx,edi
c002602f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026033:	89 d1                	mov    ecx,edx
c0026035:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026039:	89 c6                	mov    esi,eax
c002603b:	89 d7                	mov    edi,edx
c002603d:	39 d1                	cmp    ecx,edx
c002603f:	72 27                	jb     c0026068 <__umoddi3+0x10c>
c0026041:	74 21                	je     c0026064 <__umoddi3+0x108>
c0026043:	89 ca                	mov    edx,ecx
c0026045:	29 f3                	sub    ebx,esi
c0026047:	19 fa                	sbb    edx,edi
c0026049:	89 d0                	mov    eax,edx
c002604b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002604f:	d3 e0                	shl    eax,cl
c0026051:	89 e9                	mov    ecx,ebp
c0026053:	d3 eb                	shr    ebx,cl
c0026055:	09 d8                	or     eax,ebx
c0026057:	d3 ea                	shr    edx,cl
c0026059:	83 c4 1c             	add    esp,0x1c
c002605c:	5b                   	pop    ebx
c002605d:	5e                   	pop    esi
c002605e:	5f                   	pop    edi
c002605f:	5d                   	pop    ebp
c0026060:	c3                   	ret    
c0026061:	8d 76 00             	lea    esi,[esi+0x0]
c0026064:	39 c3                	cmp    ebx,eax
c0026066:	73 db                	jae    c0026043 <__umoddi3+0xe7>
c0026068:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002606c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026070:	89 d7                	mov    edi,edx
c0026072:	89 c6                	mov    esi,eax
c0026074:	eb cd                	jmp    c0026043 <__umoddi3+0xe7>

c0026076 <__addsf3>:
c0026076:	55                   	push   ebp
c0026077:	89 e5                	mov    ebp,esp
c0026079:	57                   	push   edi
c002607a:	56                   	push   esi
c002607b:	53                   	push   ebx
c002607c:	83 ec 08             	sub    esp,0x8
c002607f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026082:	89 fa                	mov    edx,edi
c0026084:	89 f8                	mov    eax,edi
c0026086:	c1 f8 17             	sar    eax,0x17
c0026089:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002608c:	c1 e2 08             	shl    edx,0x8
c002608f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026095:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026098:	89 de                	mov    esi,ebx
c002609a:	c1 fe 17             	sar    esi,0x17
c002609d:	c1 e3 08             	shl    ebx,0x8
c00260a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00260a6:	31 f0                	xor    eax,esi
c00260a8:	0f 88 3b 01 00 00    	js     c00261e9 <__addsf3+0x173>
c00260ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00260b1:	29 f1                	sub    ecx,esi
c00260b3:	85 c9                	test   ecx,ecx
c00260b5:	7e 54                	jle    c002610b <__addsf3+0x95>
c00260b7:	89 f0                	mov    eax,esi
c00260b9:	84 c0                	test   al,al
c00260bb:	75 10                	jne    c00260cd <__addsf3+0x57>
c00260bd:	85 db                	test   ebx,ebx
c00260bf:	0f 84 aa 02 00 00    	je     c002636f <__addsf3+0x2f9>
c00260c5:	49                   	dec    ecx
c00260c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00260c9:	74 38                	je     c0026103 <__addsf3+0x8d>
c00260cb:	eb 13                	jmp    c00260e0 <__addsf3+0x6a>
c00260cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260d0:	f7 d0                	not    eax
c00260d2:	84 c0                	test   al,al
c00260d4:	0f 84 95 02 00 00    	je     c002636f <__addsf3+0x2f9>
c00260da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00260e0:	83 f9 1f             	cmp    ecx,0x1f
c00260e3:	0f 8f 86 02 00 00    	jg     c002636f <__addsf3+0x2f9>
c00260e9:	89 de                	mov    esi,ebx
c00260eb:	d3 ee                	shr    esi,cl
c00260ed:	b8 20 00 00 00       	mov    eax,0x20
c00260f2:	29 c8                	sub    eax,ecx
c00260f4:	89 c1                	mov    ecx,eax
c00260f6:	d3 e3                	shl    ebx,cl
c00260f8:	31 c0                	xor    eax,eax
c00260fa:	85 db                	test   ebx,ebx
c00260fc:	0f 95 c0             	setne  al
c00260ff:	09 f0                	or     eax,esi
c0026101:	01 d0                	add    eax,edx
c0026103:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026106:	e9 b6 00 00 00       	jmp    c00261c1 <__addsf3+0x14b>
c002610b:	74 5c                	je     c0026169 <__addsf3+0xf3>
c002610d:	89 f1                	mov    ecx,esi
c002610f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026112:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026115:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026119:	75 14                	jne    c002612f <__addsf3+0xb9>
c002611b:	85 d2                	test   edx,edx
c002611d:	0f 84 4c 02 00 00    	je     c002636f <__addsf3+0x2f9>
c0026123:	49                   	dec    ecx
c0026124:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026127:	0f 84 94 00 00 00    	je     c00261c1 <__addsf3+0x14b>
c002612d:	eb 12                	jmp    c0026141 <__addsf3+0xcb>
c002612f:	89 f0                	mov    eax,esi
c0026131:	f7 d0                	not    eax
c0026133:	84 c0                	test   al,al
c0026135:	0f 84 34 02 00 00    	je     c002636f <__addsf3+0x2f9>
c002613b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026141:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026144:	83 f9 1f             	cmp    ecx,0x1f
c0026147:	0f 8f 22 02 00 00    	jg     c002636f <__addsf3+0x2f9>
c002614d:	89 d7                	mov    edi,edx
c002614f:	d3 ef                	shr    edi,cl
c0026151:	b8 20 00 00 00       	mov    eax,0x20
c0026156:	29 c8                	sub    eax,ecx
c0026158:	89 c1                	mov    ecx,eax
c002615a:	d3 e2                	shl    edx,cl
c002615c:	31 c0                	xor    eax,eax
c002615e:	85 d2                	test   edx,edx
c0026160:	0f 95 c0             	setne  al
c0026163:	09 f8                	or     eax,edi
c0026165:	01 d8                	add    eax,ebx
c0026167:	eb 58                	jmp    c00261c1 <__addsf3+0x14b>
c0026169:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002616c:	8d 70 01             	lea    esi,[eax+0x1]
c002616f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026175:	75 32                	jne    c00261a9 <__addsf3+0x133>
c0026177:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002617b:	75 1f                	jne    c002619c <__addsf3+0x126>
c002617d:	85 d2                	test   edx,edx
c002617f:	0f 84 e0 01 00 00    	je     c0026365 <__addsf3+0x2ef>
c0026185:	85 db                	test   ebx,ebx
c0026187:	0f 84 e2 01 00 00    	je     c002636f <__addsf3+0x2f9>
c002618d:	89 d0                	mov    eax,edx
c002618f:	01 d8                	add    eax,ebx
c0026191:	0f 89 a9 01 00 00    	jns    c0026340 <__addsf3+0x2ca>
c0026197:	e9 9d 01 00 00       	jmp    c0026339 <__addsf3+0x2c3>
c002619c:	85 d2                	test   edx,edx
c002619e:	0f 85 cb 01 00 00    	jne    c002636f <__addsf3+0x2f9>
c00261a4:	e9 bc 01 00 00       	jmp    c0026365 <__addsf3+0x2ef>
c00261a9:	31 c0                	xor    eax,eax
c00261ab:	89 f1                	mov    ecx,esi
c00261ad:	f7 d1                	not    ecx
c00261af:	84 c9                	test   cl,cl
c00261b1:	0f 84 90 01 00 00    	je     c0026347 <__addsf3+0x2d1>
c00261b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00261ba:	d1 e8                	shr    eax,1
c00261bc:	e9 86 01 00 00       	jmp    c0026347 <__addsf3+0x2d1>
c00261c1:	85 c0                	test   eax,eax
c00261c3:	0f 89 7e 01 00 00    	jns    c0026347 <__addsf3+0x2d1>
c00261c9:	46                   	inc    esi
c00261ca:	89 f2                	mov    edx,esi
c00261cc:	f7 d2                	not    edx
c00261ce:	84 d2                	test   dl,dl
c00261d0:	0f 84 6f 01 00 00    	je     c0026345 <__addsf3+0x2cf>
c00261d6:	89 c2                	mov    edx,eax
c00261d8:	83 e2 01             	and    edx,0x1
c00261db:	d1 e8                	shr    eax,1
c00261dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00261e2:	09 d0                	or     eax,edx
c00261e4:	e9 5e 01 00 00       	jmp    c0026347 <__addsf3+0x2d1>
c00261e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00261ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00261f0:	89 f0                	mov    eax,esi
c00261f2:	0f b6 c0             	movzx  eax,al
c00261f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261f8:	29 c1                	sub    ecx,eax
c00261fa:	85 c9                	test   ecx,ecx
c00261fc:	7e 55                	jle    c0026253 <__addsf3+0x1dd>
c00261fe:	85 c0                	test   eax,eax
c0026200:	75 11                	jne    c0026213 <__addsf3+0x19d>
c0026202:	85 db                	test   ebx,ebx
c0026204:	0f 84 65 01 00 00    	je     c002636f <__addsf3+0x2f9>
c002620a:	49                   	dec    ecx
c002620b:	75 19                	jne    c0026226 <__addsf3+0x1b0>
c002620d:	89 d0                	mov    eax,edx
c002620f:	29 d8                	sub    eax,ebx
c0026211:	eb 38                	jmp    c002624b <__addsf3+0x1d5>
c0026213:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026216:	f7 d0                	not    eax
c0026218:	84 c0                	test   al,al
c002621a:	0f 84 4f 01 00 00    	je     c002636f <__addsf3+0x2f9>
c0026220:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026226:	83 f9 1f             	cmp    ecx,0x1f
c0026229:	0f 8f 40 01 00 00    	jg     c002636f <__addsf3+0x2f9>
c002622f:	89 de                	mov    esi,ebx
c0026231:	d3 ee                	shr    esi,cl
c0026233:	b8 20 00 00 00       	mov    eax,0x20
c0026238:	29 c8                	sub    eax,ecx
c002623a:	89 c1                	mov    ecx,eax
c002623c:	d3 e3                	shl    ebx,cl
c002623e:	31 c0                	xor    eax,eax
c0026240:	85 db                	test   ebx,ebx
c0026242:	0f 95 c0             	setne  al
c0026245:	09 f0                	or     eax,esi
c0026247:	29 c2                	sub    edx,eax
c0026249:	89 d0                	mov    eax,edx
c002624b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002624e:	e9 af 00 00 00       	jmp    c0026302 <__addsf3+0x28c>
c0026253:	74 5c                	je     c00262b1 <__addsf3+0x23b>
c0026255:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026258:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002625b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002625f:	75 14                	jne    c0026275 <__addsf3+0x1ff>
c0026261:	85 d2                	test   edx,edx
c0026263:	0f 84 06 01 00 00    	je     c002636f <__addsf3+0x2f9>
c0026269:	48                   	dec    eax
c002626a:	75 1b                	jne    c0026287 <__addsf3+0x211>
c002626c:	89 d8                	mov    eax,ebx
c002626e:	29 d0                	sub    eax,edx
c0026270:	e9 8d 00 00 00       	jmp    c0026302 <__addsf3+0x28c>
c0026275:	89 f1                	mov    ecx,esi
c0026277:	f7 d1                	not    ecx
c0026279:	84 c9                	test   cl,cl
c002627b:	0f 84 ee 00 00 00    	je     c002636f <__addsf3+0x2f9>
c0026281:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026287:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002628a:	83 f8 1f             	cmp    eax,0x1f
c002628d:	0f 8f dc 00 00 00    	jg     c002636f <__addsf3+0x2f9>
c0026293:	89 d7                	mov    edi,edx
c0026295:	88 c1                	mov    cl,al
c0026297:	d3 ef                	shr    edi,cl
c0026299:	b9 20 00 00 00       	mov    ecx,0x20
c002629e:	29 c1                	sub    ecx,eax
c00262a0:	d3 e2                	shl    edx,cl
c00262a2:	31 c0                	xor    eax,eax
c00262a4:	85 d2                	test   edx,edx
c00262a6:	0f 95 c0             	setne  al
c00262a9:	09 f8                	or     eax,edi
c00262ab:	29 c3                	sub    ebx,eax
c00262ad:	89 d8                	mov    eax,ebx
c00262af:	eb 51                	jmp    c0026302 <__addsf3+0x28c>
c00262b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00262b4:	40                   	inc    eax
c00262b5:	a8 fe                	test   al,0xfe
c00262b7:	75 3d                	jne    c00262f6 <__addsf3+0x280>
c00262b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00262bd:	0f 85 a7 00 00 00    	jne    c002636a <__addsf3+0x2f4>
c00262c3:	85 d2                	test   edx,edx
c00262c5:	75 12                	jne    c00262d9 <__addsf3+0x263>
c00262c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00262ca:	85 db                	test   ebx,ebx
c00262cc:	0f 85 9d 00 00 00    	jne    c002636f <__addsf3+0x2f9>
c00262d2:	31 ff                	xor    edi,edi
c00262d4:	e9 96 00 00 00       	jmp    c002636f <__addsf3+0x2f9>
c00262d9:	85 db                	test   ebx,ebx
c00262db:	0f 84 8e 00 00 00    	je     c002636f <__addsf3+0x2f9>
c00262e1:	89 d0                	mov    eax,edx
c00262e3:	29 d8                	sub    eax,ebx
c00262e5:	79 06                	jns    c00262ed <__addsf3+0x277>
c00262e7:	89 d8                	mov    eax,ebx
c00262e9:	29 d0                	sub    eax,edx
c00262eb:	eb 5a                	jmp    c0026347 <__addsf3+0x2d1>
c00262ed:	bf 00 00 00 00       	mov    edi,0x0
c00262f2:	74 7b                	je     c002636f <__addsf3+0x2f9>
c00262f4:	eb 4a                	jmp    c0026340 <__addsf3+0x2ca>
c00262f6:	89 d0                	mov    eax,edx
c00262f8:	29 d8                	sub    eax,ebx
c00262fa:	79 12                	jns    c002630e <__addsf3+0x298>
c00262fc:	89 d8                	mov    eax,ebx
c00262fe:	29 d0                	sub    eax,edx
c0026300:	eb 09                	jmp    c002630b <__addsf3+0x295>
c0026302:	85 c0                	test   eax,eax
c0026304:	79 41                	jns    c0026347 <__addsf3+0x2d1>
c0026306:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002630b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002630e:	31 f6                	xor    esi,esi
c0026310:	85 c0                	test   eax,eax
c0026312:	74 33                	je     c0026347 <__addsf3+0x2d1>
c0026314:	0f bd c8             	bsr    ecx,eax
c0026317:	83 f1 1f             	xor    ecx,0x1f
c002631a:	d3 e0                	shl    eax,cl
c002631c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026320:	39 ca                	cmp    edx,ecx
c0026322:	7f 10                	jg     c0026334 <__addsf3+0x2be>
c0026324:	29 d1                	sub    ecx,edx
c0026326:	41                   	inc    ecx
c0026327:	d3 e8                	shr    eax,cl
c0026329:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002632c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026332:	eb 13                	jmp    c0026347 <__addsf3+0x2d1>
c0026334:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026337:	29 ce                	sub    esi,ecx
c0026339:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002633e:	eb 07                	jmp    c0026347 <__addsf3+0x2d1>
c0026340:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026343:	eb 02                	jmp    c0026347 <__addsf3+0x2d1>
c0026345:	31 c0                	xor    eax,eax
c0026347:	89 c2                	mov    edx,eax
c0026349:	c1 ea 08             	shr    edx,0x8
c002634c:	a8 7f                	test   al,0x7f
c002634e:	0f 95 c1             	setne  cl
c0026351:	09 d1                	or     ecx,edx
c0026353:	83 e1 01             	and    ecx,0x1
c0026356:	c1 e8 07             	shr    eax,0x7
c0026359:	21 c8                	and    eax,ecx
c002635b:	c1 e6 17             	shl    esi,0x17
c002635e:	09 d6                	or     esi,edx
c0026360:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026363:	eb 0a                	jmp    c002636f <__addsf3+0x2f9>
c0026365:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026368:	eb 05                	jmp    c002636f <__addsf3+0x2f9>
c002636a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002636f:	89 f8                	mov    eax,edi
c0026371:	5a                   	pop    edx
c0026372:	59                   	pop    ecx
c0026373:	5b                   	pop    ebx
c0026374:	5e                   	pop    esi
c0026375:	5f                   	pop    edi
c0026376:	5d                   	pop    ebp
c0026377:	c3                   	ret    

c0026378 <__subsf3>:
c0026378:	55                   	push   ebp
c0026379:	89 e5                	mov    ebp,esp
c002637b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002637e:	05 00 00 00 80       	add    eax,0x80000000
c0026383:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026386:	5d                   	pop    ebp
c0026387:	e9 ea fc ff ff       	jmp    c0026076 <__addsf3>

c002638c <__negsf2>:
c002638c:	55                   	push   ebp
c002638d:	89 e5                	mov    ebp,esp
c002638f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026392:	05 00 00 00 80       	add    eax,0x80000000
c0026397:	5d                   	pop    ebp
c0026398:	c3                   	ret    

c0026399 <__mulsf3>:
c0026399:	55                   	push   ebp
c002639a:	89 e5                	mov    ebp,esp
c002639c:	57                   	push   edi
c002639d:	56                   	push   esi
c002639e:	53                   	push   ebx
c002639f:	83 ec 1c             	sub    esp,0x1c
c00263a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00263a5:	89 f0                	mov    eax,esi
c00263a7:	89 f1                	mov    ecx,esi
c00263a9:	c1 f9 17             	sar    ecx,0x17
c00263ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00263af:	c1 e0 08             	shl    eax,0x8
c00263b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00263b7:	89 c1                	mov    ecx,eax
c00263b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263bf:	89 c7                	mov    edi,eax
c00263c1:	c1 ff 17             	sar    edi,0x17
c00263c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00263cb:	89 f8                	mov    eax,edi
c00263cd:	0f b6 c0             	movzx  eax,al
c00263d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00263d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00263da:	42                   	inc    edx
c00263db:	80 e2 fe             	and    dl,0xfe
c00263de:	75 7b                	jne    c002645b <__mulsf3+0xc2>
c00263e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00263e4:	74 54                	je     c002643a <__mulsf3+0xa1>
c00263e6:	85 c9                	test   ecx,ecx
c00263e8:	0f 85 64 01 00 00    	jne    c0026552 <__mulsf3+0x1b9>
c00263ee:	8d 57 01             	lea    edx,[edi+0x1]
c00263f1:	80 e2 fe             	and    dl,0xfe
c00263f4:	75 1f                	jne    c0026415 <__mulsf3+0x7c>
c00263f6:	85 c0                	test   eax,eax
c00263f8:	b8 00 00 00 00       	mov    eax,0x0
c00263fd:	74 29                	je     c0026428 <__mulsf3+0x8f>
c00263ff:	53                   	push   ebx
c0026400:	53                   	push   ebx
c0026401:	50                   	push   eax
c0026402:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026405:	e8 96 05 00 00       	call   c00269a0 <__nesf2>
c002640a:	83 c4 10             	add    esp,0x10
c002640d:	85 c0                	test   eax,eax
c002640f:	0f 85 3a 01 00 00    	jne    c002654f <__mulsf3+0x1b6>
c0026415:	85 ff                	test   edi,edi
c0026417:	0f 89 35 01 00 00    	jns    c0026552 <__mulsf3+0x1b9>
c002641d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026423:	e9 2a 01 00 00       	jmp    c0026552 <__mulsf3+0x1b9>
c0026428:	51                   	push   ecx
c0026429:	51                   	push   ecx
c002642a:	50                   	push   eax
c002642b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002642e:	e8 6d 05 00 00       	call   c00269a0 <__nesf2>
c0026433:	83 c4 10             	add    esp,0x10
c0026436:	85 c0                	test   eax,eax
c0026438:	eb 15                	jmp    c002644f <__mulsf3+0xb6>
c002643a:	85 c9                	test   ecx,ecx
c002643c:	74 0b                	je     c0026449 <__mulsf3+0xb0>
c002643e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026441:	01 c9                	add    ecx,ecx
c0026443:	78 16                	js     c002645b <__mulsf3+0xc2>
c0026445:	89 d3                	mov    ebx,edx
c0026447:	eb f5                	jmp    c002643e <__mulsf3+0xa5>
c0026449:	89 f8                	mov    eax,edi
c002644b:	f7 d0                	not    eax
c002644d:	84 c0                	test   al,al
c002644f:	75 c4                	jne    c0026415 <__mulsf3+0x7c>
c0026451:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026456:	e9 f7 00 00 00       	jmp    c0026552 <__mulsf3+0x1b9>
c002645b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002645e:	c1 e6 08             	shl    esi,0x8
c0026461:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026467:	8d 57 01             	lea    edx,[edi+0x1]
c002646a:	80 e2 fe             	and    dl,0xfe
c002646d:	75 63                	jne    c00264d2 <__mulsf3+0x139>
c002646f:	85 c0                	test   eax,eax
c0026471:	74 2f                	je     c00264a2 <__mulsf3+0x109>
c0026473:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026477:	0f 89 d2 00 00 00    	jns    c002654f <__mulsf3+0x1b6>
c002647d:	52                   	push   edx
c002647e:	52                   	push   edx
c002647f:	6a 00                	push   0x0
c0026481:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026484:	e8 dc 04 00 00       	call   c0026965 <__eqsf2>
c0026489:	83 c4 10             	add    esp,0x10
c002648c:	85 c0                	test   eax,eax
c002648e:	0f 85 bb 00 00 00    	jne    c002654f <__mulsf3+0x1b6>
c0026494:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026497:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002649d:	e9 b0 00 00 00       	jmp    c0026552 <__mulsf3+0x1b9>
c00264a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00264a5:	50                   	push   eax
c00264a6:	50                   	push   eax
c00264a7:	6a 00                	push   0x0
c00264a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00264ac:	e8 b4 04 00 00       	call   c0026965 <__eqsf2>
c00264b1:	83 c4 10             	add    esp,0x10
c00264b4:	85 c0                	test   eax,eax
c00264b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00264b9:	75 0c                	jne    c00264c7 <__mulsf3+0x12e>
c00264bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00264bf:	0f 89 8a 00 00 00    	jns    c002654f <__mulsf3+0x1b6>
c00264c5:	eb cd                	jmp    c0026494 <__mulsf3+0xfb>
c00264c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00264ca:	01 f6                	add    esi,esi
c00264cc:	78 04                	js     c00264d2 <__mulsf3+0x139>
c00264ce:	89 c3                	mov    ebx,eax
c00264d0:	eb f5                	jmp    c00264c7 <__mulsf3+0x12e>
c00264d2:	89 c8                	mov    eax,ecx
c00264d4:	0d 00 00 00 80       	or     eax,0x80000000
c00264d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00264df:	f7 e6                	mul    esi
c00264e1:	85 c0                	test   eax,eax
c00264e3:	0f 95 c0             	setne  al
c00264e6:	0f b6 c0             	movzx  eax,al
c00264e9:	09 c2                	or     edx,eax
c00264eb:	78 03                	js     c00264f0 <__mulsf3+0x157>
c00264ed:	01 d2                	add    edx,edx
c00264ef:	4b                   	dec    ebx
c00264f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00264f6:	7f 22                	jg     c002651a <__mulsf3+0x181>
c00264f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00264fe:	85 db                	test   ebx,ebx
c0026500:	7f 23                	jg     c0026525 <__mulsf3+0x18c>
c0026502:	83 fb e9             	cmp    ebx,0xffffffe9
c0026505:	7c 1a                	jl     c0026521 <__mulsf3+0x188>
c0026507:	81 ca 00 00 00 80    	or     edx,0x80000000
c002650d:	b9 01 00 00 00       	mov    ecx,0x1
c0026512:	29 d9                	sub    ecx,ebx
c0026514:	d3 ea                	shr    edx,cl
c0026516:	31 db                	xor    ebx,ebx
c0026518:	eb 0b                	jmp    c0026525 <__mulsf3+0x18c>
c002651a:	bb ff 00 00 00       	mov    ebx,0xff
c002651f:	eb 02                	jmp    c0026523 <__mulsf3+0x18a>
c0026521:	31 db                	xor    ebx,ebx
c0026523:	31 d2                	xor    edx,edx
c0026525:	89 d0                	mov    eax,edx
c0026527:	c1 e8 08             	shr    eax,0x8
c002652a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002652d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026533:	09 fb                	or     ebx,edi
c0026535:	c1 e3 17             	shl    ebx,0x17
c0026538:	09 c3                	or     ebx,eax
c002653a:	f6 c2 7f             	test   dl,0x7f
c002653d:	0f 95 c1             	setne  cl
c0026540:	09 c8                	or     eax,ecx
c0026542:	83 e0 01             	and    eax,0x1
c0026545:	c1 ea 07             	shr    edx,0x7
c0026548:	21 c2                	and    edx,eax
c002654a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002654d:	eb 03                	jmp    c0026552 <__mulsf3+0x1b9>
c002654f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026552:	89 f0                	mov    eax,esi
c0026554:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026557:	5b                   	pop    ebx
c0026558:	5e                   	pop    esi
c0026559:	5f                   	pop    edi
c002655a:	5d                   	pop    ebp
c002655b:	c3                   	ret    

c002655c <__divsf3>:
c002655c:	55                   	push   ebp
c002655d:	89 e5                	mov    ebp,esp
c002655f:	57                   	push   edi
c0026560:	56                   	push   esi
c0026561:	53                   	push   ebx
c0026562:	83 ec 1c             	sub    esp,0x1c
c0026565:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026568:	89 d8                	mov    eax,ebx
c002656a:	89 d9                	mov    ecx,ebx
c002656c:	c1 f9 17             	sar    ecx,0x17
c002656f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026572:	c1 e0 08             	shl    eax,0x8
c0026575:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002657a:	89 c1                	mov    ecx,eax
c002657c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002657f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026582:	89 c7                	mov    edi,eax
c0026584:	c1 ff 17             	sar    edi,0x17
c0026587:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002658b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002658e:	89 f8                	mov    eax,edi
c0026590:	0f b6 c0             	movzx  eax,al
c0026593:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026596:	29 c6                	sub    esi,eax
c0026598:	83 c6 7f             	add    esi,0x7f
c002659b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002659e:	42                   	inc    edx
c002659f:	80 e2 fe             	and    dl,0xfe
c00265a2:	0f 85 9c 00 00 00    	jne    c0026644 <__divsf3+0xe8>
c00265a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00265ac:	74 33                	je     c00265e1 <__divsf3+0x85>
c00265ae:	85 c9                	test   ecx,ecx
c00265b0:	0f 85 c7 01 00 00    	jne    c002677d <__divsf3+0x221>
c00265b6:	8d 57 01             	lea    edx,[edi+0x1]
c00265b9:	80 e2 fe             	and    dl,0xfe
c00265bc:	75 2f                	jne    c00265ed <__divsf3+0x91>
c00265be:	85 c0                	test   eax,eax
c00265c0:	74 2b                	je     c00265ed <__divsf3+0x91>
c00265c2:	51                   	push   ecx
c00265c3:	51                   	push   ecx
c00265c4:	6a 00                	push   0x0
c00265c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00265c9:	e8 d2 03 00 00       	call   c00269a0 <__nesf2>
c00265ce:	83 c4 10             	add    esp,0x10
c00265d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00265d4:	85 c0                	test   eax,eax
c00265d6:	0f 85 a1 01 00 00    	jne    c002677d <__divsf3+0x221>
c00265dc:	e9 92 01 00 00       	jmp    c0026773 <__divsf3+0x217>
c00265e1:	85 c9                	test   ecx,ecx
c00265e3:	75 1b                	jne    c0026600 <__divsf3+0xa4>
c00265e5:	8d 57 01             	lea    edx,[edi+0x1]
c00265e8:	80 e2 fe             	and    dl,0xfe
c00265eb:	74 1e                	je     c002660b <__divsf3+0xaf>
c00265ed:	85 ff                	test   edi,edi
c00265ef:	0f 89 88 01 00 00    	jns    c002677d <__divsf3+0x221>
c00265f5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00265fb:	e9 7d 01 00 00       	jmp    c002677d <__divsf3+0x221>
c0026600:	8d 56 ff             	lea    edx,[esi-0x1]
c0026603:	01 c9                	add    ecx,ecx
c0026605:	78 3d                	js     c0026644 <__divsf3+0xe8>
c0026607:	89 d6                	mov    esi,edx
c0026609:	eb f5                	jmp    c0026600 <__divsf3+0xa4>
c002660b:	85 c0                	test   eax,eax
c002660d:	b8 00 00 00 00       	mov    eax,0x0
c0026612:	74 18                	je     c002662c <__divsf3+0xd0>
c0026614:	52                   	push   edx
c0026615:	52                   	push   edx
c0026616:	50                   	push   eax
c0026617:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002661a:	e8 81 03 00 00       	call   c00269a0 <__nesf2>
c002661f:	83 c4 10             	add    esp,0x10
c0026622:	85 c0                	test   eax,eax
c0026624:	0f 85 50 01 00 00    	jne    c002677a <__divsf3+0x21e>
c002662a:	eb c1                	jmp    c00265ed <__divsf3+0x91>
c002662c:	56                   	push   esi
c002662d:	56                   	push   esi
c002662e:	50                   	push   eax
c002662f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026632:	e8 69 03 00 00       	call   c00269a0 <__nesf2>
c0026637:	83 c4 10             	add    esp,0x10
c002663a:	85 c0                	test   eax,eax
c002663c:	0f 84 31 01 00 00    	je     c0026773 <__divsf3+0x217>
c0026642:	eb a9                	jmp    c00265ed <__divsf3+0x91>
c0026644:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026647:	c1 e3 08             	shl    ebx,0x8
c002664a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026650:	8d 57 01             	lea    edx,[edi+0x1]
c0026653:	80 e2 fe             	and    dl,0xfe
c0026656:	75 71                	jne    c00266c9 <__divsf3+0x16d>
c0026658:	85 c0                	test   eax,eax
c002665a:	ba 00 00 00 00       	mov    edx,0x0
c002665f:	74 2f                	je     c0026690 <__divsf3+0x134>
c0026661:	51                   	push   ecx
c0026662:	51                   	push   ecx
c0026663:	52                   	push   edx
c0026664:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026667:	e8 f9 02 00 00       	call   c0026965 <__eqsf2>
c002666c:	83 c4 10             	add    esp,0x10
c002666f:	85 c0                	test   eax,eax
c0026671:	0f 85 03 01 00 00    	jne    c002677a <__divsf3+0x21e>
c0026677:	31 d2                	xor    edx,edx
c0026679:	89 d3                	mov    ebx,edx
c002667b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002667e:	31 f8                	xor    eax,edi
c0026680:	0f 89 f7 00 00 00    	jns    c002677d <__divsf3+0x221>
c0026686:	bb 00 00 00 80       	mov    ebx,0x80000000
c002668b:	e9 ed 00 00 00       	jmp    c002677d <__divsf3+0x221>
c0026690:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026693:	50                   	push   eax
c0026694:	50                   	push   eax
c0026695:	52                   	push   edx
c0026696:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026699:	e8 c7 02 00 00       	call   c0026965 <__eqsf2>
c002669e:	83 c4 10             	add    esp,0x10
c00266a1:	85 c0                	test   eax,eax
c00266a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00266a6:	75 16                	jne    c00266be <__divsf3+0x162>
c00266a8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00266ab:	31 fb                	xor    ebx,edi
c00266ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00266b3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00266b9:	e9 bf 00 00 00       	jmp    c002677d <__divsf3+0x221>
c00266be:	8d 46 01             	lea    eax,[esi+0x1]
c00266c1:	01 db                	add    ebx,ebx
c00266c3:	78 04                	js     c00266c9 <__divsf3+0x16d>
c00266c5:	89 c6                	mov    esi,eax
c00266c7:	eb f5                	jmp    c00266be <__divsf3+0x162>
c00266c9:	89 c8                	mov    eax,ecx
c00266cb:	0d 00 00 00 80       	or     eax,0x80000000
c00266d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00266d6:	31 d2                	xor    edx,edx
c00266d8:	39 d8                	cmp    eax,ebx
c00266da:	72 07                	jb     c00266e3 <__divsf3+0x187>
c00266dc:	29 d8                	sub    eax,ebx
c00266de:	ba 01 00 00 00       	mov    edx,0x1
c00266e3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00266ea:	01 d2                	add    edx,edx
c00266ec:	89 c1                	mov    ecx,eax
c00266ee:	01 c0                	add    eax,eax
c00266f0:	85 c9                	test   ecx,ecx
c00266f2:	78 04                	js     c00266f8 <__divsf3+0x19c>
c00266f4:	39 c3                	cmp    ebx,eax
c00266f6:	77 05                	ja     c00266fd <__divsf3+0x1a1>
c00266f8:	29 d8                	sub    eax,ebx
c00266fa:	83 ca 01             	or     edx,0x1
c00266fd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026700:	75 e8                	jne    c00266ea <__divsf3+0x18e>
c0026702:	85 c0                	test   eax,eax
c0026704:	0f 95 c0             	setne  al
c0026707:	0f b6 c0             	movzx  eax,al
c002670a:	c1 e2 06             	shl    edx,0x6
c002670d:	09 c2                	or     edx,eax
c002670f:	78 03                	js     c0026714 <__divsf3+0x1b8>
c0026711:	01 d2                	add    edx,edx
c0026713:	4e                   	dec    esi
c0026714:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002671a:	7f 22                	jg     c002673e <__divsf3+0x1e2>
c002671c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026722:	85 f6                	test   esi,esi
c0026724:	7f 23                	jg     c0026749 <__divsf3+0x1ed>
c0026726:	83 fe e9             	cmp    esi,0xffffffe9
c0026729:	7c 1a                	jl     c0026745 <__divsf3+0x1e9>
c002672b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026731:	b9 01 00 00 00       	mov    ecx,0x1
c0026736:	29 f1                	sub    ecx,esi
c0026738:	d3 ea                	shr    edx,cl
c002673a:	31 f6                	xor    esi,esi
c002673c:	eb 0b                	jmp    c0026749 <__divsf3+0x1ed>
c002673e:	be ff 00 00 00       	mov    esi,0xff
c0026743:	eb 02                	jmp    c0026747 <__divsf3+0x1eb>
c0026745:	31 f6                	xor    esi,esi
c0026747:	31 d2                	xor    edx,edx
c0026749:	89 d0                	mov    eax,edx
c002674b:	c1 e8 08             	shr    eax,0x8
c002674e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026751:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026757:	09 fe                	or     esi,edi
c0026759:	c1 e6 17             	shl    esi,0x17
c002675c:	09 c6                	or     esi,eax
c002675e:	f6 c2 7f             	test   dl,0x7f
c0026761:	0f 95 c1             	setne  cl
c0026764:	09 c8                	or     eax,ecx
c0026766:	83 e0 01             	and    eax,0x1
c0026769:	c1 ea 07             	shr    edx,0x7
c002676c:	21 c2                	and    edx,eax
c002676e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026771:	eb 0a                	jmp    c002677d <__divsf3+0x221>
c0026773:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026778:	eb 03                	jmp    c002677d <__divsf3+0x221>
c002677a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002677d:	89 d8                	mov    eax,ebx
c002677f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026782:	5b                   	pop    ebx
c0026783:	5e                   	pop    esi
c0026784:	5f                   	pop    edi
c0026785:	5d                   	pop    ebp
c0026786:	c3                   	ret    

c0026787 <__floatsisf>:
c0026787:	55                   	push   ebp
c0026788:	89 e5                	mov    ebp,esp
c002678a:	53                   	push   ebx
c002678b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002678e:	85 d2                	test   edx,edx
c0026790:	7e 2b                	jle    c00267bd <__floatsisf+0x36>
c0026792:	0f bd ca             	bsr    ecx,edx
c0026795:	83 f1 1f             	xor    ecx,0x1f
c0026798:	d3 e2                	shl    edx,cl
c002679a:	89 d0                	mov    eax,edx
c002679c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00267a1:	89 c3                	mov    ebx,eax
c00267a3:	c1 eb 08             	shr    ebx,0x8
c00267a6:	80 e2 7f             	and    dl,0x7f
c00267a9:	0f 95 c2             	setne  dl
c00267ac:	09 da                	or     edx,ebx
c00267ae:	83 e2 01             	and    edx,0x1
c00267b1:	c1 e8 07             	shr    eax,0x7
c00267b4:	21 c2                	and    edx,eax
c00267b6:	b8 9e 00 00 00       	mov    eax,0x9e
c00267bb:	eb 32                	jmp    c00267ef <__floatsisf+0x68>
c00267bd:	b8 00 00 00 00       	mov    eax,0x0
c00267c2:	74 34                	je     c00267f8 <__floatsisf+0x71>
c00267c4:	f7 da                	neg    edx
c00267c6:	0f bd ca             	bsr    ecx,edx
c00267c9:	83 f1 1f             	xor    ecx,0x1f
c00267cc:	d3 e2                	shl    edx,cl
c00267ce:	89 d0                	mov    eax,edx
c00267d0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00267d5:	89 c3                	mov    ebx,eax
c00267d7:	c1 eb 08             	shr    ebx,0x8
c00267da:	80 e2 7f             	and    dl,0x7f
c00267dd:	0f 95 c2             	setne  dl
c00267e0:	09 da                	or     edx,ebx
c00267e2:	83 e2 01             	and    edx,0x1
c00267e5:	c1 e8 07             	shr    eax,0x7
c00267e8:	21 c2                	and    edx,eax
c00267ea:	b8 9e 01 00 00       	mov    eax,0x19e
c00267ef:	29 c8                	sub    eax,ecx
c00267f1:	c1 e0 17             	shl    eax,0x17
c00267f4:	09 d8                	or     eax,ebx
c00267f6:	01 d0                	add    eax,edx
c00267f8:	5b                   	pop    ebx
c00267f9:	5d                   	pop    ebp
c00267fa:	c3                   	ret    

c00267fb <__floatunsisf>:
c00267fb:	55                   	push   ebp
c00267fc:	89 e5                	mov    ebp,esp
c00267fe:	53                   	push   ebx
c00267ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026802:	31 c0                	xor    eax,eax
c0026804:	85 d2                	test   edx,edx
c0026806:	74 32                	je     c002683a <__floatunsisf+0x3f>
c0026808:	0f bd ca             	bsr    ecx,edx
c002680b:	83 f1 1f             	xor    ecx,0x1f
c002680e:	d3 e2                	shl    edx,cl
c0026810:	89 d0                	mov    eax,edx
c0026812:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026817:	89 c3                	mov    ebx,eax
c0026819:	c1 eb 08             	shr    ebx,0x8
c002681c:	80 e2 7f             	and    dl,0x7f
c002681f:	0f 95 c2             	setne  dl
c0026822:	09 da                	or     edx,ebx
c0026824:	83 e2 01             	and    edx,0x1
c0026827:	c1 e8 07             	shr    eax,0x7
c002682a:	21 c2                	and    edx,eax
c002682c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026831:	29 c8                	sub    eax,ecx
c0026833:	c1 e0 17             	shl    eax,0x17
c0026836:	09 d8                	or     eax,ebx
c0026838:	01 d0                	add    eax,edx
c002683a:	5b                   	pop    ebx
c002683b:	5d                   	pop    ebp
c002683c:	c3                   	ret    

c002683d <__fixsfsi>:
c002683d:	55                   	push   ebp
c002683e:	89 e5                	mov    ebp,esp
c0026840:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026843:	89 d1                	mov    ecx,edx
c0026845:	c1 e1 08             	shl    ecx,0x8
c0026848:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002684e:	c1 fa 17             	sar    edx,0x17
c0026851:	78 1c                	js     c002686f <__fixsfsi+0x32>
c0026853:	83 ea 7f             	sub    edx,0x7f
c0026856:	31 c0                	xor    eax,eax
c0026858:	83 fa 1e             	cmp    edx,0x1e
c002685b:	77 40                	ja     c002689d <__fixsfsi+0x60>
c002685d:	89 c8                	mov    eax,ecx
c002685f:	0d 00 00 00 80       	or     eax,0x80000000
c0026864:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026869:	29 d1                	sub    ecx,edx
c002686b:	d3 e8                	shr    eax,cl
c002686d:	eb 2e                	jmp    c002689d <__fixsfsi+0x60>
c002686f:	31 c0                	xor    eax,eax
c0026871:	81 c2 81 00 00 00    	add    edx,0x81
c0026877:	78 24                	js     c002689d <__fixsfsi+0x60>
c0026879:	83 fa 1e             	cmp    edx,0x1e
c002687c:	7e 09                	jle    c0026887 <__fixsfsi+0x4a>
c002687e:	83 fa 1f             	cmp    edx,0x1f
c0026881:	75 18                	jne    c002689b <__fixsfsi+0x5e>
c0026883:	85 c9                	test   ecx,ecx
c0026885:	75 14                	jne    c002689b <__fixsfsi+0x5e>
c0026887:	89 c8                	mov    eax,ecx
c0026889:	0d 00 00 00 80       	or     eax,0x80000000
c002688e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026893:	29 d1                	sub    ecx,edx
c0026895:	d3 e8                	shr    eax,cl
c0026897:	f7 d8                	neg    eax
c0026899:	eb 02                	jmp    c002689d <__fixsfsi+0x60>
c002689b:	31 c0                	xor    eax,eax
c002689d:	5d                   	pop    ebp
c002689e:	c3                   	ret    

c002689f <__fixunssfsi>:
c002689f:	55                   	push   ebp
c00268a0:	89 e5                	mov    ebp,esp
c00268a2:	53                   	push   ebx
c00268a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00268a6:	89 d3                	mov    ebx,edx
c00268a8:	c1 fb 17             	sar    ebx,0x17
c00268ab:	83 eb 7f             	sub    ebx,0x7f
c00268ae:	31 c0                	xor    eax,eax
c00268b0:	83 fb 1f             	cmp    ebx,0x1f
c00268b3:	77 18                	ja     c00268cd <__fixunssfsi+0x2e>
c00268b5:	89 d0                	mov    eax,edx
c00268b7:	c1 e0 08             	shl    eax,0x8
c00268ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00268bf:	0d 00 00 00 80       	or     eax,0x80000000
c00268c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00268c9:	29 d9                	sub    ecx,ebx
c00268cb:	d3 e8                	shr    eax,cl
c00268cd:	5b                   	pop    ebx
c00268ce:	5d                   	pop    ebp
c00268cf:	c3                   	ret    

c00268d0 <__cmpsf2>:
c00268d0:	55                   	push   ebp
c00268d1:	89 e5                	mov    ebp,esp
c00268d3:	57                   	push   edi
c00268d4:	56                   	push   esi
c00268d5:	53                   	push   ebx
c00268d6:	83 ec 24             	sub    esp,0x24
c00268d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268df:	e8 4f 10 00 00       	call   c0027933 <__truncdfsf2>
c00268e4:	5a                   	pop    edx
c00268e5:	59                   	pop    ecx
c00268e6:	89 c3                	mov    ebx,eax
c00268e8:	c1 e8 17             	shr    eax,0x17
c00268eb:	0f b6 f0             	movzx  esi,al
c00268ee:	89 d8                	mov    eax,ebx
c00268f0:	c1 e8 1f             	shr    eax,0x1f
c00268f3:	31 c6                	xor    esi,eax
c00268f5:	c1 e3 08             	shl    ebx,0x8
c00268f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00268fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00268fe:	e8 30 10 00 00       	call   c0027933 <__truncdfsf2>
c0026903:	83 c4 10             	add    esp,0x10
c0026906:	89 c1                	mov    ecx,eax
c0026908:	c1 e9 17             	shr    ecx,0x17
c002690b:	0f b6 c9             	movzx  ecx,cl
c002690e:	89 c7                	mov    edi,eax
c0026910:	c1 ef 1f             	shr    edi,0x1f
c0026913:	89 ca                	mov    edx,ecx
c0026915:	31 fa                	xor    edx,edi
c0026917:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002691a:	c1 e0 08             	shl    eax,0x8
c002691d:	89 c2                	mov    edx,eax
c002691f:	89 d8                	mov    eax,ebx
c0026921:	09 d0                	or     eax,edx
c0026923:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026928:	09 f0                	or     eax,esi
c002692a:	75 08                	jne    c0026934 <__cmpsf2+0x64>
c002692c:	31 c0                	xor    eax,eax
c002692e:	39 f9                	cmp    ecx,edi
c0026930:	75 0c                	jne    c002693e <__cmpsf2+0x6e>
c0026932:	eb 29                	jmp    c002695d <__cmpsf2+0x8d>
c0026934:	b8 01 00 00 00       	mov    eax,0x1
c0026939:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002693c:	7f 1f                	jg     c002695d <__cmpsf2+0x8d>
c002693e:	83 c8 ff             	or     eax,0xffffffff
c0026941:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026944:	7c 17                	jl     c002695d <__cmpsf2+0x8d>
c0026946:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002694c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026952:	b8 01 00 00 00       	mov    eax,0x1
c0026957:	39 d3                	cmp    ebx,edx
c0026959:	77 02                	ja     c002695d <__cmpsf2+0x8d>
c002695b:	19 c0                	sbb    eax,eax
c002695d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026960:	5b                   	pop    ebx
c0026961:	5e                   	pop    esi
c0026962:	5f                   	pop    edi
c0026963:	5d                   	pop    ebp
c0026964:	c3                   	ret    

c0026965 <__eqsf2>:
c0026965:	55                   	push   ebp
c0026966:	89 e5                	mov    ebp,esp
c0026968:	83 ec 24             	sub    esp,0x24
c002696b:	6a 01                	push   0x1
c002696d:	83 ec 0c             	sub    esp,0xc
c0026970:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026973:	e8 df 10 00 00       	call   c0027a57 <__extendsfdf2>
c0026978:	83 c4 10             	add    esp,0x10
c002697b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002697e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026981:	52                   	push   edx
c0026982:	50                   	push   eax
c0026983:	50                   	push   eax
c0026984:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026987:	e8 cb 10 00 00       	call   c0027a57 <__extendsfdf2>
c002698c:	59                   	pop    ecx
c002698d:	59                   	pop    ecx
c002698e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026991:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026994:	52                   	push   edx
c0026995:	50                   	push   eax
c0026996:	e8 35 ff ff ff       	call   c00268d0 <__cmpsf2>
c002699b:	83 c4 20             	add    esp,0x20
c002699e:	c9                   	leave  
c002699f:	c3                   	ret    

c00269a0 <__nesf2>:
c00269a0:	eb c3                	jmp    c0026965 <__eqsf2>

c00269a2 <__gtsf2>:
c00269a2:	55                   	push   ebp
c00269a3:	89 e5                	mov    ebp,esp
c00269a5:	83 ec 24             	sub    esp,0x24
c00269a8:	6a ff                	push   0xffffffff
c00269aa:	83 ec 0c             	sub    esp,0xc
c00269ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00269b0:	e8 a2 10 00 00       	call   c0027a57 <__extendsfdf2>
c00269b5:	83 c4 10             	add    esp,0x10
c00269b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00269bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00269be:	52                   	push   edx
c00269bf:	50                   	push   eax
c00269c0:	50                   	push   eax
c00269c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269c4:	e8 8e 10 00 00       	call   c0027a57 <__extendsfdf2>
c00269c9:	59                   	pop    ecx
c00269ca:	59                   	pop    ecx
c00269cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00269ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00269d1:	52                   	push   edx
c00269d2:	50                   	push   eax
c00269d3:	e8 f8 fe ff ff       	call   c00268d0 <__cmpsf2>
c00269d8:	83 c4 20             	add    esp,0x20
c00269db:	c9                   	leave  
c00269dc:	c3                   	ret    

c00269dd <__gesf2>:
c00269dd:	eb c3                	jmp    c00269a2 <__gtsf2>

c00269df <__ltsf2>:
c00269df:	eb 84                	jmp    c0026965 <__eqsf2>

c00269e1 <__lesf2>:
c00269e1:	eb 82                	jmp    c0026965 <__eqsf2>

c00269e3 <__adddf3>:
c00269e3:	55                   	push   ebp
c00269e4:	89 e5                	mov    ebp,esp
c00269e6:	57                   	push   edi
c00269e7:	56                   	push   esi
c00269e8:	53                   	push   ebx
c00269e9:	83 ec 24             	sub    esp,0x24
c00269ec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00269f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00269f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00269f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00269fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00269fe:	89 c8                	mov    eax,ecx
c0026a00:	89 ce                	mov    esi,ecx
c0026a02:	c1 fe 14             	sar    esi,0x14
c0026a05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026a08:	89 fb                	mov    ebx,edi
c0026a0a:	89 fa                	mov    edx,edi
c0026a0c:	c1 e2 0b             	shl    edx,0xb
c0026a0f:	c1 e0 0b             	shl    eax,0xb
c0026a12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026a17:	c1 eb 15             	shr    ebx,0x15
c0026a1a:	09 d8                	or     eax,ebx
c0026a1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026a1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026a22:	c1 fe 14             	sar    esi,0x14
c0026a25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026a28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026a2b:	89 f3                	mov    ebx,esi
c0026a2d:	c1 e3 0b             	shl    ebx,0xb
c0026a30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026a33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a36:	c1 e3 0b             	shl    ebx,0xb
c0026a39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026a3f:	c1 ee 15             	shr    esi,0x15
c0026a42:	09 f3                	or     ebx,esi
c0026a44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026a47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026a4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026a4d:	0f 88 5f 02 00 00    	js     c0026cb2 <__adddf3+0x2cf>
c0026a53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026a56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026a59:	85 db                	test   ebx,ebx
c0026a5b:	0f 8e c7 00 00 00    	jle    c0026b28 <__adddf3+0x145>
c0026a61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026a68:	75 1a                	jne    c0026a84 <__adddf3+0xa1>
c0026a6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026a70:	0f 84 b2 05 00 00    	je     c0027028 <__adddf3+0x645>
c0026a76:	4b                   	dec    ebx
c0026a77:	75 23                	jne    c0026a9c <__adddf3+0xb9>
c0026a79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026a7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026a7f:	e9 99 00 00 00       	jmp    c0026b1d <__adddf3+0x13a>
c0026a84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026a87:	f7 d6                	not    esi
c0026a89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026a8f:	0f 84 93 05 00 00    	je     c0027028 <__adddf3+0x645>
c0026a95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026a9c:	83 fb 1f             	cmp    ebx,0x1f
c0026a9f:	7e 42                	jle    c0026ae3 <__adddf3+0x100>
c0026aa1:	83 fb 3f             	cmp    ebx,0x3f
c0026aa4:	0f 8f 7e 05 00 00    	jg     c0027028 <__adddf3+0x645>
c0026aaa:	83 e3 1f             	and    ebx,0x1f
c0026aad:	89 d9                	mov    ecx,ebx
c0026aaf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026ab2:	d3 ef                	shr    edi,cl
c0026ab4:	31 db                	xor    ebx,ebx
c0026ab6:	85 c9                	test   ecx,ecx
c0026ab8:	74 15                	je     c0026acf <__adddf3+0xec>
c0026aba:	be 20 00 00 00       	mov    esi,0x20
c0026abf:	29 ce                	sub    esi,ecx
c0026ac1:	89 f1                	mov    ecx,esi
c0026ac3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ac6:	d3 e6                	shl    esi,cl
c0026ac8:	31 db                	xor    ebx,ebx
c0026aca:	85 f6                	test   esi,esi
c0026acc:	0f 95 c3             	setne  bl
c0026acf:	31 c9                	xor    ecx,ecx
c0026ad1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ad5:	0f 95 c1             	setne  cl
c0026ad8:	09 cf                	or     edi,ecx
c0026ada:	09 fb                	or     ebx,edi
c0026adc:	01 da                	add    edx,ebx
c0026ade:	83 d0 00             	adc    eax,0x0
c0026ae1:	eb 3a                	jmp    c0026b1d <__adddf3+0x13a>
c0026ae3:	bf 20 00 00 00       	mov    edi,0x20
c0026ae8:	29 df                	sub    edi,ebx
c0026aea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026aed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026af0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026af3:	d3 e6                	shl    esi,cl
c0026af5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026af8:	88 d9                	mov    cl,bl
c0026afa:	d3 ef                	shr    edi,cl
c0026afc:	09 fe                	or     esi,edi
c0026afe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026b01:	88 d9                	mov    cl,bl
c0026b03:	d3 ef                	shr    edi,cl
c0026b05:	89 fb                	mov    ebx,edi
c0026b07:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026b0a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026b0d:	d3 e7                	shl    edi,cl
c0026b0f:	85 ff                	test   edi,edi
c0026b11:	0f 95 c1             	setne  cl
c0026b14:	0f b6 c9             	movzx  ecx,cl
c0026b17:	09 ce                	or     esi,ecx
c0026b19:	01 f2                	add    edx,esi
c0026b1b:	11 d8                	adc    eax,ebx
c0026b1d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026b20:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026b23:	e9 52 01 00 00       	jmp    c0026c7a <__adddf3+0x297>
c0026b28:	0f 84 d5 00 00 00    	je     c0026c03 <__adddf3+0x220>
c0026b2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b31:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026b34:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026b37:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026b3a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026b41:	75 20                	jne    c0026b63 <__adddf3+0x180>
c0026b43:	89 d6                	mov    esi,edx
c0026b45:	09 c6                	or     esi,eax
c0026b47:	0f 84 db 04 00 00    	je     c0027028 <__adddf3+0x645>
c0026b4d:	4b                   	dec    ebx
c0026b4e:	75 29                	jne    c0026b79 <__adddf3+0x196>
c0026b50:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026b53:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026b56:	01 d1                	add    ecx,edx
c0026b58:	11 c6                	adc    esi,eax
c0026b5a:	89 f0                	mov    eax,esi
c0026b5c:	89 ca                	mov    edx,ecx
c0026b5e:	e9 17 01 00 00       	jmp    c0026c7a <__adddf3+0x297>
c0026b63:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026b66:	f7 d6                	not    esi
c0026b68:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026b6e:	0f 84 b4 04 00 00    	je     c0027028 <__adddf3+0x645>
c0026b74:	0d 00 00 00 80       	or     eax,0x80000000
c0026b79:	83 fb 1f             	cmp    ebx,0x1f
c0026b7c:	7e 48                	jle    c0026bc6 <__adddf3+0x1e3>
c0026b7e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026b81:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026b84:	83 fb 3f             	cmp    ebx,0x3f
c0026b87:	0f 8f 9b 04 00 00    	jg     c0027028 <__adddf3+0x645>
c0026b8d:	83 e3 1f             	and    ebx,0x1f
c0026b90:	89 d9                	mov    ecx,ebx
c0026b92:	89 c7                	mov    edi,eax
c0026b94:	d3 ef                	shr    edi,cl
c0026b96:	31 db                	xor    ebx,ebx
c0026b98:	85 c9                	test   ecx,ecx
c0026b9a:	74 12                	je     c0026bae <__adddf3+0x1cb>
c0026b9c:	be 20 00 00 00       	mov    esi,0x20
c0026ba1:	29 ce                	sub    esi,ecx
c0026ba3:	89 f1                	mov    ecx,esi
c0026ba5:	d3 e0                	shl    eax,cl
c0026ba7:	31 db                	xor    ebx,ebx
c0026ba9:	85 c0                	test   eax,eax
c0026bab:	0f 95 c3             	setne  bl
c0026bae:	31 c0                	xor    eax,eax
c0026bb0:	85 d2                	test   edx,edx
c0026bb2:	0f 95 c0             	setne  al
c0026bb5:	09 c7                	or     edi,eax
c0026bb7:	09 fb                	or     ebx,edi
c0026bb9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026bbc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026bbf:	01 da                	add    edx,ebx
c0026bc1:	83 d6 00             	adc    esi,0x0
c0026bc4:	eb 39                	jmp    c0026bff <__adddf3+0x21c>
c0026bc6:	be 20 00 00 00       	mov    esi,0x20
c0026bcb:	29 de                	sub    esi,ebx
c0026bcd:	89 c7                	mov    edi,eax
c0026bcf:	89 f1                	mov    ecx,esi
c0026bd1:	d3 e7                	shl    edi,cl
c0026bd3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026bd6:	89 d7                	mov    edi,edx
c0026bd8:	88 d9                	mov    cl,bl
c0026bda:	d3 ef                	shr    edi,cl
c0026bdc:	89 f9                	mov    ecx,edi
c0026bde:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026be1:	09 cf                	or     edi,ecx
c0026be3:	88 d9                	mov    cl,bl
c0026be5:	d3 e8                	shr    eax,cl
c0026be7:	89 f1                	mov    ecx,esi
c0026be9:	d3 e2                	shl    edx,cl
c0026beb:	85 d2                	test   edx,edx
c0026bed:	0f 95 c2             	setne  dl
c0026bf0:	0f b6 d2             	movzx  edx,dl
c0026bf3:	09 d7                	or     edi,edx
c0026bf5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026bf8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026bfb:	01 fa                	add    edx,edi
c0026bfd:	11 c6                	adc    esi,eax
c0026bff:	89 f0                	mov    eax,esi
c0026c01:	eb 77                	jmp    c0026c7a <__adddf3+0x297>
c0026c03:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026c06:	46                   	inc    esi
c0026c07:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026c0a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026c10:	75 41                	jne    c0026c53 <__adddf3+0x270>
c0026c12:	89 d3                	mov    ebx,edx
c0026c14:	09 c3                	or     ebx,eax
c0026c16:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026c1d:	75 27                	jne    c0026c46 <__adddf3+0x263>
c0026c1f:	85 db                	test   ebx,ebx
c0026c21:	0f 84 fb 03 00 00    	je     c0027022 <__adddf3+0x63f>
c0026c27:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c2a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026c2d:	0f 84 f5 03 00 00    	je     c0027028 <__adddf3+0x645>
c0026c33:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026c36:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026c39:	85 c0                	test   eax,eax
c0026c3b:	0f 89 91 03 00 00    	jns    c0026fd2 <__adddf3+0x5ef>
c0026c41:	e9 85 03 00 00       	jmp    c0026fcb <__adddf3+0x5e8>
c0026c46:	85 db                	test   ebx,ebx
c0026c48:	0f 85 da 03 00 00    	jne    c0027028 <__adddf3+0x645>
c0026c4e:	e9 cf 03 00 00       	jmp    c0027022 <__adddf3+0x63f>
c0026c53:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026c56:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026c59:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c5c:	f7 d1                	not    ecx
c0026c5e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026c64:	0f 84 70 03 00 00    	je     c0026fda <__adddf3+0x5f7>
c0026c6a:	d1 ea                	shr    edx,1
c0026c6c:	89 c1                	mov    ecx,eax
c0026c6e:	c1 e1 1f             	shl    ecx,0x1f
c0026c71:	09 ca                	or     edx,ecx
c0026c73:	d1 e8                	shr    eax,1
c0026c75:	e9 6f 03 00 00       	jmp    c0026fe9 <__adddf3+0x606>
c0026c7a:	85 c0                	test   eax,eax
c0026c7c:	0f 89 67 03 00 00    	jns    c0026fe9 <__adddf3+0x606>
c0026c82:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026c85:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c88:	f7 d1                	not    ecx
c0026c8a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026c90:	0f 84 44 03 00 00    	je     c0026fda <__adddf3+0x5f7>
c0026c96:	89 d1                	mov    ecx,edx
c0026c98:	d1 e9                	shr    ecx,1
c0026c9a:	83 e2 01             	and    edx,0x1
c0026c9d:	09 ca                	or     edx,ecx
c0026c9f:	89 c1                	mov    ecx,eax
c0026ca1:	c1 e1 1f             	shl    ecx,0x1f
c0026ca4:	09 ca                	or     edx,ecx
c0026ca6:	d1 e8                	shr    eax,1
c0026ca8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026cad:	e9 37 03 00 00       	jmp    c0026fe9 <__adddf3+0x606>
c0026cb2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026cb5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026cbb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026cbe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026cc1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026cc7:	29 de                	sub    esi,ebx
c0026cc9:	85 f6                	test   esi,esi
c0026ccb:	0f 8e bd 00 00 00    	jle    c0026d8e <__adddf3+0x3ab>
c0026cd1:	85 db                	test   ebx,ebx
c0026cd3:	75 17                	jne    c0026cec <__adddf3+0x309>
c0026cd5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026cd8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026cdb:	0f 84 47 03 00 00    	je     c0027028 <__adddf3+0x645>
c0026ce1:	4e                   	dec    esi
c0026ce2:	75 20                	jne    c0026d04 <__adddf3+0x321>
c0026ce4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026ce7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026cea:	eb 5b                	jmp    c0026d47 <__adddf3+0x364>
c0026cec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026cef:	f7 d3                	not    ebx
c0026cf1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026cf7:	0f 84 2b 03 00 00    	je     c0027028 <__adddf3+0x645>
c0026cfd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026d04:	83 fe 1f             	cmp    esi,0x1f
c0026d07:	7e 49                	jle    c0026d52 <__adddf3+0x36f>
c0026d09:	83 fe 3f             	cmp    esi,0x3f
c0026d0c:	0f 8f 16 03 00 00    	jg     c0027028 <__adddf3+0x645>
c0026d12:	83 e6 1f             	and    esi,0x1f
c0026d15:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026d18:	89 f1                	mov    ecx,esi
c0026d1a:	d3 ef                	shr    edi,cl
c0026d1c:	31 db                	xor    ebx,ebx
c0026d1e:	85 f6                	test   esi,esi
c0026d20:	74 13                	je     c0026d35 <__adddf3+0x352>
c0026d22:	b9 20 00 00 00       	mov    ecx,0x20
c0026d27:	29 f1                	sub    ecx,esi
c0026d29:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026d2c:	d3 e6                	shl    esi,cl
c0026d2e:	31 db                	xor    ebx,ebx
c0026d30:	85 f6                	test   esi,esi
c0026d32:	0f 95 c3             	setne  bl
c0026d35:	31 c9                	xor    ecx,ecx
c0026d37:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d3b:	0f 95 c1             	setne  cl
c0026d3e:	09 cf                	or     edi,ecx
c0026d40:	09 fb                	or     ebx,edi
c0026d42:	29 da                	sub    edx,ebx
c0026d44:	83 d8 00             	sbb    eax,0x0
c0026d47:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026d4a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d4d:	e9 aa 01 00 00       	jmp    c0026efc <__adddf3+0x519>
c0026d52:	bf 20 00 00 00       	mov    edi,0x20
c0026d57:	29 f7                	sub    edi,esi
c0026d59:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d5c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d5f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026d62:	d3 e3                	shl    ebx,cl
c0026d64:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026d67:	89 f1                	mov    ecx,esi
c0026d69:	d3 ef                	shr    edi,cl
c0026d6b:	09 fb                	or     ebx,edi
c0026d6d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026d70:	89 f1                	mov    ecx,esi
c0026d72:	d3 ef                	shr    edi,cl
c0026d74:	89 fe                	mov    esi,edi
c0026d76:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026d79:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026d7c:	d3 e7                	shl    edi,cl
c0026d7e:	85 ff                	test   edi,edi
c0026d80:	0f 95 c1             	setne  cl
c0026d83:	0f b6 c9             	movzx  ecx,cl
c0026d86:	09 cb                	or     ebx,ecx
c0026d88:	29 da                	sub    edx,ebx
c0026d8a:	19 f0                	sbb    eax,esi
c0026d8c:	eb b9                	jmp    c0026d47 <__adddf3+0x364>
c0026d8e:	0f 84 cd 00 00 00    	je     c0026e61 <__adddf3+0x47e>
c0026d94:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026d97:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026d9a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026d9d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026da1:	75 1b                	jne    c0026dbe <__adddf3+0x3db>
c0026da3:	89 d6                	mov    esi,edx
c0026da5:	09 c6                	or     esi,eax
c0026da7:	0f 84 7b 02 00 00    	je     c0027028 <__adddf3+0x645>
c0026dad:	4b                   	dec    ebx
c0026dae:	75 24                	jne    c0026dd4 <__adddf3+0x3f1>
c0026db0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026db3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026db6:	29 d1                	sub    ecx,edx
c0026db8:	19 c6                	sbb    esi,eax
c0026dba:	89 ca                	mov    edx,ecx
c0026dbc:	eb 61                	jmp    c0026e1f <__adddf3+0x43c>
c0026dbe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026dc1:	f7 d6                	not    esi
c0026dc3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026dc9:	0f 84 59 02 00 00    	je     c0027028 <__adddf3+0x645>
c0026dcf:	0d 00 00 00 80       	or     eax,0x80000000
c0026dd4:	83 fb 1f             	cmp    ebx,0x1f
c0026dd7:	7e 4d                	jle    c0026e26 <__adddf3+0x443>
c0026dd9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026ddc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026ddf:	83 fb 3f             	cmp    ebx,0x3f
c0026de2:	0f 8f 40 02 00 00    	jg     c0027028 <__adddf3+0x645>
c0026de8:	83 e3 1f             	and    ebx,0x1f
c0026deb:	89 d9                	mov    ecx,ebx
c0026ded:	89 c7                	mov    edi,eax
c0026def:	d3 ef                	shr    edi,cl
c0026df1:	31 db                	xor    ebx,ebx
c0026df3:	85 c9                	test   ecx,ecx
c0026df5:	74 12                	je     c0026e09 <__adddf3+0x426>
c0026df7:	be 20 00 00 00       	mov    esi,0x20
c0026dfc:	29 ce                	sub    esi,ecx
c0026dfe:	89 f1                	mov    ecx,esi
c0026e00:	d3 e0                	shl    eax,cl
c0026e02:	31 db                	xor    ebx,ebx
c0026e04:	85 c0                	test   eax,eax
c0026e06:	0f 95 c3             	setne  bl
c0026e09:	31 c0                	xor    eax,eax
c0026e0b:	85 d2                	test   edx,edx
c0026e0d:	0f 95 c0             	setne  al
c0026e10:	09 c7                	or     edi,eax
c0026e12:	09 fb                	or     ebx,edi
c0026e14:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e17:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026e1a:	29 da                	sub    edx,ebx
c0026e1c:	83 de 00             	sbb    esi,0x0
c0026e1f:	89 f0                	mov    eax,esi
c0026e21:	e9 d6 00 00 00       	jmp    c0026efc <__adddf3+0x519>
c0026e26:	be 20 00 00 00       	mov    esi,0x20
c0026e2b:	29 de                	sub    esi,ebx
c0026e2d:	89 c7                	mov    edi,eax
c0026e2f:	89 f1                	mov    ecx,esi
c0026e31:	d3 e7                	shl    edi,cl
c0026e33:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026e36:	89 d7                	mov    edi,edx
c0026e38:	88 d9                	mov    cl,bl
c0026e3a:	d3 ef                	shr    edi,cl
c0026e3c:	89 f9                	mov    ecx,edi
c0026e3e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e41:	09 cf                	or     edi,ecx
c0026e43:	88 d9                	mov    cl,bl
c0026e45:	d3 e8                	shr    eax,cl
c0026e47:	89 f1                	mov    ecx,esi
c0026e49:	d3 e2                	shl    edx,cl
c0026e4b:	85 d2                	test   edx,edx
c0026e4d:	0f 95 c2             	setne  dl
c0026e50:	0f b6 d2             	movzx  edx,dl
c0026e53:	09 d7                	or     edi,edx
c0026e55:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e58:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026e5b:	29 fa                	sub    edx,edi
c0026e5d:	19 c6                	sbb    esi,eax
c0026e5f:	eb be                	jmp    c0026e1f <__adddf3+0x43c>
c0026e61:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026e64:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026e67:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0026e6d:	75 6a                	jne    c0026ed9 <__adddf3+0x4f6>
c0026e6f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026e73:	75 58                	jne    c0026ecd <__adddf3+0x4ea>
c0026e75:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e78:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026e7b:	89 d6                	mov    esi,edx
c0026e7d:	09 c6                	or     esi,eax
c0026e7f:	75 17                	jne    c0026e98 <__adddf3+0x4b5>
c0026e81:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e84:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e87:	85 db                	test   ebx,ebx
c0026e89:	0f 85 99 01 00 00    	jne    c0027028 <__adddf3+0x645>
c0026e8f:	31 ff                	xor    edi,edi
c0026e91:	31 c9                	xor    ecx,ecx
c0026e93:	e9 90 01 00 00       	jmp    c0027028 <__adddf3+0x645>
c0026e98:	85 db                	test   ebx,ebx
c0026e9a:	0f 84 88 01 00 00    	je     c0027028 <__adddf3+0x645>
c0026ea0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026ea3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026ea6:	85 c0                	test   eax,eax
c0026ea8:	79 10                	jns    c0026eba <__adddf3+0x4d7>
c0026eaa:	31 c9                	xor    ecx,ecx
c0026eac:	f7 da                	neg    edx
c0026eae:	0f 95 c1             	setne  cl
c0026eb1:	01 c8                	add    eax,ecx
c0026eb3:	f7 d8                	neg    eax
c0026eb5:	e9 2f 01 00 00       	jmp    c0026fe9 <__adddf3+0x606>
c0026eba:	31 ff                	xor    edi,edi
c0026ebc:	31 c9                	xor    ecx,ecx
c0026ebe:	89 c3                	mov    ebx,eax
c0026ec0:	09 d3                	or     ebx,edx
c0026ec2:	0f 84 60 01 00 00    	je     c0027028 <__adddf3+0x645>
c0026ec8:	e9 05 01 00 00       	jmp    c0026fd2 <__adddf3+0x5ef>
c0026ecd:	31 ff                	xor    edi,edi
c0026ecf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026ed4:	e9 4f 01 00 00       	jmp    c0027028 <__adddf3+0x645>
c0026ed9:	89 c1                	mov    ecx,eax
c0026edb:	89 d0                	mov    eax,edx
c0026edd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026ee0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026ee3:	89 ca                	mov    edx,ecx
c0026ee5:	85 c9                	test   ecx,ecx
c0026ee7:	79 2c                	jns    c0026f15 <__adddf3+0x532>
c0026ee9:	31 c9                	xor    ecx,ecx
c0026eeb:	f7 d8                	neg    eax
c0026eed:	0f 95 c1             	setne  cl
c0026ef0:	01 ca                	add    edx,ecx
c0026ef2:	f7 da                	neg    edx
c0026ef4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026ef7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026efa:	eb 19                	jmp    c0026f15 <__adddf3+0x532>
c0026efc:	85 c0                	test   eax,eax
c0026efe:	0f 89 e5 00 00 00    	jns    c0026fe9 <__adddf3+0x606>
c0026f04:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f09:	89 c1                	mov    ecx,eax
c0026f0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026f0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026f11:	89 d0                	mov    eax,edx
c0026f13:	89 ca                	mov    edx,ecx
c0026f15:	85 d2                	test   edx,edx
c0026f17:	74 59                	je     c0026f72 <__adddf3+0x58f>
c0026f19:	0f bd da             	bsr    ebx,edx
c0026f1c:	83 f3 1f             	xor    ebx,0x1f
c0026f1f:	88 d9                	mov    cl,bl
c0026f21:	d3 e2                	shl    edx,cl
c0026f23:	bf 20 00 00 00       	mov    edi,0x20
c0026f28:	89 f9                	mov    ecx,edi
c0026f2a:	29 d9                	sub    ecx,ebx
c0026f2c:	89 c6                	mov    esi,eax
c0026f2e:	d3 ee                	shr    esi,cl
c0026f30:	09 d6                	or     esi,edx
c0026f32:	88 d9                	mov    cl,bl
c0026f34:	d3 e0                	shl    eax,cl
c0026f36:	89 c2                	mov    edx,eax
c0026f38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f3b:	25 ff 07 00 00       	and    eax,0x7ff
c0026f40:	39 d8                	cmp    eax,ebx
c0026f42:	7f 22                	jg     c0026f66 <__adddf3+0x583>
c0026f44:	29 c3                	sub    ebx,eax
c0026f46:	43                   	inc    ebx
c0026f47:	88 d9                	mov    cl,bl
c0026f49:	d3 ea                	shr    edx,cl
c0026f4b:	29 df                	sub    edi,ebx
c0026f4d:	89 f9                	mov    ecx,edi
c0026f4f:	89 f0                	mov    eax,esi
c0026f51:	d3 e0                	shl    eax,cl
c0026f53:	09 c2                	or     edx,eax
c0026f55:	89 f0                	mov    eax,esi
c0026f57:	88 d9                	mov    cl,bl
c0026f59:	d3 e8                	shr    eax,cl
c0026f5b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026f5e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026f64:	eb 6f                	jmp    c0026fd5 <__adddf3+0x5f2>
c0026f66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f69:	29 d8                	sub    eax,ebx
c0026f6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026f6e:	89 f0                	mov    eax,esi
c0026f70:	eb 59                	jmp    c0026fcb <__adddf3+0x5e8>
c0026f72:	85 c0                	test   eax,eax
c0026f74:	74 6a                	je     c0026fe0 <__adddf3+0x5fd>
c0026f76:	0f bd c8             	bsr    ecx,eax
c0026f79:	83 f1 1f             	xor    ecx,0x1f
c0026f7c:	d3 e0                	shl    eax,cl
c0026f7e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f81:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026f87:	83 c1 20             	add    ecx,0x20
c0026f8a:	39 cb                	cmp    ebx,ecx
c0026f8c:	7f 35                	jg     c0026fc3 <__adddf3+0x5e0>
c0026f8e:	29 d9                	sub    ecx,ebx
c0026f90:	8d 71 01             	lea    esi,[ecx+0x1]
c0026f93:	83 fe 1f             	cmp    esi,0x1f
c0026f96:	7e 09                	jle    c0026fa1 <__adddf3+0x5be>
c0026f98:	83 e9 1f             	sub    ecx,0x1f
c0026f9b:	d3 e8                	shr    eax,cl
c0026f9d:	89 c3                	mov    ebx,eax
c0026f9f:	eb 11                	jmp    c0026fb2 <__adddf3+0x5cf>
c0026fa1:	b9 20 00 00 00       	mov    ecx,0x20
c0026fa6:	29 f1                	sub    ecx,esi
c0026fa8:	89 c3                	mov    ebx,eax
c0026faa:	d3 e3                	shl    ebx,cl
c0026fac:	89 f1                	mov    ecx,esi
c0026fae:	d3 e8                	shr    eax,cl
c0026fb0:	89 c2                	mov    edx,eax
c0026fb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026fb5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026fba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026fbd:	89 d0                	mov    eax,edx
c0026fbf:	89 da                	mov    edx,ebx
c0026fc1:	eb 26                	jmp    c0026fe9 <__adddf3+0x606>
c0026fc3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026fc6:	29 cf                	sub    edi,ecx
c0026fc8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026fcb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fd0:	eb 17                	jmp    c0026fe9 <__adddf3+0x606>
c0026fd2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026fd5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026fd8:	eb 0f                	jmp    c0026fe9 <__adddf3+0x606>
c0026fda:	31 d2                	xor    edx,edx
c0026fdc:	31 c0                	xor    eax,eax
c0026fde:	eb 09                	jmp    c0026fe9 <__adddf3+0x606>
c0026fe0:	89 c2                	mov    edx,eax
c0026fe2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026fe9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026fec:	c1 e1 14             	shl    ecx,0x14
c0026fef:	89 c3                	mov    ebx,eax
c0026ff1:	c1 eb 0b             	shr    ebx,0xb
c0026ff4:	09 d9                	or     ecx,ebx
c0026ff6:	89 d3                	mov    ebx,edx
c0026ff8:	c1 eb 0b             	shr    ebx,0xb
c0026ffb:	c1 e0 15             	shl    eax,0x15
c0026ffe:	09 d8                	or     eax,ebx
c0027000:	89 c7                	mov    edi,eax
c0027002:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027008:	0f 95 c0             	setne  al
c002700b:	89 c6                	mov    esi,eax
c002700d:	09 f3                	or     ebx,esi
c002700f:	83 e3 01             	and    ebx,0x1
c0027012:	c1 ea 0a             	shr    edx,0xa
c0027015:	21 da                	and    edx,ebx
c0027017:	89 f8                	mov    eax,edi
c0027019:	01 d0                	add    eax,edx
c002701b:	83 d1 00             	adc    ecx,0x0
c002701e:	89 c7                	mov    edi,eax
c0027020:	eb 06                	jmp    c0027028 <__adddf3+0x645>
c0027022:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027025:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027028:	89 f8                	mov    eax,edi
c002702a:	89 ca                	mov    edx,ecx
c002702c:	83 c4 24             	add    esp,0x24
c002702f:	5b                   	pop    ebx
c0027030:	5e                   	pop    esi
c0027031:	5f                   	pop    edi
c0027032:	5d                   	pop    ebp
c0027033:	c3                   	ret    

c0027034 <__subdf3>:
c0027034:	55                   	push   ebp
c0027035:	89 e5                	mov    ebp,esp
c0027037:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002703a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002703d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027043:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027046:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027049:	5d                   	pop    ebp
c002704a:	e9 94 f9 ff ff       	jmp    c00269e3 <__adddf3>

c002704f <__negdf2>:
c002704f:	55                   	push   ebp
c0027050:	89 e5                	mov    ebp,esp
c0027052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027055:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027058:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002705e:	5d                   	pop    ebp
c002705f:	c3                   	ret    

c0027060 <__muldf3>:
c0027060:	55                   	push   ebp
c0027061:	89 e5                	mov    ebp,esp
c0027063:	57                   	push   edi
c0027064:	56                   	push   esi
c0027065:	53                   	push   ebx
c0027066:	83 ec 24             	sub    esp,0x24
c0027069:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002706c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002706f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027072:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027075:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027078:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002707b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002707e:	89 c8                	mov    eax,ecx
c0027080:	c1 f8 14             	sar    eax,0x14
c0027083:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027086:	89 f8                	mov    eax,edi
c0027088:	89 fb                	mov    ebx,edi
c002708a:	c1 e3 0b             	shl    ebx,0xb
c002708d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027090:	c1 e1 0b             	shl    ecx,0xb
c0027093:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027099:	c1 e8 15             	shr    eax,0x15
c002709c:	09 c1                	or     ecx,eax
c002709e:	89 d6                	mov    esi,edx
c00270a0:	89 d0                	mov    eax,edx
c00270a2:	c1 f8 14             	sar    eax,0x14
c00270a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00270a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00270ab:	89 c3                	mov    ebx,eax
c00270ad:	c1 e3 0b             	shl    ebx,0xb
c00270b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00270b3:	c1 e6 0b             	shl    esi,0xb
c00270b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00270bc:	c1 e8 15             	shr    eax,0x15
c00270bf:	09 c6                	or     esi,eax
c00270c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00270c4:	25 ff 07 00 00       	and    eax,0x7ff
c00270c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00270cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00270cf:	25 ff 07 00 00       	and    eax,0x7ff
c00270d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00270d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00270da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00270dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00270e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00270e7:	40                   	inc    eax
c00270e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00270ed:	0f 85 8d 00 00 00    	jne    c0027180 <__muldf3+0x120>
c00270f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00270f6:	09 c8                	or     eax,ecx
c00270f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00270fc:	74 44                	je     c0027142 <__muldf3+0xe2>
c00270fe:	85 c0                	test   eax,eax
c0027100:	0f 85 31 02 00 00    	jne    c0027337 <__muldf3+0x2d7>
c0027106:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027109:	40                   	inc    eax
c002710a:	a9 fe 07 00 00       	test   eax,0x7fe
c002710f:	75 13                	jne    c0027124 <__muldf3+0xc4>
c0027111:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027114:	09 f1                	or     ecx,esi
c0027116:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002711a:	74 22                	je     c002713e <__muldf3+0xde>
c002711c:	85 c9                	test   ecx,ecx
c002711e:	0f 85 0d 02 00 00    	jne    c0027331 <__muldf3+0x2d1>
c0027124:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027128:	0f 89 09 02 00 00    	jns    c0027337 <__muldf3+0x2d7>
c002712e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027131:	05 00 00 00 80       	add    eax,0x80000000
c0027136:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027139:	e9 f9 01 00 00       	jmp    c0027337 <__muldf3+0x2d7>
c002713e:	85 c9                	test   ecx,ecx
c0027140:	eb 2e                	jmp    c0027170 <__muldf3+0x110>
c0027142:	85 c0                	test   eax,eax
c0027144:	74 20                	je     c0027166 <__muldf3+0x106>
c0027146:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027149:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002714c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002714f:	c1 ef 1f             	shr    edi,0x1f
c0027152:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027155:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027158:	8d 43 ff             	lea    eax,[ebx-0x1]
c002715b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002715e:	09 f9                	or     ecx,edi
c0027160:	78 1e                	js     c0027180 <__muldf3+0x120>
c0027162:	89 c3                	mov    ebx,eax
c0027164:	eb e0                	jmp    c0027146 <__muldf3+0xe6>
c0027166:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027169:	f7 d0                	not    eax
c002716b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027170:	75 b2                	jne    c0027124 <__muldf3+0xc4>
c0027172:	31 ff                	xor    edi,edi
c0027174:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002717b:	e9 b7 01 00 00       	jmp    c0027337 <__muldf3+0x2d7>
c0027180:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027183:	40                   	inc    eax
c0027184:	a9 fe 07 00 00       	test   eax,0x7fe
c0027189:	75 57                	jne    c00271e2 <__muldf3+0x182>
c002718b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002718e:	09 f0                	or     eax,esi
c0027190:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027194:	74 23                	je     c00271b9 <__muldf3+0x159>
c0027196:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002719a:	0f 89 91 01 00 00    	jns    c0027331 <__muldf3+0x2d1>
c00271a0:	85 c0                	test   eax,eax
c00271a2:	0f 85 89 01 00 00    	jne    c0027331 <__muldf3+0x2d1>
c00271a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00271ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00271b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00271b4:	e9 7e 01 00 00       	jmp    c0027337 <__muldf3+0x2d7>
c00271b9:	85 c0                	test   eax,eax
c00271bb:	75 0c                	jne    c00271c9 <__muldf3+0x169>
c00271bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00271c1:	0f 89 6a 01 00 00    	jns    c0027331 <__muldf3+0x2d1>
c00271c7:	eb df                	jmp    c00271a8 <__muldf3+0x148>
c00271c9:	01 f6                	add    esi,esi
c00271cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00271ce:	c1 ea 1f             	shr    edx,0x1f
c00271d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00271d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00271da:	09 d6                	or     esi,edx
c00271dc:	78 04                	js     c00271e2 <__muldf3+0x182>
c00271de:	89 c3                	mov    ebx,eax
c00271e0:	eb e7                	jmp    c00271c9 <__muldf3+0x169>
c00271e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00271e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00271ee:	89 c8                	mov    eax,ecx
c00271f0:	f7 e6                	mul    esi
c00271f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00271f5:	89 c7                	mov    edi,eax
c00271f7:	89 c8                	mov    eax,ecx
c00271f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00271fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00271ff:	89 c1                	mov    ecx,eax
c0027201:	89 f0                	mov    eax,esi
c0027203:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027206:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027209:	89 c6                	mov    esi,eax
c002720b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002720e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027211:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027214:	31 c0                	xor    eax,eax
c0027216:	01 f1                	add    ecx,esi
c0027218:	0f 92 c0             	setb   al
c002721b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002721e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027221:	83 d6 00             	adc    esi,0x0
c0027224:	01 c7                	add    edi,eax
c0027226:	83 d6 00             	adc    esi,0x0
c0027229:	01 ca                	add    edx,ecx
c002722b:	0f 92 c1             	setb   cl
c002722e:	0f b6 c9             	movzx  ecx,cl
c0027231:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027234:	83 d6 00             	adc    esi,0x0
c0027237:	01 cf                	add    edi,ecx
c0027239:	83 d6 00             	adc    esi,0x0
c002723c:	31 c9                	xor    ecx,ecx
c002723e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027241:	0f 95 c1             	setne  cl
c0027244:	09 cf                	or     edi,ecx
c0027246:	85 f6                	test   esi,esi
c0027248:	78 0c                	js     c0027256 <__muldf3+0x1f6>
c002724a:	01 f6                	add    esi,esi
c002724c:	89 f8                	mov    eax,edi
c002724e:	c1 e8 1f             	shr    eax,0x1f
c0027251:	09 c6                	or     esi,eax
c0027253:	01 ff                	add    edi,edi
c0027255:	4b                   	dec    ebx
c0027256:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002725c:	0f 8f 85 00 00 00    	jg     c00272e7 <__muldf3+0x287>
c0027262:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027268:	85 db                	test   ebx,ebx
c002726a:	0f 8f 84 00 00 00    	jg     c00272f4 <__muldf3+0x294>
c0027270:	83 fb cc             	cmp    ebx,0xffffffcc
c0027273:	7c 79                	jl     c00272ee <__muldf3+0x28e>
c0027275:	ba 01 00 00 00       	mov    edx,0x1
c002727a:	29 da                	sub    edx,ebx
c002727c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027282:	83 fa 1f             	cmp    edx,0x1f
c0027285:	7e 30                	jle    c00272b7 <__muldf3+0x257>
c0027287:	83 fa 20             	cmp    edx,0x20
c002728a:	75 0b                	jne    c0027297 <__muldf3+0x237>
c002728c:	31 c0                	xor    eax,eax
c002728e:	85 ff                	test   edi,edi
c0027290:	0f 95 c0             	setne  al
c0027293:	89 c7                	mov    edi,eax
c0027295:	eb 1a                	jmp    c00272b1 <__muldf3+0x251>
c0027297:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002729a:	89 f0                	mov    eax,esi
c002729c:	d3 e0                	shl    eax,cl
c002729e:	09 f8                	or     eax,edi
c00272a0:	0f 95 c0             	setne  al
c00272a3:	0f b6 c0             	movzx  eax,al
c00272a6:	89 c7                	mov    edi,eax
c00272a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00272ad:	29 d9                	sub    ecx,ebx
c00272af:	d3 ee                	shr    esi,cl
c00272b1:	09 f7                	or     edi,esi
c00272b3:	31 db                	xor    ebx,ebx
c00272b5:	eb 3b                	jmp    c00272f2 <__muldf3+0x292>
c00272b7:	83 c3 1f             	add    ebx,0x1f
c00272ba:	89 f0                	mov    eax,esi
c00272bc:	88 d9                	mov    cl,bl
c00272be:	d3 e0                	shl    eax,cl
c00272c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00272c3:	89 f8                	mov    eax,edi
c00272c5:	88 d1                	mov    cl,dl
c00272c7:	d3 e8                	shr    eax,cl
c00272c9:	89 c1                	mov    ecx,eax
c00272cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00272ce:	09 c8                	or     eax,ecx
c00272d0:	88 d9                	mov    cl,bl
c00272d2:	d3 e7                	shl    edi,cl
c00272d4:	31 db                	xor    ebx,ebx
c00272d6:	85 ff                	test   edi,edi
c00272d8:	0f 95 c3             	setne  bl
c00272db:	89 df                	mov    edi,ebx
c00272dd:	09 c7                	or     edi,eax
c00272df:	88 d1                	mov    cl,dl
c00272e1:	d3 ee                	shr    esi,cl
c00272e3:	31 db                	xor    ebx,ebx
c00272e5:	eb 0d                	jmp    c00272f4 <__muldf3+0x294>
c00272e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00272ec:	eb 02                	jmp    c00272f0 <__muldf3+0x290>
c00272ee:	31 db                	xor    ebx,ebx
c00272f0:	31 ff                	xor    edi,edi
c00272f2:	31 f6                	xor    esi,esi
c00272f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00272f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00272fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00272ff:	09 c3                	or     ebx,eax
c0027301:	c1 e3 14             	shl    ebx,0x14
c0027304:	89 f0                	mov    eax,esi
c0027306:	c1 e8 0b             	shr    eax,0xb
c0027309:	09 c3                	or     ebx,eax
c002730b:	89 f8                	mov    eax,edi
c002730d:	c1 e8 0b             	shr    eax,0xb
c0027310:	c1 e6 15             	shl    esi,0x15
c0027313:	09 c6                	or     esi,eax
c0027315:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002731b:	0f 95 c1             	setne  cl
c002731e:	09 c8                	or     eax,ecx
c0027320:	83 e0 01             	and    eax,0x1
c0027323:	c1 ef 0a             	shr    edi,0xa
c0027326:	21 c7                	and    edi,eax
c0027328:	01 f7                	add    edi,esi
c002732a:	83 d3 00             	adc    ebx,0x0
c002732d:	89 da                	mov    edx,ebx
c002732f:	eb 03                	jmp    c0027334 <__muldf3+0x2d4>
c0027331:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027334:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027337:	89 f8                	mov    eax,edi
c0027339:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002733c:	83 c4 24             	add    esp,0x24
c002733f:	5b                   	pop    ebx
c0027340:	5e                   	pop    esi
c0027341:	5f                   	pop    edi
c0027342:	5d                   	pop    ebp
c0027343:	c3                   	ret    

c0027344 <__divdf3>:
c0027344:	55                   	push   ebp
c0027345:	89 e5                	mov    ebp,esp
c0027347:	57                   	push   edi
c0027348:	56                   	push   esi
c0027349:	53                   	push   ebx
c002734a:	83 ec 2c             	sub    esp,0x2c
c002734d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027350:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027353:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027356:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027359:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002735c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002735f:	89 ce                	mov    esi,ecx
c0027361:	89 c8                	mov    eax,ecx
c0027363:	c1 f8 14             	sar    eax,0x14
c0027366:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027369:	89 f8                	mov    eax,edi
c002736b:	89 fb                	mov    ebx,edi
c002736d:	c1 e3 0b             	shl    ebx,0xb
c0027370:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027373:	c1 e6 0b             	shl    esi,0xb
c0027376:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002737c:	c1 e8 15             	shr    eax,0x15
c002737f:	09 c6                	or     esi,eax
c0027381:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027384:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027387:	89 c2                	mov    edx,eax
c0027389:	c1 fa 14             	sar    edx,0x14
c002738c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002738f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027392:	89 de                	mov    esi,ebx
c0027394:	c1 e6 0b             	shl    esi,0xb
c0027397:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002739a:	c1 e0 0b             	shl    eax,0xb
c002739d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00273a2:	c1 eb 15             	shr    ebx,0x15
c00273a5:	09 d8                	or     eax,ebx
c00273a7:	89 c2                	mov    edx,eax
c00273a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273ac:	25 ff 07 00 00       	and    eax,0x7ff
c00273b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00273b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00273c0:	29 d8                	sub    eax,ebx
c00273c2:	05 ff 03 00 00       	add    eax,0x3ff
c00273c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00273ca:	46                   	inc    esi
c00273cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273d1:	0f 85 a5 00 00 00    	jne    c002747c <__divdf3+0x138>
c00273d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00273da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00273dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00273e1:	74 2a                	je     c002740d <__divdf3+0xc9>
c00273e3:	85 f6                	test   esi,esi
c00273e5:	0f 85 cc 02 00 00    	jne    c00276b7 <__divdf3+0x373>
c00273eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273ee:	40                   	inc    eax
c00273ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00273f4:	75 26                	jne    c002741c <__divdf3+0xd8>
c00273f6:	85 db                	test   ebx,ebx
c00273f8:	74 22                	je     c002741c <__divdf3+0xd8>
c00273fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00273fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027400:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027403:	09 d0                	or     eax,edx
c0027405:	0f 85 ac 02 00 00    	jne    c00276b7 <__divdf3+0x373>
c002740b:	eb 63                	jmp    c0027470 <__divdf3+0x12c>
c002740d:	85 f6                	test   esi,esi
c002740f:	75 22                	jne    c0027433 <__divdf3+0xef>
c0027411:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027414:	40                   	inc    eax
c0027415:	a9 fe 07 00 00       	test   eax,0x7fe
c002741a:	74 36                	je     c0027452 <__divdf3+0x10e>
c002741c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027420:	0f 89 91 02 00 00    	jns    c00276b7 <__divdf3+0x373>
c0027426:	89 f8                	mov    eax,edi
c0027428:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002742e:	e9 80 02 00 00       	jmp    c00276b3 <__divdf3+0x36f>
c0027433:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027436:	01 f6                	add    esi,esi
c0027438:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002743b:	c1 ef 1f             	shr    edi,0x1f
c002743e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027441:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027444:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027447:	09 f7                	or     edi,esi
c0027449:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002744c:	78 2e                	js     c002747c <__divdf3+0x138>
c002744e:	89 c8                	mov    eax,ecx
c0027450:	eb e1                	jmp    c0027433 <__divdf3+0xef>
c0027452:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027455:	09 d0                	or     eax,edx
c0027457:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002745b:	74 0f                	je     c002746c <__divdf3+0x128>
c002745d:	85 c0                	test   eax,eax
c002745f:	74 bb                	je     c002741c <__divdf3+0xd8>
c0027461:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027464:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027467:	e9 4b 02 00 00       	jmp    c00276b7 <__divdf3+0x373>
c002746c:	85 c0                	test   eax,eax
c002746e:	75 ac                	jne    c002741c <__divdf3+0xd8>
c0027470:	31 ff                	xor    edi,edi
c0027472:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027477:	e9 3b 02 00 00       	jmp    c00276b7 <__divdf3+0x373>
c002747c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002747f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027482:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027488:	75 6b                	jne    c00274f5 <__divdf3+0x1b1>
c002748a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002748d:	09 d6                	or     esi,edx
c002748f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027493:	74 28                	je     c00274bd <__divdf3+0x179>
c0027495:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027498:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002749b:	85 f6                	test   esi,esi
c002749d:	0f 85 14 02 00 00    	jne    c00276b7 <__divdf3+0x373>
c00274a3:	31 ff                	xor    edi,edi
c00274a5:	31 c9                	xor    ecx,ecx
c00274a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00274aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00274ad:	0f 89 04 02 00 00    	jns    c00276b7 <__divdf3+0x373>
c00274b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00274b8:	e9 fa 01 00 00       	jmp    c00276b7 <__divdf3+0x373>
c00274bd:	85 f6                	test   esi,esi
c00274bf:	75 1b                	jne    c00274dc <__divdf3+0x198>
c00274c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00274c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00274c7:	25 00 00 00 80       	and    eax,0x80000000
c00274cc:	31 c9                	xor    ecx,ecx
c00274ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00274d3:	89 cf                	mov    edi,ecx
c00274d5:	89 c1                	mov    ecx,eax
c00274d7:	e9 db 01 00 00       	jmp    c00276b7 <__divdf3+0x373>
c00274dc:	01 d2                	add    edx,edx
c00274de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274e1:	c1 eb 1f             	shr    ebx,0x1f
c00274e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00274ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00274ed:	09 da                	or     edx,ebx
c00274ef:	78 04                	js     c00274f5 <__divdf3+0x1b1>
c00274f1:	89 c8                	mov    eax,ecx
c00274f3:	eb e7                	jmp    c00274dc <__divdf3+0x198>
c00274f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00274fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027504:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027507:	39 d6                	cmp    esi,edx
c0027509:	77 0d                	ja     c0027518 <__divdf3+0x1d4>
c002750b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002750e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027511:	72 1b                	jb     c002752e <__divdf3+0x1ea>
c0027513:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027516:	75 16                	jne    c002752e <__divdf3+0x1ea>
c0027518:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002751b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002751e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027521:	83 de 00             	sbb    esi,0x0
c0027524:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027527:	ba 01 00 00 00       	mov    edx,0x1
c002752c:	eb 02                	jmp    c0027530 <__divdf3+0x1ec>
c002752e:	31 d2                	xor    edx,edx
c0027530:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027537:	31 ff                	xor    edi,edi
c0027539:	01 ff                	add    edi,edi
c002753b:	89 d1                	mov    ecx,edx
c002753d:	c1 e9 1f             	shr    ecx,0x1f
c0027540:	09 cf                	or     edi,ecx
c0027542:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027545:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027548:	89 da                	mov    edx,ebx
c002754a:	89 f3                	mov    ebx,esi
c002754c:	8d 34 36             	lea    esi,[esi+esi*1]
c002754f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027552:	c1 e9 1f             	shr    ecx,0x1f
c0027555:	09 ce                	or     esi,ecx
c0027557:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002755a:	01 c9                	add    ecx,ecx
c002755c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002755f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027562:	85 db                	test   ebx,ebx
c0027564:	78 29                	js     c002758f <__divdf3+0x24b>
c0027566:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027569:	72 07                	jb     c0027572 <__divdf3+0x22e>
c002756b:	75 3c                	jne    c00275a9 <__divdf3+0x265>
c002756d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027570:	77 37                	ja     c00275a9 <__divdf3+0x265>
c0027572:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027575:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027578:	31 d2                	xor    edx,edx
c002757a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002757d:	0f 97 c2             	seta   dl
c0027580:	29 d6                	sub    esi,edx
c0027582:	89 d9                	mov    ecx,ebx
c0027584:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027587:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002758a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002758d:	eb 17                	jmp    c00275a6 <__divdf3+0x262>
c002758f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027592:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027595:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027598:	0f 97 c1             	seta   cl
c002759b:	0f b6 c9             	movzx  ecx,cl
c002759e:	29 ce                	sub    esi,ecx
c00275a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00275a3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00275a6:	83 ca 01             	or     edx,0x1
c00275a9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00275ac:	75 8b                	jne    c0027539 <__divdf3+0x1f5>
c00275ae:	c1 e7 09             	shl    edi,0x9
c00275b1:	89 d1                	mov    ecx,edx
c00275b3:	c1 e9 17             	shr    ecx,0x17
c00275b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275b9:	09 f3                	or     ebx,esi
c00275bb:	0f 95 c3             	setne  bl
c00275be:	0f b6 db             	movzx  ebx,bl
c00275c1:	c1 e2 09             	shl    edx,0x9
c00275c4:	09 d3                	or     ebx,edx
c00275c6:	89 ca                	mov    edx,ecx
c00275c8:	09 fa                	or     edx,edi
c00275ca:	78 0c                	js     c00275d8 <__divdf3+0x294>
c00275cc:	01 d2                	add    edx,edx
c00275ce:	89 d9                	mov    ecx,ebx
c00275d0:	c1 e9 1f             	shr    ecx,0x1f
c00275d3:	09 ca                	or     edx,ecx
c00275d5:	01 db                	add    ebx,ebx
c00275d7:	48                   	dec    eax
c00275d8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00275dd:	0f 8f 83 00 00 00    	jg     c0027666 <__divdf3+0x322>
c00275e3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00275e9:	85 c0                	test   eax,eax
c00275eb:	0f 8f 82 00 00 00    	jg     c0027673 <__divdf3+0x32f>
c00275f1:	83 f8 cc             	cmp    eax,0xffffffcc
c00275f4:	7c 77                	jl     c002766d <__divdf3+0x329>
c00275f6:	be 01 00 00 00       	mov    esi,0x1
c00275fb:	29 c6                	sub    esi,eax
c00275fd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027603:	83 fe 1f             	cmp    esi,0x1f
c0027606:	7e 2f                	jle    c0027637 <__divdf3+0x2f3>
c0027608:	83 fe 20             	cmp    esi,0x20
c002760b:	75 0a                	jne    c0027617 <__divdf3+0x2d3>
c002760d:	85 db                	test   ebx,ebx
c002760f:	0f 95 c3             	setne  bl
c0027612:	0f b6 db             	movzx  ebx,bl
c0027615:	eb 1a                	jmp    c0027631 <__divdf3+0x2ed>
c0027617:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002761a:	89 d7                	mov    edi,edx
c002761c:	d3 e7                	shl    edi,cl
c002761e:	89 f9                	mov    ecx,edi
c0027620:	09 d9                	or     ecx,ebx
c0027622:	0f 95 c3             	setne  bl
c0027625:	0f b6 db             	movzx  ebx,bl
c0027628:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002762d:	29 c1                	sub    ecx,eax
c002762f:	d3 ea                	shr    edx,cl
c0027631:	09 d3                	or     ebx,edx
c0027633:	31 c0                	xor    eax,eax
c0027635:	eb 3a                	jmp    c0027671 <__divdf3+0x32d>
c0027637:	83 c0 1f             	add    eax,0x1f
c002763a:	89 d7                	mov    edi,edx
c002763c:	88 c1                	mov    cl,al
c002763e:	d3 e7                	shl    edi,cl
c0027640:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027643:	89 df                	mov    edi,ebx
c0027645:	89 f1                	mov    ecx,esi
c0027647:	d3 ef                	shr    edi,cl
c0027649:	89 f9                	mov    ecx,edi
c002764b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002764e:	09 cf                	or     edi,ecx
c0027650:	88 c1                	mov    cl,al
c0027652:	d3 e3                	shl    ebx,cl
c0027654:	85 db                	test   ebx,ebx
c0027656:	0f 95 c3             	setne  bl
c0027659:	0f b6 db             	movzx  ebx,bl
c002765c:	09 fb                	or     ebx,edi
c002765e:	89 f1                	mov    ecx,esi
c0027660:	d3 ea                	shr    edx,cl
c0027662:	31 c0                	xor    eax,eax
c0027664:	eb 0d                	jmp    c0027673 <__divdf3+0x32f>
c0027666:	b8 ff 07 00 00       	mov    eax,0x7ff
c002766b:	eb 02                	jmp    c002766f <__divdf3+0x32b>
c002766d:	31 c0                	xor    eax,eax
c002766f:	31 db                	xor    ebx,ebx
c0027671:	31 d2                	xor    edx,edx
c0027673:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027676:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027679:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002767f:	09 c8                	or     eax,ecx
c0027681:	c1 e0 14             	shl    eax,0x14
c0027684:	89 d1                	mov    ecx,edx
c0027686:	c1 e9 0b             	shr    ecx,0xb
c0027689:	09 c8                	or     eax,ecx
c002768b:	89 c6                	mov    esi,eax
c002768d:	89 d9                	mov    ecx,ebx
c002768f:	c1 e9 0b             	shr    ecx,0xb
c0027692:	c1 e2 15             	shl    edx,0x15
c0027695:	09 ca                	or     edx,ecx
c0027697:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002769d:	0f 95 c0             	setne  al
c00276a0:	09 c1                	or     ecx,eax
c00276a2:	83 e1 01             	and    ecx,0x1
c00276a5:	c1 eb 0a             	shr    ebx,0xa
c00276a8:	21 cb                	and    ebx,ecx
c00276aa:	01 d3                	add    ebx,edx
c00276ac:	89 d8                	mov    eax,ebx
c00276ae:	83 d6 00             	adc    esi,0x0
c00276b1:	89 f2                	mov    edx,esi
c00276b3:	89 c7                	mov    edi,eax
c00276b5:	89 d1                	mov    ecx,edx
c00276b7:	89 f8                	mov    eax,edi
c00276b9:	89 ca                	mov    edx,ecx
c00276bb:	83 c4 2c             	add    esp,0x2c
c00276be:	5b                   	pop    ebx
c00276bf:	5e                   	pop    esi
c00276c0:	5f                   	pop    edi
c00276c1:	5d                   	pop    ebp
c00276c2:	c3                   	ret    

c00276c3 <__floatsidf>:
c00276c3:	55                   	push   ebp
c00276c4:	89 e5                	mov    ebp,esp
c00276c6:	56                   	push   esi
c00276c7:	53                   	push   ebx
c00276c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00276cb:	85 db                	test   ebx,ebx
c00276cd:	7e 15                	jle    c00276e4 <__floatsidf+0x21>
c00276cf:	0f bd cb             	bsr    ecx,ebx
c00276d2:	83 f1 1f             	xor    ecx,0x1f
c00276d5:	d3 e3                	shl    ebx,cl
c00276d7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00276dd:	b8 1e 04 00 00       	mov    eax,0x41e
c00276e2:	eb 21                	jmp    c0027705 <__floatsidf+0x42>
c00276e4:	b8 00 00 00 00       	mov    eax,0x0
c00276e9:	ba 00 00 00 00       	mov    edx,0x0
c00276ee:	74 2a                	je     c002771a <__floatsidf+0x57>
c00276f0:	f7 db                	neg    ebx
c00276f2:	0f bd cb             	bsr    ecx,ebx
c00276f5:	83 f1 1f             	xor    ecx,0x1f
c00276f8:	d3 e3                	shl    ebx,cl
c00276fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027700:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027705:	29 c8                	sub    eax,ecx
c0027707:	c1 e0 14             	shl    eax,0x14
c002770a:	89 c1                	mov    ecx,eax
c002770c:	89 de                	mov    esi,ebx
c002770e:	c1 ee 0b             	shr    esi,0xb
c0027711:	09 f1                	or     ecx,esi
c0027713:	89 ca                	mov    edx,ecx
c0027715:	c1 e3 15             	shl    ebx,0x15
c0027718:	89 d8                	mov    eax,ebx
c002771a:	5b                   	pop    ebx
c002771b:	5e                   	pop    esi
c002771c:	5d                   	pop    ebp
c002771d:	c3                   	ret    

c002771e <__floatunsidf>:
c002771e:	55                   	push   ebp
c002771f:	89 e5                	mov    ebp,esp
c0027721:	56                   	push   esi
c0027722:	53                   	push   ebx
c0027723:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027726:	85 db                	test   ebx,ebx
c0027728:	74 2a                	je     c0027754 <__floatunsidf+0x36>
c002772a:	0f bd cb             	bsr    ecx,ebx
c002772d:	83 f1 1f             	xor    ecx,0x1f
c0027730:	d3 e3                	shl    ebx,cl
c0027732:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027738:	b8 1e 04 00 00       	mov    eax,0x41e
c002773d:	29 c8                	sub    eax,ecx
c002773f:	c1 e0 14             	shl    eax,0x14
c0027742:	89 c1                	mov    ecx,eax
c0027744:	89 de                	mov    esi,ebx
c0027746:	c1 ee 0b             	shr    esi,0xb
c0027749:	09 f1                	or     ecx,esi
c002774b:	89 ca                	mov    edx,ecx
c002774d:	c1 e3 15             	shl    ebx,0x15
c0027750:	89 d8                	mov    eax,ebx
c0027752:	eb 04                	jmp    c0027758 <__floatunsidf+0x3a>
c0027754:	31 c0                	xor    eax,eax
c0027756:	31 d2                	xor    edx,edx
c0027758:	5b                   	pop    ebx
c0027759:	5e                   	pop    esi
c002775a:	5d                   	pop    ebp
c002775b:	c3                   	ret    

c002775c <__fixdfsi>:
c002775c:	55                   	push   ebp
c002775d:	89 e5                	mov    ebp,esp
c002775f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027762:	89 d1                	mov    ecx,edx
c0027764:	c1 e1 0b             	shl    ecx,0xb
c0027767:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002776d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027770:	c1 e8 15             	shr    eax,0x15
c0027773:	09 c1                	or     ecx,eax
c0027775:	c1 fa 14             	sar    edx,0x14
c0027778:	78 1f                	js     c0027799 <__fixdfsi+0x3d>
c002777a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027780:	31 c0                	xor    eax,eax
c0027782:	83 fa 1e             	cmp    edx,0x1e
c0027785:	77 40                	ja     c00277c7 <__fixdfsi+0x6b>
c0027787:	89 c8                	mov    eax,ecx
c0027789:	0d 00 00 00 80       	or     eax,0x80000000
c002778e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027793:	29 d1                	sub    ecx,edx
c0027795:	d3 e8                	shr    eax,cl
c0027797:	eb 2e                	jmp    c00277c7 <__fixdfsi+0x6b>
c0027799:	31 c0                	xor    eax,eax
c002779b:	81 c2 01 04 00 00    	add    edx,0x401
c00277a1:	78 24                	js     c00277c7 <__fixdfsi+0x6b>
c00277a3:	83 fa 1e             	cmp    edx,0x1e
c00277a6:	7e 09                	jle    c00277b1 <__fixdfsi+0x55>
c00277a8:	83 fa 1f             	cmp    edx,0x1f
c00277ab:	75 18                	jne    c00277c5 <__fixdfsi+0x69>
c00277ad:	85 c9                	test   ecx,ecx
c00277af:	75 14                	jne    c00277c5 <__fixdfsi+0x69>
c00277b1:	89 c8                	mov    eax,ecx
c00277b3:	0d 00 00 00 80       	or     eax,0x80000000
c00277b8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277bd:	29 d1                	sub    ecx,edx
c00277bf:	d3 e8                	shr    eax,cl
c00277c1:	f7 d8                	neg    eax
c00277c3:	eb 02                	jmp    c00277c7 <__fixdfsi+0x6b>
c00277c5:	31 c0                	xor    eax,eax
c00277c7:	5d                   	pop    ebp
c00277c8:	c3                   	ret    

c00277c9 <__fixunsdfsi>:
c00277c9:	55                   	push   ebp
c00277ca:	89 e5                	mov    ebp,esp
c00277cc:	53                   	push   ebx
c00277cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00277d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00277d3:	89 d3                	mov    ebx,edx
c00277d5:	c1 fb 14             	sar    ebx,0x14
c00277d8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00277de:	31 c0                	xor    eax,eax
c00277e0:	83 fb 1f             	cmp    ebx,0x1f
c00277e3:	77 1d                	ja     c0027802 <__fixunsdfsi+0x39>
c00277e5:	89 d0                	mov    eax,edx
c00277e7:	c1 e0 0b             	shl    eax,0xb
c00277ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00277ef:	c1 e9 15             	shr    ecx,0x15
c00277f2:	09 c8                	or     eax,ecx
c00277f4:	0d 00 00 00 80       	or     eax,0x80000000
c00277f9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277fe:	29 d9                	sub    ecx,ebx
c0027800:	d3 e8                	shr    eax,cl
c0027802:	5b                   	pop    ebx
c0027803:	5d                   	pop    ebp
c0027804:	c3                   	ret    

c0027805 <__cmpdf2>:
c0027805:	55                   	push   ebp
c0027806:	89 e5                	mov    ebp,esp
c0027808:	57                   	push   edi
c0027809:	56                   	push   esi
c002780a:	53                   	push   ebx
c002780b:	83 ec 0c             	sub    esp,0xc
c002780e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027811:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027814:	89 ca                	mov    edx,ecx
c0027816:	c1 ea 14             	shr    edx,0x14
c0027819:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002781f:	89 cb                	mov    ebx,ecx
c0027821:	c1 fb 1f             	sar    ebx,0x1f
c0027824:	31 da                	xor    edx,ebx
c0027826:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027829:	89 df                	mov    edi,ebx
c002782b:	c1 e7 0b             	shl    edi,0xb
c002782e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027831:	c1 e1 0b             	shl    ecx,0xb
c0027834:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002783a:	c1 eb 15             	shr    ebx,0x15
c002783d:	09 d9                	or     ecx,ebx
c002783f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027842:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027845:	89 ce                	mov    esi,ecx
c0027847:	c1 ee 14             	shr    esi,0x14
c002784a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027850:	89 cb                	mov    ebx,ecx
c0027852:	c1 fb 1f             	sar    ebx,0x1f
c0027855:	31 de                	xor    esi,ebx
c0027857:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002785a:	89 df                	mov    edi,ebx
c002785c:	c1 e7 0b             	shl    edi,0xb
c002785f:	c1 e1 0b             	shl    ecx,0xb
c0027862:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027868:	c1 eb 15             	shr    ebx,0x15
c002786b:	09 d9                	or     ecx,ebx
c002786d:	89 d3                	mov    ebx,edx
c002786f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027875:	43                   	inc    ebx
c0027876:	83 fb 01             	cmp    ebx,0x1
c0027879:	77 08                	ja     c0027883 <__cmpdf2+0x7e>
c002787b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002787e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027881:	75 68                	jne    c00278eb <__cmpdf2+0xe6>
c0027883:	89 f3                	mov    ebx,esi
c0027885:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002788b:	43                   	inc    ebx
c002788c:	83 fb 01             	cmp    ebx,0x1
c002788f:	77 06                	ja     c0027897 <__cmpdf2+0x92>
c0027891:	89 fb                	mov    ebx,edi
c0027893:	09 cb                	or     ebx,ecx
c0027895:	75 54                	jne    c00278eb <__cmpdf2+0xe6>
c0027897:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002789a:	09 f8                	or     eax,edi
c002789c:	09 c8                	or     eax,ecx
c002789e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00278a1:	75 12                	jne    c00278b5 <__cmpdf2+0xb0>
c00278a3:	8d 42 01             	lea    eax,[edx+0x1]
c00278a6:	83 f8 01             	cmp    eax,0x1
c00278a9:	77 0a                	ja     c00278b5 <__cmpdf2+0xb0>
c00278ab:	8d 5e 01             	lea    ebx,[esi+0x1]
c00278ae:	31 c0                	xor    eax,eax
c00278b0:	83 fb 01             	cmp    ebx,0x1
c00278b3:	76 36                	jbe    c00278eb <__cmpdf2+0xe6>
c00278b5:	b8 01 00 00 00       	mov    eax,0x1
c00278ba:	39 f2                	cmp    edx,esi
c00278bc:	7f 2d                	jg     c00278eb <__cmpdf2+0xe6>
c00278be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00278c3:	7c 26                	jl     c00278eb <__cmpdf2+0xe6>
c00278c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00278c8:	77 07                	ja     c00278d1 <__cmpdf2+0xcc>
c00278ca:	72 16                	jb     c00278e2 <__cmpdf2+0xdd>
c00278cc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00278cf:	76 0a                	jbe    c00278db <__cmpdf2+0xd6>
c00278d1:	89 d0                	mov    eax,edx
c00278d3:	c1 f8 1f             	sar    eax,0x1f
c00278d6:	83 c8 01             	or     eax,0x1
c00278d9:	eb 10                	jmp    c00278eb <__cmpdf2+0xe6>
c00278db:	b8 00 00 00 00       	mov    eax,0x0
c00278e0:	73 09                	jae    c00278eb <__cmpdf2+0xe6>
c00278e2:	89 d0                	mov    eax,edx
c00278e4:	c1 f8 1f             	sar    eax,0x1f
c00278e7:	83 e0 02             	and    eax,0x2
c00278ea:	48                   	dec    eax
c00278eb:	83 c4 0c             	add    esp,0xc
c00278ee:	5b                   	pop    ebx
c00278ef:	5e                   	pop    esi
c00278f0:	5f                   	pop    edi
c00278f1:	5d                   	pop    ebp
c00278f2:	c3                   	ret    

c00278f3 <__eqdf2>:
c00278f3:	55                   	push   ebp
c00278f4:	89 e5                	mov    ebp,esp
c00278f6:	50                   	push   eax
c00278f7:	6a 01                	push   0x1
c00278f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00278fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00278ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027902:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027905:	e8 fb fe ff ff       	call   c0027805 <__cmpdf2>
c002790a:	83 c4 18             	add    esp,0x18
c002790d:	c9                   	leave  
c002790e:	c3                   	ret    

c002790f <__nedf2>:
c002790f:	eb e2                	jmp    c00278f3 <__eqdf2>

c0027911 <__gtdf2>:
c0027911:	55                   	push   ebp
c0027912:	89 e5                	mov    ebp,esp
c0027914:	50                   	push   eax
c0027915:	6a ff                	push   0xffffffff
c0027917:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002791a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002791d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027923:	e8 dd fe ff ff       	call   c0027805 <__cmpdf2>
c0027928:	83 c4 18             	add    esp,0x18
c002792b:	c9                   	leave  
c002792c:	c3                   	ret    

c002792d <__gedf2>:
c002792d:	eb e2                	jmp    c0027911 <__gtdf2>

c002792f <__ltdf2>:
c002792f:	eb c2                	jmp    c00278f3 <__eqdf2>

c0027931 <__ledf2>:
c0027931:	eb c0                	jmp    c00278f3 <__eqdf2>

c0027933 <__truncdfsf2>:
c0027933:	55                   	push   ebp
c0027934:	89 e5                	mov    ebp,esp
c0027936:	57                   	push   edi
c0027937:	56                   	push   esi
c0027938:	53                   	push   ebx
c0027939:	83 ec 0c             	sub    esp,0xc
c002793c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002793f:	89 d1                	mov    ecx,edx
c0027941:	c1 f9 14             	sar    ecx,0x14
c0027944:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027947:	89 df                	mov    edi,ebx
c0027949:	c1 e7 0b             	shl    edi,0xb
c002794c:	89 d0                	mov    eax,edx
c002794e:	c1 e0 0b             	shl    eax,0xb
c0027951:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027956:	c1 eb 15             	shr    ebx,0x15
c0027959:	09 d8                	or     eax,ebx
c002795b:	89 cb                	mov    ebx,ecx
c002795d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027963:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027969:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002796f:	0f 86 9e 00 00 00    	jbe    c0027a13 <__truncdfsf2+0xe0>
c0027975:	85 db                	test   ebx,ebx
c0027977:	75 0a                	jne    c0027983 <__truncdfsf2+0x50>
c0027979:	c1 fa 17             	sar    edx,0x17
c002797c:	30 d2                	xor    dl,dl
c002797e:	e9 84 00 00 00       	jmp    c0027a07 <__truncdfsf2+0xd4>
c0027983:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027989:	83 fe 83             	cmp    esi,0xffffff83
c002798c:	7d 4b                	jge    c00279d9 <__truncdfsf2+0xa6>
c002798e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027993:	29 f1                	sub    ecx,esi
c0027995:	83 f9 1f             	cmp    ecx,0x1f
c0027998:	7f 6b                	jg     c0027a05 <__truncdfsf2+0xd2>
c002799a:	0d 00 00 00 80       	or     eax,0x80000000
c002799f:	89 c3                	mov    ebx,eax
c00279a1:	d3 eb                	shr    ebx,cl
c00279a3:	be 01 00 00 00       	mov    esi,0x1
c00279a8:	d3 e6                	shl    esi,cl
c00279aa:	4e                   	dec    esi
c00279ab:	21 f0                	and    eax,esi
c00279ad:	09 f8                	or     eax,edi
c00279af:	0f 95 c0             	setne  al
c00279b2:	0f b6 c0             	movzx  eax,al
c00279b5:	09 c3                	or     ebx,eax
c00279b7:	89 d9                	mov    ecx,ebx
c00279b9:	c1 e9 08             	shr    ecx,0x8
c00279bc:	f6 c3 7f             	test   bl,0x7f
c00279bf:	0f 95 c0             	setne  al
c00279c2:	09 c8                	or     eax,ecx
c00279c4:	83 e0 01             	and    eax,0x1
c00279c7:	c1 eb 07             	shr    ebx,0x7
c00279ca:	21 c3                	and    ebx,eax
c00279cc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00279d2:	09 d1                	or     ecx,edx
c00279d4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00279d7:	eb 76                	jmp    c0027a4f <__truncdfsf2+0x11c>
c00279d9:	83 c6 80             	add    esi,0xffffff80
c00279dc:	7e 1d                	jle    c00279fb <__truncdfsf2+0xc8>
c00279de:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00279e4:	75 0b                	jne    c00279f1 <__truncdfsf2+0xbe>
c00279e6:	09 f8                	or     eax,edi
c00279e8:	74 09                	je     c00279f3 <__truncdfsf2+0xc0>
c00279ea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00279ef:	eb 02                	jmp    c00279f3 <__truncdfsf2+0xc0>
c00279f1:	31 c0                	xor    eax,eax
c00279f3:	c1 fa 17             	sar    edx,0x17
c00279f6:	80 ca ff             	or     dl,0xff
c00279f9:	eb 0e                	jmp    c0027a09 <__truncdfsf2+0xd6>
c00279fb:	c1 fa 1f             	sar    edx,0x1f
c00279fe:	c1 e2 08             	shl    edx,0x8
c0027a01:	09 ca                	or     edx,ecx
c0027a03:	eb 04                	jmp    c0027a09 <__truncdfsf2+0xd6>
c0027a05:	31 d2                	xor    edx,edx
c0027a07:	31 c0                	xor    eax,eax
c0027a09:	c1 e2 17             	shl    edx,0x17
c0027a0c:	c1 e8 08             	shr    eax,0x8
c0027a0f:	09 d0                	or     eax,edx
c0027a11:	eb 3c                	jmp    c0027a4f <__truncdfsf2+0x11c>
c0027a13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027a19:	89 ca                	mov    edx,ecx
c0027a1b:	c1 fa 0b             	sar    edx,0xb
c0027a1e:	c1 e2 08             	shl    edx,0x8
c0027a21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027a24:	31 db                	xor    ebx,ebx
c0027a26:	85 ff                	test   edi,edi
c0027a28:	0f 95 c3             	setne  bl
c0027a2b:	09 d8                	or     eax,ebx
c0027a2d:	89 c3                	mov    ebx,eax
c0027a2f:	c1 eb 08             	shr    ebx,0x8
c0027a32:	a8 7f                	test   al,0x7f
c0027a34:	0f 95 c2             	setne  dl
c0027a37:	89 d6                	mov    esi,edx
c0027a39:	09 de                	or     esi,ebx
c0027a3b:	83 e6 01             	and    esi,0x1
c0027a3e:	c1 e8 07             	shr    eax,0x7
c0027a41:	21 f0                	and    eax,esi
c0027a43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027a46:	09 ca                	or     edx,ecx
c0027a48:	c1 e2 17             	shl    edx,0x17
c0027a4b:	09 da                	or     edx,ebx
c0027a4d:	01 d0                	add    eax,edx
c0027a4f:	83 c4 0c             	add    esp,0xc
c0027a52:	5b                   	pop    ebx
c0027a53:	5e                   	pop    esi
c0027a54:	5f                   	pop    edi
c0027a55:	5d                   	pop    ebp
c0027a56:	c3                   	ret    

c0027a57 <__extendsfdf2>:
c0027a57:	55                   	push   ebp
c0027a58:	89 e5                	mov    ebp,esp
c0027a5a:	57                   	push   edi
c0027a5b:	56                   	push   esi
c0027a5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027a5f:	89 d1                	mov    ecx,edx
c0027a61:	c1 f9 17             	sar    ecx,0x17
c0027a64:	c1 e2 08             	shl    edx,0x8
c0027a67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027a6d:	89 c8                	mov    eax,ecx
c0027a6f:	80 e4 f8             	and    ah,0xf8
c0027a72:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027a7b:	75 27                	jne    c0027aa4 <__extendsfdf2+0x4d>
c0027a7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027a83:	75 18                	jne    c0027a9d <__extendsfdf2+0x46>
c0027a85:	85 d2                	test   edx,edx
c0027a87:	74 20                	je     c0027aa9 <__extendsfdf2+0x52>
c0027a89:	41                   	inc    ecx
c0027a8a:	01 d2                	add    edx,edx
c0027a8c:	79 fb                	jns    c0027a89 <__extendsfdf2+0x32>
c0027a8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a94:	29 c8                	sub    eax,ecx
c0027a96:	05 81 03 00 00       	add    eax,0x381
c0027a9b:	eb 0c                	jmp    c0027aa9 <__extendsfdf2+0x52>
c0027a9d:	05 00 07 00 00       	add    eax,0x700
c0027aa2:	eb 05                	jmp    c0027aa9 <__extendsfdf2+0x52>
c0027aa4:	05 80 03 00 00       	add    eax,0x380
c0027aa9:	c1 e0 14             	shl    eax,0x14
c0027aac:	89 c1                	mov    ecx,eax
c0027aae:	89 d0                	mov    eax,edx
c0027ab0:	c1 e8 0b             	shr    eax,0xb
c0027ab3:	09 c1                	or     ecx,eax
c0027ab5:	c1 e2 15             	shl    edx,0x15
c0027ab8:	89 d0                	mov    eax,edx
c0027aba:	89 ca                	mov    edx,ecx
c0027abc:	5e                   	pop    esi
c0027abd:	5f                   	pop    edi
c0027abe:	5d                   	pop    ebp
c0027abf:	c3                   	ret    

c0027ac0 <fabs>:
c0027ac0:	83 ec 0c             	sub    esp,0xc
c0027ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027ace:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027ad7:	dd 04 24             	fld    QWORD PTR [esp]
c0027ada:	83 c4 0c             	add    esp,0xc
c0027add:	c3                   	ret    
c0027ade:	66 90                	xchg   ax,ax

c0027ae0 <lrint>:
c0027ae0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027ae4:	83 ec 04             	sub    esp,0x4
c0027ae7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027aea:	58                   	pop    eax
c0027aeb:	c3                   	ret    

c0027aec <lrintf>:
c0027aec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027af0:	83 ec 04             	sub    esp,0x4
c0027af3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027af6:	58                   	pop    eax
c0027af7:	c3                   	ret    

Disassembly of section .init:

c0027af8 <_init>:
c0027af8:	55                   	push   ebp
c0027af9:	89 e5                	mov    ebp,esp
c0027afb:	e8 18 86 fd ff       	call   c0000118 <frame_dummy>
c0027b00:	e8 63 e0 ff ff       	call   c0025b68 <__do_global_ctors_aux>
c0027b05:	5d                   	pop    ebp
c0027b06:	c3                   	ret    

Disassembly of section .fini:

c0027b07 <_fini>:
c0027b07:	55                   	push   ebp
c0027b08:	89 e5                	mov    ebp,esp
c0027b0a:	e8 99 85 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027b0f:	5d                   	pop    ebp
c0027b10:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027b12 <Computer::~Computer()>:
c0027b12:	83 ec 0c             	sub    esp,0xc
c0027b15:	ba 48 96 02 c0       	mov    edx,0xc0029648
c0027b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b1e:	89 10                	mov    DWORD PTR [eax],edx
c0027b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b24:	83 ec 0c             	sub    esp,0xc
c0027b27:	50                   	push   eax
c0027b28:	e8 bf c0 fe ff       	call   c0013bec <Device::~Device()>
c0027b2d:	83 c4 10             	add    esp,0x10
c0027b30:	90                   	nop
c0027b31:	83 c4 0c             	add    esp,0xc
c0027b34:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027b36 <Computer::~Computer()>:
c0027b36:	83 ec 0c             	sub    esp,0xc
c0027b39:	83 ec 0c             	sub    esp,0xc
c0027b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b40:	e8 cd ff ff ff       	call   c0027b12 <Computer::~Computer()>
c0027b45:	83 c4 10             	add    esp,0x10
c0027b48:	83 ec 08             	sub    esp,0x8
c0027b4b:	68 ec 01 00 00       	push   0x1ec
c0027b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b54:	e8 ba ac fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0027b59:	83 c4 10             	add    esp,0x10
c0027b5c:	83 c4 0c             	add    esp,0xc
c0027b5f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027b60 <idleCommon()>:
c0027b60:	83 ec 0c             	sub    esp,0xc
c0027b63:	e8 ce 56 ff ff       	call   c001d236 <lockScheduler()>
c0027b68:	e8 05 5a ff ff       	call   c001d572 <schedule()>
c0027b6d:	83 c4 0c             	add    esp,0xc
c0027b70:	e9 c3 56 ff ff       	jmp    c001d238 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027b76 <LinkedList<UnixFile>::~LinkedList()>:
c0027b76:	90                   	nop
c0027b77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027b78 <LinkedList<UnixFile>::LinkedList()>:
c0027b78:	83 ec 0c             	sub    esp,0xc
c0027b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ba9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027bbb:	83 ec 0c             	sub    esp,0xc
c0027bbe:	68 06 99 02 c0       	push   0xc0029906
c0027bc3:	e8 2b ad fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0027bc8:	83 c4 10             	add    esp,0x10
c0027bcb:	90                   	nop
c0027bcc:	83 c4 0c             	add    esp,0xc
c0027bcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027bd0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027bd0:	83 ec 0c             	sub    esp,0xc
c0027bd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027bd8:	75 10                	jne    c0027bea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027bda:	83 ec 0c             	sub    esp,0xc
c0027bdd:	68 20 99 02 c0       	push   0xc0029920
c0027be2:	e8 3e 20 ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027be7:	83 c4 10             	add    esp,0x10
c0027bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0027bf0:	85 c0                	test   eax,eax
c0027bf2:	74 34                	je     c0027c28 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027bfb:	85 c0                	test   eax,eax
c0027bfd:	74 29                	je     c0027c28 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027c06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027c0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027c15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027c1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027c26:	eb 65                	jmp    c0027c8d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027c2e:	85 c0                	test   eax,eax
c0027c30:	75 4b                	jne    c0027c7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027c39:	85 c0                	test   eax,eax
c0027c3b:	75 40                	jne    c0027c7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027c45:	89 10                	mov    DWORD PTR [eax],edx
c0027c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027c4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027c59:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c67:	85 c0                	test   eax,eax
c0027c69:	74 22                	je     c0027c8d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027c6b:	83 ec 0c             	sub    esp,0xc
c0027c6e:	68 42 99 02 c0       	push   0xc0029942
c0027c73:	e8 ad 1f ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027c78:	83 c4 10             	add    esp,0x10
c0027c7b:	eb 10                	jmp    c0027c8d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027c7d:	83 ec 0c             	sub    esp,0xc
c0027c80:	68 4c 99 02 c0       	push   0xc002994c
c0027c85:	e8 9b 1f ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027c8a:	83 c4 10             	add    esp,0x10
c0027c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c94:	8d 50 01             	lea    edx,[eax+0x1]
c0027c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027c9e:	90                   	nop
c0027c9f:	83 c4 0c             	add    esp,0xc
c0027ca2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027ca4 <LinkedList<UnixFile>::getFirstElement()>:
c0027ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0027caa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027cac <LinkedList<UnixFile>::removeFirst()>:
c0027cac:	83 ec 0c             	sub    esp,0xc
c0027caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0027cb5:	85 c0                	test   eax,eax
c0027cb7:	75 12                	jne    c0027ccb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027cb9:	83 ec 0c             	sub    esp,0xc
c0027cbc:	68 58 99 02 c0       	push   0xc0029958
c0027cc1:	e8 5f 1f ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027cc6:	83 c4 10             	add    esp,0x10
c0027cc9:	eb 7e                	jmp    c0027d49 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ccf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027cd2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027cd5:	85 c0                	test   eax,eax
c0027cd7:	74 10                	je     c0027ce9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027cd9:	83 ec 0c             	sub    esp,0xc
c0027cdc:	68 a3 99 02 c0       	push   0xc00299a3
c0027ce1:	e8 3f 1f ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027ce6:	83 c4 10             	add    esp,0x10
c0027ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0027cef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027cf2:	85 c0                	test   eax,eax
c0027cf4:	75 33                	jne    c0027d29 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d12:	83 f8 01             	cmp    eax,0x1
c0027d15:	74 21                	je     c0027d38 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027d17:	83 ec 0c             	sub    esp,0xc
c0027d1a:	68 7c 99 02 c0       	push   0xc002997c
c0027d1f:	e8 01 1f ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027d24:	83 c4 10             	add    esp,0x10
c0027d27:	eb 0f                	jmp    c0027d38 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d2f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d36:	89 10                	mov    DWORD PTR [eax],edx
c0027d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d3f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027d49:	83 c4 0c             	add    esp,0xc
c0027d4c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0027d4e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0027d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d55:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027d56 <DriverlessDevice::~DriverlessDevice()>:
c0027d56:	ba 84 a0 02 c0       	mov    edx,0xc002a084
c0027d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d5f:	89 10                	mov    DWORD PTR [eax],edx
c0027d61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d65:	50                   	push   eax
c0027d66:	e8 81 be fe ff       	call   c0013bec <Device::~Device()>
c0027d6b:	83 c4 04             	add    esp,0x4
c0027d6e:	90                   	nop
c0027d6f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027d70 <DriverlessDevice::~DriverlessDevice()>:
c0027d70:	83 ec 0c             	sub    esp,0xc
c0027d73:	83 ec 0c             	sub    esp,0xc
c0027d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d7a:	e8 d7 ff ff ff       	call   c0027d56 <DriverlessDevice::~DriverlessDevice()>
c0027d7f:	83 c4 10             	add    esp,0x10
c0027d82:	83 ec 08             	sub    esp,0x8
c0027d85:	68 58 01 00 00       	push   0x158
c0027d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d8e:	e8 80 aa fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0027d93:	83 c4 10             	add    esp,0x10
c0027d96:	83 c4 0c             	add    esp,0xc
c0027d99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0027d9a <LinkedList<Device>::addElement(Device*)>:
c0027d9a:	83 ec 0c             	sub    esp,0xc
c0027d9d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027da2:	75 10                	jne    c0027db4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027da4:	83 ec 0c             	sub    esp,0xc
c0027da7:	68 20 99 02 c0       	push   0xc0029920
c0027dac:	e8 74 1e ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027db1:	83 c4 10             	add    esp,0x10
c0027db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0027dba:	85 c0                	test   eax,eax
c0027dbc:	74 3a                	je     c0027df8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027dc5:	85 c0                	test   eax,eax
c0027dc7:	74 2f                	je     c0027df8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027dd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027dd4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0027dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027de2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027de9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027dec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027df6:	eb 68                	jmp    c0027e60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0027dfe:	85 c0                	test   eax,eax
c0027e00:	75 4e                	jne    c0027e50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027e09:	85 c0                	test   eax,eax
c0027e0b:	75 43                	jne    c0027e50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027e15:	89 10                	mov    DWORD PTR [eax],edx
c0027e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027e1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027e29:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e3a:	85 c0                	test   eax,eax
c0027e3c:	74 22                	je     c0027e60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027e3e:	83 ec 0c             	sub    esp,0xc
c0027e41:	68 42 99 02 c0       	push   0xc0029942
c0027e46:	e8 da 1d ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027e4b:	83 c4 10             	add    esp,0x10
c0027e4e:	eb 10                	jmp    c0027e60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027e50:	83 ec 0c             	sub    esp,0xc
c0027e53:	68 4c 99 02 c0       	push   0xc002994c
c0027e58:	e8 c8 1d ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027e5d:	83 c4 10             	add    esp,0x10
c0027e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e67:	8d 50 01             	lea    edx,[eax+0x1]
c0027e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027e71:	90                   	nop
c0027e72:	83 c4 0c             	add    esp,0xc
c0027e75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027e76 <LinkedList<Device>::LinkedList()>:
c0027e76:	83 ec 0c             	sub    esp,0xc
c0027e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027eb9:	83 ec 0c             	sub    esp,0xc
c0027ebc:	68 06 99 02 c0       	push   0xc0029906
c0027ec1:	e8 2d aa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0027ec6:	83 c4 10             	add    esp,0x10
c0027ec9:	90                   	nop
c0027eca:	83 c4 0c             	add    esp,0xc
c0027ecd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0027ece <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0027ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ed4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027ed6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0027edc:	85 c0                	test   eax,eax
c0027ede:	75 0e                	jne    c0027eee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ee7:	85 c0                	test   eax,eax
c0027ee9:	75 03                	jne    c0027eee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027eeb:	b0 01                	mov    al,0x1
c0027eed:	c3                   	ret    
c0027eee:	b0 00                	mov    al,0x0
c0027ef0:	90                   	nop
c0027ef1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027ef2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027ef2:	83 ec 0c             	sub    esp,0xc
c0027ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef9:	8b 00                	mov    eax,DWORD PTR [eax]
c0027efb:	85 c0                	test   eax,eax
c0027efd:	75 15                	jne    c0027f14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0027eff:	83 ec 0c             	sub    esp,0xc
c0027f02:	68 58 99 02 c0       	push   0xc0029958
c0027f07:	e8 19 1d ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027f0c:	83 c4 10             	add    esp,0x10
c0027f0f:	e9 88 00 00 00       	jmp    c0027f9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027f1e:	85 c0                	test   eax,eax
c0027f20:	0f 95 c0             	setne  al
c0027f23:	84 c0                	test   al,al
c0027f25:	74 10                	je     c0027f37 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027f27:	83 ec 0c             	sub    esp,0xc
c0027f2a:	68 a3 99 02 c0       	push   0xc00299a3
c0027f2f:	e8 f1 1c ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027f34:	83 c4 10             	add    esp,0x10
c0027f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027f40:	85 c0                	test   eax,eax
c0027f42:	0f 94 c0             	sete   al
c0027f45:	84 c0                	test   al,al
c0027f47:	74 33                	je     c0027f7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f65:	83 f8 01             	cmp    eax,0x1
c0027f68:	74 21                	je     c0027f8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0027f6a:	83 ec 0c             	sub    esp,0xc
c0027f6d:	68 7c 99 02 c0       	push   0xc002997c
c0027f72:	e8 ae 1c ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027f77:	83 c4 10             	add    esp,0x10
c0027f7a:	eb 0f                	jmp    c0027f8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0027f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f89:	89 10                	mov    DWORD PTR [eax],edx
c0027f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f92:	8d 50 ff             	lea    edx,[eax-0x1]
c0027f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f9c:	83 c4 0c             	add    esp,0xc
c0027f9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027fa0:	83 ec 0c             	sub    esp,0xc
c0027fa3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027fa8:	75 10                	jne    c0027fba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0027faa:	83 ec 0c             	sub    esp,0xc
c0027fad:	68 20 99 02 c0       	push   0xc0029920
c0027fb2:	e8 6e 1c ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0027fb7:	83 c4 10             	add    esp,0x10
c0027fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fc0:	85 c0                	test   eax,eax
c0027fc2:	74 34                	je     c0027ff8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fcb:	85 c0                	test   eax,eax
c0027fcd:	74 29                	je     c0027ff8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027fda:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0027fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027fe5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027ff6:	eb 65                	jmp    c002805d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ffc:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ffe:	85 c0                	test   eax,eax
c0028000:	75 4b                	jne    c002804d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028009:	85 c0                	test   eax,eax
c002800b:	75 40                	jne    c002804d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002800d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028011:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028015:	89 10                	mov    DWORD PTR [eax],edx
c0028017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002801b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002801f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028029:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028034:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028037:	85 c0                	test   eax,eax
c0028039:	74 22                	je     c002805d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002803b:	83 ec 0c             	sub    esp,0xc
c002803e:	68 42 99 02 c0       	push   0xc0029942
c0028043:	e8 dd 1b ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c0028048:	83 c4 10             	add    esp,0x10
c002804b:	eb 10                	jmp    c002805d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002804d:	83 ec 0c             	sub    esp,0xc
c0028050:	68 4c 99 02 c0       	push   0xc002994c
c0028055:	e8 cb 1b ff ff       	call   c0019c25 <Krnl::panic(char const*)>
c002805a:	83 c4 10             	add    esp,0x10
c002805d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028061:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028064:	8d 50 01             	lea    edx,[eax+0x1]
c0028067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002806b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002806e:	90                   	nop
c002806f:	83 c4 0c             	add    esp,0xc
c0028072:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028074 <ACPI::~ACPI()>:
c0028074:	83 ec 0c             	sub    esp,0xc
c0028077:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c002807c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028080:	89 10                	mov    DWORD PTR [eax],edx
c0028082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028086:	83 ec 0c             	sub    esp,0xc
c0028089:	50                   	push   eax
c002808a:	e8 5d bb fe ff       	call   c0013bec <Device::~Device()>
c002808f:	83 c4 10             	add    esp,0x10
c0028092:	90                   	nop
c0028093:	83 c4 0c             	add    esp,0xc
c0028096:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028098 <ACPI::~ACPI()>:
c0028098:	83 ec 0c             	sub    esp,0xc
c002809b:	83 ec 0c             	sub    esp,0xc
c002809e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280a2:	e8 cd ff ff ff       	call   c0028074 <ACPI::~ACPI()>
c00280a7:	83 c4 10             	add    esp,0x10
c00280aa:	83 ec 08             	sub    esp,0x8
c00280ad:	68 68 12 00 00       	push   0x1268
c00280b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280b6:	e8 58 a7 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00280bb:	83 c4 10             	add    esp,0x10
c00280be:	83 c4 0c             	add    esp,0xc
c00280c1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00280c2 <CPU::~CPU()>:
c00280c2:	83 ec 0c             	sub    esp,0xc
c00280c5:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c00280ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ce:	89 10                	mov    DWORD PTR [eax],edx
c00280d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d4:	83 ec 0c             	sub    esp,0xc
c00280d7:	50                   	push   eax
c00280d8:	e8 0f bb fe ff       	call   c0013bec <Device::~Device()>
c00280dd:	83 c4 10             	add    esp,0x10
c00280e0:	90                   	nop
c00280e1:	83 c4 0c             	add    esp,0xc
c00280e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00280e6 <CPU::~CPU()>:
c00280e6:	83 ec 0c             	sub    esp,0xc
c00280e9:	83 ec 0c             	sub    esp,0xc
c00280ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280f0:	e8 cd ff ff ff       	call   c00280c2 <CPU::~CPU()>
c00280f5:	83 c4 10             	add    esp,0x10
c00280f8:	83 ec 08             	sub    esp,0x8
c00280fb:	68 98 11 00 00       	push   0x1198
c0028100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028104:	e8 0a a7 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028109:	83 c4 10             	add    esp,0x10
c002810c:	83 c4 0c             	add    esp,0xc
c002810f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028110 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028110:	90                   	nop
c0028111:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028112 <ThreadControlBlock::ThreadControlBlock()>:
c0028112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028116:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002811d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028121:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002812c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028133:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028137:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002813e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028142:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002814a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002814e:	90                   	nop
c002814f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028150:	83 ec 0c             	sub    esp,0xc
c0028153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028161:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002816c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028177:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002817d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028181:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028193:	83 ec 0c             	sub    esp,0xc
c0028196:	68 06 99 02 c0       	push   0xc0029906
c002819b:	e8 53 a7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00281a0:	83 c4 10             	add    esp,0x10
c00281a3:	90                   	nop
c00281a4:	83 c4 0c             	add    esp,0xc
c00281a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00281a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00281a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00281ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00281af:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00281b0 <Vm::_FPUState::_FPUState()>:
c00281b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281b4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00281bb:	90                   	nop
c00281bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00281be <PCI::~PCI()>:
c00281be:	83 ec 0c             	sub    esp,0xc
c00281c1:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c00281c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281ca:	89 10                	mov    DWORD PTR [eax],edx
c00281cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281d0:	83 ec 0c             	sub    esp,0xc
c00281d3:	50                   	push   eax
c00281d4:	e8 eb b3 fe ff       	call   c00135c4 <Bus::~Bus()>
c00281d9:	83 c4 10             	add    esp,0x10
c00281dc:	90                   	nop
c00281dd:	83 c4 0c             	add    esp,0xc
c00281e0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00281e2 <PCI::~PCI()>:
c00281e2:	83 ec 0c             	sub    esp,0xc
c00281e5:	83 ec 0c             	sub    esp,0xc
c00281e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281ec:	e8 cd ff ff ff       	call   c00281be <PCI::~PCI()>
c00281f1:	83 c4 10             	add    esp,0x10
c00281f4:	83 ec 08             	sub    esp,0x8
c00281f7:	68 58 01 00 00       	push   0x158
c00281fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028200:	e8 0e a6 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028205:	83 c4 10             	add    esp,0x10
c0028208:	83 c4 0c             	add    esp,0xc
c002820b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002820c <IDE::~IDE()>:
c002820c:	83 ec 0c             	sub    esp,0xc
c002820f:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0028214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028218:	89 10                	mov    DWORD PTR [eax],edx
c002821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002821e:	83 ec 0c             	sub    esp,0xc
c0028221:	50                   	push   eax
c0028222:	e8 b5 be fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028227:	83 c4 10             	add    esp,0x10
c002822a:	90                   	nop
c002822b:	83 c4 0c             	add    esp,0xc
c002822e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028230 <IDE::~IDE()>:
c0028230:	83 ec 0c             	sub    esp,0xc
c0028233:	83 ec 0c             	sub    esp,0xc
c0028236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002823a:	e8 cd ff ff ff       	call   c002820c <IDE::~IDE()>
c002823f:	83 c4 10             	add    esp,0x10
c0028242:	83 ec 08             	sub    esp,0x8
c0028245:	68 70 02 00 00       	push   0x270
c002824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002824e:	e8 c0 a5 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028253:	83 c4 10             	add    esp,0x10
c0028256:	83 c4 0c             	add    esp,0xc
c0028259:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002825a <SATABus::~SATABus()>:
c002825a:	83 ec 0c             	sub    esp,0xc
c002825d:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0028262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028266:	89 10                	mov    DWORD PTR [eax],edx
c0028268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002826c:	83 ec 0c             	sub    esp,0xc
c002826f:	50                   	push   eax
c0028270:	e8 67 be fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028275:	83 c4 10             	add    esp,0x10
c0028278:	90                   	nop
c0028279:	83 c4 0c             	add    esp,0xc
c002827c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002827e <SATABus::~SATABus()>:
c002827e:	83 ec 0c             	sub    esp,0xc
c0028281:	83 ec 0c             	sub    esp,0xc
c0028284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028288:	e8 cd ff ff ff       	call   c002825a <SATABus::~SATABus()>
c002828d:	83 c4 10             	add    esp,0x10
c0028290:	83 ec 08             	sub    esp,0x8
c0028293:	68 64 01 00 00       	push   0x164
c0028298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002829c:	e8 72 a5 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00282a1:	83 c4 10             	add    esp,0x10
c00282a4:	83 c4 0c             	add    esp,0xc
c00282a7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00282a8 <ATA::~ATA()>:
c00282a8:	83 ec 0c             	sub    esp,0xc
c00282ab:	ba 48 c0 02 c0       	mov    edx,0xc002c048
c00282b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b4:	89 10                	mov    DWORD PTR [eax],edx
c00282b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ba:	83 ec 0c             	sub    esp,0xc
c00282bd:	50                   	push   eax
c00282be:	e8 f7 be fe ff       	call   c00141ba <PhysicalDisk::~PhysicalDisk()>
c00282c3:	83 c4 10             	add    esp,0x10
c00282c6:	90                   	nop
c00282c7:	83 c4 0c             	add    esp,0xc
c00282ca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00282cc <ATA::~ATA()>:
c00282cc:	83 ec 0c             	sub    esp,0xc
c00282cf:	83 ec 0c             	sub    esp,0xc
c00282d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282d6:	e8 cd ff ff ff       	call   c00282a8 <ATA::~ATA()>
c00282db:	83 c4 10             	add    esp,0x10
c00282de:	83 ec 08             	sub    esp,0x8
c00282e1:	68 7c 01 00 00       	push   0x17c
c00282e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282ea:	e8 24 a5 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00282ef:	83 c4 10             	add    esp,0x10
c00282f2:	83 c4 0c             	add    esp,0xc
c00282f5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00282f6 <ATAPI::~ATAPI()>:
c00282f6:	83 ec 0c             	sub    esp,0xc
c00282f9:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c00282fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028302:	89 10                	mov    DWORD PTR [eax],edx
c0028304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028308:	83 ec 0c             	sub    esp,0xc
c002830b:	50                   	push   eax
c002830c:	e8 a9 be fe ff       	call   c00141ba <PhysicalDisk::~PhysicalDisk()>
c0028311:	83 c4 10             	add    esp,0x10
c0028314:	90                   	nop
c0028315:	83 c4 0c             	add    esp,0xc
c0028318:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002831a <ATAPI::~ATAPI()>:
c002831a:	83 ec 0c             	sub    esp,0xc
c002831d:	83 ec 0c             	sub    esp,0xc
c0028320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028324:	e8 cd ff ff ff       	call   c00282f6 <ATAPI::~ATAPI()>
c0028329:	83 c4 10             	add    esp,0x10
c002832c:	83 ec 08             	sub    esp,0x8
c002832f:	68 80 01 00 00       	push   0x180
c0028334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028338:	e8 d6 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002833d:	83 c4 10             	add    esp,0x10
c0028340:	83 c4 0c             	add    esp,0xc
c0028343:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028344 <SATA::~SATA()>:
c0028344:	83 ec 0c             	sub    esp,0xc
c0028347:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c002834c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028350:	89 10                	mov    DWORD PTR [eax],edx
c0028352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028356:	83 ec 0c             	sub    esp,0xc
c0028359:	50                   	push   eax
c002835a:	e8 5b be fe ff       	call   c00141ba <PhysicalDisk::~PhysicalDisk()>
c002835f:	83 c4 10             	add    esp,0x10
c0028362:	90                   	nop
c0028363:	83 c4 0c             	add    esp,0xc
c0028366:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028368 <SATA::~SATA()>:
c0028368:	83 ec 0c             	sub    esp,0xc
c002836b:	83 ec 0c             	sub    esp,0xc
c002836e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028372:	e8 cd ff ff ff       	call   c0028344 <SATA::~SATA()>
c0028377:	83 c4 10             	add    esp,0x10
c002837a:	83 ec 08             	sub    esp,0x8
c002837d:	68 7c 01 00 00       	push   0x17c
c0028382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028386:	e8 88 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002838b:	83 c4 10             	add    esp,0x10
c002838e:	83 c4 0c             	add    esp,0xc
c0028391:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028392 <SATAPI::~SATAPI()>:
c0028392:	83 ec 0c             	sub    esp,0xc
c0028395:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c002839a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839e:	89 10                	mov    DWORD PTR [eax],edx
c00283a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a4:	83 ec 0c             	sub    esp,0xc
c00283a7:	50                   	push   eax
c00283a8:	e8 0d be fe ff       	call   c00141ba <PhysicalDisk::~PhysicalDisk()>
c00283ad:	83 c4 10             	add    esp,0x10
c00283b0:	90                   	nop
c00283b1:	83 c4 0c             	add    esp,0xc
c00283b4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00283b6 <SATAPI::~SATAPI()>:
c00283b6:	83 ec 0c             	sub    esp,0xc
c00283b9:	83 ec 0c             	sub    esp,0xc
c00283bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283c0:	e8 cd ff ff ff       	call   c0028392 <SATAPI::~SATAPI()>
c00283c5:	83 c4 10             	add    esp,0x10
c00283c8:	83 ec 08             	sub    esp,0x8
c00283cb:	68 80 01 00 00       	push   0x180
c00283d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283d4:	e8 3a a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00283d9:	83 c4 10             	add    esp,0x10
c00283dc:	83 c4 0c             	add    esp,0xc
c00283df:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00283e0 <AVX::~AVX()>:
c00283e0:	83 ec 0c             	sub    esp,0xc
c00283e3:	ba 98 c2 02 c0       	mov    edx,0xc002c298
c00283e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ec:	89 10                	mov    DWORD PTR [eax],edx
c00283ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f2:	83 ec 0c             	sub    esp,0xc
c00283f5:	50                   	push   eax
c00283f6:	e8 43 be fe ff       	call   c001423e <FPU::~FPU()>
c00283fb:	83 c4 10             	add    esp,0x10
c00283fe:	90                   	nop
c00283ff:	83 c4 0c             	add    esp,0xc
c0028402:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028404 <AVX::~AVX()>:
c0028404:	83 ec 0c             	sub    esp,0xc
c0028407:	83 ec 0c             	sub    esp,0xc
c002840a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002840e:	e8 cd ff ff ff       	call   c00283e0 <AVX::~AVX()>
c0028413:	83 c4 10             	add    esp,0x10
c0028416:	83 ec 08             	sub    esp,0x8
c0028419:	68 58 01 00 00       	push   0x158
c002841e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028422:	e8 ec a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028427:	83 c4 10             	add    esp,0x10
c002842a:	83 c4 0c             	add    esp,0xc
c002842d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002842e <MMX::~MMX()>:
c002842e:	83 ec 0c             	sub    esp,0xc
c0028431:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0028436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843a:	89 10                	mov    DWORD PTR [eax],edx
c002843c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	50                   	push   eax
c0028444:	e8 f5 bd fe ff       	call   c001423e <FPU::~FPU()>
c0028449:	83 c4 10             	add    esp,0x10
c002844c:	90                   	nop
c002844d:	83 c4 0c             	add    esp,0xc
c0028450:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028452 <MMX::~MMX()>:
c0028452:	83 ec 0c             	sub    esp,0xc
c0028455:	83 ec 0c             	sub    esp,0xc
c0028458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002845c:	e8 cd ff ff ff       	call   c002842e <MMX::~MMX()>
c0028461:	83 c4 10             	add    esp,0x10
c0028464:	83 ec 08             	sub    esp,0x8
c0028467:	68 58 01 00 00       	push   0x158
c002846c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028470:	e8 9e a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028475:	83 c4 10             	add    esp,0x10
c0028478:	83 c4 0c             	add    esp,0xc
c002847b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002847c <SSE::~SSE()>:
c002847c:	83 ec 0c             	sub    esp,0xc
c002847f:	ba 18 c3 02 c0       	mov    edx,0xc002c318
c0028484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028488:	89 10                	mov    DWORD PTR [eax],edx
c002848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848e:	83 ec 0c             	sub    esp,0xc
c0028491:	50                   	push   eax
c0028492:	e8 a7 bd fe ff       	call   c001423e <FPU::~FPU()>
c0028497:	83 c4 10             	add    esp,0x10
c002849a:	90                   	nop
c002849b:	83 c4 0c             	add    esp,0xc
c002849e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00284a0 <SSE::~SSE()>:
c00284a0:	83 ec 0c             	sub    esp,0xc
c00284a3:	83 ec 0c             	sub    esp,0xc
c00284a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284aa:	e8 cd ff ff ff       	call   c002847c <SSE::~SSE()>
c00284af:	83 c4 10             	add    esp,0x10
c00284b2:	83 ec 08             	sub    esp,0x8
c00284b5:	68 58 01 00 00       	push   0x158
c00284ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284be:	e8 50 a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00284c3:	83 c4 10             	add    esp,0x10
c00284c6:	83 c4 0c             	add    esp,0xc
c00284c9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00284ca <x87::~x87()>:
c00284ca:	83 ec 0c             	sub    esp,0xc
c00284cd:	ba 58 c3 02 c0       	mov    edx,0xc002c358
c00284d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d6:	89 10                	mov    DWORD PTR [eax],edx
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	83 ec 0c             	sub    esp,0xc
c00284df:	50                   	push   eax
c00284e0:	e8 59 bd fe ff       	call   c001423e <FPU::~FPU()>
c00284e5:	83 c4 10             	add    esp,0x10
c00284e8:	90                   	nop
c00284e9:	83 c4 0c             	add    esp,0xc
c00284ec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00284ee <x87::~x87()>:
c00284ee:	83 ec 0c             	sub    esp,0xc
c00284f1:	83 ec 0c             	sub    esp,0xc
c00284f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f8:	e8 cd ff ff ff       	call   c00284ca <x87::~x87()>
c00284fd:	83 c4 10             	add    esp,0x10
c0028500:	83 ec 08             	sub    esp,0x8
c0028503:	68 58 01 00 00       	push   0x158
c0028508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002850c:	e8 02 a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028511:	83 c4 10             	add    esp,0x10
c0028514:	83 c4 0c             	add    esp,0xc
c0028517:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028518 <IOAPIC::~IOAPIC()>:
c0028518:	83 ec 0c             	sub    esp,0xc
c002851b:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c0028520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028524:	89 10                	mov    DWORD PTR [eax],edx
c0028526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852a:	83 ec 0c             	sub    esp,0xc
c002852d:	50                   	push   eax
c002852e:	e8 b9 b6 fe ff       	call   c0013bec <Device::~Device()>
c0028533:	83 c4 10             	add    esp,0x10
c0028536:	90                   	nop
c0028537:	83 c4 0c             	add    esp,0xc
c002853a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002853c <IOAPIC::~IOAPIC()>:
c002853c:	83 ec 0c             	sub    esp,0xc
c002853f:	83 ec 0c             	sub    esp,0xc
c0028542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028546:	e8 cd ff ff ff       	call   c0028518 <IOAPIC::~IOAPIC()>
c002854b:	83 c4 10             	add    esp,0x10
c002854e:	83 ec 08             	sub    esp,0x8
c0028551:	68 68 01 00 00       	push   0x168
c0028556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002855a:	e8 b4 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002855f:	83 c4 10             	add    esp,0x10
c0028562:	83 c4 0c             	add    esp,0xc
c0028565:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028566 <APIC::~APIC()>:
c0028566:	83 ec 0c             	sub    esp,0xc
c0028569:	ba 68 c4 02 c0       	mov    edx,0xc002c468
c002856e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028572:	89 10                	mov    DWORD PTR [eax],edx
c0028574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028578:	83 ec 0c             	sub    esp,0xc
c002857b:	50                   	push   eax
c002857c:	e8 87 c1 fe ff       	call   c0014708 <InterruptController::~InterruptController()>
c0028581:	83 c4 10             	add    esp,0x10
c0028584:	90                   	nop
c0028585:	83 c4 0c             	add    esp,0xc
c0028588:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002858a <APIC::~APIC()>:
c002858a:	83 ec 0c             	sub    esp,0xc
c002858d:	83 ec 0c             	sub    esp,0xc
c0028590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028594:	e8 cd ff ff ff       	call   c0028566 <APIC::~APIC()>
c0028599:	83 c4 10             	add    esp,0x10
c002859c:	83 ec 08             	sub    esp,0x8
c002859f:	68 58 21 00 00       	push   0x2158
c00285a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285a8:	e8 66 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00285ad:	83 c4 10             	add    esp,0x10
c00285b0:	83 c4 0c             	add    esp,0xc
c00285b3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00285b4 <PIC::~PIC()>:
c00285b4:	83 ec 0c             	sub    esp,0xc
c00285b7:	ba 00 c5 02 c0       	mov    edx,0xc002c500
c00285bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c0:	89 10                	mov    DWORD PTR [eax],edx
c00285c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c6:	83 ec 0c             	sub    esp,0xc
c00285c9:	50                   	push   eax
c00285ca:	e8 39 c1 fe ff       	call   c0014708 <InterruptController::~InterruptController()>
c00285cf:	83 c4 10             	add    esp,0x10
c00285d2:	90                   	nop
c00285d3:	83 c4 0c             	add    esp,0xc
c00285d6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00285d8 <PIC::~PIC()>:
c00285d8:	83 ec 0c             	sub    esp,0xc
c00285db:	83 ec 0c             	sub    esp,0xc
c00285de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e2:	e8 cd ff ff ff       	call   c00285b4 <PIC::~PIC()>
c00285e7:	83 c4 10             	add    esp,0x10
c00285ea:	83 ec 08             	sub    esp,0x8
c00285ed:	68 58 21 00 00       	push   0x2158
c00285f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285f6:	e8 18 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00285fb:	83 c4 10             	add    esp,0x10
c00285fe:	83 c4 0c             	add    esp,0xc
c0028601:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028602 <APICTimer::~APICTimer()>:
c0028602:	83 ec 0c             	sub    esp,0xc
c0028605:	ba 54 c5 02 c0       	mov    edx,0xc002c554
c002860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860e:	89 10                	mov    DWORD PTR [eax],edx
c0028610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028614:	83 ec 0c             	sub    esp,0xc
c0028617:	50                   	push   eax
c0028618:	e8 8f df fe ff       	call   c00165ac <Timer::~Timer()>
c002861d:	83 c4 10             	add    esp,0x10
c0028620:	90                   	nop
c0028621:	83 c4 0c             	add    esp,0xc
c0028624:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028626 <APICTimer::~APICTimer()>:
c0028626:	83 ec 0c             	sub    esp,0xc
c0028629:	83 ec 0c             	sub    esp,0xc
c002862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028630:	e8 cd ff ff ff       	call   c0028602 <APICTimer::~APICTimer()>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	83 ec 08             	sub    esp,0x8
c002863b:	68 60 01 00 00       	push   0x160
c0028640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028644:	e8 ca a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028649:	83 c4 10             	add    esp,0x10
c002864c:	83 c4 0c             	add    esp,0xc
c002864f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028650 <PIT::~PIT()>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	ba a4 c5 02 c0       	mov    edx,0xc002c5a4
c0028658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865c:	89 10                	mov    DWORD PTR [eax],edx
c002865e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028662:	83 ec 0c             	sub    esp,0xc
c0028665:	50                   	push   eax
c0028666:	e8 41 df fe ff       	call   c00165ac <Timer::~Timer()>
c002866b:	83 c4 10             	add    esp,0x10
c002866e:	90                   	nop
c002866f:	83 c4 0c             	add    esp,0xc
c0028672:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028674 <PIT::~PIT()>:
c0028674:	83 ec 0c             	sub    esp,0xc
c0028677:	83 ec 0c             	sub    esp,0xc
c002867a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002867e:	e8 cd ff ff ff       	call   c0028650 <PIT::~PIT()>
c0028683:	83 c4 10             	add    esp,0x10
c0028686:	83 ec 08             	sub    esp,0x8
c0028689:	68 5c 01 00 00       	push   0x15c
c002868e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028692:	e8 7c a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028697:	83 c4 10             	add    esp,0x10
c002869a:	83 c4 0c             	add    esp,0xc
c002869d:	c3                   	ret    
