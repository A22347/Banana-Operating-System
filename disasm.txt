
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3b 78 00 00       	call   c000785b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 2c f5 01 c0       	mov    eax,0xc001f52c
c0000025:	3d 2c f5 01 c0       	cmp    eax,0xc001f52c
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 2c f5 01 c0       	push   0xc001f52c
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 2c f5 01 c0       	mov    eax,0xc001f52c
c0000051:	2d 2c f5 01 c0       	sub    eax,0xc001f52c
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 2c f5 01 c0       	push   0xc001f52c
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 60 f7 01 c0 00 	cmp    BYTE PTR ds:0xc001f760,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 c9 01 c0       	mov    ebx,0xc001c918
c0000097:	81 eb 14 c9 01 c0    	sub    ebx,0xc001c914
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 c9 01 c0       	mov    esi,0xc001c914
c00000a6:	a1 64 f7 01 c0       	mov    eax,ds:0xc001f764
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 64 f7 01 c0       	mov    ds:0xc001f764,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 64 f7 01 c0       	mov    eax,ds:0xc001f764
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 2c f5 01 c0       	push   0xc001f52c
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 60 f7 01 c0 01 	mov    BYTE PTR ds:0xc001f760,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 68 f7 01 c0       	push   0xc001f768
c0000108:	68 2c f5 01 c0       	push   0xc001f52c
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 f0 28 01 00       	call   c0012ba0 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 d4 9f 00 00       	call   c000a29c <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 ce 28 01 00       	call   c0012ba0 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 9f 2d 01 00       	call   c0013090 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 ee 33 01 00       	call   c00136e8 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 60 05 02 c0 	lgdtd  ds:0xc0020560
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 68 fd 00 00       	jmp    c00100ea <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 80 f7 01 c0       	mov    ds:0xc001f780,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 80 f7 01 c0    	mov    DWORD PTR ds:0xc001f780,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 80 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f780
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe36e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe36e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe36e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d a0 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7a0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d a0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 a4 f7 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe085c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 a4 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe085c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d a0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d dc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7dc
c0000d3d:	c7 42 0c d4 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f7d4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 dc f7 01 c0    	mov    DWORD PTR ds:0xc001f7dc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 cc f7 01 c0    	mov    DWORD PTR ds:0xc001f7cc,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 a0 f7 01 c0 02 	test   BYTE PTR ds:0xc001f7a0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 ba 68 00 00       	call   c00076d8 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 fc 67 00 00       	call   c00076d8 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 e6 67 00 00       	call   c00076d8 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 c2 67 00 00       	call   c00076d8 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d a0 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 a4 f7 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe085c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 a4 f7 01 c0 	mov    DWORD PTR [edx*4-0x3ffe085c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 d4 f7 01 c0 	lea    edx,[eax*8-0x3ffe082c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d e0 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f7e0
c00010bf:	81 fb d4 f7 01 c0    	cmp    ebx,0xc001f7d4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d d4 f7 01 c0       	cmp    eax,0xc001f7d4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 dc f7 01 c0       	mov    ds:0xc001f7dc,eax
c00010fb:	a3 e0 f7 01 c0       	mov    ds:0xc001f7e0,eax
c0001100:	a3 d0 f7 01 c0       	mov    ds:0xc001f7d0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 d4 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f7d4
c000110e:	c7 40 0c d4 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f7d4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 e0 f7 01 c0       	mov    ds:0xc001f7e0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 d4 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f7d4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 98 f7 01 c0 	lea    ebp,[edx*4-0x3ffe0868]
c000115f:	8b 14 95 a0 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0860]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 a0 f7 01 c0 	lea    ecx,[edx*4-0x3ffe0860]
c000117a:	8b 14 95 a0 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0860]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd d4 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe052c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 d4 f7 01 c0 	lea    eax,[eax*8-0x3ffe082c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d dc f7 01 c0    	mov    DWORD PTR ds:0xc001f7dc,ecx
c0001234:	89 0d e0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7e0,ecx
c000123a:	c7 41 08 d4 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f7d4
c0001241:	c7 41 0c d4 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f7d4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd cc f7 01 c0 	lea    edx,[ecx*8-0x3ffe0834]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d d4 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe052c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d d4 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe052c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 cc f7 01 c0 	lea    edx,[eax*4-0x3ffe0834]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d d4 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe052c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d dc f7 01 c0    	mov    DWORD PTR ds:0xc001f7dc,edi
c0001307:	89 3d e0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7e0,edi
c000130d:	c7 47 08 d4 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f7d4
c0001314:	c7 47 0c d4 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f7d4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d d0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7d0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 cc f7 01 c0       	mov    eax,ds:0xc001f7cc
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d cc f7 01 c0    	mov    DWORD PTR ds:0xc001f7cc,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d a0 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f7a0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d f4 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001faf4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 f4 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001faf4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d f4 fa 01 c0    	mov    DWORD PTR ds:0xc001faf4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d cc f7 01 c0    	mov    DWORD PTR ds:0xc001f7cc,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d a0 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f7a0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 fc fa 01 c0    	push   DWORD PTR ds:0xc001fafc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d a0 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f7a0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 fc fa 01 c0       	mov    eax,ds:0xc001fafc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d cc f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f7cc,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 cc f7 01 c0       	mov    eax,ds:0xc001f7cc
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 a4 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe085c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 d4 f7 01 c0       	mov    eax,0xc001f7d4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d cc fa 01 c0       	cmp    eax,0xc001facc
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 08 fb 01 c0       	mov    eax,ds:0xc001fb08
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 f0 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001faf0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 04 fb 01 c0    	mov    esi,DWORD PTR ds:0xc001fb04
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 14 fb 01 c0    	mov    esi,DWORD PTR ds:0xc001fb14
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe35dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 a0 f7 01 c0       	mov    eax,ds:0xc001f7a0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 a0 f7 01 c0       	mov    ds:0xc001f7a0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d e4 fa 01 c0    	mov    DWORD PTR ds:0xc001fae4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d e8 fa 01 c0    	mov    DWORD PTR ds:0xc001fae8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d ec fa 01 c0    	mov    DWORD PTR ds:0xc001faec,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 f4 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001faf4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 60 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc6a0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 8e 4d 01 00       	jmp    c0016a78 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 60 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc6a0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 bc 4d 01 00       	jmp    c0016abc <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 60 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc6a0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 e1 4d 01 00       	jmp    c0016b00 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3480]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3480]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 14 ea 01 c0       	mov    edx,0xc001ea14
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c ca 01 c0       	mov    edx,0xc001ca3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 40 fb 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe04c0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 20 fb 01 c0    	mov    ax,ds:0xc001fb20
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 20 fb 01 c0    	mov    ds:0xc001fb20,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 ca 01 c0       	mov    eax,0xc001ca42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3500]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b ca 01 c0       	mov    eax,0xc001ca4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3480]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 40 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe04c0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 40 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe04c0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 ca 01 c0       	mov    eax,0xc001cad0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 ca 01 c0       	mov    ebx,0xc001cac0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 ca 01 c0       	mov    edx,0xc001caa0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 ca 01 c0       	mov    edx,0xc001cab0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 ca 01 c0       	mov    edx,0xc001ca52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e ca 01 c0       	mov    edx,0xc001ca5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 ca 01 c0       	mov    edx,0xc001ca72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 86 1d 00 00       	call   c0007801 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 7e 1d 00 00       	call   c0007811 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cea0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cea0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 cc 01 c0       	mov    eax,0xc001cca0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 cb 01 c0       	mov    eax,0xc001cbe0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3460]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 c0 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0940]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 20 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe08e0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 70 fc 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0390],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 00 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f700
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 d5 13 01 00       	call   c0017354 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 54 05 02 c0 00 	cmp    DWORD PTR ds:0xc0020554,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 20 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe08e0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 54 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020554
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 cf 01 c0       	push   0xc001cfa0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 20 05 02 c0       	mov    ecx,0xc0020520
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf e0 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0420],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 e0 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0420],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 e4 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe041c],esi
c000634e:	89 87 e0 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0420],eax
c0006354:	c7 87 e8 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0418],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 70 fc 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0390],0x0
c0006370:	89 87 ec fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0414],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 e0 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0420],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd e0 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0420],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 70 fc 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0390]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 e8 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0418]
c00063e9:	8b 8d ec fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0414]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 e0 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0420]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 c0 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0940]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 e8 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0418]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d e8 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe0418],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d e0 fb 01 c0    	lea    ecx,[ebp-0x3ffe0420]
c00064e1:	83 bd e0 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0420],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 ec fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0414]
c000651f:	05 e0 fb 01 c0       	add    eax,0xc001fbe0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 e8 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0418]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb e0 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0420],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 70 fc 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0390],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 e8 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0418]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba e0 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0420],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 70 fc 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0390],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 ec fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0414]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 e0 fb 01 c0    	lea    esi,[eax-0x3ffe0420]
c00065e4:	83 b8 e0 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0420],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 20 f7 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe08e0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 e8 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0418]
c0006653:	81 c2 e0 fb 01 c0    	add    edx,0xc001fbe0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 20 f7 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe08e0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 f8 fb 01 c0    	lea    ebp,[eax-0x3ffe0408]
c00066b9:	83 3d 54 05 02 c0 00 	cmp    DWORD PTR ds:0xc0020554,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 f8 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0408],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 cf 01 c0       	push   0xc001cfa0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 f3 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe040d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 f0 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe0410],eax
c000678f:	89 91 f4 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe040c],edx
c0006795:	81 c1 e0 fb 01 c0    	add    ecx,0xc001fbe0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 f0 fb 01 c0       	add    eax,0xc001fbf0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	be 01 00 00 00       	mov    esi,0x1
c00067c6:	53                   	push   ebx
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	83 ec 0c             	sub    esp,0xc
c00067ce:	a2 00 f7 01 c0       	mov    ds:0xc001f700,al
c00067d3:	68 a3 cf 01 c0       	push   0xc001cfa3
c00067d8:	e8 d3 0b 01 00       	call   c00173b0 <iso_kprintf>
c00067dd:	e8 d0 ff ff ff       	call   c00067b2 <iso_reset>
c00067e2:	c7 05 54 05 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020554,0x0
c00067ec:	83 c4 10             	add    esp,0x10
c00067ef:	a1 4c 05 02 c0       	mov    eax,ds:0xc002054c
c00067f4:	8d 44 06 10          	lea    eax,[esi+eax*1+0x10]
c00067f8:	e8 ef f7 ff ff       	call   c0005fec <biread>
c00067fd:	89 c3                	mov    ebx,eax
c00067ff:	85 c0                	test   eax,eax
c0006801:	0f 88 f2 00 00 00    	js     c00068f9 <init_percd+0x13a>
c0006807:	8b 04 85 20 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe08e0]
c000680e:	83 c0 04             	add    eax,0x4
c0006811:	51                   	push   ecx
c0006812:	6a 06                	push   0x6
c0006814:	68 c1 cf 01 c0       	push   0xc001cfc1
c0006819:	50                   	push   eax
c000681a:	e8 71 9b ff ff       	call   c0000390 <memcmp>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	85 c0                	test   eax,eax
c0006824:	74 08                	je     c000682e <init_percd+0x6f>
c0006826:	46                   	inc    esi
c0006827:	83 fe 04             	cmp    esi,0x4
c000682a:	75 c3                	jne    c00067ef <init_percd+0x30>
c000682c:	eb 3b                	jmp    c0006869 <init_percd+0xaa>
c000682e:	8b 04 9d 20 f7 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe08e0]
c0006835:	83 c0 5c             	add    eax,0x5c
c0006838:	e8 a7 f5 ff ff       	call   c0005de4 <isjoliet>
c000683d:	83 ec 0c             	sub    esp,0xc
c0006840:	a3 54 05 02 c0       	mov    ds:0xc0020554,eax
c0006845:	68 c8 cf 01 c0       	push   0xc001cfc8
c000684a:	e8 61 0b 01 00       	call   c00173b0 <iso_kprintf>
c000684f:	5a                   	pop    edx
c0006850:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c0006856:	e8 75 0b 01 00       	call   c00173d0 <iso_kprintfd>
c000685b:	83 c4 10             	add    esp,0x10
c000685e:	83 3d 54 05 02 c0 00 	cmp    DWORD PTR ds:0xc0020554,0x0
c0006865:	74 bf                	je     c0006826 <init_percd+0x67>
c0006867:	eb 50                	jmp    c00068b9 <init_percd+0xfa>
c0006869:	83 3d 54 05 02 c0 00 	cmp    DWORD PTR ds:0xc0020554,0x0
c0006870:	75 47                	jne    c00068b9 <init_percd+0xfa>
c0006872:	a1 4c 05 02 c0       	mov    eax,ds:0xc002054c
c0006877:	83 c0 10             	add    eax,0x10
c000687a:	e8 6d f7 ff ff       	call   c0005fec <biread>
c000687f:	89 c3                	mov    ebx,eax
c0006881:	85 c0                	test   eax,eax
c0006883:	78 6f                	js     c00068f4 <init_percd+0x135>
c0006885:	50                   	push   eax
c0006886:	8b 04 9d 20 f7 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe08e0]
c000688d:	6a 06                	push   0x6
c000688f:	83 c0 04             	add    eax,0x4
c0006892:	68 e4 cf 01 c0       	push   0xc001cfe4
c0006897:	50                   	push   eax
c0006898:	e8 f3 9a ff ff       	call   c0000390 <memcmp>
c000689d:	83 c4 10             	add    esp,0x10
c00068a0:	85 c0                	test   eax,eax
c00068a2:	74 15                	je     c00068b9 <init_percd+0xfa>
c00068a4:	83 ec 0c             	sub    esp,0xc
c00068a7:	83 cb ff             	or     ebx,0xffffffff
c00068aa:	68 eb cf 01 c0       	push   0xc001cfeb
c00068af:	e8 fc 0a 01 00       	call   c00173b0 <iso_kprintf>
c00068b4:	83 c4 10             	add    esp,0x10
c00068b7:	eb 40                	jmp    c00068f9 <init_percd+0x13a>
c00068b9:	8b 34 9d 20 f7 01 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffe08e0]
c00068c0:	bf 20 05 02 c0       	mov    edi,0xc0020520
c00068c5:	81 c6 a0 00 00 00    	add    esi,0xa0
c00068cb:	b9 22 00 00 00       	mov    ecx,0x22
c00068d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068d2:	b8 22 05 02 c0       	mov    eax,0xc0020522
c00068d7:	31 db                	xor    ebx,ebx
c00068d9:	e8 35 f5 ff ff       	call   c0005e13 <iso_733>
c00068de:	a3 48 05 02 c0       	mov    ds:0xc0020548,eax
c00068e3:	b8 2a 05 02 c0       	mov    eax,0xc002052a
c00068e8:	e8 26 f5 ff ff       	call   c0005e13 <iso_733>
c00068ed:	a3 44 05 02 c0       	mov    ds:0xc0020544,eax
c00068f2:	eb 05                	jmp    c00068f9 <init_percd+0x13a>
c00068f4:	bb 04 00 00 00       	mov    ebx,0x4
c00068f9:	89 d8                	mov    eax,ebx
c00068fb:	5b                   	pop    ebx
c00068fc:	5e                   	pop    esi
c00068fd:	5f                   	pop    edi
c00068fe:	c3                   	ret    

c00068ff <iso_ioctl>:
c00068ff:	e8 ae fe ff ff       	call   c00067b2 <iso_reset>
c0006904:	31 c0                	xor    eax,eax
c0006906:	c3                   	ret    

c0006907 <fs_iso9660_init>:
c0006907:	53                   	push   ebx
c0006908:	31 db                	xor    ebx,ebx
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	68 40 09 00 00       	push   0x940
c0006912:	6a 00                	push   0x0
c0006914:	68 e0 fb 01 c0       	push   0xc001fbe0
c0006919:	e8 b2 9b ff ff       	call   c00004d0 <memset>
c000691e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006925:	c7 05 e0 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fbe0,0xffffffff
c000692f:	e8 cd 0e 00 00       	call   c0007801 <malloc>
c0006934:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000693b:	a3 50 05 02 c0       	mov    ds:0xc0020550,eax
c0006940:	e8 bc 0e 00 00       	call   c0007801 <malloc>
c0006945:	83 c4 10             	add    esp,0x10
c0006948:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c000694d:	83 ec 0c             	sub    esp,0xc
c0006950:	68 04 08 00 00       	push   0x804
c0006955:	e8 a7 0e 00 00       	call   c0007801 <malloc>
c000695a:	89 04 9d 20 f7 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe08e0],eax
c0006961:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006967:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c000696e:	e8 8e 0e 00 00       	call   c0007801 <malloc>
c0006973:	83 c4 10             	add    esp,0x10
c0006976:	89 04 9d c0 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0940],eax
c000697d:	43                   	inc    ebx
c000697e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006984:	83 fb 10             	cmp    ebx,0x10
c0006987:	75 c4                	jne    c000694d <fs_iso9660_init+0x46>
c0006989:	31 c0                	xor    eax,eax
c000698b:	83 c4 08             	add    esp,0x8
c000698e:	5b                   	pop    ebx
c000698f:	c3                   	ret    

c0006990 <fs_iso9660_shutdown>:
c0006990:	53                   	push   ebx
c0006991:	31 db                	xor    ebx,ebx
c0006993:	83 ec 08             	sub    esp,0x8
c0006996:	83 ec 0c             	sub    esp,0xc
c0006999:	ff 34 9d 20 f7 01 c0 	push   DWORD PTR [ebx*4-0x3ffe08e0]
c00069a0:	e8 6c 0e 00 00       	call   c0007811 <free>
c00069a5:	58                   	pop    eax
c00069a6:	ff 34 9d c0 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0940]
c00069ad:	43                   	inc    ebx
c00069ae:	e8 5e 0e 00 00       	call   c0007811 <free>
c00069b3:	83 c4 10             	add    esp,0x10
c00069b6:	83 fb 10             	cmp    ebx,0x10
c00069b9:	75 db                	jne    c0006996 <fs_iso9660_shutdown+0x6>
c00069bb:	a1 50 05 02 c0       	mov    eax,ds:0xc0020550
c00069c0:	85 c0                	test   eax,eax
c00069c2:	74 0c                	je     c00069d0 <fs_iso9660_shutdown+0x40>
c00069c4:	83 ec 0c             	sub    esp,0xc
c00069c7:	50                   	push   eax
c00069c8:	e8 44 0e 00 00       	call   c0007811 <free>
c00069cd:	83 c4 10             	add    esp,0x10
c00069d0:	a1 c0 fb 01 c0       	mov    eax,ds:0xc001fbc0
c00069d5:	85 c0                	test   eax,eax
c00069d7:	74 0c                	je     c00069e5 <fs_iso9660_shutdown+0x55>
c00069d9:	83 ec 0c             	sub    esp,0xc
c00069dc:	50                   	push   eax
c00069dd:	e8 2f 0e 00 00       	call   c0007811 <free>
c00069e2:	83 c4 10             	add    esp,0x10
c00069e5:	c7 05 c0 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fbc0,0x0
c00069ef:	c7 05 50 05 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020550,0x0
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 08             	add    esp,0x8
c00069fe:	5b                   	pop    ebx
c00069ff:	c3                   	ret    

c0006a00 <Computer::close(int, int, void*)>:
c0006a00:	57                   	push   edi
c0006a01:	56                   	push   esi
c0006a02:	53                   	push   ebx
c0006a03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a0f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a15:	83 ec 0c             	sub    esp,0xc
c0006a18:	50                   	push   eax
c0006a19:	e8 dc 4f 00 00       	call   c000b9fa <Device::closeAll()>
c0006a1e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a24:	83 c4 10             	add    esp,0x10
c0006a27:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a29:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a2d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a35:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a3d:	5b                   	pop    ebx
c0006a3e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a41:	5e                   	pop    esi
c0006a42:	5f                   	pop    edi
c0006a43:	ff e0                	jmp    eax

c0006a45 <Krnl::firstTask()>:
c0006a45:	53                   	push   ebx
c0006a46:	83 ec 14             	sub    esp,0x14
c0006a49:	fb                   	sti    
c0006a4a:	68 f9 cf 01 c0       	push   0xc001cff9
c0006a4f:	e8 33 90 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006a54:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a5b:	e8 a1 0d 00 00       	call   c0007801 <malloc>
c0006a60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a67:	89 c3                	mov    ebx,eax
c0006a69:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0006a6e:	50                   	push   eax
c0006a6f:	68 12 d0 01 c0       	push   0xc001d012
c0006a74:	6a 01                	push   0x1
c0006a76:	53                   	push   ebx
c0006a77:	e8 58 c4 00 00       	call   c0012ed4 <Process::Process(bool, char const*, Process*, char**)>
c0006a7c:	83 c4 20             	add    esp,0x20
c0006a7f:	68 ff 00 00 00       	push   0xff
c0006a84:	6a 00                	push   0x0
c0006a86:	68 55 72 00 c0       	push   0xc0007255
c0006a8b:	53                   	push   ebx
c0006a8c:	e8 4f c6 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c0006a91:	8b 15 30 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023830
c0006a97:	6a 7a                	push   0x7a
c0006a99:	6a 00                	push   0x0
c0006a9b:	68 34 3b 01 c0       	push   0xc0013b34
c0006aa0:	52                   	push   edx
c0006aa1:	e8 3a c6 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c0006aae:	68 10 d1 01 c0       	push   0xc001d110
c0006ab3:	c6 05 5d 05 02 c0 01 	mov    BYTE PTR ds:0xc002055d,0x1
c0006aba:	e8 c8 8f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006abf:	e8 4f d4 00 00       	call   c0013f13 <Vm::initialise8086()>
c0006ac4:	e8 75 3d 00 00       	call   c000a83e <Fs::initVFS()>
c0006ac9:	c7 04 24 1f d0 01 c0 	mov    DWORD PTR [esp],0xc001d01f
c0006ad0:	e8 b2 8f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006ad5:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0006ada:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ae2:	6a 00                	push   0x0
c0006ae4:	6a 00                	push   0x0
c0006ae6:	6a 00                	push   0x0
c0006ae8:	50                   	push   eax
c0006ae9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aec:	83 c4 14             	add    esp,0x14
c0006aef:	68 10 d1 01 c0       	push   0xc001d110
c0006af4:	e8 8e 8f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006af9:	e8 64 94 00 00       	call   c000ff62 <Krnl::loadSystemEnv()>
c0006afe:	e8 c1 96 00 00       	call   c00101c4 <Krnl::setupPowerManager()>
c0006b03:	83 c4 0c             	add    esp,0xc
c0006b06:	6a 3a                	push   0x3a
c0006b08:	68 39 d0 01 c0       	push   0xc001d039
c0006b0d:	68 42 d0 01 c0       	push   0xc001d042
c0006b12:	e8 ab a9 00 00       	call   c00114c2 <Reg::readIntWithDefault(char*, char*, int)>
c0006b17:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b1a:	e8 2d 48 00 00       	call   c000b34c <User::loadClockSettings(int)>
c0006b1f:	c7 04 24 34 d1 01 c0 	mov    DWORD PTR [esp],0xc001d134
c0006b26:	e8 5c 8f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006b2b:	59                   	pop    ecx
c0006b2c:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0006b31:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b37:	53                   	push   ebx
c0006b38:	e8 bb 4e 00 00       	call   c000b9f8 <Device::loadDriversForAll()>
c0006b3d:	c7 04 24 4a d0 01 c0 	mov    DWORD PTR [esp],0xc001d04a
c0006b44:	e8 3e 8f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006b49:	58                   	pop    eax
c0006b4a:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c0006b50:	5a                   	pop    edx
c0006b51:	6a 01                	push   0x1
c0006b53:	68 5b d0 01 c0       	push   0xc001d05b
c0006b58:	e8 b1 bd 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c0006b5d:	59                   	pop    ecx
c0006b5e:	5a                   	pop    edx
c0006b5f:	53                   	push   ebx
c0006b60:	50                   	push   eax
c0006b61:	e8 d9 bf 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c0006b66:	83 c4 10             	add    esp,0x10
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	6a 02                	push   0x2
c0006b6e:	e8 89 c9 00 00       	call   c00134fc <blockTask(TaskState)>
c0006b73:	83 c4 10             	add    esp,0x10
c0006b76:	eb f1                	jmp    c0006b69 <Krnl::firstTask()+0x124>

c0006b78 <Computer::Computer()>:
c0006b78:	83 ec 0c             	sub    esp,0xc
c0006b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7f:	83 ec 08             	sub    esp,0x8
c0006b82:	68 77 d0 01 c0       	push   0xc001d077
c0006b87:	50                   	push   eax
c0006b88:	e8 e7 4e 00 00       	call   c000ba74 <Device::Device(char const*)>
c0006b8d:	83 c4 10             	add    esp,0x10
c0006b90:	ba 80 d1 01 c0       	mov    edx,0xc001d180
c0006b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b99:	89 10                	mov    DWORD PTR [eax],edx
c0006b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bad:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bbb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006bc1:	83 ca 04             	or     edx,0x4
c0006bc4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bd4:	31 d2                	xor    edx,edx
c0006bd6:	88 c2                	mov    dl,al
c0006bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdc:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bed:	31 d2                	xor    edx,edx
c0006bef:	88 c2                	mov    dl,al
c0006bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c04:	8d 50 01             	lea    edx,[eax+0x1]
c0006c07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c0b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c11:	31 d2                	xor    edx,edx
c0006c13:	88 c2                	mov    dl,al
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c1d:	83 e1 3f             	and    ecx,0x3f
c0006c20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c24:	90                   	nop
c0006c25:	83 c4 0c             	add    esp,0xc
c0006c28:	c3                   	ret    
c0006c29:	90                   	nop

c0006c2a <Computer::setBootMessage(char const*)>:
c0006c2a:	c3                   	ret    
c0006c2b:	90                   	nop

c0006c2c <Computer::detectFeatures()>:
c0006c2c:	55                   	push   ebp
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 1c             	sub    esp,0x1c
c0006c33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c37:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006c41:	e8 b3 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c4e:	0f 95 c2             	setne  dl
c0006c51:	83 e0 fd             	and    eax,0xfffffffd
c0006c54:	01 d2                	add    edx,edx
c0006c56:	09 d0                	or     eax,edx
c0006c58:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c5e:	a8 02                	test   al,0x2
c0006c60:	75 46                	jne    c0006ca8 <Computer::detectFeatures()+0x7c>
c0006c62:	f6 05 71 05 02 c0 04 	test   BYTE PTR ds:0xc0020571,0x4
c0006c69:	74 07                	je     c0006c72 <Computer::detectFeatures()+0x46>
c0006c6b:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c72:	e8 9f 4c 01 00       	call   c001b916 <x87Detect>
c0006c77:	83 e0 01             	and    eax,0x1
c0006c7a:	c1 e0 04             	shl    eax,0x4
c0006c7d:	88 c2                	mov    dl,al
c0006c7f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c85:	83 e0 ef             	and    eax,0xffffffef
c0006c88:	09 d0                	or     eax,edx
c0006c8a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c90:	a8 10                	test   al,0x10
c0006c92:	0f 85 2a 01 00 00    	jne    c0006dc2 <Computer::detectFeatures()+0x196>
c0006c98:	84 c0                	test   al,al
c0006c9a:	0f 88 45 01 00 00    	js     c0006de5 <Computer::detectFeatures()+0x1b9>
c0006ca0:	83 c4 1c             	add    esp,0x1c
c0006ca3:	5b                   	pop    ebx
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	5d                   	pop    ebp
c0006ca7:	c3                   	ret    
c0006ca8:	83 ec 0c             	sub    esp,0xc
c0006cab:	6a 20                	push   0x20
c0006cad:	e8 02 83 00 00       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb2:	83 e0 01             	and    eax,0x1
c0006cb5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006cbc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc2:	83 e0 f7             	and    eax,0xfffffff7
c0006cc5:	09 d0                	or     eax,edx
c0006cc7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ccd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006cd4:	e8 db 82 00 00       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd9:	83 e0 01             	and    eax,0x1
c0006cdc:	88 c2                	mov    dl,al
c0006cde:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006ce4:	83 e0 fe             	and    eax,0xfffffffe
c0006ce7:	09 d0                	or     eax,edx
c0006ce9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006cef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cf6:	e8 b9 82 00 00       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cfb:	c1 e0 07             	shl    eax,0x7
c0006cfe:	88 c2                	mov    dl,al
c0006d00:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d06:	83 e0 7f             	and    eax,0x7f
c0006d09:	09 d0                	or     eax,edx
c0006d0b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d11:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d18:	e8 97 82 00 00       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006d1d:	83 c4 10             	add    esp,0x10
c0006d20:	83 e0 01             	and    eax,0x1
c0006d23:	c1 e0 05             	shl    eax,0x5
c0006d26:	88 c2                	mov    dl,al
c0006d28:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d2e:	83 e0 df             	and    eax,0xffffffdf
c0006d31:	09 d0                	or     eax,edx
c0006d33:	f7 05 70 05 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020570,0x401
c0006d3d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d43:	0f 84 c2 00 00 00    	je     c0006e0b <Computer::detectFeatures()+0x1df>
c0006d49:	83 e0 fe             	and    eax,0xfffffffe
c0006d4c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d52:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d58:	88 c2                	mov    dl,al
c0006d5a:	83 e2 09             	and    edx,0x9
c0006d5d:	fe ca                	dec    dl
c0006d5f:	75 09                	jne    c0006d6a <Computer::detectFeatures()+0x13e>
c0006d61:	83 e0 fe             	and    eax,0xfffffffe
c0006d64:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d6a:	83 ec 0c             	sub    esp,0xc
c0006d6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d71:	50                   	push   eax
c0006d72:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d76:	55                   	push   ebp
c0006d77:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d7b:	57                   	push   edi
c0006d7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d80:	56                   	push   esi
c0006d81:	68 00 00 00 80       	push   0x80000000
c0006d86:	e8 a5 81 00 00       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d8b:	83 c4 20             	add    esp,0x20
c0006d8e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d99:	0f 86 c3 fe ff ff    	jbe    c0006c62 <Computer::detectFeatures()+0x36>
c0006d9f:	83 ec 0c             	sub    esp,0xc
c0006da2:	50                   	push   eax
c0006da3:	55                   	push   ebp
c0006da4:	57                   	push   edi
c0006da5:	56                   	push   esi
c0006da6:	68 01 00 00 80       	push   0x80000001
c0006dab:	e8 80 81 00 00       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006db0:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006dba:	83 c4 20             	add    esp,0x20
c0006dbd:	e9 a0 fe ff ff       	jmp    c0006c62 <Computer::detectFeatures()+0x36>
c0006dc2:	e8 09 4b 01 00       	call   c001b8d0 <absolutelyNoChanceInHell>
c0006dc7:	88 c2                	mov    dl,al
c0006dc9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dcf:	c1 e2 07             	shl    edx,0x7
c0006dd2:	83 e0 7f             	and    eax,0x7f
c0006dd5:	09 d0                	or     eax,edx
c0006dd7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ddd:	84 c0                	test   al,al
c0006ddf:	0f 89 bb fe ff ff    	jns    c0006ca0 <Computer::detectFeatures()+0x74>
c0006de5:	e8 66 48 01 00       	call   c001b650 <avxDetect>
c0006dea:	83 e0 01             	and    eax,0x1
c0006ded:	c1 e0 05             	shl    eax,0x5
c0006df0:	88 c2                	mov    dl,al
c0006df2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006df8:	83 e0 df             	and    eax,0xffffffdf
c0006dfb:	09 d0                	or     eax,edx
c0006dfd:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e03:	83 c4 1c             	add    esp,0x1c
c0006e06:	5b                   	pop    ebx
c0006e07:	5e                   	pop    esi
c0006e08:	5f                   	pop    edi
c0006e09:	5d                   	pop    ebp
c0006e0a:	c3                   	ret    
c0006e0b:	83 ec 0c             	sub    esp,0xc
c0006e0e:	68 00 02 00 00       	push   0x200
c0006e13:	e8 9c 81 00 00       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006e18:	83 c4 10             	add    esp,0x10
c0006e1b:	83 e0 01             	and    eax,0x1
c0006e1e:	88 c2                	mov    dl,al
c0006e20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e26:	83 e0 fe             	and    eax,0xfffffffe
c0006e29:	09 d0                	or     eax,edx
c0006e2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e31:	e9 1c ff ff ff       	jmp    c0006d52 <Computer::detectFeatures()+0x126>

c0006e36 <Computer::displayFeatures()>:
c0006e36:	c3                   	ret    
c0006e37:	90                   	nop

c0006e38 <Computer::rdmsr(unsigned int)>:
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e46:	74 0a                	je     c0006e52 <Computer::rdmsr(unsigned int)+0x1a>
c0006e48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e4c:	0f 32                	rdmsr  
c0006e4e:	83 c4 0c             	add    esp,0xc
c0006e51:	c3                   	ret    
c0006e52:	83 ec 0c             	sub    esp,0xc
c0006e55:	68 80 d0 01 c0       	push   0xc001d080
c0006e5a:	e8 a0 92 00 00       	call   c00100ff <KePanic(char const*)>
c0006e5f:	83 c4 10             	add    esp,0x10
c0006e62:	eb e4                	jmp    c0006e48 <Computer::rdmsr(unsigned int)+0x10>

c0006e64 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e64:	57                   	push   edi
c0006e65:	56                   	push   esi
c0006e66:	52                   	push   edx
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e73:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e7a:	74 0e                	je     c0006e8a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e80:	89 f0                	mov    eax,esi
c0006e82:	89 fa                	mov    edx,edi
c0006e84:	0f 30                	wrmsr  
c0006e86:	58                   	pop    eax
c0006e87:	5e                   	pop    esi
c0006e88:	5f                   	pop    edi
c0006e89:	c3                   	ret    
c0006e8a:	83 ec 0c             	sub    esp,0xc
c0006e8d:	68 86 d0 01 c0       	push   0xc001d086
c0006e92:	e8 68 92 00 00       	call   c00100ff <KePanic(char const*)>
c0006e97:	83 c4 10             	add    esp,0x10
c0006e9a:	eb e0                	jmp    c0006e7c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e9c <Computer::shutdown()>:
c0006e9c:	83 ec 0c             	sub    esp,0xc
c0006e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea3:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ea5:	6a 00                	push   0x0
c0006ea7:	6a 00                	push   0x0
c0006ea9:	6a 00                	push   0x0
c0006eab:	50                   	push   eax
c0006eac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006eaf:	83 c4 1c             	add    esp,0x1c
c0006eb2:	c3                   	ret    
c0006eb3:	90                   	nop

c0006eb4 <Computer::restart()>:
c0006eb4:	83 ec 0c             	sub    esp,0xc
c0006eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ebb:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ebd:	6a 00                	push   0x0
c0006ebf:	6a 00                	push   0x0
c0006ec1:	6a 01                	push   0x1
c0006ec3:	50                   	push   eax
c0006ec4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ec7:	83 c4 1c             	add    esp,0x1c
c0006eca:	c3                   	ret    
c0006ecb:	90                   	nop

c0006ecc <Computer::sleep()>:
c0006ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ed0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006eda:	e9 4d 7b 00 00       	jmp    c000ea2c <ACPI::sleep()>
c0006edf:	90                   	nop

c0006ee0 <Computer::nmiEnabled()>:
c0006ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ee4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006eea:	c3                   	ret    
c0006eeb:	90                   	nop

c0006eec <Computer::readCMOS(unsigned char)>:
c0006eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ef0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006ef7:	19 c0                	sbb    eax,eax
c0006ef9:	83 e0 80             	and    eax,0xffffff80
c0006efc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f00:	e6 70                	out    0x70,al
c0006f02:	e4 71                	in     al,0x71
c0006f04:	c3                   	ret    
c0006f05:	90                   	nop

c0006f06 <Computer::enableNMI(bool)>:
c0006f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f1c:	eb ce                	jmp    c0006eec <Computer::readCMOS(unsigned char)>

c0006f1e <Computer::open(int, int, void*)>:
c0006f1e:	56                   	push   esi
c0006f1f:	53                   	push   ebx
c0006f20:	83 ec 10             	sub    esp,0x10
c0006f23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f27:	f6 05 70 05 02 c0 04 	test   BYTE PTR ds:0xc0020570,0x4
c0006f2e:	68 8c d0 01 c0       	push   0xc001d08c
c0006f33:	0f 94 05 00 f2 01 c0 	sete   BYTE PTR ds:0xc001f200
c0006f3a:	e8 48 8b 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006f3f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f46:	e8 b6 08 00 00       	call   c0007801 <malloc>
c0006f4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4e:	89 c6                	mov    esi,eax
c0006f50:	e8 6f 76 00 00       	call   c000e5c4 <ACPI::ACPI()>
c0006f55:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f5b:	58                   	pop    eax
c0006f5c:	5a                   	pop    edx
c0006f5d:	56                   	push   esi
c0006f5e:	53                   	push   ebx
c0006f5f:	e8 78 49 00 00       	call   c000b8dc <Device::addChild(Device*)>
c0006f64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f67:	e8 c0 fc ff ff       	call   c0006c2c <Computer::detectFeatures()>
c0006f6c:	59                   	pop    ecx
c0006f6d:	5e                   	pop    esi
c0006f6e:	6a 01                	push   0x1
c0006f70:	53                   	push   ebx
c0006f71:	e8 90 ff ff ff       	call   c0006f06 <Computer::enableNMI(bool)>
c0006f76:	c7 04 24 a4 d0 01 c0 	mov    DWORD PTR [esp],0xc001d0a4
c0006f7d:	e8 05 8b 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006f82:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f89:	e8 73 08 00 00       	call   c0007801 <malloc>
c0006f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f91:	89 c6                	mov    esi,eax
c0006f93:	e8 d4 80 00 00       	call   c000f06c <CPU::CPU()>
c0006f98:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f9e:	58                   	pop    eax
c0006f9f:	5a                   	pop    edx
c0006fa0:	56                   	push   esi
c0006fa1:	53                   	push   ebx
c0006fa2:	e8 35 49 00 00       	call   c000b8dc <Device::addChild(Device*)>
c0006fa7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006fad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0006fb3:	51                   	push   ecx
c0006fb4:	6a 00                	push   0x0
c0006fb6:	6a 00                	push   0x0
c0006fb8:	50                   	push   eax
c0006fb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006fbc:	83 c4 14             	add    esp,0x14
c0006fbf:	68 54 d1 01 c0       	push   0xc001d154
c0006fc4:	e8 be 8a 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006fc9:	e8 7c e0 00 00       	call   c001504a <HalInitialiseCoprocessor()>
c0006fce:	c7 04 24 be d0 01 c0 	mov    DWORD PTR [esp],0xc001d0be
c0006fd5:	e8 ad 8a 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c0006fda:	c7 04 24 45 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a45
c0006fe1:	e8 12 c2 00 00       	call   c00131f8 <setupMultitasking(void (*)())>
c0006fe6:	83 c4 14             	add    esp,0x14
c0006fe9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fee:	5b                   	pop    ebx
c0006fef:	5e                   	pop    esi
c0006ff0:	c3                   	ret    
c0006ff1:	90                   	nop

c0006ff2 <Computer::disableNMI()>:
c0006ff2:	6a 00                	push   0x0
c0006ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ff8:	50                   	push   eax
c0006ff9:	e8 08 ff ff ff       	call   c0006f06 <Computer::enableNMI(bool)>
c0006ffe:	5a                   	pop    edx
c0006fff:	59                   	pop    ecx
c0007000:	c3                   	ret    
c0007001:	90                   	nop

c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007006:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000700d:	19 c0                	sbb    eax,eax
c000700f:	83 e0 80             	and    eax,0xffffff80
c0007012:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007016:	e6 70                	out    0x70,al
c0007018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000701c:	e6 71                	out    0x71,al
c000701e:	c3                   	ret    
c000701f:	90                   	nop

c0007020 <Computer::handleNMI()>:
c0007020:	56                   	push   esi
c0007021:	53                   	push   ebx
c0007022:	83 ec 10             	sub    esp,0x10
c0007025:	e4 92                	in     al,0x92
c0007027:	89 c6                	mov    esi,eax
c0007029:	e4 61                	in     al,0x61
c000702b:	68 d9 d0 01 c0       	push   0xc001d0d9
c0007030:	88 c3                	mov    bl,al
c0007032:	e8 65 34 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0007037:	83 c4 10             	add    esp,0x10
c000703a:	83 e6 10             	and    esi,0x10
c000703d:	75 0d                	jne    c000704c <Computer::handleNMI()+0x2c>
c000703f:	f6 c3 40             	test   bl,0x40
c0007042:	75 1d                	jne    c0007061 <Computer::handleNMI()+0x41>
c0007044:	84 db                	test   bl,bl
c0007046:	78 2d                	js     c0007075 <Computer::handleNMI()+0x55>
c0007048:	58                   	pop    eax
c0007049:	5b                   	pop    ebx
c000704a:	5e                   	pop    esi
c000704b:	c3                   	ret    
c000704c:	83 ec 0c             	sub    esp,0xc
c000704f:	68 ea d0 01 c0       	push   0xc001d0ea
c0007054:	e8 a6 90 00 00       	call   c00100ff <KePanic(char const*)>
c0007059:	83 c4 10             	add    esp,0x10
c000705c:	f6 c3 40             	test   bl,0x40
c000705f:	74 e3                	je     c0007044 <Computer::handleNMI()+0x24>
c0007061:	83 ec 0c             	sub    esp,0xc
c0007064:	68 f7 d0 01 c0       	push   0xc001d0f7
c0007069:	e8 91 90 00 00       	call   c00100ff <KePanic(char const*)>
c000706e:	83 c4 10             	add    esp,0x10
c0007071:	84 db                	test   bl,bl
c0007073:	79 d3                	jns    c0007048 <Computer::handleNMI()+0x28>
c0007075:	c7 44 24 10 01 d1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d101
c000707d:	5a                   	pop    edx
c000707e:	5b                   	pop    ebx
c000707f:	5e                   	pop    esi
c0007080:	e9 7a 90 00 00       	jmp    c00100ff <KePanic(char const*)>
c0007085:	90                   	nop

c0007086 <GDTEntry::setBase(unsigned int)>:
c0007086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000708e:	89 c1                	mov    ecx,eax
c0007090:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007094:	c1 e9 10             	shr    ecx,0x10
c0007097:	c1 e8 18             	shr    eax,0x18
c000709a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000709d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00070a0:	c3                   	ret    
c00070a1:	90                   	nop

c00070a2 <GDTEntry::setLimit(unsigned int)>:
c00070a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00070a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070aa:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00070ad:	66 89 01             	mov    WORD PTR [ecx],ax
c00070b0:	83 e2 f0             	and    edx,0xfffffff0
c00070b3:	c1 e8 10             	shr    eax,0x10
c00070b6:	83 e0 0f             	and    eax,0xf
c00070b9:	09 d0                	or     eax,edx
c00070bb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <GDT::GDT()>:
c00070c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070d4:	90                   	nop
c00070d5:	c3                   	ret    

c00070d6 <GDT::addEntry(GDTEntry)>:
c00070d6:	53                   	push   ebx
c00070d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070df:	8b 02                	mov    eax,DWORD PTR [edx]
c00070e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00070e5:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070e9:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00070f0:	c1 e0 03             	shl    eax,0x3
c00070f3:	89 0a                	mov    DWORD PTR [edx],ecx
c00070f5:	5b                   	pop    ebx
c00070f6:	c3                   	ret    
c00070f7:	90                   	nop

c00070f8 <GDT::getNumberOfEntries()>:
c00070f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00070fe:	c3                   	ret    
c00070ff:	90                   	nop

c0007100 <GDT::flush()>:
c0007100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007104:	8b 10                	mov    edx,DWORD PTR [eax]
c0007106:	83 c0 04             	add    eax,0x4
c0007109:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007110:	a3 62 05 02 c0       	mov    ds:0xc0020562,eax
c0007115:	66 89 15 60 05 02 c0 	mov    WORD PTR ds:0xc0020560,dx
c000711c:	e9 3c 92 ff ff       	jmp    c000035d <loadGDT>
c0007121:	90                   	nop

c0007122 <GDT::setup()>:
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	83 ec 30             	sub    esp,0x30
c0007128:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000712c:	6a 00                	push   0x0
c000712e:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007132:	56                   	push   esi
c0007133:	e8 4e ff ff ff       	call   c0007086 <GDTEntry::setBase(unsigned int)>
c0007138:	6a 00                	push   0x0
c000713a:	56                   	push   esi
c000713b:	e8 62 ff ff ff       	call   c00070a2 <GDTEntry::setLimit(unsigned int)>
c0007140:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007148:	6a 00                	push   0x0
c000714a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000714e:	56                   	push   esi
c000714f:	e8 32 ff ff ff       	call   c0007086 <GDTEntry::setBase(unsigned int)>
c0007154:	68 ff ff ff 00       	push   0xffffff
c0007159:	56                   	push   esi
c000715a:	e8 43 ff ff ff       	call   c00070a2 <GDTEntry::setLimit(unsigned int)>
c000715f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007163:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007167:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000716b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000716f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007174:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007179:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000717d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007181:	89 f8                	mov    eax,edi
c0007183:	89 fa                	mov    edx,edi
c0007185:	80 e4 f7             	and    ah,0xf7
c0007188:	80 ce 60             	or     dh,0x60
c000718b:	89 c7                	mov    edi,eax
c000718d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007191:	80 cc 60             	or     ah,0x60
c0007194:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007198:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000719c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00071a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00071a4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00071a8:	83 c4 20             	add    esp,0x20
c00071ab:	6a 00                	push   0x0
c00071ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00071b1:	50                   	push   eax
c00071b2:	e8 cf fe ff ff       	call   c0007086 <GDTEntry::setBase(unsigned int)>
c00071b7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00071bb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00071bf:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00071c4:	6a 00                	push   0x0
c00071c6:	8d 44 24 34          	lea    eax,[esp+0x34]
c00071ca:	50                   	push   eax
c00071cb:	e8 b6 fe ff ff       	call   c0007086 <GDTEntry::setBase(unsigned int)>
c00071d0:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00071d5:	83 c4 0c             	add    esp,0xc
c00071d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e0:	53                   	push   ebx
c00071e1:	e8 f0 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c00071e6:	83 c4 0c             	add    esp,0xc
c00071e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071f1:	53                   	push   ebx
c00071f2:	e8 df fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c00071f7:	83 c4 0c             	add    esp,0xc
c00071fa:	57                   	push   edi
c00071fb:	56                   	push   esi
c00071fc:	53                   	push   ebx
c00071fd:	e8 d4 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0007202:	83 c4 0c             	add    esp,0xc
c0007205:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007209:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000720d:	53                   	push   ebx
c000720e:	e8 c3 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0007213:	83 c4 0c             	add    esp,0xc
c0007216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000721a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000721e:	53                   	push   ebx
c000721f:	e8 b2 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0007224:	83 c4 0c             	add    esp,0xc
c0007227:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000722b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000722f:	53                   	push   ebx
c0007230:	e8 a1 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000723c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007240:	53                   	push   ebx
c0007241:	e8 90 fe ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0007246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007249:	e8 b2 fe ff ff       	call   c0007100 <GDT::flush()>
c000724e:	83 c4 40             	add    esp,0x40
c0007251:	5b                   	pop    ebx
c0007252:	5e                   	pop    esi
c0007253:	5f                   	pop    edi
c0007254:	c3                   	ret    

c0007255 <idleFunction(void*)>:
c0007255:	83 ec 0c             	sub    esp,0xc
c0007258:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000725d:	48                   	dec    eax
c000725e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0007263:	75 01                	jne    c0007266 <idleFunction(void*)+0x11>
c0007265:	fb                   	sti    
c0007266:	e8 b9 da 00 00       	call   c0014d24 <HalSystemIdle()>
c000726b:	e8 62 4c 01 00       	call   c001bed2 <idleCommon()>
c0007270:	eb f4                	jmp    c0007266 <idleFunction(void*)+0x11>
c0007272:	66 90                	xchg   ax,ax

c0007274 <IDTEntry::IDTEntry(bool)>:
c0007274:	83 ec 04             	sub    esp,0x4
c0007277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000727b:	88 04 24             	mov    BYTE PTR [esp],al
c000727e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007282:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007294:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007297:	83 e2 f0             	and    edx,0xfffffff0
c000729a:	83 ca 0e             	or     edx,0xe
c000729d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072a7:	83 e2 ef             	and    edx,0xffffffef
c00072aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00072b1:	74 05                	je     c00072b8 <IDTEntry::IDTEntry(bool)+0x44>
c00072b3:	b2 03                	mov    dl,0x3
c00072b5:	eb 05                	jmp    c00072bc <IDTEntry::IDTEntry(bool)+0x48>
c00072b7:	90                   	nop
c00072b8:	b2 00                	mov    dl,0x0
c00072ba:	66 90                	xchg   ax,ax
c00072bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c0:	83 e2 03             	and    edx,0x3
c00072c3:	88 d1                	mov    cl,dl
c00072c5:	c1 e1 05             	shl    ecx,0x5
c00072c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072cb:	83 e2 9f             	and    edx,0xffffff9f
c00072ce:	09 ca                	or     edx,ecx
c00072d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072da:	83 ca 80             	or     edx,0xffffff80
c00072dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072e0:	90                   	nop
c00072e1:	83 c4 04             	add    esp,0x4
c00072e4:	c3                   	ret    
c00072e5:	90                   	nop

c00072e6 <IDTEntry::setOffset(unsigned int)>:
c00072e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ee:	66 89 02             	mov    WORD PTR [edx],ax
c00072f1:	c1 e8 10             	shr    eax,0x10
c00072f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072f8:	c3                   	ret    
c00072f9:	90                   	nop
c00072fa:	66 90                	xchg   ax,ax

c00072fc <IDT::IDT()>:
c00072fc:	90                   	nop
c00072fd:	c3                   	ret    

c00072fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007302:	83 c0 30             	add    eax,0x30
c0007305:	c3                   	ret    

c0007306 <IDT::addEntry(IDTEntry, int)>:
c0007306:	53                   	push   ebx
c0007307:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000730f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007313:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007317:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000731a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000731e:	5b                   	pop    ebx
c000731f:	c3                   	ret    

c0007320 <IDT::addEntry(int, void (*)(), bool)>:
c0007320:	53                   	push   ebx
c0007321:	83 ec 10             	sub    esp,0x10
c0007324:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007329:	50                   	push   eax
c000732a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000732e:	53                   	push   ebx
c000732f:	e8 40 ff ff ff       	call   c0007274 <IDTEntry::IDTEntry(bool)>
c0007334:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007338:	53                   	push   ebx
c0007339:	e8 a8 ff ff ff       	call   c00072e6 <IDTEntry::setOffset(unsigned int)>
c000733e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007342:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007346:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000734e:	e8 b3 ff ff ff       	call   c0007306 <IDT::addEntry(IDTEntry, int)>
c0007353:	83 c4 30             	add    esp,0x30
c0007356:	5b                   	pop    ebx
c0007357:	c3                   	ret    

c0007358 <IDT::flush()>:
c0007358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000735c:	66 c7 05 68 05 02 c0 ff 07 	mov    WORD PTR ds:0xc0020568,0x7ff
c0007365:	a3 6a 05 02 c0       	mov    ds:0xc002056a,eax
c000736a:	0f 01 1d 68 05 02 c0 	lidtd  ds:0xc0020568
c0007371:	c3                   	ret    

c0007372 <IDT::setup()>:
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	83 ec 10             	sub    esp,0x10
c0007378:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000737c:	6a 00                	push   0x0
c000737e:	68 e0 b6 01 c0       	push   0xc001b6e0
c0007383:	6a 00                	push   0x0
c0007385:	53                   	push   ebx
c0007386:	e8 95 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000738b:	6a 00                	push   0x0
c000738d:	68 f0 b6 01 c0       	push   0xc001b6f0
c0007392:	6a 01                	push   0x1
c0007394:	53                   	push   ebx
c0007395:	e8 86 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000739a:	83 c4 20             	add    esp,0x20
c000739d:	6a 00                	push   0x0
c000739f:	68 fa b6 01 c0       	push   0xc001b6fa
c00073a4:	6a 02                	push   0x2
c00073a6:	53                   	push   ebx
c00073a7:	e8 74 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073ac:	6a 00                	push   0x0
c00073ae:	68 04 b7 01 c0       	push   0xc001b704
c00073b3:	6a 03                	push   0x3
c00073b5:	53                   	push   ebx
c00073b6:	e8 65 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073bb:	83 c4 20             	add    esp,0x20
c00073be:	6a 00                	push   0x0
c00073c0:	68 0e b7 01 c0       	push   0xc001b70e
c00073c5:	6a 04                	push   0x4
c00073c7:	53                   	push   ebx
c00073c8:	e8 53 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073cd:	6a 00                	push   0x0
c00073cf:	68 18 b7 01 c0       	push   0xc001b718
c00073d4:	6a 05                	push   0x5
c00073d6:	53                   	push   ebx
c00073d7:	e8 44 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073dc:	83 c4 20             	add    esp,0x20
c00073df:	6a 00                	push   0x0
c00073e1:	68 22 b7 01 c0       	push   0xc001b722
c00073e6:	6a 06                	push   0x6
c00073e8:	53                   	push   ebx
c00073e9:	e8 32 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073ee:	6a 00                	push   0x0
c00073f0:	68 2c b7 01 c0       	push   0xc001b72c
c00073f5:	6a 07                	push   0x7
c00073f7:	53                   	push   ebx
c00073f8:	e8 23 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00073fd:	83 c4 20             	add    esp,0x20
c0007400:	6a 00                	push   0x0
c0007402:	68 36 b7 01 c0       	push   0xc001b736
c0007407:	6a 08                	push   0x8
c0007409:	53                   	push   ebx
c000740a:	e8 11 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000740f:	6a 00                	push   0x0
c0007411:	68 3e b7 01 c0       	push   0xc001b73e
c0007416:	6a 09                	push   0x9
c0007418:	53                   	push   ebx
c0007419:	e8 02 ff ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000741e:	83 c4 20             	add    esp,0x20
c0007421:	6a 00                	push   0x0
c0007423:	68 48 b7 01 c0       	push   0xc001b748
c0007428:	6a 0a                	push   0xa
c000742a:	53                   	push   ebx
c000742b:	e8 f0 fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007430:	6a 00                	push   0x0
c0007432:	68 50 b7 01 c0       	push   0xc001b750
c0007437:	6a 0b                	push   0xb
c0007439:	53                   	push   ebx
c000743a:	e8 e1 fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000743f:	83 c4 20             	add    esp,0x20
c0007442:	6a 00                	push   0x0
c0007444:	68 58 b7 01 c0       	push   0xc001b758
c0007449:	6a 0c                	push   0xc
c000744b:	53                   	push   ebx
c000744c:	e8 cf fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007451:	6a 00                	push   0x0
c0007453:	68 60 b7 01 c0       	push   0xc001b760
c0007458:	6a 0d                	push   0xd
c000745a:	53                   	push   ebx
c000745b:	e8 c0 fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007460:	83 c4 20             	add    esp,0x20
c0007463:	6a 00                	push   0x0
c0007465:	68 68 b7 01 c0       	push   0xc001b768
c000746a:	6a 0e                	push   0xe
c000746c:	53                   	push   ebx
c000746d:	e8 ae fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007472:	6a 00                	push   0x0
c0007474:	68 70 b7 01 c0       	push   0xc001b770
c0007479:	6a 0f                	push   0xf
c000747b:	53                   	push   ebx
c000747c:	e8 9f fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007481:	83 c4 20             	add    esp,0x20
c0007484:	6a 00                	push   0x0
c0007486:	68 7a b7 01 c0       	push   0xc001b77a
c000748b:	6a 10                	push   0x10
c000748d:	53                   	push   ebx
c000748e:	e8 8d fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007493:	6a 00                	push   0x0
c0007495:	68 84 b7 01 c0       	push   0xc001b784
c000749a:	6a 11                	push   0x11
c000749c:	53                   	push   ebx
c000749d:	e8 7e fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074a2:	83 c4 20             	add    esp,0x20
c00074a5:	6a 00                	push   0x0
c00074a7:	68 8e b7 01 c0       	push   0xc001b78e
c00074ac:	6a 12                	push   0x12
c00074ae:	53                   	push   ebx
c00074af:	e8 6c fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074b4:	6a 01                	push   0x1
c00074b6:	68 28 b8 01 c0       	push   0xc001b828
c00074bb:	6a 60                	push   0x60
c00074bd:	53                   	push   ebx
c00074be:	e8 5d fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074c3:	83 c4 20             	add    esp,0x20
c00074c6:	6a 00                	push   0x0
c00074c8:	68 2f b8 01 c0       	push   0xc001b82f
c00074cd:	6a 20                	push   0x20
c00074cf:	53                   	push   ebx
c00074d0:	e8 4b fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074d5:	6a 00                	push   0x0
c00074d7:	68 1a b8 01 c0       	push   0xc001b81a
c00074dc:	6a 21                	push   0x21
c00074de:	53                   	push   ebx
c00074df:	e8 3c fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074e4:	83 c4 20             	add    esp,0x20
c00074e7:	6a 00                	push   0x0
c00074e9:	68 21 b8 01 c0       	push   0xc001b821
c00074ee:	6a 22                	push   0x22
c00074f0:	53                   	push   ebx
c00074f1:	e8 2a fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00074f6:	6a 00                	push   0x0
c00074f8:	68 98 b7 01 c0       	push   0xc001b798
c00074fd:	6a 23                	push   0x23
c00074ff:	53                   	push   ebx
c0007500:	e8 1b fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007505:	83 c4 20             	add    esp,0x20
c0007508:	6a 00                	push   0x0
c000750a:	68 a2 b7 01 c0       	push   0xc001b7a2
c000750f:	6a 24                	push   0x24
c0007511:	53                   	push   ebx
c0007512:	e8 09 fe ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007517:	6a 00                	push   0x0
c0007519:	68 ac b7 01 c0       	push   0xc001b7ac
c000751e:	6a 25                	push   0x25
c0007520:	53                   	push   ebx
c0007521:	e8 fa fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007526:	83 c4 20             	add    esp,0x20
c0007529:	6a 00                	push   0x0
c000752b:	68 b6 b7 01 c0       	push   0xc001b7b6
c0007530:	6a 26                	push   0x26
c0007532:	53                   	push   ebx
c0007533:	e8 e8 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007538:	6a 00                	push   0x0
c000753a:	68 c0 b7 01 c0       	push   0xc001b7c0
c000753f:	6a 27                	push   0x27
c0007541:	53                   	push   ebx
c0007542:	e8 d9 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007547:	83 c4 20             	add    esp,0x20
c000754a:	6a 00                	push   0x0
c000754c:	68 ca b7 01 c0       	push   0xc001b7ca
c0007551:	6a 28                	push   0x28
c0007553:	53                   	push   ebx
c0007554:	e8 c7 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007559:	6a 00                	push   0x0
c000755b:	68 d4 b7 01 c0       	push   0xc001b7d4
c0007560:	6a 29                	push   0x29
c0007562:	53                   	push   ebx
c0007563:	e8 b8 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007568:	83 c4 20             	add    esp,0x20
c000756b:	6a 00                	push   0x0
c000756d:	68 de b7 01 c0       	push   0xc001b7de
c0007572:	6a 2a                	push   0x2a
c0007574:	53                   	push   ebx
c0007575:	e8 a6 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000757a:	6a 00                	push   0x0
c000757c:	68 e8 b7 01 c0       	push   0xc001b7e8
c0007581:	6a 2b                	push   0x2b
c0007583:	53                   	push   ebx
c0007584:	e8 97 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007589:	83 c4 20             	add    esp,0x20
c000758c:	6a 00                	push   0x0
c000758e:	68 f2 b7 01 c0       	push   0xc001b7f2
c0007593:	6a 2c                	push   0x2c
c0007595:	53                   	push   ebx
c0007596:	e8 85 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000759b:	6a 00                	push   0x0
c000759d:	68 fc b7 01 c0       	push   0xc001b7fc
c00075a2:	6a 2d                	push   0x2d
c00075a4:	53                   	push   ebx
c00075a5:	e8 76 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075aa:	83 c4 20             	add    esp,0x20
c00075ad:	6a 00                	push   0x0
c00075af:	68 06 b8 01 c0       	push   0xc001b806
c00075b4:	6a 2e                	push   0x2e
c00075b6:	53                   	push   ebx
c00075b7:	e8 64 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075bc:	6a 00                	push   0x0
c00075be:	68 10 b8 01 c0       	push   0xc001b810
c00075c3:	6a 2f                	push   0x2f
c00075c5:	53                   	push   ebx
c00075c6:	e8 55 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075cb:	83 c4 20             	add    esp,0x20
c00075ce:	6a 00                	push   0x0
c00075d0:	68 66 b8 01 c0       	push   0xc001b866
c00075d5:	6a 30                	push   0x30
c00075d7:	53                   	push   ebx
c00075d8:	e8 43 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075dd:	6a 00                	push   0x0
c00075df:	68 70 b8 01 c0       	push   0xc001b870
c00075e4:	6a 31                	push   0x31
c00075e6:	53                   	push   ebx
c00075e7:	e8 34 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075ec:	83 c4 20             	add    esp,0x20
c00075ef:	6a 00                	push   0x0
c00075f1:	68 7a b8 01 c0       	push   0xc001b87a
c00075f6:	6a 32                	push   0x32
c00075f8:	53                   	push   ebx
c00075f9:	e8 22 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c00075fe:	6a 00                	push   0x0
c0007600:	68 84 b8 01 c0       	push   0xc001b884
c0007605:	6a 33                	push   0x33
c0007607:	53                   	push   ebx
c0007608:	e8 13 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000760d:	83 c4 20             	add    esp,0x20
c0007610:	6a 00                	push   0x0
c0007612:	68 8e b8 01 c0       	push   0xc001b88e
c0007617:	6a 34                	push   0x34
c0007619:	53                   	push   ebx
c000761a:	e8 01 fd ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000761f:	6a 00                	push   0x0
c0007621:	68 98 b8 01 c0       	push   0xc001b898
c0007626:	6a 35                	push   0x35
c0007628:	53                   	push   ebx
c0007629:	e8 f2 fc ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000762e:	83 c4 20             	add    esp,0x20
c0007631:	6a 00                	push   0x0
c0007633:	68 a2 b8 01 c0       	push   0xc001b8a2
c0007638:	6a 36                	push   0x36
c000763a:	53                   	push   ebx
c000763b:	e8 e0 fc ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c0007640:	6a 00                	push   0x0
c0007642:	68 ac b8 01 c0       	push   0xc001b8ac
c0007647:	6a 37                	push   0x37
c0007649:	53                   	push   ebx
c000764a:	e8 d1 fc ff ff       	call   c0007320 <IDT::addEntry(int, void (*)(), bool)>
c000764f:	83 c4 1c             	add    esp,0x1c
c0007652:	6a 03                	push   0x3
c0007654:	6a 02                	push   0x2
c0007656:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c000765c:	e8 81 23 00 00       	call   c00099e2 <VAS::allocatePages(int, int)>
c0007661:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007668:	89 c6                	mov    esi,eax
c000766a:	e8 92 01 00 00       	call   c0007801 <malloc>
c000766f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007675:	89 04 24             	mov    DWORD PTR [esp],eax
c0007678:	89 c7                	mov    edi,eax
c000767a:	e8 0d 15 00 00       	call   c0008b8c <TSS::TSS()>
c000767f:	83 c4 0c             	add    esp,0xc
c0007682:	68 36 b7 01 c0       	push   0xc001b736
c0007687:	56                   	push   esi
c0007688:	57                   	push   edi
c0007689:	e8 42 15 00 00       	call   c0008bd0 <TSS::setup(unsigned long, unsigned long)>
c000768e:	89 c6                	mov    esi,eax
c0007690:	58                   	pop    eax
c0007691:	5a                   	pop    edx
c0007692:	6a 00                	push   0x0
c0007694:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007698:	50                   	push   eax
c0007699:	e8 d6 fb ff ff       	call   c0007274 <IDTEntry::IDTEntry(bool)>
c000769e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00076a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00076ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00076b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076b8:	80 ce 05             	or     dh,0x5
c00076bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00076be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00076c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00076cc:	e8 87 fc ff ff       	call   c0007358 <IDT::flush()>
c00076d1:	83 c4 20             	add    esp,0x20
c00076d4:	5b                   	pop    ebx
c00076d5:	5e                   	pop    esi
c00076d6:	5f                   	pop    edi
c00076d7:	c3                   	ret    

c00076d8 <sbrk>:
c00076d8:	55                   	push   ebp
c00076d9:	57                   	push   edi
c00076da:	56                   	push   esi
c00076db:	53                   	push   ebx
c00076dc:	83 ec 1c             	sub    esp,0x1c
c00076df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 5f                	je     c0007746 <sbrk+0x6e>
c00076e7:	78 64                	js     c000774d <sbrk+0x75>
c00076e9:	8b 15 ec f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f1ec
c00076ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076f3:	05 ff 0f 00 00       	add    eax,0xfff
c00076f8:	89 c5                	mov    ebp,eax
c00076fa:	78 69                	js     c0007765 <sbrk+0x8d>
c00076fc:	c1 fd 0c             	sar    ebp,0xc
c00076ff:	bb 00 00 00 00       	mov    ebx,0x0
c0007704:	8b 35 50 06 02 c0    	mov    esi,DWORD PTR ds:0xc0020650
c000770a:	8b 3d ec f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1ec
c0007710:	e8 c8 03 00 00       	call   c0007add <Phys::allocatePage()>
c0007715:	68 01 04 00 00       	push   0x401
c000771a:	57                   	push   edi
c000771b:	50                   	push   eax
c000771c:	56                   	push   esi
c000771d:	e8 bc 21 00 00       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0007722:	81 05 ec f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f1ec,0x1000
c000772c:	43                   	inc    ebx
c000772d:	83 c4 10             	add    esp,0x10
c0007730:	39 dd                	cmp    ebp,ebx
c0007732:	75 d0                	jne    c0007704 <sbrk+0x2c>
c0007734:	0f 20 d8             	mov    eax,cr3
c0007737:	0f 22 d8             	mov    cr3,eax
c000773a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000773e:	83 c4 1c             	add    esp,0x1c
c0007741:	5b                   	pop    ebx
c0007742:	5e                   	pop    esi
c0007743:	5f                   	pop    edi
c0007744:	5d                   	pop    ebp
c0007745:	c3                   	ret    
c0007746:	a1 ec f1 01 c0       	mov    eax,ds:0xc001f1ec
c000774b:	eb f1                	jmp    c000773e <sbrk+0x66>
c000774d:	83 ec 08             	sub    esp,0x8
c0007750:	50                   	push   eax
c0007751:	68 a4 d1 01 c0       	push   0xc001d1a4
c0007756:	e8 41 2d 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000775b:	83 c4 10             	add    esp,0x10
c000775e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007763:	eb d9                	jmp    c000773e <sbrk+0x66>
c0007765:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000776b:	eb 8f                	jmp    c00076fc <sbrk+0x24>

c000776d <mmap>:
c000776d:	83 ec 18             	sub    esp,0x18
c0007770:	68 d4 d1 01 c0       	push   0xc001d1d4
c0007775:	e8 85 89 00 00       	call   c00100ff <KePanic(char const*)>
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	83 c4 1c             	add    esp,0x1c
c0007782:	c3                   	ret    

c0007783 <munmap>:
c0007783:	83 ec 18             	sub    esp,0x18
c0007786:	68 d9 d1 01 c0       	push   0xc001d1d9
c000778b:	e8 6f 89 00 00       	call   c00100ff <KePanic(char const*)>
c0007790:	b8 00 00 00 00       	mov    eax,0x0
c0007795:	83 c4 1c             	add    esp,0x1c
c0007798:	c3                   	ret    

c0007799 <liballoc_lock()>:
c0007799:	fa                   	cli    
c000779a:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c00077a0:	b8 00 00 00 00       	mov    eax,0x0
c00077a5:	c3                   	ret    

c00077a6 <liballoc_unlock()>:
c00077a6:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00077ab:	48                   	dec    eax
c00077ac:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00077b1:	75 01                	jne    c00077b4 <liballoc_unlock()+0xe>
c00077b3:	fb                   	sti    
c00077b4:	b8 00 00 00 00       	mov    eax,0x0
c00077b9:	c3                   	ret    

c00077ba <liballoc_alloc(int)>:
c00077ba:	83 ec 10             	sub    esp,0x10
c00077bd:	6a 01                	push   0x1
c00077bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077c3:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c00077c9:	e8 14 22 00 00       	call   c00099e2 <VAS::allocatePages(int, int)>
c00077ce:	83 c4 1c             	add    esp,0x1c
c00077d1:	c3                   	ret    

c00077d2 <liballoc_free(void*, int)>:
c00077d2:	83 ec 14             	sub    esp,0x14
c00077d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077d9:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c00077df:	e8 ba 1e 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c00077e4:	b8 00 00 00 00       	mov    eax,0x0
c00077e9:	83 c4 1c             	add    esp,0x1c
c00077ec:	c3                   	ret    

c00077ed <realloc>:
c00077ed:	83 ec 14             	sub    esp,0x14
c00077f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f8:	e8 34 9d ff ff       	call   c0001531 <dlrealloc>
c00077fd:	83 c4 1c             	add    esp,0x1c
c0007800:	c3                   	ret    

c0007801 <malloc>:
c0007801:	83 ec 18             	sub    esp,0x18
c0007804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007808:	e8 e7 97 ff ff       	call   c0000ff4 <dlmalloc>
c000780d:	83 c4 1c             	add    esp,0x1c
c0007810:	c3                   	ret    

c0007811 <free>:
c0007811:	83 ec 18             	sub    esp,0x18
c0007814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007818:	e8 7c 94 ff ff       	call   c0000c99 <dlfree>
c000781d:	83 c4 1c             	add    esp,0x1c
c0007820:	c3                   	ret    

c0007821 <rfree>:
c0007821:	83 ec 18             	sub    esp,0x18
c0007824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007828:	e8 6c 94 ff ff       	call   c0000c99 <dlfree>
c000782d:	83 c4 1c             	add    esp,0x1c
c0007830:	c3                   	ret    

c0007831 <calloc>:
c0007831:	56                   	push   esi
c0007832:	53                   	push   ebx
c0007833:	83 ec 10             	sub    esp,0x10
c0007836:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000783a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000783f:	53                   	push   ebx
c0007840:	e8 bc ff ff ff       	call   c0007801 <malloc>
c0007845:	89 c6                	mov    esi,eax
c0007847:	83 c4 0c             	add    esp,0xc
c000784a:	53                   	push   ebx
c000784b:	6a 00                	push   0x0
c000784d:	50                   	push   eax
c000784e:	e8 7d 8c ff ff       	call   c00004d0 <memset>
c0007853:	89 f0                	mov    eax,esi
c0007855:	83 c4 14             	add    esp,0x14
c0007858:	5b                   	pop    ebx
c0007859:	5e                   	pop    esi
c000785a:	c3                   	ret    

c000785b <KeEntryPoint>:
c000785b:	57                   	push   edi
c000785c:	bf f9 03 00 00       	mov    edi,0x3f9
c0007861:	56                   	push   esi
c0007862:	89 fa                	mov    edx,edi
c0007864:	53                   	push   ebx
c0007865:	31 f6                	xor    esi,esi
c0007867:	83 ec 2c             	sub    esp,0x2c
c000786a:	a1 00 05 00 00       	mov    eax,ds:0x500
c000786f:	a3 70 05 02 c0       	mov    ds:0xc0020570,eax
c0007874:	89 f0                	mov    eax,esi
c0007876:	ee                   	out    dx,al
c0007877:	bb fb 03 00 00       	mov    ebx,0x3fb
c000787c:	b0 80                	mov    al,0x80
c000787e:	89 da                	mov    edx,ebx
c0007880:	ee                   	out    dx,al
c0007881:	b1 03                	mov    cl,0x3
c0007883:	ba f8 03 00 00       	mov    edx,0x3f8
c0007888:	88 c8                	mov    al,cl
c000788a:	ee                   	out    dx,al
c000788b:	89 f0                	mov    eax,esi
c000788d:	89 fa                	mov    edx,edi
c000788f:	ee                   	out    dx,al
c0007890:	88 c8                	mov    al,cl
c0007892:	89 da                	mov    edx,ebx
c0007894:	ee                   	out    dx,al
c0007895:	b0 c7                	mov    al,0xc7
c0007897:	ba fa 03 00 00       	mov    edx,0x3fa
c000789c:	ee                   	out    dx,al
c000789d:	b0 0b                	mov    al,0xb
c000789f:	ba fc 03 00 00       	mov    edx,0x3fc
c00078a4:	ee                   	out    dx,al
c00078a5:	68 e0 d1 01 c0       	push   0xc001d1e0
c00078aa:	e8 ed 2b 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c00078af:	e8 65 81 00 00       	call   c000fa19 <KeDisplaySplashScreen()>
c00078b4:	a1 24 05 00 00       	mov    eax,ds:0x524
c00078b9:	05 ff 0f 00 00       	add    eax,0xfff
c00078be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00078c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078c6:	e8 64 03 00 00       	call   c0007c2f <Phys::physicalMemorySetup(unsigned int)>
c00078cb:	e8 38 1b 00 00       	call   c0009408 <Virt::virtualMemorySetup()>
c00078d0:	58                   	pop    eax
c00078d1:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00078d5:	53                   	push   ebx
c00078d6:	e8 e9 1b 00 00       	call   c00094c4 <VAS::VAS()>
c00078db:	89 1d 50 06 02 c0    	mov    DWORD PTR ds:0xc0020650,ebx
c00078e1:	e8 84 45 01 00       	call   c001be6a <_init>
c00078e6:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078ed:	e8 0f ff ff ff       	call   c0007801 <malloc>
c00078f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078f5:	89 c6                	mov    esi,eax
c00078f7:	e8 7c f2 ff ff       	call   c0006b78 <Computer::Computer()>
c00078fc:	6a 00                	push   0x0
c00078fe:	89 35 58 05 02 c0    	mov    DWORD PTR ds:0xc0020558,esi
c0007904:	6a 00                	push   0x0
c0007906:	6a 00                	push   0x0
c0007908:	56                   	push   esi
c0007909:	e8 10 f6 ff ff       	call   c0006f1e <Computer::open(int, int, void*)>
c000790e:	83 c4 14             	add    esp,0x14
c0007911:	53                   	push   ebx
c0007912:	e8 63 1e 00 00       	call   c000977a <VAS::~VAS()>
c0007917:	83 c4 30             	add    esp,0x30
c000791a:	5b                   	pop    ebx
c000791b:	5e                   	pop    esi
c000791c:	5f                   	pop    edi
c000791d:	c3                   	ret    

c000791e <Phys::allocateDMA(unsigned long)>:
c000791e:	55                   	push   ebp
c000791f:	31 ed                	xor    ebp,ebp
c0007921:	57                   	push   edi
c0007922:	56                   	push   esi
c0007923:	53                   	push   ebx
c0007924:	31 db                	xor    ebx,ebx
c0007926:	83 ec 1c             	sub    esp,0x1c
c0007929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000792d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007935:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000793b:	31 c0                	xor    eax,eax
c000793d:	c1 ef 0c             	shr    edi,0xc
c0007940:	eb 19                	jmp    c000795b <Phys::allocateDMA(unsigned long)+0x3d>
c0007942:	85 c0                	test   eax,eax
c0007944:	75 06                	jne    c000794c <Phys::allocateDMA(unsigned long)+0x2e>
c0007946:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000794a:	89 dd                	mov    ebp,ebx
c000794c:	8d 70 01             	lea    esi,[eax+0x1]
c000794f:	39 f7                	cmp    edi,esi
c0007951:	74 33                	je     c0007986 <Phys::allocateDMA(unsigned long)+0x68>
c0007953:	89 f0                	mov    eax,esi
c0007955:	43                   	inc    ebx
c0007956:	83 fb 0f             	cmp    ebx,0xf
c0007959:	7f 11                	jg     c000796c <Phys::allocateDMA(unsigned long)+0x4e>
c000795b:	80 bb 8c 05 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfa74],0x0
c0007962:	74 de                	je     c0007942 <Phys::allocateDMA(unsigned long)+0x24>
c0007964:	31 c0                	xor    eax,eax
c0007966:	43                   	inc    ebx
c0007967:	83 fb 0f             	cmp    ebx,0xf
c000796a:	7e ef                	jle    c000795b <Phys::allocateDMA(unsigned long)+0x3d>
c000796c:	83 ec 0c             	sub    esp,0xc
c000796f:	68 f8 d1 01 c0       	push   0xc001d1f8
c0007974:	e8 86 87 00 00       	call   c00100ff <KePanic(char const*)>
c0007979:	83 c4 10             	add    esp,0x10
c000797c:	31 c0                	xor    eax,eax
c000797e:	83 c4 1c             	add    esp,0x1c
c0007981:	5b                   	pop    ebx
c0007982:	5e                   	pop    esi
c0007983:	5f                   	pop    edi
c0007984:	5d                   	pop    ebp
c0007985:	c3                   	ret    
c0007986:	89 e9                	mov    ecx,ebp
c0007988:	c1 f9 04             	sar    ecx,0x4
c000798b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000798f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007993:	89 ca                	mov    edx,ecx
c0007995:	4a                   	dec    edx
c0007996:	79 03                	jns    c000799b <Phys::allocateDMA(unsigned long)+0x7d>
c0007998:	8d 51 0e             	lea    edx,[ecx+0xe]
c000799b:	c1 fa 04             	sar    edx,0x4
c000799e:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00079a2:	74 08                	je     c00079ac <Phys::allocateDMA(unsigned long)+0x8e>
c00079a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00079a8:	31 c0                	xor    eax,eax
c00079aa:	eb ba                	jmp    c0007966 <Phys::allocateDMA(unsigned long)+0x48>
c00079ac:	85 f6                	test   esi,esi
c00079ae:	74 15                	je     c00079c5 <Phys::allocateDMA(unsigned long)+0xa7>
c00079b0:	8d 95 8c 05 02 c0    	lea    edx,[ebp-0x3ffdfa74]
c00079b6:	8d 84 05 8d 05 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfa73]
c00079bd:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00079c0:	42                   	inc    edx
c00079c1:	39 d0                	cmp    eax,edx
c00079c3:	75 f8                	jne    c00079bd <Phys::allocateDMA(unsigned long)+0x9f>
c00079c5:	01 3d 84 05 02 c0    	add    DWORD PTR ds:0xc0020584,edi
c00079cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079cf:	85 c0                	test   eax,eax
c00079d1:	74 17                	je     c00079ea <Phys::allocateDMA(unsigned long)+0xcc>
c00079d3:	83 ec 0c             	sub    esp,0xc
c00079d6:	68 f8 d1 01 c0       	push   0xc001d1f8
c00079db:	e8 1f 87 00 00       	call   c00100ff <KePanic(char const*)>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	89 f0                	mov    eax,esi
c00079e5:	e9 6b ff ff ff       	jmp    c0007955 <Phys::allocateDMA(unsigned long)+0x37>
c00079ea:	c1 e5 0c             	shl    ebp,0xc
c00079ed:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079f3:	eb 89                	jmp    c000797e <Phys::allocateDMA(unsigned long)+0x60>

c00079f5 <Phys::freeDMA(unsigned long, unsigned long)>:
c00079f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079f9:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a03:	c1 ea 0c             	shr    edx,0xc
c0007a06:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a0b:	29 15 84 05 02 c0    	sub    DWORD PTR ds:0xc0020584,edx
c0007a11:	c1 e8 0c             	shr    eax,0xc
c0007a14:	85 d2                	test   edx,edx
c0007a16:	74 0f                	je     c0007a27 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a18:	05 8c 05 02 c0       	add    eax,0xc002058c
c0007a1d:	01 c2                	add    edx,eax
c0007a1f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a22:	40                   	inc    eax
c0007a23:	39 d0                	cmp    eax,edx
c0007a25:	75 f8                	jne    c0007a1f <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a27:	c3                   	ret    

c0007a28 <Phys::setPageState(unsigned long, bool)>:
c0007a28:	56                   	push   esi
c0007a29:	ba 01 00 00 00       	mov    edx,0x1
c0007a2e:	53                   	push   ebx
c0007a2f:	8b 35 f0 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1f0
c0007a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a3d:	89 c8                	mov    eax,ecx
c0007a3f:	83 e1 07             	and    ecx,0x7
c0007a42:	c1 e8 03             	shr    eax,0x3
c0007a45:	d3 e3                	shl    ebx,cl
c0007a47:	01 c6                	add    esi,eax
c0007a49:	d3 e2                	shl    edx,cl
c0007a4b:	f7 d2                	not    edx
c0007a4d:	20 16                	and    BYTE PTR [esi],dl
c0007a4f:	03 05 f0 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1f0
c0007a55:	08 18                	or     BYTE PTR [eax],bl
c0007a57:	5b                   	pop    ebx
c0007a58:	5e                   	pop    esi
c0007a59:	c3                   	ret    

c0007a5a <Phys::getPageState(unsigned long)>:
c0007a5a:	53                   	push   ebx
c0007a5b:	8b 15 f0 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f1f0
c0007a61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a65:	31 db                	xor    ebx,ebx
c0007a67:	89 c8                	mov    eax,ecx
c0007a69:	83 e1 07             	and    ecx,0x7
c0007a6c:	c1 e8 03             	shr    eax,0x3
c0007a6f:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a72:	89 d8                	mov    eax,ebx
c0007a74:	5b                   	pop    ebx
c0007a75:	d3 f8                	sar    eax,cl
c0007a77:	83 e0 01             	and    eax,0x1
c0007a7a:	c3                   	ret    

c0007a7b <Phys::freePage(unsigned long)>:
c0007a7b:	53                   	push   ebx
c0007a7c:	83 ec 08             	sub    esp,0x8
c0007a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a83:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a89:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a8f:	76 3a                	jbe    c0007acb <Phys::freePage(unsigned long)+0x50>
c0007a91:	c1 e8 0c             	shr    eax,0xc
c0007a94:	50                   	push   eax
c0007a95:	89 c3                	mov    ebx,eax
c0007a97:	e8 be ff ff ff       	call   c0007a5a <Phys::getPageState(unsigned long)>
c0007a9c:	5a                   	pop    edx
c0007a9d:	84 c0                	test   al,al
c0007a9f:	74 19                	je     c0007aba <Phys::freePage(unsigned long)+0x3f>
c0007aa1:	83 ec 08             	sub    esp,0x8
c0007aa4:	ff 0d 84 05 02 c0    	dec    DWORD PTR ds:0xc0020584
c0007aaa:	6a 00                	push   0x0
c0007aac:	53                   	push   ebx
c0007aad:	e8 76 ff ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007ab2:	83 c4 10             	add    esp,0x10
c0007ab5:	83 c4 08             	add    esp,0x8
c0007ab8:	5b                   	pop    ebx
c0007ab9:	c3                   	ret    
c0007aba:	c7 44 24 10 9d d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d29d
c0007ac2:	83 c4 08             	add    esp,0x8
c0007ac5:	5b                   	pop    ebx
c0007ac6:	e9 34 86 00 00       	jmp    c00100ff <KePanic(char const*)>
c0007acb:	68 00 10 00 00       	push   0x1000
c0007ad0:	50                   	push   eax
c0007ad1:	e8 1f ff ff ff       	call   c00079f5 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ad6:	59                   	pop    ecx
c0007ad7:	5b                   	pop    ebx
c0007ad8:	83 c4 08             	add    esp,0x8
c0007adb:	5b                   	pop    ebx
c0007adc:	c3                   	ret    

c0007add <Phys::allocatePage()>:
c0007add:	56                   	push   esi
c0007ade:	53                   	push   ebx
c0007adf:	83 ec 14             	sub    esp,0x14
c0007ae2:	8b 35 78 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020578
c0007ae8:	89 f3                	mov    ebx,esi
c0007aea:	eb 0a                	jmp    c0007af6 <Phys::allocatePage()+0x19>
c0007aec:	89 1d 78 05 02 c0    	mov    DWORD PTR ds:0xc0020578,ebx
c0007af2:	39 de                	cmp    esi,ebx
c0007af4:	74 24                	je     c0007b1a <Phys::allocatePage()+0x3d>
c0007af6:	53                   	push   ebx
c0007af7:	e8 5e ff ff ff       	call   c0007a5a <Phys::getPageState(unsigned long)>
c0007afc:	5a                   	pop    edx
c0007afd:	84 c0                	test   al,al
c0007aff:	74 5f                	je     c0007b60 <Phys::allocatePage()+0x83>
c0007b01:	43                   	inc    ebx
c0007b02:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b08:	75 e2                	jne    c0007aec <Phys::allocatePage()+0xf>
c0007b0a:	31 db                	xor    ebx,ebx
c0007b0c:	c7 05 78 05 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020578,0x0
c0007b16:	39 de                	cmp    esi,ebx
c0007b18:	75 dc                	jne    c0007af6 <Phys::allocatePage()+0x19>
c0007b1a:	83 ec 0c             	sub    esp,0xc
c0007b1d:	80 35 9c 05 02 c0 01 	xor    BYTE PTR ds:0xc002059c,0x1
c0007b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b2c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b32:	50                   	push   eax
c0007b33:	e8 84 26 00 00       	call   c000a1bc <VAS::scanForEviction()>
c0007b38:	83 c4 10             	add    esp,0x10
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	75 3f                	jne    c0007b7e <Phys::allocatePage()+0xa1>
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	68 20 d2 01 c0       	push   0xc001d220
c0007b47:	e8 b3 85 00 00       	call   c00100ff <KePanic(char const*)>
c0007b4c:	83 c4 10             	add    esp,0x10
c0007b4f:	8b 1d 78 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020578
c0007b55:	53                   	push   ebx
c0007b56:	e8 ff fe ff ff       	call   c0007a5a <Phys::getPageState(unsigned long)>
c0007b5b:	5a                   	pop    edx
c0007b5c:	84 c0                	test   al,al
c0007b5e:	75 a1                	jne    c0007b01 <Phys::allocatePage()+0x24>
c0007b60:	6a 01                	push   0x1
c0007b62:	53                   	push   ebx
c0007b63:	e8 c0 fe ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007b68:	a1 78 05 02 c0       	mov    eax,ds:0xc0020578
c0007b6d:	5a                   	pop    edx
c0007b6e:	ff 05 84 05 02 c0    	inc    DWORD PTR ds:0xc0020584
c0007b74:	c1 e0 0c             	shl    eax,0xc
c0007b77:	59                   	pop    ecx
c0007b78:	83 c4 14             	add    esp,0x14
c0007b7b:	5b                   	pop    ebx
c0007b7c:	5e                   	pop    esi
c0007b7d:	c3                   	ret    
c0007b7e:	83 ec 08             	sub    esp,0x8
c0007b81:	89 c2                	mov    edx,eax
c0007b83:	6a 01                	push   0x1
c0007b85:	c1 ea 0c             	shr    edx,0xc
c0007b88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b8c:	52                   	push   edx
c0007b8d:	e8 96 fe ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007b92:	83 c4 10             	add    esp,0x10
c0007b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b99:	eb dd                	jmp    c0007b78 <Phys::allocatePage()+0x9b>

c0007b9b <Phys::allocateContiguousPages(int)>:
c0007b9b:	57                   	push   edi
c0007b9c:	56                   	push   esi
c0007b9d:	53                   	push   ebx
c0007b9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ba2:	fa                   	cli    
c0007ba3:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0007ba9:	31 db                	xor    ebx,ebx
c0007bab:	85 db                	test   ebx,ebx
c0007bad:	75 11                	jne    c0007bc0 <Phys::allocateContiguousPages(int)+0x25>
c0007baf:	e8 29 ff ff ff       	call   c0007add <Phys::allocatePage()>
c0007bb4:	83 fe 01             	cmp    esi,0x1
c0007bb7:	89 c7                	mov    edi,eax
c0007bb9:	74 21                	je     c0007bdc <Phys::allocateContiguousPages(int)+0x41>
c0007bbb:	bb 01 00 00 00       	mov    ebx,0x1
c0007bc0:	e8 18 ff ff ff       	call   c0007add <Phys::allocatePage()>
c0007bc5:	89 da                	mov    edx,ebx
c0007bc7:	c1 e2 0c             	shl    edx,0xc
c0007bca:	01 fa                	add    edx,edi
c0007bcc:	39 c2                	cmp    edx,eax
c0007bce:	74 20                	je     c0007bf0 <Phys::allocateContiguousPages(int)+0x55>
c0007bd0:	bb 01 00 00 00       	mov    ebx,0x1
c0007bd5:	89 c7                	mov    edi,eax
c0007bd7:	83 fe 01             	cmp    esi,0x1
c0007bda:	75 e4                	jne    c0007bc0 <Phys::allocateContiguousPages(int)+0x25>
c0007bdc:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0007be1:	48                   	dec    eax
c0007be2:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0007be7:	75 01                	jne    c0007bea <Phys::allocateContiguousPages(int)+0x4f>
c0007be9:	fb                   	sti    
c0007bea:	89 f8                	mov    eax,edi
c0007bec:	5b                   	pop    ebx
c0007bed:	5e                   	pop    esi
c0007bee:	5f                   	pop    edi
c0007bef:	c3                   	ret    
c0007bf0:	43                   	inc    ebx
c0007bf1:	39 f3                	cmp    ebx,esi
c0007bf3:	75 b6                	jne    c0007bab <Phys::allocateContiguousPages(int)+0x10>
c0007bf5:	eb e5                	jmp    c0007bdc <Phys::allocateContiguousPages(int)+0x41>

c0007bf7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007bf7:	56                   	push   esi
c0007bf8:	53                   	push   ebx
c0007bf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bfd:	39 1d 7c 05 02 c0    	cmp    DWORD PTR ds:0xc002057c,ebx
c0007c03:	73 06                	jae    c0007c0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c05:	89 1d 7c 05 02 c0    	mov    DWORD PTR ds:0xc002057c,ebx
c0007c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c0f:	c1 eb 0c             	shr    ebx,0xc
c0007c12:	c1 e8 0c             	shr    eax,0xc
c0007c15:	39 d8                	cmp    eax,ebx
c0007c17:	73 13                	jae    c0007c2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c19:	6a 00                	push   0x0
c0007c1b:	8d 70 01             	lea    esi,[eax+0x1]
c0007c1e:	50                   	push   eax
c0007c1f:	e8 04 fe ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007c24:	5a                   	pop    edx
c0007c25:	89 f0                	mov    eax,esi
c0007c27:	59                   	pop    ecx
c0007c28:	39 f3                	cmp    ebx,esi
c0007c2a:	75 ed                	jne    c0007c19 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c2c:	5b                   	pop    ebx
c0007c2d:	5e                   	pop    esi
c0007c2e:	c3                   	ret    

c0007c2f <Phys::physicalMemorySetup(unsigned int)>:
c0007c2f:	55                   	push   ebp
c0007c30:	57                   	push   edi
c0007c31:	56                   	push   esi
c0007c32:	53                   	push   ebx
c0007c33:	31 db                	xor    ebx,ebx
c0007c35:	83 ec 40             	sub    esp,0x40
c0007c38:	6a 10                	push   0x10
c0007c3a:	6a 00                	push   0x0
c0007c3c:	68 8c 05 02 c0       	push   0xc002058c
c0007c41:	e8 8a 88 ff ff       	call   c00004d0 <memset>
c0007c46:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c4f:	05 00 10 00 00       	add    eax,0x1000
c0007c54:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c58:	5a                   	pop    edx
c0007c59:	59                   	pop    ecx
c0007c5a:	50                   	push   eax
c0007c5b:	68 b3 d2 01 c0       	push   0xc001d2b3
c0007c60:	e8 37 28 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0007c65:	83 c4 10             	add    esp,0x10
c0007c68:	83 ec 08             	sub    esp,0x8
c0007c6b:	6a 01                	push   0x1
c0007c6d:	53                   	push   ebx
c0007c6e:	43                   	inc    ebx
c0007c6f:	e8 b4 fd ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007c74:	83 c4 10             	add    esp,0x10
c0007c77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c7d:	75 e9                	jne    c0007c68 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c7f:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c85:	66 85 c0             	test   ax,ax
c0007c88:	0f 84 97 01 00 00    	je     c0007e25 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c8e:	89 c7                	mov    edi,eax
c0007c90:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c98:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c9e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007ca3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007ca7:	eb 15                	jmp    c0007cbe <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007ca9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007cad:	83 c3 18             	add    ebx,0x18
c0007cb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cb4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007cb8:	0f 84 77 01 00 00    	je     c0007e35 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cbe:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007cc1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007cc4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007cc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ccb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007ccf:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007cd1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007cd4:	01 f0                	add    eax,esi
c0007cd6:	55                   	push   ebp
c0007cd7:	11 fa                	adc    edx,edi
c0007cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cdd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce5:	50                   	push   eax
c0007ce6:	56                   	push   esi
c0007ce7:	68 50 d2 01 c0       	push   0xc001d250
c0007cec:	e8 ab 27 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0007cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cf5:	83 c4 10             	add    esp,0x10
c0007cf8:	09 f8                	or     eax,edi
c0007cfa:	0f 85 35 01 00 00    	jne    c0007e35 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d00:	4d                   	dec    ebp
c0007d01:	75 a6                	jne    c0007ca9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d03:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d07:	ba 00 00 08 00       	mov    edx,0x80000
c0007d0c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d10:	39 f2                	cmp    edx,esi
c0007d12:	89 c1                	mov    ecx,eax
c0007d14:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d1c:	19 f9                	sbb    ecx,edi
c0007d1e:	0f 82 a7 00 00 00    	jb     c0007dcb <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d24:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d28:	89 c1                	mov    ecx,eax
c0007d2a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d2e:	0f 83 97 00 00 00    	jae    c0007dcb <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d34:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d39:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d41:	39 fa                	cmp    edx,edi
c0007d43:	19 e8                	sbb    eax,ebp
c0007d45:	0f 82 9a 01 00 00    	jb     c0007ee5 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d4b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d4f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d53:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d59:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d5e:	83 d5 ff             	adc    ebp,0xffffffff
c0007d61:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d65:	31 c0                	xor    eax,eax
c0007d67:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d6b:	39 fa                	cmp    edx,edi
c0007d6d:	89 c1                	mov    ecx,eax
c0007d6f:	19 e9                	sbb    ecx,ebp
c0007d71:	0f 83 32 ff ff ff    	jae    c0007ca9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d77:	be 00 00 08 00       	mov    esi,0x80000
c0007d7c:	51                   	push   ecx
c0007d7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d81:	57                   	push   edi
c0007d82:	56                   	push   esi
c0007d83:	68 74 d2 01 c0       	push   0xc001d274
c0007d88:	e8 0f 27 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0007d8d:	5d                   	pop    ebp
c0007d8e:	58                   	pop    eax
c0007d8f:	57                   	push   edi
c0007d90:	56                   	push   esi
c0007d91:	e8 61 fe ff ff       	call   c0007bf7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d96:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d9e:	83 c4 0c             	add    esp,0xc
c0007da1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007da5:	03 05 88 05 02 c0    	add    eax,DWORD PTR ds:0xc0020588
c0007dab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007db2:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c0007db7:	52                   	push   edx
c0007db8:	50                   	push   eax
c0007db9:	68 d9 d2 01 c0       	push   0xc001d2d9
c0007dbe:	e8 d9 26 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0007dc3:	83 c4 10             	add    esp,0x10
c0007dc6:	e9 de fe ff ff       	jmp    c0007ca9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dcb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007dcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007dd7:	39 ea                	cmp    edx,ebp
c0007dd9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007ddd:	0f 82 c6 fe ff ff    	jb     c0007ca9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007de3:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007de8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007dec:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007df0:	0f 83 b3 fe ff ff    	jae    c0007ca9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007df6:	39 ee                	cmp    esi,ebp
c0007df8:	89 f8                	mov    eax,edi
c0007dfa:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007dfe:	0f 83 78 ff ff ff    	jae    c0007d7c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e0c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e10:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e14:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e20:	e9 57 ff ff ff       	jmp    c0007d7c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e25:	83 ec 0c             	sub    esp,0xc
c0007e28:	68 cb d2 01 c0       	push   0xc001d2cb
c0007e2d:	e8 cd 82 00 00       	call   c00100ff <KePanic(char const*)>
c0007e32:	83 c4 10             	add    esp,0x10
c0007e35:	83 ec 08             	sub    esp,0x8
c0007e38:	bb 60 00 00 00       	mov    ebx,0x60
c0007e3d:	6a 00                	push   0x0
c0007e3f:	6a 06                	push   0x6
c0007e41:	e8 e2 fb ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007e46:	58                   	pop    eax
c0007e47:	5a                   	pop    edx
c0007e48:	6a 00                	push   0x0
c0007e4a:	6a 07                	push   0x7
c0007e4c:	e8 d7 fb ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007e51:	83 05 88 05 02 c0 02 	add    DWORD PTR ds:0xc0020588,0x2
c0007e58:	83 c4 10             	add    esp,0x10
c0007e5b:	83 ec 08             	sub    esp,0x8
c0007e5e:	6a 00                	push   0x0
c0007e60:	53                   	push   ebx
c0007e61:	43                   	inc    ebx
c0007e62:	e8 c1 fb ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007e67:	83 c4 10             	add    esp,0x10
c0007e6a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e70:	75 e9                	jne    c0007e5b <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e72:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c0007e77:	bb 40 01 00 00       	mov    ebx,0x140
c0007e7c:	83 c0 20             	add    eax,0x20
c0007e7f:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c0007e84:	eb 22                	jmp    c0007ea8 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e86:	83 ec 08             	sub    esp,0x8
c0007e89:	6a 00                	push   0x0
c0007e8b:	53                   	push   ebx
c0007e8c:	43                   	inc    ebx
c0007e8d:	e8 96 fb ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007e92:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	40                   	inc    eax
c0007e9b:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007ea1:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c0007ea6:	74 07                	je     c0007eaf <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007ea8:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007ead:	7e d7                	jle    c0007e86 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007eaf:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007eb4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007eb9:	7f 22                	jg     c0007edd <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007ebb:	83 ec 08             	sub    esp,0x8
c0007ebe:	6a 00                	push   0x0
c0007ec0:	53                   	push   ebx
c0007ec1:	43                   	inc    ebx
c0007ec2:	e8 61 fb ff ff       	call   c0007a28 <Phys::setPageState(unsigned long, bool)>
c0007ec7:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	40                   	inc    eax
c0007ed0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007ed6:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c0007edb:	75 d7                	jne    c0007eb4 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007edd:	83 c4 3c             	add    esp,0x3c
c0007ee0:	5b                   	pop    ebx
c0007ee1:	5e                   	pop    esi
c0007ee2:	5f                   	pop    edi
c0007ee3:	5d                   	pop    ebp
c0007ee4:	c3                   	ret    
c0007ee5:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007eed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ef5:	e9 51 fe ff ff       	jmp    c0007d4b <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007efa <Pipe::isAtty()>:
c0007efa:	31 c0                	xor    eax,eax
c0007efc:	c3                   	ret    
c0007efd:	90                   	nop

c0007efe <Pipe::~Pipe()>:
c0007efe:	83 ec 0c             	sub    esp,0xc
c0007f01:	ba 38 d3 01 c0       	mov    edx,0xc001d338
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	89 10                	mov    DWORD PTR [eax],edx
c0007f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f10:	83 ec 0c             	sub    esp,0xc
c0007f13:	50                   	push   eax
c0007f14:	e8 cf 10 00 00       	call   c0008fe8 <UnixFile::~UnixFile()>
c0007f19:	83 c4 10             	add    esp,0x10
c0007f1c:	90                   	nop
c0007f1d:	83 c4 0c             	add    esp,0xc
c0007f20:	c3                   	ret    
c0007f21:	90                   	nop

c0007f22 <Pipe::~Pipe()>:
c0007f22:	83 ec 0c             	sub    esp,0xc
c0007f25:	83 ec 0c             	sub    esp,0xc
c0007f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f2c:	e8 cd ff ff ff       	call   c0007efe <Pipe::~Pipe()>
c0007f31:	83 c4 10             	add    esp,0x10
c0007f34:	83 ec 08             	sub    esp,0x8
c0007f37:	6a 20                	push   0x20
c0007f39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f3d:	e8 64 24 00 00       	call   c000a3a6 <operator delete(void*, unsigned long)>
c0007f42:	83 c4 10             	add    esp,0x10
c0007f45:	83 c4 0c             	add    esp,0xc
c0007f48:	c3                   	ret    
c0007f49:	90                   	nop

c0007f4a <Pipe::write(unsigned long long, void*, int*)>:
c0007f4a:	55                   	push   ebp
c0007f4b:	57                   	push   edi
c0007f4c:	56                   	push   esi
c0007f4d:	53                   	push   ebx
c0007f4e:	83 ec 1c             	sub    esp,0x1c
c0007f51:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f59:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f5c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f60:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f67:	89 d8                	mov    eax,ebx
c0007f69:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f6c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f70:	89 d6                	mov    esi,edx
c0007f72:	89 d7                	mov    edi,edx
c0007f74:	c1 ff 1f             	sar    edi,0x1f
c0007f77:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f7a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f7e:	c1 f8 1f             	sar    eax,0x1f
c0007f81:	39 f3                	cmp    ebx,esi
c0007f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f8b:	19 f8                	sbb    eax,edi
c0007f8d:	b8 01 00 00 00       	mov    eax,0x1
c0007f92:	72 6e                	jb     c0008002 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f94:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f97:	01 d0                	add    eax,edx
c0007f99:	99                   	cdq    
c0007f9a:	f7 fb                	idiv   ebx
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	29 d3                	sub    ebx,edx
c0007fa2:	89 d7                	mov    edi,edx
c0007fa4:	89 de                	mov    esi,ebx
c0007fa6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007fa9:	c1 fb 1f             	sar    ebx,0x1f
c0007fac:	39 f2                	cmp    edx,esi
c0007fae:	19 d8                	sbb    eax,ebx
c0007fb0:	b8 00 00 00 00       	mov    eax,0x0
c0007fb5:	72 04                	jb     c0007fbb <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007fb7:	89 d0                	mov    eax,edx
c0007fb9:	29 f0                	sub    eax,esi
c0007fbb:	89 d3                	mov    ebx,edx
c0007fbd:	29 c3                	sub    ebx,eax
c0007fbf:	74 0b                	je     c0007fcc <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007fc1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007fc4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007fc8:	89 d9                	mov    ecx,ebx
c0007fca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fcc:	85 c0                	test   eax,eax
c0007fce:	74 0d                	je     c0007fdd <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007fd0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007fd4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007fd7:	89 de                	mov    esi,ebx
c0007fd9:	89 c1                	mov    ecx,eax
c0007fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fdd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007fe0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007fe5:	75 10                	jne    c0007ff7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007fe7:	83 ec 0c             	sub    esp,0xc
c0007fea:	68 f5 d2 01 c0       	push   0xc001d2f5
c0007fef:	e8 0b 81 00 00       	call   c00100ff <KePanic(char const*)>
c0007ff4:	83 c4 10             	add    esp,0x10
c0007ff7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ffb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ffe:	89 08                	mov    DWORD PTR [eax],ecx
c0008000:	31 c0                	xor    eax,eax
c0008002:	83 c4 1c             	add    esp,0x1c
c0008005:	5b                   	pop    ebx
c0008006:	5e                   	pop    esi
c0008007:	5f                   	pop    edi
c0008008:	5d                   	pop    ebp
c0008009:	c3                   	ret    

c000800a <Pipe::read(unsigned long long, void*, int*)>:
c000800a:	55                   	push   ebp
c000800b:	57                   	push   edi
c000800c:	56                   	push   esi
c000800d:	53                   	push   ebx
c000800e:	83 ec 1c             	sub    esp,0x1c
c0008011:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008015:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008019:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000801d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008020:	89 c8                	mov    eax,ecx
c0008022:	99                   	cdq    
c0008023:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008027:	74 24                	je     c000804d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008029:	39 f9                	cmp    ecx,edi
c000802b:	89 d1                	mov    ecx,edx
c000802d:	19 f1                	sbb    ecx,esi
c000802f:	73 1c                	jae    c000804d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008031:	fa                   	cli    
c0008032:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0008038:	e8 c3 b2 00 00       	call   c0013300 <schedule()>
c000803d:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0008042:	48                   	dec    eax
c0008043:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0008048:	75 d3                	jne    c000801d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000804a:	fb                   	sti    
c000804b:	eb d0                	jmp    c000801d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000804d:	39 f8                	cmp    eax,edi
c000804f:	89 d1                	mov    ecx,edx
c0008051:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008054:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008058:	19 f1                	sbb    ecx,esi
c000805a:	73 07                	jae    c0008063 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000805c:	89 04 24             	mov    DWORD PTR [esp],eax
c000805f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008063:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008066:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008069:	29 f7                	sub    edi,esi
c000806b:	89 f8                	mov    eax,edi
c000806d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008071:	99                   	cdq    
c0008072:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008075:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008079:	19 d0                	sbb    eax,edx
c000807b:	73 07                	jae    c0008084 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000807d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008080:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008084:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008087:	89 ea                	mov    edx,ebp
c0008089:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000808d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008092:	74 0d                	je     c00080a1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008094:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008097:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000809b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000809f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080a1:	85 d2                	test   edx,edx
c00080a3:	74 11                	je     c00080b6 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00080a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00080ac:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00080b0:	89 d1                	mov    ecx,edx
c00080b2:	89 c7                	mov    edi,eax
c00080b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00080b9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00080bc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00080bf:	99                   	cdq    
c00080c0:	89 f7                	mov    edi,esi
c00080c2:	03 04 24             	add    eax,DWORD PTR [esp]
c00080c5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00080c9:	c1 ff 1f             	sar    edi,0x1f
c00080cc:	57                   	push   edi
c00080cd:	56                   	push   esi
c00080ce:	52                   	push   edx
c00080cf:	50                   	push   eax
c00080d0:	e8 7b 3c 01 00       	call   c001bd50 <__umoddi3>
c00080d5:	83 c4 10             	add    esp,0x10
c00080d8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080db:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080e0:	75 10                	jne    c00080f2 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00080e2:	83 ec 0c             	sub    esp,0xc
c00080e5:	68 12 d3 01 c0       	push   0xc001d312
c00080ea:	e8 10 80 00 00       	call   c00100ff <KePanic(char const*)>
c00080ef:	83 c4 10             	add    esp,0x10
c00080f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080f9:	89 10                	mov    DWORD PTR [eax],edx
c00080fb:	83 c4 1c             	add    esp,0x1c
c00080fe:	31 c0                	xor    eax,eax
c0008100:	5b                   	pop    ebx
c0008101:	5e                   	pop    esi
c0008102:	5f                   	pop    edi
c0008103:	5d                   	pop    ebp
c0008104:	c3                   	ret    
c0008105:	90                   	nop

c0008106 <Pipe::Pipe(int)>:
c0008106:	83 ec 0c             	sub    esp,0xc
c0008109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000810d:	83 ec 08             	sub    esp,0x8
c0008110:	6a 00                	push   0x0
c0008112:	50                   	push   eax
c0008113:	e8 ee 0c 00 00       	call   c0008e06 <UnixFile::UnixFile(int)>
c0008118:	83 c4 10             	add    esp,0x10
c000811b:	ba 38 d3 01 c0       	mov    edx,0xc001d338
c0008120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008124:	89 10                	mov    DWORD PTR [eax],edx
c0008126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000812a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000812e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008135:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000813c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008140:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008147:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000814b:	83 ec 0c             	sub    esp,0xc
c000814e:	50                   	push   eax
c000814f:	e8 ad f6 ff ff       	call   c0007801 <malloc>
c0008154:	83 c4 10             	add    esp,0x10
c0008157:	89 c2                	mov    edx,eax
c0008159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000815d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008164:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008168:	90                   	nop
c0008169:	83 c4 0c             	add    esp,0xc
c000816c:	c3                   	ret    
c000816d:	90                   	nop

c000816e <VgaText::isAtty()>:
c000816e:	b0 01                	mov    al,0x1
c0008170:	c3                   	ret    
c0008171:	90                   	nop

c0008172 <VgaText::~VgaText()>:
c0008172:	83 ec 0c             	sub    esp,0xc
c0008175:	ba c0 d3 01 c0       	mov    edx,0xc001d3c0
c000817a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000817e:	89 10                	mov    DWORD PTR [eax],edx
c0008180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008184:	83 ec 0c             	sub    esp,0xc
c0008187:	50                   	push   eax
c0008188:	e8 5b 0e 00 00       	call   c0008fe8 <UnixFile::~UnixFile()>
c000818d:	83 c4 10             	add    esp,0x10
c0008190:	90                   	nop
c0008191:	83 c4 0c             	add    esp,0xc
c0008194:	c3                   	ret    
c0008195:	90                   	nop

c0008196 <VgaText::~VgaText()>:
c0008196:	83 ec 0c             	sub    esp,0xc
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081a0:	e8 cd ff ff ff       	call   c0008172 <VgaText::~VgaText()>
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	83 ec 08             	sub    esp,0x8
c00081ab:	68 34 01 00 00       	push   0x134
c00081b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081b4:	e8 ed 21 00 00       	call   c000a3a6 <operator delete(void*, unsigned long)>
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c4 0c             	add    esp,0xc
c00081bf:	c3                   	ret    

c00081c0 <VgaText::read(unsigned long long, void*, int*)>:
c00081c0:	83 ec 10             	sub    esp,0x10
c00081c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cf:	e8 22 45 00 00       	call   c000c6f6 <readKeyboard(VgaText*, char*, unsigned long)>
c00081d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081d8:	89 02                	mov    DWORD PTR [edx],eax
c00081da:	31 c0                	xor    eax,eax
c00081dc:	83 c4 1c             	add    esp,0x1c
c00081df:	c3                   	ret    

c00081e0 <setTerminalScrollLock(bool)>:
c00081e0:	c3                   	ret    

c00081e1 <doTerminalCycle()>:
c00081e1:	c3                   	ret    

c00081e2 <addToTerminalCycle(VgaText*)>:
c00081e2:	c3                   	ret    

c00081e3 <scrollTerminalScrollLock(int)>:
c00081e3:	c3                   	ret    

c00081e4 <VgaText::updateTitle()>:
c00081e4:	c3                   	ret    
c00081e5:	90                   	nop

c00081e6 <VgaText::load()>:
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <VgaText::updateCursor()>:
c00081e8:	83 ec 14             	sub    esp,0x14
c00081eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081ef:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081f2:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081f5:	e8 e2 dc 00 00       	call   c0015edc <HalConsoleCursorUpdate(int, int)>
c00081fa:	83 c4 1c             	add    esp,0x1c
c00081fd:	c3                   	ret    

c00081fe <VgaText::doANSI_SGR(int)>:
c00081fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008206:	85 d2                	test   edx,edx
c0008208:	75 0b                	jne    c0008215 <VgaText::doANSI_SGR(int)+0x17>
c000820a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000820d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008210:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008213:	eb 59                	jmp    c000826e <VgaText::doANSI_SGR(int)+0x70>
c0008215:	83 fa 07             	cmp    edx,0x7
c0008218:	75 0b                	jne    c0008225 <VgaText::doANSI_SGR(int)+0x27>
c000821a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000821d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008220:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008223:	eb 49                	jmp    c000826e <VgaText::doANSI_SGR(int)+0x70>
c0008225:	83 fa 1b             	cmp    edx,0x1b
c0008228:	74 e0                	je     c000820a <VgaText::doANSI_SGR(int)+0xc>
c000822a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000822d:	83 f9 07             	cmp    ecx,0x7
c0008230:	77 09                	ja     c000823b <VgaText::doANSI_SGR(int)+0x3d>
c0008232:	8b 14 8d 20 f2 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0de0]
c0008239:	eb 20                	jmp    c000825b <VgaText::doANSI_SGR(int)+0x5d>
c000823b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000823e:	83 f9 07             	cmp    ecx,0x7
c0008241:	77 09                	ja     c000824c <VgaText::doANSI_SGR(int)+0x4e>
c0008243:	8b 14 8d 20 f2 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0de0]
c000824a:	eb 22                	jmp    c000826e <VgaText::doANSI_SGR(int)+0x70>
c000824c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000824f:	83 f9 07             	cmp    ecx,0x7
c0008252:	77 0b                	ja     c000825f <VgaText::doANSI_SGR(int)+0x61>
c0008254:	8b 14 95 d8 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0f28]
c000825b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000825e:	c3                   	ret    
c000825f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008262:	83 f9 07             	cmp    ecx,0x7
c0008265:	77 0a                	ja     c0008271 <VgaText::doANSI_SGR(int)+0x73>
c0008267:	8b 14 95 b0 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0f50]
c000826e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008271:	c3                   	ret    

c0008272 <VgaText::setDefaultBgColour(VgaColour)>:
c0008272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000827d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008280:	c3                   	ret    
c0008281:	90                   	nop

c0008282 <VgaText::setDefaultFgColour(VgaColour)>:
c0008282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000828a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000828d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008290:	c3                   	ret    
c0008291:	90                   	nop

c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008292:	53                   	push   ebx
c0008293:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008297:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000829b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000829f:	51                   	push   ecx
c00082a0:	e8 cd ff ff ff       	call   c0008272 <VgaText::setDefaultBgColour(VgaColour)>
c00082a5:	58                   	pop    eax
c00082a6:	5a                   	pop    edx
c00082a7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00082ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00082af:	5b                   	pop    ebx
c00082b0:	eb d0                	jmp    c0008282 <VgaText::setDefaultFgColour(VgaColour)>

c00082b2 <VgaText::setTitleTextColour(VgaColour)>:
c00082b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ba:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00082bd:	c3                   	ret    

c00082be <VgaText::setTitleColour(VgaColour)>:
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00082c9:	c3                   	ret    

c00082ca <VgaText::setTitle(char*)>:
c00082ca:	c3                   	ret    
c00082cb:	90                   	nop

c00082cc <VgaText::combineColours(unsigned char, unsigned char)>:
c00082cc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00082d0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00082d5:	83 e0 0f             	and    eax,0xf
c00082d8:	c1 e2 04             	shl    edx,0x4
c00082db:	09 d0                	or     eax,edx
c00082dd:	c3                   	ret    

c00082de <VgaText::scrollScreen()>:
c00082de:	55                   	push   ebp
c00082df:	b9 01 00 00 00       	mov    ecx,0x1
c00082e4:	57                   	push   edi
c00082e5:	56                   	push   esi
c00082e6:	53                   	push   ebx
c00082e7:	83 ec 0c             	sub    esp,0xc
c00082ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082ee:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082f4:	31 ff                	xor    edi,edi
c00082f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082f9:	83 f9 18             	cmp    ecx,0x18
c00082fc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082ff:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008306:	75 27                	jne    c000832f <VgaText::scrollScreen()+0x51>
c0008308:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000830b:	01 f5                	add    ebp,esi
c000830d:	f7 c7 01 00 00 00    	test   edi,0x1
c0008313:	74 16                	je     c000832b <VgaText::scrollScreen()+0x4d>
c0008315:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008319:	50                   	push   eax
c000831a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000831e:	50                   	push   eax
c000831f:	e8 a8 ff ff ff       	call   c00082cc <VgaText::combineColours(unsigned char, unsigned char)>
c0008324:	5a                   	pop    edx
c0008325:	5a                   	pop    edx
c0008326:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008329:	eb 04                	jmp    c000832f <VgaText::scrollScreen()+0x51>
c000832b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000832f:	47                   	inc    edi
c0008330:	46                   	inc    esi
c0008331:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008337:	75 bd                	jne    c00082f6 <VgaText::scrollScreen()+0x18>
c0008339:	41                   	inc    ecx
c000833a:	83 f9 19             	cmp    ecx,0x19
c000833d:	75 af                	jne    c00082ee <VgaText::scrollScreen()+0x10>
c000833f:	39 1d a4 05 02 c0    	cmp    DWORD PTR ds:0xc00205a4,ebx
c0008345:	75 1f                	jne    c0008366 <VgaText::scrollScreen()+0x88>
c0008347:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000834b:	74 05                	je     c0008352 <VgaText::scrollScreen()+0x74>
c000834d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008350:	eb 14                	jmp    c0008366 <VgaText::scrollScreen()+0x88>
c0008352:	50                   	push   eax
c0008353:	50                   	push   eax
c0008354:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008358:	50                   	push   eax
c0008359:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000835d:	50                   	push   eax
c000835e:	e8 05 da 00 00       	call   c0015d68 <HalConsoleScroll(int, int)>
c0008363:	83 c4 10             	add    esp,0x10
c0008366:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000836a:	83 c4 0c             	add    esp,0xc
c000836d:	5b                   	pop    ebx
c000836e:	5e                   	pop    esi
c000836f:	5f                   	pop    edi
c0008370:	5d                   	pop    ebp
c0008371:	e9 72 fe ff ff       	jmp    c00081e8 <VgaText::updateCursor()>

c0008376 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008376:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000837b:	c1 e0 08             	shl    eax,0x8
c000837e:	89 c2                	mov    edx,eax
c0008380:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008385:	09 d0                	or     eax,edx
c0008387:	c3                   	ret    

c0008388 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008388:	55                   	push   ebp
c0008389:	57                   	push   edi
c000838a:	56                   	push   esi
c000838b:	53                   	push   ebx
c000838c:	83 ec 1c             	sub    esp,0x1c
c000838f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008393:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008397:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000839b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000839f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00083a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00083a7:	0f b6 c3             	movzx  eax,bl
c00083aa:	50                   	push   eax
c00083ab:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00083b0:	50                   	push   eax
c00083b1:	e8 16 ff ff ff       	call   c00082cc <VgaText::combineColours(unsigned char, unsigned char)>
c00083b6:	5a                   	pop    edx
c00083b7:	0f b6 c0             	movzx  eax,al
c00083ba:	59                   	pop    ecx
c00083bb:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00083c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00083c4:	50                   	push   eax
c00083c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00083c9:	e8 a8 ff ff ff       	call   c0008376 <VgaText::combineCharAndColour(char, unsigned char)>
c00083ce:	5a                   	pop    edx
c00083cf:	66 6b d7 50          	imul   dx,di,0x50
c00083d3:	59                   	pop    ecx
c00083d4:	01 f2                	add    edx,esi
c00083d6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083d9:	0f b7 d2             	movzx  edx,dx
c00083dc:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00083e0:	39 2d a4 05 02 c0    	cmp    DWORD PTR ds:0xc00205a4,ebp
c00083e6:	75 28                	jne    c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ec:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083f0:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083f4:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008400:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008404:	83 c4 1c             	add    esp,0x1c
c0008407:	5b                   	pop    ebx
c0008408:	5e                   	pop    esi
c0008409:	5f                   	pop    edi
c000840a:	5d                   	pop    ebp
c000840b:	e9 60 da 00 00       	jmp    c0015e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008410:	83 c4 1c             	add    esp,0x1c
c0008413:	5b                   	pop    ebx
c0008414:	5e                   	pop    esi
c0008415:	5f                   	pop    edi
c0008416:	5d                   	pop    ebp
c0008417:	c3                   	ret    

c0008418 <VgaText::getCursorX()>:
c0008418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000841c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000841f:	c3                   	ret    

c0008420 <VgaText::getCursorY()>:
c0008420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008424:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008427:	c3                   	ret    

c0008428 <VgaText::setCursor(int, int)>:
c0008428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000842c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008430:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008437:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843a:	e9 a9 fd ff ff       	jmp    c00081e8 <VgaText::updateCursor()>

c000843f <setActiveTerminal(VgaText*)>:
c000843f:	53                   	push   ebx
c0008440:	83 ec 08             	sub    esp,0x8
c0008443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008447:	85 db                	test   ebx,ebx
c0008449:	75 11                	jne    c000845c <setActiveTerminal(VgaText*)+0x1d>
c000844b:	c7 44 24 10 4c d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d34c
c0008453:	83 c4 08             	add    esp,0x8
c0008456:	5b                   	pop    ebx
c0008457:	e9 a3 7c 00 00       	jmp    c00100ff <KePanic(char const*)>
c000845c:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c0008461:	85 c0                	test   eax,eax
c0008463:	74 0c                	je     c0008471 <setActiveTerminal(VgaText*)+0x32>
c0008465:	83 ec 0c             	sub    esp,0xc
c0008468:	50                   	push   eax
c0008469:	e8 7a fd ff ff       	call   c00081e8 <VgaText::updateCursor()>
c000846e:	83 c4 10             	add    esp,0x10
c0008471:	89 1d a4 05 02 c0    	mov    DWORD PTR ds:0xc00205a4,ebx
c0008477:	50                   	push   eax
c0008478:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000847b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000847e:	53                   	push   ebx
c000847f:	e8 a4 ff ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c0008484:	83 c4 18             	add    esp,0x18
c0008487:	5b                   	pop    ebx
c0008488:	c3                   	ret    
c0008489:	90                   	nop

c000848a <VgaText::clearScreen()>:
c000848a:	57                   	push   edi
c000848b:	56                   	push   esi
c000848c:	31 f6                	xor    esi,esi
c000848e:	53                   	push   ebx
c000848f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008493:	52                   	push   edx
c0008494:	6a 00                	push   0x0
c0008496:	6a 00                	push   0x0
c0008498:	53                   	push   ebx
c0008499:	e8 8a ff ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c000849e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00084ab:	7e 20                	jle    c00084cd <VgaText::clearScreen()+0x43>
c00084ad:	31 ff                	xor    edi,edi
c00084af:	50                   	push   eax
c00084b0:	50                   	push   eax
c00084b1:	56                   	push   esi
c00084b2:	57                   	push   edi
c00084b3:	47                   	inc    edi
c00084b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00084b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00084ba:	6a 20                	push   0x20
c00084bc:	53                   	push   ebx
c00084bd:	e8 c6 fe ff ff       	call   c0008388 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00084c2:	83 c4 20             	add    esp,0x20
c00084c5:	83 ff 50             	cmp    edi,0x50
c00084c8:	75 e5                	jne    c00084af <VgaText::clearScreen()+0x25>
c00084ca:	46                   	inc    esi
c00084cb:	eb db                	jmp    c00084a8 <VgaText::clearScreen()+0x1e>
c00084cd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00084d4:	5b                   	pop    ebx
c00084d5:	5e                   	pop    esi
c00084d6:	5f                   	pop    edi
c00084d7:	c3                   	ret    

c00084d8 <VgaText::setCursorX(int)>:
c00084d8:	83 ec 10             	sub    esp,0x10
c00084db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084df:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e6:	50                   	push   eax
c00084e7:	e8 3c ff ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c00084ec:	83 c4 1c             	add    esp,0x1c
c00084ef:	c3                   	ret    

c00084f0 <VgaText::setCursorY(int)>:
c00084f0:	83 ec 10             	sub    esp,0x10
c00084f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084fb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084fe:	50                   	push   eax
c00084ff:	e8 24 ff ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c0008504:	83 c4 1c             	add    esp,0x1c
c0008507:	c3                   	ret    

c0008508 <VgaText::incrementCursor(bool)>:
c0008508:	56                   	push   esi
c0008509:	53                   	push   ebx
c000850a:	51                   	push   ecx
c000850b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000850f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008513:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008516:	40                   	inc    eax
c0008517:	83 f8 50             	cmp    eax,0x50
c000851a:	74 05                	je     c0008521 <VgaText::incrementCursor(bool)+0x19>
c000851c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000851f:	eb 24                	jmp    c0008545 <VgaText::incrementCursor(bool)+0x3d>
c0008521:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008524:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000852b:	8d 50 01             	lea    edx,[eax+0x1]
c000852e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008531:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008534:	75 0f                	jne    c0008545 <VgaText::incrementCursor(bool)+0x3d>
c0008536:	83 ec 0c             	sub    esp,0xc
c0008539:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000853c:	53                   	push   ebx
c000853d:	e8 9c fd ff ff       	call   c00082de <VgaText::scrollScreen()>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 f0                	mov    eax,esi
c0008547:	84 c0                	test   al,al
c0008549:	74 0c                	je     c0008557 <VgaText::incrementCursor(bool)+0x4f>
c000854b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000854f:	5a                   	pop    edx
c0008550:	5b                   	pop    ebx
c0008551:	5e                   	pop    esi
c0008552:	e9 91 fc ff ff       	jmp    c00081e8 <VgaText::updateCursor()>
c0008557:	58                   	pop    eax
c0008558:	5b                   	pop    ebx
c0008559:	5e                   	pop    esi
c000855a:	c3                   	ret    
c000855b:	90                   	nop

c000855c <VgaText::decrementCursor(bool)>:
c000855c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008560:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008564:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008567:	85 c0                	test   eax,eax
c0008569:	74 04                	je     c000856f <VgaText::decrementCursor(bool)+0x13>
c000856b:	48                   	dec    eax
c000856c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000856f:	84 c9                	test   cl,cl
c0008571:	74 09                	je     c000857c <VgaText::decrementCursor(bool)+0x20>
c0008573:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008577:	e9 6c fc ff ff       	jmp    c00081e8 <VgaText::updateCursor()>
c000857c:	c3                   	ret    
c000857d:	90                   	nop

c000857e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000857e:	53                   	push   ebx
c000857f:	83 ec 08             	sub    esp,0x8
c0008582:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008586:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000858a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000858e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008592:	3c 07                	cmp    al,0x7
c0008594:	75 21                	jne    c00085b7 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008596:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000859e:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00085a6:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00085ae:	83 c4 08             	add    esp,0x8
c00085b1:	5b                   	pop    ebx
c00085b2:	e9 3c 2d 00 00       	jmp    c000b2f3 <Krnl::beep(int, int, bool)>
c00085b7:	3c 0d                	cmp    al,0xd
c00085b9:	75 09                	jne    c00085c4 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00085bb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085c2:	eb 2c                	jmp    c00085f0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00085c4:	3c 0a                	cmp    al,0xa
c00085c6:	75 31                	jne    c00085f9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00085c8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085cb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085d2:	8d 50 01             	lea    edx,[eax+0x1]
c00085d5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085d8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085db:	75 0f                	jne    c00085ec <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085dd:	83 ec 0c             	sub    esp,0xc
c00085e0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085e3:	53                   	push   ebx
c00085e4:	e8 f5 fc ff ff       	call   c00082de <VgaText::scrollScreen()>
c00085e9:	83 c4 10             	add    esp,0x10
c00085ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085f0:	83 c4 08             	add    esp,0x8
c00085f3:	5b                   	pop    ebx
c00085f4:	e9 ef fb ff ff       	jmp    c00081e8 <VgaText::updateCursor()>
c00085f9:	3c 08                	cmp    al,0x8
c00085fb:	75 25                	jne    c0008622 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085fd:	50                   	push   eax
c00085fe:	50                   	push   eax
c00085ff:	6a 01                	push   0x1
c0008601:	53                   	push   ebx
c0008602:	e8 55 ff ff ff       	call   c000855c <VgaText::decrementCursor(bool)>
c0008607:	5a                   	pop    edx
c0008608:	59                   	pop    ecx
c0008609:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000860c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000860f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008612:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008615:	6a 20                	push   0x20
c0008617:	53                   	push   ebx
c0008618:	e8 6b fd ff ff       	call   c0008388 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000861d:	83 c4 28             	add    esp,0x28
c0008620:	5b                   	pop    ebx
c0008621:	c3                   	ret    
c0008622:	83 ec 08             	sub    esp,0x8
c0008625:	0f be c0             	movsx  eax,al
c0008628:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000862b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000862e:	51                   	push   ecx
c000862f:	52                   	push   edx
c0008630:	50                   	push   eax
c0008631:	53                   	push   ebx
c0008632:	e8 51 fd ff ff       	call   c0008388 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008637:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000863b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008643:	83 c4 28             	add    esp,0x28
c0008646:	5b                   	pop    ebx
c0008647:	e9 bc fe ff ff       	jmp    c0008508 <VgaText::incrementCursor(bool)>

c000864c <VgaText::putchar(char)>:
c000864c:	56                   	push   esi
c000864d:	53                   	push   ebx
c000864e:	83 ec 14             	sub    esp,0x14
c0008651:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008655:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008659:	3c 5b                	cmp    al,0x5b
c000865b:	75 18                	jne    c0008675 <VgaText::putchar(char)+0x29>
c000865d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008661:	74 1f                	je     c0008682 <VgaText::putchar(char)+0x36>
c0008663:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008669:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008670:	e9 bd 00 00 00       	jmp    c0008732 <VgaText::putchar(char)+0xe6>
c0008675:	3c 1b                	cmp    al,0x1b
c0008677:	75 09                	jne    c0008682 <VgaText::putchar(char)+0x36>
c0008679:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000867d:	e9 b0 00 00 00       	jmp    c0008732 <VgaText::putchar(char)+0xe6>
c0008682:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008685:	84 c9                	test   cl,cl
c0008687:	0f 84 92 00 00 00    	je     c000871f <VgaText::putchar(char)+0xd3>
c000868d:	8d 50 c0             	lea    edx,[eax-0x40]
c0008690:	80 fa 3e             	cmp    dl,0x3e
c0008693:	77 76                	ja     c000870b <VgaText::putchar(char)+0xbf>
c0008695:	3c 6d                	cmp    al,0x6d
c0008697:	75 47                	jne    c00086e0 <VgaText::putchar(char)+0x94>
c0008699:	31 f6                	xor    esi,esi
c000869b:	31 d2                	xor    edx,edx
c000869d:	31 c0                	xor    eax,eax
c000869f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00086a2:	7e 2d                	jle    c00086d1 <VgaText::putchar(char)+0x85>
c00086a4:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00086a9:	80 fa 3b             	cmp    dl,0x3b
c00086ac:	75 17                	jne    c00086c5 <VgaText::putchar(char)+0x79>
c00086ae:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00086b2:	50                   	push   eax
c00086b3:	53                   	push   ebx
c00086b4:	e8 45 fb ff ff       	call   c00081fe <VgaText::doANSI_SGR(int)>
c00086b9:	59                   	pop    ecx
c00086ba:	31 d2                	xor    edx,edx
c00086bc:	58                   	pop    eax
c00086bd:	31 c0                	xor    eax,eax
c00086bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00086c3:	eb 09                	jmp    c00086ce <VgaText::putchar(char)+0x82>
c00086c5:	6b c0 0a             	imul   eax,eax,0xa
c00086c8:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00086cc:	88 ca                	mov    dl,cl
c00086ce:	46                   	inc    esi
c00086cf:	eb ce                	jmp    c000869f <VgaText::putchar(char)+0x53>
c00086d1:	84 d2                	test   dl,dl
c00086d3:	74 2e                	je     c0008703 <VgaText::putchar(char)+0xb7>
c00086d5:	50                   	push   eax
c00086d6:	53                   	push   ebx
c00086d7:	e8 22 fb ff ff       	call   c00081fe <VgaText::doANSI_SGR(int)>
c00086dc:	58                   	pop    eax
c00086dd:	5a                   	pop    edx
c00086de:	eb 23                	jmp    c0008703 <VgaText::putchar(char)+0xb7>
c00086e0:	3c 4a                	cmp    al,0x4a
c00086e2:	75 1f                	jne    c0008703 <VgaText::putchar(char)+0xb7>
c00086e4:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086e8:	75 19                	jne    c0008703 <VgaText::putchar(char)+0xb7>
c00086ea:	83 ec 0c             	sub    esp,0xc
c00086ed:	53                   	push   ebx
c00086ee:	e8 97 fd ff ff       	call   c000848a <VgaText::clearScreen()>
c00086f3:	83 c4 0c             	add    esp,0xc
c00086f6:	6a 00                	push   0x0
c00086f8:	6a 00                	push   0x0
c00086fa:	53                   	push   ebx
c00086fb:	e8 28 fd ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c0008700:	83 c4 10             	add    esp,0x10
c0008703:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008709:	eb 27                	jmp    c0008732 <VgaText::putchar(char)+0xe6>
c000870b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000870e:	83 fa 0e             	cmp    edx,0xe
c0008711:	7f 1f                	jg     c0008732 <VgaText::putchar(char)+0xe6>
c0008713:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008716:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008719:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000871d:	eb 13                	jmp    c0008732 <VgaText::putchar(char)+0xe6>
c000871f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008722:	0f be c0             	movsx  eax,al
c0008725:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008728:	50                   	push   eax
c0008729:	53                   	push   ebx
c000872a:	e8 4f fe ff ff       	call   c000857e <VgaText::putchar(char, VgaColour, VgaColour)>
c000872f:	83 c4 10             	add    esp,0x10
c0008732:	83 c4 14             	add    esp,0x14
c0008735:	5b                   	pop    ebx
c0008736:	5e                   	pop    esi
c0008737:	c3                   	ret    

c0008738 <VgaText::putx(unsigned int)>:
c0008738:	57                   	push   edi
c0008739:	b9 11 00 00 00       	mov    ecx,0x11
c000873e:	56                   	push   esi
c000873f:	be 5a d3 01 c0       	mov    esi,0xc001d35a
c0008744:	53                   	push   ebx
c0008745:	83 ec 20             	sub    esp,0x20
c0008748:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000874c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008750:	fc                   	cld    
c0008751:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008753:	be 08 00 00 00       	mov    esi,0x8
c0008758:	50                   	push   eax
c0008759:	50                   	push   eax
c000875a:	89 d8                	mov    eax,ebx
c000875c:	c1 e3 04             	shl    ebx,0x4
c000875f:	c1 e8 1c             	shr    eax,0x1c
c0008762:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008767:	50                   	push   eax
c0008768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000876c:	e8 db fe ff ff       	call   c000864c <VgaText::putchar(char)>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	4e                   	dec    esi
c0008775:	75 e1                	jne    c0008758 <VgaText::putx(unsigned int)+0x20>
c0008777:	83 c4 20             	add    esp,0x20
c000877a:	5b                   	pop    ebx
c000877b:	5e                   	pop    esi
c000877c:	5f                   	pop    edi
c000877d:	c3                   	ret    

c000877e <VgaText::puts(char const*)>:
c000877e:	53                   	push   ebx
c000877f:	83 ec 08             	sub    esp,0x8
c0008782:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008786:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008789:	84 c0                	test   al,al
c000878b:	74 12                	je     c000879f <VgaText::puts(char const*)+0x21>
c000878d:	43                   	inc    ebx
c000878e:	51                   	push   ecx
c000878f:	51                   	push   ecx
c0008790:	50                   	push   eax
c0008791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008795:	e8 b2 fe ff ff       	call   c000864c <VgaText::putchar(char)>
c000879a:	83 c4 10             	add    esp,0x10
c000879d:	eb e7                	jmp    c0008786 <VgaText::puts(char const*)+0x8>
c000879f:	83 c4 08             	add    esp,0x8
c00087a2:	5b                   	pop    ebx
c00087a3:	c3                   	ret    

c00087a4 <VgaText::write(unsigned long long, void*, int*)>:
c00087a4:	55                   	push   ebp
c00087a5:	57                   	push   edi
c00087a6:	56                   	push   esi
c00087a7:	53                   	push   ebx
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00087af:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00087b7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00087be:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00087c1:	39 eb                	cmp    ebx,ebp
c00087c3:	74 13                	je     c00087d8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00087c5:	43                   	inc    ebx
c00087c6:	50                   	push   eax
c00087c7:	50                   	push   eax
c00087c8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00087cc:	50                   	push   eax
c00087cd:	56                   	push   esi
c00087ce:	e8 79 fe ff ff       	call   c000864c <VgaText::putchar(char)>
c00087d3:	83 c4 10             	add    esp,0x10
c00087d6:	eb e9                	jmp    c00087c1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087d8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00087e3:	89 38                	mov    DWORD PTR [eax],edi
c00087e5:	83 c4 0c             	add    esp,0xc
c00087e8:	31 c0                	xor    eax,eax
c00087ea:	5b                   	pop    ebx
c00087eb:	5e                   	pop    esi
c00087ec:	5f                   	pop    edi
c00087ed:	5d                   	pop    ebp
c00087ee:	c3                   	ret    
c00087ef:	90                   	nop

c00087f0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087f0:	55                   	push   ebp
c00087f1:	57                   	push   edi
c00087f2:	56                   	push   esi
c00087f3:	53                   	push   ebx
c00087f4:	83 ec 0c             	sub    esp,0xc
c00087f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008800:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008807:	50                   	push   eax
c0008808:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000880d:	50                   	push   eax
c000880e:	e8 b9 fa ff ff       	call   c00082cc <VgaText::combineColours(unsigned char, unsigned char)>
c0008813:	5a                   	pop    edx
c0008814:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008819:	59                   	pop    ecx
c000881a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000881d:	89 c5                	mov    ebp,eax
c000881f:	0f b7 f6             	movzx  esi,si
c0008822:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008826:	01 f6                	add    esi,esi
c0008828:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000882b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000882e:	84 c0                	test   al,al
c0008830:	0f 84 f4 00 00 00    	je     c000892a <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008836:	3c 0d                	cmp    al,0xd
c0008838:	75 0c                	jne    c0008846 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c000883a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008841:	e9 de 00 00 00       	jmp    c0008924 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008846:	3c 0a                	cmp    al,0xa
c0008848:	75 45                	jne    c000888f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000884a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000884d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008854:	8d 48 01             	lea    ecx,[eax+0x1]
c0008857:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000885a:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000885d:	75 0f                	jne    c000886e <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c000885f:	83 ec 0c             	sub    esp,0xc
c0008862:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008865:	53                   	push   ebx
c0008866:	e8 73 fa ff ff       	call   c00082de <VgaText::scrollScreen()>
c000886b:	83 c4 10             	add    esp,0x10
c000886e:	83 ec 0c             	sub    esp,0xc
c0008871:	53                   	push   ebx
c0008872:	e8 71 f9 ff ff       	call   c00081e8 <VgaText::updateCursor()>
c0008877:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008882:	0f b7 f6             	movzx  esi,si
c0008885:	01 f6                	add    esi,esi
c0008887:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000888a:	e9 95 00 00 00       	jmp    c0008924 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000888f:	3c 08                	cmp    al,0x8
c0008891:	75 35                	jne    c00088c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008893:	51                   	push   ecx
c0008894:	51                   	push   ecx
c0008895:	6a 01                	push   0x1
c0008897:	53                   	push   ebx
c0008898:	e8 bf fc ff ff       	call   c000855c <VgaText::decrementCursor(bool)>
c000889d:	5e                   	pop    esi
c000889e:	58                   	pop    eax
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088a8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088ab:	6a 20                	push   0x20
c00088ad:	53                   	push   ebx
c00088ae:	e8 d5 fa ff ff       	call   c0008388 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088b3:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088b8:	83 c4 20             	add    esp,0x20
c00088bb:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088be:	0f b7 f6             	movzx  esi,si
c00088c1:	01 f6                	add    esi,esi
c00088c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088c6:	eb 5c                	jmp    c0008924 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088c8:	52                   	push   edx
c00088c9:	52                   	push   edx
c00088ca:	89 ea                	mov    edx,ebp
c00088cc:	0f b6 ca             	movzx  ecx,dl
c00088cf:	51                   	push   ecx
c00088d0:	50                   	push   eax
c00088d1:	e8 a0 fa ff ff       	call   c0008376 <VgaText::combineCharAndColour(char, unsigned char)>
c00088d6:	83 c4 10             	add    esp,0x10
c00088d9:	66 89 06             	mov    WORD PTR [esi],ax
c00088dc:	39 1d a4 05 02 c0    	cmp    DWORD PTR ds:0xc00205a4,ebx
c00088e2:	75 1d                	jne    c0008901 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c00088e4:	83 ec 0c             	sub    esp,0xc
c00088e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088ea:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088ed:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088f1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088f5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088f8:	50                   	push   eax
c00088f9:	e8 72 d5 00 00       	call   c0015e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088fe:	83 c4 20             	add    esp,0x20
c0008901:	83 c6 02             	add    esi,0x2
c0008904:	50                   	push   eax
c0008905:	50                   	push   eax
c0008906:	6a 00                	push   0x0
c0008908:	53                   	push   ebx
c0008909:	e8 fa fb ff ff       	call   c0008508 <VgaText::incrementCursor(bool)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008915:	75 0d                	jne    c0008924 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008917:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000891c:	0f b7 f6             	movzx  esi,si
c000891f:	01 f6                	add    esi,esi
c0008921:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008924:	47                   	inc    edi
c0008925:	e9 01 ff ff ff       	jmp    c000882b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000892a:	83 ec 0c             	sub    esp,0xc
c000892d:	53                   	push   ebx
c000892e:	e8 b5 f8 ff ff       	call   c00081e8 <VgaText::updateCursor()>
c0008933:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000893a:	83 c4 1c             	add    esp,0x1c
c000893d:	5b                   	pop    ebx
c000893e:	5e                   	pop    esi
c000893f:	5f                   	pop    edi
c0008940:	5d                   	pop    ebp
c0008941:	c3                   	ret    

c0008942 <VgaText::VgaText(char const*)>:
c0008942:	56                   	push   esi
c0008943:	53                   	push   ebx
c0008944:	83 ec 04             	sub    esp,0x4
c0008947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894b:	83 ec 08             	sub    esp,0x8
c000894e:	6a 00                	push   0x0
c0008950:	50                   	push   eax
c0008951:	e8 b0 04 00 00       	call   c0008e06 <UnixFile::UnixFile(int)>
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	ba c0 d3 01 c0       	mov    edx,0xc001d3c0
c000895e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008962:	89 10                	mov    DWORD PTR [eax],edx
c0008964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008968:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000896f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008973:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000897e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008986:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00089ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089af:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00089b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ba:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00089c1:	83 ec 0c             	sub    esp,0xc
c00089c4:	6a 01                	push   0x1
c00089c6:	e8 7e 08 00 00       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	89 c2                	mov    edx,eax
c00089d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00089d7:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c00089dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089e4:	89 c6                	mov    esi,eax
c00089e6:	e8 f2 f0 ff ff       	call   c0007add <Phys::allocatePage()>
c00089eb:	68 05 0c 00 00       	push   0xc05
c00089f0:	56                   	push   esi
c00089f1:	50                   	push   eax
c00089f2:	53                   	push   ebx
c00089f3:	e8 e6 0e 00 00       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c00089f8:	83 c4 10             	add    esp,0x10
c00089fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a02:	83 ec 04             	sub    esp,0x4
c0008a05:	68 a0 0f 00 00       	push   0xfa0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	50                   	push   eax
c0008a0d:	e8 be 7a ff ff       	call   c00004d0 <memset>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	83 ec 04             	sub    esp,0x4
c0008a18:	6a 00                	push   0x0
c0008a1a:	6a 07                	push   0x7
c0008a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a20:	e8 6d f8 ff ff       	call   c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a25:	83 c4 10             	add    esp,0x10
c0008a28:	83 ec 04             	sub    esp,0x4
c0008a2b:	6a 00                	push   0x0
c0008a2d:	6a 00                	push   0x0
c0008a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a33:	e8 f0 f9 ff ff       	call   c0008428 <VgaText::setCursor(int, int)>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	83 ec 0c             	sub    esp,0xc
c0008a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a42:	e8 43 fa ff ff       	call   c000848a <VgaText::clearScreen()>
c0008a47:	83 c4 10             	add    esp,0x10
c0008a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a4e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a56:	05 82 00 00 00       	add    eax,0x82
c0008a5b:	83 ec 04             	sub    esp,0x4
c0008a5e:	6a 30                	push   0x30
c0008a60:	6a 00                	push   0x0
c0008a62:	50                   	push   eax
c0008a63:	e8 68 7a ff ff       	call   c00004d0 <memset>
c0008a68:	83 c4 10             	add    esp,0x10
c0008a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6f:	05 b2 00 00 00       	add    eax,0xb2
c0008a74:	83 ec 04             	sub    esp,0x4
c0008a77:	68 80 00 00 00       	push   0x80
c0008a7c:	6a 00                	push   0x0
c0008a7e:	50                   	push   eax
c0008a7f:	e8 4c 7a ff ff       	call   c00004d0 <memset>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	90                   	nop
c0008a88:	83 c4 04             	add    esp,0x4
c0008a8b:	5b                   	pop    ebx
c0008a8c:	5e                   	pop    esi
c0008a8d:	c3                   	ret    

c0008a8e <VgaText::receiveKey(unsigned char)>:
c0008a8e:	57                   	push   edi
c0008a8f:	56                   	push   esi
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 10             	sub    esp,0x10
c0008a94:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a98:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a9c:	84 db                	test   bl,bl
c0008a9e:	0f 84 ba 00 00 00    	je     c0008b5e <VgaText::receiveKey(unsigned char)+0xd0>
c0008aa4:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008aaa:	80 fb 08             	cmp    bl,0x8
c0008aad:	75 2c                	jne    c0008adb <VgaText::receiveKey(unsigned char)+0x4d>
c0008aaf:	83 ec 0c             	sub    esp,0xc
c0008ab2:	57                   	push   edi
c0008ab3:	e8 88 7a ff ff       	call   c0000540 <strlen>
c0008ab8:	83 c4 10             	add    esp,0x10
c0008abb:	85 c0                	test   eax,eax
c0008abd:	74 41                	je     c0008b00 <VgaText::receiveKey(unsigned char)+0x72>
c0008abf:	50                   	push   eax
c0008ac0:	50                   	push   eax
c0008ac1:	6a 08                	push   0x8
c0008ac3:	56                   	push   esi
c0008ac4:	e8 83 fb ff ff       	call   c000864c <VgaText::putchar(char)>
c0008ac9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008acc:	e8 6f 7a ff ff       	call   c0000540 <strlen>
c0008ad1:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008ad9:	eb 22                	jmp    c0008afd <VgaText::receiveKey(unsigned char)+0x6f>
c0008adb:	0f be c3             	movsx  eax,bl
c0008ade:	52                   	push   edx
c0008adf:	52                   	push   edx
c0008ae0:	50                   	push   eax
c0008ae1:	56                   	push   esi
c0008ae2:	e8 65 fb ff ff       	call   c000864c <VgaText::putchar(char)>
c0008ae7:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008aeb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008af0:	59                   	pop    ecx
c0008af1:	58                   	pop    eax
c0008af2:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008af6:	50                   	push   eax
c0008af7:	57                   	push   edi
c0008af8:	e8 c3 7c ff ff       	call   c00007c0 <strcat>
c0008afd:	83 c4 10             	add    esp,0x10
c0008b00:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008b07:	75 05                	jne    c0008b0e <VgaText::receiveKey(unsigned char)+0x80>
c0008b09:	80 fb 0a             	cmp    bl,0xa
c0008b0c:	75 50                	jne    c0008b5e <VgaText::receiveKey(unsigned char)+0xd0>
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008b17:	56                   	push   esi
c0008b18:	e8 23 7a ff ff       	call   c0000540 <strlen>
c0008b1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b20:	89 c3                	mov    ebx,eax
c0008b22:	e8 19 7a ff ff       	call   c0000540 <strlen>
c0008b27:	83 c4 10             	add    esp,0x10
c0008b2a:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008b2e:	3d 80 00 00 00       	cmp    eax,0x80
c0008b33:	76 10                	jbe    c0008b45 <VgaText::receiveKey(unsigned char)+0xb7>
c0008b35:	83 ec 0c             	sub    esp,0xc
c0008b38:	68 6b d3 01 c0       	push   0xc001d36b
c0008b3d:	e8 bd 75 00 00       	call   c00100ff <KePanic(char const*)>
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	50                   	push   eax
c0008b46:	50                   	push   eax
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	e8 72 7c ff ff       	call   c00007c0 <strcat>
c0008b4e:	83 c4 0c             	add    esp,0xc
c0008b51:	6a 30                	push   0x30
c0008b53:	6a 00                	push   0x0
c0008b55:	57                   	push   edi
c0008b56:	e8 75 79 ff ff       	call   c00004d0 <memset>
c0008b5b:	83 c4 10             	add    esp,0x10
c0008b5e:	83 c4 10             	add    esp,0x10
c0008b61:	5b                   	pop    ebx
c0008b62:	5e                   	pop    esi
c0008b63:	5f                   	pop    edi
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <VgaText::doUpdate()>:
c0008b66:	c3                   	ret    

c0008b67 <newTerminal(char*)>:
c0008b67:	83 ec 28             	sub    esp,0x28
c0008b6a:	68 34 01 00 00       	push   0x134
c0008b6f:	e8 8d ec ff ff       	call   c0007801 <malloc>
c0008b74:	5a                   	pop    edx
c0008b75:	59                   	pop    ecx
c0008b76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b7a:	50                   	push   eax
c0008b7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7f:	e8 be fd ff ff       	call   c0008942 <VgaText::VgaText(char const*)>
c0008b84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b88:	83 c4 2c             	add    esp,0x2c
c0008b8b:	c3                   	ret    

c0008b8c <TSS::TSS()>:
c0008b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b97:	90                   	nop
c0008b98:	c3                   	ret    
c0008b99:	90                   	nop
c0008b9a:	66 90                	xchg   ax,ax

c0008b9c <TSS::setESP(unsigned long)>:
c0008b9c:	55                   	push   ebp
c0008b9d:	89 e5                	mov    ebp,esp
c0008b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ba5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ba8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bab:	90                   	nop
c0008bac:	5d                   	pop    ebp
c0008bad:	c3                   	ret    
c0008bae:	66 90                	xchg   ax,ax

c0008bb0 <TSS::flush()>:
c0008bb0:	55                   	push   ebp
c0008bb1:	89 e5                	mov    ebp,esp
c0008bb3:	83 ec 10             	sub    esp,0x10
c0008bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bbb:	83 c8 03             	or     eax,0x3
c0008bbe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bc2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008bc6:	66 89 d0             	mov    ax,dx
c0008bc9:	0f 00 d8             	ltr    ax
c0008bcc:	90                   	nop
c0008bcd:	c9                   	leave  
c0008bce:	c3                   	ret    
c0008bcf:	90                   	nop

c0008bd0 <TSS::setup(unsigned long, unsigned long)>:
c0008bd0:	55                   	push   ebp
c0008bd1:	89 e5                	mov    ebp,esp
c0008bd3:	83 ec 18             	sub    esp,0x18
c0008bd6:	83 ec 0c             	sub    esp,0xc
c0008bd9:	6a 68                	push   0x68
c0008bdb:	e8 21 ec ff ff       	call   c0007801 <malloc>
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	89 c2                	mov    edx,eax
c0008be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf1:	83 ec 04             	sub    esp,0x4
c0008bf4:	6a 68                	push   0x68
c0008bf6:	6a 00                	push   0x0
c0008bf8:	50                   	push   eax
c0008bf9:	e8 d2 78 ff ff       	call   c00004d0 <memset>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c07:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c13:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c37:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c76:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c98:	0f 20 da             	mov    edx,cr3
c0008c9b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008c9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ca1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caa:	83 ec 08             	sub    esp,0x8
c0008cad:	50                   	push   eax
c0008cae:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cb1:	50                   	push   eax
c0008cb2:	e8 cf e3 ff ff       	call   c0007086 <GDTEntry::setBase(unsigned int)>
c0008cb7:	83 c4 10             	add    esp,0x10
c0008cba:	83 ec 08             	sub    esp,0x8
c0008cbd:	6a 68                	push   0x68
c0008cbf:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cc2:	50                   	push   eax
c0008cc3:	e8 da e3 ff ff       	call   c00070a2 <GDTEntry::setLimit(unsigned int)>
c0008cc8:	83 c4 10             	add    esp,0x10
c0008ccb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008ccf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cd2:	83 e0 0f             	and    eax,0xf
c0008cd5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008cd8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cdb:	83 c8 40             	or     eax,0x40
c0008cde:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ce1:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0008ce6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008cec:	05 78 01 00 00       	add    eax,0x178
c0008cf1:	83 ec 04             	sub    esp,0x4
c0008cf4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008cf7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008cfa:	50                   	push   eax
c0008cfb:	e8 d6 e3 ff ff       	call   c00070d6 <GDT::addEntry(GDTEntry)>
c0008d00:	83 c4 10             	add    esp,0x10
c0008d03:	89 c2                	mov    edx,eax
c0008d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d08:	89 10                	mov    DWORD PTR [eax],edx
c0008d0a:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0008d0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d15:	05 78 01 00 00       	add    eax,0x178
c0008d1a:	83 ec 0c             	sub    esp,0xc
c0008d1d:	50                   	push   eax
c0008d1e:	e8 dd e3 ff ff       	call   c0007100 <GDT::flush()>
c0008d23:	83 c4 10             	add    esp,0x10
c0008d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d2b:	c9                   	leave  
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d39:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d3e:	75 08                	jne    c0008d48 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d40:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d46:	eb 38                	jmp    c0008d80 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d48:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d4d:	75 17                	jne    c0008d66 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d63:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d66:	89 c1                	mov    ecx,eax
c0008d68:	83 e1 fd             	and    ecx,0xfffffffd
c0008d6b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d71:	74 cd                	je     c0008d40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d73:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d78:	83 e0 ef             	and    eax,0xffffffef
c0008d7b:	83 f8 08             	cmp    eax,0x8
c0008d7e:	76 c0                	jbe    c0008d40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d80:	31 c0                	xor    eax,eax
c0008d82:	c3                   	ret    
c0008d83:	90                   	nop

c0008d84 <ReservedFilename::isAtty()>:
c0008d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d8b:	31 c0                	xor    eax,eax
c0008d8d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d93:	74 09                	je     c0008d9e <ReservedFilename::isAtty()+0x1a>
c0008d95:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d9b:	0f 94 c0             	sete   al
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008da4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008daf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008db4:	75 08                	jne    c0008dbe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008db6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008dbc:	eb 3d                	jmp    c0008dfb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dbe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dc3:	75 17                	jne    c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008dc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008dca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008dcd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008dd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008dd9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ddc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008de1:	75 04                	jne    c0008de7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008de3:	89 0a                	mov    DWORD PTR [edx],ecx
c0008de5:	eb 14                	jmp    c0008dfb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008de7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008dec:	74 c8                	je     c0008db6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008dee:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008df3:	83 e0 ef             	and    eax,0xffffffef
c0008df6:	83 f8 08             	cmp    eax,0x8
c0008df9:	76 bb                	jbe    c0008db6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008dfb:	31 c0                	xor    eax,eax
c0008dfd:	c3                   	ret    

c0008dfe <UnixFile::getFileDescriptor()>:
c0008dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e05:	c3                   	ret    

c0008e06 <UnixFile::UnixFile(int)>:
c0008e06:	53                   	push   ebx
c0008e07:	83 ec 28             	sub    esp,0x28
c0008e0a:	ba 88 d4 01 c0       	mov    edx,0xc001d488
c0008e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e13:	89 10                	mov    DWORD PTR [eax],edx
c0008e15:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e1d:	0f 8f 8c 01 00 00    	jg     c0008faf <UnixFile::UnixFile(int)+0x1a9>
c0008e23:	a1 60 f2 01 c0       	mov    eax,ds:0xc001f260
c0008e28:	8d 50 01             	lea    edx,[eax+0x1]
c0008e2b:	89 15 60 f2 01 c0    	mov    DWORD PTR ds:0xc001f260,edx
c0008e31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e35:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e38:	83 ec 08             	sub    esp,0x8
c0008e3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e3f:	68 38 06 02 c0       	push   0xc0020638
c0008e44:	e8 ef 30 01 00       	call   c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e49:	83 c4 10             	add    esp,0x10
c0008e4c:	a0 34 06 02 c0       	mov    al,ds:0xc0020634
c0008e51:	83 f0 01             	xor    eax,0x1
c0008e54:	84 c0                	test   al,al
c0008e56:	0f 84 54 01 00 00    	je     c0008fb0 <UnixFile::UnixFile(int)+0x1aa>
c0008e5c:	c6 05 34 06 02 c0 01 	mov    BYTE PTR ds:0xc0020634,0x1
c0008e63:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e6b:	83 ec 0c             	sub    esp,0xc
c0008e6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e72:	e8 8a e9 ff ff       	call   c0007801 <malloc>
c0008e77:	83 c4 10             	add    esp,0x10
c0008e7a:	89 c3                	mov    ebx,eax
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 03 ff ff 0f       	push   0xfffff03
c0008e84:	53                   	push   ebx
c0008e85:	e8 2c 01 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008e8a:	83 c4 10             	add    esp,0x10
c0008e8d:	89 1d 2c 06 02 c0    	mov    DWORD PTR ds:0xc002062c,ebx
c0008e93:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea2:	e8 5a e9 ff ff       	call   c0007801 <malloc>
c0008ea7:	83 c4 10             	add    esp,0x10
c0008eaa:	89 c3                	mov    ebx,eax
c0008eac:	83 ec 08             	sub    esp,0x8
c0008eaf:	68 01 ff ff 0f       	push   0xfffff01
c0008eb4:	53                   	push   ebx
c0008eb5:	e8 fc 00 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	89 1d 30 06 02 c0    	mov    DWORD PTR ds:0xc0020630,ebx
c0008ec3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ed2:	e8 2a e9 ff ff       	call   c0007801 <malloc>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	89 c3                	mov    ebx,eax
c0008edc:	83 ec 08             	sub    esp,0x8
c0008edf:	68 00 ff ff 0f       	push   0xfffff00
c0008ee4:	53                   	push   ebx
c0008ee5:	e8 cc 00 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008eea:	83 c4 10             	add    esp,0x10
c0008eed:	89 1d 24 06 02 c0    	mov    DWORD PTR ds:0xc0020624,ebx
c0008ef3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f02:	e8 fa e8 ff ff       	call   c0007801 <malloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c3                	mov    ebx,eax
c0008f0c:	83 ec 08             	sub    esp,0x8
c0008f0f:	68 02 ff ff 0f       	push   0xfffff02
c0008f14:	53                   	push   ebx
c0008f15:	e8 9c 00 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	89 1d 28 06 02 c0    	mov    DWORD PTR ds:0xc0020628,ebx
c0008f23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f2b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f30:	7f 7e                	jg     c0008fb0 <UnixFile::UnixFile(int)+0x1aa>
c0008f32:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f3a:	83 ec 0c             	sub    esp,0xc
c0008f3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f41:	e8 bb e8 ff ff       	call   c0007801 <malloc>
c0008f46:	83 c4 10             	add    esp,0x10
c0008f49:	89 c3                	mov    ebx,eax
c0008f4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f54:	83 ec 08             	sub    esp,0x8
c0008f57:	50                   	push   eax
c0008f58:	53                   	push   ebx
c0008f59:	e8 58 00 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008f5e:	83 c4 10             	add    esp,0x10
c0008f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f65:	89 1c 85 00 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa00],ebx
c0008f6c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f74:	83 ec 0c             	sub    esp,0xc
c0008f77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7b:	e8 81 e8 ff ff       	call   c0007801 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c3                	mov    ebx,eax
c0008f85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f89:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f8e:	83 ec 08             	sub    esp,0x8
c0008f91:	50                   	push   eax
c0008f92:	53                   	push   ebx
c0008f93:	e8 1e 00 00 00       	call   c0008fb6 <ReservedFilename::ReservedFilename(int)>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f9f:	89 1c 85 c0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa40],ebx
c0008fa6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008faa:	e9 7c ff ff ff       	jmp    c0008f2b <UnixFile::UnixFile(int)+0x125>
c0008faf:	90                   	nop
c0008fb0:	83 c4 28             	add    esp,0x28
c0008fb3:	5b                   	pop    ebx
c0008fb4:	c3                   	ret    
c0008fb5:	90                   	nop

c0008fb6 <ReservedFilename::ReservedFilename(int)>:
c0008fb6:	83 ec 0c             	sub    esp,0xc
c0008fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fbd:	83 ec 08             	sub    esp,0x8
c0008fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fc4:	50                   	push   eax
c0008fc5:	e8 3c fe ff ff       	call   c0008e06 <UnixFile::UnixFile(int)>
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	ba a4 d4 01 c0       	mov    edx,0xc001d4a4
c0008fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fd6:	89 10                	mov    DWORD PTR [eax],edx
c0008fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008fe0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fe3:	90                   	nop
c0008fe4:	83 c4 0c             	add    esp,0xc
c0008fe7:	c3                   	ret    

c0008fe8 <UnixFile::~UnixFile()>:
c0008fe8:	83 ec 1c             	sub    esp,0x1c
c0008feb:	ba 88 d4 01 c0       	mov    edx,0xc001d488
c0008ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ff4:	89 10                	mov    DWORD PTR [eax],edx
c0008ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ffa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009002:	7f 73                	jg     c0009077 <UnixFile::~UnixFile()+0x8f>
c0009004:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000900c:	83 ec 0c             	sub    esp,0xc
c000900f:	68 38 06 02 c0       	push   0xc0020638
c0009014:	e8 f3 2f 01 00       	call   c001c00c <LinkedList<UnixFile>::getFirstElement()>
c0009019:	83 c4 10             	add    esp,0x10
c000901c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009020:	83 ec 0c             	sub    esp,0xc
c0009023:	68 38 06 02 c0       	push   0xc0020638
c0009028:	e8 e7 2f 01 00       	call   c001c014 <LinkedList<UnixFile>::removeFirst()>
c000902d:	83 c4 10             	add    esp,0x10
c0009030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009034:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009038:	74 40                	je     c000907a <UnixFile::~UnixFile()+0x92>
c000903a:	83 ec 08             	sub    esp,0x8
c000903d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009041:	68 38 06 02 c0       	push   0xc0020638
c0009046:	e8 ed 2e 01 00       	call   c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009052:	8d 50 01             	lea    edx,[eax+0x1]
c0009055:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009059:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000905e:	0f 94 c0             	sete   al
c0009061:	84 c0                	test   al,al
c0009063:	74 a7                	je     c000900c <UnixFile::~UnixFile()+0x24>
c0009065:	83 ec 0c             	sub    esp,0xc
c0009068:	68 60 d4 01 c0       	push   0xc001d460
c000906d:	e8 8d 70 00 00       	call   c00100ff <KePanic(char const*)>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	eb 95                	jmp    c000900c <UnixFile::~UnixFile()+0x24>
c0009077:	90                   	nop
c0009078:	eb 01                	jmp    c000907b <UnixFile::~UnixFile()+0x93>
c000907a:	90                   	nop
c000907b:	90                   	nop
c000907c:	83 c4 1c             	add    esp,0x1c
c000907f:	c3                   	ret    

c0009080 <UnixFile::~UnixFile()>:
c0009080:	83 ec 0c             	sub    esp,0xc
c0009083:	83 ec 0c             	sub    esp,0xc
c0009086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908a:	e8 59 ff ff ff       	call   c0008fe8 <UnixFile::~UnixFile()>
c000908f:	83 c4 10             	add    esp,0x10
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	6a 0c                	push   0xc
c0009097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909b:	e8 06 13 00 00       	call   c000a3a6 <operator delete(void*, unsigned long)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	83 c4 0c             	add    esp,0xc
c00090a6:	c3                   	ret    
c00090a7:	90                   	nop

c00090a8 <ReservedFilename::~ReservedFilename()>:
c00090a8:	83 ec 0c             	sub    esp,0xc
c00090ab:	ba a4 d4 01 c0       	mov    edx,0xc001d4a4
c00090b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 25 ff ff ff       	call   c0008fe8 <UnixFile::~UnixFile()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	90                   	nop
c00090c7:	83 c4 0c             	add    esp,0xc
c00090ca:	c3                   	ret    
c00090cb:	90                   	nop

c00090cc <ReservedFilename::~ReservedFilename()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	83 ec 0c             	sub    esp,0xc
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 cd ff ff ff       	call   c00090a8 <ReservedFilename::~ReservedFilename()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 ec 08             	sub    esp,0x8
c00090e1:	6a 0c                	push   0xc
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 ba 12 00 00       	call   c000a3a6 <operator delete(void*, unsigned long)>
c00090ec:	83 c4 10             	add    esp,0x10
c00090ef:	83 c4 0c             	add    esp,0xc
c00090f2:	c3                   	ret    

c00090f3 <getFromFileDescriptor(int)>:
c00090f3:	53                   	push   ebx
c00090f4:	83 ec 08             	sub    esp,0x8
c00090f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090fb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009101:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009107:	7f 2c                	jg     c0009135 <getFromFileDescriptor(int)+0x42>
c0009109:	83 ec 0c             	sub    esp,0xc
c000910c:	68 38 06 02 c0       	push   0xc0020638
c0009111:	e8 f6 2e 01 00       	call   c001c00c <LinkedList<UnixFile>::getFirstElement()>
c0009116:	83 c4 10             	add    esp,0x10
c0009119:	85 c0                	test   eax,eax
c000911b:	75 04                	jne    c0009121 <getFromFileDescriptor(int)+0x2e>
c000911d:	31 c0                	xor    eax,eax
c000911f:	eb 6e                	jmp    c000918f <getFromFileDescriptor(int)+0x9c>
c0009121:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009124:	74 69                	je     c000918f <getFromFileDescriptor(int)+0x9c>
c0009126:	52                   	push   edx
c0009127:	52                   	push   edx
c0009128:	50                   	push   eax
c0009129:	68 38 06 02 c0       	push   0xc0020638
c000912e:	e8 83 2f 01 00       	call   c001c0b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009133:	eb e1                	jmp    c0009116 <getFromFileDescriptor(int)+0x23>
c0009135:	a1 2c 06 02 c0       	mov    eax,ds:0xc002062c
c000913a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009140:	74 4d                	je     c000918f <getFromFileDescriptor(int)+0x9c>
c0009142:	a1 30 06 02 c0       	mov    eax,ds:0xc0020630
c0009147:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000914d:	74 40                	je     c000918f <getFromFileDescriptor(int)+0x9c>
c000914f:	a1 28 06 02 c0       	mov    eax,ds:0xc0020628
c0009154:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000915a:	74 33                	je     c000918f <getFromFileDescriptor(int)+0x9c>
c000915c:	a1 24 06 02 c0       	mov    eax,ds:0xc0020624
c0009161:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009167:	74 26                	je     c000918f <getFromFileDescriptor(int)+0x9c>
c0009169:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000916f:	83 f8 08             	cmp    eax,0x8
c0009172:	77 09                	ja     c000917d <getFromFileDescriptor(int)+0x8a>
c0009174:	8b 04 85 00 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa00]
c000917b:	eb 12                	jmp    c000918f <getFromFileDescriptor(int)+0x9c>
c000917d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009183:	83 fb 08             	cmp    ebx,0x8
c0009186:	77 95                	ja     c000911d <getFromFileDescriptor(int)+0x2a>
c0009188:	8b 04 9d c0 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfa40]
c000918f:	83 c4 08             	add    esp,0x8
c0009192:	5b                   	pop    ebx
c0009193:	c3                   	ret    

c0009194 <__static_initialization_and_destruction_0(int, int)>:
c0009194:	83 ec 0c             	sub    esp,0xc
c0009197:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000919c:	75 34                	jne    c00091d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000919e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091a6:	75 2a                	jne    c00091d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091a8:	83 ec 0c             	sub    esp,0xc
c00091ab:	68 38 06 02 c0       	push   0xc0020638
c00091b0:	e8 41 2d 01 00       	call   c001bef6 <LinkedList<UnixFile>::LinkedList()>
c00091b5:	83 c4 10             	add    esp,0x10
c00091b8:	83 ec 04             	sub    esp,0x4
c00091bb:	68 e8 f1 01 c0       	push   0xc001f1e8
c00091c0:	68 38 06 02 c0       	push   0xc0020638
c00091c5:	68 f4 be 01 c0       	push   0xc001bef4
c00091ca:	e8 87 11 00 00       	call   c000a356 <__cxa_atexit>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	90                   	nop
c00091d3:	83 c4 0c             	add    esp,0xc
c00091d6:	c3                   	ret    

c00091d7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00091d7:	83 ec 0c             	sub    esp,0xc
c00091da:	83 ec 08             	sub    esp,0x8
c00091dd:	68 ff ff 00 00       	push   0xffff
c00091e2:	6a 01                	push   0x1
c00091e4:	e8 ab ff ff ff       	call   c0009194 <__static_initialization_and_destruction_0(int, int)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	83 c4 0c             	add    esp,0xc
c00091ef:	c3                   	ret    

c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091f0:	53                   	push   ebx
c00091f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091f9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	d1 e8                	shr    eax,1
c0009203:	03 05 68 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f268
c0009209:	83 e1 01             	and    ecx,0x1
c000920c:	8a 10                	mov    dl,BYTE PTR [eax]
c000920e:	75 09                	jne    c0009219 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009210:	83 e2 f0             	and    edx,0xfffffff0
c0009213:	09 da                	or     edx,ebx
c0009215:	88 10                	mov    BYTE PTR [eax],dl
c0009217:	5b                   	pop    ebx
c0009218:	c3                   	ret    
c0009219:	c1 e3 04             	shl    ebx,0x4
c000921c:	83 e2 0f             	and    edx,0xf
c000921f:	09 da                	or     edx,ebx
c0009221:	88 10                	mov    BYTE PTR [eax],dl
c0009223:	5b                   	pop    ebx
c0009224:	c3                   	ret    

c0009225 <Virt::getPageState(unsigned long)>:
c0009225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009229:	8b 0d 68 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f268
c000922f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009235:	89 d0                	mov    eax,edx
c0009237:	d1 e8                	shr    eax,1
c0009239:	83 e2 01             	and    edx,0x1
c000923c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000923f:	75 04                	jne    c0009245 <Virt::getPageState(unsigned long)+0x20>
c0009241:	83 e0 0f             	and    eax,0xf
c0009244:	c3                   	ret    
c0009245:	c0 e8 04             	shr    al,0x4
c0009248:	c3                   	ret    

c0009249 <Virt::allocateKernelVirtualPages(int)>:
c0009249:	55                   	push   ebp
c000924a:	31 ed                	xor    ebp,ebp
c000924c:	57                   	push   edi
c000924d:	56                   	push   esi
c000924e:	53                   	push   ebx
c000924f:	31 db                	xor    ebx,ebx
c0009251:	83 ec 1c             	sub    esp,0x1c
c0009254:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009258:	8b 3d 64 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f264
c000925e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009263:	57                   	push   edi
c0009264:	e8 bc ff ff ff       	call   c0009225 <Virt::getPageState(unsigned long)>
c0009269:	5a                   	pop    edx
c000926a:	84 c0                	test   al,al
c000926c:	75 3a                	jne    c00092a8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000926e:	85 db                	test   ebx,ebx
c0009270:	75 02                	jne    c0009274 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009272:	89 fd                	mov    ebp,edi
c0009274:	43                   	inc    ebx
c0009275:	39 f3                	cmp    ebx,esi
c0009277:	74 5a                	je     c00092d3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009279:	47                   	inc    edi
c000927a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009280:	76 31                	jbe    c00092b3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009282:	c7 05 64 f2 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f264,0xc8000
c000928c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009291:	75 28                	jne    c00092bb <Virt::allocateKernelVirtualPages(int)+0x72>
c0009293:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009298:	bf 00 80 0c 00       	mov    edi,0xc8000
c000929d:	57                   	push   edi
c000929e:	e8 82 ff ff ff       	call   c0009225 <Virt::getPageState(unsigned long)>
c00092a3:	5a                   	pop    edx
c00092a4:	84 c0                	test   al,al
c00092a6:	74 c6                	je     c000926e <Virt::allocateKernelVirtualPages(int)+0x25>
c00092a8:	31 db                	xor    ebx,ebx
c00092aa:	47                   	inc    edi
c00092ab:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092b1:	77 cf                	ja     c0009282 <Virt::allocateKernelVirtualPages(int)+0x39>
c00092b3:	89 3d 64 f2 01 c0    	mov    DWORD PTR ds:0xc001f264,edi
c00092b9:	eb a8                	jmp    c0009263 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	68 b8 d4 01 c0       	push   0xc001d4b8
c00092c3:	e8 37 6e 00 00       	call   c00100ff <KePanic(char const*)>
c00092c8:	8b 3d 64 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f264
c00092ce:	83 c4 10             	add    esp,0x10
c00092d1:	eb 90                	jmp    c0009263 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092d3:	89 2d 64 f2 01 c0    	mov    DWORD PTR ds:0xc001f264,ebp
c00092d9:	4b                   	dec    ebx
c00092da:	74 5f                	je     c000933b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00092dc:	85 f6                	test   esi,esi
c00092de:	74 3d                	je     c000931d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092e0:	89 e8                	mov    eax,ebp
c00092e2:	31 db                	xor    ebx,ebx
c00092e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00092e7:	eb 14                	jmp    c00092fd <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092e9:	6a 01                	push   0x1
c00092eb:	43                   	inc    ebx
c00092ec:	50                   	push   eax
c00092ed:	e8 fe fe ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092f2:	58                   	pop    eax
c00092f3:	39 f3                	cmp    ebx,esi
c00092f5:	5a                   	pop    edx
c00092f6:	74 25                	je     c000931d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092f8:	a1 64 f2 01 c0       	mov    eax,ds:0xc001f264
c00092fd:	8d 50 01             	lea    edx,[eax+0x1]
c0009300:	85 db                	test   ebx,ebx
c0009302:	89 15 64 f2 01 c0    	mov    DWORD PTR ds:0xc001f264,edx
c0009308:	74 20                	je     c000932a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000930a:	39 df                	cmp    edi,ebx
c000930c:	75 db                	jne    c00092e9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000930e:	6a 03                	push   0x3
c0009310:	43                   	inc    ebx
c0009311:	50                   	push   eax
c0009312:	e8 d9 fe ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009317:	59                   	pop    ecx
c0009318:	39 f3                	cmp    ebx,esi
c000931a:	58                   	pop    eax
c000931b:	75 db                	jne    c00092f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000931d:	83 c4 1c             	add    esp,0x1c
c0009320:	89 e8                	mov    eax,ebp
c0009322:	5b                   	pop    ebx
c0009323:	c1 e0 0c             	shl    eax,0xc
c0009326:	5e                   	pop    esi
c0009327:	5f                   	pop    edi
c0009328:	5d                   	pop    ebp
c0009329:	c3                   	ret    
c000932a:	6a 02                	push   0x2
c000932c:	bb 01 00 00 00       	mov    ebx,0x1
c0009331:	50                   	push   eax
c0009332:	e8 b9 fe ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009337:	58                   	pop    eax
c0009338:	5a                   	pop    edx
c0009339:	eb bd                	jmp    c00092f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000933b:	6a 04                	push   0x4
c000933d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009340:	55                   	push   ebp
c0009341:	a3 64 f2 01 c0       	mov    ds:0xc001f264,eax
c0009346:	e8 a5 fe ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000934b:	59                   	pop    ecx
c000934c:	89 e8                	mov    eax,ebp
c000934e:	5b                   	pop    ebx
c000934f:	c1 e0 0c             	shl    eax,0xc
c0009352:	83 c4 1c             	add    esp,0x1c
c0009355:	5b                   	pop    ebx
c0009356:	5e                   	pop    esi
c0009357:	5f                   	pop    edi
c0009358:	5d                   	pop    ebp
c0009359:	c3                   	ret    

c000935a <Virt::freeSwapfilePage(unsigned long)>:
c000935a:	53                   	push   ebx
c000935b:	8b 15 4c 06 02 c0    	mov    edx,DWORD PTR ds:0xc002064c
c0009361:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009365:	b8 01 00 00 00       	mov    eax,0x1
c000936a:	89 cb                	mov    ebx,ecx
c000936c:	d3 e0                	shl    eax,cl
c000936e:	c1 eb 05             	shr    ebx,0x5
c0009371:	f7 d0                	not    eax
c0009373:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009376:	5b                   	pop    ebx
c0009377:	c3                   	ret    

c0009378 <Virt::swapIDToSector(unsigned long)>:
c0009378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000937c:	0f af 05 6c f2 01 c0 	imul   eax,DWORD PTR ds:0xc001f26c
c0009383:	03 05 74 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f274
c0009389:	c3                   	ret    

c000938a <Virt::allocateSwapfilePage()>:
c000938a:	55                   	push   ebp
c000938b:	31 d2                	xor    edx,edx
c000938d:	57                   	push   edi
c000938e:	56                   	push   esi
c000938f:	53                   	push   ebx
c0009390:	83 ec 0c             	sub    esp,0xc
c0009393:	8b 0d 6c f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f26c
c0009399:	a1 70 f2 01 c0       	mov    eax,ds:0xc001f270
c000939e:	f7 f1                	div    ecx
c00093a0:	39 0d 70 f2 01 c0    	cmp    DWORD PTR ds:0xc001f270,ecx
c00093a6:	72 2d                	jb     c00093d5 <Virt::allocateSwapfilePage()+0x4b>
c00093a8:	8b 35 4c 06 02 c0    	mov    esi,DWORD PTR ds:0xc002064c
c00093ae:	8b 16                	mov    edx,DWORD PTR [esi]
c00093b0:	f6 c2 01             	test   dl,0x1
c00093b3:	74 3c                	je     c00093f1 <Virt::allocateSwapfilePage()+0x67>
c00093b5:	31 c9                	xor    ecx,ecx
c00093b7:	bf 01 00 00 00       	mov    edi,0x1
c00093bc:	eb 12                	jmp    c00093d0 <Virt::allocateSwapfilePage()+0x46>
c00093be:	89 fd                	mov    ebp,edi
c00093c0:	89 ca                	mov    edx,ecx
c00093c2:	d3 e5                	shl    ebp,cl
c00093c4:	c1 ea 05             	shr    edx,0x5
c00093c7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00093ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00093cc:	85 ea                	test   edx,ebp
c00093ce:	74 2a                	je     c00093fa <Virt::allocateSwapfilePage()+0x70>
c00093d0:	41                   	inc    ecx
c00093d1:	39 c8                	cmp    eax,ecx
c00093d3:	77 e9                	ja     c00093be <Virt::allocateSwapfilePage()+0x34>
c00093d5:	83 ec 0c             	sub    esp,0xc
c00093d8:	68 1f d6 01 c0       	push   0xc001d61f
c00093dd:	e8 1d 6d 00 00       	call   c00100ff <KePanic(char const*)>
c00093e2:	83 c4 10             	add    esp,0x10
c00093e5:	31 c9                	xor    ecx,ecx
c00093e7:	83 c4 0c             	add    esp,0xc
c00093ea:	89 c8                	mov    eax,ecx
c00093ec:	5b                   	pop    ebx
c00093ed:	5e                   	pop    esi
c00093ee:	5f                   	pop    edi
c00093ef:	5d                   	pop    ebp
c00093f0:	c3                   	ret    
c00093f1:	89 f3                	mov    ebx,esi
c00093f3:	bd 01 00 00 00       	mov    ebp,0x1
c00093f8:	31 c9                	xor    ecx,ecx
c00093fa:	09 ea                	or     edx,ebp
c00093fc:	89 c8                	mov    eax,ecx
c00093fe:	89 13                	mov    DWORD PTR [ebx],edx
c0009400:	83 c4 0c             	add    esp,0xc
c0009403:	5b                   	pop    ebx
c0009404:	5e                   	pop    esi
c0009405:	5f                   	pop    edi
c0009406:	5d                   	pop    ebp
c0009407:	c3                   	ret    

c0009408 <Virt::virtualMemorySetup()>:
c0009408:	53                   	push   ebx
c0009409:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000940e:	6a 0f                	push   0xf
c0009410:	53                   	push   ebx
c0009411:	43                   	inc    ebx
c0009412:	e8 d9 fd ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009417:	58                   	pop    eax
c0009418:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000941e:	5a                   	pop    edx
c000941f:	75 ed                	jne    c000940e <Virt::virtualMemorySetup()+0x6>
c0009421:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009426:	6a 00                	push   0x0
c0009428:	53                   	push   ebx
c0009429:	43                   	inc    ebx
c000942a:	e8 c1 fd ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000942f:	59                   	pop    ecx
c0009430:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009436:	58                   	pop    eax
c0009437:	75 ed                	jne    c0009426 <Virt::virtualMemorySetup()+0x1e>
c0009439:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000943e:	6a 0f                	push   0xf
c0009440:	53                   	push   ebx
c0009441:	43                   	inc    ebx
c0009442:	e8 a9 fd ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009447:	58                   	pop    eax
c0009448:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000944e:	5a                   	pop    edx
c000944f:	75 ed                	jne    c000943e <Virt::virtualMemorySetup()+0x36>
c0009451:	5b                   	pop    ebx
c0009452:	c3                   	ret    

c0009453 <Virt::setupPageSwapping(int)>:
c0009453:	53                   	push   ebx
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000945b:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c0009460:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009466:	8b 10                	mov    edx,DWORD PTR [eax]
c0009468:	53                   	push   ebx
c0009469:	c1 e3 0b             	shl    ebx,0xb
c000946c:	68 36 d6 01 c0       	push   0xc001d636
c0009471:	50                   	push   eax
c0009472:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009475:	89 1d 70 f2 01 c0    	mov    DWORD PTR ds:0xc001f270,ebx
c000947b:	c6 05 78 f2 01 c0 43 	mov    BYTE PTR ds:0xc001f278,0x43
c0009482:	c1 eb 08             	shr    ebx,0x8
c0009485:	a3 74 f2 01 c0       	mov    ds:0xc001f274,eax
c000948a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000948d:	c7 05 6c f2 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f26c,0x8
c0009497:	e8 65 e3 ff ff       	call   c0007801 <malloc>
c000949c:	83 c4 0c             	add    esp,0xc
c000949f:	89 c1                	mov    ecx,eax
c00094a1:	a3 4c 06 02 c0       	mov    ds:0xc002064c,eax
c00094a6:	31 d2                	xor    edx,edx
c00094a8:	a1 70 f2 01 c0       	mov    eax,ds:0xc001f270
c00094ad:	f7 35 6c f2 01 c0    	div    DWORD PTR ds:0xc001f26c
c00094b3:	c1 e8 05             	shr    eax,0x5
c00094b6:	50                   	push   eax
c00094b7:	6a 00                	push   0x0
c00094b9:	51                   	push   ecx
c00094ba:	e8 11 70 ff ff       	call   c00004d0 <memset>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	5b                   	pop    ebx
c00094c3:	c3                   	ret    

c00094c4 <VAS::VAS()>:
c00094c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094de:	a3 50 06 02 c0       	mov    ds:0xc0020650,eax
c00094e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ef:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00094fd:	90                   	nop
c00094fe:	c3                   	ret    
c00094ff:	90                   	nop

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 d8 d4 01 c0       	push   0xc001d4d8
c0009521:	e8 d9 6b 00 00       	call   c00100ff <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 50 06 02 c0       	mov    eax,ds:0xc0020650
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 51 fc ff ff       	call   c0009225 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 4d d6 01 c0       	push   0xc001d64d
c00095e8:	e8 12 6b 00 00       	call   c00100ff <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d 50 06 02 c0    	mov    edi,DWORD PTR ds:0xc0020650
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 5f e4 ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 fc d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d4fc
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 be 6a 00 00       	jmp    c00100ff <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 69 d6 01 c0       	push   0xc001d669
c000964f:	e8 ab 6a 00 00       	call   c00100ff <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 89 fb ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 70 fb ff ff       	call   c00091f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 85 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d685
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 62 6a 00 00       	jmp    c00100ff <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 20 d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d520
c00096bd:	e9 da 0d 00 00       	jmp    c000a49c <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096ec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096f0:	85 db                	test   ebx,ebx
c00096f2:	7e 22                	jle    c0009716 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096f4:	c1 e3 0c             	shl    ebx,0xc
c00096f7:	01 f3                	add    ebx,esi
c00096f9:	56                   	push   esi
c00096fa:	81 c6 00 10 00 00    	add    esi,0x1000
c0009700:	55                   	push   ebp
c0009701:	e8 54 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0009706:	5a                   	pop    edx
c0009707:	59                   	pop    ecx
c0009708:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970a:	21 f9                	and    ecx,edi
c000970c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009710:	39 f3                	cmp    ebx,esi
c0009712:	89 08                	mov    DWORD PTR [eax],ecx
c0009714:	75 e3                	jne    c00096f9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009716:	5b                   	pop    ebx
c0009717:	5e                   	pop    esi
c0009718:	5f                   	pop    edi
c0009719:	5d                   	pop    ebp
c000971a:	c3                   	ret    
c000971b:	90                   	nop

c000971c <VAS::setToWriteCombining(unsigned long, int)>:
c000971c:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009721:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009727:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000972e:	75 01                	jne    c0009731 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009730:	c3                   	ret    
c0009731:	68 80 00 00 00       	push   0x80
c0009736:	6a ff                	push   0xffffffff
c0009738:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000973c:	50                   	push   eax
c000973d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009741:	52                   	push   edx
c0009742:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009746:	51                   	push   ecx
c0009747:	e8 90 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000974c:	83 c4 14             	add    esp,0x14
c000974f:	c3                   	ret    

c0009750 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009750:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009759:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000975c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009760:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009763:	19 c0                	sbb    eax,eax
c0009765:	83 ca 03             	or     edx,0x3
c0009768:	83 e0 fc             	and    eax,0xfffffffc
c000976b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009772:	0f 20 d8             	mov    eax,cr3
c0009775:	0f 22 d8             	mov    cr3,eax
c0009778:	c3                   	ret    
c0009779:	90                   	nop

c000977a <VAS::~VAS()>:
c000977a:	83 ec 2c             	sub    esp,0x2c
c000977d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009785:	fa                   	cli    
c0009786:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000978b:	40                   	inc    eax
c000978c:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0009791:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009796:	8b 00                	mov    eax,DWORD PTR [eax]
c0009798:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000979b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097a5:	6a 01                	push   0x1
c00097a7:	50                   	push   eax
c00097a8:	e8 a3 ff ff ff       	call   c0009750 <VAS::mapOtherVASIn(bool, VAS*)>
c00097ad:	83 c4 0c             	add    esp,0xc
c00097b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097b8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097c0:	0f 8f d4 00 00 00    	jg     c000989a <VAS::~VAS()+0x120>
c00097c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097d1:	c1 e2 02             	shl    edx,0x2
c00097d4:	01 d0                	add    eax,edx
c00097d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097e0:	83 e0 01             	and    eax,0x1
c00097e3:	0f 84 a8 00 00 00    	je     c0009891 <VAS::~VAS()+0x117>
c00097e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097f1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097f9:	7f 72                	jg     c000986d <VAS::~VAS()+0xf3>
c00097fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00097ff:	c1 e0 0a             	shl    eax,0xa
c0009802:	89 c2                	mov    edx,eax
c0009804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009808:	01 d0                	add    eax,edx
c000980a:	c1 e0 0c             	shl    eax,0xc
c000980d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009811:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009816:	8b 00                	mov    eax,DWORD PTR [eax]
c0009818:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000981b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009821:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009825:	6a 01                	push   0x1
c0009827:	50                   	push   eax
c0009828:	e8 01 fd ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000982d:	83 c4 0c             	add    esp,0xc
c0009830:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009838:	8b 00                	mov    eax,DWORD PTR [eax]
c000983a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000983e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009842:	25 01 04 00 00       	and    eax,0x401
c0009847:	3d 01 04 00 00       	cmp    eax,0x401
c000984c:	75 19                	jne    c0009867 <VAS::~VAS()+0xed>
c000984e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009852:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009857:	83 ec 0c             	sub    esp,0xc
c000985a:	50                   	push   eax
c000985b:	e8 1b e2 ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009867:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000986b:	eb 84                	jmp    c00097f1 <VAS::~VAS()+0x77>
c000986d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009871:	25 00 04 00 00       	and    eax,0x400
c0009876:	74 19                	je     c0009891 <VAS::~VAS()+0x117>
c0009878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000987c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009881:	83 ec 0c             	sub    esp,0xc
c0009884:	50                   	push   eax
c0009885:	e8 f1 e1 ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c000988a:	83 c4 10             	add    esp,0x10
c000988d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009891:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009895:	e9 1e ff ff ff       	jmp    c00097b8 <VAS::~VAS()+0x3e>
c000989a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000989e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098a1:	83 ec 0c             	sub    esp,0xc
c00098a4:	50                   	push   eax
c00098a5:	e8 cf fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098aa:	83 c4 10             	add    esp,0x10
c00098ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	50                   	push   eax
c00098b8:	e8 be e1 ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c00098bd:	83 c4 10             	add    esp,0x10
c00098c0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098c4:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00098c9:	48                   	dec    eax
c00098ca:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00098cf:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00098d4:	85 c0                	test   eax,eax
c00098d6:	75 01                	jne    c00098d9 <VAS::~VAS()+0x15f>
c00098d8:	fb                   	sti    
c00098d9:	90                   	nop
c00098da:	83 c4 2c             	add    esp,0x2c
c00098dd:	c3                   	ret    

c00098de <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098de:	55                   	push   ebp
c00098df:	57                   	push   edi
c00098e0:	56                   	push   esi
c00098e1:	53                   	push   ebx
c00098e2:	83 ec 1c             	sub    esp,0x1c
c00098e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098ed:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098f3:	77 0b                	ja     c0009900 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098f5:	0f 20 d8             	mov    eax,cr3
c00098f8:	0f 20 d8             	mov    eax,cr3
c00098fb:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00098fe:	75 47                	jne    c0009947 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009904:	09 d8                	or     eax,ebx
c0009906:	a9 ff 0f 00 00       	test   eax,0xfff
c000990b:	75 57                	jne    c0009964 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000990d:	89 de                	mov    esi,ebx
c000990f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009912:	c1 ee 16             	shr    esi,0x16
c0009915:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000991c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009920:	74 54                	je     c0009976 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009922:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009926:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000992c:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009930:	c1 e6 0c             	shl    esi,0xc
c0009933:	c1 eb 0a             	shr    ebx,0xa
c0009936:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000993c:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000993f:	83 c4 1c             	add    esp,0x1c
c0009942:	5b                   	pop    ebx
c0009943:	5e                   	pop    esi
c0009944:	5f                   	pop    edi
c0009945:	5d                   	pop    ebp
c0009946:	c3                   	ret    
c0009947:	83 ec 0c             	sub    esp,0xc
c000994a:	68 44 d5 01 c0       	push   0xc001d544
c000994f:	e8 48 0b 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0009954:	83 c4 10             	add    esp,0x10
c0009957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000995b:	09 d8                	or     eax,ebx
c000995d:	a9 ff 0f 00 00       	test   eax,0xfff
c0009962:	74 a9                	je     c000990d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	68 ac d5 01 c0       	push   0xc001d5ac
c000996c:	e8 8e 67 00 00       	call   c00100ff <KePanic(char const*)>
c0009971:	83 c4 10             	add    esp,0x10
c0009974:	eb 97                	jmp    c000990d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009976:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997a:	e8 5e e1 ff ff       	call   c0007add <Phys::allocatePage()>
c000997f:	83 ec 0c             	sub    esp,0xc
c0009982:	89 c5                	mov    ebp,eax
c0009984:	8b 0d 50 06 02 c0    	mov    ecx,DWORD PTR ds:0xc0020650
c000998a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000998e:	6a 01                	push   0x1
c0009990:	e8 b4 f8 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c0009995:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000999c:	6a 01                	push   0x1
c000999e:	50                   	push   eax
c000999f:	55                   	push   ebp
c00099a0:	81 cd 07 04 00 00    	or     ebp,0x407
c00099a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099aa:	51                   	push   ecx
c00099ab:	e8 28 02 00 00       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099b0:	83 c4 1c             	add    esp,0x1c
c00099b3:	68 00 10 00 00       	push   0x1000
c00099b8:	6a 00                	push   0x0
c00099ba:	50                   	push   eax
c00099bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099bf:	e8 0c 6b ff ff       	call   c00004d0 <memset>
c00099c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099c8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099cb:	e8 a9 fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099d4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099d7:	83 c4 10             	add    esp,0x10
c00099da:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099dd:	e9 40 ff ff ff       	jmp    c0009922 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099e2 <VAS::allocatePages(int, int)>:
c00099e2:	55                   	push   ebp
c00099e3:	57                   	push   edi
c00099e4:	56                   	push   esi
c00099e5:	53                   	push   ebx
c00099e6:	83 ec 1c             	sub    esp,0x1c
c00099e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099ed:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c00099f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099f8:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00099fe:	83 e0 01             	and    eax,0x1
c0009a01:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a05:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a09:	0f 85 cc 00 00 00    	jne    c0009adb <VAS::allocatePages(int, int)+0xf9>
c0009a0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a16:	85 c0                	test   eax,eax
c0009a18:	0f 84 a1 00 00 00    	je     c0009abf <VAS::allocatePages(int, int)+0xdd>
c0009a1e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a26:	c1 e6 0c             	shl    esi,0xc
c0009a29:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a2d:	85 c0                	test   eax,eax
c0009a2f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a32:	7e 33                	jle    c0009a67 <VAS::allocatePages(int, int)+0x85>
c0009a34:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a3c:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a42:	e8 96 e0 ff ff       	call   c0007add <Phys::allocatePage()>
c0009a47:	55                   	push   ebp
c0009a48:	53                   	push   ebx
c0009a49:	50                   	push   eax
c0009a4a:	57                   	push   edi
c0009a4b:	e8 8e fe ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a50:	83 c4 10             	add    esp,0x10
c0009a53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a58:	74 03                	je     c0009a5d <VAS::allocatePages(int, int)+0x7b>
c0009a5a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a63:	39 de                	cmp    esi,ebx
c0009a65:	75 db                	jne    c0009a42 <VAS::allocatePages(int, int)+0x60>
c0009a67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a6c:	75 12                	jne    c0009a80 <VAS::allocatePages(int, int)+0x9e>
c0009a6e:	0f 20 d8             	mov    eax,cr3
c0009a71:	0f 22 d8             	mov    cr3,eax
c0009a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a78:	83 c4 1c             	add    esp,0x1c
c0009a7b:	5b                   	pop    ebx
c0009a7c:	5e                   	pop    esi
c0009a7d:	5f                   	pop    edi
c0009a7e:	5d                   	pop    ebp
c0009a7f:	c3                   	ret    
c0009a80:	c1 ee 0a             	shr    esi,0xa
c0009a83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a8d:	c1 eb 0a             	shr    ebx,0xa
c0009a90:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a96:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009a9c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009aa2:	39 c3                	cmp    ebx,eax
c0009aa4:	77 ce                	ja     c0009a74 <VAS::allocatePages(int, int)+0x92>
c0009aa6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aa9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aaf:	39 d8                	cmp    eax,ebx
c0009ab1:	73 f3                	jae    c0009aa6 <VAS::allocatePages(int, int)+0xc4>
c0009ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab7:	83 c4 1c             	add    esp,0x1c
c0009aba:	5b                   	pop    ebx
c0009abb:	5e                   	pop    esi
c0009abc:	5f                   	pop    edi
c0009abd:	5d                   	pop    ebp
c0009abe:	c3                   	ret    
c0009abf:	83 ec 0c             	sub    esp,0xc
c0009ac2:	68 d0 d5 01 c0       	push   0xc001d5d0
c0009ac7:	e8 33 66 00 00       	call   c00100ff <KePanic(char const*)>
c0009acc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009acf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ad3:	83 c4 10             	add    esp,0x10
c0009ad6:	e9 43 ff ff ff       	jmp    c0009a1e <VAS::allocatePages(int, int)+0x3c>
c0009adb:	83 ec 0c             	sub    esp,0xc
c0009ade:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009ae2:	51                   	push   ecx
c0009ae3:	e8 61 f7 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c0009ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009af4:	0f 87 9b 00 00 00    	ja     c0009b95 <VAS::allocatePages(int, int)+0x1b3>
c0009afa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009afe:	85 d2                	test   edx,edx
c0009b00:	7e 3c                	jle    c0009b3e <VAS::allocatePages(int, int)+0x15c>
c0009b02:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b0e:	c1 e5 0c             	shl    ebp,0xc
c0009b11:	81 ce 00 04 00 00    	or     esi,0x400
c0009b17:	01 dd                	add    ebp,ebx
c0009b19:	e8 bf df ff ff       	call   c0007add <Phys::allocatePage()>
c0009b1e:	56                   	push   esi
c0009b1f:	53                   	push   ebx
c0009b20:	50                   	push   eax
c0009b21:	57                   	push   edi
c0009b22:	e8 b7 fd ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b27:	83 c4 10             	add    esp,0x10
c0009b2a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b2f:	74 03                	je     c0009b34 <VAS::allocatePages(int, int)+0x152>
c0009b31:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b34:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3a:	39 dd                	cmp    ebp,ebx
c0009b3c:	75 db                	jne    c0009b19 <VAS::allocatePages(int, int)+0x137>
c0009b3e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b43:	0f 84 25 ff ff ff    	je     c0009a6e <VAS::allocatePages(int, int)+0x8c>
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b51:	89 d3                	mov    ebx,edx
c0009b53:	c1 e0 0c             	shl    eax,0xc
c0009b56:	c1 eb 0a             	shr    ebx,0xa
c0009b59:	01 d0                	add    eax,edx
c0009b5b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b61:	c1 e8 0a             	shr    eax,0xa
c0009b64:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b6f:	2d 00 00 40 00       	sub    eax,0x400000
c0009b74:	39 c3                	cmp    ebx,eax
c0009b76:	0f 87 f8 fe ff ff    	ja     c0009a74 <VAS::allocatePages(int, int)+0x92>
c0009b7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b85:	39 d8                	cmp    eax,ebx
c0009b87:	73 f3                	jae    c0009b7c <VAS::allocatePages(int, int)+0x19a>
c0009b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8d:	83 c4 1c             	add    esp,0x1c
c0009b90:	5b                   	pop    ebx
c0009b91:	5e                   	pop    esi
c0009b92:	5f                   	pop    edi
c0009b93:	5d                   	pop    ebp
c0009b94:	c3                   	ret    
c0009b95:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009b9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ba0:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ba7:	0f 84 4d ff ff ff    	je     c0009afa <VAS::allocatePages(int, int)+0x118>
c0009bad:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bb5:	e9 40 ff ff ff       	jmp    c0009afa <VAS::allocatePages(int, int)+0x118>

c0009bba <VAS::setCPUSpecific(unsigned long)>:
c0009bba:	83 ec 0c             	sub    esp,0xc
c0009bbd:	6a 05                	push   0x5
c0009bbf:	68 00 00 40 c2       	push   0xc2400000
c0009bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc8:	50                   	push   eax
c0009bc9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bcd:	52                   	push   edx
c0009bce:	e8 0b fd ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd3:	83 c4 1c             	add    esp,0x1c
c0009bd6:	c3                   	ret    
c0009bd7:	90                   	nop

c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bd8:	55                   	push   ebp
c0009bd9:	57                   	push   edi
c0009bda:	56                   	push   esi
c0009bdb:	53                   	push   ebx
c0009bdc:	83 ec 1c             	sub    esp,0x1c
c0009bdf:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009be4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009be8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bee:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009bf2:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009bf8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009bfc:	83 e0 01             	and    eax,0x1
c0009bff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c07:	85 c0                	test   eax,eax
c0009c09:	7e 39                	jle    c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c0f:	89 f3                	mov    ebx,esi
c0009c11:	c1 e0 0c             	shl    eax,0xc
c0009c14:	01 f0                	add    eax,esi
c0009c16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1a:	55                   	push   ebp
c0009c1b:	53                   	push   ebx
c0009c1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c20:	29 f0                	sub    eax,esi
c0009c22:	01 d8                	add    eax,ebx
c0009c24:	50                   	push   eax
c0009c25:	57                   	push   edi
c0009c26:	e8 b3 fc ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c33:	74 03                	je     c0009c38 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c35:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c38:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c3e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c42:	75 d6                	jne    c0009c1a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c49:	75 10                	jne    c0009c5b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c4b:	0f 20 d8             	mov    eax,cr3
c0009c4e:	0f 22 d8             	mov    cr3,eax
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	89 f0                	mov    eax,esi
c0009c56:	5b                   	pop    ebx
c0009c57:	5e                   	pop    esi
c0009c58:	5f                   	pop    edi
c0009c59:	5d                   	pop    ebp
c0009c5a:	c3                   	ret    
c0009c5b:	89 f3                	mov    ebx,esi
c0009c5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c61:	c1 eb 0a             	shr    ebx,0xa
c0009c64:	c1 e0 0c             	shl    eax,0xc
c0009c67:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c6d:	01 f0                	add    eax,esi
c0009c6f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c75:	c1 e8 0a             	shr    eax,0xa
c0009c78:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c7d:	2d 00 00 40 00       	sub    eax,0x400000
c0009c82:	39 c3                	cmp    ebx,eax
c0009c84:	77 cb                	ja     c0009c51 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c86:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c89:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c8f:	39 d8                	cmp    eax,ebx
c0009c91:	73 f3                	jae    c0009c86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c93:	83 c4 1c             	add    esp,0x1c
c0009c96:	89 f0                	mov    eax,esi
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	5d                   	pop    ebp
c0009c9c:	c3                   	ret    
c0009c9d:	90                   	nop

c0009c9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009c9e:	55                   	push   ebp
c0009c9f:	57                   	push   edi
c0009ca0:	56                   	push   esi
c0009ca1:	53                   	push   ebx
c0009ca2:	83 ec 1c             	sub    esp,0x1c
c0009ca5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ca9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cad:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cb1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cb5:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cba:	75 4a                	jne    c0009d06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cbc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cc0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cc3:	c1 eb 16             	shr    ebx,0x16
c0009cc6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009ccd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009cd1:	74 4d                	je     c0009d20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009cd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cd7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009cdb:	c1 e8 0a             	shr    eax,0xa
c0009cde:	80 fa 01             	cmp    dl,0x1
c0009ce1:	19 d2                	sbb    edx,edx
c0009ce3:	c1 e3 0c             	shl    ebx,0xc
c0009ce6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009cea:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009cf0:	25 fc 0f 00 00       	and    eax,0xffc
c0009cf5:	01 d8                	add    eax,ebx
c0009cf7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009cfe:	83 c4 1c             	add    esp,0x1c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    
c0009d06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d0a:	83 ec 0c             	sub    esp,0xc
c0009d0d:	68 fc d5 01 c0       	push   0xc001d5fc
c0009d12:	e8 e8 63 00 00       	call   c00100ff <KePanic(char const*)>
c0009d17:	83 c4 10             	add    esp,0x10
c0009d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d1e:	eb 9c                	jmp    c0009cbc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d24:	e8 b4 dd ff ff       	call   c0007add <Phys::allocatePage()>
c0009d29:	83 ec 0c             	sub    esp,0xc
c0009d2c:	89 c5                	mov    ebp,eax
c0009d2e:	8b 0d 50 06 02 c0    	mov    ecx,DWORD PTR ds:0xc0020650
c0009d34:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d38:	6a 01                	push   0x1
c0009d3a:	e8 0a f5 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c0009d3f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d46:	6a 01                	push   0x1
c0009d48:	50                   	push   eax
c0009d49:	55                   	push   ebp
c0009d4a:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d50:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d54:	51                   	push   ecx
c0009d55:	e8 7e fe ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d5a:	83 c4 1c             	add    esp,0x1c
c0009d5d:	68 00 10 00 00       	push   0x1000
c0009d62:	6a 00                	push   0x0
c0009d64:	50                   	push   eax
c0009d65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d69:	e8 62 67 ff ff       	call   c00004d0 <memset>
c0009d6e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d72:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d75:	e8 ff f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d7a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d87:	e9 47 ff ff ff       	jmp    c0009cd3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d8c <VAS::VAS(bool)>:
c0009d8c:	53                   	push   ebx
c0009d8d:	83 ec 28             	sub    esp,0x28
c0009d90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009da7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009db6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009db9:	e8 1f dd ff ff       	call   c0007add <Phys::allocatePage()>
c0009dbe:	89 c2                	mov    edx,eax
c0009dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009dc7:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c0009dcd:	83 ec 0c             	sub    esp,0xc
c0009dd0:	6a 01                	push   0x1
c0009dd2:	e8 72 f4 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c0009dd7:	83 c4 10             	add    esp,0x10
c0009dda:	89 c2                	mov    edx,eax
c0009ddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009de3:	83 ec 0c             	sub    esp,0xc
c0009de6:	6a 03                	push   0x3
c0009de8:	6a 01                	push   0x1
c0009dea:	52                   	push   edx
c0009deb:	50                   	push   eax
c0009dec:	53                   	push   ebx
c0009ded:	e8 e6 fd ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df2:	83 c4 20             	add    esp,0x20
c0009df5:	89 c2                	mov    edx,eax
c0009df7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dfe:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e06:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e0e:	7f 1c                	jg     c0009e2c <VAS::VAS(bool)+0xa0>
c0009e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e1b:	c1 e2 02             	shl    edx,0x2
c0009e1e:	01 d0                	add    eax,edx
c0009e20:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e26:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e2a:	eb da                	jmp    c0009e06 <VAS::VAS(bool)+0x7a>
c0009e2c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e34:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e3c:	7f 7a                	jg     c0009eb8 <VAS::VAS(bool)+0x12c>
c0009e3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e42:	2d 00 02 00 00       	sub    eax,0x200
c0009e47:	c1 e0 0c             	shl    eax,0xc
c0009e4a:	83 c8 03             	or     eax,0x3
c0009e4d:	89 c2                	mov    edx,eax
c0009e4f:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009e54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e60:	83 e0 10             	and    eax,0x10
c0009e63:	84 c0                	test   al,al
c0009e65:	74 07                	je     c0009e6e <VAS::VAS(bool)+0xe2>
c0009e67:	b8 00 01 00 00       	mov    eax,0x100
c0009e6c:	eb 05                	jmp    c0009e73 <VAS::VAS(bool)+0xe7>
c0009e6e:	b8 00 00 00 00       	mov    eax,0x0
c0009e73:	09 d0                	or     eax,edx
c0009e75:	89 c1                	mov    ecx,eax
c0009e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e82:	c1 e2 02             	shl    edx,0x2
c0009e85:	01 d0                	add    eax,edx
c0009e87:	89 ca                	mov    edx,ecx
c0009e89:	89 10                	mov    DWORD PTR [eax],edx
c0009e8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e8f:	2d 40 03 00 00       	sub    eax,0x340
c0009e94:	83 f8 7f             	cmp    eax,0x7f
c0009e97:	77 16                	ja     c0009eaf <VAS::VAS(bool)+0x123>
c0009e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ea4:	c1 e2 02             	shl    edx,0x2
c0009ea7:	01 d0                	add    eax,edx
c0009ea9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eaf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eb3:	e9 7c ff ff ff       	jmp    c0009e34 <VAS::VAS(bool)+0xa8>
c0009eb8:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009ebd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ec3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ec9:	83 e0 10             	and    eax,0x10
c0009ecc:	84 c0                	test   al,al
c0009ece:	74 07                	je     c0009ed7 <VAS::VAS(bool)+0x14b>
c0009ed0:	b8 03 41 00 00       	mov    eax,0x4103
c0009ed5:	eb 05                	jmp    c0009edc <VAS::VAS(bool)+0x150>
c0009ed7:	b8 03 40 00 00       	mov    eax,0x4003
c0009edc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ee0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009ee3:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009ee9:	89 02                	mov    DWORD PTR [edx],eax
c0009eeb:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009ef0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	50                   	push   eax
c0009f00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f04:	e8 b1 fc ff ff       	call   c0009bba <VAS::setCPUSpecific(unsigned long)>
c0009f09:	83 c4 10             	add    esp,0x10
c0009f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f10:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f13:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009f18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f1e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f24:	83 e0 10             	and    eax,0x10
c0009f27:	84 c0                	test   al,al
c0009f29:	74 07                	je     c0009f32 <VAS::VAS(bool)+0x1a6>
c0009f2b:	b8 00 01 00 00       	mov    eax,0x100
c0009f30:	eb 05                	jmp    c0009f37 <VAS::VAS(bool)+0x1ab>
c0009f32:	b8 00 00 00 00       	mov    eax,0x0
c0009f37:	09 c2                	or     edx,eax
c0009f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f40:	05 fc 0f 00 00       	add    eax,0xffc
c0009f45:	83 ca 03             	or     edx,0x3
c0009f48:	89 10                	mov    DWORD PTR [eax],edx
c0009f4a:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	83 ec 0c             	sub    esp,0xc
c0009f58:	50                   	push   eax
c0009f59:	e8 12 1c 00 00       	call   c000bb70 <Device::getName()>
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	68 9f d6 01 c0       	push   0xc001d69f
c0009f69:	50                   	push   eax
c0009f6a:	e8 71 67 ff ff       	call   c00006e0 <strcmp>
c0009f6f:	83 c4 10             	add    esp,0x10
c0009f72:	85 c0                	test   eax,eax
c0009f74:	0f 94 c0             	sete   al
c0009f77:	84 c0                	test   al,al
c0009f79:	0f 84 87 00 00 00    	je     c000a006 <VAS::VAS(bool)+0x27a>
c0009f7f:	fa                   	cli    
c0009f80:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0009f85:	40                   	inc    eax
c0009f86:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0009f8b:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009f90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f96:	05 7c 09 00 00       	add    eax,0x97c
c0009f9b:	83 ec 0c             	sub    esp,0xc
c0009f9e:	50                   	push   eax
c0009f9f:	e8 5a d3 ff ff       	call   c00072fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	89 c3                	mov    ebx,eax
c0009fae:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0009fb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb9:	05 7c 09 00 00       	add    eax,0x97c
c0009fbe:	83 ec 0c             	sub    esp,0xc
c0009fc1:	50                   	push   eax
c0009fc2:	e8 37 d3 ff ff       	call   c00072fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fc7:	83 c4 10             	add    esp,0x10
c0009fca:	83 ec 08             	sub    esp,0x8
c0009fcd:	50                   	push   eax
c0009fce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fd2:	e8 83 f5 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe1:	6a 11                	push   0x11
c0009fe3:	53                   	push   ebx
c0009fe4:	50                   	push   eax
c0009fe5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe9:	e8 f0 f8 ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fee:	83 c4 10             	add    esp,0x10
c0009ff1:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0009ff6:	48                   	dec    eax
c0009ff7:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0009ffc:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000a001:	85 c0                	test   eax,eax
c000a003:	75 01                	jne    c000a006 <VAS::VAS(bool)+0x27a>
c000a005:	fb                   	sti    
c000a006:	90                   	nop
c000a007:	83 c4 28             	add    esp,0x28
c000a00a:	5b                   	pop    ebx
c000a00b:	c3                   	ret    

c000a00c <VAS::evict(unsigned long)>:
c000a00c:	55                   	push   ebp
c000a00d:	57                   	push   edi
c000a00e:	56                   	push   esi
c000a00f:	53                   	push   ebx
c000a010:	83 ec 1c             	sub    esp,0x1c
c000a013:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a017:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a01b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a01f:	e8 66 f3 ff ff       	call   c000938a <Virt::allocateSwapfilePage()>
c000a024:	8b 0d 6c f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f26c
c000a02a:	89 c7                	mov    edi,eax
c000a02c:	85 c9                	test   ecx,ecx
c000a02e:	7e 3e                	jle    c000a06e <VAS::evict(unsigned long)+0x62>
c000a030:	89 ee                	mov    esi,ebp
c000a032:	31 db                	xor    ebx,ebx
c000a034:	83 ec 0c             	sub    esp,0xc
c000a037:	57                   	push   edi
c000a038:	e8 3b f3 ff ff       	call   c0009378 <Virt::swapIDToSector(unsigned long)>
c000a03d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a040:	01 d8                	add    eax,ebx
c000a042:	6a 01                	push   0x1
c000a044:	31 d2                	xor    edx,edx
c000a046:	43                   	inc    ebx
c000a047:	52                   	push   edx
c000a048:	81 c6 00 02 00 00    	add    esi,0x200
c000a04e:	50                   	push   eax
c000a04f:	0f be 05 78 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f278
c000a056:	8b 14 85 bc 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd644]
c000a05d:	52                   	push   edx
c000a05e:	e8 8d 2b 00 00       	call   c000cbf0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a063:	83 c4 20             	add    esp,0x20
c000a066:	39 1d 6c f2 01 c0    	cmp    DWORD PTR ds:0xc001f26c,ebx
c000a06c:	7f c6                	jg     c000a034 <VAS::evict(unsigned long)+0x28>
c000a06e:	83 ec 08             	sub    esp,0x8
c000a071:	c1 e7 0b             	shl    edi,0xb
c000a074:	55                   	push   ebp
c000a075:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a079:	50                   	push   eax
c000a07a:	e8 db f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a07f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a081:	89 d1                	mov    ecx,edx
c000a083:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a089:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a08f:	09 cf                	or     edi,ecx
c000a091:	89 38                	mov    DWORD PTR [eax],edi
c000a093:	89 14 24             	mov    DWORD PTR [esp],edx
c000a096:	ff 05 48 06 02 c0    	inc    DWORD PTR ds:0xc0020648
c000a09c:	e8 da d9 ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c000a0a1:	0f 20 d8             	mov    eax,cr3
c000a0a4:	0f 22 d8             	mov    cr3,eax
c000a0a7:	a1 44 06 02 c0       	mov    eax,ds:0xc0020644
c000a0ac:	c7 44 24 40 ad d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d6ad
c000a0b4:	8d 50 01             	lea    edx,[eax+0x1]
c000a0b7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0bb:	89 15 44 06 02 c0    	mov    DWORD PTR ds:0xc0020644,edx
c000a0c1:	83 c4 2c             	add    esp,0x2c
c000a0c4:	5b                   	pop    ebx
c000a0c5:	5e                   	pop    esi
c000a0c6:	5f                   	pop    edi
c000a0c7:	5d                   	pop    ebp
c000a0c8:	e9 cf 03 00 00       	jmp    c000a49c <Dbg::kprintf(char const*, ...)>
c000a0cd:	90                   	nop

c000a0ce <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a0ce:	55                   	push   ebp
c000a0cf:	57                   	push   edi
c000a0d0:	56                   	push   esi
c000a0d1:	53                   	push   ebx
c000a0d2:	83 ec 14             	sub    esp,0x14
c000a0d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a0d9:	53                   	push   ebx
c000a0da:	68 be d6 01 c0       	push   0xc001d6be
c000a0df:	e8 b8 03 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a0e4:	83 c4 10             	add    esp,0x10
c000a0e7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0ed:	74 21                	je     c000a110 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0ef:	83 ec 08             	sub    esp,0x8
c000a0f2:	53                   	push   ebx
c000a0f3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0f7:	57                   	push   edi
c000a0f8:	e8 5d f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a0fd:	83 c4 10             	add    esp,0x10
c000a100:	89 c6                	mov    esi,eax
c000a102:	85 c0                	test   eax,eax
c000a104:	74 0a                	je     c000a110 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a106:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a108:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a10e:	74 0a                	je     c000a11a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a110:	31 c0                	xor    eax,eax
c000a112:	83 c4 0c             	add    esp,0xc
c000a115:	5b                   	pop    ebx
c000a116:	5e                   	pop    esi
c000a117:	5f                   	pop    edi
c000a118:	5d                   	pop    ebp
c000a119:	c3                   	ret    
c000a11a:	e8 be d9 ff ff       	call   c0007add <Phys::allocatePage()>
c000a11f:	c1 ed 0b             	shr    ebp,0xb
c000a122:	8b 16                	mov    edx,DWORD PTR [esi]
c000a124:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a12a:	09 c2                	or     edx,eax
c000a12c:	81 ca 01 08 00 00    	or     edx,0x801
c000a132:	89 16                	mov    DWORD PTR [esi],edx
c000a134:	8b 35 6c f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f26c
c000a13a:	85 f6                	test   esi,esi
c000a13c:	7e 3e                	jle    c000a17c <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a13e:	89 df                	mov    edi,ebx
c000a140:	31 f6                	xor    esi,esi
c000a142:	83 ec 0c             	sub    esp,0xc
c000a145:	55                   	push   ebp
c000a146:	e8 2d f2 ff ff       	call   c0009378 <Virt::swapIDToSector(unsigned long)>
c000a14b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a14e:	01 f0                	add    eax,esi
c000a150:	6a 01                	push   0x1
c000a152:	31 d2                	xor    edx,edx
c000a154:	46                   	inc    esi
c000a155:	52                   	push   edx
c000a156:	81 c7 00 02 00 00    	add    edi,0x200
c000a15c:	50                   	push   eax
c000a15d:	0f be 05 78 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f278
c000a164:	8b 0c 85 bc 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd644]
c000a16b:	51                   	push   ecx
c000a16c:	e8 13 2a 00 00       	call   c000cb84 <LogicalDisk::read(unsigned long long, int, void*)>
c000a171:	83 c4 20             	add    esp,0x20
c000a174:	39 35 6c f2 01 c0    	cmp    DWORD PTR ds:0xc001f26c,esi
c000a17a:	7f c6                	jg     c000a142 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a17c:	a1 48 06 02 c0       	mov    eax,ds:0xc0020648
c000a181:	48                   	dec    eax
c000a182:	52                   	push   edx
c000a183:	a3 48 06 02 c0       	mov    ds:0xc0020648,eax
c000a188:	50                   	push   eax
c000a189:	53                   	push   ebx
c000a18a:	68 d1 d6 01 c0       	push   0xc001d6d1
c000a18f:	e8 08 03 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a194:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a197:	e8 be f1 ff ff       	call   c000935a <Virt::freeSwapfilePage(unsigned long)>
c000a19c:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	48                   	dec    eax
c000a1a5:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000a1aa:	85 c0                	test   eax,eax
c000a1ac:	75 01                	jne    c000a1af <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ae:	fb                   	sti    
c000a1af:	0f 20 d8             	mov    eax,cr3
c000a1b2:	0f 22 d8             	mov    cr3,eax
c000a1b5:	b0 01                	mov    al,0x1
c000a1b7:	e9 56 ff ff ff       	jmp    c000a112 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1bc <VAS::scanForEviction()>:
c000a1bc:	57                   	push   edi
c000a1bd:	31 ff                	xor    edi,edi
c000a1bf:	56                   	push   esi
c000a1c0:	53                   	push   ebx
c000a1c1:	83 ec 10             	sub    esp,0x10
c000a1c4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a1c8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1cb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1d1:	75 0e                	jne    c000a1e1 <VAS::scanForEviction()+0x25>
c000a1d3:	89 da                	mov    edx,ebx
c000a1d5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d8:	c1 ea 16             	shr    edx,0x16
c000a1db:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1df:	74 4e                	je     c000a22f <VAS::scanForEviction()+0x73>
c000a1e1:	53                   	push   ebx
c000a1e2:	56                   	push   esi
c000a1e3:	e8 72 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a1e8:	5a                   	pop    edx
c000a1e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1eb:	59                   	pop    ecx
c000a1ec:	89 d1                	mov    ecx,edx
c000a1ee:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1f4:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1fa:	74 3e                	je     c000a23a <VAS::scanForEviction()+0x7e>
c000a1fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a202:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a208:	76 2b                	jbe    c000a235 <VAS::scanForEviction()+0x79>
c000a20a:	47                   	inc    edi
c000a20b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a212:	83 ff 03             	cmp    edi,0x3
c000a215:	74 32                	je     c000a249 <VAS::scanForEviction()+0x8d>
c000a217:	31 db                	xor    ebx,ebx
c000a219:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a21f:	75 c0                	jne    c000a1e1 <VAS::scanForEviction()+0x25>
c000a221:	89 da                	mov    edx,ebx
c000a223:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a226:	c1 ea 16             	shr    edx,0x16
c000a229:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a22d:	75 b2                	jne    c000a1e1 <VAS::scanForEviction()+0x25>
c000a22f:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a235:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a238:	eb 91                	jmp    c000a1cb <VAS::scanForEviction()+0xf>
c000a23a:	f6 c2 20             	test   dl,0x20
c000a23d:	74 13                	je     c000a252 <VAS::scanForEviction()+0x96>
c000a23f:	83 e2 df             	and    edx,0xffffffdf
c000a242:	89 10                	mov    DWORD PTR [eax],edx
c000a244:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a247:	eb b3                	jmp    c000a1fc <VAS::scanForEviction()+0x40>
c000a249:	83 c4 10             	add    esp,0x10
c000a24c:	31 c0                	xor    eax,eax
c000a24e:	5b                   	pop    ebx
c000a24f:	5e                   	pop    esi
c000a250:	5f                   	pop    edi
c000a251:	c3                   	ret    
c000a252:	83 ec 08             	sub    esp,0x8
c000a255:	89 d0                	mov    eax,edx
c000a257:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a25c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a260:	53                   	push   ebx
c000a261:	68 e6 d6 01 c0       	push   0xc001d6e6
c000a266:	e8 31 02 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a26b:	58                   	pop    eax
c000a26c:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a26f:	5a                   	pop    edx
c000a270:	51                   	push   ecx
c000a271:	56                   	push   esi
c000a272:	e8 95 fd ff ff       	call   c000a00c <VAS::evict(unsigned long)>
c000a277:	5b                   	pop    ebx
c000a278:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a27b:	5f                   	pop    edi
c000a27c:	50                   	push   eax
c000a27d:	68 fa d6 01 c0       	push   0xc001d6fa
c000a282:	e8 15 02 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a287:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a28e:	83 c4 10             	add    esp,0x10
c000a291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	5b                   	pop    ebx
c000a299:	5e                   	pop    esi
c000a29a:	5f                   	pop    edi
c000a29b:	c3                   	ret    

c000a29c <mapVASFirstTime>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 0c             	sub    esp,0xc
c000a2a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2ab:	4a                   	dec    edx
c000a2ac:	0f 84 8c 00 00 00    	je     c000a33e <mapVASFirstTime+0xa2>
c000a2b2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2b5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2b8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2bd:	c1 e5 15             	shl    ebp,0x15
c000a2c0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a2c5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a2cb:	29 eb                	sub    ebx,ebp
c000a2cd:	29 ef                	sub    edi,ebp
c000a2cf:	e8 09 d8 ff ff       	call   c0007add <Phys::allocatePage()>
c000a2d4:	83 ec 0c             	sub    esp,0xc
c000a2d7:	68 03 04 00 00       	push   0x403
c000a2dc:	6a 01                	push   0x1
c000a2de:	53                   	push   ebx
c000a2df:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2e5:	50                   	push   eax
c000a2e6:	56                   	push   esi
c000a2e7:	e8 ec f8 ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2ec:	83 c4 20             	add    esp,0x20
c000a2ef:	39 fb                	cmp    ebx,edi
c000a2f1:	75 dc                	jne    c000a2cf <mapVASFirstTime+0x33>
c000a2f3:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2f8:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a2fd:	29 eb                	sub    ebx,ebp
c000a2ff:	29 ef                	sub    edi,ebp
c000a301:	e8 d7 d7 ff ff       	call   c0007add <Phys::allocatePage()>
c000a306:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a30a:	19 d2                	sbb    edx,edx
c000a30c:	83 ec 0c             	sub    esp,0xc
c000a30f:	83 e2 04             	and    edx,0x4
c000a312:	81 c2 03 04 00 00    	add    edx,0x403
c000a318:	52                   	push   edx
c000a319:	6a 01                	push   0x1
c000a31b:	53                   	push   ebx
c000a31c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a322:	50                   	push   eax
c000a323:	56                   	push   esi
c000a324:	e8 af f8 ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a329:	83 c4 20             	add    esp,0x20
c000a32c:	39 df                	cmp    edi,ebx
c000a32e:	75 d1                	jne    c000a301 <mapVASFirstTime+0x65>
c000a330:	0f 20 d8             	mov    eax,cr3
c000a333:	0f 22 d8             	mov    cr3,eax
c000a336:	83 c4 0c             	add    esp,0xc
c000a339:	5b                   	pop    ebx
c000a33a:	5e                   	pop    esi
c000a33b:	5f                   	pop    edi
c000a33c:	5d                   	pop    ebp
c000a33d:	c3                   	ret    
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	68 0d d7 01 c0       	push   0xc001d70d
c000a346:	e8 51 01 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	83 c4 0c             	add    esp,0xc
c000a351:	5b                   	pop    ebx
c000a352:	5e                   	pop    esi
c000a353:	5f                   	pop    edi
c000a354:	5d                   	pop    ebp
c000a355:	c3                   	ret    

c000a356 <__cxa_atexit>:
c000a356:	31 c0                	xor    eax,eax
c000a358:	c3                   	ret    

c000a359 <__cxa_finalize>:
c000a359:	c3                   	ret    

c000a35a <__stack_chk_fail>:
c000a35a:	55                   	push   ebp
c000a35b:	89 e5                	mov    ebp,esp
c000a35d:	83 ec 10             	sub    esp,0x10
c000a360:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a363:	68 26 d7 01 c0       	push   0xc001d726
c000a368:	e8 2f 01 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a36d:	58                   	pop    eax
c000a36e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a371:	5a                   	pop    edx
c000a372:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a375:	68 26 d7 01 c0       	push   0xc001d726
c000a37a:	e8 1d 01 00 00       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000a37f:	c7 04 24 2e d7 01 c0 	mov    DWORD PTR [esp],0xc001d72e
c000a386:	e8 74 5d 00 00       	call   c00100ff <KePanic(char const*)>
c000a38b:	83 c4 10             	add    esp,0x10
c000a38e:	c9                   	leave  
c000a38f:	c3                   	ret    

c000a390 <__cxa_pure_virtual>:
c000a390:	83 ec 18             	sub    esp,0x18
c000a393:	68 46 d7 01 c0       	push   0xc001d746
c000a398:	e8 62 5d 00 00       	call   c00100ff <KePanic(char const*)>
c000a39d:	83 c4 1c             	add    esp,0x1c
c000a3a0:	c3                   	ret    

c000a3a1 <operator new[](unsigned long)>:
c000a3a1:	e9 5b d4 ff ff       	jmp    c0007801 <malloc>

c000a3a6 <operator delete(void*, unsigned long)>:
c000a3a6:	e9 76 d4 ff ff       	jmp    c0007821 <rfree>

c000a3ab <operator delete[](void*)>:
c000a3ab:	e9 71 d4 ff ff       	jmp    c0007821 <rfree>

c000a3b0 <operator delete[](void*, unsigned long)>:
c000a3b0:	e9 6c d4 ff ff       	jmp    c0007821 <rfree>

c000a3b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3b5:	55                   	push   ebp
c000a3b6:	b9 04 00 00 00       	mov    ecx,0x4
c000a3bb:	57                   	push   edi
c000a3bc:	56                   	push   esi
c000a3bd:	be 5b d3 01 c0       	mov    esi,0xc001d35b
c000a3c2:	53                   	push   ebx
c000a3c3:	83 ec 20             	sub    esp,0x20
c000a3c6:	a1 5a d3 01 c0       	mov    eax,ds:0xc001d35a
c000a3cb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a3cf:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a3d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a3d7:	a1 67 d3 01 c0       	mov    eax,ds:0xc001d367
c000a3dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a3e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3e4:	fc                   	cld    
c000a3e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a3e7:	89 ee                	mov    esi,ebp
c000a3e9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3ed:	eb 02                	jmp    c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3ef:	89 c6                	mov    esi,eax
c000a3f1:	31 d2                	xor    edx,edx
c000a3f3:	41                   	inc    ecx
c000a3f4:	89 f0                	mov    eax,esi
c000a3f6:	f7 f3                	div    ebx
c000a3f8:	39 de                	cmp    esi,ebx
c000a3fa:	73 f3                	jae    c000a3ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a3fc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a3ff:	eb 02                	jmp    c000a403 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a401:	89 c5                	mov    ebp,eax
c000a403:	31 d2                	xor    edx,edx
c000a405:	49                   	dec    ecx
c000a406:	89 e8                	mov    eax,ebp
c000a408:	f7 f3                	div    ebx
c000a40a:	39 dd                	cmp    ebp,ebx
c000a40c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a410:	88 11                	mov    BYTE PTR [ecx],dl
c000a412:	73 ed                	jae    c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a414:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a418:	83 c4 20             	add    esp,0x20
c000a41b:	5b                   	pop    ebx
c000a41c:	5e                   	pop    esi
c000a41d:	5f                   	pop    edi
c000a41e:	5d                   	pop    ebp
c000a41f:	c3                   	ret    

c000a420 <Dbg::logc(char)>:
c000a420:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a424:	f6 05 70 05 02 c0 10 	test   BYTE PTR ds:0xc0020570,0x10
c000a42b:	75 12                	jne    c000a43f <Dbg::logc(char)+0x1f>
c000a42d:	ba fd 03 00 00       	mov    edx,0x3fd
c000a432:	ec                   	in     al,dx
c000a433:	a8 20                	test   al,0x20
c000a435:	74 fb                	je     c000a432 <Dbg::logc(char)+0x12>
c000a437:	ba f8 03 00 00       	mov    edx,0x3f8
c000a43c:	88 c8                	mov    al,cl
c000a43e:	ee                   	out    dx,al
c000a43f:	c3                   	ret    

c000a440 <Dbg::logs(char*)>:
c000a440:	53                   	push   ebx
c000a441:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a445:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a448:	84 c0                	test   al,al
c000a44a:	74 0f                	je     c000a45b <Dbg::logs(char*)+0x1b>
c000a44c:	50                   	push   eax
c000a44d:	43                   	inc    ebx
c000a44e:	e8 cd ff ff ff       	call   c000a420 <Dbg::logc(char)>
c000a453:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a456:	5a                   	pop    edx
c000a457:	84 c0                	test   al,al
c000a459:	75 f1                	jne    c000a44c <Dbg::logs(char*)+0xc>
c000a45b:	5b                   	pop    ebx
c000a45c:	c3                   	ret    

c000a45d <Dbg::logWriteInt(unsigned int)>:
c000a45d:	83 ec 10             	sub    esp,0x10
c000a460:	6a 0a                	push   0xa
c000a462:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a466:	50                   	push   eax
c000a467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a46b:	50                   	push   eax
c000a46c:	e8 44 ff ff ff       	call   c000a3b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a471:	50                   	push   eax
c000a472:	e8 c9 ff ff ff       	call   c000a440 <Dbg::logs(char*)>
c000a477:	83 c4 20             	add    esp,0x20
c000a47a:	c3                   	ret    

c000a47b <Dbg::logWriteIntBase(unsigned int, int)>:
c000a47b:	83 ec 10             	sub    esp,0x10
c000a47e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a482:	50                   	push   eax
c000a483:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a487:	50                   	push   eax
c000a488:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a48c:	52                   	push   edx
c000a48d:	e8 23 ff ff ff       	call   c000a3b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a492:	50                   	push   eax
c000a493:	e8 a8 ff ff ff       	call   c000a440 <Dbg::logs(char*)>
c000a498:	83 c4 20             	add    esp,0x20
c000a49b:	c3                   	ret    

c000a49c <Dbg::kprintf(char const*, ...)>:
c000a49c:	55                   	push   ebp
c000a49d:	57                   	push   edi
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 0c             	sub    esp,0xc
c000a4a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4a7:	f6 05 70 05 02 c0 10 	test   BYTE PTR ds:0xc0020570,0x10
c000a4ae:	74 08                	je     c000a4b8 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4b0:	83 c4 0c             	add    esp,0xc
c000a4b3:	5b                   	pop    ebx
c000a4b4:	5e                   	pop    esi
c000a4b5:	5f                   	pop    edi
c000a4b6:	5d                   	pop    ebp
c000a4b7:	c3                   	ret    
c000a4b8:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4bc:	31 ff                	xor    edi,edi
c000a4be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4c5:	84 c0                	test   al,al
c000a4c7:	74 e7                	je     c000a4b0 <Dbg::kprintf(char const*, ...)+0x14>
c000a4c9:	8d 77 01             	lea    esi,[edi+0x1]
c000a4cc:	3c 25                	cmp    al,0x25
c000a4ce:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4d1:	75 47                	jne    c000a51a <Dbg::kprintf(char const*, ...)+0x7e>
c000a4d3:	83 c7 02             	add    edi,0x2
c000a4d6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a4d9:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a4dc:	83 e8 25             	sub    eax,0x25
c000a4df:	3c 53                	cmp    al,0x53
c000a4e1:	0f 87 d2 00 00 00    	ja     c000a5b9 <Dbg::kprintf(char const*, ...)+0x11d>
c000a4e7:	25 ff 00 00 00       	and    eax,0xff
c000a4ec:	ff 24 85 5c d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28a4]
c000a4f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4f7:	89 c8                	mov    eax,ecx
c000a4f9:	83 c1 04             	add    ecx,0x4
c000a4fc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a500:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a502:	55                   	push   ebp
c000a503:	e8 55 ff ff ff       	call   c000a45d <Dbg::logWriteInt(unsigned int)>
c000a508:	58                   	pop    eax
c000a509:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a50c:	84 c0                	test   al,al
c000a50e:	74 a0                	je     c000a4b0 <Dbg::kprintf(char const*, ...)+0x14>
c000a510:	8d 77 01             	lea    esi,[edi+0x1]
c000a513:	3c 25                	cmp    al,0x25
c000a515:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a518:	74 b9                	je     c000a4d3 <Dbg::kprintf(char const*, ...)+0x37>
c000a51a:	50                   	push   eax
c000a51b:	89 f7                	mov    edi,esi
c000a51d:	e8 fe fe ff ff       	call   c000a420 <Dbg::logc(char)>
c000a522:	89 ee                	mov    esi,ebp
c000a524:	58                   	pop    eax
c000a525:	eb e2                	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a527:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a52b:	89 c8                	mov    eax,ecx
c000a52d:	83 c1 04             	add    ecx,0x4
c000a530:	8b 00                	mov    eax,DWORD PTR [eax]
c000a532:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a536:	50                   	push   eax
c000a537:	e8 04 ff ff ff       	call   c000a440 <Dbg::logs(char*)>
c000a53c:	58                   	pop    eax
c000a53d:	eb ca                	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a53f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a543:	89 d0                	mov    eax,edx
c000a545:	83 c2 04             	add    edx,0x4
c000a548:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a54c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a54e:	50                   	push   eax
c000a54f:	e8 09 ff ff ff       	call   c000a45d <Dbg::logWriteInt(unsigned int)>
c000a554:	58                   	pop    eax
c000a555:	eb b2                	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a557:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a55b:	89 d0                	mov    eax,edx
c000a55d:	83 c2 04             	add    edx,0x4
c000a560:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a563:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a567:	50                   	push   eax
c000a568:	e8 b3 fe ff ff       	call   c000a420 <Dbg::logc(char)>
c000a56d:	58                   	pop    eax
c000a56e:	eb 99                	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a570:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a574:	89 c8                	mov    eax,ecx
c000a576:	83 c1 04             	add    ecx,0x4
c000a579:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a57d:	6a 10                	push   0x10
c000a57f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a581:	51                   	push   ecx
c000a582:	e8 f4 fe ff ff       	call   c000a47b <Dbg::logWriteIntBase(unsigned int, int)>
c000a587:	5d                   	pop    ebp
c000a588:	58                   	pop    eax
c000a589:	e9 7b ff ff ff       	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a58e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a592:	89 d0                	mov    eax,edx
c000a594:	83 c2 08             	add    edx,0x8
c000a597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a59b:	6a 10                	push   0x10
c000a59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59f:	50                   	push   eax
c000a5a0:	e8 d6 fe ff ff       	call   c000a47b <Dbg::logWriteIntBase(unsigned int, int)>
c000a5a5:	58                   	pop    eax
c000a5a6:	5a                   	pop    edx
c000a5a7:	e9 5d ff ff ff       	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ac:	6a 25                	push   0x25
c000a5ae:	e8 6d fe ff ff       	call   c000a420 <Dbg::logc(char)>
c000a5b3:	5a                   	pop    edx
c000a5b4:	e9 50 ff ff ff       	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b9:	6a 25                	push   0x25
c000a5bb:	e8 60 fe ff ff       	call   c000a420 <Dbg::logc(char)>
c000a5c0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a5c4:	50                   	push   eax
c000a5c5:	e8 56 fe ff ff       	call   c000a420 <Dbg::logc(char)>
c000a5ca:	5a                   	pop    edx
c000a5cb:	59                   	pop    ecx
c000a5cc:	e9 38 ff ff ff       	jmp    c000a509 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d1:	90                   	nop

c000a5d2 <File::read(unsigned long long, void*, int*)>:
c000a5d2:	53                   	push   ebx
c000a5d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5db:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5e2:	3c 19                	cmp    al,0x19
c000a5e4:	77 35                	ja     c000a61b <File::read(unsigned long long, void*, int*)+0x49>
c000a5e6:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000a5ed:	85 c0                	test   eax,eax
c000a5ef:	74 2a                	je     c000a61b <File::read(unsigned long long, void*, int*)+0x49>
c000a5f1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5f7:	85 c0                	test   eax,eax
c000a5f9:	74 20                	je     c000a61b <File::read(unsigned long long, void*, int*)+0x49>
c000a5fb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5ff:	74 21                	je     c000a622 <File::read(unsigned long long, void*, int*)+0x50>
c000a601:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a603:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a607:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a615:	5b                   	pop    ebx
c000a616:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a619:	ff e0                	jmp    eax
c000a61b:	b8 0b 00 00 00       	mov    eax,0xb
c000a620:	eb 05                	jmp    c000a627 <File::read(unsigned long long, void*, int*)+0x55>
c000a622:	b8 05 00 00 00       	mov    eax,0x5
c000a627:	5b                   	pop    ebx
c000a628:	c3                   	ret    
c000a629:	90                   	nop

c000a62a <File::write(unsigned long long, void*, int*)>:
c000a62a:	53                   	push   ebx
c000a62b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a62f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a633:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a63a:	3c 19                	cmp    al,0x19
c000a63c:	77 35                	ja     c000a673 <File::write(unsigned long long, void*, int*)+0x49>
c000a63e:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000a645:	85 c0                	test   eax,eax
c000a647:	74 2a                	je     c000a673 <File::write(unsigned long long, void*, int*)+0x49>
c000a649:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a64f:	85 c0                	test   eax,eax
c000a651:	74 20                	je     c000a673 <File::write(unsigned long long, void*, int*)+0x49>
c000a653:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a657:	74 21                	je     c000a67a <File::write(unsigned long long, void*, int*)+0x50>
c000a659:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a65b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a65f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a669:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a66d:	5b                   	pop    ebx
c000a66e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a671:	ff e0                	jmp    eax
c000a673:	b8 0b 00 00 00       	mov    eax,0xb
c000a678:	eb 05                	jmp    c000a67f <File::write(unsigned long long, void*, int*)+0x55>
c000a67a:	b8 05 00 00 00       	mov    eax,0x5
c000a67f:	5b                   	pop    ebx
c000a680:	c3                   	ret    
c000a681:	90                   	nop

c000a682 <Directory::read(unsigned long long, void*, int*)>:
c000a682:	53                   	push   ebx
c000a683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a687:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a68b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a692:	3c 19                	cmp    al,0x19
c000a694:	77 35                	ja     c000a6cb <Directory::read(unsigned long long, void*, int*)+0x49>
c000a696:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000a69d:	85 c0                	test   eax,eax
c000a69f:	74 2a                	je     c000a6cb <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6a7:	85 c0                	test   eax,eax
c000a6a9:	74 20                	je     c000a6cb <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6af:	74 21                	je     c000a6d2 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6b7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6c5:	5b                   	pop    ebx
c000a6c6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a6c9:	ff e0                	jmp    eax
c000a6cb:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d0:	eb 05                	jmp    c000a6d7 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a6d2:	b8 05 00 00 00       	mov    eax,0x5
c000a6d7:	5b                   	pop    ebx
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <Directory::write(unsigned long long, void*, int*)>:
c000a6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6de:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a6e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a6ea:	80 fa 19             	cmp    dl,0x19
c000a6ed:	77 18                	ja     c000a707 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6ef:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000a6f6:	85 d2                	test   edx,edx
c000a6f8:	74 0d                	je     c000a707 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6fa:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a701:	19 c0                	sbb    eax,eax
c000a703:	83 e0 0a             	and    eax,0xa
c000a706:	40                   	inc    eax
c000a707:	c3                   	ret    

c000a708 <File::isAtty()>:
c000a708:	31 c0                	xor    eax,eax
c000a70a:	c3                   	ret    
c000a70b:	90                   	nop

c000a70c <Directory::isAtty()>:
c000a70c:	31 c0                	xor    eax,eax
c000a70e:	c3                   	ret    
c000a70f:	90                   	nop

c000a710 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a710:	b8 0a 00 00 00       	mov    eax,0xa
c000a715:	c3                   	ret    

c000a716 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a716:	b8 0a 00 00 00       	mov    eax,0xa
c000a71b:	c3                   	ret    

c000a71c <Filesystem::allocateSwapfile(char const*, int)>:
c000a71c:	31 c0                	xor    eax,eax
c000a71e:	31 d2                	xor    edx,edx
c000a720:	c3                   	ret    
c000a721:	90                   	nop

c000a722 <File::~File()>:
c000a722:	83 ec 0c             	sub    esp,0xc
c000a725:	ba 1c d9 01 c0       	mov    edx,0xc001d91c
c000a72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a72e:	89 10                	mov    DWORD PTR [eax],edx
c000a730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	50                   	push   eax
c000a738:	e8 ab e8 ff ff       	call   c0008fe8 <UnixFile::~UnixFile()>
c000a73d:	83 c4 10             	add    esp,0x10
c000a740:	90                   	nop
c000a741:	83 c4 0c             	add    esp,0xc
c000a744:	c3                   	ret    
c000a745:	90                   	nop

c000a746 <File::~File()>:
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	83 ec 0c             	sub    esp,0xc
c000a74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a750:	e8 cd ff ff ff       	call   c000a722 <File::~File()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	83 ec 08             	sub    esp,0x8
c000a75b:	68 14 01 00 00       	push   0x114
c000a760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a764:	e8 3d fc ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000a769:	83 c4 10             	add    esp,0x10
c000a76c:	83 c4 0c             	add    esp,0xc
c000a76f:	c3                   	ret    

c000a770 <Directory::~Directory()>:
c000a770:	83 ec 0c             	sub    esp,0xc
c000a773:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c000a778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77c:	89 10                	mov    DWORD PTR [eax],edx
c000a77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a782:	83 ec 0c             	sub    esp,0xc
c000a785:	50                   	push   eax
c000a786:	e8 5d e8 ff ff       	call   c0008fe8 <UnixFile::~UnixFile()>
c000a78b:	83 c4 10             	add    esp,0x10
c000a78e:	90                   	nop
c000a78f:	83 c4 0c             	add    esp,0xc
c000a792:	c3                   	ret    
c000a793:	90                   	nop

c000a794 <Directory::~Directory()>:
c000a794:	83 ec 0c             	sub    esp,0xc
c000a797:	83 ec 0c             	sub    esp,0xc
c000a79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79e:	e8 cd ff ff ff       	call   c000a770 <Directory::~Directory()>
c000a7a3:	83 c4 10             	add    esp,0x10
c000a7a6:	83 ec 08             	sub    esp,0x8
c000a7a9:	68 14 01 00 00       	push   0x114
c000a7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b2:	e8 ef fb ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000a7b7:	83 c4 10             	add    esp,0x10
c000a7ba:	83 c4 0c             	add    esp,0xc
c000a7bd:	c3                   	ret    

c000a7be <Filesystem::Filesystem()>:
c000a7be:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000a7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7c7:	89 10                	mov    DWORD PTR [eax],edx
c000a7c9:	8b 15 54 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020654
c000a7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7da:	a3 54 06 02 c0       	mov    ds:0xc0020654,eax
c000a7df:	90                   	nop
c000a7e0:	c3                   	ret    
c000a7e1:	90                   	nop

c000a7e2 <Filesystem::~Filesystem()>:
c000a7e2:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000a7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7eb:	89 10                	mov    DWORD PTR [eax],edx
c000a7ed:	90                   	nop
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Filesystem::~Filesystem()>:
c000a7f0:	83 ec 0c             	sub    esp,0xc
c000a7f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7f7:	e8 e6 ff ff ff       	call   c000a7e2 <Filesystem::~Filesystem()>
c000a7fc:	83 c4 04             	add    esp,0x4
c000a7ff:	83 ec 08             	sub    esp,0x8
c000a802:	6a 08                	push   0x8
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	e8 99 fb ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000a80d:	83 c4 10             	add    esp,0x10
c000a810:	83 c4 0c             	add    esp,0xc
c000a813:	c3                   	ret    

c000a814 <Fs::getcwd(Process*, char*, int)>:
c000a814:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a818:	31 c0                	xor    eax,eax
c000a81a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a81d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a821:	7d 15                	jge    c000a838 <Fs::getcwd(Process*, char*, int)+0x24>
c000a823:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a827:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a82e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a831:	84 c9                	test   cl,cl
c000a833:	74 06                	je     c000a83b <Fs::getcwd(Process*, char*, int)+0x27>
c000a835:	40                   	inc    eax
c000a836:	eb e2                	jmp    c000a81a <Fs::getcwd(Process*, char*, int)+0x6>
c000a838:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a83b:	31 c0                	xor    eax,eax
c000a83d:	c3                   	ret    

c000a83e <Fs::initVFS()>:
c000a83e:	83 ec 18             	sub    esp,0x18
c000a841:	6a 08                	push   0x8
c000a843:	e8 b9 cf ff ff       	call   c0007801 <malloc>
c000a848:	89 04 24             	mov    DWORD PTR [esp],eax
c000a84b:	e8 cc c3 00 00       	call   c0016c1c <FAT::FAT()>
c000a850:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a857:	e8 a5 cf ff ff       	call   c0007801 <malloc>
c000a85c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a85f:	e8 1a d1 00 00       	call   c001797e <ISO9660::ISO9660()>
c000a864:	83 c4 1c             	add    esp,0x1c
c000a867:	c3                   	ret    

c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a868:	55                   	push   ebp
c000a869:	57                   	push   edi
c000a86a:	56                   	push   esi
c000a86b:	53                   	push   ebx
c000a86c:	81 ec 10 04 00 00    	sub    esp,0x410
c000a872:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a879:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a880:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a887:	68 00 04 00 00       	push   0x400
c000a88c:	6a 00                	push   0x0
c000a88e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a892:	56                   	push   esi
c000a893:	e8 38 5c ff ff       	call   c00004d0 <memset>
c000a898:	83 c4 10             	add    esp,0x10
c000a89b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a89f:	75 0b                	jne    c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8a1:	50                   	push   eax
c000a8a2:	50                   	push   eax
c000a8a3:	57                   	push   edi
c000a8a4:	56                   	push   esi
c000a8a5:	e8 56 5d ff ff       	call   c0000600 <strcpy>
c000a8aa:	eb 41                	jmp    c000a8ed <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8ac:	8a 07                	mov    al,BYTE PTR [edi]
c000a8ae:	3c 5c                	cmp    al,0x5c
c000a8b0:	74 04                	je     c000a8b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8b2:	3c 2f                	cmp    al,0x2f
c000a8b4:	75 18                	jne    c000a8ce <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8b6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8b9:	3c 60                	cmp    al,0x60
c000a8bb:	7e 03                	jle    c000a8c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8bd:	83 e8 20             	sub    eax,0x20
c000a8c0:	88 04 24             	mov    BYTE PTR [esp],al
c000a8c3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8ca:	50                   	push   eax
c000a8cb:	50                   	push   eax
c000a8cc:	eb 18                	jmp    c000a8e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a8ce:	50                   	push   eax
c000a8cf:	50                   	push   eax
c000a8d0:	55                   	push   ebp
c000a8d1:	56                   	push   esi
c000a8d2:	e8 29 5d ff ff       	call   c0000600 <strcpy>
c000a8d7:	5a                   	pop    edx
c000a8d8:	59                   	pop    ecx
c000a8d9:	68 76 e5 01 c0       	push   0xc001e576
c000a8de:	56                   	push   esi
c000a8df:	e8 dc 5e ff ff       	call   c00007c0 <strcat>
c000a8e4:	5d                   	pop    ebp
c000a8e5:	58                   	pop    eax
c000a8e6:	57                   	push   edi
c000a8e7:	56                   	push   esi
c000a8e8:	e8 d3 5e ff ff       	call   c00007c0 <strcat>
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8f3:	3c 60                	cmp    al,0x60
c000a8f5:	7e 03                	jle    c000a8fa <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8f7:	83 e8 20             	sub    eax,0x20
c000a8fa:	88 04 24             	mov    BYTE PTR [esp],al
c000a8fd:	88 03                	mov    BYTE PTR [ebx],al
c000a8ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a906:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a90c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a910:	bf 03 00 00 00       	mov    edi,0x3
c000a915:	b8 03 00 00 00       	mov    eax,0x3
c000a91a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a91d:	84 d2                	test   dl,dl
c000a91f:	0f 84 91 00 00 00    	je     c000a9b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a925:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a928:	80 fa 5c             	cmp    dl,0x5c
c000a92b:	74 05                	je     c000a932 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a92d:	80 fa 2f             	cmp    dl,0x2f
c000a930:	75 12                	jne    c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a932:	89 c5                	mov    ebp,eax
c000a934:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a939:	74 09                	je     c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a93b:	40                   	inc    eax
c000a93c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a940:	89 cf                	mov    edi,ecx
c000a942:	eb d6                	jmp    c000a91a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a944:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a949:	75 5b                	jne    c000a9a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a94b:	80 fa 2e             	cmp    dl,0x2e
c000a94e:	75 56                	jne    c000a9a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a950:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a954:	74 19                	je     c000a96f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a956:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a95b:	74 53                	je     c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a95d:	89 f9                	mov    ecx,edi
c000a95f:	41                   	inc    ecx
c000a960:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a963:	80 fa 2f             	cmp    dl,0x2f
c000a966:	74 f7                	je     c000a95f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a968:	80 fa 5c             	cmp    dl,0x5c
c000a96b:	74 f2                	je     c000a95f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a96d:	eb d1                	jmp    c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a96f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a974:	74 3a                	je     c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a976:	83 f8 03             	cmp    eax,0x3
c000a979:	74 c5                	je     c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a97b:	41                   	inc    ecx
c000a97c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a97f:	80 fa 2f             	cmp    dl,0x2f
c000a982:	74 f7                	je     c000a97b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a984:	80 fa 5c             	cmp    dl,0x5c
c000a987:	74 f2                	je     c000a97b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a989:	48                   	dec    eax
c000a98a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a98e:	75 06                	jne    c000a996 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a990:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a994:	eb f3                	jmp    c000a989 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a996:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a99a:	74 07                	je     c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a99c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9a0:	48                   	dec    eax
c000a9a1:	eb f3                	jmp    c000a996 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9a3:	40                   	inc    eax
c000a9a4:	eb 9a                	jmp    c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9a6:	80 fa 2f             	cmp    dl,0x2f
c000a9a9:	74 95                	je     c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ab:	80 fa 5c             	cmp    dl,0x5c
c000a9ae:	74 90                	je     c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9b3:	40                   	inc    eax
c000a9b4:	eb 8a                	jmp    c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9ba:	83 ec 0c             	sub    esp,0xc
c000a9bd:	53                   	push   ebx
c000a9be:	e8 7d 5b ff ff       	call   c0000540 <strlen>
c000a9c3:	83 c4 10             	add    esp,0x10
c000a9c6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a9cb:	75 26                	jne    c000a9f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a9cd:	83 ec 0c             	sub    esp,0xc
c000a9d0:	53                   	push   ebx
c000a9d1:	e8 6a 5b ff ff       	call   c0000540 <strlen>
c000a9d6:	83 c4 10             	add    esp,0x10
c000a9d9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a9de:	74 26                	je     c000aa06 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a9e0:	83 ec 0c             	sub    esp,0xc
c000a9e3:	53                   	push   ebx
c000a9e4:	e8 57 5b ff ff       	call   c0000540 <strlen>
c000a9e9:	83 c4 10             	add    esp,0x10
c000a9ec:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9f1:	eb c7                	jmp    c000a9ba <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9f3:	83 ec 0c             	sub    esp,0xc
c000a9f6:	53                   	push   ebx
c000a9f7:	e8 44 5b ff ff       	call   c0000540 <strlen>
c000a9fc:	83 c4 10             	add    esp,0x10
c000a9ff:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa04:	74 c7                	je     c000a9cd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa06:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa0c:	5b                   	pop    ebx
c000aa0d:	5e                   	pop    esi
c000aa0e:	5f                   	pop    edi
c000aa0f:	5d                   	pop    ebp
c000aa10:	c3                   	ret    
c000aa11:	90                   	nop

c000aa12 <File::File(char const*, Process*)>:
c000aa12:	83 ec 0c             	sub    esp,0xc
c000aa15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa19:	83 ec 08             	sub    esp,0x8
c000aa1c:	6a 00                	push   0x0
c000aa1e:	50                   	push   eax
c000aa1f:	e8 e2 e3 ff ff       	call   c0008e06 <UnixFile::UnixFile(int)>
c000aa24:	83 c4 10             	add    esp,0x10
c000aa27:	ba 1c d9 01 c0       	mov    edx,0xc001d91c
c000aa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa30:	89 10                	mov    DWORD PTR [eax],edx
c000aa32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa40:	83 c0 0d             	add    eax,0xd
c000aa43:	83 ec 04             	sub    esp,0x4
c000aa46:	52                   	push   edx
c000aa47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa4b:	50                   	push   eax
c000aa4c:	e8 17 fe ff ff       	call   c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa51:	83 c4 10             	add    esp,0x10
c000aa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa58:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa5b:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa62:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa74:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa7a:	25 ff 00 00 00       	and    eax,0xff
c000aa7f:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000aa86:	85 c0                	test   eax,eax
c000aa88:	74 42                	je     c000aacc <File::File(char const*, Process*)+0xba>
c000aa8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa94:	25 ff 00 00 00       	and    eax,0xff
c000aa99:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000aaa0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaa6:	85 c0                	test   eax,eax
c000aaa8:	75 22                	jne    c000aacc <File::File(char const*, Process*)+0xba>
c000aaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaae:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab4:	25 ff 00 00 00       	and    eax,0xff
c000aab9:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000aac0:	83 ec 0c             	sub    esp,0xc
c000aac3:	50                   	push   eax
c000aac4:	e8 f9 1f 00 00       	call   c000cac2 <LogicalDisk::mount()>
c000aac9:	83 c4 10             	add    esp,0x10
c000aacc:	90                   	nop
c000aacd:	83 c4 0c             	add    esp,0xc
c000aad0:	c3                   	ret    
c000aad1:	90                   	nop

c000aad2 <File::open(FileOpenMode)>:
c000aad2:	53                   	push   ebx
c000aad3:	b8 0b 00 00 00       	mov    eax,0xb
c000aad8:	83 ec 08             	sub    esp,0x8
c000aadb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aadf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aae6:	80 fa 19             	cmp    dl,0x19
c000aae9:	77 40                	ja     c000ab2b <File::open(FileOpenMode)+0x59>
c000aaeb:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000aaf2:	85 d2                	test   edx,edx
c000aaf4:	74 35                	je     c000ab2b <File::open(FileOpenMode)+0x59>
c000aaf6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aafc:	85 d2                	test   edx,edx
c000aafe:	74 2b                	je     c000ab2b <File::open(FileOpenMode)+0x59>
c000ab00:	b8 06 00 00 00       	mov    eax,0x6
c000ab05:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab09:	75 20                	jne    c000ab2b <File::open(FileOpenMode)+0x59>
c000ab0b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab0d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab17:	51                   	push   ecx
c000ab18:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab1b:	51                   	push   ecx
c000ab1c:	52                   	push   edx
c000ab1d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab20:	83 c4 10             	add    esp,0x10
c000ab23:	85 c0                	test   eax,eax
c000ab25:	75 04                	jne    c000ab2b <File::open(FileOpenMode)+0x59>
c000ab27:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab2b:	83 c4 08             	add    esp,0x8
c000ab2e:	5b                   	pop    ebx
c000ab2f:	c3                   	ret    

c000ab30 <File::close()>:
c000ab30:	53                   	push   ebx
c000ab31:	b8 0b 00 00 00       	mov    eax,0xb
c000ab36:	83 ec 08             	sub    esp,0x8
c000ab39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab3d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab44:	80 fa 19             	cmp    dl,0x19
c000ab47:	77 41                	ja     c000ab8a <File::close()+0x5a>
c000ab49:	8b 1c 95 c0 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd540]
c000ab50:	85 db                	test   ebx,ebx
c000ab52:	74 36                	je     c000ab8a <File::close()+0x5a>
c000ab54:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab5b:	74 2d                	je     c000ab8a <File::close()+0x5a>
c000ab5d:	b8 05 00 00 00       	mov    eax,0x5
c000ab62:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab66:	74 22                	je     c000ab8a <File::close()+0x5a>
c000ab68:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab6c:	8b 04 95 c0 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd540]
c000ab73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab79:	53                   	push   ebx
c000ab7a:	53                   	push   ebx
c000ab7b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab83:	50                   	push   eax
c000ab84:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab87:	83 c4 10             	add    esp,0x10
c000ab8a:	83 c4 08             	add    esp,0x8
c000ab8d:	5b                   	pop    ebx
c000ab8e:	c3                   	ret    
c000ab8f:	90                   	nop

c000ab90 <File::seek(unsigned long long)>:
c000ab90:	56                   	push   esi
c000ab91:	53                   	push   ebx
c000ab92:	b8 0b 00 00 00       	mov    eax,0xb
c000ab97:	51                   	push   ecx
c000ab98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aba0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000aba7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abab:	80 fa 19             	cmp    dl,0x19
c000abae:	77 31                	ja     c000abe1 <File::seek(unsigned long long)+0x51>
c000abb0:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000abb7:	85 d2                	test   edx,edx
c000abb9:	74 26                	je     c000abe1 <File::seek(unsigned long long)+0x51>
c000abbb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abc1:	85 d2                	test   edx,edx
c000abc3:	74 1c                	je     c000abe1 <File::seek(unsigned long long)+0x51>
c000abc5:	b8 05 00 00 00       	mov    eax,0x5
c000abca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000abce:	74 11                	je     c000abe1 <File::seek(unsigned long long)+0x51>
c000abd0:	8b 02                	mov    eax,DWORD PTR [edx]
c000abd2:	53                   	push   ebx
c000abd3:	51                   	push   ecx
c000abd4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000abda:	52                   	push   edx
c000abdb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	5a                   	pop    edx
c000abe2:	5b                   	pop    ebx
c000abe3:	5e                   	pop    esi
c000abe4:	c3                   	ret    
c000abe5:	90                   	nop

c000abe6 <File::tell(unsigned long long*)>:
c000abe6:	83 ec 0c             	sub    esp,0xc
c000abe9:	b8 0b 00 00 00       	mov    eax,0xb
c000abee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abf2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abf9:	80 fa 19             	cmp    dl,0x19
c000abfc:	77 34                	ja     c000ac32 <File::tell(unsigned long long*)+0x4c>
c000abfe:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000ac05:	85 d2                	test   edx,edx
c000ac07:	74 29                	je     c000ac32 <File::tell(unsigned long long*)+0x4c>
c000ac09:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac0f:	85 d2                	test   edx,edx
c000ac11:	74 1f                	je     c000ac32 <File::tell(unsigned long long*)+0x4c>
c000ac13:	b8 05 00 00 00       	mov    eax,0x5
c000ac18:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac1c:	74 14                	je     c000ac32 <File::tell(unsigned long long*)+0x4c>
c000ac1e:	50                   	push   eax
c000ac1f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac25:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac2b:	52                   	push   edx
c000ac2c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac2f:	83 c4 10             	add    esp,0x10
c000ac32:	83 c4 0c             	add    esp,0xc
c000ac35:	c3                   	ret    

c000ac36 <File::rewind()>:
c000ac36:	83 ec 10             	sub    esp,0x10
c000ac39:	6a 00                	push   0x0
c000ac3b:	6a 00                	push   0x0
c000ac3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac41:	e8 4a ff ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c000ac46:	83 c4 1c             	add    esp,0x1c
c000ac49:	c3                   	ret    

c000ac4a <File::unlink()>:
c000ac4a:	83 ec 0c             	sub    esp,0xc
c000ac4d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac5d:	80 f9 19             	cmp    cl,0x19
c000ac60:	77 2f                	ja     c000ac91 <File::unlink()+0x47>
c000ac62:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000ac69:	85 c9                	test   ecx,ecx
c000ac6b:	74 24                	je     c000ac91 <File::unlink()+0x47>
c000ac6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac73:	85 c9                	test   ecx,ecx
c000ac75:	74 1a                	je     c000ac91 <File::unlink()+0x47>
c000ac77:	b8 06 00 00 00       	mov    eax,0x6
c000ac7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac80:	75 0f                	jne    c000ac91 <File::unlink()+0x47>
c000ac82:	83 c2 0d             	add    edx,0xd
c000ac85:	50                   	push   eax
c000ac86:	50                   	push   eax
c000ac87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac89:	52                   	push   edx
c000ac8a:	51                   	push   ecx
c000ac8b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	83 c4 0c             	add    esp,0xc
c000ac94:	c3                   	ret    
c000ac95:	90                   	nop

c000ac96 <File::rename(char const*)>:
c000ac96:	83 ec 0c             	sub    esp,0xc
c000ac99:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aca9:	80 f9 19             	cmp    cl,0x19
c000acac:	77 32                	ja     c000ace0 <File::rename(char const*)+0x4a>
c000acae:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000acb5:	85 c9                	test   ecx,ecx
c000acb7:	74 27                	je     c000ace0 <File::rename(char const*)+0x4a>
c000acb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acbf:	85 c9                	test   ecx,ecx
c000acc1:	74 1d                	je     c000ace0 <File::rename(char const*)+0x4a>
c000acc3:	b8 06 00 00 00       	mov    eax,0x6
c000acc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000accc:	75 12                	jne    c000ace0 <File::rename(char const*)+0x4a>
c000acce:	83 c2 0d             	add    edx,0xd
c000acd1:	50                   	push   eax
c000acd2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd8:	52                   	push   edx
c000acd9:	51                   	push   ecx
c000acda:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000acdd:	83 c4 10             	add    esp,0x10
c000ace0:	83 c4 0c             	add    esp,0xc
c000ace3:	c3                   	ret    

c000ace4 <File::chfatattr(unsigned char, unsigned char)>:
c000ace4:	57                   	push   edi
c000ace5:	b8 0b 00 00 00       	mov    eax,0xb
c000acea:	56                   	push   esi
c000aceb:	53                   	push   ebx
c000acec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acf0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acf4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acfb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acff:	80 f9 19             	cmp    cl,0x19
c000ad02:	77 37                	ja     c000ad3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad04:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000ad0b:	85 c9                	test   ecx,ecx
c000ad0d:	74 2c                	je     c000ad3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad15:	85 c9                	test   ecx,ecx
c000ad17:	74 22                	je     c000ad3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad19:	b8 06 00 00 00       	mov    eax,0x6
c000ad1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad22:	75 17                	jne    c000ad3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad24:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad26:	89 f0                	mov    eax,esi
c000ad28:	83 c2 0d             	add    edx,0xd
c000ad2b:	0f b6 f0             	movzx  esi,al
c000ad2e:	0f b6 db             	movzx  ebx,bl
c000ad31:	56                   	push   esi
c000ad32:	53                   	push   ebx
c000ad33:	52                   	push   edx
c000ad34:	51                   	push   ecx
c000ad35:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	5b                   	pop    ebx
c000ad3c:	5e                   	pop    esi
c000ad3d:	5f                   	pop    edi
c000ad3e:	c3                   	ret    
c000ad3f:	90                   	nop

c000ad40 <File::exists()>:
c000ad40:	83 ec 0c             	sub    esp,0xc
c000ad43:	31 c0                	xor    eax,eax
c000ad45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad49:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad50:	80 f9 19             	cmp    cl,0x19
c000ad53:	77 24                	ja     c000ad79 <File::exists()+0x39>
c000ad55:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000ad5c:	85 c9                	test   ecx,ecx
c000ad5e:	74 19                	je     c000ad79 <File::exists()+0x39>
c000ad60:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad66:	85 c9                	test   ecx,ecx
c000ad68:	74 0f                	je     c000ad79 <File::exists()+0x39>
c000ad6a:	83 c2 0d             	add    edx,0xd
c000ad6d:	50                   	push   eax
c000ad6e:	50                   	push   eax
c000ad6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad71:	52                   	push   edx
c000ad72:	51                   	push   ecx
c000ad73:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad76:	83 c4 10             	add    esp,0x10
c000ad79:	83 c4 0c             	add    esp,0xc
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <File::stat(unsigned long long*, bool*)>:
c000ad7e:	56                   	push   esi
c000ad7f:	53                   	push   ebx
c000ad80:	50                   	push   eax
c000ad81:	b8 0b 00 00 00       	mov    eax,0xb
c000ad86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad99:	80 f9 19             	cmp    cl,0x19
c000ad9c:	77 3d                	ja     c000addb <File::stat(unsigned long long*, bool*)+0x5d>
c000ad9e:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000ada5:	85 c9                	test   ecx,ecx
c000ada7:	74 32                	je     c000addb <File::stat(unsigned long long*, bool*)+0x5d>
c000ada9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adaf:	85 c9                	test   ecx,ecx
c000adb1:	74 28                	je     c000addb <File::stat(unsigned long long*, bool*)+0x5d>
c000adb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb9:	74 13                	je     c000adce <File::stat(unsigned long long*, bool*)+0x50>
c000adbb:	83 ec 04             	sub    esp,0x4
c000adbe:	56                   	push   esi
c000adbf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000adc5:	51                   	push   ecx
c000adc6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000adc9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000adcc:	eb 0a                	jmp    c000add8 <File::stat(unsigned long long*, bool*)+0x5a>
c000adce:	53                   	push   ebx
c000adcf:	83 c2 0d             	add    edx,0xd
c000add2:	56                   	push   esi
c000add3:	52                   	push   edx
c000add4:	51                   	push   ecx
c000add5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000add8:	83 c4 10             	add    esp,0x10
c000addb:	5a                   	pop    edx
c000addc:	5b                   	pop    ebx
c000addd:	5e                   	pop    esi
c000adde:	c3                   	ret    

c000addf <Fs::setcwd(Process*, char*)>:
c000addf:	55                   	push   ebp
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	81 ec 20 02 00 00    	sub    esp,0x220
c000ade9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000adf0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000adf6:	57                   	push   edi
c000adf7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000adfe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae02:	56                   	push   esi
c000ae03:	e8 60 fa ff ff       	call   c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae08:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae0b:	e8 30 57 ff ff       	call   c0000540 <strlen>
c000ae10:	83 c4 10             	add    esp,0x10
c000ae13:	83 f8 02             	cmp    eax,0x2
c000ae16:	77 15                	ja     c000ae2d <Fs::setcwd(Process*, char*)+0x4e>
c000ae18:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae1d:	83 eb 41             	sub    ebx,0x41
c000ae20:	8b 04 9d c0 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd540]
c000ae27:	85 c0                	test   eax,eax
c000ae29:	75 1c                	jne    c000ae47 <Fs::setcwd(Process*, char*)+0x68>
c000ae2b:	eb 2f                	jmp    c000ae5c <Fs::setcwd(Process*, char*)+0x7d>
c000ae2d:	83 ec 0c             	sub    esp,0xc
c000ae30:	56                   	push   esi
c000ae31:	e8 0a 57 ff ff       	call   c0000540 <strlen>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	83 f8 03             	cmp    eax,0x3
c000ae3c:	75 57                	jne    c000ae95 <Fs::setcwd(Process*, char*)+0xb6>
c000ae3e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae43:	75 50                	jne    c000ae95 <Fs::setcwd(Process*, char*)+0xb6>
c000ae45:	eb d1                	jmp    c000ae18 <Fs::setcwd(Process*, char*)+0x39>
c000ae47:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae4e:	75 0c                	jne    c000ae5c <Fs::setcwd(Process*, char*)+0x7d>
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	50                   	push   eax
c000ae54:	e8 69 1c 00 00       	call   c000cac2 <LogicalDisk::mount()>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	b8 03 00 00 00       	mov    eax,0x3
c000ae61:	83 fb 19             	cmp    ebx,0x19
c000ae64:	0f 87 c6 00 00 00    	ja     c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000ae6a:	8b 14 9d c0 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd540]
c000ae71:	b8 05 00 00 00       	mov    eax,0x5
c000ae76:	85 d2                	test   edx,edx
c000ae78:	0f 84 b2 00 00 00    	je     c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000ae7e:	b8 06 00 00 00       	mov    eax,0x6
c000ae83:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae8a:	0f 85 92 00 00 00    	jne    c000af22 <Fs::setcwd(Process*, char*)+0x143>
c000ae90:	e9 9b 00 00 00       	jmp    c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000ae95:	83 ec 0c             	sub    esp,0xc
c000ae98:	68 14 01 00 00       	push   0x114
c000ae9d:	e8 5f c9 ff ff       	call   c0007801 <malloc>
c000aea2:	83 c4 0c             	add    esp,0xc
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	55                   	push   ebp
c000aea8:	56                   	push   esi
c000aea9:	50                   	push   eax
c000aeaa:	e8 63 fb ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000aeaf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aeb4:	83 c4 0c             	add    esp,0xc
c000aeb7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aebb:	50                   	push   eax
c000aebc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aec0:	50                   	push   eax
c000aec1:	53                   	push   ebx
c000aec2:	e8 b7 fe ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	83 f8 02             	cmp    eax,0x2
c000aecd:	74 04                	je     c000aed3 <Fs::setcwd(Process*, char*)+0xf4>
c000aecf:	85 c0                	test   eax,eax
c000aed1:	74 1c                	je     c000aeef <Fs::setcwd(Process*, char*)+0x110>
c000aed3:	b8 01 00 00 00       	mov    eax,0x1
c000aed8:	85 db                	test   ebx,ebx
c000aeda:	74 54                	je     c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aee1:	53                   	push   ebx
c000aee2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	b8 01 00 00 00       	mov    eax,0x1
c000aeed:	eb 41                	jmp    c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000aeef:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aef4:	75 1c                	jne    c000af12 <Fs::setcwd(Process*, char*)+0x133>
c000aef6:	b8 02 00 00 00       	mov    eax,0x2
c000aefb:	85 db                	test   ebx,ebx
c000aefd:	74 31                	je     c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af04:	53                   	push   ebx
c000af05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af08:	83 c4 10             	add    esp,0x10
c000af0b:	b8 02 00 00 00       	mov    eax,0x2
c000af10:	eb 1e                	jmp    c000af30 <Fs::setcwd(Process*, char*)+0x151>
c000af12:	85 db                	test   ebx,ebx
c000af14:	74 0c                	je     c000af22 <Fs::setcwd(Process*, char*)+0x143>
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1b:	53                   	push   ebx
c000af1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af1f:	83 c4 10             	add    esp,0x10
c000af22:	50                   	push   eax
c000af23:	50                   	push   eax
c000af24:	56                   	push   esi
c000af25:	57                   	push   edi
c000af26:	e8 d5 56 ff ff       	call   c0000600 <strcpy>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	31 c0                	xor    eax,eax
c000af30:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af36:	5b                   	pop    ebx
c000af37:	5e                   	pop    esi
c000af38:	5f                   	pop    edi
c000af39:	5d                   	pop    ebp
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Directory::Directory(char const*, Process*)>:
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af43:	83 ec 08             	sub    esp,0x8
c000af46:	6a 00                	push   0x0
c000af48:	50                   	push   eax
c000af49:	e8 b8 de ff ff       	call   c0008e06 <UnixFile::UnixFile(int)>
c000af4e:	83 c4 10             	add    esp,0x10
c000af51:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c000af56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5a:	89 10                	mov    DWORD PTR [eax],edx
c000af5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af60:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	83 c0 0d             	add    eax,0xd
c000af6d:	83 ec 04             	sub    esp,0x4
c000af70:	52                   	push   edx
c000af71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af75:	50                   	push   eax
c000af76:	e8 ed f8 ff ff       	call   c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af7b:	83 c4 10             	add    esp,0x10
c000af7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af82:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af85:	8d 50 bf             	lea    edx,[eax-0x41]
c000af88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afa4:	25 ff 00 00 00       	and    eax,0xff
c000afa9:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000afb0:	85 c0                	test   eax,eax
c000afb2:	74 42                	je     c000aff6 <Directory::Directory(char const*, Process*)+0xba>
c000afb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afbe:	25 ff 00 00 00       	and    eax,0xff
c000afc3:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000afca:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000afd0:	85 c0                	test   eax,eax
c000afd2:	75 22                	jne    c000aff6 <Directory::Directory(char const*, Process*)+0xba>
c000afd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afde:	25 ff 00 00 00       	and    eax,0xff
c000afe3:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c000afea:	83 ec 0c             	sub    esp,0xc
c000afed:	50                   	push   eax
c000afee:	e8 cf 1a 00 00       	call   c000cac2 <LogicalDisk::mount()>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	90                   	nop
c000aff7:	83 c4 0c             	add    esp,0xc
c000affa:	c3                   	ret    
c000affb:	90                   	nop

c000affc <Directory::open()>:
c000affc:	53                   	push   ebx
c000affd:	b8 0b 00 00 00       	mov    eax,0xb
c000b002:	83 ec 08             	sub    esp,0x8
c000b005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b009:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b010:	80 fa 19             	cmp    dl,0x19
c000b013:	77 3d                	ja     c000b052 <Directory::open()+0x56>
c000b015:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000b01c:	85 d2                	test   edx,edx
c000b01e:	74 32                	je     c000b052 <Directory::open()+0x56>
c000b020:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b026:	85 d2                	test   edx,edx
c000b028:	74 28                	je     c000b052 <Directory::open()+0x56>
c000b02a:	b8 06 00 00 00       	mov    eax,0x6
c000b02f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b033:	75 1d                	jne    c000b052 <Directory::open()+0x56>
c000b035:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b03b:	50                   	push   eax
c000b03c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b03e:	51                   	push   ecx
c000b03f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b042:	51                   	push   ecx
c000b043:	52                   	push   edx
c000b044:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	85 c0                	test   eax,eax
c000b04c:	75 04                	jne    c000b052 <Directory::open()+0x56>
c000b04e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b052:	83 c4 08             	add    esp,0x8
c000b055:	5b                   	pop    ebx
c000b056:	c3                   	ret    
c000b057:	90                   	nop

c000b058 <Directory::close()>:
c000b058:	53                   	push   ebx
c000b059:	b8 0b 00 00 00       	mov    eax,0xb
c000b05e:	83 ec 08             	sub    esp,0x8
c000b061:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b065:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b06c:	80 fa 19             	cmp    dl,0x19
c000b06f:	77 41                	ja     c000b0b2 <Directory::close()+0x5a>
c000b071:	8b 1c 95 c0 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd540]
c000b078:	85 db                	test   ebx,ebx
c000b07a:	74 36                	je     c000b0b2 <Directory::close()+0x5a>
c000b07c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b083:	74 2d                	je     c000b0b2 <Directory::close()+0x5a>
c000b085:	b8 05 00 00 00       	mov    eax,0x5
c000b08a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b08e:	74 22                	je     c000b0b2 <Directory::close()+0x5a>
c000b090:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b094:	8b 04 95 c0 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd540]
c000b09b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0a1:	53                   	push   ebx
c000b0a2:	53                   	push   ebx
c000b0a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0ab:	50                   	push   eax
c000b0ac:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	83 c4 08             	add    esp,0x8
c000b0b5:	5b                   	pop    ebx
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Directory::unlink()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0cb:	80 f9 19             	cmp    cl,0x19
c000b0ce:	77 2f                	ja     c000b0ff <Directory::unlink()+0x47>
c000b0d0:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000b0d7:	85 c9                	test   ecx,ecx
c000b0d9:	74 24                	je     c000b0ff <Directory::unlink()+0x47>
c000b0db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0e1:	85 c9                	test   ecx,ecx
c000b0e3:	74 1a                	je     c000b0ff <Directory::unlink()+0x47>
c000b0e5:	b8 06 00 00 00       	mov    eax,0x6
c000b0ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0ee:	75 0f                	jne    c000b0ff <Directory::unlink()+0x47>
c000b0f0:	83 c2 0d             	add    edx,0xd
c000b0f3:	50                   	push   eax
c000b0f4:	50                   	push   eax
c000b0f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0f7:	52                   	push   edx
c000b0f8:	51                   	push   ecx
c000b0f9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0fc:	83 c4 10             	add    esp,0x10
c000b0ff:	83 c4 0c             	add    esp,0xc
c000b102:	c3                   	ret    
c000b103:	90                   	nop

c000b104 <Directory::rename(char const*)>:
c000b104:	83 ec 0c             	sub    esp,0xc
c000b107:	b8 0b 00 00 00       	mov    eax,0xb
c000b10c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b110:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b117:	80 f9 19             	cmp    cl,0x19
c000b11a:	77 32                	ja     c000b14e <Directory::rename(char const*)+0x4a>
c000b11c:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000b123:	85 c9                	test   ecx,ecx
c000b125:	74 27                	je     c000b14e <Directory::rename(char const*)+0x4a>
c000b127:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b12d:	85 c9                	test   ecx,ecx
c000b12f:	74 1d                	je     c000b14e <Directory::rename(char const*)+0x4a>
c000b131:	b8 06 00 00 00       	mov    eax,0x6
c000b136:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b13a:	75 12                	jne    c000b14e <Directory::rename(char const*)+0x4a>
c000b13c:	83 c2 0d             	add    edx,0xd
c000b13f:	50                   	push   eax
c000b140:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b146:	52                   	push   edx
c000b147:	51                   	push   ecx
c000b148:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	83 c4 0c             	add    esp,0xc
c000b151:	c3                   	ret    

c000b152 <Directory::exists()>:
c000b152:	83 ec 0c             	sub    esp,0xc
c000b155:	31 c0                	xor    eax,eax
c000b157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b15b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b162:	80 f9 19             	cmp    cl,0x19
c000b165:	77 24                	ja     c000b18b <Directory::exists()+0x39>
c000b167:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000b16e:	85 c9                	test   ecx,ecx
c000b170:	74 19                	je     c000b18b <Directory::exists()+0x39>
c000b172:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b178:	85 c9                	test   ecx,ecx
c000b17a:	74 0f                	je     c000b18b <Directory::exists()+0x39>
c000b17c:	83 c2 0d             	add    edx,0xd
c000b17f:	50                   	push   eax
c000b180:	50                   	push   eax
c000b181:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b183:	52                   	push   edx
c000b184:	51                   	push   ecx
c000b185:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b188:	83 c4 10             	add    esp,0x10
c000b18b:	83 c4 0c             	add    esp,0xc
c000b18e:	c3                   	ret    
c000b18f:	90                   	nop

c000b190 <Directory::read(dirent*)>:
c000b190:	83 ec 1c             	sub    esp,0x1c
c000b193:	b8 0b 00 00 00       	mov    eax,0xb
c000b198:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1a3:	80 fa 19             	cmp    dl,0x19
c000b1a6:	77 30                	ja     c000b1d8 <Directory::read(dirent*)+0x48>
c000b1a8:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c000b1af:	85 d2                	test   edx,edx
c000b1b1:	74 25                	je     c000b1d8 <Directory::read(dirent*)+0x48>
c000b1b3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1ba:	74 1c                	je     c000b1d8 <Directory::read(dirent*)+0x48>
c000b1bc:	83 ec 0c             	sub    esp,0xc
c000b1bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1c5:	52                   	push   edx
c000b1c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ca:	6a 00                	push   0x0
c000b1cc:	68 10 01 00 00       	push   0x110
c000b1d1:	51                   	push   ecx
c000b1d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1d5:	83 c4 20             	add    esp,0x20
c000b1d8:	83 c4 1c             	add    esp,0x1c
c000b1db:	c3                   	ret    

c000b1dc <Directory::create()>:
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ef:	80 f9 19             	cmp    cl,0x19
c000b1f2:	77 2f                	ja     c000b223 <Directory::create()+0x47>
c000b1f4:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c000b1fb:	85 c9                	test   ecx,ecx
c000b1fd:	74 24                	je     c000b223 <Directory::create()+0x47>
c000b1ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b205:	85 c9                	test   ecx,ecx
c000b207:	74 1a                	je     c000b223 <Directory::create()+0x47>
c000b209:	b8 06 00 00 00       	mov    eax,0x6
c000b20e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b212:	75 0f                	jne    c000b223 <Directory::create()+0x47>
c000b214:	83 c2 0d             	add    edx,0xd
c000b217:	50                   	push   eax
c000b218:	50                   	push   eax
c000b219:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b21b:	52                   	push   edx
c000b21c:	51                   	push   ecx
c000b21d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b220:	83 c4 10             	add    esp,0x10
c000b223:	83 c4 0c             	add    esp,0xc
c000b226:	c3                   	ret    
c000b227:	90                   	nop

c000b228 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b228:	b8 0a 00 00 00       	mov    eax,0xa
c000b22d:	c3                   	ret    
c000b22e:	66 90                	xchg   ax,ax

c000b230 <Bus::Bus(char const*)>:
c000b230:	83 ec 0c             	sub    esp,0xc
c000b233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b237:	83 ec 08             	sub    esp,0x8
c000b23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23e:	50                   	push   eax
c000b23f:	e8 30 08 00 00       	call   c000ba74 <Device::Device(char const*)>
c000b244:	83 c4 10             	add    esp,0x10
c000b247:	ba 54 d9 01 c0       	mov    edx,0xc001d954
c000b24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b250:	89 10                	mov    DWORD PTR [eax],edx
c000b252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b256:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b260:	90                   	nop
c000b261:	83 c4 0c             	add    esp,0xc
c000b264:	c3                   	ret    
c000b265:	90                   	nop
c000b266:	66 90                	xchg   ax,ax

c000b268 <Bus::~Bus()>:
c000b268:	83 ec 0c             	sub    esp,0xc
c000b26b:	ba 54 d9 01 c0       	mov    edx,0xc001d954
c000b270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b274:	89 10                	mov    DWORD PTR [eax],edx
c000b276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	50                   	push   eax
c000b27e:	e8 5b 05 00 00       	call   c000b7de <Device::~Device()>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	90                   	nop
c000b287:	83 c4 0c             	add    esp,0xc
c000b28a:	c3                   	ret    
c000b28b:	90                   	nop

c000b28c <Bus::~Bus()>:
c000b28c:	83 ec 0c             	sub    esp,0xc
c000b28f:	83 ec 0c             	sub    esp,0xc
c000b292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b296:	e8 cd ff ff ff       	call   c000b268 <Bus::~Bus()>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	83 ec 08             	sub    esp,0x8
c000b2a1:	68 58 01 00 00       	push   0x158
c000b2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2aa:	e8 f7 f0 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 c4 0c             	add    esp,0xc
c000b2b5:	c3                   	ret    

c000b2b6 <beepThread(void*)>:
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000b2be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c2:	48                   	dec    eax
c000b2c3:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000b2c8:	75 01                	jne    c000b2cb <beepThread(void*)+0x15>
c000b2ca:	fb                   	sti    
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	6b c2 0a             	imul   eax,edx,0xa
c000b2d1:	50                   	push   eax
c000b2d2:	e8 29 83 00 00       	call   c0013600 <milliTenthSleep(unsigned int)>
c000b2d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b2de:	e8 cf a0 00 00       	call   c00153b2 <HalMakeBeep(int)>
c000b2e3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2eb:	83 c4 1c             	add    esp,0x1c
c000b2ee:	e9 09 82 00 00       	jmp    c00134fc <blockTask(TaskState)>

c000b2f3 <Krnl::beep(int, int, bool)>:
c000b2f3:	56                   	push   esi
c000b2f4:	53                   	push   ebx
c000b2f5:	83 ec 10             	sub    esp,0x10
c000b2f8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b2fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b304:	e8 a9 a0 00 00       	call   c00153b2 <HalMakeBeep(int)>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 f0                	mov    eax,esi
c000b30e:	84 c0                	test   al,al
c000b310:	74 1e                	je     c000b330 <Krnl::beep(int, int, bool)+0x3d>
c000b312:	83 ec 0c             	sub    esp,0xc
c000b315:	6b db 0a             	imul   ebx,ebx,0xa
c000b318:	53                   	push   ebx
c000b319:	e8 e2 82 00 00       	call   c0013600 <milliTenthSleep(unsigned int)>
c000b31e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b326:	83 c4 14             	add    esp,0x14
c000b329:	5b                   	pop    ebx
c000b32a:	5e                   	pop    esi
c000b32b:	e9 82 a0 00 00       	jmp    c00153b2 <HalMakeBeep(int)>
c000b330:	68 e6 00 00 00       	push   0xe6
c000b335:	53                   	push   ebx
c000b336:	68 b6 b2 00 c0       	push   0xc000b2b6
c000b33b:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c000b341:	e8 9a 7d 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c000b346:	83 c4 14             	add    esp,0x14
c000b349:	5b                   	pop    ebx
c000b34a:	5e                   	pop    esi
c000b34b:	c3                   	ret    

c000b34c <User::loadClockSettings(int)>:
c000b34c:	53                   	push   ebx
c000b34d:	83 ec 14             	sub    esp,0x14
c000b350:	68 14 01 00 00       	push   0x114
c000b355:	e8 a7 c4 ff ff       	call   c0007801 <malloc>
c000b35a:	83 c4 0c             	add    esp,0xc
c000b35d:	89 c3                	mov    ebx,eax
c000b35f:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c000b365:	68 78 d9 01 c0       	push   0xc001d978
c000b36a:	50                   	push   eax
c000b36b:	e8 a2 f6 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000b370:	58                   	pop    eax
c000b371:	5a                   	pop    edx
c000b372:	6a 01                	push   0x1
c000b374:	53                   	push   ebx
c000b375:	e8 58 f7 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c000b37a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b37d:	e8 ae f7 ff ff       	call   c000ab30 <File::close()>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	85 db                	test   ebx,ebx
c000b387:	74 0f                	je     c000b398 <User::loadClockSettings(int)+0x4c>
c000b389:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b392:	83 c4 08             	add    esp,0x8
c000b395:	5b                   	pop    ebx
c000b396:	ff e0                	jmp    eax
c000b398:	83 c4 08             	add    esp,0x8
c000b39b:	5b                   	pop    ebx
c000b39c:	c3                   	ret    
c000b39d:	90                   	nop

c000b39e <Clock::Clock(char const*)>:
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a5:	83 ec 08             	sub    esp,0x8
c000b3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ac:	50                   	push   eax
c000b3ad:	e8 c2 06 00 00       	call   c000ba74 <Device::Device(char const*)>
c000b3b2:	83 c4 10             	add    esp,0x10
c000b3b5:	ba a0 d9 01 c0       	mov    edx,0xc001d9a0
c000b3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3be:	89 10                	mov    DWORD PTR [eax],edx
c000b3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b3ce:	90                   	nop
c000b3cf:	83 c4 0c             	add    esp,0xc
c000b3d2:	c3                   	ret    
c000b3d3:	90                   	nop

c000b3d4 <Clock::~Clock()>:
c000b3d4:	83 ec 0c             	sub    esp,0xc
c000b3d7:	ba a0 d9 01 c0       	mov    edx,0xc001d9a0
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	89 10                	mov    DWORD PTR [eax],edx
c000b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	50                   	push   eax
c000b3ea:	e8 ef 03 00 00       	call   c000b7de <Device::~Device()>
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	90                   	nop
c000b3f3:	83 c4 0c             	add    esp,0xc
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <Clock::~Clock()>:
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 cd ff ff ff       	call   c000b3d4 <Clock::~Clock()>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 ec 08             	sub    esp,0x8
c000b40d:	68 58 01 00 00       	push   0x158
c000b412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b416:	e8 8b ef ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	83 c4 0c             	add    esp,0xc
c000b421:	c3                   	ret    

c000b422 <Clock::timeInSecondsLocal()>:
c000b422:	53                   	push   ebx
c000b423:	83 ec 14             	sub    esp,0x14
c000b426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b42c:	50                   	push   eax
c000b42d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b430:	0f b6 0d 58 06 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020658
c000b437:	03 0d 5c 06 02 c0    	add    ecx,DWORD PTR ds:0xc002065c
c000b43d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b443:	89 cb                	mov    ebx,ecx
c000b445:	c1 fb 1f             	sar    ebx,0x1f
c000b448:	01 c8                	add    eax,ecx
c000b44a:	11 da                	adc    edx,ebx
c000b44c:	83 c4 10             	add    esp,0x10
c000b44f:	31 c9                	xor    ecx,ecx
c000b451:	80 3d 59 06 02 c0 00 	cmp    BYTE PTR ds:0xc0020659,0x0
c000b458:	74 05                	je     c000b45f <Clock::timeInSecondsLocal()+0x3d>
c000b45a:	b9 08 07 00 00       	mov    ecx,0x708
c000b45f:	31 db                	xor    ebx,ebx
c000b461:	01 c8                	add    eax,ecx
c000b463:	11 da                	adc    edx,ebx
c000b465:	83 c4 08             	add    esp,0x8
c000b468:	5b                   	pop    ebx
c000b469:	c3                   	ret    

c000b46a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b46a:	57                   	push   edi
c000b46b:	56                   	push   esi
c000b46c:	53                   	push   ebx
c000b46d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b471:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b475:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b477:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b47b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b47e:	0f b6 05 58 06 02 c0 	movzx  eax,BYTE PTR ds:0xc0020658
c000b485:	03 05 5c 06 02 c0    	add    eax,DWORD PTR ds:0xc002065c
c000b48b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b491:	99                   	cdq    
c000b492:	29 c6                	sub    esi,eax
c000b494:	19 d7                	sbb    edi,edx
c000b496:	89 f0                	mov    eax,esi
c000b498:	89 fa                	mov    edx,edi
c000b49a:	31 f6                	xor    esi,esi
c000b49c:	80 3d 59 06 02 c0 00 	cmp    BYTE PTR ds:0xc0020659,0x0
c000b4a3:	74 05                	je     c000b4aa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4a5:	be 08 07 00 00       	mov    esi,0x708
c000b4aa:	31 ff                	xor    edi,edi
c000b4ac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4b0:	29 f0                	sub    eax,esi
c000b4b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4b6:	19 fa                	sbb    edx,edi
c000b4b8:	89 d8                	mov    eax,ebx
c000b4ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4be:	5b                   	pop    ebx
c000b4bf:	5e                   	pop    esi
c000b4c0:	5f                   	pop    edi
c000b4c1:	ff e0                	jmp    eax

c000b4c3 <datetimeToSeconds(datetime_t)>:
c000b4c3:	55                   	push   ebp
c000b4c4:	57                   	push   edi
c000b4c5:	56                   	push   esi
c000b4c6:	53                   	push   ebx
c000b4c7:	83 ec 14             	sub    esp,0x14
c000b4ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b4ce:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b4d2:	89 d3                	mov    ebx,edx
c000b4d4:	0f b6 c6             	movzx  eax,dh
c000b4d7:	c1 eb 10             	shr    ebx,0x10
c000b4da:	48                   	dec    eax
c000b4db:	66 81 eb 6c 07       	sub    bx,0x76c
c000b4e0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b4e4:	0f b6 f5             	movzx  esi,ch
c000b4e7:	89 cf                	mov    edi,ecx
c000b4e9:	6b f6 3c             	imul   esi,esi,0x3c
c000b4ec:	c1 ef 10             	shr    edi,0x10
c000b4ef:	0f b6 c9             	movzx  ecx,cl
c000b4f2:	89 f8                	mov    eax,edi
c000b4f4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4fa:	0f b6 f8             	movzx  edi,al
c000b4fd:	0f b6 d2             	movzx  edx,dl
c000b500:	01 fe                	add    esi,edi
c000b502:	01 f1                	add    ecx,esi
c000b504:	0f b7 f3             	movzx  esi,bx
c000b507:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b50b:	c1 f9 1f             	sar    ecx,0x1f
c000b50e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b513:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b517:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b51c:	8b 0c 8d e0 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2620]
c000b523:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b527:	76 29                	jbe    c000b552 <datetimeToSeconds(datetime_t)+0x8f>
c000b529:	f6 c3 03             	test   bl,0x3
c000b52c:	75 24                	jne    c000b552 <datetimeToSeconds(datetime_t)+0x8f>
c000b52e:	31 d2                	xor    edx,edx
c000b530:	bf 64 00 00 00       	mov    edi,0x64
c000b535:	89 d8                	mov    eax,ebx
c000b537:	66 f7 f7             	div    di
c000b53a:	66 85 d2             	test   dx,dx
c000b53d:	75 12                	jne    c000b551 <datetimeToSeconds(datetime_t)+0x8e>
c000b53f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b545:	bf 90 01 00 00       	mov    edi,0x190
c000b54a:	99                   	cdq    
c000b54b:	f7 ff                	idiv   edi
c000b54d:	85 d2                	test   edx,edx
c000b54f:	75 01                	jne    c000b552 <datetimeToSeconds(datetime_t)+0x8f>
c000b551:	41                   	inc    ecx
c000b552:	66 83 fb 46          	cmp    bx,0x46
c000b556:	76 45                	jbe    c000b59d <datetimeToSeconds(datetime_t)+0xda>
c000b558:	bb 46 00 00 00       	mov    ebx,0x46
c000b55d:	bf 64 00 00 00       	mov    edi,0x64
c000b562:	bd 90 01 00 00       	mov    ebp,0x190
c000b567:	b8 6d 01 00 00       	mov    eax,0x16d
c000b56c:	f6 c3 03             	test   bl,0x3
c000b56f:	75 23                	jne    c000b594 <datetimeToSeconds(datetime_t)+0xd1>
c000b571:	89 d8                	mov    eax,ebx
c000b573:	99                   	cdq    
c000b574:	f7 ff                	idiv   edi
c000b576:	b8 6e 01 00 00       	mov    eax,0x16e
c000b57b:	85 d2                	test   edx,edx
c000b57d:	75 15                	jne    c000b594 <datetimeToSeconds(datetime_t)+0xd1>
c000b57f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b585:	99                   	cdq    
c000b586:	f7 fd                	idiv   ebp
c000b588:	31 c0                	xor    eax,eax
c000b58a:	85 d2                	test   edx,edx
c000b58c:	0f 94 c0             	sete   al
c000b58f:	05 6d 01 00 00       	add    eax,0x16d
c000b594:	01 c1                	add    ecx,eax
c000b596:	43                   	inc    ebx
c000b597:	39 f3                	cmp    ebx,esi
c000b599:	7c cc                	jl     c000b567 <datetimeToSeconds(datetime_t)+0xa4>
c000b59b:	eb 3b                	jmp    c000b5d8 <datetimeToSeconds(datetime_t)+0x115>
c000b59d:	74 39                	je     c000b5d8 <datetimeToSeconds(datetime_t)+0x115>
c000b59f:	b8 45 00 00 00       	mov    eax,0x45
c000b5a4:	89 c2                	mov    edx,eax
c000b5a6:	83 e2 03             	and    edx,0x3
c000b5a9:	39 f0                	cmp    eax,esi
c000b5ab:	7e 13                	jle    c000b5c0 <datetimeToSeconds(datetime_t)+0xfd>
c000b5ad:	85 d2                	test   edx,edx
c000b5af:	0f 94 c2             	sete   dl
c000b5b2:	48                   	dec    eax
c000b5b3:	0f b6 d2             	movzx  edx,dl
c000b5b6:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5bc:	29 d1                	sub    ecx,edx
c000b5be:	eb e4                	jmp    c000b5a4 <datetimeToSeconds(datetime_t)+0xe1>
c000b5c0:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5c5:	85 d2                	test   edx,edx
c000b5c7:	75 0d                	jne    c000b5d6 <datetimeToSeconds(datetime_t)+0x113>
c000b5c9:	31 c0                	xor    eax,eax
c000b5cb:	66 85 db             	test   bx,bx
c000b5ce:	0f 95 c0             	setne  al
c000b5d1:	05 6d 01 00 00       	add    eax,0x16d
c000b5d6:	29 c1                	sub    ecx,eax
c000b5d8:	b8 80 51 01 00       	mov    eax,0x15180
c000b5dd:	f7 e9                	imul   ecx
c000b5df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b5e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b5e7:	83 c4 14             	add    esp,0x14
c000b5ea:	5b                   	pop    ebx
c000b5eb:	5e                   	pop    esi
c000b5ec:	5f                   	pop    edi
c000b5ed:	5d                   	pop    ebp
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5f0:	57                   	push   edi
c000b5f1:	56                   	push   esi
c000b5f2:	53                   	push   ebx
c000b5f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5f7:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5f9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b5fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b604:	e8 ba fe ff ff       	call   c000b4c3 <datetimeToSeconds(datetime_t)>
c000b609:	59                   	pop    ecx
c000b60a:	0f b6 0d 58 06 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020658
c000b611:	5b                   	pop    ebx
c000b612:	03 0d 5c 06 02 c0    	add    ecx,DWORD PTR ds:0xc002065c
c000b618:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b61e:	89 cb                	mov    ebx,ecx
c000b620:	c1 fb 1f             	sar    ebx,0x1f
c000b623:	29 c8                	sub    eax,ecx
c000b625:	19 da                	sbb    edx,ebx
c000b627:	31 c9                	xor    ecx,ecx
c000b629:	80 3d 59 06 02 c0 00 	cmp    BYTE PTR ds:0xc0020659,0x0
c000b630:	74 05                	je     c000b637 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b632:	b9 08 07 00 00       	mov    ecx,0x708
c000b637:	31 db                	xor    ebx,ebx
c000b639:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b63d:	29 c8                	sub    eax,ecx
c000b63f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b643:	19 da                	sbb    edx,ebx
c000b645:	89 f8                	mov    eax,edi
c000b647:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b64b:	5b                   	pop    ebx
c000b64c:	5e                   	pop    esi
c000b64d:	5f                   	pop    edi
c000b64e:	ff e0                	jmp    eax

c000b650 <secondsToDatetime(unsigned long long)>:
c000b650:	55                   	push   ebp
c000b651:	57                   	push   edi
c000b652:	56                   	push   esi
c000b653:	53                   	push   ebx
c000b654:	83 ec 1c             	sub    esp,0x1c
c000b657:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b65b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b65f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b663:	6a 00                	push   0x0
c000b665:	68 80 51 01 00       	push   0x15180
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	e8 df 05 01 00       	call   c001bc50 <__udivdi3>
c000b671:	83 c4 10             	add    esp,0x10
c000b674:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b67a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67e:	6a 00                	push   0x0
c000b680:	68 80 51 01 00       	push   0x15180
c000b685:	55                   	push   ebp
c000b686:	57                   	push   edi
c000b687:	bf 10 0e 00 00       	mov    edi,0xe10
c000b68c:	e8 bf 06 01 00       	call   c001bd50 <__umoddi3>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	99                   	cdq    
c000b695:	f7 ff                	idiv   edi
c000b697:	bf 3c 00 00 00       	mov    edi,0x3c
c000b69c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b69f:	89 d0                	mov    eax,edx
c000b6a1:	99                   	cdq    
c000b6a2:	f7 ff                	idiv   edi
c000b6a4:	85 db                	test   ebx,ebx
c000b6a6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6a9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6ac:	79 11                	jns    c000b6bf <secondsToDatetime(unsigned long long)+0x6f>
c000b6ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6b2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6b8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6bd:	eb 07                	jmp    c000b6c6 <secondsToDatetime(unsigned long long)+0x76>
c000b6bf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6c4:	89 d8                	mov    eax,ebx
c000b6c6:	bf b4 05 00 00       	mov    edi,0x5b4
c000b6cb:	99                   	cdq    
c000b6cc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b6d1:	f7 f9                	idiv   ecx
c000b6d3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b6d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6dc:	31 d2                	xor    edx,edx
c000b6de:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b6e6:	01 c3                	add    ebx,eax
c000b6e8:	89 d8                	mov    eax,ebx
c000b6ea:	f7 f1                	div    ecx
c000b6ec:	31 d2                	xor    edx,edx
c000b6ee:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6f1:	89 d8                	mov    eax,ebx
c000b6f3:	f7 f7                	div    edi
c000b6f5:	31 d2                	xor    edx,edx
c000b6f7:	29 c1                	sub    ecx,eax
c000b6f9:	89 d8                	mov    eax,ebx
c000b6fb:	f7 f5                	div    ebp
c000b6fd:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b702:	29 c1                	sub    ecx,eax
c000b704:	31 d2                	xor    edx,edx
c000b706:	89 c8                	mov    eax,ecx
c000b708:	f7 f5                	div    ebp
c000b70a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b70f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b713:	31 d2                	xor    edx,edx
c000b715:	89 c8                	mov    eax,ecx
c000b717:	f7 f5                	div    ebp
c000b719:	31 d2                	xor    edx,edx
c000b71b:	01 c3                	add    ebx,eax
c000b71d:	89 c8                	mov    eax,ecx
c000b71f:	f7 f7                	div    edi
c000b721:	bf 99 00 00 00       	mov    edi,0x99
c000b726:	29 c3                	sub    ebx,eax
c000b728:	31 d2                	xor    edx,edx
c000b72a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b732:	29 c3                	sub    ebx,eax
c000b734:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b737:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b73a:	bb 05 00 00 00       	mov    ebx,0x5
c000b73f:	83 c1 02             	add    ecx,0x2
c000b742:	89 c8                	mov    eax,ecx
c000b744:	f7 f7                	div    edi
c000b746:	31 d2                	xor    edx,edx
c000b748:	89 c7                	mov    edi,eax
c000b74a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b750:	83 c0 02             	add    eax,0x2
c000b753:	f7 f3                	div    ebx
c000b755:	89 eb                	mov    ebx,ebp
c000b757:	29 c3                	sub    ebx,eax
c000b759:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b75f:	88 1e                	mov    BYTE PTR [esi],bl
c000b761:	19 c0                	sbb    eax,eax
c000b763:	31 d2                	xor    edx,edx
c000b765:	83 e0 0c             	and    eax,0xc
c000b768:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b76c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b774:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b778:	83 f9 01             	cmp    ecx,0x1
c000b77b:	0f 96 c2             	setbe  dl
c000b77e:	41                   	inc    ecx
c000b77f:	01 d0                	add    eax,edx
c000b781:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b784:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b788:	83 c4 1c             	add    esp,0x1c
c000b78b:	89 f0                	mov    eax,esi
c000b78d:	5b                   	pop    ebx
c000b78e:	5e                   	pop    esi
c000b78f:	5f                   	pop    edi
c000b790:	5d                   	pop    ebp
c000b791:	c2 04 00             	ret    0x4

c000b794 <Clock::timeInDatetimeLocal()>:
c000b794:	53                   	push   ebx
c000b795:	83 ec 14             	sub    esp,0x14
c000b798:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b79c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7a0:	e8 7d fc ff ff       	call   c000b422 <Clock::timeInSecondsLocal()>
c000b7a5:	83 c4 0c             	add    esp,0xc
c000b7a8:	52                   	push   edx
c000b7a9:	50                   	push   eax
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 a0 fe ff ff       	call   c000b650 <secondsToDatetime(unsigned long long)>
c000b7b0:	89 d8                	mov    eax,ebx
c000b7b2:	83 c4 14             	add    esp,0x14
c000b7b5:	5b                   	pop    ebx
c000b7b6:	c2 04 00             	ret    0x4
c000b7b9:	90                   	nop

c000b7ba <Device::hibernate()>:
c000b7ba:	c3                   	ret    
c000b7bb:	90                   	nop

c000b7bc <Device::wake()>:
c000b7bc:	c3                   	ret    
c000b7bd:	90                   	nop

c000b7be <Device::detect()>:
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <Device::disableLegacy()>:
c000b7c0:	c3                   	ret    
c000b7c1:	90                   	nop

c000b7c2 <Device::powerSaving(PowerSavingLevel)>:
c000b7c2:	c3                   	ret    
c000b7c3:	90                   	nop

c000b7c4 <DriverlessDevice::close(int, int, void*)>:
c000b7c4:	31 c0                	xor    eax,eax
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <DriverlessDevice::detect()>:
c000b7c8:	c3                   	ret    
c000b7c9:	90                   	nop

c000b7ca <DriverlessDevice::open(int, int, void*)>:
c000b7ca:	83 ec 18             	sub    esp,0x18
c000b7cd:	68 10 da 01 c0       	push   0xc001da10
c000b7d2:	e8 28 49 00 00       	call   c00100ff <KePanic(char const*)>
c000b7d7:	83 c8 ff             	or     eax,0xffffffff
c000b7da:	83 c4 1c             	add    esp,0x1c
c000b7dd:	c3                   	ret    

c000b7de <Device::~Device()>:
c000b7de:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000b7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e7:	89 10                	mov    DWORD PTR [eax],edx
c000b7e9:	90                   	nop
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <Device::~Device()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7f3:	e8 e6 ff ff ff       	call   c000b7de <Device::~Device()>
c000b7f8:	83 c4 04             	add    esp,0x4
c000b7fb:	83 ec 08             	sub    esp,0x8
c000b7fe:	68 58 01 00 00       	push   0x158
c000b803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b807:	e8 9a eb ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	83 c4 0c             	add    esp,0xc
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <Device::findAndLoadDriver()>:
c000b814:	c7 44 24 04 2e da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da2e
c000b81c:	e9 7b ec ff ff       	jmp    c000a49c <Dbg::kprintf(char const*, ...)>
c000b821:	90                   	nop

c000b822 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b822:	57                   	push   edi
c000b823:	b9 09 00 00 00       	mov    ecx,0x9
c000b828:	56                   	push   esi
c000b829:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b82d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b831:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b83b:	81 c7 18 01 00 00    	add    edi,0x118
c000b841:	fc                   	cld    
c000b842:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b844:	5e                   	pop    esi
c000b845:	5f                   	pop    edi
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <Device::preOpenACPI(void*, char*, char*)>:
c000b848:	57                   	push   edi
c000b849:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b84e:	56                   	push   esi
c000b84f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b853:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b857:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b861:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b867:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b86d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b871:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b873:	b9 0e 00 00 00       	mov    ecx,0xe
c000b878:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b87e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b884:	5e                   	pop    esi
c000b885:	5f                   	pop    edi
c000b886:	c3                   	ret    
c000b887:	90                   	nop

c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b888:	53                   	push   ebx
c000b889:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b88d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b895:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b899:	0f b6 c0             	movzx  eax,al
c000b89c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8ac:	5b                   	pop    ebx
c000b8ad:	e9 a6 05 00 00       	jmp    c000be58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8b2 <Device::getParent()>:
c000b8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8b6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8bc:	c3                   	ret    
c000b8bd:	90                   	nop

c000b8be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8c6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b8cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8d7:	e9 e8 06 00 00       	jmp    c000bfc4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b8dc <Device::addChild(Device*)>:
c000b8dc:	53                   	push   ebx
c000b8dd:	83 ec 08             	sub    esp,0x8
c000b8e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8e8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8ee:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8f6:	85 d2                	test   edx,edx
c000b8f8:	74 04                	je     c000b8fe <Device::addChild(Device*)+0x22>
c000b8fa:	89 d3                	mov    ebx,edx
c000b8fc:	eb f6                	jmp    c000b8f4 <Device::addChild(Device*)+0x18>
c000b8fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b901:	83 ec 0c             	sub    esp,0xc
c000b904:	6a 08                	push   0x8
c000b906:	e8 f6 be ff ff       	call   c0007801 <malloc>
c000b90b:	89 03                	mov    DWORD PTR [ebx],eax
c000b90d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91a:	83 c4 18             	add    esp,0x18
c000b91d:	5b                   	pop    ebx
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <Device::removeAllChildren()>:
c000b920:	56                   	push   esi
c000b921:	53                   	push   ebx
c000b922:	52                   	push   edx
c000b923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b927:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b92d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b930:	74 17                	je     c000b949 <Device::removeAllChildren()+0x29>
c000b932:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b935:	85 c0                	test   eax,eax
c000b937:	74 0c                	je     c000b945 <Device::removeAllChildren()+0x25>
c000b939:	83 ec 0c             	sub    esp,0xc
c000b93c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b93e:	50                   	push   eax
c000b93f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b942:	83 c4 10             	add    esp,0x10
c000b945:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b947:	eb e4                	jmp    c000b92d <Device::removeAllChildren()+0xd>
c000b949:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b94f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b955:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b962:	58                   	pop    eax
c000b963:	5b                   	pop    ebx
c000b964:	5e                   	pop    esi
c000b965:	c3                   	ret    

c000b966 <Device::hibernateAll()>:
c000b966:	53                   	push   ebx
c000b967:	83 ec 14             	sub    esp,0x14
c000b96a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b96e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b970:	53                   	push   ebx
c000b971:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b974:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b980:	74 0f                	je     c000b991 <Device::hibernateAll()+0x2b>
c000b982:	83 ec 0c             	sub    esp,0xc
c000b985:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b988:	e8 d9 ff ff ff       	call   c000b966 <Device::hibernateAll()>
c000b98d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b98f:	eb e9                	jmp    c000b97a <Device::hibernateAll()+0x14>
c000b991:	83 c4 08             	add    esp,0x8
c000b994:	5b                   	pop    ebx
c000b995:	c3                   	ret    

c000b996 <Device::wakeAll()>:
c000b996:	53                   	push   ebx
c000b997:	83 ec 14             	sub    esp,0x14
c000b99a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b99e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9a0:	53                   	push   ebx
c000b9a1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9b0:	74 0f                	je     c000b9c1 <Device::wakeAll()+0x2b>
c000b9b2:	83 ec 0c             	sub    esp,0xc
c000b9b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9b8:	e8 d9 ff ff ff       	call   c000b996 <Device::wakeAll()>
c000b9bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9bf:	eb e9                	jmp    c000b9aa <Device::wakeAll()+0x14>
c000b9c1:	83 c4 08             	add    esp,0x8
c000b9c4:	5b                   	pop    ebx
c000b9c5:	c3                   	ret    

c000b9c6 <Device::detectAll()>:
c000b9c6:	53                   	push   ebx
c000b9c7:	83 ec 14             	sub    esp,0x14
c000b9ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9d0:	53                   	push   ebx
c000b9d1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b9d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9da:	83 c4 10             	add    esp,0x10
c000b9dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9e0:	74 0f                	je     c000b9f1 <Device::detectAll()+0x2b>
c000b9e2:	83 ec 0c             	sub    esp,0xc
c000b9e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9e8:	e8 d9 ff ff ff       	call   c000b9c6 <Device::detectAll()>
c000b9ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9ef:	eb e9                	jmp    c000b9da <Device::detectAll()+0x14>
c000b9f1:	83 c4 08             	add    esp,0x8
c000b9f4:	5b                   	pop    ebx
c000b9f5:	c3                   	ret    

c000b9f6 <Device::disableLegacyAll()>:
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Device::loadDriversForAll()>:
c000b9f8:	c3                   	ret    
c000b9f9:	90                   	nop

c000b9fa <Device::closeAll()>:
c000b9fa:	53                   	push   ebx
c000b9fb:	83 ec 08             	sub    esp,0x8
c000b9fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba04:	6a 00                	push   0x0
c000ba06:	6a 00                	push   0x0
c000ba08:	6a 00                	push   0x0
c000ba0a:	53                   	push   ebx
c000ba0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba0e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba14:	83 c4 10             	add    esp,0x10
c000ba17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1a:	74 0f                	je     c000ba2b <Device::closeAll()+0x31>
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba22:	e8 d3 ff ff ff       	call   c000b9fa <Device::closeAll()>
c000ba27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba29:	eb e9                	jmp    c000ba14 <Device::closeAll()+0x1a>
c000ba2b:	83 c4 08             	add    esp,0x8
c000ba2e:	5b                   	pop    ebx
c000ba2f:	c3                   	ret    

c000ba30 <Device::powerSavingAll(PowerSavingLevel)>:
c000ba30:	56                   	push   esi
c000ba31:	53                   	push   ebx
c000ba32:	83 ec 0c             	sub    esp,0xc
c000ba35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba3f:	56                   	push   esi
c000ba40:	53                   	push   ebx
c000ba41:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba50:	74 0f                	je     c000ba61 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba52:	52                   	push   edx
c000ba53:	52                   	push   edx
c000ba54:	56                   	push   esi
c000ba55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba58:	e8 d3 ff ff ff       	call   c000ba30 <Device::powerSavingAll(PowerSavingLevel)>
c000ba5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba5f:	eb e9                	jmp    c000ba4a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba61:	58                   	pop    eax
c000ba62:	5b                   	pop    ebx
c000ba63:	5e                   	pop    esi
c000ba64:	c3                   	ret    
c000ba65:	90                   	nop

c000ba66 <Device::setName(char const*)>:
c000ba66:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba6e:	e9 8d 4b ff ff       	jmp    c0000600 <strcpy>
c000ba73:	90                   	nop

c000ba74 <Device::Device(char const*)>:
c000ba74:	83 ec 1c             	sub    esp,0x1c
c000ba77:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000ba7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba80:	89 10                	mov    DWORD PTR [eax],edx
c000ba82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba86:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ba9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baba:	83 ec 08             	sub    esp,0x8
c000babd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac5:	e8 9c ff ff ff       	call   c000ba66 <Device::setName(char const*)>
c000baca:	83 c4 10             	add    esp,0x10
c000bacd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bad5:	83 ec 0c             	sub    esp,0xc
c000bad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000badc:	e8 20 bd ff ff       	call   c0007801 <malloc>
c000bae1:	83 c4 10             	add    esp,0x10
c000bae4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baf1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb20:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb36:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb44:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb52:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb60:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb6a:	90                   	nop
c000bb6b:	83 c4 1c             	add    esp,0x1c
c000bb6e:	c3                   	ret    
c000bb6f:	90                   	nop

c000bb70 <Device::getName()>:
c000bb70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb74:	05 d0 00 00 00       	add    eax,0xd0
c000bb79:	c3                   	ret    

c000bb7a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb7a:	83 ec 0c             	sub    esp,0xc
c000bb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb81:	83 ec 08             	sub    esp,0x8
c000bb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb88:	50                   	push   eax
c000bb89:	e8 e6 fe ff ff       	call   c000ba74 <Device::Device(char const*)>
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c000bb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9a:	89 10                	mov    DWORD PTR [eax],edx
c000bb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bba0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbaa:	90                   	nop
c000bbab:	83 c4 0c             	add    esp,0xc
c000bbae:	c3                   	ret    
c000bbaf:	90                   	nop

c000bbb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbb0:	57                   	push   edi
c000bbb1:	56                   	push   esi
c000bbb2:	53                   	push   ebx
c000bbb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbbf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bbc5:	75 0c                	jne    c000bbd3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bbc7:	52                   	push   edx
c000bbc8:	52                   	push   edx
c000bbc9:	53                   	push   ebx
c000bbca:	56                   	push   esi
c000bbcb:	e8 32 05 01 00       	call   c001c102 <LinkedList<Device>::addElement(Device*)>
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbdc:	74 12                	je     c000bbf0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bbde:	50                   	push   eax
c000bbdf:	57                   	push   edi
c000bbe0:	56                   	push   esi
c000bbe1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbe4:	e8 c7 ff ff ff       	call   c000bbb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbe9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbeb:	83 c4 10             	add    esp,0x10
c000bbee:	eb e9                	jmp    c000bbd9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bbf0:	5b                   	pop    ebx
c000bbf1:	5e                   	pop    esi
c000bbf2:	5f                   	pop    edi
c000bbf3:	c3                   	ret    

c000bbf4 <getDevicesOfType(DeviceType)>:
c000bbf4:	53                   	push   ebx
c000bbf5:	83 ec 14             	sub    esp,0x14
c000bbf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 dc 05 01 00       	call   c001c1de <LinkedList<Device>::LinkedList()>
c000bc02:	83 c4 0c             	add    esp,0xc
c000bc05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc09:	53                   	push   ebx
c000bc0a:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c000bc10:	e8 9b ff ff ff       	call   c000bbb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc15:	89 d8                	mov    eax,ebx
c000bc17:	83 c4 18             	add    esp,0x18
c000bc1a:	5b                   	pop    ebx
c000bc1b:	c2 04 00             	ret    0x4
c000bc1e:	66 90                	xchg   ax,ax

c000bc20 <HardDiskController::HardDiskController(char const*)>:
c000bc20:	83 ec 0c             	sub    esp,0xc
c000bc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc27:	83 ec 08             	sub    esp,0x8
c000bc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2e:	50                   	push   eax
c000bc2f:	e8 40 fe ff ff       	call   c000ba74 <Device::Device(char const*)>
c000bc34:	83 c4 10             	add    esp,0x10
c000bc37:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc40:	89 10                	mov    DWORD PTR [eax],edx
c000bc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc46:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc50:	90                   	nop
c000bc51:	83 c4 0c             	add    esp,0xc
c000bc54:	c3                   	ret    
c000bc55:	90                   	nop
c000bc56:	66 90                	xchg   ax,ax

c000bc58 <HardDiskController::~HardDiskController()>:
c000bc58:	83 ec 0c             	sub    esp,0xc
c000bc5b:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc64:	89 10                	mov    DWORD PTR [eax],edx
c000bc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6a:	83 ec 0c             	sub    esp,0xc
c000bc6d:	50                   	push   eax
c000bc6e:	e8 6b fb ff ff       	call   c000b7de <Device::~Device()>
c000bc73:	83 c4 10             	add    esp,0x10
c000bc76:	90                   	nop
c000bc77:	83 c4 0c             	add    esp,0xc
c000bc7a:	c3                   	ret    
c000bc7b:	90                   	nop

c000bc7c <HardDiskController::~HardDiskController()>:
c000bc7c:	83 ec 0c             	sub    esp,0xc
c000bc7f:	83 ec 0c             	sub    esp,0xc
c000bc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc86:	e8 cd ff ff ff       	call   c000bc58 <HardDiskController::~HardDiskController()>
c000bc8b:	83 c4 10             	add    esp,0x10
c000bc8e:	83 ec 08             	sub    esp,0x8
c000bc91:	68 58 01 00 00       	push   0x158
c000bc96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9a:	e8 07 e7 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000bc9f:	83 c4 10             	add    esp,0x10
c000bca2:	83 c4 0c             	add    esp,0xc
c000bca5:	c3                   	ret    

c000bca6 <PhysicalDisk::eject()>:
c000bca6:	83 c8 ff             	or     eax,0xffffffff
c000bca9:	c3                   	ret    

c000bcaa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcaa:	83 ec 0c             	sub    esp,0xc
c000bcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb1:	83 ec 08             	sub    esp,0x8
c000bcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb8:	50                   	push   eax
c000bcb9:	e8 b6 fd ff ff       	call   c000ba74 <Device::Device(char const*)>
c000bcbe:	83 c4 10             	add    esp,0x10
c000bcc1:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcca:	89 10                	mov    DWORD PTR [eax],edx
c000bccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcf8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd0c:	90                   	nop
c000bd0d:	83 c4 0c             	add    esp,0xc
c000bd10:	c3                   	ret    
c000bd11:	90                   	nop

c000bd12 <PhysicalDisk::startCache()>:
c000bd12:	56                   	push   esi
c000bd13:	53                   	push   ebx
c000bd14:	83 ec 10             	sub    esp,0x10
c000bd17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd1b:	6a 44                	push   0x44
c000bd1d:	e8 df ba ff ff       	call   c0007801 <malloc>
c000bd22:	89 c6                	mov    esi,eax
c000bd24:	58                   	pop    eax
c000bd25:	5a                   	pop    edx
c000bd26:	53                   	push   ebx
c000bd27:	56                   	push   esi
c000bd28:	e8 ab 15 00 00       	call   c000d2d8 <VCache::VCache(PhysicalDisk*)>
c000bd2d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd33:	83 c4 14             	add    esp,0x14
c000bd36:	5b                   	pop    ebx
c000bd37:	5e                   	pop    esi
c000bd38:	c3                   	ret    
c000bd39:	90                   	nop

c000bd3a <PhysicalDisk::~PhysicalDisk()>:
c000bd3a:	83 ec 0c             	sub    esp,0xc
c000bd3d:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd46:	89 10                	mov    DWORD PTR [eax],edx
c000bd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4c:	83 ec 0c             	sub    esp,0xc
c000bd4f:	50                   	push   eax
c000bd50:	e8 89 fa ff ff       	call   c000b7de <Device::~Device()>
c000bd55:	83 c4 10             	add    esp,0x10
c000bd58:	90                   	nop
c000bd59:	83 c4 0c             	add    esp,0xc
c000bd5c:	c3                   	ret    
c000bd5d:	90                   	nop

c000bd5e <PhysicalDisk::~PhysicalDisk()>:
c000bd5e:	83 ec 0c             	sub    esp,0xc
c000bd61:	83 ec 0c             	sub    esp,0xc
c000bd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd68:	e8 cd ff ff ff       	call   c000bd3a <PhysicalDisk::~PhysicalDisk()>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	83 ec 08             	sub    esp,0x8
c000bd73:	68 6c 01 00 00       	push   0x16c
c000bd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd7c:	e8 25 e6 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000bd81:	83 c4 10             	add    esp,0x10
c000bd84:	83 c4 0c             	add    esp,0xc
c000bd87:	c3                   	ret    

c000bd88 <int_handler>:
c000bd88:	55                   	push   ebp
c000bd89:	57                   	push   edi
c000bd8a:	56                   	push   esi
c000bd8b:	53                   	push   ebx
c000bd8c:	83 ec 0c             	sub    esp,0xc
c000bd8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd93:	80 3d d8 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fd8,0x0
c000bd9a:	74 0b                	je     c000bda7 <int_handler+0x1f>
c000bd9c:	fa                   	cli    
c000bd9d:	f4                   	hlt    
c000bd9e:	80 3d d8 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fd8,0x0
c000bda5:	75 f5                	jne    c000bd9c <int_handler+0x14>
c000bda7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdaa:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdad:	83 f8 17             	cmp    eax,0x17
c000bdb0:	76 3e                	jbe    c000bdf0 <int_handler+0x68>
c000bdb2:	c1 e6 04             	shl    esi,0x4
c000bdb5:	31 db                	xor    ebx,ebx
c000bdb7:	8d ae 60 16 02 c0    	lea    ebp,[esi-0x3ffde9a0]
c000bdbd:	81 c6 60 06 02 c0    	add    esi,0xc0020660
c000bdc3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bdc7:	85 c0                	test   eax,eax
c000bdc9:	74 13                	je     c000bdde <int_handler+0x56>
c000bdcb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bdce:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bdd2:	74 2a                	je     c000bdfe <int_handler+0x76>
c000bdd4:	83 ec 08             	sub    esp,0x8
c000bdd7:	52                   	push   edx
c000bdd8:	57                   	push   edi
c000bdd9:	ff d0                	call   eax
c000bddb:	83 c4 10             	add    esp,0x10
c000bdde:	43                   	inc    ebx
c000bddf:	83 fb 04             	cmp    ebx,0x4
c000bde2:	75 df                	jne    c000bdc3 <int_handler+0x3b>
c000bde4:	83 c4 0c             	add    esp,0xc
c000bde7:	31 c0                	xor    eax,eax
c000bde9:	5b                   	pop    ebx
c000bdea:	31 d2                	xor    edx,edx
c000bdec:	5e                   	pop    esi
c000bded:	5f                   	pop    edi
c000bdee:	5d                   	pop    ebp
c000bdef:	c3                   	ret    
c000bdf0:	83 ec 0c             	sub    esp,0xc
c000bdf3:	50                   	push   eax
c000bdf4:	e8 f6 95 00 00       	call   c00153ef <HalEndOfInterrupt(int)>
c000bdf9:	83 c4 10             	add    esp,0x10
c000bdfc:	eb b4                	jmp    c000bdb2 <int_handler+0x2a>
c000bdfe:	83 ec 08             	sub    esp,0x8
c000be01:	52                   	push   edx
c000be02:	57                   	push   edi
c000be03:	ff d0                	call   eax
c000be05:	83 c4 10             	add    esp,0x10
c000be08:	83 c4 0c             	add    esp,0xc
c000be0b:	5b                   	pop    ebx
c000be0c:	5e                   	pop    esi
c000be0d:	5f                   	pop    edi
c000be0e:	5d                   	pop    ebp
c000be0f:	c3                   	ret    

c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be10:	56                   	push   esi
c000be11:	31 c0                	xor    eax,eax
c000be13:	53                   	push   ebx
c000be14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be1c:	89 ca                	mov    edx,ecx
c000be1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be22:	c1 e2 04             	shl    edx,0x4
c000be25:	83 bc 82 60 16 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde9a0],0x0
c000be2d:	74 15                	je     c000be44 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be2f:	40                   	inc    eax
c000be30:	83 f8 04             	cmp    eax,0x4
c000be33:	75 f0                	jne    c000be25 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be35:	c7 44 24 0c 24 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db24
c000be3d:	5b                   	pop    ebx
c000be3e:	5e                   	pop    esi
c000be3f:	e9 bb 42 00 00       	jmp    c00100ff <KePanic(char const*)>
c000be44:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be47:	89 1c 85 60 16 02 c0 	mov    DWORD PTR [eax*4-0x3ffde9a0],ebx
c000be4e:	89 34 85 60 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf9a0],esi
c000be55:	5b                   	pop    ebx
c000be56:	5e                   	pop    esi
c000be57:	c3                   	ret    

c000be58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be58:	57                   	push   edi
c000be59:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c000be5f:	56                   	push   esi
c000be60:	53                   	push   ebx
c000be61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be69:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be70:	74 5b                	je     c000becd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be72:	89 c7                	mov    edi,eax
c000be74:	84 c0                	test   al,al
c000be76:	74 24                	je     c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be78:	83 fe 0f             	cmp    esi,0xf
c000be7b:	0f 8f d9 00 00 00    	jg     c000bf5a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be81:	8a 86 80 f2 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0d80]
c000be87:	25 ff 00 00 00       	and    eax,0xff
c000be8c:	66 8b bc 00 00 2e 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd200]
c000be94:	89 c6                	mov    esi,eax
c000be96:	66 d1 ef             	shr    di,1
c000be99:	83 e7 01             	and    edi,0x1
c000be9c:	83 ec 08             	sub    esp,0x8
c000be9f:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c000bea4:	31 db                	xor    ebx,ebx
c000bea6:	50                   	push   eax
c000bea7:	68 31 db 01 c0       	push   0xc001db31
c000beac:	e8 eb e5 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c000beb9:	85 c0                	test   eax,eax
c000bebb:	7f 51                	jg     c000bf0e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bebd:	83 ec 0c             	sub    esp,0xc
c000bec0:	68 48 db 01 c0       	push   0xc001db48
c000bec5:	e8 35 42 00 00       	call   c00100ff <KePanic(char const*)>
c000beca:	83 c4 10             	add    esp,0x10
c000becd:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bed0:	31 d2                	xor    edx,edx
c000bed2:	89 c8                	mov    eax,ecx
c000bed4:	c1 e0 04             	shl    eax,0x4
c000bed7:	8b 9c 90 60 16 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde9a0]
c000bede:	85 db                	test   ebx,ebx
c000bee0:	0f 84 8b 00 00 00    	je     c000bf71 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bee6:	42                   	inc    edx
c000bee7:	83 fa 04             	cmp    edx,0x4
c000beea:	75 eb                	jne    c000bed7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000beec:	83 ec 0c             	sub    esp,0xc
c000beef:	68 9c db 01 c0       	push   0xc001db9c
c000bef4:	e8 06 42 00 00       	call   c00100ff <KePanic(char const*)>
c000bef9:	83 c4 10             	add    esp,0x10
c000befc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf01:	5b                   	pop    ebx
c000bf02:	5e                   	pop    esi
c000bf03:	5f                   	pop    edi
c000bf04:	c3                   	ret    
c000bf05:	43                   	inc    ebx
c000bf06:	39 1d 00 42 02 c0    	cmp    DWORD PTR ds:0xc0024200,ebx
c000bf0c:	7e af                	jle    c000bebd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf0e:	83 ec 08             	sub    esp,0x8
c000bf11:	8b 04 9d 20 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbde0]
c000bf18:	56                   	push   esi
c000bf19:	50                   	push   eax
c000bf1a:	e8 0b f2 00 00       	call   c001b12a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf1f:	83 c4 10             	add    esp,0x10
c000bf22:	84 c0                	test   al,al
c000bf24:	74 df                	je     c000bf05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf26:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf2c:	50                   	push   eax
c000bf2d:	8d 46 20             	lea    eax,[esi+0x20]
c000bf30:	57                   	push   edi
c000bf31:	25 ff 00 00 00       	and    eax,0xff
c000bf36:	6a 00                	push   0x0
c000bf38:	50                   	push   eax
c000bf39:	89 f0                	mov    eax,esi
c000bf3b:	6a 00                	push   0x0
c000bf3d:	25 ff 00 00 00       	and    eax,0xff
c000bf42:	6a 00                	push   0x0
c000bf44:	50                   	push   eax
c000bf45:	8b 04 9d 20 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbde0]
c000bf4c:	50                   	push   eax
c000bf4d:	e8 52 f3 00 00       	call   c001b2a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf52:	83 c4 20             	add    esp,0x20
c000bf55:	e9 73 ff ff ff       	jmp    c000becd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf5a:	83 ec 0c             	sub    esp,0xc
c000bf5d:	31 ff                	xor    edi,edi
c000bf5f:	68 64 db 01 c0       	push   0xc001db64
c000bf64:	e8 96 41 00 00       	call   c00100ff <KePanic(char const*)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	e9 2b ff ff ff       	jmp    c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf71:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf78:	89 14 85 60 16 02 c0 	mov    DWORD PTR [eax*4-0x3ffde9a0],edx
c000bf7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf83:	5b                   	pop    ebx
c000bf84:	89 14 85 60 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf9a0],edx
c000bf8b:	89 f0                	mov    eax,esi
c000bf8d:	5e                   	pop    esi
c000bf8e:	5f                   	pop    edi
c000bf8f:	c3                   	ret    

c000bf90 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf98:	c1 e0 04             	shl    eax,0x4
c000bf9b:	8d 50 10             	lea    edx,[eax+0x10]
c000bf9e:	39 88 60 16 02 c0    	cmp    DWORD PTR [eax-0x3ffde9a0],ecx
c000bfa4:	74 08                	je     c000bfae <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfa6:	83 c0 04             	add    eax,0x4
c000bfa9:	39 d0                	cmp    eax,edx
c000bfab:	75 f1                	jne    c000bf9e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfad:	c3                   	ret    
c000bfae:	c7 80 60 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9a0],0x0
c000bfb8:	c7 80 60 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9a0],0x0
c000bfc2:	eb e2                	jmp    c000bfa6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bfc4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bfc4:	53                   	push   ebx
c000bfc5:	83 ec 08             	sub    esp,0x8
c000bfc8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfcc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bfd1:	74 0e                	je     c000bfe1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfd3:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000bfd8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bfdf:	75 37                	jne    c000c018 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe5:	83 c0 20             	add    eax,0x20
c000bfe8:	c1 e0 04             	shl    eax,0x4
c000bfeb:	8d 50 10             	lea    edx,[eax+0x10]
c000bfee:	39 98 60 16 02 c0    	cmp    DWORD PTR [eax-0x3ffde9a0],ebx
c000bff4:	74 0c                	je     c000c002 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bff6:	83 c0 04             	add    eax,0x4
c000bff9:	39 d0                	cmp    eax,edx
c000bffb:	75 f1                	jne    c000bfee <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000bffd:	83 c4 08             	add    esp,0x8
c000c000:	5b                   	pop    ebx
c000c001:	c3                   	ret    
c000c002:	c7 80 60 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9a0],0x0
c000c00c:	c7 80 60 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9a0],0x0
c000c016:	eb de                	jmp    c000bff6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c018:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c01d:	7f 12                	jg     c000c031 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c01f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c023:	31 c0                	xor    eax,eax
c000c025:	8a 81 80 f2 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0d80]
c000c02b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c02f:	eb b0                	jmp    c000bfe1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c031:	83 ec 0c             	sub    esp,0xc
c000c034:	68 55 db 01 c0       	push   0xc001db55
c000c039:	e8 c1 40 00 00       	call   c00100ff <KePanic(char const*)>
c000c03e:	83 c4 10             	add    esp,0x10
c000c041:	eb 9e                	jmp    c000bfe1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c043 <setupINTS()>:
c000c043:	31 c0                	xor    eax,eax
c000c045:	c7 80 60 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9a0],0x0
c000c04f:	c7 80 60 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9a0],0x0
c000c059:	c7 80 64 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde99c],0x0
c000c063:	c7 80 64 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf99c],0x0
c000c06d:	c7 80 68 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde998],0x0
c000c077:	c7 80 68 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf998],0x0
c000c081:	c7 80 6c 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde994],0x0
c000c08b:	c7 80 6c 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf994],0x0
c000c095:	83 c0 10             	add    eax,0x10
c000c098:	3d 00 10 00 00       	cmp    eax,0x1000
c000c09d:	75 a6                	jne    c000c045 <setupINTS()+0x2>
c000c09f:	c3                   	ret    

c000c0a0 <convertLegacyIRQNumber(int)>:
c000c0a0:	83 ec 0c             	sub    esp,0xc
c000c0a3:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c000c0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ad:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0b4:	74 0f                	je     c000c0c5 <convertLegacyIRQNumber(int)+0x25>
c000c0b6:	83 f8 0f             	cmp    eax,0xf
c000c0b9:	7f 0e                	jg     c000c0c9 <convertLegacyIRQNumber(int)+0x29>
c000c0bb:	31 c9                	xor    ecx,ecx
c000c0bd:	8a 88 80 f2 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0d80]
c000c0c3:	89 c8                	mov    eax,ecx
c000c0c5:	83 c4 0c             	add    esp,0xc
c000c0c8:	c3                   	ret    
c000c0c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0cd:	83 ec 0c             	sub    esp,0xc
c000c0d0:	68 64 db 01 c0       	push   0xc001db64
c000c0d5:	e8 25 40 00 00       	call   c00100ff <KePanic(char const*)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e1:	83 c4 0c             	add    esp,0xc
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop

c000c0e6 <startGUI(void*)>:
c000c0e6:	55                   	push   ebp
c000c0e7:	89 e5                	mov    ebp,esp
c000c0e9:	53                   	push   ebx
c000c0ea:	83 ec 04             	sub    esp,0x4
c000c0ed:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c0f2:	48                   	dec    eax
c000c0f3:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c0f8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c0fd:	85 c0                	test   eax,eax
c000c0ff:	75 01                	jne    c000c102 <startGUI(void*)+0x1c>
c000c101:	fb                   	sti    
c000c102:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000c108:	83 ec 08             	sub    esp,0x8
c000c10b:	6a 01                	push   0x1
c000c10d:	68 c1 db 01 c0       	push   0xc001dbc1
c000c112:	e8 f7 67 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	83 ec 08             	sub    esp,0x8
c000c11d:	53                   	push   ebx
c000c11e:	50                   	push   eax
c000c11f:	e8 1b 6a 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000c124:	83 c4 10             	add    esp,0x10
c000c127:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000c12d:	83 ec 08             	sub    esp,0x8
c000c130:	6a 01                	push   0x1
c000c132:	68 db db 01 c0       	push   0xc001dbdb
c000c137:	e8 d2 67 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000c13c:	83 c4 10             	add    esp,0x10
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	53                   	push   ebx
c000c143:	50                   	push   eax
c000c144:	e8 f6 69 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000c149:	83 c4 10             	add    esp,0x10
c000c14c:	90                   	nop
c000c14d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c150:	c9                   	leave  
c000c151:	c3                   	ret    

c000c152 <startGUIVESA(void*)>:
c000c152:	55                   	push   ebp
c000c153:	89 e5                	mov    ebp,esp
c000c155:	53                   	push   ebx
c000c156:	83 ec 04             	sub    esp,0x4
c000c159:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c15e:	48                   	dec    eax
c000c15f:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c164:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c169:	85 c0                	test   eax,eax
c000c16b:	75 01                	jne    c000c16e <startGUIVESA(void*)+0x1c>
c000c16d:	fb                   	sti    
c000c16e:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000c174:	83 ec 08             	sub    esp,0x8
c000c177:	6a 01                	push   0x1
c000c179:	68 f9 db 01 c0       	push   0xc001dbf9
c000c17e:	e8 8b 67 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	83 ec 08             	sub    esp,0x8
c000c189:	53                   	push   ebx
c000c18a:	50                   	push   eax
c000c18b:	e8 af 69 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000c190:	83 c4 10             	add    esp,0x10
c000c193:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000c199:	83 ec 08             	sub    esp,0x8
c000c19c:	6a 01                	push   0x1
c000c19e:	68 db db 01 c0       	push   0xc001dbdb
c000c1a3:	e8 66 67 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000c1a8:	83 c4 10             	add    esp,0x10
c000c1ab:	83 ec 08             	sub    esp,0x8
c000c1ae:	53                   	push   ebx
c000c1af:	50                   	push   eax
c000c1b0:	e8 8a 69 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000c1b5:	83 c4 10             	add    esp,0x10
c000c1b8:	90                   	nop
c000c1b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1bc:	c9                   	leave  
c000c1bd:	c3                   	ret    

c000c1be <sendKeyToTerminal(unsigned char)>:
c000c1be:	55                   	push   ebp
c000c1bf:	89 e5                	mov    ebp,esp
c000c1c1:	83 ec 28             	sub    esp,0x28
c000c1c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c1c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c1ca:	8b 15 a4 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205a4
c000c1d0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c1d3:	25 ff 00 00 00       	and    eax,0xff
c000c1d8:	83 ec 08             	sub    esp,0x8
c000c1db:	50                   	push   eax
c000c1dc:	52                   	push   edx
c000c1dd:	e8 ac c8 ff ff       	call   c0008a8e <VgaText::receiveKey(unsigned char)>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1e9:	0f 85 8f 00 00 00    	jne    c000c27e <sendKeyToTerminal(unsigned char)+0xc0>
c000c1ef:	fa                   	cli    
c000c1f0:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c1f5:	40                   	inc    eax
c000c1f6:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c1fb:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000c200:	40                   	inc    eax
c000c201:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c000c206:	a1 60 26 02 c0       	mov    eax,ds:0xc0022660
c000c20b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c20e:	c7 05 60 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022660,0x0
c000c218:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c21c:	74 1f                	je     c000c23d <sendKeyToTerminal(unsigned char)+0x7f>
c000c21e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c221:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c224:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c227:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c22a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c22d:	83 ec 0c             	sub    esp,0xc
c000c230:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c233:	e8 8c 75 00 00       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c000c238:	83 c4 10             	add    esp,0x10
c000c23b:	eb db                	jmp    c000c218 <sendKeyToTerminal(unsigned char)+0x5a>
c000c23d:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000c242:	48                   	dec    eax
c000c243:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c000c248:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000c24d:	85 c0                	test   eax,eax
c000c24f:	75 18                	jne    c000c269 <sendKeyToTerminal(unsigned char)+0xab>
c000c251:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c000c256:	85 c0                	test   eax,eax
c000c258:	74 0f                	je     c000c269 <sendKeyToTerminal(unsigned char)+0xab>
c000c25a:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c000c264:	e8 97 70 00 00       	call   c0013300 <schedule()>
c000c269:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c26e:	48                   	dec    eax
c000c26f:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c274:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c279:	85 c0                	test   eax,eax
c000c27b:	75 01                	jne    c000c27e <sendKeyToTerminal(unsigned char)+0xc0>
c000c27d:	fb                   	sti    
c000c27e:	90                   	nop
c000c27f:	c9                   	leave  
c000c280:	c3                   	ret    

c000c281 <sendKeyboardToken(KeyboardToken)>:
c000c281:	55                   	push   ebp
c000c282:	89 e5                	mov    ebp,esp
c000c284:	83 ec 18             	sub    esp,0x18
c000c287:	e8 c3 3e 00 00       	call   c001014f <Krnl::userIOReceived()>
c000c28c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c28f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c292:	25 ff ff 00 00       	and    eax,0xffff
c000c297:	83 f2 01             	xor    edx,0x1
c000c29a:	88 90 80 26 02 c0    	mov    BYTE PTR [eax-0x3ffdd980],dl
c000c2a0:	a1 68 26 02 c0       	mov    eax,ds:0xc0022668
c000c2a5:	85 c0                	test   eax,eax
c000c2a7:	74 24                	je     c000c2cd <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2a9:	8b 0d 68 26 02 c0    	mov    ecx,DWORD PTR ds:0xc0022668
c000c2af:	83 ec 04             	sub    esp,0x4
c000c2b2:	68 80 26 02 c0       	push   0xc0022680
c000c2b7:	83 ec 08             	sub    esp,0x8
c000c2ba:	89 e2                	mov    edx,esp
c000c2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2bf:	89 02                	mov    DWORD PTR [edx],eax
c000c2c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c2c4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c2c8:	ff d1                	call   ecx
c000c2ca:	83 c4 10             	add    esp,0x10
c000c2cd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c2d1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c2d4:	a0 88 2a 02 c0       	mov    al,ds:0xc0022a88
c000c2d9:	38 c2                	cmp    dl,al
c000c2db:	74 1e                	je     c000c2fb <sendKeyboardToken(KeyboardToken)+0x7a>
c000c2dd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c2e0:	a2 88 2a 02 c0       	mov    ds:0xc0022a88,al
c000c2e5:	a0 88 2a 02 c0       	mov    al,ds:0xc0022a88
c000c2ea:	25 ff 00 00 00       	and    eax,0xff
c000c2ef:	83 ec 0c             	sub    esp,0xc
c000c2f2:	50                   	push   eax
c000c2f3:	e8 e8 be ff ff       	call   c00081e0 <setTerminalScrollLock(bool)>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c2fe:	84 c0                	test   al,al
c000c300:	0f 84 ae 00 00 00    	je     c000c3b4 <sendKeyboardToken(KeyboardToken)+0x133>
c000c306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c309:	66 3d 10 03          	cmp    ax,0x310
c000c30d:	75 06                	jne    c000c315 <sendKeyboardToken(KeyboardToken)+0x94>
c000c30f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c318:	66 3d 11 03          	cmp    ax,0x311
c000c31c:	75 06                	jne    c000c324 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c31e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c327:	66 3d 12 03          	cmp    ax,0x312
c000c32b:	75 06                	jne    c000c333 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c32d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c336:	66 3d 13 03          	cmp    ax,0x313
c000c33a:	75 06                	jne    c000c342 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c33c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c345:	66 3d 14 03          	cmp    ax,0x314
c000c349:	75 06                	jne    c000c351 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c34b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c354:	66 3d 15 03          	cmp    ax,0x315
c000c358:	75 06                	jne    c000c360 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c35a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c363:	66 3d 16 03          	cmp    ax,0x316
c000c367:	75 06                	jne    c000c36f <sendKeyboardToken(KeyboardToken)+0xee>
c000c369:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c372:	66 3d 17 03          	cmp    ax,0x317
c000c376:	75 06                	jne    c000c37e <sendKeyboardToken(KeyboardToken)+0xfd>
c000c378:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c37e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c381:	66 3d 18 03          	cmp    ax,0x318
c000c385:	75 06                	jne    c000c38d <sendKeyboardToken(KeyboardToken)+0x10c>
c000c387:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c390:	66 3d 19 03          	cmp    ax,0x319
c000c394:	75 06                	jne    c000c39c <sendKeyboardToken(KeyboardToken)+0x11b>
c000c396:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c39f:	66 3d 1a 03          	cmp    ax,0x31a
c000c3a3:	0f 85 c9 00 00 00    	jne    c000c472 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3a9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3af:	e9 be 00 00 00       	jmp    c000c472 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b7:	66 3d 10 03          	cmp    ax,0x310
c000c3bb:	75 0a                	jne    c000c3c7 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3bd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c3c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ca:	66 3d 11 03          	cmp    ax,0x311
c000c3ce:	75 0a                	jne    c000c3da <sendKeyboardToken(KeyboardToken)+0x159>
c000c3d0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c3d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3dd:	66 3d 12 03          	cmp    ax,0x312
c000c3e1:	75 0a                	jne    c000c3ed <sendKeyboardToken(KeyboardToken)+0x16c>
c000c3e3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f0:	66 3d 13 03          	cmp    ax,0x313
c000c3f4:	75 0a                	jne    c000c400 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3f6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c3fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c403:	66 3d 14 03          	cmp    ax,0x314
c000c407:	75 0a                	jne    c000c413 <sendKeyboardToken(KeyboardToken)+0x192>
c000c409:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c40f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c416:	66 3d 15 03          	cmp    ax,0x315
c000c41a:	75 0a                	jne    c000c426 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c41c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c422:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c429:	66 3d 16 03          	cmp    ax,0x316
c000c42d:	75 0a                	jne    c000c439 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c42f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c435:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43c:	66 3d 17 03          	cmp    ax,0x317
c000c440:	75 0a                	jne    c000c44c <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c442:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c448:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44f:	66 3d 18 03          	cmp    ax,0x318
c000c453:	75 0a                	jne    c000c45f <sendKeyboardToken(KeyboardToken)+0x1de>
c000c455:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c45b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c462:	66 3d 19 03          	cmp    ax,0x319
c000c466:	75 0a                	jne    c000c472 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c468:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c46e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c475:	66 3d 00 02          	cmp    ax,0x200
c000c479:	75 2c                	jne    c000c4a7 <sendKeyboardToken(KeyboardToken)+0x226>
c000c47b:	a0 80 2a 02 c0       	mov    al,ds:0xc0022a80
c000c480:	83 f0 01             	xor    eax,0x1
c000c483:	84 c0                	test   al,al
c000c485:	74 20                	je     c000c4a7 <sendKeyboardToken(KeyboardToken)+0x226>
c000c487:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c000c48c:	6a 01                	push   0x1
c000c48e:	6a 00                	push   0x0
c000c490:	68 e6 c0 00 c0       	push   0xc000c0e6
c000c495:	50                   	push   eax
c000c496:	e8 45 6c 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c000c49b:	83 c4 10             	add    esp,0x10
c000c49e:	c6 05 80 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a80,0x1
c000c4a5:	eb 33                	jmp    c000c4da <sendKeyboardToken(KeyboardToken)+0x259>
c000c4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4aa:	66 3d 01 02          	cmp    ax,0x201
c000c4ae:	75 2a                	jne    c000c4da <sendKeyboardToken(KeyboardToken)+0x259>
c000c4b0:	a0 80 2a 02 c0       	mov    al,ds:0xc0022a80
c000c4b5:	83 f0 01             	xor    eax,0x1
c000c4b8:	84 c0                	test   al,al
c000c4ba:	74 1e                	je     c000c4da <sendKeyboardToken(KeyboardToken)+0x259>
c000c4bc:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c000c4c1:	6a 01                	push   0x1
c000c4c3:	6a 00                	push   0x0
c000c4c5:	68 52 c1 00 c0       	push   0xc000c152
c000c4ca:	50                   	push   eax
c000c4cb:	e8 10 6c 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	c6 05 80 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a80,0x1
c000c4da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4dd:	66 3d 1d 03          	cmp    ax,0x31d
c000c4e1:	75 06                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0x268>
c000c4e3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 1c 03          	cmp    ax,0x31c
c000c4f0:	75 06                	jne    c000c4f8 <sendKeyboardToken(KeyboardToken)+0x277>
c000c4f2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fb:	66 3d 1b 03          	cmp    ax,0x31b
c000c4ff:	75 06                	jne    c000c507 <sendKeyboardToken(KeyboardToken)+0x286>
c000c501:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50a:	66 3d 1e 03          	cmp    ax,0x31e
c000c50e:	75 06                	jne    c000c516 <sendKeyboardToken(KeyboardToken)+0x295>
c000c510:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c519:	66 3d 1f 03          	cmp    ax,0x31f
c000c51d:	75 06                	jne    c000c525 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c51f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c528:	66 3d 1a 03          	cmp    ax,0x31a
c000c52c:	75 06                	jne    c000c534 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c52e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c534:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c538:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c53b:	83 f0 01             	xor    eax,0x1
c000c53e:	84 c0                	test   al,al
c000c540:	74 7b                	je     c000c5bd <sendKeyboardToken(KeyboardToken)+0x33c>
c000c542:	a0 81 27 02 c0       	mov    al,ds:0xc0022781
c000c547:	84 c0                	test   al,al
c000c549:	74 43                	je     c000c58e <sendKeyboardToken(KeyboardToken)+0x30d>
c000c54b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c54f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c553:	74 2d                	je     c000c582 <sendKeyboardToken(KeyboardToken)+0x301>
c000c555:	8b 15 84 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a84
c000c55b:	89 d0                	mov    eax,edx
c000c55d:	c1 e0 02             	shl    eax,0x2
c000c560:	01 d0                	add    eax,edx
c000c562:	01 c0                	add    eax,eax
c000c564:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c000c569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56c:	25 ff ff 00 00       	and    eax,0xffff
c000c571:	8d 50 d0             	lea    edx,[eax-0x30]
c000c574:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c579:	01 d0                	add    eax,edx
c000c57b:	a3 84 2a 02 c0       	mov    ds:0xc0022a84,eax
c000c580:	eb 71                	jmp    c000c5f3 <sendKeyboardToken(KeyboardToken)+0x372>
c000c582:	c7 05 84 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a84,0x0
c000c58c:	eb 65                	jmp    c000c5f3 <sendKeyboardToken(KeyboardToken)+0x372>
c000c58e:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c593:	85 c0                	test   eax,eax
c000c595:	74 1a                	je     c000c5b1 <sendKeyboardToken(KeyboardToken)+0x330>
c000c597:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c59c:	25 ff 00 00 00       	and    eax,0xff
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	50                   	push   eax
c000c5a5:	e8 14 fc ff ff       	call   c000c1be <sendKeyToTerminal(unsigned char)>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5b1:	c7 05 84 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a84,0x0
c000c5bb:	eb 36                	jmp    c000c5f3 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c0:	66 3d 01 01          	cmp    ax,0x101
c000c5c4:	75 2d                	jne    c000c5f3 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c6:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c5cb:	85 c0                	test   eax,eax
c000c5cd:	74 1a                	je     c000c5e9 <sendKeyboardToken(KeyboardToken)+0x368>
c000c5cf:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000c5d4:	25 ff 00 00 00       	and    eax,0xff
c000c5d9:	83 ec 0c             	sub    esp,0xc
c000c5dc:	50                   	push   eax
c000c5dd:	e8 dc fb ff ff       	call   c000c1be <sendKeyToTerminal(unsigned char)>
c000c5e2:	83 c4 10             	add    esp,0x10
c000c5e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5e9:	c7 05 84 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a84,0x0
c000c5f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5f6:	83 f0 01             	xor    eax,0x1
c000c5f9:	84 c0                	test   al,al
c000c5fb:	74 4e                	je     c000c64b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c600:	83 f0 01             	xor    eax,0x1
c000c603:	84 c0                	test   al,al
c000c605:	74 44                	je     c000c64b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c607:	a0 80 27 02 c0       	mov    al,ds:0xc0022780
c000c60c:	83 f0 01             	xor    eax,0x1
c000c60f:	84 c0                	test   al,al
c000c611:	74 38                	je     c000c64b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c616:	66 83 f8 1f          	cmp    ax,0x1f
c000c61a:	76 09                	jbe    c000c625 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61f:	66 83 f8 7e          	cmp    ax,0x7e
c000c623:	76 12                	jbe    c000c637 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c628:	66 83 f8 0a          	cmp    ax,0xa
c000c62c:	74 09                	je     c000c637 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c62e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c631:	66 83 f8 08          	cmp    ax,0x8
c000c635:	75 14                	jne    c000c64b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63a:	25 ff 00 00 00       	and    eax,0xff
c000c63f:	83 ec 0c             	sub    esp,0xc
c000c642:	50                   	push   eax
c000c643:	e8 76 fb ff ff       	call   c000c1be <sendKeyToTerminal(unsigned char)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c64e:	83 f0 01             	xor    eax,0x1
c000c651:	84 c0                	test   al,al
c000c653:	74 51                	je     c000c6a6 <sendKeyboardToken(KeyboardToken)+0x425>
c000c655:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c658:	83 f0 01             	xor    eax,0x1
c000c65b:	84 c0                	test   al,al
c000c65d:	74 47                	je     c000c6a6 <sendKeyboardToken(KeyboardToken)+0x425>
c000c65f:	a0 80 27 02 c0       	mov    al,ds:0xc0022780
c000c664:	84 c0                	test   al,al
c000c666:	74 3e                	je     c000c6a6 <sendKeyboardToken(KeyboardToken)+0x425>
c000c668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66b:	66 83 f8 3f          	cmp    ax,0x3f
c000c66f:	76 35                	jbe    c000c6a6 <sendKeyboardToken(KeyboardToken)+0x425>
c000c671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c674:	66 83 f8 7f          	cmp    ax,0x7f
c000c678:	77 2c                	ja     c000c6a6 <sendKeyboardToken(KeyboardToken)+0x425>
c000c67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67d:	88 c2                	mov    dl,al
c000c67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c682:	66 83 f8 5f          	cmp    ax,0x5f
c000c686:	76 04                	jbe    c000c68c <sendKeyboardToken(KeyboardToken)+0x40b>
c000c688:	b0 20                	mov    al,0x20
c000c68a:	eb 02                	jmp    c000c68e <sendKeyboardToken(KeyboardToken)+0x40d>
c000c68c:	b0 00                	mov    al,0x0
c000c68e:	29 c2                	sub    edx,eax
c000c690:	88 d0                	mov    al,dl
c000c692:	83 e8 40             	sub    eax,0x40
c000c695:	25 ff 00 00 00       	and    eax,0xff
c000c69a:	83 ec 0c             	sub    esp,0xc
c000c69d:	50                   	push   eax
c000c69e:	e8 1b fb ff ff       	call   c000c1be <sendKeyToTerminal(unsigned char)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a9:	66 3d 00 03          	cmp    ax,0x300
c000c6ad:	75 0f                	jne    c000c6be <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6af:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b2:	83 f0 01             	xor    eax,0x1
c000c6b5:	84 c0                	test   al,al
c000c6b7:	74 05                	je     c000c6be <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6b9:	e8 23 bb ff ff       	call   c00081e1 <doTerminalCycle()>
c000c6be:	90                   	nop
c000c6bf:	c9                   	leave  
c000c6c0:	c3                   	ret    

c000c6c1 <clearInternalKeybuffer(VgaText*)>:
c000c6c1:	55                   	push   ebp
c000c6c2:	89 e5                	mov    ebp,esp
c000c6c4:	83 ec 08             	sub    esp,0x8
c000c6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ca:	05 b2 00 00 00       	add    eax,0xb2
c000c6cf:	83 ec 0c             	sub    esp,0xc
c000c6d2:	50                   	push   eax
c000c6d3:	e8 68 3e ff ff       	call   c0000540 <strlen>
c000c6d8:	83 c4 10             	add    esp,0x10
c000c6db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c6de:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c6e4:	83 ec 04             	sub    esp,0x4
c000c6e7:	50                   	push   eax
c000c6e8:	6a 00                	push   0x0
c000c6ea:	52                   	push   edx
c000c6eb:	e8 e0 3d ff ff       	call   c00004d0 <memset>
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	90                   	nop
c000c6f4:	c9                   	leave  
c000c6f5:	c3                   	ret    

c000c6f6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c6f6:	55                   	push   ebp
c000c6f7:	89 e5                	mov    ebp,esp
c000c6f9:	83 ec 18             	sub    esp,0x18
c000c6fc:	a1 68 26 02 c0       	mov    eax,ds:0xc0022668
c000c701:	85 c0                	test   eax,eax
c000c703:	74 2a                	je     c000c72f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c705:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c70b:	8b 0d 68 26 02 c0    	mov    ecx,DWORD PTR ds:0xc0022668
c000c711:	83 ec 04             	sub    esp,0x4
c000c714:	68 80 26 02 c0       	push   0xc0022680
c000c719:	83 ec 08             	sub    esp,0x8
c000c71c:	89 e2                	mov    edx,esp
c000c71e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c721:	89 02                	mov    DWORD PTR [edx],eax
c000c723:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c726:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c72a:	ff d1                	call   ecx
c000c72c:	83 c4 10             	add    esp,0x10
c000c72f:	fb                   	sti    
c000c730:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c737:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c73b:	0f 84 a1 00 00 00    	je     c000c7e2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c744:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c74a:	84 c0                	test   al,al
c000c74c:	75 28                	jne    c000c776 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c74e:	fa                   	cli    
c000c74f:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c754:	40                   	inc    eax
c000c755:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c75a:	e8 a1 6b 00 00       	call   c0013300 <schedule()>
c000c75f:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c764:	48                   	dec    eax
c000c765:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000c76a:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000c76f:	85 c0                	test   eax,eax
c000c771:	75 ce                	jne    c000c741 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c773:	fb                   	sti    
c000c774:	eb cb                	jmp    c000c741 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c776:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c779:	8d 50 01             	lea    edx,[eax+0x1]
c000c77c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c77f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c782:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c788:	88 10                	mov    BYTE PTR [eax],dl
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c793:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c799:	05 b2 00 00 00       	add    eax,0xb2
c000c79e:	83 ec 0c             	sub    esp,0xc
c000c7a1:	50                   	push   eax
c000c7a2:	e8 99 3d ff ff       	call   c0000540 <strlen>
c000c7a7:	83 c4 10             	add    esp,0x10
c000c7aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7ad:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7b3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7b9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7bf:	83 ec 04             	sub    esp,0x4
c000c7c2:	50                   	push   eax
c000c7c3:	51                   	push   ecx
c000c7c4:	52                   	push   edx
c000c7c5:	e8 16 3c ff ff       	call   c00003e0 <memmove>
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c7d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c7d3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c7d7:	0f 85 5a ff ff ff    	jne    c000c737 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c7dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e0:	eb 03                	jmp    c000c7e5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c7e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e5:	c9                   	leave  
c000c7e6:	c3                   	ret    
c000c7e7:	90                   	nop

c000c7e8 <Keyboard::Keyboard(char const*)>:
c000c7e8:	83 ec 0c             	sub    esp,0xc
c000c7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ef:	83 ec 08             	sub    esp,0x8
c000c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7f6:	50                   	push   eax
c000c7f7:	e8 78 f2 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000c7fc:	83 c4 10             	add    esp,0x10
c000c7ff:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c808:	89 10                	mov    DWORD PTR [eax],edx
c000c80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c80e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c818:	c6 05 64 26 02 c0 01 	mov    BYTE PTR ds:0xc0022664,0x1
c000c81f:	90                   	nop
c000c820:	83 c4 0c             	add    esp,0xc
c000c823:	c3                   	ret    

c000c824 <Keyboard::~Keyboard()>:
c000c824:	83 ec 0c             	sub    esp,0xc
c000c827:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c830:	89 10                	mov    DWORD PTR [eax],edx
c000c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c836:	83 ec 0c             	sub    esp,0xc
c000c839:	50                   	push   eax
c000c83a:	e8 9f ef ff ff       	call   c000b7de <Device::~Device()>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	90                   	nop
c000c843:	83 c4 0c             	add    esp,0xc
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <Keyboard::~Keyboard()>:
c000c848:	83 ec 0c             	sub    esp,0xc
c000c84b:	83 ec 0c             	sub    esp,0xc
c000c84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c852:	e8 cd ff ff ff       	call   c000c824 <Keyboard::~Keyboard()>
c000c857:	83 c4 10             	add    esp,0x10
c000c85a:	83 ec 08             	sub    esp,0x8
c000c85d:	68 5c 01 00 00       	push   0x15c
c000c862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c866:	e8 3b db ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000c86b:	83 c4 10             	add    esp,0x10
c000c86e:	83 c4 0c             	add    esp,0xc
c000c871:	c3                   	ret    

c000c872 <LogicalDisk::close(int, int, void*)>:
c000c872:	83 c8 ff             	or     eax,0xffffffff
c000c875:	c3                   	ret    

c000c876 <LogicalDisk::~LogicalDisk()>:
c000c876:	83 ec 0c             	sub    esp,0xc
c000c879:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c882:	89 10                	mov    DWORD PTR [eax],edx
c000c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c888:	83 ec 0c             	sub    esp,0xc
c000c88b:	50                   	push   eax
c000c88c:	e8 4d ef ff ff       	call   c000b7de <Device::~Device()>
c000c891:	83 c4 10             	add    esp,0x10
c000c894:	90                   	nop
c000c895:	83 c4 0c             	add    esp,0xc
c000c898:	c3                   	ret    
c000c899:	90                   	nop

c000c89a <LogicalDisk::~LogicalDisk()>:
c000c89a:	83 ec 0c             	sub    esp,0xc
c000c89d:	83 ec 0c             	sub    esp,0xc
c000c8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a4:	e8 cd ff ff ff       	call   c000c876 <LogicalDisk::~LogicalDisk()>
c000c8a9:	83 c4 10             	add    esp,0x10
c000c8ac:	83 ec 08             	sub    esp,0x8
c000c8af:	68 74 01 00 00       	push   0x174
c000c8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8b8:	e8 e9 da ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000c8bd:	83 c4 10             	add    esp,0x10
c000c8c0:	83 c4 0c             	add    esp,0xc
c000c8c3:	c3                   	ret    

c000c8c4 <LogicalDisk::open(int, int, void*)>:
c000c8c4:	83 ec 18             	sub    esp,0x18
c000c8c7:	68 48 dc 01 c0       	push   0xc001dc48
c000c8cc:	e8 2e 38 00 00       	call   c00100ff <KePanic(char const*)>
c000c8d1:	83 c8 ff             	or     eax,0xffffffff
c000c8d4:	83 c4 1c             	add    esp,0x1c
c000c8d7:	c3                   	ret    

c000c8d8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c8d8:	53                   	push   ebx
c000c8d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8e5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c8eb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c8f1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c8f7:	77 10                	ja     c000c909 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c8f9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c8ff:	89 d3                	mov    ebx,edx
c000c901:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c907:	72 05                	jb     c000c90e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c909:	83 c8 ff             	or     eax,0xffffffff
c000c90c:	89 c2                	mov    edx,eax
c000c90e:	5b                   	pop    ebx
c000c90f:	c3                   	ret    

c000c910 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c910:	56                   	push   esi
c000c911:	83 c8 ff             	or     eax,0xffffffff
c000c914:	53                   	push   ebx
c000c915:	89 c2                	mov    edx,eax
c000c917:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c91b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c91f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c923:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c929:	77 27                	ja     c000c952 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c92b:	89 d8                	mov    eax,ebx
c000c92d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c933:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c939:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c93e:	89 c2                	mov    edx,eax
c000c940:	73 10                	jae    c000c952 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c942:	89 c8                	mov    eax,ecx
c000c944:	89 da                	mov    edx,ebx
c000c946:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c94c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c952:	5b                   	pop    ebx
c000c953:	5e                   	pop    esi
c000c954:	c3                   	ret    
c000c955:	90                   	nop

c000c956 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c956:	83 ec 1c             	sub    esp,0x1c
c000c959:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c95d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c965:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c969:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c96d:	89 04 24             	mov    DWORD PTR [esp],eax
c000c970:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97c:	83 ec 08             	sub    esp,0x8
c000c97f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c983:	50                   	push   eax
c000c984:	e8 eb f0 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000c989:	83 c4 10             	add    esp,0x10
c000c98c:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000c991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c995:	89 10                	mov    DWORD PTR [eax],edx
c000c997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9c7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000c9cd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000c9d3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c9da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9de:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c9e4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9f2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca06:	90                   	nop
c000ca07:	83 c4 1c             	add    esp,0x1c
c000ca0a:	c3                   	ret    
c000ca0b:	90                   	nop

c000ca0c <LogicalDisk::assignDriveLetter()>:
c000ca0c:	55                   	push   ebp
c000ca0d:	57                   	push   edi
c000ca0e:	56                   	push   esi
c000ca0f:	53                   	push   ebx
c000ca10:	83 ec 14             	sub    esp,0x14
c000ca13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca17:	8b 3d a0 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022aa0
c000ca1d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca27:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca2d:	8b 3d a4 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022aa4
c000ca33:	3c 01                	cmp    al,0x1
c000ca35:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca3d:	19 c0                	sbb    eax,eax
c000ca3f:	83 e0 02             	and    eax,0x2
c000ca42:	83 c0 41             	add    eax,0x41
c000ca45:	0f be e8             	movsx  ebp,al
c000ca48:	3c 43                	cmp    al,0x43
c000ca4a:	75 10                	jne    c000ca5c <LogicalDisk::assignDriveLetter()+0x50>
c000ca4c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca53:	75 5d                	jne    c000cab2 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca5a:	75 56                	jne    c000cab2 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca5c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca5f:	ba 01 00 00 00       	mov    edx,0x1
c000ca64:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ca68:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ca6c:	d3 e2                	shl    edx,cl
c000ca6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca72:	89 d7                	mov    edi,edx
c000ca74:	89 d6                	mov    esi,edx
c000ca76:	c1 ff 1f             	sar    edi,0x1f
c000ca79:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ca7d:	21 f9                	and    ecx,edi
c000ca7f:	09 d1                	or     ecx,edx
c000ca81:	75 2f                	jne    c000cab2 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ca87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca8b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ca91:	09 f2                	or     edx,esi
c000ca93:	89 15 a0 2a 02 c0    	mov    DWORD PTR ds:0xc0022aa0,edx
c000ca99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca9d:	09 fa                	or     edx,edi
c000ca9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000caa3:	89 15 a4 2a 02 c0    	mov    DWORD PTR ds:0xc0022aa4,edx
c000caa9:	89 1c bd c0 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd540],ebx
c000cab0:	eb 08                	jmp    c000caba <LogicalDisk::assignDriveLetter()+0xae>
c000cab2:	45                   	inc    ebp
c000cab3:	40                   	inc    eax
c000cab4:	3c 5b                	cmp    al,0x5b
c000cab6:	75 90                	jne    c000ca48 <LogicalDisk::assignDriveLetter()+0x3c>
c000cab8:	31 c0                	xor    eax,eax
c000caba:	83 c4 14             	add    esp,0x14
c000cabd:	5b                   	pop    ebx
c000cabe:	5e                   	pop    esi
c000cabf:	5f                   	pop    edi
c000cac0:	5d                   	pop    ebp
c000cac1:	c3                   	ret    

c000cac2 <LogicalDisk::mount()>:
c000cac2:	56                   	push   esi
c000cac3:	53                   	push   ebx
c000cac4:	53                   	push   ebx
c000cac5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cac9:	8b 1d 54 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020654
c000cacf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cad9:	85 db                	test   ebx,ebx
c000cadb:	74 27                	je     c000cb04 <LogicalDisk::mount()+0x42>
c000cadd:	51                   	push   ecx
c000cade:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cae5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cae7:	83 e8 41             	sub    eax,0x41
c000caea:	50                   	push   eax
c000caeb:	56                   	push   esi
c000caec:	53                   	push   ebx
c000caed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caf0:	83 c4 10             	add    esp,0x10
c000caf3:	84 c0                	test   al,al
c000caf5:	74 08                	je     c000caff <LogicalDisk::mount()+0x3d>
c000caf7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cafd:	eb 07                	jmp    c000cb06 <LogicalDisk::mount()+0x44>
c000caff:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb02:	eb d5                	jmp    c000cad9 <LogicalDisk::mount()+0x17>
c000cb04:	31 c0                	xor    eax,eax
c000cb06:	5a                   	pop    edx
c000cb07:	5b                   	pop    ebx
c000cb08:	5e                   	pop    esi
c000cb09:	c3                   	ret    

c000cb0a <LogicalDisk::unmount()>:
c000cb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb0e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb18:	c3                   	ret    
c000cb19:	90                   	nop

c000cb1a <LogicalDisk::eject()>:
c000cb1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb24:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb2a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb2d:	90                   	nop

c000cb2e <LogicalDisk::unassignDriveLetter()>:
c000cb2e:	57                   	push   edi
c000cb2f:	56                   	push   esi
c000cb30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb34:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb3b:	84 c9                	test   cl,cl
c000cb3d:	75 0f                	jne    c000cb4e <LogicalDisk::unassignDriveLetter()+0x20>
c000cb3f:	c7 44 24 0c 6c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc6c
c000cb47:	5e                   	pop    esi
c000cb48:	5f                   	pop    edi
c000cb49:	e9 b1 35 00 00       	jmp    c00100ff <KePanic(char const*)>
c000cb4e:	83 e9 41             	sub    ecx,0x41
c000cb51:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb58:	b8 01 00 00 00       	mov    eax,0x1
c000cb5d:	c7 04 8d c0 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd540],0x0
c000cb68:	d3 e0                	shl    eax,cl
c000cb6a:	89 c7                	mov    edi,eax
c000cb6c:	f7 d0                	not    eax
c000cb6e:	c1 ff 1f             	sar    edi,0x1f
c000cb71:	21 05 a0 2a 02 c0    	and    DWORD PTR ds:0xc0022aa0,eax
c000cb77:	89 fe                	mov    esi,edi
c000cb79:	f7 d6                	not    esi
c000cb7b:	21 35 a4 2a 02 c0    	and    DWORD PTR ds:0xc0022aa4,esi
c000cb81:	5e                   	pop    esi
c000cb82:	5f                   	pop    edi
c000cb83:	c3                   	ret    

c000cb84 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cb84:	57                   	push   edi
c000cb85:	56                   	push   esi
c000cb86:	53                   	push   ebx
c000cb87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb9d:	77 41                	ja     c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cb9f:	99                   	cdq    
c000cba0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cba6:	01 c8                	add    eax,ecx
c000cba8:	11 da                	adc    edx,ebx
c000cbaa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbb0:	19 d7                	sbb    edi,edx
c000cbb2:	72 33                	jb     c000cbe7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbb4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbc0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbc4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cbc8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cbce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cbd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbd8:	5b                   	pop    ebx
c000cbd9:	5e                   	pop    esi
c000cbda:	5f                   	pop    edi
c000cbdb:	e9 4e 0a 00 00       	jmp    c000d62e <VCache::read(unsigned long long, int, void*)>
c000cbe0:	b8 05 00 00 00       	mov    eax,0x5
c000cbe5:	eb 05                	jmp    c000cbec <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cbe7:	b8 07 00 00 00       	mov    eax,0x7
c000cbec:	5b                   	pop    ebx
c000cbed:	5e                   	pop    esi
c000cbee:	5f                   	pop    edi
c000cbef:	c3                   	ret    

c000cbf0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cbf0:	57                   	push   edi
c000cbf1:	56                   	push   esi
c000cbf2:	53                   	push   ebx
c000cbf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbfb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc03:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc09:	77 41                	ja     c000cc4c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc0b:	99                   	cdq    
c000cc0c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc12:	01 c8                	add    eax,ecx
c000cc14:	11 da                	adc    edx,ebx
c000cc16:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc1c:	19 d7                	sbb    edi,edx
c000cc1e:	72 33                	jb     c000cc53 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc20:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc26:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc30:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc34:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc44:	5b                   	pop    ebx
c000cc45:	5e                   	pop    esi
c000cc46:	5f                   	pop    edi
c000cc47:	e9 cc 08 00 00       	jmp    c000d518 <VCache::write(unsigned long long, int, void*)>
c000cc4c:	b8 05 00 00 00       	mov    eax,0x5
c000cc51:	eb 05                	jmp    c000cc58 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc53:	b8 07 00 00 00       	mov    eax,0x7
c000cc58:	5b                   	pop    ebx
c000cc59:	5e                   	pop    esi
c000cc5a:	5f                   	pop    edi
c000cc5b:	c3                   	ret    

c000cc5c <Mouse::Mouse(char const*)>:
c000cc5c:	83 ec 0c             	sub    esp,0xc
c000cc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc63:	83 ec 08             	sub    esp,0x8
c000cc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6a:	50                   	push   eax
c000cc6b:	e8 04 ee ff ff       	call   c000ba74 <Device::Device(char const*)>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000cc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7c:	89 10                	mov    DWORD PTR [eax],edx
c000cc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc82:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cc8c:	90                   	nop
c000cc8d:	83 c4 0c             	add    esp,0xc
c000cc90:	c3                   	ret    
c000cc91:	90                   	nop
c000cc92:	66 90                	xchg   ax,ax

c000cc94 <Mouse::~Mouse()>:
c000cc94:	83 ec 0c             	sub    esp,0xc
c000cc97:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000cc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca0:	89 10                	mov    DWORD PTR [eax],edx
c000cca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca6:	83 ec 0c             	sub    esp,0xc
c000cca9:	50                   	push   eax
c000ccaa:	e8 2f eb ff ff       	call   c000b7de <Device::~Device()>
c000ccaf:	83 c4 10             	add    esp,0x10
c000ccb2:	90                   	nop
c000ccb3:	83 c4 0c             	add    esp,0xc
c000ccb6:	c3                   	ret    
c000ccb7:	90                   	nop

c000ccb8 <Mouse::~Mouse()>:
c000ccb8:	83 ec 0c             	sub    esp,0xc
c000ccbb:	83 ec 0c             	sub    esp,0xc
c000ccbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc2:	e8 cd ff ff ff       	call   c000cc94 <Mouse::~Mouse()>
c000ccc7:	83 c4 10             	add    esp,0x10
c000ccca:	83 ec 08             	sub    esp,0x8
c000cccd:	68 58 01 00 00       	push   0x158
c000ccd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd6:	e8 cb d6 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000ccdb:	83 c4 10             	add    esp,0x10
c000ccde:	83 c4 0c             	add    esp,0xc
c000cce1:	c3                   	ret    

c000cce2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cce2:	55                   	push   ebp
c000cce3:	57                   	push   edi
c000cce4:	56                   	push   esi
c000cce5:	53                   	push   ebx
c000cce6:	81 ec 28 01 00 00    	sub    esp,0x128
c000ccec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ccf3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ccfa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd01:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd0c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd10:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd17:	e8 54 ee ff ff       	call   c000bb70 <Device::getName()>
c000cd1c:	5a                   	pop    edx
c000cd1d:	59                   	pop    ecx
c000cd1e:	50                   	push   eax
c000cd1f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd23:	55                   	push   ebp
c000cd24:	e8 d7 38 ff ff       	call   c0000600 <strcpy>
c000cd29:	5b                   	pop    ebx
c000cd2a:	58                   	pop    eax
c000cd2b:	68 e4 dc 01 c0       	push   0xc001dce4
c000cd30:	55                   	push   ebp
c000cd31:	e8 8a 3a ff ff       	call   c00007c0 <strcat>
c000cd36:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd3d:	e8 bf aa ff ff       	call   c0007801 <malloc>
c000cd42:	83 c4 0c             	add    esp,0xc
c000cd45:	89 c3                	mov    ebx,eax
c000cd47:	57                   	push   edi
c000cd48:	56                   	push   esi
c000cd49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd58:	55                   	push   ebp
c000cd59:	50                   	push   eax
c000cd5a:	e8 f7 fb ff ff       	call   c000c956 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd5f:	83 c4 14             	add    esp,0x14
c000cd62:	53                   	push   ebx
c000cd63:	e8 a4 fc ff ff       	call   c000ca0c <LogicalDisk::assignDriveLetter()>
c000cd68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd6b:	e8 52 fd ff ff       	call   c000cac2 <LogicalDisk::mount()>
c000cd70:	58                   	pop    eax
c000cd71:	5a                   	pop    edx
c000cd72:	53                   	push   ebx
c000cd73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd7a:	e8 5d eb ff ff       	call   c000b8dc <Device::addChild(Device*)>
c000cd7f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cd85:	5b                   	pop    ebx
c000cd86:	5e                   	pop    esi
c000cd87:	5f                   	pop    edi
c000cd88:	5d                   	pop    ebp
c000cd89:	c3                   	ret    

c000cd8a <createPartitionsForDisk(PhysicalDisk*)>:
c000cd8a:	55                   	push   ebp
c000cd8b:	57                   	push   edi
c000cd8c:	56                   	push   esi
c000cd8d:	53                   	push   ebx
c000cd8e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cd94:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cd9b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cda1:	3d 00 02 00 00       	cmp    eax,0x200
c000cda6:	74 27                	je     c000cdcf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cda8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cdae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdb4:	83 ec 10             	sub    esp,0x10
c000cdb7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdbb:	99                   	cdq    
c000cdbc:	c1 e6 0a             	shl    esi,0xa
c000cdbf:	52                   	push   edx
c000cdc0:	89 fd                	mov    ebp,edi
c000cdc2:	50                   	push   eax
c000cdc3:	55                   	push   ebp
c000cdc4:	56                   	push   esi
c000cdc5:	e8 86 ee 00 00       	call   c001bc50 <__udivdi3>
c000cdca:	e9 b1 00 00 00       	jmp    c000ce80 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cdcf:	83 ec 0c             	sub    esp,0xc
c000cdd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cdd4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cdd8:	56                   	push   esi
c000cdd9:	6a 01                	push   0x1
c000cddb:	6a 00                	push   0x0
c000cddd:	6a 00                	push   0x0
c000cddf:	53                   	push   ebx
c000cde0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cde3:	83 c4 20             	add    esp,0x20
c000cde6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cdee:	75 0a                	jne    c000cdfa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cdf0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cdf8:	74 2c                	je     c000ce26 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cdfa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce0c:	83 ec 10             	sub    esp,0x10
c000ce0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce13:	89 f7                	mov    edi,esi
c000ce15:	c1 e0 0a             	shl    eax,0xa
c000ce18:	c1 ff 1f             	sar    edi,0x1f
c000ce1b:	57                   	push   edi
c000ce1c:	56                   	push   esi
c000ce1d:	52                   	push   edx
c000ce1e:	50                   	push   eax
c000ce1f:	e8 2c ee 00 00       	call   c001bc50 <__udivdi3>
c000ce24:	eb 5a                	jmp    c000ce80 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce26:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce2d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce34:	83 e1 7f             	and    ecx,0x7f
c000ce37:	83 e0 7f             	and    eax,0x7f
c000ce3a:	01 c1                	add    ecx,eax
c000ce3c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce43:	83 e0 7f             	and    eax,0x7f
c000ce46:	01 c1                	add    ecx,eax
c000ce48:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce4f:	83 e0 7f             	and    eax,0x7f
c000ce52:	00 c1                	add    cl,al
c000ce54:	74 41                	je     c000ce97 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce68:	83 ec 10             	sub    esp,0x10
c000ce6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce6f:	89 f7                	mov    edi,esi
c000ce71:	c1 e0 0a             	shl    eax,0xa
c000ce74:	c1 ff 1f             	sar    edi,0x1f
c000ce77:	57                   	push   edi
c000ce78:	56                   	push   esi
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	e8 d0 ed 00 00       	call   c001bc50 <__udivdi3>
c000ce80:	83 c4 14             	add    esp,0x14
c000ce83:	52                   	push   edx
c000ce84:	50                   	push   eax
c000ce85:	6a 00                	push   0x0
c000ce87:	6a 00                	push   0x0
c000ce89:	53                   	push   ebx
c000ce8a:	e8 53 fe ff ff       	call   c000cce2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce8f:	83 c4 20             	add    esp,0x20
c000ce92:	e9 79 01 00 00       	jmp    c000d010 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ce97:	89 f0                	mov    eax,esi
c000ce99:	31 f6                	xor    esi,esi
c000ce9b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cea2:	75 02                	jne    c000cea6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cea4:	89 f1                	mov    ecx,esi
c000cea6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cead:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ceb4:	c1 e2 08             	shl    edx,0x8
c000ceb7:	c1 e7 10             	shl    edi,0x10
c000ceba:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cec2:	09 fa                	or     edx,edi
c000cec4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cecc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000ced3:	83 c0 10             	add    eax,0x10
c000ced6:	09 fa                	or     edx,edi
c000ced8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cedf:	c1 e7 18             	shl    edi,0x18
c000cee2:	09 fa                	or     edx,edi
c000cee4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000ceeb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000ceef:	c1 e7 10             	shl    edi,0x10
c000cef2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cef9:	c1 e2 08             	shl    edx,0x8
c000cefc:	09 fa                	or     edx,edi
c000cefe:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf05:	09 fa                	or     edx,edi
c000cf07:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf0e:	c1 e7 18             	shl    edi,0x18
c000cf11:	09 fa                	or     edx,edi
c000cf13:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf17:	46                   	inc    esi
c000cf18:	83 fe 04             	cmp    esi,0x4
c000cf1b:	0f 85 7a ff ff ff    	jne    c000ce9b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf25:	83 f0 01             	xor    eax,0x1
c000cf28:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf2c:	75 57                	jne    c000cf85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf32:	83 f0 01             	xor    eax,0x1
c000cf35:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf39:	75 4a                	jne    c000cf85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf3b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf4f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf55:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf5b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf61:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf65:	89 f7                	mov    edi,esi
c000cf67:	c1 e0 0a             	shl    eax,0xa
c000cf6a:	c1 ff 1f             	sar    edi,0x1f
c000cf6d:	57                   	push   edi
c000cf6e:	56                   	push   esi
c000cf6f:	52                   	push   edx
c000cf70:	50                   	push   eax
c000cf71:	e8 da ec 00 00       	call   c001bc50 <__udivdi3>
c000cf76:	83 c4 10             	add    esp,0x10
c000cf79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf81:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cf85:	84 c9                	test   cl,cl
c000cf87:	74 53                	je     c000cfdc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cf89:	0f b6 c9             	movzx  ecx,cl
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cf98:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cf9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfa8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cfac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cfb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cfc0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cfc4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000cfc8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000cfcc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfd0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000cfd8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000cfdc:	31 ed                	xor    ebp,ebp
c000cfde:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000cfe2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000cfe6:	89 f8                	mov    eax,edi
c000cfe8:	09 f0                	or     eax,esi
c000cfea:	74 1e                	je     c000d00a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cfec:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000cff0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000cff4:	89 d1                	mov    ecx,edx
c000cff6:	09 c1                	or     ecx,eax
c000cff8:	74 10                	je     c000d00a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cffa:	83 ec 0c             	sub    esp,0xc
c000cffd:	57                   	push   edi
c000cffe:	56                   	push   esi
c000cfff:	52                   	push   edx
c000d000:	50                   	push   eax
c000d001:	53                   	push   ebx
c000d002:	e8 db fc ff ff       	call   c000cce2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d007:	83 c4 20             	add    esp,0x20
c000d00a:	45                   	inc    ebp
c000d00b:	83 fd 04             	cmp    ebp,0x4
c000d00e:	75 ce                	jne    c000cfde <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d010:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d016:	5b                   	pop    ebx
c000d017:	5e                   	pop    esi
c000d018:	5f                   	pop    edi
c000d019:	5d                   	pop    ebp
c000d01a:	c3                   	ret    
c000d01b:	90                   	nop

c000d01c <Serial::Serial(char const*)>:
c000d01c:	83 ec 0c             	sub    esp,0xc
c000d01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d023:	83 ec 08             	sub    esp,0x8
c000d026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d02a:	50                   	push   eax
c000d02b:	e8 44 ea ff ff       	call   c000ba74 <Device::Device(char const*)>
c000d030:	83 c4 10             	add    esp,0x10
c000d033:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d03c:	89 10                	mov    DWORD PTR [eax],edx
c000d03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d042:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d04c:	90                   	nop
c000d04d:	83 c4 0c             	add    esp,0xc
c000d050:	c3                   	ret    
c000d051:	90                   	nop
c000d052:	66 90                	xchg   ax,ax

c000d054 <Serial::~Serial()>:
c000d054:	83 ec 0c             	sub    esp,0xc
c000d057:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d060:	89 10                	mov    DWORD PTR [eax],edx
c000d062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d066:	83 ec 0c             	sub    esp,0xc
c000d069:	50                   	push   eax
c000d06a:	e8 6f e7 ff ff       	call   c000b7de <Device::~Device()>
c000d06f:	83 c4 10             	add    esp,0x10
c000d072:	90                   	nop
c000d073:	83 c4 0c             	add    esp,0xc
c000d076:	c3                   	ret    
c000d077:	90                   	nop

c000d078 <Serial::~Serial()>:
c000d078:	83 ec 0c             	sub    esp,0xc
c000d07b:	83 ec 0c             	sub    esp,0xc
c000d07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d082:	e8 cd ff ff ff       	call   c000d054 <Serial::~Serial()>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	83 ec 08             	sub    esp,0x8
c000d08d:	68 58 01 00 00       	push   0x158
c000d092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d096:	e8 0b d3 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000d09b:	83 c4 10             	add    esp,0x10
c000d09e:	83 c4 0c             	add    esp,0xc
c000d0a1:	c3                   	ret    
c000d0a2:	66 90                	xchg   ax,ax

c000d0a4 <Timer::Timer(char const*)>:
c000d0a4:	83 ec 0c             	sub    esp,0xc
c000d0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ab:	83 ec 08             	sub    esp,0x8
c000d0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b2:	50                   	push   eax
c000d0b3:	e8 bc e9 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c4:	89 10                	mov    DWORD PTR [eax],edx
c000d0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ca:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d0d4:	90                   	nop
c000d0d5:	83 c4 0c             	add    esp,0xc
c000d0d8:	c3                   	ret    
c000d0d9:	90                   	nop
c000d0da:	66 90                	xchg   ax,ax

c000d0dc <Timer::~Timer()>:
c000d0dc:	83 ec 0c             	sub    esp,0xc
c000d0df:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ee:	83 ec 0c             	sub    esp,0xc
c000d0f1:	50                   	push   eax
c000d0f2:	e8 e7 e6 ff ff       	call   c000b7de <Device::~Device()>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	90                   	nop
c000d0fb:	83 c4 0c             	add    esp,0xc
c000d0fe:	c3                   	ret    
c000d0ff:	90                   	nop

c000d100 <Timer::~Timer()>:
c000d100:	83 ec 0c             	sub    esp,0xc
c000d103:	83 ec 0c             	sub    esp,0xc
c000d106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10a:	e8 cd ff ff ff       	call   c000d0dc <Timer::~Timer()>
c000d10f:	83 c4 10             	add    esp,0x10
c000d112:	83 ec 08             	sub    esp,0x8
c000d115:	68 5c 01 00 00       	push   0x15c
c000d11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11e:	e8 83 d2 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	83 c4 0c             	add    esp,0xc
c000d129:	c3                   	ret    

c000d12a <Timer::read()>:
c000d12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d12e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d134:	c3                   	ret    

c000d135 <setupTimer(int)>:
c000d135:	53                   	push   ebx
c000d136:	83 ec 14             	sub    esp,0x14
c000d139:	68 5c 01 00 00       	push   0x15c
c000d13e:	e8 be a6 ff ff       	call   c0007801 <malloc>
c000d143:	89 04 24             	mov    DWORD PTR [esp],eax
c000d146:	89 c3                	mov    ebx,eax
c000d148:	e8 77 e4 00 00       	call   c001b5c4 <PIT::PIT()>
c000d14d:	58                   	pop    eax
c000d14e:	5a                   	pop    edx
c000d14f:	53                   	push   ebx
c000d150:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c000d156:	e8 81 e7 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c000d15b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d15d:	6a 00                	push   0x0
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d165:	53                   	push   ebx
c000d166:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d169:	89 d8                	mov    eax,ebx
c000d16b:	83 c4 28             	add    esp,0x28
c000d16e:	5b                   	pop    ebx
c000d16f:	c3                   	ret    

c000d170 <timerHandler(unsigned int)>:
c000d170:	56                   	push   esi
c000d171:	53                   	push   ebx
c000d172:	51                   	push   ecx
c000d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d177:	01 05 2c 2b 02 c0    	add    DWORD PTR ds:0xc0022b2c,eax
c000d17d:	80 3d 5d 05 02 c0 00 	cmp    BYTE PTR ds:0xc002055d,0x0
c000d184:	0f 84 4a 01 00 00    	je     c000d2d4 <timerHandler(unsigned int)+0x164>
c000d18a:	fa                   	cli    
c000d18b:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c000d191:	83 ec 0c             	sub    esp,0xc
c000d194:	ff 05 04 38 02 c0    	inc    DWORD PTR ds:0xc0023804
c000d19a:	68 18 38 02 c0       	push   0xc0023818
c000d19f:	e8 7c f0 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1a4:	83 c4 10             	add    esp,0x10
c000d1a7:	84 c0                	test   al,al
c000d1a9:	0f 85 a1 00 00 00    	jne    c000d250 <timerHandler(unsigned int)+0xe0>
c000d1af:	83 ec 0c             	sub    esp,0xc
c000d1b2:	68 18 38 02 c0       	push   0xc0023818
c000d1b7:	e8 80 f0 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1bc:	83 c4 10             	add    esp,0x10
c000d1bf:	89 c6                	mov    esi,eax
c000d1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1c4:	83 ec 0c             	sub    esp,0xc
c000d1c7:	68 18 38 02 c0       	push   0xc0023818
c000d1cc:	e8 6b f0 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1d1:	c7 04 24 18 38 02 c0 	mov    DWORD PTR [esp],0xc0023818
c000d1d8:	89 c3                	mov    ebx,eax
c000d1da:	e8 65 f0 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d1df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	3b 05 2c 2b 02 c0    	cmp    eax,DWORD PTR ds:0xc0022b2c
c000d1eb:	77 23                	ja     c000d210 <timerHandler(unsigned int)+0xa0>
c000d1ed:	83 ec 0c             	sub    esp,0xc
c000d1f0:	53                   	push   ebx
c000d1f1:	e8 ce 65 00 00       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	39 de                	cmp    esi,ebx
c000d1fb:	75 27                	jne    c000d224 <timerHandler(unsigned int)+0xb4>
c000d1fd:	83 ec 0c             	sub    esp,0xc
c000d200:	68 18 38 02 c0       	push   0xc0023818
c000d205:	e8 32 f0 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d20a:	89 c6                	mov    esi,eax
c000d20c:	eb 12                	jmp    c000d220 <timerHandler(unsigned int)+0xb0>
c000d20e:	66 90                	xchg   ax,ax
c000d210:	52                   	push   edx
c000d211:	52                   	push   edx
c000d212:	53                   	push   ebx
c000d213:	68 18 38 02 c0       	push   0xc0023818
c000d218:	e8 df f0 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d21d:	8d 76 00             	lea    esi,[esi+0x0]
c000d220:	83 c4 10             	add    esp,0x10
c000d223:	90                   	nop
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	68 18 38 02 c0       	push   0xc0023818
c000d22c:	e8 ef ef 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	84 c0                	test   al,al
c000d236:	75 18                	jne    c000d250 <timerHandler(unsigned int)+0xe0>
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	68 18 38 02 c0       	push   0xc0023818
c000d240:	e8 f7 ef 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d245:	83 c4 10             	add    esp,0x10
c000d248:	39 f0                	cmp    eax,esi
c000d24a:	0f 85 74 ff ff ff    	jne    c000d1c4 <timerHandler(unsigned int)+0x54>
c000d250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d255:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d259:	74 41                	je     c000d29c <timerHandler(unsigned int)+0x12c>
c000d25b:	80 3d 5c 05 02 c0 00 	cmp    BYTE PTR ds:0xc002055c,0x0
c000d262:	74 38                	je     c000d29c <timerHandler(unsigned int)+0x12c>
c000d264:	fa                   	cli    
c000d265:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c000d26b:	a1 2c 2b 02 c0       	mov    eax,ds:0xc0022b2c
c000d270:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d276:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d279:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d27f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d282:	72 08                	jb     c000d28c <timerHandler(unsigned int)+0x11c>
c000d284:	e8 77 60 00 00       	call   c0013300 <schedule()>
c000d289:	8d 76 00             	lea    esi,[esi+0x0]
c000d28c:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000d291:	48                   	dec    eax
c000d292:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000d297:	75 03                	jne    c000d29c <timerHandler(unsigned int)+0x12c>
c000d299:	fb                   	sti    
c000d29a:	66 90                	xchg   ax,ax
c000d29c:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000d2a1:	48                   	dec    eax
c000d2a2:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c000d2a7:	75 1b                	jne    c000d2c4 <timerHandler(unsigned int)+0x154>
c000d2a9:	83 3d 00 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023800,0x0
c000d2b0:	74 12                	je     c000d2c4 <timerHandler(unsigned int)+0x154>
c000d2b2:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c000d2bc:	e8 3f 60 00 00       	call   c0013300 <schedule()>
c000d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c4:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c000d2c9:	48                   	dec    eax
c000d2ca:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c000d2cf:	75 03                	jne    c000d2d4 <timerHandler(unsigned int)+0x164>
c000d2d1:	fb                   	sti    
c000d2d2:	66 90                	xchg   ax,ax
c000d2d4:	58                   	pop    eax
c000d2d5:	5b                   	pop    ebx
c000d2d6:	5e                   	pop    esi
c000d2d7:	c3                   	ret    

c000d2d8 <VCache::VCache(PhysicalDisk*)>:
c000d2d8:	53                   	push   ebx
c000d2d9:	83 ec 18             	sub    esp,0x18
c000d2dc:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d2e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e5:	89 10                	mov    DWORD PTR [eax],edx
c000d2e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d2fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d301:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d308:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d313:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d31a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d325:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d32c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d330:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d338:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d33f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d352:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d35e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d362:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d369:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d371:	83 ec 0c             	sub    esp,0xc
c000d374:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d378:	e8 84 a4 ff ff       	call   c0007801 <malloc>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	89 c3                	mov    ebx,eax
c000d382:	83 ec 0c             	sub    esp,0xc
c000d385:	53                   	push   ebx
c000d386:	e8 41 5d 00 00       	call   c00130cc <Mutex::Mutex()>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d392:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d399:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d39d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3af:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3c0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d3c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d3cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d3d0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d3d3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3e8:	05 00 01 00 00       	add    eax,0x100
c000d3ed:	c1 e0 04             	shl    eax,0x4
c000d3f0:	83 ec 0c             	sub    esp,0xc
c000d3f3:	50                   	push   eax
c000d3f4:	e8 08 a4 ff ff       	call   c0007801 <malloc>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	89 c2                	mov    edx,eax
c000d3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d402:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d409:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d414:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d418:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d41c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d422:	c1 e0 06             	shl    eax,0x6
c000d425:	83 ec 0c             	sub    esp,0xc
c000d428:	50                   	push   eax
c000d429:	e8 d3 a3 ff ff       	call   c0007801 <malloc>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	89 c2                	mov    edx,eax
c000d433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d437:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d43a:	90                   	nop
c000d43b:	83 c4 18             	add    esp,0x18
c000d43e:	5b                   	pop    ebx
c000d43f:	c3                   	ret    

c000d440 <VCache::invalidateReadBuffer()>:
c000d440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d444:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d44a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d44e:	c3                   	ret    
c000d44f:	90                   	nop

c000d450 <VCache::writeWriteBuffer()>:
c000d450:	53                   	push   ebx
c000d451:	83 ec 08             	sub    esp,0x8
c000d454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d458:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d45c:	74 1e                	je     c000d47c <VCache::writeWriteBuffer()+0x2c>
c000d45e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d461:	83 ec 0c             	sub    esp,0xc
c000d464:	8b 10                	mov    edx,DWORD PTR [eax]
c000d466:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d469:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d46c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d46f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d472:	50                   	push   eax
c000d473:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d476:	83 c4 20             	add    esp,0x20
c000d479:	8d 76 00             	lea    esi,[esi+0x0]
c000d47c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d483:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d48a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d48e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d495:	83 c4 08             	add    esp,0x8
c000d498:	5b                   	pop    ebx
c000d499:	c3                   	ret    
c000d49a:	66 90                	xchg   ax,ax

c000d49c <VCache::~VCache()>:
c000d49c:	83 ec 0c             	sub    esp,0xc
c000d49f:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a8:	89 10                	mov    DWORD PTR [eax],edx
c000d4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ae:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4b1:	84 c0                	test   al,al
c000d4b3:	74 0f                	je     c000d4c4 <VCache::~VCache()+0x28>
c000d4b5:	83 ec 0c             	sub    esp,0xc
c000d4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4bc:	e8 8f ff ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c000d4c1:	83 c4 10             	add    esp,0x10
c000d4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d4cb:	83 ec 0c             	sub    esp,0xc
c000d4ce:	50                   	push   eax
c000d4cf:	e8 3d a3 ff ff       	call   c0007811 <free>
c000d4d4:	83 c4 10             	add    esp,0x10
c000d4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d4de:	83 ec 0c             	sub    esp,0xc
c000d4e1:	50                   	push   eax
c000d4e2:	e8 2a a3 ff ff       	call   c0007811 <free>
c000d4e7:	83 c4 10             	add    esp,0x10
c000d4ea:	90                   	nop
c000d4eb:	83 c4 0c             	add    esp,0xc
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <VCache::~VCache()>:
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	83 ec 0c             	sub    esp,0xc
c000d4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fa:	e8 9d ff ff ff       	call   c000d49c <VCache::~VCache()>
c000d4ff:	83 c4 10             	add    esp,0x10
c000d502:	83 ec 08             	sub    esp,0x8
c000d505:	6a 44                	push   0x44
c000d507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50b:	e8 96 ce ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	83 c4 0c             	add    esp,0xc
c000d516:	c3                   	ret    
c000d517:	90                   	nop

c000d518 <VCache::write(unsigned long long, int, void*)>:
c000d518:	55                   	push   ebp
c000d519:	57                   	push   edi
c000d51a:	56                   	push   esi
c000d51b:	53                   	push   ebx
c000d51c:	83 ec 1c             	sub    esp,0x1c
c000d51f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d523:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d52b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d52f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d533:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d53b:	31 c0                	xor    eax,eax
c000d53d:	8d 76 00             	lea    esi,[esi+0x0]
c000d540:	39 e8                	cmp    eax,ebp
c000d542:	7d 18                	jge    c000d55c <VCache::write(unsigned long long, int, void*)+0x44>
c000d544:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d547:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d54d:	0f af c8             	imul   ecx,eax
c000d550:	89 ca                	mov    edx,ecx
c000d552:	01 f2                	add    edx,esi
c000d554:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d556:	40                   	inc    eax
c000d557:	eb e7                	jmp    c000d540 <VCache::write(unsigned long long, int, void*)+0x28>
c000d559:	8d 76 00             	lea    esi,[esi+0x0]
c000d55c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d560:	74 0a                	je     c000d56c <VCache::write(unsigned long long, int, void*)+0x54>
c000d562:	53                   	push   ebx
c000d563:	e8 d8 fe ff ff       	call   c000d440 <VCache::invalidateReadBuffer()>
c000d568:	58                   	pop    eax
c000d569:	8d 76 00             	lea    esi,[esi+0x0]
c000d56c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d570:	74 5a                	je     c000d5cc <VCache::write(unsigned long long, int, void*)+0xb4>
c000d572:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d575:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d579:	89 f8                	mov    eax,edi
c000d57b:	99                   	cdq    
c000d57c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d57f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d582:	31 c1                	xor    ecx,eax
c000d584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d588:	31 d0                	xor    eax,edx
c000d58a:	09 c1                	or     ecx,eax
c000d58c:	75 32                	jne    c000d5c0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d58e:	83 fd 01             	cmp    ebp,0x1
c000d591:	75 2d                	jne    c000d5c0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d593:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d596:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d59c:	0f af f9             	imul   edi,ecx
c000d59f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5a7:	40                   	inc    eax
c000d5a8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5ab:	83 f8 40             	cmp    eax,0x40
c000d5ae:	75 74                	jne    c000d624 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5b0:	83 ec 0c             	sub    esp,0xc
c000d5b3:	53                   	push   ebx
c000d5b4:	e8 97 fe ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c000d5b9:	83 c4 10             	add    esp,0x10
c000d5bc:	eb 66                	jmp    c000d624 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5be:	66 90                	xchg   ax,ax
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	53                   	push   ebx
c000d5c4:	e8 87 fe ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c000d5c9:	83 c4 10             	add    esp,0x10
c000d5cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5cf:	83 fd 3f             	cmp    ebp,0x3f
c000d5d2:	7f 24                	jg     c000d5f8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d5d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d5d8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d5db:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d5de:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d5e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5e6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d5e9:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d5ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5f4:	eb 2e                	jmp    c000d624 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5f6:	66 90                	xchg   ax,ax
c000d5f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d5fe:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d602:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d606:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d60a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d60e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d612:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d616:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d619:	83 c4 1c             	add    esp,0x1c
c000d61c:	5b                   	pop    ebx
c000d61d:	5e                   	pop    esi
c000d61e:	5f                   	pop    edi
c000d61f:	5d                   	pop    ebp
c000d620:	ff e0                	jmp    eax
c000d622:	66 90                	xchg   ax,ax
c000d624:	83 c4 1c             	add    esp,0x1c
c000d627:	31 c0                	xor    eax,eax
c000d629:	5b                   	pop    ebx
c000d62a:	5e                   	pop    esi
c000d62b:	5f                   	pop    edi
c000d62c:	5d                   	pop    ebp
c000d62d:	c3                   	ret    

c000d62e <VCache::read(unsigned long long, int, void*)>:
c000d62e:	55                   	push   ebp
c000d62f:	57                   	push   edi
c000d630:	56                   	push   esi
c000d631:	53                   	push   ebx
c000d632:	83 ec 1c             	sub    esp,0x1c
c000d635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d63d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d641:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d645:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d649:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d64d:	31 c0                	xor    eax,eax
c000d64f:	90                   	nop
c000d650:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d654:	7d 16                	jge    c000d66c <VCache::read(unsigned long long, int, void*)+0x3e>
c000d656:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d659:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d65f:	0f af c8             	imul   ecx,eax
c000d662:	89 ca                	mov    edx,ecx
c000d664:	01 f2                	add    edx,esi
c000d666:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d668:	40                   	inc    eax
c000d669:	eb e5                	jmp    c000d650 <VCache::read(unsigned long long, int, void*)+0x22>
c000d66b:	90                   	nop
c000d66c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d670:	74 0e                	je     c000d680 <VCache::read(unsigned long long, int, void*)+0x52>
c000d672:	83 ec 0c             	sub    esp,0xc
c000d675:	53                   	push   ebx
c000d676:	e8 d5 fd ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	66 90                	xchg   ax,ax
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	53                   	push   ebx
c000d684:	e8 b7 fd ff ff       	call   c000d440 <VCache::invalidateReadBuffer()>
c000d689:	83 c4 0c             	add    esp,0xc
c000d68c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d68f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d695:	6a 00                	push   0x0
c000d697:	56                   	push   esi
c000d698:	e8 33 2e ff ff       	call   c00004d0 <memset>
c000d69d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a2:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d6a6:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d6aa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6ae:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d6b2:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d6b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6ba:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6bd:	83 c4 2c             	add    esp,0x2c
c000d6c0:	5b                   	pop    ebx
c000d6c1:	5e                   	pop    esi
c000d6c2:	5f                   	pop    edi
c000d6c3:	5d                   	pop    ebp
c000d6c4:	ff e0                	jmp    eax

c000d6c6 <Video::putrect(int, int, int, int, unsigned int)>:
c000d6c6:	55                   	push   ebp
c000d6c7:	57                   	push   edi
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	83 ec 1c             	sub    esp,0x1c
c000d6cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d6d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d6d9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d6dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6e5:	01 df                	add    edi,ebx
c000d6e7:	39 fb                	cmp    ebx,edi
c000d6e9:	7d 1f                	jge    c000d70a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d6eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d6ef:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d6f3:	7d 12                	jge    c000d707 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d6f5:	8b 16                	mov    edx,DWORD PTR [esi]
c000d6f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d6fb:	53                   	push   ebx
c000d6fc:	55                   	push   ebp
c000d6fd:	45                   	inc    ebp
c000d6fe:	56                   	push   esi
c000d6ff:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	eb e8                	jmp    c000d6ef <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d707:	43                   	inc    ebx
c000d708:	eb dd                	jmp    c000d6e7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d70a:	83 c4 1c             	add    esp,0x1c
c000d70d:	5b                   	pop    ebx
c000d70e:	5e                   	pop    esi
c000d70f:	5f                   	pop    edi
c000d710:	5d                   	pop    ebp
c000d711:	c3                   	ret    

c000d712 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d712:	55                   	push   ebp
c000d713:	57                   	push   edi
c000d714:	31 ff                	xor    edi,edi
c000d716:	56                   	push   esi
c000d717:	53                   	push   ebx
c000d718:	83 ec 1c             	sub    esp,0x1c
c000d71b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d71f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d723:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d72a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d72f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d733:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d737:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d73b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d73e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d742:	01 f9                	add    ecx,edi
c000d744:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d748:	7d 2f                	jge    c000d779 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d74a:	31 f6                	xor    esi,esi
c000d74c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d750:	01 f2                	add    edx,esi
c000d752:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d756:	7d 1a                	jge    c000d772 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d758:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d75b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d75e:	46                   	inc    esi
c000d75f:	51                   	push   ecx
c000d760:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d764:	52                   	push   edx
c000d765:	55                   	push   ebp
c000d766:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d770:	eb da                	jmp    c000d74c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d772:	47                   	inc    edi
c000d773:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d777:	eb c5                	jmp    c000d73e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d779:	83 c4 1c             	add    esp,0x1c
c000d77c:	5b                   	pop    ebx
c000d77d:	5e                   	pop    esi
c000d77e:	5f                   	pop    edi
c000d77f:	5d                   	pop    ebp
c000d780:	c3                   	ret    
c000d781:	90                   	nop

c000d782 <Video::blit(unsigned int*, int, int, int, int)>:
c000d782:	55                   	push   ebp
c000d783:	57                   	push   edi
c000d784:	56                   	push   esi
c000d785:	53                   	push   ebx
c000d786:	83 ec 1c             	sub    esp,0x1c
c000d789:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d78d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d791:	85 c0                	test   eax,eax
c000d793:	79 02                	jns    c000d797 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d795:	31 c0                	xor    eax,eax
c000d797:	c1 e0 02             	shl    eax,0x2
c000d79a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7a6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7aa:	39 d8                	cmp    eax,ebx
c000d7ac:	7e 49                	jle    c000d7f7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7ae:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7b4:	7c 41                	jl     c000d7f7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7b6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7be:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7c2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d7c6:	39 f9                	cmp    ecx,edi
c000d7c8:	7e 22                	jle    c000d7ec <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d7ca:	83 c5 04             	add    ebp,0x4
c000d7cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7d3:	7c 14                	jl     c000d7e9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d7d5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d7d7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d7da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7e2:	56                   	push   esi
c000d7e3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	47                   	inc    edi
c000d7ea:	eb d2                	jmp    c000d7be <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d7ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7f0:	43                   	inc    ebx
c000d7f1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d7f5:	eb ab                	jmp    c000d7a2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d7f7:	83 c4 1c             	add    esp,0x1c
c000d7fa:	5b                   	pop    ebx
c000d7fb:	5e                   	pop    esi
c000d7fc:	5f                   	pop    edi
c000d7fd:	5d                   	pop    ebp
c000d7fe:	c3                   	ret    
c000d7ff:	90                   	nop

c000d800 <Video::clearScreen(unsigned int)>:
c000d800:	57                   	push   edi
c000d801:	56                   	push   esi
c000d802:	53                   	push   ebx
c000d803:	31 db                	xor    ebx,ebx
c000d805:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d809:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d80f:	7e 1f                	jle    c000d830 <Video::clearScreen(unsigned int)+0x30>
c000d811:	31 ff                	xor    edi,edi
c000d813:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d819:	7e 12                	jle    c000d82d <Video::clearScreen(unsigned int)+0x2d>
c000d81b:	8b 06                	mov    eax,DWORD PTR [esi]
c000d81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d821:	53                   	push   ebx
c000d822:	57                   	push   edi
c000d823:	47                   	inc    edi
c000d824:	56                   	push   esi
c000d825:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	eb e6                	jmp    c000d813 <Video::clearScreen(unsigned int)+0x13>
c000d82d:	43                   	inc    ebx
c000d82e:	eb d9                	jmp    c000d809 <Video::clearScreen(unsigned int)+0x9>
c000d830:	5b                   	pop    ebx
c000d831:	5e                   	pop    esi
c000d832:	5f                   	pop    edi
c000d833:	c3                   	ret    

c000d834 <Video::putpixel(int, int, unsigned int)>:
c000d834:	c7 44 24 04 74 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd74
c000d83c:	e9 be 28 00 00       	jmp    c00100ff <KePanic(char const*)>
c000d841:	90                   	nop

c000d842 <Video::Video(char const*)>:
c000d842:	83 ec 0c             	sub    esp,0xc
c000d845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d849:	83 ec 08             	sub    esp,0x8
c000d84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d850:	50                   	push   eax
c000d851:	e8 1e e2 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000d856:	83 c4 10             	add    esp,0x10
c000d859:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d862:	89 10                	mov    DWORD PTR [eax],edx
c000d864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d868:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d872:	90                   	nop
c000d873:	83 c4 0c             	add    esp,0xc
c000d876:	c3                   	ret    
c000d877:	90                   	nop

c000d878 <Video::~Video()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d884:	89 10                	mov    DWORD PTR [eax],edx
c000d886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88a:	83 ec 0c             	sub    esp,0xc
c000d88d:	50                   	push   eax
c000d88e:	e8 4b df ff ff       	call   c000b7de <Device::~Device()>
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	90                   	nop
c000d897:	83 c4 0c             	add    esp,0xc
c000d89a:	c3                   	ret    
c000d89b:	90                   	nop

c000d89c <Video::~Video()>:
c000d89c:	83 ec 0c             	sub    esp,0xc
c000d89f:	83 ec 0c             	sub    esp,0xc
c000d8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a6:	e8 cd ff ff ff       	call   c000d878 <Video::~Video()>
c000d8ab:	83 c4 10             	add    esp,0x10
c000d8ae:	83 ec 08             	sub    esp,0x8
c000d8b1:	68 64 01 00 00       	push   0x164
c000d8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ba:	e8 e7 ca ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	83 c4 0c             	add    esp,0xc
c000d8c5:	c3                   	ret    

c000d8c6 <Video::isMonochrome()>:
c000d8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8ca:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d8d0:	c3                   	ret    
c000d8d1:	90                   	nop

c000d8d2 <Video::getWidth()>:
c000d8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d8dc:	c3                   	ret    
c000d8dd:	90                   	nop

c000d8de <Video::getHeight()>:
c000d8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8e8:	c3                   	ret    
c000d8e9:	90                   	nop

c000d8ea <Video::drawCursor(int, int, unsigned char*, int)>:
c000d8ea:	55                   	push   ebp
c000d8eb:	57                   	push   edi
c000d8ec:	56                   	push   esi
c000d8ed:	53                   	push   ebx
c000d8ee:	83 ec 2c             	sub    esp,0x2c
c000d8f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8f5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d8f9:	83 f8 01             	cmp    eax,0x1
c000d8fc:	19 c9                	sbb    ecx,ecx
c000d8fe:	31 db                	xor    ebx,ebx
c000d900:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d904:	89 cd                	mov    ebp,ecx
c000d906:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d90e:	f7 d5                	not    ebp
c000d910:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d916:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d91a:	01 d8                	add    eax,ebx
c000d91c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d920:	56                   	push   esi
c000d921:	e8 b8 ff ff ff       	call   c000d8de <Video::getHeight()>
c000d926:	59                   	pop    ecx
c000d927:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d92b:	7e 70                	jle    c000d99d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d92d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d931:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d935:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d938:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d93c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d940:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d947:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d94b:	89 f8                	mov    eax,edi
c000d94d:	83 c0 20             	add    eax,0x20
c000d950:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d954:	56                   	push   esi
c000d955:	e8 78 ff ff ff       	call   c000d8d2 <Video::getWidth()>
c000d95a:	5a                   	pop    edx
c000d95b:	39 c7                	cmp    edi,eax
c000d95d:	7d 34                	jge    c000d993 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d95f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d964:	74 05                	je     c000d96b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d966:	8b 06                	mov    eax,DWORD PTR [esi]
c000d968:	55                   	push   ebp
c000d969:	eb 0d                	jmp    c000d978 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d96b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d970:	74 12                	je     c000d984 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d972:	8b 06                	mov    eax,DWORD PTR [esi]
c000d974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d97c:	57                   	push   edi
c000d97d:	56                   	push   esi
c000d97e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d988:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d98c:	47                   	inc    edi
c000d98d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d991:	75 c1                	jne    c000d954 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d993:	43                   	inc    ebx
c000d994:	83 fb 20             	cmp    ebx,0x20
c000d997:	0f 85 79 ff ff ff    	jne    c000d916 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d99d:	83 c4 2c             	add    esp,0x2c
c000d9a0:	5b                   	pop    ebx
c000d9a1:	5e                   	pop    esi
c000d9a2:	5f                   	pop    edi
c000d9a3:	5d                   	pop    ebp
c000d9a4:	c3                   	ret    
c000d9a5:	90                   	nop

c000d9a6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9a6:	55                   	push   ebp
c000d9a7:	57                   	push   edi
c000d9a8:	56                   	push   esi
c000d9a9:	53                   	push   ebx
c000d9aa:	83 ec 28             	sub    esp,0x28
c000d9ad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9b1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9b5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9b9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9bd:	c1 e6 08             	shl    esi,0x8
c000d9c0:	01 c6                	add    esi,eax
c000d9c2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d9c6:	c1 e0 08             	shl    eax,0x8
c000d9c9:	01 d0                	add    eax,edx
c000d9cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9d3:	0f af c6             	imul   eax,esi
c000d9d6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d9dd:	50                   	push   eax
c000d9de:	e8 1e 9e ff ff       	call   c0007801 <malloc>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	89 c7                	mov    edi,eax
c000d9e8:	85 c0                	test   eax,eax
c000d9ea:	75 10                	jne    c000d9fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d9ec:	83 ec 0c             	sub    esp,0xc
c000d9ef:	68 95 dd 01 c0       	push   0xc001dd95
c000d9f4:	e8 06 27 00 00       	call   c00100ff <KePanic(char const*)>
c000d9f9:	83 c4 10             	add    esp,0x10
c000d9fc:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000d9ff:	ba 12 00 00 00       	mov    edx,0x12
c000da04:	84 c0                	test   al,al
c000da06:	74 11                	je     c000da19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da08:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da0c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da10:	c1 fa 03             	sar    edx,0x3
c000da13:	0f af d1             	imul   edx,ecx
c000da16:	83 c2 12             	add    edx,0x12
c000da19:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da1d:	74 04                	je     c000da23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da1f:	85 f6                	test   esi,esi
c000da21:	75 12                	jne    c000da35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da23:	83 ec 0c             	sub    esp,0xc
c000da26:	68 a5 dd 01 c0       	push   0xc001dda5
c000da2b:	e8 6c ca ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000da30:	e9 b8 00 00 00       	jmp    c000daed <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da35:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da39:	80 f9 02             	cmp    cl,0x2
c000da3c:	0f 85 96 00 00 00    	jne    c000dad8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da42:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da47:	75 0e                	jne    c000da57 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da49:	84 c0                	test   al,al
c000da4b:	75 0a                	jne    c000da57 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da4d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da50:	83 e8 18             	sub    eax,0x18
c000da53:	a8 f7                	test   al,0xf7
c000da55:	74 0a                	je     c000da61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da57:	83 ec 0c             	sub    esp,0xc
c000da5a:	68 ba dd 01 c0       	push   0xc001ddba
c000da5f:	eb 7f                	jmp    c000dae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da71:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da75:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da7d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000da81:	75 0c                	jne    c000da8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000da83:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000da88:	c1 e0 18             	shl    eax,0x18
c000da8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da8f:	45                   	inc    ebp
c000da90:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000da95:	c1 e1 10             	shl    ecx,0x10
c000da98:	89 c8                	mov    eax,ecx
c000da9a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000da9f:	c1 e1 08             	shl    ecx,0x8
c000daa2:	09 c1                	or     ecx,eax
c000daa4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000daa8:	09 c1                	or     ecx,eax
c000daaa:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000daae:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dab2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dab6:	c1 f8 03             	sar    eax,0x3
c000dab9:	01 c2                	add    edx,eax
c000dabb:	89 e8                	mov    eax,ebp
c000dabd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dac1:	39 c6                	cmp    esi,eax
c000dac3:	7f b0                	jg     c000da75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dac5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dac9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dacd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dad0:	7e 22                	jle    c000daf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dad2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dad6:	eb 99                	jmp    c000da71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dad8:	50                   	push   eax
c000dad9:	50                   	push   eax
c000dada:	51                   	push   ecx
c000dadb:	68 c8 dd 01 c0       	push   0xc001ddc8
c000dae0:	e8 b7 c9 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000dae5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dae8:	e8 24 9d ff ff       	call   c0007811 <free>
c000daed:	83 c4 10             	add    esp,0x10
c000daf0:	31 ff                	xor    edi,edi
c000daf2:	eb 0f                	jmp    c000db03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000daf4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000daf8:	89 30                	mov    DWORD PTR [eax],esi
c000dafa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dafe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db01:	89 30                	mov    DWORD PTR [eax],esi
c000db03:	83 c4 1c             	add    esp,0x1c
c000db06:	89 f8                	mov    eax,edi
c000db08:	5b                   	pop    ebx
c000db09:	5e                   	pop    esi
c000db0a:	5f                   	pop    edi
c000db0b:	5d                   	pop    ebp
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <Video::putTGA(int, int, unsigned char*, int)>:
c000db0e:	55                   	push   ebp
c000db0f:	57                   	push   edi
c000db10:	56                   	push   esi
c000db11:	53                   	push   ebx
c000db12:	83 ec 28             	sub    esp,0x28
c000db15:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db19:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db1d:	50                   	push   eax
c000db1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db22:	50                   	push   eax
c000db23:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db2b:	56                   	push   esi
c000db2c:	e8 75 fe ff ff       	call   c000d9a6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db31:	83 c4 20             	add    esp,0x20
c000db34:	85 c0                	test   eax,eax
c000db36:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db3a:	74 35                	je     c000db71 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db3c:	89 c7                	mov    edi,eax
c000db3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db42:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db46:	39 d8                	cmp    eax,ebx
c000db48:	7e 27                	jle    c000db71 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db4a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db52:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db56:	39 e8                	cmp    eax,ebp
c000db58:	7e 14                	jle    c000db6e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db5a:	8b 06                	mov    eax,DWORD PTR [esi]
c000db5c:	83 c7 04             	add    edi,0x4
c000db5f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db62:	53                   	push   ebx
c000db63:	55                   	push   ebp
c000db64:	45                   	inc    ebp
c000db65:	56                   	push   esi
c000db66:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	eb e0                	jmp    c000db4e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db6e:	43                   	inc    ebx
c000db6f:	eb cd                	jmp    c000db3e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db71:	83 c4 1c             	add    esp,0x1c
c000db74:	5b                   	pop    ebx
c000db75:	5e                   	pop    esi
c000db76:	5f                   	pop    edi
c000db77:	5d                   	pop    ebp
c000db78:	c3                   	ret    
c000db79:	66 90                	xchg   ax,ax
c000db7b:	90                   	nop

c000db7c <ACPI::close(int, int, void*)>:
c000db7c:	83 ec 1c             	sub    esp,0x1c
c000db7f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000db87:	74 0b                	je     c000db94 <ACPI::close(int, int, void*)+0x18>
c000db89:	b8 00 00 00 00       	mov    eax,0x0
c000db8e:	e9 9d 00 00 00       	jmp    c000dc30 <ACPI::close(int, int, void*)+0xb4>
c000db93:	90                   	nop
c000db94:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000db99:	75 29                	jne    c000dbc4 <ACPI::close(int, int, void*)+0x48>
c000db9b:	a1 48 2b 02 c0       	mov    eax,ds:0xc0022b48
c000dba0:	85 c0                	test   eax,eax
c000dba2:	74 08                	je     c000dbac <ACPI::close(int, int, void*)+0x30>
c000dba4:	a1 48 2b 02 c0       	mov    eax,ds:0xc0022b48
c000dba9:	ff d0                	call   eax
c000dbab:	90                   	nop
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	68 24 de 01 c0       	push   0xc001de24
c000dbb4:	e8 46 25 00 00       	call   c00100ff <KePanic(char const*)>
c000dbb9:	83 c4 10             	add    esp,0x10
c000dbbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc1:	eb 6d                	jmp    c000dc30 <ACPI::close(int, int, void*)+0xb4>
c000dbc3:	90                   	nop
c000dbc4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dbc9:	75 5d                	jne    c000dc28 <ACPI::close(int, int, void*)+0xac>
c000dbcb:	a1 44 2b 02 c0       	mov    eax,ds:0xc0022b44
c000dbd0:	85 c0                	test   eax,eax
c000dbd2:	74 08                	je     c000dbdc <ACPI::close(int, int, void*)+0x60>
c000dbd4:	a1 44 2b 02 c0       	mov    eax,ds:0xc0022b44
c000dbd9:	ff d0                	call   eax
c000dbdb:	90                   	nop
c000dbdc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dbe8:	25 ff 00 00 00       	and    eax,0xff
c000dbed:	83 e0 02             	and    eax,0x2
c000dbf0:	74 1e                	je     c000dc10 <ACPI::close(int, int, void*)+0x94>
c000dbf2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dbf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbfd:	89 c2                	mov    edx,eax
c000dbff:	ec                   	in     al,dx
c000dc00:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc04:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc0c:	eb d6                	jmp    c000dbe4 <ACPI::close(int, int, void*)+0x68>
c000dc0e:	66 90                	xchg   ax,ax
c000dc10:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc17:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc1c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc24:	ee                   	out    dx,al
c000dc25:	8d 76 00             	lea    esi,[esi+0x0]
c000dc28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc30:	83 c4 1c             	add    esp,0x1c
c000dc33:	c3                   	ret    

c000dc34 <findRSDP()>:
c000dc34:	83 ec 1c             	sub    esp,0x1c
c000dc37:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000dc3c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc42:	83 e0 04             	and    eax,0x4
c000dc45:	84 c0                	test   al,al
c000dc47:	75 07                	jne    c000dc50 <findRSDP()+0x1c>
c000dc49:	b8 00 00 00 00       	mov    eax,0x0
c000dc4e:	eb 70                	jmp    c000dcc0 <findRSDP()+0x8c>
c000dc50:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c000dc55:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc5a:	7f 1c                	jg     c000dc78 <findRSDP()+0x44>
c000dc5c:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000dc61:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc67:	83 e2 fb             	and    edx,0xfffffffb
c000dc6a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc70:	b8 00 00 00 00       	mov    eax,0x0
c000dc75:	eb 49                	jmp    c000dcc0 <findRSDP()+0x8c>
c000dc77:	90                   	nop
c000dc78:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dc80:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dc88:	77 2e                	ja     c000dcb8 <findRSDP()+0x84>
c000dc8a:	83 ec 04             	sub    esp,0x4
c000dc8d:	6a 08                	push   0x8
c000dc8f:	68 bf de 01 c0       	push   0xc001debf
c000dc94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc98:	e8 f3 26 ff ff       	call   c0000390 <memcmp>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	85 c0                	test   eax,eax
c000dca2:	0f 94 c0             	sete   al
c000dca5:	84 c0                	test   al,al
c000dca7:	74 07                	je     c000dcb0 <findRSDP()+0x7c>
c000dca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcad:	eb 11                	jmp    c000dcc0 <findRSDP()+0x8c>
c000dcaf:	90                   	nop
c000dcb0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcb5:	eb c9                	jmp    c000dc80 <findRSDP()+0x4c>
c000dcb7:	90                   	nop
c000dcb8:	b8 00 00 00 00       	mov    eax,0x0
c000dcbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc0:	83 c4 1c             	add    esp,0x1c
c000dcc3:	c3                   	ret    

c000dcc4 <loadACPITables(unsigned char*)>:
c000dcc4:	57                   	push   edi
c000dcc5:	56                   	push   esi
c000dcc6:	53                   	push   ebx
c000dcc7:	83 ec 60             	sub    esp,0x60
c000dcca:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000dccf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcd5:	83 e0 04             	and    eax,0x4
c000dcd8:	84 c0                	test   al,al
c000dcda:	0f 84 3c 02 00 00    	je     c000df1c <loadACPITables(unsigned char*)+0x258>
c000dce0:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000dce5:	84 c0                	test   al,al
c000dce7:	74 77                	je     c000dd60 <loadACPITables(unsigned char*)+0x9c>
c000dce9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dced:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dcf1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dcf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcf8:	83 e8 24             	sub    eax,0x24
c000dcfb:	c1 e8 03             	shr    eax,0x3
c000dcfe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd02:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd10:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd14:	0f 8d b6 00 00 00    	jge    c000ddd0 <loadACPITables(unsigned char*)+0x10c>
c000dd1a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd1e:	83 c0 24             	add    eax,0x24
c000dd21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd25:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd2d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd31:	c1 e0 03             	shl    eax,0x3
c000dd34:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd41:	89 c1                	mov    ecx,eax
c000dd43:	a1 4c 2b 02 c0       	mov    eax,ds:0xc0022b4c
c000dd48:	8d 50 01             	lea    edx,[eax+0x1]
c000dd4b:	89 15 4c 2b 02 c0    	mov    DWORD PTR ds:0xc0022b4c,edx
c000dd51:	89 ca                	mov    edx,ecx
c000dd53:	89 14 c5 64 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd49c],edx
c000dd5a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd5e:	eb ac                	jmp    c000dd0c <loadACPITables(unsigned char*)+0x48>
c000dd60:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd64:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd6f:	83 e8 24             	sub    eax,0x24
c000dd72:	c1 e8 02             	shr    eax,0x2
c000dd75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dd81:	8d 76 00             	lea    esi,[esi+0x0]
c000dd84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd88:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dd8c:	7d 42                	jge    c000ddd0 <loadACPITables(unsigned char*)+0x10c>
c000dd8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd92:	83 c0 24             	add    eax,0x24
c000dd95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dda1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dda5:	c1 e0 02             	shl    eax,0x2
c000dda8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ddac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddb2:	a1 4c 2b 02 c0       	mov    eax,ds:0xc0022b4c
c000ddb7:	8d 50 01             	lea    edx,[eax+0x1]
c000ddba:	89 15 4c 2b 02 c0    	mov    DWORD PTR ds:0xc0022b4c,edx
c000ddc0:	89 ca                	mov    edx,ecx
c000ddc2:	89 14 c5 64 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd49c],edx
c000ddc9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ddcd:	eb b5                	jmp    c000dd84 <loadACPITables(unsigned char*)+0xc0>
c000ddcf:	90                   	nop
c000ddd0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ddd8:	a1 4c 2b 02 c0       	mov    eax,ds:0xc0022b4c
c000dddd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dde1:	0f 8d 39 01 00 00    	jge    c000df20 <loadACPITables(unsigned char*)+0x25c>
c000dde7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ddeb:	8b 04 c5 64 2b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd49c]
c000ddf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddfa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ddfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de02:	25 ff 0f 00 00       	and    eax,0xfff
c000de07:	89 c6                	mov    esi,eax
c000de09:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c000de0f:	83 ec 0c             	sub    esp,0xc
c000de12:	6a 01                	push   0x1
c000de14:	e8 30 b4 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c000de19:	83 c4 10             	add    esp,0x10
c000de1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de26:	83 ec 0c             	sub    esp,0xc
c000de29:	6a 01                	push   0x1
c000de2b:	6a 01                	push   0x1
c000de2d:	50                   	push   eax
c000de2e:	52                   	push   edx
c000de2f:	53                   	push   ebx
c000de30:	e8 a3 bd ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de35:	83 c4 20             	add    esp,0x20
c000de38:	09 f0                	or     eax,esi
c000de3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de3e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de42:	c1 e0 03             	shl    eax,0x3
c000de45:	05 60 2b 02 c0       	add    eax,0xc0022b60
c000de4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de56:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de72:	89 c6                	mov    esi,eax
c000de74:	89 d7                	mov    edi,edx
c000de76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de78:	89 c8                	mov    eax,ecx
c000de7a:	89 fa                	mov    edx,edi
c000de7c:	89 f3                	mov    ebx,esi
c000de7e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000de86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de99:	05 00 10 00 00       	add    eax,0x1000
c000de9e:	c1 e8 0c             	shr    eax,0xc
c000dea1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dea9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb1:	25 ff 0f 00 00       	and    eax,0xfff
c000deb6:	89 c6                	mov    esi,eax
c000deb8:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c000debe:	83 ec 0c             	sub    esp,0xc
c000dec1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dec5:	e8 7f b3 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c000deca:	83 c4 10             	add    esp,0x10
c000decd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ded1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ded7:	83 ec 0c             	sub    esp,0xc
c000deda:	6a 01                	push   0x1
c000dedc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dee0:	50                   	push   eax
c000dee1:	52                   	push   edx
c000dee2:	53                   	push   ebx
c000dee3:	e8 f0 bc ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dee8:	83 c4 20             	add    esp,0x20
c000deeb:	09 f0                	or     eax,esi
c000deed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000def1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	50                   	push   eax
c000def9:	e8 7b b6 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df09:	89 14 c5 64 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd49c],edx
c000df10:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df14:	e9 bf fe ff ff       	jmp    c000ddd8 <loadACPITables(unsigned char*)+0x114>
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	90                   	nop
c000df1d:	8d 76 00             	lea    esi,[esi+0x0]
c000df20:	83 c4 60             	add    esp,0x60
c000df23:	5b                   	pop    ebx
c000df24:	5e                   	pop    esi
c000df25:	5f                   	pop    edi
c000df26:	c3                   	ret    
c000df27:	90                   	nop

c000df28 <findRSDT(unsigned char*)>:
c000df28:	57                   	push   edi
c000df29:	56                   	push   esi
c000df2a:	53                   	push   ebx
c000df2b:	83 ec 50             	sub    esp,0x50
c000df2e:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000df33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df39:	83 e0 04             	and    eax,0x4
c000df3c:	84 c0                	test   al,al
c000df3e:	75 0c                	jne    c000df4c <findRSDT(unsigned char*)+0x24>
c000df40:	b8 00 00 00 00       	mov    eax,0x0
c000df45:	e9 26 01 00 00       	jmp    c000e070 <findRSDT(unsigned char*)+0x148>
c000df4a:	66 90                	xchg   ax,ax
c000df4c:	89 e0                	mov    eax,esp
c000df4e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df5a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df62:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df72:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df76:	89 c6                	mov    esi,eax
c000df78:	89 d7                	mov    edi,edx
c000df7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df7c:	89 c8                	mov    eax,ecx
c000df7e:	89 fa                	mov    edx,edi
c000df80:	89 f3                	mov    ebx,esi
c000df82:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000df86:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df8a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df8e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df92:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000df96:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000df9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfa2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfa6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfb2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfb6:	25 ff 0f 00 00       	and    eax,0xfff
c000dfbb:	89 c6                	mov    esi,eax
c000dfbd:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	6a 02                	push   0x2
c000dfc8:	e8 7c b2 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dfd4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfda:	83 ec 0c             	sub    esp,0xc
c000dfdd:	6a 01                	push   0x1
c000dfdf:	6a 02                	push   0x2
c000dfe1:	50                   	push   eax
c000dfe2:	52                   	push   edx
c000dfe3:	53                   	push   ebx
c000dfe4:	e8 ef bb ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfe9:	83 c4 20             	add    esp,0x20
c000dfec:	09 f0                	or     eax,esi
c000dfee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dff2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dff6:	25 ff 0f 00 00       	and    eax,0xfff
c000dffb:	89 c6                	mov    esi,eax
c000dffd:	8b 1d 50 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020650
c000e003:	83 ec 0c             	sub    esp,0xc
c000e006:	6a 02                	push   0x2
c000e008:	e8 3c b2 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c000e00d:	83 c4 10             	add    esp,0x10
c000e010:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e014:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	6a 01                	push   0x1
c000e01f:	6a 02                	push   0x2
c000e021:	50                   	push   eax
c000e022:	52                   	push   edx
c000e023:	53                   	push   ebx
c000e024:	e8 af bb ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e029:	83 c4 20             	add    esp,0x20
c000e02c:	09 f0                	or     eax,esi
c000e02e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e032:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e037:	75 13                	jne    c000e04c <findRSDT(unsigned char*)+0x124>
c000e039:	c6 05 60 2d 02 c0 00 	mov    BYTE PTR ds:0xc0022d60,0x0
c000e040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e044:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e048:	eb 22                	jmp    c000e06c <findRSDT(unsigned char*)+0x144>
c000e04a:	66 90                	xchg   ax,ax
c000e04c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e051:	75 11                	jne    c000e064 <findRSDT(unsigned char*)+0x13c>
c000e053:	c6 05 60 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d60,0x1
c000e05a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e05e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e062:	eb 08                	jmp    c000e06c <findRSDT(unsigned char*)+0x144>
c000e064:	b8 00 00 00 00       	mov    eax,0x0
c000e069:	eb 05                	jmp    c000e070 <findRSDT(unsigned char*)+0x148>
c000e06b:	90                   	nop
c000e06c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e070:	83 c4 50             	add    esp,0x50
c000e073:	5b                   	pop    ebx
c000e074:	5e                   	pop    esi
c000e075:	5f                   	pop    edi
c000e076:	c3                   	ret    
c000e077:	90                   	nop

c000e078 <findDataTable(unsigned char*, char*)>:
c000e078:	83 ec 1c             	sub    esp,0x1c
c000e07b:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e080:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e086:	83 e0 04             	and    eax,0x4
c000e089:	84 c0                	test   al,al
c000e08b:	75 07                	jne    c000e094 <findDataTable(unsigned char*, char*)+0x1c>
c000e08d:	b8 00 00 00 00       	mov    eax,0x0
c000e092:	eb 58                	jmp    c000e0ec <findDataTable(unsigned char*, char*)+0x74>
c000e094:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e09c:	a1 4c 2b 02 c0       	mov    eax,ds:0xc0022b4c
c000e0a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0a5:	7d 3d                	jge    c000e0e4 <findDataTable(unsigned char*, char*)+0x6c>
c000e0a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0ab:	c1 e0 03             	shl    eax,0x3
c000e0ae:	05 60 2b 02 c0       	add    eax,0xc0022b60
c000e0b3:	83 ec 04             	sub    esp,0x4
c000e0b6:	6a 04                	push   0x4
c000e0b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0bc:	50                   	push   eax
c000e0bd:	e8 ce 22 ff ff       	call   c0000390 <memcmp>
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	85 c0                	test   eax,eax
c000e0c7:	0f 94 c0             	sete   al
c000e0ca:	84 c0                	test   al,al
c000e0cc:	74 0e                	je     c000e0dc <findDataTable(unsigned char*, char*)+0x64>
c000e0ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0d2:	8b 04 c5 64 2b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd49c]
c000e0d9:	eb 11                	jmp    c000e0ec <findDataTable(unsigned char*, char*)+0x74>
c000e0db:	90                   	nop
c000e0dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e0e0:	eb ba                	jmp    c000e09c <findDataTable(unsigned char*, char*)+0x24>
c000e0e2:	66 90                	xchg   ax,ax
c000e0e4:	b8 00 00 00 00       	mov    eax,0x0
c000e0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0ec:	83 c4 1c             	add    esp,0x1c
c000e0ef:	c3                   	ret    

c000e0f0 <scanMADT()>:
c000e0f0:	53                   	push   ebx
c000e0f1:	83 ec 38             	sub    esp,0x38
c000e0f4:	a1 70 05 02 c0       	mov    eax,ds:0xc0020570
c000e0f9:	25 00 04 00 00       	and    eax,0x400
c000e0fe:	74 14                	je     c000e114 <scanMADT()+0x24>
c000e100:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e105:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e10b:	83 e2 fb             	and    edx,0xfffffffb
c000e10e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e114:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e119:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e11f:	83 e0 04             	and    eax,0x4
c000e122:	84 c0                	test   al,al
c000e124:	0f 84 8a 04 00 00    	je     c000e5b4 <scanMADT()+0x4c4>
c000e12a:	e8 05 fb ff ff       	call   c000dc34 <findRSDP()>
c000e12f:	a3 6c 2d 02 c0       	mov    ds:0xc0022d6c,eax
c000e134:	a1 6c 2d 02 c0       	mov    eax,ds:0xc0022d6c
c000e139:	85 c0                	test   eax,eax
c000e13b:	75 1b                	jne    c000e158 <scanMADT()+0x68>
c000e13d:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e142:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e148:	83 e2 fb             	and    edx,0xfffffffb
c000e14b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e151:	e9 66 04 00 00       	jmp    c000e5bc <scanMADT()+0x4cc>
c000e156:	66 90                	xchg   ax,ax
c000e158:	a1 6c 2d 02 c0       	mov    eax,ds:0xc0022d6c
c000e15d:	83 ec 0c             	sub    esp,0xc
c000e160:	50                   	push   eax
c000e161:	e8 c2 fd ff ff       	call   c000df28 <findRSDT(unsigned char*)>
c000e166:	83 c4 10             	add    esp,0x10
c000e169:	a3 68 2d 02 c0       	mov    ds:0xc0022d68,eax
c000e16e:	a1 68 2d 02 c0       	mov    eax,ds:0xc0022d68
c000e173:	85 c0                	test   eax,eax
c000e175:	75 19                	jne    c000e190 <scanMADT()+0xa0>
c000e177:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e17c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e182:	83 e2 fb             	and    edx,0xfffffffb
c000e185:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e18b:	e9 2c 04 00 00       	jmp    c000e5bc <scanMADT()+0x4cc>
c000e190:	a1 68 2d 02 c0       	mov    eax,ds:0xc0022d68
c000e195:	83 ec 0c             	sub    esp,0xc
c000e198:	50                   	push   eax
c000e199:	e8 26 fb ff ff       	call   c000dcc4 <loadACPITables(unsigned char*)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	a1 68 2d 02 c0       	mov    eax,ds:0xc0022d68
c000e1a6:	83 ec 08             	sub    esp,0x8
c000e1a9:	68 c8 de 01 c0       	push   0xc001dec8
c000e1ae:	50                   	push   eax
c000e1af:	e8 c4 fe ff ff       	call   c000e078 <findDataTable(unsigned char*, char*)>
c000e1b4:	83 c4 10             	add    esp,0x10
c000e1b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1bb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1c0:	75 1a                	jne    c000e1dc <scanMADT()+0xec>
c000e1c2:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e1c7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1cd:	83 e2 fe             	and    edx,0xfffffffe
c000e1d0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1d6:	e9 e1 03 00 00       	jmp    c000e5bc <scanMADT()+0x4cc>
c000e1db:	90                   	nop
c000e1dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e1e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1eb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e1ef:	0f 87 c7 03 00 00    	ja     c000e5bc <scanMADT()+0x4cc>
c000e1f5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e1fd:	0f 87 b9 03 00 00    	ja     c000e5bc <scanMADT()+0x4cc>
c000e203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e207:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e20b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e20f:	8d 50 01             	lea    edx,[eax+0x1]
c000e212:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e216:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e21a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e21e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e222:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e226:	8d 50 01             	lea    edx,[eax+0x1]
c000e229:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e22d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e231:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e235:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e239:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e23e:	0f 86 74 03 00 00    	jbe    c000e5b8 <scanMADT()+0x4c8>
c000e244:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e249:	75 5d                	jne    c000e2a8 <scanMADT()+0x1b8>
c000e24b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e24f:	8d 50 01             	lea    edx,[eax+0x1]
c000e252:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e256:	8a 15 60 2f 02 c0    	mov    dl,BYTE PTR ds:0xc0022f60
c000e25c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e262:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e266:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e26a:	88 82 a0 2f 02 c0    	mov    BYTE PTR [edx-0x3ffdd060],al
c000e270:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e274:	8d 42 01             	lea    eax,[edx+0x1]
c000e277:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e27b:	a0 60 2f 02 c0       	mov    al,ds:0xc0022f60
c000e280:	8d 48 01             	lea    ecx,[eax+0x1]
c000e283:	88 0d 60 2f 02 c0    	mov    BYTE PTR ds:0xc0022f60,cl
c000e289:	25 ff 00 00 00       	and    eax,0xff
c000e28e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e292:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e296:	88 90 80 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd080],dl
c000e29c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2a1:	e9 f6 02 00 00       	jmp    c000e59c <scanMADT()+0x4ac>
c000e2a6:	66 90                	xchg   ax,ax
c000e2a8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2ad:	0f 85 29 01 00 00    	jne    c000e3dc <scanMADT()+0x2ec>
c000e2b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2be:	8a 15 20 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e20
c000e2c4:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ce:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2d2:	88 82 40 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd1c0],al
c000e2d8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e2dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2e4:	01 d0                	add    eax,edx
c000e2e6:	83 c0 2c             	add    eax,0x2c
c000e2e9:	8a 00                	mov    al,BYTE PTR [eax]
c000e2eb:	31 d2                	xor    edx,edx
c000e2ed:	88 c2                	mov    dl,al
c000e2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e2fe:	25 ff 00 00 00       	and    eax,0xff
c000e303:	c1 e0 08             	shl    eax,0x8
c000e306:	89 d1                	mov    ecx,edx
c000e308:	09 c1                	or     ecx,eax
c000e30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e30e:	8d 50 02             	lea    edx,[eax+0x2]
c000e311:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e315:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e319:	25 ff 00 00 00       	and    eax,0xff
c000e31e:	c1 e0 10             	shl    eax,0x10
c000e321:	09 c1                	or     ecx,eax
c000e323:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e327:	8d 50 03             	lea    edx,[eax+0x3]
c000e32a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e32e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e332:	25 ff 00 00 00       	and    eax,0xff
c000e337:	c1 e0 18             	shl    eax,0x18
c000e33a:	09 c1                	or     ecx,eax
c000e33c:	89 ca                	mov    edx,ecx
c000e33e:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000e343:	25 ff 00 00 00       	and    eax,0xff
c000e348:	89 14 85 60 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1a0],edx
c000e34f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e354:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e358:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e35c:	01 d0                	add    eax,edx
c000e35e:	83 c0 2c             	add    eax,0x2c
c000e361:	8a 00                	mov    al,BYTE PTR [eax]
c000e363:	31 d2                	xor    edx,edx
c000e365:	88 c2                	mov    dl,al
c000e367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e36e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e372:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e376:	25 ff 00 00 00       	and    eax,0xff
c000e37b:	c1 e0 08             	shl    eax,0x8
c000e37e:	89 d1                	mov    ecx,edx
c000e380:	09 c1                	or     ecx,eax
c000e382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e386:	8d 50 02             	lea    edx,[eax+0x2]
c000e389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e38d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e391:	25 ff 00 00 00       	and    eax,0xff
c000e396:	c1 e0 10             	shl    eax,0x10
c000e399:	09 c1                	or     ecx,eax
c000e39b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e39f:	8d 50 03             	lea    edx,[eax+0x3]
c000e3a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3aa:	25 ff 00 00 00       	and    eax,0xff
c000e3af:	c1 e0 18             	shl    eax,0x18
c000e3b2:	09 c1                	or     ecx,eax
c000e3b4:	89 ca                	mov    edx,ecx
c000e3b6:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000e3bb:	25 ff 00 00 00       	and    eax,0xff
c000e3c0:	89 14 85 e0 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd120],edx
c000e3c7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3cc:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000e3d1:	40                   	inc    eax
c000e3d2:	a2 20 2e 02 c0       	mov    ds:0xc0022e20,al
c000e3d7:	e9 c0 01 00 00       	jmp    c000e59c <scanMADT()+0x4ac>
c000e3dc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e3e1:	0f 85 fd 00 00 00    	jne    c000e4e4 <scanMADT()+0x3f4>
c000e3e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3fa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e3fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e402:	8d 50 01             	lea    edx,[eax+0x1]
c000e405:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e409:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e40d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e411:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e419:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e41d:	01 d0                	add    eax,edx
c000e41f:	83 c0 2c             	add    eax,0x2c
c000e422:	8a 00                	mov    al,BYTE PTR [eax]
c000e424:	31 d2                	xor    edx,edx
c000e426:	88 c2                	mov    dl,al
c000e428:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e42f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e433:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e437:	25 ff 00 00 00       	and    eax,0xff
c000e43c:	c1 e0 08             	shl    eax,0x8
c000e43f:	89 d1                	mov    ecx,edx
c000e441:	09 c1                	or     ecx,eax
c000e443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e447:	8d 50 02             	lea    edx,[eax+0x2]
c000e44a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e44e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e452:	25 ff 00 00 00       	and    eax,0xff
c000e457:	c1 e0 10             	shl    eax,0x10
c000e45a:	09 c1                	or     ecx,eax
c000e45c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e460:	8d 50 03             	lea    edx,[eax+0x3]
c000e463:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e467:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e46b:	25 ff 00 00 00       	and    eax,0xff
c000e470:	c1 e0 18             	shl    eax,0x18
c000e473:	09 c8                	or     eax,ecx
c000e475:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e479:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e47e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e486:	01 d0                	add    eax,edx
c000e488:	83 c0 2c             	add    eax,0x2c
c000e48b:	8a 00                	mov    al,BYTE PTR [eax]
c000e48d:	25 ff 00 00 00       	and    eax,0xff
c000e492:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e496:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e499:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e49d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4a1:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4a7:	c1 e2 08             	shl    edx,0x8
c000e4aa:	09 d0                	or     eax,edx
c000e4ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4b1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4b6:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4ba:	25 ff 00 00 00       	and    eax,0xff
c000e4bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4c3:	88 90 80 f2 01 c0    	mov    BYTE PTR [eax-0x3ffe0d80],dl
c000e4c9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4cd:	31 d2                	xor    edx,edx
c000e4cf:	88 c2                	mov    dl,al
c000e4d1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e4d6:	66 89 84 12 00 2e 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd200],ax
c000e4de:	e9 b9 00 00 00       	jmp    c000e59c <scanMADT()+0x4ac>
c000e4e3:	90                   	nop
c000e4e4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e4e9:	0f 85 a1 00 00 00    	jne    c000e590 <scanMADT()+0x4a0>
c000e4ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e502:	25 ff 00 00 00       	and    eax,0xff
c000e507:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e50b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e50f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e513:	01 d0                	add    eax,edx
c000e515:	83 c0 2c             	add    eax,0x2c
c000e518:	8a 00                	mov    al,BYTE PTR [eax]
c000e51a:	31 d2                	xor    edx,edx
c000e51c:	88 c2                	mov    dl,al
c000e51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e522:	8d 48 01             	lea    ecx,[eax+0x1]
c000e525:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e529:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e52d:	25 ff 00 00 00       	and    eax,0xff
c000e532:	c1 e0 08             	shl    eax,0x8
c000e535:	09 d0                	or     eax,edx
c000e537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e53b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e540:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e544:	8d 50 01             	lea    edx,[eax+0x1]
c000e547:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e54b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e54f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e553:	25 ff 00 00 00       	and    eax,0xff
c000e558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	c1 e0 08             	shl    eax,0x8
c000e563:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e567:	89 c1                	mov    ecx,eax
c000e569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56d:	c1 e0 18             	shl    eax,0x18
c000e570:	89 c3                	mov    ebx,eax
c000e572:	a1 70 2d 02 c0       	mov    eax,ds:0xc0022d70
c000e577:	8d 50 01             	lea    edx,[eax+0x1]
c000e57a:	89 15 70 2d 02 c0    	mov    DWORD PTR ds:0xc0022d70,edx
c000e580:	09 d9                	or     ecx,ebx
c000e582:	89 ca                	mov    edx,ecx
c000e584:	89 14 85 80 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd280],edx
c000e58b:	eb 0f                	jmp    c000e59c <scanMADT()+0x4ac>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e595:	75 05                	jne    c000e59c <scanMADT()+0x4ac>
c000e597:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e59c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5a0:	31 d2                	xor    edx,edx
c000e5a2:	88 c2                	mov    dl,al
c000e5a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5a8:	01 d0                	add    eax,edx
c000e5aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5ae:	e9 31 fc ff ff       	jmp    c000e1e4 <scanMADT()+0xf4>
c000e5b3:	90                   	nop
c000e5b4:	90                   	nop
c000e5b5:	eb 05                	jmp    c000e5bc <scanMADT()+0x4cc>
c000e5b7:	90                   	nop
c000e5b8:	90                   	nop
c000e5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5bc:	83 c4 38             	add    esp,0x38
c000e5bf:	5b                   	pop    ebx
c000e5c0:	c3                   	ret    
c000e5c1:	90                   	nop
c000e5c2:	66 90                	xchg   ax,ax

c000e5c4 <ACPI::ACPI()>:
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	83 ec 08             	sub    esp,0x8
c000e5ce:	68 cd de 01 c0       	push   0xc001decd
c000e5d3:	50                   	push   eax
c000e5d4:	e8 9b d4 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c000e5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e5:	89 10                	mov    DWORD PTR [eax],edx
c000e5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e604:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e60e:	e8 dd fa ff ff       	call   c000e0f0 <scanMADT()>
c000e613:	90                   	nop
c000e614:	83 c4 0c             	add    esp,0xc
c000e617:	c3                   	ret    

c000e618 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e618:	83 ec 2c             	sub    esp,0x2c
c000e61b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e61f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e623:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e627:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e62b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e630:	88 d0                	mov    al,dl
c000e632:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e636:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e63b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e643:	90                   	nop
c000e644:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e648:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e64e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e652:	0f 8d 9c 00 00 00    	jge    c000e6f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e658:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e65c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e660:	83 c2 2a             	add    edx,0x2a
c000e663:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e667:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e66c:	75 7a                	jne    c000e6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e66e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e672:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e676:	83 c2 2a             	add    edx,0x2a
c000e679:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e67d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e681:	75 65                	jne    c000e6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e683:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e688:	74 3a                	je     c000e6c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e68a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e68e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e692:	83 c2 2a             	add    edx,0x2a
c000e695:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e69d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6a0:	39 c2                	cmp    edx,eax
c000e6a2:	74 10                	je     c000e6b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6a4:	83 ec 0c             	sub    esp,0xc
c000e6a7:	68 48 de 01 c0       	push   0xc001de48
c000e6ac:	e8 4e 1a 00 00       	call   c00100ff <KePanic(char const*)>
c000e6b1:	83 c4 10             	add    esp,0x10
c000e6b4:	83 ec 0c             	sub    esp,0xc
c000e6b7:	68 d2 de 01 c0       	push   0xc001ded2
c000e6bc:	e8 3e 1a 00 00       	call   c00100ff <KePanic(char const*)>
c000e6c1:	83 c4 10             	add    esp,0x10
c000e6c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e6c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d0:	83 c2 2a             	add    edx,0x2a
c000e6d3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e6d7:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6d9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6dc:	89 01                	mov    DWORD PTR [ecx],eax
c000e6de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e6e1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e6e6:	66 90                	xchg   ax,ax
c000e6e8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e6ec:	e9 53 ff ff ff       	jmp    c000e644 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e6f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6f4:	90                   	nop
c000e6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6f9:	83 c4 2c             	add    esp,0x2c
c000e6fc:	c2 04 00             	ret    0x4
c000e6ff:	90                   	nop

c000e700 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e700:	83 ec 1c             	sub    esp,0x1c
c000e703:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e707:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e70b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e70f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e714:	88 c8                	mov    al,cl
c000e716:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e71a:	88 d0                	mov    al,dl
c000e71c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e724:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e731:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e735:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e743:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e747:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e74a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e74e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e757:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e75d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e761:	8d 48 01             	lea    ecx,[eax+0x1]
c000e764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e768:	83 c2 2a             	add    edx,0x2a
c000e76b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e773:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e77d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e780:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e784:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e792:	8d 50 01             	lea    edx,[eax+0x1]
c000e795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e799:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e79f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7a9:	3d 00 02 00 00       	cmp    eax,0x200
c000e7ae:	75 10                	jne    c000e7c0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	68 e1 de 01 c0       	push   0xc001dee1
c000e7b8:	e8 42 19 00 00       	call   c00100ff <KePanic(char const*)>
c000e7bd:	83 c4 10             	add    esp,0x10
c000e7c0:	90                   	nop
c000e7c1:	83 c4 1c             	add    esp,0x1c
c000e7c4:	c3                   	ret    
c000e7c5:	90                   	nop
c000e7c6:	66 90                	xchg   ax,ax

c000e7c8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e7c8:	b8 00 00 00 00       	mov    eax,0x0
c000e7cd:	c3                   	ret    
c000e7ce:	66 90                	xchg   ax,ax

c000e7d0 <ACPI::detectPCI()>:
c000e7d0:	53                   	push   ebx
c000e7d1:	83 ec 28             	sub    esp,0x28
c000e7d4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7d9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e7de:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000e7e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7e9:	83 e0 04             	and    eax,0x4
c000e7ec:	84 c0                	test   al,al
c000e7ee:	74 2c                	je     c000e81c <ACPI::detectPCI()+0x4c>
c000e7f0:	a1 68 2d 02 c0       	mov    eax,ds:0xc0022d68
c000e7f5:	83 ec 08             	sub    esp,0x8
c000e7f8:	68 fe de 01 c0       	push   0xc001defe
c000e7fd:	50                   	push   eax
c000e7fe:	e8 75 f8 ff ff       	call   c000e078 <findDataTable(unsigned char*, char*)>
c000e803:	83 c4 10             	add    esp,0x10
c000e806:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e80a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e80f:	74 0b                	je     c000e81c <ACPI::detectPCI()+0x4c>
c000e811:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e816:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e81b:	90                   	nop
c000e81c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e824:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e828:	8a 00                	mov    al,BYTE PTR [eax]
c000e82a:	3c 01                	cmp    al,0x1
c000e82c:	75 0e                	jne    c000e83c <ACPI::detectPCI()+0x6c>
c000e82e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e833:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e838:	eb 2a                	jmp    c000e864 <ACPI::detectPCI()+0x94>
c000e83a:	66 90                	xchg   ax,ax
c000e83c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e840:	8a 00                	mov    al,BYTE PTR [eax]
c000e842:	3c 02                	cmp    al,0x2
c000e844:	75 1e                	jne    c000e864 <ACPI::detectPCI()+0x94>
c000e846:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e84b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e850:	74 12                	je     c000e864 <ACPI::detectPCI()+0x94>
c000e852:	83 ec 0c             	sub    esp,0xc
c000e855:	68 78 de 01 c0       	push   0xc001de78
c000e85a:	e8 a0 18 00 00       	call   c00100ff <KePanic(char const*)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	66 90                	xchg   ax,ax
c000e864:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e868:	83 f0 01             	xor    eax,0x1
c000e86b:	84 c0                	test   al,al
c000e86d:	74 41                	je     c000e8b0 <ACPI::detectPCI()+0xe0>
c000e86f:	e8 bc 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e878:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e87d:	75 0d                	jne    c000e88c <ACPI::detectPCI()+0xbc>
c000e87f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e884:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e889:	eb 25                	jmp    c000e8b0 <ACPI::detectPCI()+0xe0>
c000e88b:	90                   	nop
c000e88c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e891:	75 1d                	jne    c000e8b0 <ACPI::detectPCI()+0xe0>
c000e893:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e898:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e89d:	74 11                	je     c000e8b0 <ACPI::detectPCI()+0xe0>
c000e89f:	83 ec 0c             	sub    esp,0xc
c000e8a2:	68 78 de 01 c0       	push   0xc001de78
c000e8a7:	e8 53 18 00 00       	call   c00100ff <KePanic(char const*)>
c000e8ac:	83 c4 10             	add    esp,0x10
c000e8af:	90                   	nop
c000e8b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8b5:	0f 84 85 00 00 00    	je     c000e940 <ACPI::detectPCI()+0x170>
c000e8bb:	83 ec 0c             	sub    esp,0xc
c000e8be:	68 03 df 01 c0       	push   0xc001df03
c000e8c3:	e8 bf 11 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000e8c8:	83 c4 10             	add    esp,0x10
c000e8cb:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e8d3:	83 ec 0c             	sub    esp,0xc
c000e8d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8da:	e8 22 8f ff ff       	call   c0007801 <malloc>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	89 c3                	mov    ebx,eax
c000e8e4:	83 ec 0c             	sub    esp,0xc
c000e8e7:	53                   	push   ebx
c000e8e8:	e8 c1 96 00 00       	call   c0017fae <PCI::PCI()>
c000e8ed:	83 c4 10             	add    esp,0x10
c000e8f0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e8f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8f8:	83 ec 08             	sub    esp,0x8
c000e8fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8ff:	50                   	push   eax
c000e900:	e8 d7 cf ff ff       	call   c000b8dc <Device::addChild(Device*)>
c000e905:	83 c4 10             	add    esp,0x10
c000e908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e90c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e90e:	83 c0 08             	add    eax,0x8
c000e911:	8b 00                	mov    eax,DWORD PTR [eax]
c000e913:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e918:	74 0a                	je     c000e924 <ACPI::detectPCI()+0x154>
c000e91a:	ba 01 00 00 00       	mov    edx,0x1
c000e91f:	eb 0b                	jmp    c000e92c <ACPI::detectPCI()+0x15c>
c000e921:	8d 76 00             	lea    esi,[esi+0x0]
c000e924:	ba 02 00 00 00       	mov    edx,0x2
c000e929:	8d 76 00             	lea    esi,[esi+0x0]
c000e92c:	6a 00                	push   0x0
c000e92e:	6a 00                	push   0x0
c000e930:	52                   	push   edx
c000e931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e935:	ff d0                	call   eax
c000e937:	83 c4 10             	add    esp,0x10
c000e93a:	e9 91 00 00 00       	jmp    c000e9d0 <ACPI::detectPCI()+0x200>
c000e93f:	90                   	nop
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	68 1b df 01 c0       	push   0xc001df1b
c000e948:	e8 3a 11 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e957:	83 ec 0c             	sub    esp,0xc
c000e95a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e95e:	e8 9e 8e ff ff       	call   c0007801 <malloc>
c000e963:	83 c4 10             	add    esp,0x10
c000e966:	89 c3                	mov    ebx,eax
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	53                   	push   ebx
c000e96c:	e8 69 a1 00 00       	call   c0018ada <IDE::IDE()>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e97c:	83 ec 08             	sub    esp,0x8
c000e97f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e983:	50                   	push   eax
c000e984:	e8 53 cf ff ff       	call   c000b8dc <Device::addChild(Device*)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e990:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e99e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9ba:	83 c0 08             	add    eax,0x8
c000e9bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9bf:	6a 00                	push   0x0
c000e9c1:	6a 00                	push   0x0
c000e9c3:	6a 00                	push   0x0
c000e9c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9c9:	ff d0                	call   eax
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	66 90                	xchg   ax,ax
c000e9d0:	90                   	nop
c000e9d1:	83 c4 28             	add    esp,0x28
c000e9d4:	5b                   	pop    ebx
c000e9d5:	c3                   	ret    
c000e9d6:	66 90                	xchg   ax,ax

c000e9d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e9d8:	83 ec 1c             	sub    esp,0x1c
c000e9db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e9df:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e9e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e9e6:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c000e9ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9f0:	25 ff 00 00 00       	and    eax,0xff
c000e9f5:	83 ec 08             	sub    esp,0x8
c000e9f8:	50                   	push   eax
c000e9f9:	52                   	push   edx
c000e9fa:	e8 ed 84 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c000e9ff:	83 c4 10             	add    esp,0x10
c000ea02:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea06:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c000ea0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea10:	25 ff 00 00 00       	and    eax,0xff
c000ea15:	83 ec 04             	sub    esp,0x4
c000ea18:	6a 01                	push   0x1
c000ea1a:	50                   	push   eax
c000ea1b:	52                   	push   edx
c000ea1c:	e8 e1 85 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea21:	83 c4 10             	add    esp,0x10
c000ea24:	90                   	nop
c000ea25:	83 c4 1c             	add    esp,0x1c
c000ea28:	c3                   	ret    
c000ea29:	90                   	nop
c000ea2a:	66 90                	xchg   ax,ax

c000ea2c <ACPI::sleep()>:
c000ea2c:	83 ec 0c             	sub    esp,0xc
c000ea2f:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c000ea34:	85 c0                	test   eax,eax
c000ea36:	74 08                	je     c000ea40 <ACPI::sleep()+0x14>
c000ea38:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c000ea3d:	ff d0                	call   eax
c000ea3f:	90                   	nop
c000ea40:	90                   	nop
c000ea41:	83 c4 0c             	add    esp,0xc
c000ea44:	c3                   	ret    
c000ea45:	90                   	nop
c000ea46:	66 90                	xchg   ax,ax

c000ea48 <ACPI::open(int, int, void*)>:
c000ea48:	57                   	push   edi
c000ea49:	56                   	push   esi
c000ea4a:	53                   	push   ebx
c000ea4b:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea51:	83 ec 0c             	sub    esp,0xc
c000ea54:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea5b:	e8 70 fd ff ff       	call   c000e7d0 <ACPI::detectPCI()>
c000ea60:	83 c4 10             	add    esp,0x10
c000ea63:	83 ec 0c             	sub    esp,0xc
c000ea66:	68 a0 de 01 c0       	push   0xc001dea0
c000ea6b:	e8 17 10 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000ea70:	83 c4 10             	add    esp,0x10
c000ea73:	83 ec 0c             	sub    esp,0xc
c000ea76:	68 30 df 01 c0       	push   0xc001df30
c000ea7b:	e8 17 34 00 00       	call   c0011e97 <Thr::loadKernelSymbolTable(char const*)>
c000ea80:	83 c4 10             	add    esp,0x10
c000ea83:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ea8b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eaa0:	e8 5c 8d ff ff       	call   c0007801 <malloc>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	89 c3                	mov    ebx,eax
c000eaaa:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c000eaaf:	83 ec 04             	sub    esp,0x4
c000eab2:	50                   	push   eax
c000eab3:	68 4e df 01 c0       	push   0xc001df4e
c000eab8:	53                   	push   ebx
c000eab9:	e8 54 bf ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000eabe:	83 c4 10             	add    esp,0x10
c000eac1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eac8:	83 ec 08             	sub    esp,0x8
c000eacb:	6a 01                	push   0x1
c000eacd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ead4:	e8 f9 bf ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c000ead9:	83 c4 10             	add    esp,0x10
c000eadc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eae3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eaeb:	75 17                	jne    c000eb04 <ACPI::open(int, int, void*)+0xbc>
c000eaed:	83 ec 0c             	sub    esp,0xc
c000eaf0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eaf7:	e8 34 c0 ff ff       	call   c000ab30 <File::close()>
c000eafc:	83 c4 10             	add    esp,0x10
c000eaff:	eb 0b                	jmp    c000eb0c <ACPI::open(int, int, void*)+0xc4>
c000eb01:	8d 76 00             	lea    esi,[esi+0x0]
c000eb04:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb0c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb14:	74 1e                	je     c000eb34 <ACPI::open(int, int, void*)+0xec>
c000eb16:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb1f:	83 c0 08             	add    eax,0x8
c000eb22:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb24:	83 ec 0c             	sub    esp,0xc
c000eb27:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb2e:	ff d0                	call   eax
c000eb30:	83 c4 10             	add    esp,0x10
c000eb33:	90                   	nop
c000eb34:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb3b:	83 f0 01             	xor    eax,0x1
c000eb3e:	84 c0                	test   al,al
c000eb40:	74 42                	je     c000eb84 <ACPI::open(int, int, void*)+0x13c>
c000eb42:	83 ec 0c             	sub    esp,0xc
c000eb45:	68 6c df 01 c0       	push   0xc001df6c
c000eb4a:	e8 38 0f 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 ec 04             	sub    esp,0x4
c000eb55:	6a 0c                	push   0xc
c000eb57:	68 87 df 01 c0       	push   0xc001df87
c000eb5c:	68 98 df 01 c0       	push   0xc001df98
c000eb61:	e8 5c 29 00 00       	call   c00114c2 <Reg::readIntWithDefault(char*, char*, int)>
c000eb66:	83 c4 10             	add    esp,0x10
c000eb69:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb70:	83 ec 0c             	sub    esp,0xc
c000eb73:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb7a:	e8 d4 a8 ff ff       	call   c0009453 <Virt::setupPageSwapping(int)>
c000eb7f:	83 c4 10             	add    esp,0x10
c000eb82:	66 90                	xchg   ax,ax
c000eb84:	83 ec 0c             	sub    esp,0xc
c000eb87:	68 1f d0 01 c0       	push   0xc001d01f
c000eb8c:	e8 f6 0e 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000eb91:	83 c4 10             	add    esp,0x10
c000eb94:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	6a 12                	push   0x12
c000eba0:	50                   	push   eax
c000eba1:	e8 4e d0 ff ff       	call   c000bbf4 <getDevicesOfType(DeviceType)>
c000eba6:	83 c4 0c             	add    esp,0xc
c000eba9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebb6:	50                   	push   eax
c000ebb7:	e8 70 d8 00 00       	call   c001c42c <LinkedList<Device>::isEmpty()>
c000ebbc:	83 c4 10             	add    esp,0x10
c000ebbf:	83 f0 01             	xor    eax,0x1
c000ebc2:	84 c0                	test   al,al
c000ebc4:	0f 84 46 01 00 00    	je     c000ed10 <ACPI::open(int, int, void*)+0x2c8>
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebd4:	50                   	push   eax
c000ebd5:	e8 6e d8 00 00       	call   c001c448 <LinkedList<Device>::getFirstElement()>
c000ebda:	83 c4 10             	add    esp,0x10
c000ebdd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebee:	50                   	push   eax
c000ebef:	e8 5c d8 00 00       	call   c001c450 <LinkedList<Device>::removeFirst()>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ebfe:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec05:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec10:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec16:	ba 09 00 00 00       	mov    edx,0x9
c000ec1b:	fc                   	cld    
c000ec1c:	89 c7                	mov    edi,eax
c000ec1e:	89 de                	mov    esi,ebx
c000ec20:	89 d1                	mov    ecx,edx
c000ec22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec24:	83 ec 08             	sub    esp,0x8
c000ec27:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec2b:	50                   	push   eax
c000ec2c:	83 ec 24             	sub    esp,0x24
c000ec2f:	89 e0                	mov    eax,esp
c000ec31:	89 c3                	mov    ebx,eax
c000ec33:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec37:	ba 09 00 00 00       	mov    edx,0x9
c000ec3c:	89 df                	mov    edi,ebx
c000ec3e:	89 c6                	mov    esi,eax
c000ec40:	89 d1                	mov    ecx,edx
c000ec42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec44:	e8 47 98 00 00       	call   c0018490 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec49:	83 c4 30             	add    esp,0x30
c000ec4c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec53:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec5b:	0f 84 4b ff ff ff    	je     c000ebac <ACPI::open(int, int, void*)+0x164>
c000ec61:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec6c:	83 ec 0c             	sub    esp,0xc
c000ec6f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec76:	e8 86 8b ff ff       	call   c0007801 <malloc>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	89 c3                	mov    ebx,eax
c000ec80:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c000ec85:	83 ec 04             	sub    esp,0x4
c000ec88:	50                   	push   eax
c000ec89:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec90:	53                   	push   ebx
c000ec91:	e8 7c bd ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000ec96:	83 c4 10             	add    esp,0x10
c000ec99:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eca0:	83 ec 0c             	sub    esp,0xc
c000eca3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecaa:	e8 91 c0 ff ff       	call   c000ad40 <File::exists()>
c000ecaf:	83 c4 10             	add    esp,0x10
c000ecb2:	84 c0                	test   al,al
c000ecb4:	74 2a                	je     c000ece0 <ACPI::open(int, int, void*)+0x298>
c000ecb6:	83 ec 08             	sub    esp,0x8
c000ecb9:	6a 01                	push   0x1
c000ecbb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecc2:	e8 47 3c 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	83 ec 08             	sub    esp,0x8
c000eccd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecd4:	50                   	push   eax
c000ecd5:	e8 65 3e 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000ecda:	83 c4 10             	add    esp,0x10
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ece8:	0f 84 be fe ff ff    	je     c000ebac <ACPI::open(int, int, void*)+0x164>
c000ecee:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ecf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecf7:	83 c0 08             	add    eax,0x8
c000ecfa:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed06:	ff d0                	call   eax
c000ed08:	83 c4 10             	add    esp,0x10
c000ed0b:	e9 9c fe ff ff       	jmp    c000ebac <ACPI::open(int, int, void*)+0x164>
c000ed10:	83 ec 0c             	sub    esp,0xc
c000ed13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed1a:	50                   	push   eax
c000ed1b:	e8 08 d7 00 00       	call   c001c428 <LinkedList<Device>::~LinkedList()>
c000ed20:	83 c4 10             	add    esp,0x10
c000ed23:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000ed29:	83 ec 08             	sub    esp,0x8
c000ed2c:	6a 01                	push   0x1
c000ed2e:	68 9f df 01 c0       	push   0xc001df9f
c000ed33:	e8 d6 3b 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000ed38:	83 c4 10             	add    esp,0x10
c000ed3b:	83 ec 08             	sub    esp,0x8
c000ed3e:	53                   	push   ebx
c000ed3f:	50                   	push   eax
c000ed40:	e8 fa 3d 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000ed45:	83 c4 10             	add    esp,0x10
c000ed48:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000ed4d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed53:	83 e0 04             	and    eax,0x4
c000ed56:	84 c0                	test   al,al
c000ed58:	0f 84 16 01 00 00    	je     c000ee74 <ACPI::open(int, int, void*)+0x42c>
c000ed5e:	83 ec 0c             	sub    esp,0xc
c000ed61:	68 bc df 01 c0       	push   0xc001dfbc
c000ed66:	e8 1c 0d 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000ed6b:	83 c4 10             	add    esp,0x10
c000ed6e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed79:	83 ec 0c             	sub    esp,0xc
c000ed7c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ed83:	e8 79 8a ff ff       	call   c0007801 <malloc>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	89 c3                	mov    ebx,eax
c000ed8d:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c000ed92:	83 ec 04             	sub    esp,0x4
c000ed95:	50                   	push   eax
c000ed96:	68 d9 df 01 c0       	push   0xc001dfd9
c000ed9b:	53                   	push   ebx
c000ed9c:	e8 71 bc ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edab:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edb3:	74 1b                	je     c000edd0 <ACPI::open(int, int, void*)+0x388>
c000edb5:	83 ec 0c             	sub    esp,0xc
c000edb8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edbf:	e8 7c bf ff ff       	call   c000ad40 <File::exists()>
c000edc4:	83 c4 10             	add    esp,0x10
c000edc7:	84 c0                	test   al,al
c000edc9:	74 05                	je     c000edd0 <ACPI::open(int, int, void*)+0x388>
c000edcb:	b0 01                	mov    al,0x1
c000edcd:	eb 05                	jmp    c000edd4 <ACPI::open(int, int, void*)+0x38c>
c000edcf:	90                   	nop
c000edd0:	b0 00                	mov    al,0x0
c000edd2:	66 90                	xchg   ax,ax
c000edd4:	84 c0                	test   al,al
c000edd6:	74 28                	je     c000ee00 <ACPI::open(int, int, void*)+0x3b8>
c000edd8:	83 ec 08             	sub    esp,0x8
c000eddb:	6a 01                	push   0x1
c000eddd:	68 d9 df 01 c0       	push   0xc001dfd9
c000ede2:	e8 27 3b 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	83 ec 08             	sub    esp,0x8
c000eded:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000edf4:	50                   	push   eax
c000edf5:	e8 45 3d 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c000edfa:	83 c4 10             	add    esp,0x10
c000edfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ee00:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee08:	74 2a                	je     c000ee34 <ACPI::open(int, int, void*)+0x3ec>
c000ee0a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee12:	74 20                	je     c000ee34 <ACPI::open(int, int, void*)+0x3ec>
c000ee14:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee1d:	83 c0 08             	add    eax,0x8
c000ee20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee22:	83 ec 0c             	sub    esp,0xc
c000ee25:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee2c:	ff d0                	call   eax
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	8d 76 00             	lea    esi,[esi+0x0]
c000ee34:	a1 68 2d 02 c0       	mov    eax,ds:0xc0022d68
c000ee39:	83 ec 08             	sub    esp,0x8
c000ee3c:	68 f6 df 01 c0       	push   0xc001dff6
c000ee41:	50                   	push   eax
c000ee42:	e8 31 f2 ff ff       	call   c000e078 <findDataTable(unsigned char*, char*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee51:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee59:	74 19                	je     c000ee74 <ACPI::open(int, int, void*)+0x42c>
c000ee5b:	83 ec 08             	sub    esp,0x8
c000ee5e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee65:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee6c:	e8 67 fb ff ff       	call   c000e9d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee71:	83 c4 10             	add    esp,0x10
c000ee74:	b8 00 00 00 00       	mov    eax,0x0
c000ee79:	81 c4 70 01 00 00    	add    esp,0x170
c000ee7f:	5b                   	pop    ebx
c000ee80:	5e                   	pop    esi
c000ee81:	5f                   	pop    edi
c000ee82:	c3                   	ret    
c000ee83:	90                   	nop

c000ee84 <CPU::close(int, int, void*)>:
c000ee84:	31 c0                	xor    eax,eax
c000ee86:	c3                   	ret    
c000ee87:	90                   	nop

c000ee88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ee88:	60                   	pusha  
c000ee89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee95:	9c                   	pushf  
c000ee96:	fa                   	cli    
c000ee97:	0f 09                	wbinvd 
c000ee99:	0f 30                	wrmsr  
c000ee9b:	9d                   	popf   
c000ee9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eea0:	89 02                	mov    DWORD PTR [edx],eax
c000eea2:	61                   	popa   
c000eea3:	c3                   	ret    

c000eea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eea4:	60                   	pusha  
c000eea5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eea9:	9c                   	pushf  
c000eeaa:	fa                   	cli    
c000eeab:	0f 09                	wbinvd 
c000eead:	31 c0                	xor    eax,eax
c000eeaf:	31 d2                	xor    edx,edx
c000eeb1:	0f 32                	rdmsr  
c000eeb3:	9d                   	popf   
c000eeb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eeb8:	89 02                	mov    DWORD PTR [edx],eax
c000eeba:	61                   	popa   
c000eebb:	c3                   	ret    

c000eebc <CPU::AMD_K6_writeback(int, int, int)>:
c000eebc:	56                   	push   esi
c000eebd:	53                   	push   ebx
c000eebe:	83 ec 10             	sub    esp,0x10
c000eec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000eeca:	75 5d                	jne    c000ef29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eecc:	83 f8 08             	cmp    eax,0x8
c000eecf:	75 09                	jne    c000eeda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000eed1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000eed6:	7e 13                	jle    c000eeeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eed8:	eb 30                	jmp    c000ef0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eeda:	83 f8 06             	cmp    eax,0x6
c000eedd:	7c 4a                	jl     c000ef29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eedf:	83 f8 07             	cmp    eax,0x7
c000eee2:	7e 07                	jle    c000eeeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eee4:	83 f8 09             	cmp    eax,0x9
c000eee7:	74 21                	je     c000ef0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eee9:	eb 3e                	jmp    c000ef29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eeeb:	89 e6                	mov    esi,esp
c000eeed:	8b 1d 7c 05 02 c0    	mov    ebx,DWORD PTR ds:0xc002057c
c000eef3:	56                   	push   esi
c000eef4:	c1 eb 15             	shr    ebx,0x15
c000eef7:	68 82 00 00 c0       	push   0xc0000082
c000eefc:	83 e3 7e             	and    ebx,0x7e
c000eeff:	e8 a0 ff ff ff       	call   c000eea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef04:	56                   	push   esi
c000ef05:	6a 00                	push   0x0
c000ef07:	53                   	push   ebx
c000ef08:	eb 12                	jmp    c000ef1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef0a:	89 e3                	mov    ebx,esp
c000ef0c:	53                   	push   ebx
c000ef0d:	68 82 00 00 c0       	push   0xc0000082
c000ef12:	e8 8d ff ff ff       	call   c000eea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef17:	53                   	push   ebx
c000ef18:	6a 00                	push   0x0
c000ef1a:	6a 00                	push   0x0
c000ef1c:	68 82 00 00 c0       	push   0xc0000082
c000ef21:	e8 62 ff ff ff       	call   c000ee88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef26:	83 c4 18             	add    esp,0x18
c000ef29:	83 c4 10             	add    esp,0x10
c000ef2c:	5b                   	pop    ebx
c000ef2d:	5e                   	pop    esi
c000ef2e:	c3                   	ret    
c000ef2f:	90                   	nop

c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef30:	55                   	push   ebp
c000ef31:	57                   	push   edi
c000ef32:	56                   	push   esi
c000ef33:	53                   	push   ebx
c000ef34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef44:	39 05 90 f2 01 c0    	cmp    DWORD PTR ds:0xc001f290,eax
c000ef4a:	75 23                	jne    c000ef6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef4c:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000ef51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef55:	89 06                	mov    DWORD PTR [esi],eax
c000ef57:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000ef5c:	89 07                	mov    DWORD PTR [edi],eax
c000ef5e:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c000ef63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef66:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c000ef6b:	89 02                	mov    DWORD PTR [edx],eax
c000ef6d:	eb 3f                	jmp    c000efae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef6f:	31 c9                	xor    ecx,ecx
c000ef71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef75:	0f a2                	cpuid  
c000ef77:	89 06                	mov    DWORD PTR [esi],eax
c000ef79:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ef82:	89 10                	mov    DWORD PTR [eax],edx
c000ef84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef88:	a3 90 f2 01 c0       	mov    ds:0xc001f290,eax
c000ef8d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef8f:	a3 cc 2f 02 c0       	mov    ds:0xc0022fcc,eax
c000ef94:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef96:	a3 c8 2f 02 c0       	mov    ds:0xc0022fc8,eax
c000ef9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef9e:	a3 c4 2f 02 c0       	mov    ds:0xc0022fc4,eax
c000efa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efa7:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa9:	a3 c0 2f 02 c0       	mov    ds:0xc0022fc0,eax
c000efae:	5b                   	pop    ebx
c000efaf:	5e                   	pop    esi
c000efb0:	5f                   	pop    edi
c000efb1:	5d                   	pop    ebp
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <CPU::cpuidCheckEDX(unsigned int)>:
c000efb4:	83 ec 10             	sub    esp,0x10
c000efb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efbb:	50                   	push   eax
c000efbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc0:	50                   	push   eax
c000efc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc5:	50                   	push   eax
c000efc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efca:	50                   	push   eax
c000efcb:	6a 01                	push   0x1
c000efcd:	e8 5e ff ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000efda:	0f 95 c0             	setne  al
c000efdd:	83 c4 24             	add    esp,0x24
c000efe0:	c3                   	ret    
c000efe1:	90                   	nop

c000efe2 <CPU::cpuidCheckECX(unsigned int)>:
c000efe2:	83 ec 10             	sub    esp,0x10
c000efe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efe9:	50                   	push   eax
c000efea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efee:	50                   	push   eax
c000efef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff3:	50                   	push   eax
c000eff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff8:	50                   	push   eax
c000eff9:	6a 01                	push   0x1
c000effb:	e8 30 ff ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f004:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f008:	0f 95 c0             	setne  al
c000f00b:	83 c4 24             	add    esp,0x24
c000f00e:	c3                   	ret    
c000f00f:	90                   	nop

c000f010 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f010:	83 ec 10             	sub    esp,0x10
c000f013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f017:	50                   	push   eax
c000f018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01c:	50                   	push   eax
c000f01d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f021:	50                   	push   eax
c000f022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f026:	50                   	push   eax
c000f027:	6a 07                	push   0x7
c000f029:	e8 02 ff ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f032:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f036:	0f 95 c0             	setne  al
c000f039:	83 c4 24             	add    esp,0x24
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f03e:	83 ec 10             	sub    esp,0x10
c000f041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f045:	50                   	push   eax
c000f046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04a:	50                   	push   eax
c000f04b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04f:	50                   	push   eax
c000f050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f054:	50                   	push   eax
c000f055:	6a 07                	push   0x7
c000f057:	e8 d4 fe ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f05c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f064:	0f 95 c0             	setne  al
c000f067:	83 c4 24             	add    esp,0x24
c000f06a:	c3                   	ret    
c000f06b:	90                   	nop

c000f06c <CPU::CPU()>:
c000f06c:	83 ec 0c             	sub    esp,0xc
c000f06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f073:	83 ec 08             	sub    esp,0x8
c000f076:	68 19 e1 01 c0       	push   0xc001e119
c000f07b:	50                   	push   eax
c000f07c:	e8 f3 c9 ff ff       	call   c000ba74 <Device::Device(char const*)>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c000f089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f08d:	89 10                	mov    DWORD PTR [eax],edx
c000f08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f093:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a1:	05 78 01 00 00       	add    eax,0x178
c000f0a6:	83 ec 0c             	sub    esp,0xc
c000f0a9:	50                   	push   eax
c000f0aa:	e8 11 80 ff ff       	call   c00070c0 <GDT::GDT()>
c000f0af:	83 c4 10             	add    esp,0x10
c000f0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b6:	05 7c 09 00 00       	add    eax,0x97c
c000f0bb:	83 ec 0c             	sub    esp,0xc
c000f0be:	50                   	push   eax
c000f0bf:	e8 38 82 ff ff       	call   c00072fc <IDT::IDT()>
c000f0c4:	83 c4 10             	add    esp,0x10
c000f0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cb:	05 7c 11 00 00       	add    eax,0x117c
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	50                   	push   eax
c000f0d4:	e8 b3 9a ff ff       	call   c0008b8c <TSS::TSS()>
c000f0d9:	83 c4 10             	add    esp,0x10
c000f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0eb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f0f5:	90                   	nop
c000f0f6:	83 c4 0c             	add    esp,0xc
c000f0f9:	c3                   	ret    

c000f0fa <CPU::displayFeatures()>:
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <CPU::detectFeatures()>:
c000f0fc:	55                   	push   ebp
c000f0fd:	57                   	push   edi
c000f0fe:	56                   	push   esi
c000f0ff:	53                   	push   ebx
c000f100:	83 ec 30             	sub    esp,0x30
c000f103:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f107:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f111:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f118:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f11e:	6a 0d                	push   0xd
c000f120:	6a 00                	push   0x0
c000f122:	55                   	push   ebp
c000f123:	e8 a8 13 ff ff       	call   c00004d0 <memset>
c000f128:	83 c4 10             	add    esp,0x10
c000f12b:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000f130:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f137:	0f 84 d5 05 00 00    	je     c000f712 <CPU::detectFeatures()+0x616>
c000f13d:	83 ec 0c             	sub    esp,0xc
c000f140:	89 ef                	mov    edi,ebp
c000f142:	6a 10                	push   0x10
c000f144:	e8 6b fe ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f149:	83 e0 01             	and    eax,0x1
c000f14c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f14f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f155:	83 e0 fd             	and    eax,0xfffffffd
c000f158:	09 d0                	or     eax,edx
c000f15a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f160:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f167:	e8 48 fe ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f16c:	83 e0 01             	and    eax,0x1
c000f16f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f176:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f17c:	83 e0 fb             	and    eax,0xfffffffb
c000f17f:	09 d0                	or     eax,edx
c000f181:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f187:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f18e:	e8 21 fe ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f193:	83 e0 01             	and    eax,0x1
c000f196:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f19d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a3:	83 e0 f7             	and    eax,0xfffffff7
c000f1a6:	09 d0                	or     eax,edx
c000f1a8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1ae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1b5:	e8 fa fd ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ba:	83 e0 01             	and    eax,0x1
c000f1bd:	c1 e0 04             	shl    eax,0x4
c000f1c0:	88 c2                	mov    dl,al
c000f1c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1c8:	83 e0 ef             	and    eax,0xffffffef
c000f1cb:	09 d0                	or     eax,edx
c000f1cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1d3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f1da:	e8 d5 fd ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f1df:	83 e0 01             	and    eax,0x1
c000f1e2:	c1 e0 05             	shl    eax,0x5
c000f1e5:	88 c2                	mov    dl,al
c000f1e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1ed:	83 e0 df             	and    eax,0xffffffdf
c000f1f0:	09 d0                	or     eax,edx
c000f1f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1f8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f1ff:	e8 b0 fd ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f204:	83 e0 01             	and    eax,0x1
c000f207:	8d 14 00             	lea    edx,[eax+eax*1]
c000f20a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f210:	83 e0 fd             	and    eax,0xfffffffd
c000f213:	09 d0                	or     eax,edx
c000f215:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f21b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f222:	e8 8d fd ff ff       	call   c000efb4 <CPU::cpuidCheckEDX(unsigned int)>
c000f227:	83 e0 01             	and    eax,0x1
c000f22a:	c1 e0 06             	shl    eax,0x6
c000f22d:	88 c2                	mov    dl,al
c000f22f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f235:	83 e0 bf             	and    eax,0xffffffbf
c000f238:	09 d0                	or     eax,edx
c000f23a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f240:	58                   	pop    eax
c000f241:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f245:	50                   	push   eax
c000f246:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f24a:	50                   	push   eax
c000f24b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f24f:	56                   	push   esi
c000f250:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f254:	50                   	push   eax
c000f255:	6a 00                	push   0x0
c000f257:	e8 d4 fc ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f25c:	b8 04 00 00 00       	mov    eax,0x4
c000f261:	89 c1                	mov    ecx,eax
c000f263:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f265:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f26b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f26f:	89 c1                	mov    ecx,eax
c000f271:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f273:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f279:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f27d:	89 c1                	mov    ecx,eax
c000f27f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f281:	83 c4 18             	add    esp,0x18
c000f284:	68 28 e0 01 c0       	push   0xc001e028
c000f289:	55                   	push   ebp
c000f28a:	e8 51 14 ff ff       	call   c00006e0 <strcmp>
c000f28f:	83 c4 10             	add    esp,0x10
c000f292:	85 c0                	test   eax,eax
c000f294:	75 0f                	jne    c000f2a5 <CPU::detectFeatures()+0x1a9>
c000f296:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2a0:	e9 22 02 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f2a5:	50                   	push   eax
c000f2a6:	50                   	push   eax
c000f2a7:	68 35 e0 01 c0       	push   0xc001e035
c000f2ac:	55                   	push   ebp
c000f2ad:	e8 2e 14 ff ff       	call   c00006e0 <strcmp>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	85 c0                	test   eax,eax
c000f2b7:	74 dd                	je     c000f296 <CPU::detectFeatures()+0x19a>
c000f2b9:	50                   	push   eax
c000f2ba:	50                   	push   eax
c000f2bb:	68 42 e0 01 c0       	push   0xc001e042
c000f2c0:	55                   	push   ebp
c000f2c1:	e8 1a 14 ff ff       	call   c00006e0 <strcmp>
c000f2c6:	83 c4 10             	add    esp,0x10
c000f2c9:	85 c0                	test   eax,eax
c000f2cb:	74 2a                	je     c000f2f7 <CPU::detectFeatures()+0x1fb>
c000f2cd:	50                   	push   eax
c000f2ce:	50                   	push   eax
c000f2cf:	68 4f e0 01 c0       	push   0xc001e04f
c000f2d4:	55                   	push   ebp
c000f2d5:	e8 06 14 ff ff       	call   c00006e0 <strcmp>
c000f2da:	83 c4 10             	add    esp,0x10
c000f2dd:	85 c0                	test   eax,eax
c000f2df:	74 16                	je     c000f2f7 <CPU::detectFeatures()+0x1fb>
c000f2e1:	50                   	push   eax
c000f2e2:	50                   	push   eax
c000f2e3:	68 5c e0 01 c0       	push   0xc001e05c
c000f2e8:	55                   	push   ebp
c000f2e9:	e8 f2 13 ff ff       	call   c00006e0 <strcmp>
c000f2ee:	83 c4 10             	add    esp,0x10
c000f2f1:	85 c0                	test   eax,eax
c000f2f3:	74 48                	je     c000f33d <CPU::detectFeatures()+0x241>
c000f2f5:	eb 0f                	jmp    c000f306 <CPU::detectFeatures()+0x20a>
c000f2f7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f301:	e9 c1 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f306:	50                   	push   eax
c000f307:	50                   	push   eax
c000f308:	68 69 e0 01 c0       	push   0xc001e069
c000f30d:	55                   	push   ebp
c000f30e:	e8 cd 13 ff ff       	call   c00006e0 <strcmp>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	85 c0                	test   eax,eax
c000f318:	74 23                	je     c000f33d <CPU::detectFeatures()+0x241>
c000f31a:	57                   	push   edi
c000f31b:	57                   	push   edi
c000f31c:	68 76 e0 01 c0       	push   0xc001e076
c000f321:	55                   	push   ebp
c000f322:	e8 b9 13 ff ff       	call   c00006e0 <strcmp>
c000f327:	83 c4 10             	add    esp,0x10
c000f32a:	85 c0                	test   eax,eax
c000f32c:	75 1e                	jne    c000f34c <CPU::detectFeatures()+0x250>
c000f32e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f338:	e9 8a 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f33d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f347:	e9 7b 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f34c:	56                   	push   esi
c000f34d:	56                   	push   esi
c000f34e:	68 83 e0 01 c0       	push   0xc001e083
c000f353:	55                   	push   ebp
c000f354:	e8 87 13 ff ff       	call   c00006e0 <strcmp>
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	85 c0                	test   eax,eax
c000f35e:	75 0f                	jne    c000f36f <CPU::detectFeatures()+0x273>
c000f360:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f36a:	e9 58 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f36f:	51                   	push   ecx
c000f370:	51                   	push   ecx
c000f371:	68 42 e0 01 c0       	push   0xc001e042
c000f376:	55                   	push   ebp
c000f377:	e8 64 13 ff ff       	call   c00006e0 <strcmp>
c000f37c:	83 c4 10             	add    esp,0x10
c000f37f:	85 c0                	test   eax,eax
c000f381:	75 0f                	jne    c000f392 <CPU::detectFeatures()+0x296>
c000f383:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f38d:	e9 35 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f392:	52                   	push   edx
c000f393:	52                   	push   edx
c000f394:	68 90 e0 01 c0       	push   0xc001e090
c000f399:	55                   	push   ebp
c000f39a:	e8 41 13 ff ff       	call   c00006e0 <strcmp>
c000f39f:	83 c4 10             	add    esp,0x10
c000f3a2:	85 c0                	test   eax,eax
c000f3a4:	75 0f                	jne    c000f3b5 <CPU::detectFeatures()+0x2b9>
c000f3a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3b0:	e9 12 01 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f3b5:	50                   	push   eax
c000f3b6:	50                   	push   eax
c000f3b7:	68 9d e0 01 c0       	push   0xc001e09d
c000f3bc:	55                   	push   ebp
c000f3bd:	e8 1e 13 ff ff       	call   c00006e0 <strcmp>
c000f3c2:	83 c4 10             	add    esp,0x10
c000f3c5:	85 c0                	test   eax,eax
c000f3c7:	75 0f                	jne    c000f3d8 <CPU::detectFeatures()+0x2dc>
c000f3c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f3d3:	e9 ef 00 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f3d8:	50                   	push   eax
c000f3d9:	50                   	push   eax
c000f3da:	68 aa e0 01 c0       	push   0xc001e0aa
c000f3df:	55                   	push   ebp
c000f3e0:	e8 fb 12 ff ff       	call   c00006e0 <strcmp>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	85 c0                	test   eax,eax
c000f3ea:	75 0f                	jne    c000f3fb <CPU::detectFeatures()+0x2ff>
c000f3ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f3f6:	e9 cc 00 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f3fb:	50                   	push   eax
c000f3fc:	50                   	push   eax
c000f3fd:	68 b7 e0 01 c0       	push   0xc001e0b7
c000f402:	55                   	push   ebp
c000f403:	e8 d8 12 ff ff       	call   c00006e0 <strcmp>
c000f408:	83 c4 10             	add    esp,0x10
c000f40b:	85 c0                	test   eax,eax
c000f40d:	75 0f                	jne    c000f41e <CPU::detectFeatures()+0x322>
c000f40f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f419:	e9 a9 00 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f41e:	50                   	push   eax
c000f41f:	50                   	push   eax
c000f420:	68 c4 e0 01 c0       	push   0xc001e0c4
c000f425:	55                   	push   ebp
c000f426:	e8 b5 12 ff ff       	call   c00006e0 <strcmp>
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	85 c0                	test   eax,eax
c000f430:	75 0f                	jne    c000f441 <CPU::detectFeatures()+0x345>
c000f432:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f43c:	e9 86 00 00 00       	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f441:	50                   	push   eax
c000f442:	50                   	push   eax
c000f443:	68 d1 e0 01 c0       	push   0xc001e0d1
c000f448:	55                   	push   ebp
c000f449:	e8 92 12 ff ff       	call   c00006e0 <strcmp>
c000f44e:	83 c4 10             	add    esp,0x10
c000f451:	85 c0                	test   eax,eax
c000f453:	75 0c                	jne    c000f461 <CPU::detectFeatures()+0x365>
c000f455:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f45f:	eb 66                	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f461:	50                   	push   eax
c000f462:	50                   	push   eax
c000f463:	68 de e0 01 c0       	push   0xc001e0de
c000f468:	55                   	push   ebp
c000f469:	e8 72 12 ff ff       	call   c00006e0 <strcmp>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	85 c0                	test   eax,eax
c000f473:	75 0c                	jne    c000f481 <CPU::detectFeatures()+0x385>
c000f475:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f47f:	eb 46                	jmp    c000f4c7 <CPU::detectFeatures()+0x3cb>
c000f481:	57                   	push   edi
c000f482:	57                   	push   edi
c000f483:	68 eb e0 01 c0       	push   0xc001e0eb
c000f488:	55                   	push   ebp
c000f489:	e8 52 12 ff ff       	call   c00006e0 <strcmp>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	85 c0                	test   eax,eax
c000f493:	74 e0                	je     c000f475 <CPU::detectFeatures()+0x379>
c000f495:	56                   	push   esi
c000f496:	56                   	push   esi
c000f497:	68 f8 e0 01 c0       	push   0xc001e0f8
c000f49c:	55                   	push   ebp
c000f49d:	e8 3e 12 ff ff       	call   c00006e0 <strcmp>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	74 cc                	je     c000f475 <CPU::detectFeatures()+0x379>
c000f4a9:	51                   	push   ecx
c000f4aa:	51                   	push   ecx
c000f4ab:	68 05 e1 01 c0       	push   0xc001e105
c000f4b0:	55                   	push   ebp
c000f4b1:	e8 2a 12 ff ff       	call   c00006e0 <strcmp>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	85 c0                	test   eax,eax
c000f4bb:	74 b8                	je     c000f475 <CPU::detectFeatures()+0x379>
c000f4bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f4c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f4cc:	0f 86 be 00 00 00    	jbe    c000f590 <CPU::detectFeatures()+0x494>
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	68 80 00 00 00       	push   0x80
c000f4da:	e8 31 fb ff ff       	call   c000f010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4df:	83 e0 01             	and    eax,0x1
c000f4e2:	c1 e0 06             	shl    eax,0x6
c000f4e5:	88 c2                	mov    dl,al
c000f4e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4ed:	83 e0 bf             	and    eax,0xffffffbf
c000f4f0:	09 d0                	or     eax,edx
c000f4f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f4ff:	e8 0c fb ff ff       	call   c000f010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f504:	83 e0 01             	and    eax,0x1
c000f507:	c1 e0 04             	shl    eax,0x4
c000f50a:	88 c2                	mov    dl,al
c000f50c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f512:	83 e0 ef             	and    eax,0xffffffef
c000f515:	09 d0                	or     eax,edx
c000f517:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f51d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f524:	e8 e7 fa ff ff       	call   c000f010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f529:	c1 e0 07             	shl    eax,0x7
c000f52c:	88 c2                	mov    dl,al
c000f52e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f534:	83 e0 7f             	and    eax,0x7f
c000f537:	09 d0                	or     eax,edx
c000f539:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f53f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f546:	e8 f3 fa ff ff       	call   c000f03e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f54b:	83 e0 01             	and    eax,0x1
c000f54e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f555:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f55b:	83 e0 f7             	and    eax,0xfffffff7
c000f55e:	09 d0                	or     eax,edx
c000f560:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f566:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f56d:	e8 cc fa ff ff       	call   c000f03e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	83 e0 01             	and    eax,0x1
c000f578:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f57f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f585:	83 e0 fb             	and    eax,0xfffffffb
c000f588:	09 d0                	or     eax,edx
c000f58a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f590:	83 ec 0c             	sub    esp,0xc
c000f593:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f597:	50                   	push   eax
c000f598:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f59c:	50                   	push   eax
c000f59d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5a1:	56                   	push   esi
c000f5a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5a6:	50                   	push   eax
c000f5a7:	6a 01                	push   0x1
c000f5a9:	e8 82 f9 ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5b8:	88 ca                	mov    dl,cl
c000f5ba:	83 e0 f0             	and    eax,0xfffffff0
c000f5bd:	83 e2 0f             	and    edx,0xf
c000f5c0:	09 d0                	or     eax,edx
c000f5c2:	88 ca                	mov    dl,cl
c000f5c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f5ca:	c0 ea 04             	shr    dl,0x4
c000f5cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f5d1:	0f b6 c2             	movzx  eax,dl
c000f5d4:	83 c4 20             	add    esp,0x20
c000f5d7:	c1 e0 06             	shl    eax,0x6
c000f5da:	89 c7                	mov    edi,eax
c000f5dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f5e2:	66 25 3f c0          	and    ax,0xc03f
c000f5e6:	09 f8                	or     eax,edi
c000f5e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f5ef:	89 c8                	mov    eax,ecx
c000f5f1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f5f8:	c1 e8 08             	shr    eax,0x8
c000f5fb:	83 e5 3f             	and    ebp,0x3f
c000f5fe:	83 e0 0f             	and    eax,0xf
c000f601:	89 c7                	mov    edi,eax
c000f603:	c1 e7 06             	shl    edi,0x6
c000f606:	09 ef                	or     edi,ebp
c000f608:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f60f:	89 fa                	mov    edx,edi
c000f611:	83 e5 c0             	and    ebp,0xffffffc0
c000f614:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f61a:	88 c2                	mov    dl,al
c000f61c:	c0 ea 02             	shr    dl,0x2
c000f61f:	89 d7                	mov    edi,edx
c000f621:	09 ef                	or     edi,ebp
c000f623:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f629:	89 fa                	mov    edx,edi
c000f62b:	83 e5 cf             	and    ebp,0xffffffcf
c000f62e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f634:	89 cf                	mov    edi,ecx
c000f636:	c1 ef 0c             	shr    edi,0xc
c000f639:	83 e7 03             	and    edi,0x3
c000f63c:	c1 e7 04             	shl    edi,0x4
c000f63f:	09 ef                	or     edi,ebp
c000f641:	3c 06                	cmp    al,0x6
c000f643:	89 fa                	mov    edx,edi
c000f645:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f64b:	74 04                	je     c000f651 <CPU::detectFeatures()+0x555>
c000f64d:	3c 0f                	cmp    al,0xf
c000f64f:	75 5c                	jne    c000f6ad <CPU::detectFeatures()+0x5b1>
c000f651:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f655:	89 cf                	mov    edi,ecx
c000f657:	c1 ef 10             	shr    edi,0x10
c000f65a:	c1 e7 04             	shl    edi,0x4
c000f65d:	09 fa                	or     edx,edi
c000f65f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f665:	0f b6 d2             	movzx  edx,dl
c000f668:	66 81 e7 3f c0       	and    di,0xc03f
c000f66d:	c1 e2 06             	shl    edx,0x6
c000f670:	09 fa                	or     edx,edi
c000f672:	3c 0f                	cmp    al,0xf
c000f674:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f67b:	75 30                	jne    c000f6ad <CPU::detectFeatures()+0x5b1>
c000f67d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f683:	c1 e9 14             	shr    ecx,0x14
c000f686:	83 e0 3f             	and    eax,0x3f
c000f689:	83 c1 0f             	add    ecx,0xf
c000f68c:	88 ca                	mov    dl,cl
c000f68e:	c0 e9 02             	shr    cl,0x2
c000f691:	c1 e2 06             	shl    edx,0x6
c000f694:	09 d0                	or     eax,edx
c000f696:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f69c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6a2:	83 e0 c0             	and    eax,0xffffffc0
c000f6a5:	09 c1                	or     ecx,eax
c000f6a7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6bb:	50                   	push   eax
c000f6bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6c0:	55                   	push   ebp
c000f6c1:	56                   	push   esi
c000f6c2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f6c6:	57                   	push   edi
c000f6c7:	68 00 00 00 80       	push   0x80000000
c000f6cc:	e8 5f f8 ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6d1:	83 c4 20             	add    esp,0x20
c000f6d4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f6dc:	76 22                	jbe    c000f700 <CPU::detectFeatures()+0x604>
c000f6de:	83 ec 0c             	sub    esp,0xc
c000f6e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6e5:	50                   	push   eax
c000f6e6:	55                   	push   ebp
c000f6e7:	56                   	push   esi
c000f6e8:	57                   	push   edi
c000f6e9:	68 01 00 00 80       	push   0x80000001
c000f6ee:	e8 3d f8 ff ff       	call   c000ef30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f6fd:	83 c4 20             	add    esp,0x20
c000f700:	52                   	push   edx
c000f701:	52                   	push   edx
c000f702:	68 11 e1 01 c0       	push   0xc001e111
c000f707:	53                   	push   ebx
c000f708:	e8 59 c3 ff ff       	call   c000ba66 <Device::setName(char const*)>
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	eb 67                	jmp    c000f779 <CPU::detectFeatures()+0x67d>
c000f712:	50                   	push   eax
c000f713:	50                   	push   eax
c000f714:	68 76 e0 01 c0       	push   0xc001e076
c000f719:	55                   	push   ebp
c000f71a:	e8 e1 0e ff ff       	call   c0000600 <strcpy>
c000f71f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f729:	e8 95 0a ff ff       	call   c00001c3 <is486>
c000f72e:	83 c4 10             	add    esp,0x10
c000f731:	85 c0                	test   eax,eax
c000f733:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f739:	74 1d                	je     c000f758 <CPU::detectFeatures()+0x65c>
c000f73b:	83 c8 07             	or     eax,0x7
c000f73e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f744:	0f 20 c0             	mov    eax,cr0
c000f747:	83 e0 14             	and    eax,0x14
c000f74a:	83 f8 04             	cmp    eax,0x4
c000f74d:	75 0e                	jne    c000f75d <CPU::detectFeatures()+0x661>
c000f74f:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f756:	eb 21                	jmp    c000f779 <CPU::detectFeatures()+0x67d>
c000f758:	83 e0 f8             	and    eax,0xfffffff8
c000f75b:	eb e1                	jmp    c000f73e <CPU::detectFeatures()+0x642>
c000f75d:	e8 3c 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f762:	83 e0 01             	and    eax,0x1
c000f765:	8d 14 00             	lea    edx,[eax+eax*1]
c000f768:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f76e:	83 e0 fd             	and    eax,0xfffffffd
c000f771:	09 d0                	or     eax,edx
c000f773:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f779:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f780:	74 0e                	je     c000f790 <CPU::detectFeatures()+0x694>
c000f782:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000f787:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f78e:	eb 20                	jmp    c000f7b0 <CPU::detectFeatures()+0x6b4>
c000f790:	e8 09 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f795:	83 e0 01             	and    eax,0x1
c000f798:	8d 14 00             	lea    edx,[eax+eax*1]
c000f79b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7a1:	83 e0 fd             	and    eax,0xfffffffd
c000f7a4:	09 d0                	or     eax,edx
c000f7a6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7ac:	a8 02                	test   al,0x2
c000f7ae:	75 d2                	jne    c000f782 <CPU::detectFeatures()+0x686>
c000f7b0:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7b7:	83 c4 2c             	add    esp,0x2c
c000f7ba:	5b                   	pop    ebx
c000f7bb:	5e                   	pop    esi
c000f7bc:	5f                   	pop    edi
c000f7bd:	5d                   	pop    ebp
c000f7be:	c3                   	ret    
c000f7bf:	90                   	nop

c000f7c0 <CPU::setupSMEP()>:
c000f7c0:	0f 20 e0             	mov    eax,cr4
c000f7c3:	0d 00 00 10 00       	or     eax,0x100000
c000f7c8:	0f 22 e0             	mov    cr4,eax
c000f7cb:	c3                   	ret    

c000f7cc <CPU::setupUMIP()>:
c000f7cc:	0f 20 e0             	mov    eax,cr4
c000f7cf:	80 cc 08             	or     ah,0x8
c000f7d2:	0f 22 e0             	mov    cr4,eax
c000f7d5:	c3                   	ret    

c000f7d6 <CPU::setupTSC()>:
c000f7d6:	0f 20 e0             	mov    eax,cr4
c000f7d9:	83 c8 04             	or     eax,0x4
c000f7dc:	0f 22 e0             	mov    cr4,eax
c000f7df:	c3                   	ret    

c000f7e0 <CPU::setupLargePages()>:
c000f7e0:	0f 20 e0             	mov    eax,cr4
c000f7e3:	83 c8 10             	or     eax,0x10
c000f7e6:	0f 22 e0             	mov    cr4,eax
c000f7e9:	c3                   	ret    

c000f7ea <CPU::setupPAT()>:
c000f7ea:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c000f7ef:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f7f6:	74 2c                	je     c000f824 <CPU::setupPAT()+0x3a>
c000f7f8:	53                   	push   ebx
c000f7f9:	83 ec 10             	sub    esp,0x10
c000f7fc:	68 77 02 00 00       	push   0x277
c000f801:	50                   	push   eax
c000f802:	e8 31 76 ff ff       	call   c0006e38 <Computer::rdmsr(unsigned int)>
c000f807:	83 e2 f8             	and    edx,0xfffffff8
c000f80a:	83 ca 01             	or     edx,0x1
c000f80d:	52                   	push   edx
c000f80e:	50                   	push   eax
c000f80f:	68 77 02 00 00       	push   0x277
c000f814:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c000f81a:	e8 45 76 ff ff       	call   c0006e64 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f81f:	83 c4 28             	add    esp,0x28
c000f822:	5b                   	pop    ebx
c000f823:	c3                   	ret    
c000f824:	c3                   	ret    
c000f825:	90                   	nop

c000f826 <CPU::setupMTRR()>:
c000f826:	c3                   	ret    
c000f827:	90                   	nop

c000f828 <CPU::setupGlobalPages()>:
c000f828:	0f 20 e0             	mov    eax,cr4
c000f82b:	0c 80                	or     al,0x80
c000f82d:	0f 22 e0             	mov    cr4,eax
c000f830:	c3                   	ret    
c000f831:	90                   	nop

c000f832 <CPU::allowUsermodeDataAccess()>:
c000f832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f836:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f83d:	74 03                	je     c000f842 <CPU::allowUsermodeDataAccess()+0x10>
c000f83f:	0f 01 cb             	stac   
c000f842:	c3                   	ret    
c000f843:	90                   	nop

c000f844 <CPU::prohibitUsermodeDataAccess()>:
c000f844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f848:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f84f:	74 03                	je     c000f854 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f851:	0f 01 ca             	clac   
c000f854:	c3                   	ret    
c000f855:	90                   	nop

c000f856 <CPU::setupSMAP()>:
c000f856:	0f 20 e0             	mov    eax,cr4
c000f859:	0d 00 00 20 00       	or     eax,0x200000
c000f85e:	0f 22 e0             	mov    cr4,eax
c000f861:	eb e1                	jmp    c000f844 <CPU::prohibitUsermodeDataAccess()>
c000f863:	90                   	nop

c000f864 <CPU::setupFeatures()>:
c000f864:	53                   	push   ebx
c000f865:	83 ec 08             	sub    esp,0x8
c000f868:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f86c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f873:	74 18                	je     c000f88d <CPU::setupFeatures()+0x29>
c000f875:	83 ec 0c             	sub    esp,0xc
c000f878:	68 1d e1 01 c0       	push   0xc001e11d
c000f87d:	e8 1a ac ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000f882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f885:	e8 42 ff ff ff       	call   c000f7cc <CPU::setupUMIP()>
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f894:	74 18                	je     c000f8ae <CPU::setupFeatures()+0x4a>
c000f896:	83 ec 0c             	sub    esp,0xc
c000f899:	68 27 e1 01 c0       	push   0xc001e127
c000f89e:	e8 f9 ab ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000f8a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8a6:	e8 2b ff ff ff       	call   c000f7d6 <CPU::setupTSC()>
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8b5:	74 18                	je     c000f8cf <CPU::setupFeatures()+0x6b>
c000f8b7:	83 ec 0c             	sub    esp,0xc
c000f8ba:	68 30 e1 01 c0       	push   0xc001e130
c000f8bf:	e8 d8 ab ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000f8c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8c7:	e8 14 ff ff ff       	call   c000f7e0 <CPU::setupLargePages()>
c000f8cc:	83 c4 10             	add    esp,0x10
c000f8cf:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f8d6:	74 18                	je     c000f8f0 <CPU::setupFeatures()+0x8c>
c000f8d8:	83 ec 0c             	sub    esp,0xc
c000f8db:	68 39 e1 01 c0       	push   0xc001e139
c000f8e0:	e8 b7 ab ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000f8e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e8:	e8 3b ff ff ff       	call   c000f828 <CPU::setupGlobalPages()>
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f8f7:	74 18                	je     c000f911 <CPU::setupFeatures()+0xad>
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	68 4b e1 01 c0       	push   0xc001e14b
c000f901:	e8 96 ab ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c000f906:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f909:	e8 dc fe ff ff       	call   c000f7ea <CPU::setupPAT()>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f918:	74 11                	je     c000f92b <CPU::setupFeatures()+0xc7>
c000f91a:	c7 44 24 10 54 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e154
c000f922:	83 c4 08             	add    esp,0x8
c000f925:	5b                   	pop    ebx
c000f926:	e9 71 ab ff ff       	jmp    c000a49c <Dbg::kprintf(char const*, ...)>
c000f92b:	83 c4 08             	add    esp,0x8
c000f92e:	5b                   	pop    ebx
c000f92f:	c3                   	ret    

c000f930 <CPU::open(int, int, void*)>:
c000f930:	57                   	push   edi
c000f931:	56                   	push   esi
c000f932:	53                   	push   ebx
c000f933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f937:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f941:	83 ec 0c             	sub    esp,0xc
c000f944:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f94a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f950:	50                   	push   eax
c000f951:	e8 cc 77 ff ff       	call   c0007122 <GDT::setup()>
c000f956:	83 c4 0c             	add    esp,0xc
c000f959:	6a 00                	push   0x0
c000f95b:	68 ef be ad de       	push   0xdeadbeef
c000f960:	57                   	push   edi
c000f961:	e8 6a 92 ff ff       	call   c0008bd0 <TSS::setup(unsigned long, unsigned long)>
c000f966:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f969:	e8 42 92 ff ff       	call   c0008bb0 <TSS::flush()>
c000f96e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f974:	89 04 24             	mov    DWORD PTR [esp],eax
c000f977:	e8 f6 79 ff ff       	call   c0007372 <IDT::setup()>
c000f97c:	b8 00 04 00 00       	mov    eax,0x400
c000f981:	0f 23 f8             	mov    db7,eax
c000f984:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f98e:	e8 4a 81 ff ff       	call   c0007add <Phys::allocatePage()>
c000f993:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f999:	89 30                	mov    DWORD PTR [eax],esi
c000f99b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9a1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9a4:	58                   	pop    eax
c000f9a5:	5a                   	pop    edx
c000f9a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9b0:	e8 05 a2 ff ff       	call   c0009bba <VAS::setCPUSpecific(unsigned long)>
c000f9b5:	c7 04 24 5e e1 01 c0 	mov    DWORD PTR [esp],0xc001e15e
c000f9bc:	e8 c6 00 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000f9c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9c4:	e8 33 f7 ff ff       	call   c000f0fc <CPU::detectFeatures()>
c000f9c9:	c7 04 24 81 e1 01 c0 	mov    DWORD PTR [esp],0xc001e181
c000f9d0:	e8 b2 00 00 00       	call   c000fa87 <KeSetBootMessage(char const*)>
c000f9d5:	e8 32 58 00 00       	call   c001520c <HalInitialise()>
c000f9da:	a1 70 05 02 c0       	mov    eax,ds:0xc0020570
c000f9df:	83 e0 10             	and    eax,0x10
c000f9e2:	83 f8 01             	cmp    eax,0x1
c000f9e5:	19 c0                	sbb    eax,eax
c000f9e7:	83 e0 46             	and    eax,0x46
c000f9ea:	83 c0 1e             	add    eax,0x1e
c000f9ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9f0:	e8 40 d7 ff ff       	call   c000d135 <setupTimer(int)>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000f9fe:	f6 05 70 05 02 c0 20 	test   BYTE PTR ds:0xc0020570,0x20
c000fa05:	74 0c                	je     c000fa13 <CPU::open(int, int, void*)+0xe3>
c000fa07:	83 ec 0c             	sub    esp,0xc
c000fa0a:	53                   	push   ebx
c000fa0b:	e8 54 fe ff ff       	call   c000f864 <CPU::setupFeatures()>
c000fa10:	83 c4 10             	add    esp,0x10
c000fa13:	5b                   	pop    ebx
c000fa14:	31 c0                	xor    eax,eax
c000fa16:	5e                   	pop    esi
c000fa17:	5f                   	pop    edi
c000fa18:	c3                   	ret    

c000fa19 <KeDisplaySplashScreen()>:
c000fa19:	55                   	push   ebp
c000fa1a:	bd 05 00 00 00       	mov    ebp,0x5
c000fa1f:	57                   	push   edi
c000fa20:	bf a0 f2 01 c0       	mov    edi,0xc001f2a0
c000fa25:	56                   	push   esi
c000fa26:	be 0a 00 00 00       	mov    esi,0xa
c000fa2b:	53                   	push   ebx
c000fa2c:	31 db                	xor    ebx,ebx
c000fa2e:	83 ec 0c             	sub    esp,0xc
c000fa31:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa34:	84 c0                	test   al,al
c000fa36:	74 47                	je     c000fa7f <KeDisplaySplashScreen()+0x66>
c000fa38:	80 bb d6 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0d2a],0xdb
c000fa3f:	75 13                	jne    c000fa54 <KeDisplaySplashScreen()+0x3b>
c000fa41:	0f b6 93 d5 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0d2b]
c000fa48:	83 e2 fe             	and    edx,0xfffffffe
c000fa4b:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa51:	75 01                	jne    c000fa54 <KeDisplaySplashScreen()+0x3b>
c000fa53:	46                   	inc    esi
c000fa54:	3c 0d                	cmp    al,0xd
c000fa56:	74 24                	je     c000fa7c <KeDisplaySplashScreen()+0x63>
c000fa58:	3c 0a                	cmp    al,0xa
c000fa5a:	75 0a                	jne    c000fa66 <KeDisplaySplashScreen()+0x4d>
c000fa5c:	45                   	inc    ebp
c000fa5d:	be 0a 00 00 00       	mov    esi,0xa
c000fa62:	31 db                	xor    ebx,ebx
c000fa64:	eb 16                	jmp    c000fa7c <KeDisplaySplashScreen()+0x63>
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa6c:	55                   	push   ebp
c000fa6d:	43                   	inc    ebx
c000fa6e:	52                   	push   edx
c000fa6f:	6a 00                	push   0x0
c000fa71:	6a 0e                	push   0xe
c000fa73:	50                   	push   eax
c000fa74:	e8 f7 63 00 00       	call   c0015e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa79:	83 c4 20             	add    esp,0x20
c000fa7c:	47                   	inc    edi
c000fa7d:	eb b2                	jmp    c000fa31 <KeDisplaySplashScreen()+0x18>
c000fa7f:	83 c4 0c             	add    esp,0xc
c000fa82:	5b                   	pop    ebx
c000fa83:	5e                   	pop    esi
c000fa84:	5f                   	pop    edi
c000fa85:	5d                   	pop    ebp
c000fa86:	c3                   	ret    

c000fa87 <KeSetBootMessage(char const*)>:
c000fa87:	57                   	push   edi
c000fa88:	56                   	push   esi
c000fa89:	53                   	push   ebx
c000fa8a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa90:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa97:	68 9e 00 00 00       	push   0x9e
c000fa9c:	6a 00                	push   0x0
c000fa9e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000faa2:	56                   	push   esi
c000faa3:	e8 28 0a ff ff       	call   c00004d0 <memset>
c000faa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faab:	e8 90 0a ff ff       	call   c0000540 <strlen>
c000fab0:	ba 50 00 00 00       	mov    edx,0x50
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	29 c2                	sub    edx,eax
c000faba:	31 c9                	xor    ecx,ecx
c000fabc:	83 e2 fe             	and    edx,0xfffffffe
c000fabf:	01 f2                	add    edx,esi
c000fac1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fac6:	84 c0                	test   al,al
c000fac8:	74 0a                	je     c000fad4 <KeSetBootMessage(char const*)+0x4d>
c000faca:	80 cc 0f             	or     ah,0xf
c000facd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fad1:	41                   	inc    ecx
c000fad2:	eb ed                	jmp    c000fac1 <KeSetBootMessage(char const*)+0x3a>
c000fad4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fad9:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fade:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fae0:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fae6:	5b                   	pop    ebx
c000fae7:	5e                   	pop    esi
c000fae8:	5f                   	pop    edi
c000fae9:	c3                   	ret    

c000faea <EnvVarContainer::getEnv(char const*)>:
c000faea:	57                   	push   edi
c000faeb:	56                   	push   esi
c000faec:	53                   	push   ebx
c000faed:	31 db                	xor    ebx,ebx
c000faef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000faf3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000faf5:	7e 2b                	jle    c000fb22 <EnvVarContainer::getEnv(char const*)+0x38>
c000faf7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fafe:	50                   	push   eax
c000faff:	50                   	push   eax
c000fb00:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb03:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb0a:	e8 d1 0b ff ff       	call   c00006e0 <strcmp>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	85 c0                	test   eax,eax
c000fb14:	75 09                	jne    c000fb1f <EnvVarContainer::getEnv(char const*)+0x35>
c000fb16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb19:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb1d:	eb 05                	jmp    c000fb24 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb1f:	43                   	inc    ebx
c000fb20:	eb d1                	jmp    c000faf3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb22:	31 c0                	xor    eax,eax
c000fb24:	5b                   	pop    ebx
c000fb25:	5e                   	pop    esi
c000fb26:	5f                   	pop    edi
c000fb27:	c3                   	ret    

c000fb28 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb28:	55                   	push   ebp
c000fb29:	57                   	push   edi
c000fb2a:	56                   	push   esi
c000fb2b:	53                   	push   ebx
c000fb2c:	83 ec 28             	sub    esp,0x28
c000fb2f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb33:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb3b:	56                   	push   esi
c000fb3c:	e8 ff 09 ff ff       	call   c0000540 <strlen>
c000fb41:	40                   	inc    eax
c000fb42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb45:	e8 b7 7c ff ff       	call   c0007801 <malloc>
c000fb4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb51:	e8 ea 09 ff ff       	call   c0000540 <strlen>
c000fb56:	40                   	inc    eax
c000fb57:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5a:	e8 a2 7c ff ff       	call   c0007801 <malloc>
c000fb5f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb66:	e8 d5 09 ff ff       	call   c0000540 <strlen>
c000fb6b:	83 c4 0c             	add    esp,0xc
c000fb6e:	40                   	inc    eax
c000fb6f:	50                   	push   eax
c000fb70:	6a 00                	push   0x0
c000fb72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb76:	e8 55 09 ff ff       	call   c00004d0 <memset>
c000fb7b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb7e:	e8 bd 09 ff ff       	call   c0000540 <strlen>
c000fb83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb87:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb8f:	89 de                	mov    esi,ebx
c000fb91:	e8 aa 09 ff ff       	call   c0000540 <strlen>
c000fb96:	83 c4 0c             	add    esp,0xc
c000fb99:	40                   	inc    eax
c000fb9a:	50                   	push   eax
c000fb9b:	6a 00                	push   0x0
c000fb9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fba1:	e8 2a 09 ff ff       	call   c00004d0 <memset>
c000fba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba9:	e8 92 09 ff ff       	call   c0000540 <strlen>
c000fbae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbb2:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbba:	40                   	inc    eax
c000fbbb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbbe:	c1 e0 03             	shl    eax,0x3
c000fbc1:	5a                   	pop    edx
c000fbc2:	59                   	pop    ecx
c000fbc3:	50                   	push   eax
c000fbc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fbc7:	e8 21 7c ff ff       	call   c00077ed <realloc>
c000fbcc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fbd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fbd3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fbd6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fbda:	b9 08 00 00 00       	mov    ecx,0x8
c000fbdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe1:	83 c4 2c             	add    esp,0x2c
c000fbe4:	5b                   	pop    ebx
c000fbe5:	5e                   	pop    esi
c000fbe6:	5f                   	pop    edi
c000fbe7:	5d                   	pop    ebp
c000fbe8:	c3                   	ret    
c000fbe9:	90                   	nop

c000fbea <EnvVarContainer::deleteEnv(char const*)>:
c000fbea:	c3                   	ret    
c000fbeb:	90                   	nop

c000fbec <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fbec:	55                   	push   ebp
c000fbed:	57                   	push   edi
c000fbee:	56                   	push   esi
c000fbef:	53                   	push   ebx
c000fbf0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fbf6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fbfd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc04:	68 14 01 00 00       	push   0x114
c000fc09:	e8 f3 7b ff ff       	call   c0007801 <malloc>
c000fc0e:	83 c4 0c             	add    esp,0xc
c000fc11:	89 c3                	mov    ebx,eax
c000fc13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc16:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc1d:	50                   	push   eax
c000fc1e:	e8 ef ad ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c000fc23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc26:	e8 15 b1 ff ff       	call   c000ad40 <File::exists()>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	84 c0                	test   al,al
c000fc30:	75 31                	jne    c000fc63 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc32:	50                   	push   eax
c000fc33:	50                   	push   eax
c000fc34:	6a 12                	push   0x12
c000fc36:	53                   	push   ebx
c000fc37:	e8 96 ae ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c000fc3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc3e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc41:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc44:	e8 f7 08 ff ff       	call   c0000540 <strlen>
c000fc49:	5a                   	pop    edx
c000fc4a:	31 d2                	xor    edx,edx
c000fc4c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc50:	51                   	push   ecx
c000fc51:	56                   	push   esi
c000fc52:	52                   	push   edx
c000fc53:	50                   	push   eax
c000fc54:	53                   	push   ebx
c000fc55:	ff d7                	call   edi
c000fc57:	83 c4 14             	add    esp,0x14
c000fc5a:	53                   	push   ebx
c000fc5b:	e8 d0 ae ff ff       	call   c000ab30 <File::close()>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	56                   	push   esi
c000fc64:	31 f6                	xor    esi,esi
c000fc66:	68 00 01 00 00       	push   0x100
c000fc6b:	6a 00                	push   0x0
c000fc6d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc71:	50                   	push   eax
c000fc72:	e8 59 08 ff ff       	call   c00004d0 <memset>
c000fc77:	5f                   	pop    edi
c000fc78:	58                   	pop    eax
c000fc79:	6a 01                	push   0x1
c000fc7b:	53                   	push   ebx
c000fc7c:	e8 51 ae ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc91:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc95:	51                   	push   ecx
c000fc96:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fc9a:	52                   	push   edx
c000fc9b:	6a 00                	push   0x0
c000fc9d:	6a 01                	push   0x1
c000fc9f:	53                   	push   ebx
c000fca0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fca3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fca7:	83 c4 20             	add    esp,0x20
c000fcaa:	3c 0d                	cmp    al,0xd
c000fcac:	0f 84 09 01 00 00    	je     c000fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcb7:	0f 84 ef 00 00 00    	je     c000fdac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcbd:	3c 0a                	cmp    al,0xa
c000fcbf:	74 13                	je     c000fcd4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcc1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fcc6:	74 0c                	je     c000fcd4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcc8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fcce:	0f 8e d8 00 00 00    	jle    c000fdac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcd8:	83 ec 0c             	sub    esp,0xc
c000fcdb:	8d 78 01             	lea    edi,[eax+0x1]
c000fcde:	57                   	push   edi
c000fcdf:	e8 1d 7b ff ff       	call   c0007801 <malloc>
c000fce4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fce8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcec:	8d 56 04             	lea    edx,[esi+0x4]
c000fcef:	89 14 24             	mov    DWORD PTR [esp],edx
c000fcf2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcf6:	e8 06 7b ff ff       	call   c0007801 <malloc>
c000fcfb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fcff:	83 c4 0c             	add    esp,0xc
c000fd02:	57                   	push   edi
c000fd03:	6a 00                	push   0x0
c000fd05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd09:	e8 c2 07 ff ff       	call   c00004d0 <memset>
c000fd0e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd16:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd1c:	83 c4 0c             	add    esp,0xc
c000fd1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd23:	52                   	push   edx
c000fd24:	6a 00                	push   0x0
c000fd26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd2a:	e8 a1 07 ff ff       	call   c00004d0 <memset>
c000fd2f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd33:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd37:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd3a:	e8 01 08 ff ff       	call   c0000540 <strlen>
c000fd3f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd43:	89 c1                	mov    ecx,eax
c000fd45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd4a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd4d:	40                   	inc    eax
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd54:	85 d2                	test   edx,edx
c000fd56:	75 0c                	jne    c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	6a 08                	push   0x8
c000fd5d:	e8 9f 7a ff ff       	call   c0007801 <malloc>
c000fd62:	eb 0c                	jmp    c000fd70 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd64:	c1 e0 03             	shl    eax,0x3
c000fd67:	51                   	push   ecx
c000fd68:	51                   	push   ecx
c000fd69:	50                   	push   eax
c000fd6a:	52                   	push   edx
c000fd6b:	e8 7d 7a ff ff       	call   c00077ed <realloc>
c000fd70:	83 c4 10             	add    esp,0x10
c000fd73:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd76:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd79:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fd7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd80:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd84:	b9 08 00 00 00       	mov    ecx,0x8
c000fd89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8b:	31 f6                	xor    esi,esi
c000fd8d:	50                   	push   eax
c000fd8e:	68 00 01 00 00       	push   0x100
c000fd93:	6a 00                	push   0x0
c000fd95:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd99:	50                   	push   eax
c000fd9a:	e8 31 07 ff ff       	call   c00004d0 <memset>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdaa:	eb 0f                	jmp    c000fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdac:	3c 3d                	cmp    al,0x3d
c000fdae:	74 07                	je     c000fdb7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdb0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdb4:	46                   	inc    esi
c000fdb5:	eb 04                	jmp    c000fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdb7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdc0:	0f 85 c6 fe ff ff    	jne    c000fc8c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fdc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fdcc:	5b                   	pop    ebx
c000fdcd:	5e                   	pop    esi
c000fdce:	5f                   	pop    edi
c000fdcf:	5d                   	pop    ebp
c000fdd0:	c3                   	ret    
c000fdd1:	90                   	nop

c000fdd2 <EnvVarContainer::__loadSystem()>:
c000fdd2:	83 ec 10             	sub    esp,0x10
c000fdd5:	68 00 f4 01 c0       	push   0xc001f400
c000fdda:	68 c4 e1 01 c0       	push   0xc001e1c4
c000fddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde3:	e8 04 fe ff ff       	call   c000fbec <EnvVarContainer::loadFrom(char const*, char const*)>
c000fde8:	83 c4 1c             	add    esp,0x1c
c000fdeb:	c3                   	ret    

c000fdec <EnvVarContainer::__loadUser()>:
c000fdec:	c3                   	ret    
c000fded:	90                   	nop

c000fdee <EnvVarContainer::EnvVarContainer(Process*)>:
c000fdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe0e:	90                   	nop
c000fe0f:	c3                   	ret    

c000fe10 <EnvVarContainer::~EnvVarContainer()>:
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe1a:	85 c0                	test   eax,eax
c000fe1c:	74 1d                	je     c000fe3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe24:	85 c0                	test   eax,eax
c000fe26:	74 13                	je     c000fe3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2f:	83 ec 0c             	sub    esp,0xc
c000fe32:	50                   	push   eax
c000fe33:	e8 d9 79 ff ff       	call   c0007811 <free>
c000fe38:	83 c4 10             	add    esp,0x10
c000fe3b:	90                   	nop
c000fe3c:	83 c4 0c             	add    esp,0xc
c000fe3f:	c3                   	ret    

c000fe40 <Krnl::getEnv(Process*, char const*)>:
c000fe40:	53                   	push   ebx
c000fe41:	83 ec 08             	sub    esp,0x8
c000fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe4c:	39 05 30 38 02 c0    	cmp    DWORD PTR ds:0xc0023830,eax
c000fe52:	74 04                	je     c000fe58 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe54:	85 c0                	test   eax,eax
c000fe56:	75 0b                	jne    c000fe63 <Krnl::getEnv(Process*, char const*)+0x23>
c000fe58:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c000fe5d:	85 c0                	test   eax,eax
c000fe5f:	75 19                	jne    c000fe7a <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe61:	eb 27                	jmp    c000fe8a <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe63:	52                   	push   edx
c000fe64:	52                   	push   edx
c000fe65:	53                   	push   ebx
c000fe66:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe6c:	e8 79 fc ff ff       	call   c000faea <EnvVarContainer::getEnv(char const*)>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	85 c0                	test   eax,eax
c000fe76:	75 28                	jne    c000fea0 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe78:	eb de                	jmp    c000fe58 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe7a:	52                   	push   edx
c000fe7b:	52                   	push   edx
c000fe7c:	53                   	push   ebx
c000fe7d:	50                   	push   eax
c000fe7e:	e8 67 fc ff ff       	call   c000faea <EnvVarContainer::getEnv(char const*)>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	85 c0                	test   eax,eax
c000fe88:	75 16                	jne    c000fea0 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe8e:	a1 d4 2f 02 c0       	mov    eax,ds:0xc0022fd4
c000fe93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe97:	83 c4 08             	add    esp,0x8
c000fe9a:	5b                   	pop    ebx
c000fe9b:	e9 4a fc ff ff       	jmp    c000faea <EnvVarContainer::getEnv(char const*)>
c000fea0:	83 c4 08             	add    esp,0x8
c000fea3:	5b                   	pop    ebx
c000fea4:	c3                   	ret    

c000fea5 <Krnl::setEnvSystem(char const*, char const*)>:
c000fea5:	83 ec 10             	sub    esp,0x10
c000fea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb0:	ff 35 d4 2f 02 c0    	push   DWORD PTR ds:0xc0022fd4
c000feb6:	e8 6d fc ff ff       	call   c000fb28 <EnvVarContainer::setEnv(char const*, char const*)>
c000febb:	83 c4 1c             	add    esp,0x1c
c000febe:	c3                   	ret    

c000febf <Krnl::setEnvUser(char const*, char const*)>:
c000febf:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c000fec4:	85 c0                	test   eax,eax
c000fec6:	74 15                	je     c000fedd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000fec8:	83 ec 10             	sub    esp,0x10
c000fecb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fecf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed3:	50                   	push   eax
c000fed4:	e8 4f fc ff ff       	call   c000fb28 <EnvVarContainer::setEnv(char const*, char const*)>
c000fed9:	83 c4 1c             	add    esp,0x1c
c000fedc:	c3                   	ret    
c000fedd:	c3                   	ret    

c000fede <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000fede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fee2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000fee8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000feec:	e9 37 fc ff ff       	jmp    c000fb28 <EnvVarContainer::setEnv(char const*, char const*)>

c000fef1 <Krnl::deleteEnvSystem(char const*)>:
c000fef1:	c3                   	ret    

c000fef2 <Krnl::deleteEnvUser(char const*)>:
c000fef2:	c3                   	ret    

c000fef3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fef3:	c3                   	ret    

c000fef4 <Krnl::newProcessEnv(Process*)>:
c000fef4:	83 ec 28             	sub    esp,0x28
c000fef7:	6a 0c                	push   0xc
c000fef9:	e8 03 79 ff ff       	call   c0007801 <malloc>
c000fefe:	5a                   	pop    edx
c000feff:	59                   	pop    ecx
c000ff00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff04:	50                   	push   eax
c000ff05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff09:	e8 e0 fe ff ff       	call   c000fdee <EnvVarContainer::EnvVarContainer(Process*)>
c000ff0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff12:	83 c4 2c             	add    esp,0x2c
c000ff15:	c3                   	ret    

c000ff16 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff16:	57                   	push   edi
c000ff17:	56                   	push   esi
c000ff18:	53                   	push   ebx
c000ff19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff26:	6a 0c                	push   0xc
c000ff28:	e8 d4 78 ff ff       	call   c0007801 <malloc>
c000ff2d:	89 c3                	mov    ebx,eax
c000ff2f:	58                   	pop    eax
c000ff30:	5a                   	pop    edx
c000ff31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff35:	53                   	push   ebx
c000ff36:	e8 b3 fe ff ff       	call   c000fdee <EnvVarContainer::EnvVarContainer(Process*)>
c000ff3b:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff3d:	89 03                	mov    DWORD PTR [ebx],eax
c000ff3f:	c1 e0 03             	shl    eax,0x3
c000ff42:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff45:	e8 b7 78 ff ff       	call   c0007801 <malloc>
c000ff4a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff4f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff52:	c1 e1 03             	shl    ecx,0x3
c000ff55:	89 c7                	mov    edi,eax
c000ff57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff59:	83 c4 10             	add    esp,0x10
c000ff5c:	89 d8                	mov    eax,ebx
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	5f                   	pop    edi
c000ff61:	c3                   	ret    

c000ff62 <Krnl::loadSystemEnv()>:
c000ff62:	53                   	push   ebx
c000ff63:	83 ec 14             	sub    esp,0x14
c000ff66:	6a 0c                	push   0xc
c000ff68:	e8 94 78 ff ff       	call   c0007801 <malloc>
c000ff6d:	89 c3                	mov    ebx,eax
c000ff6f:	58                   	pop    eax
c000ff70:	5a                   	pop    edx
c000ff71:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c000ff77:	53                   	push   ebx
c000ff78:	e8 71 fe ff ff       	call   c000fdee <EnvVarContainer::EnvVarContainer(Process*)>
c000ff7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff80:	89 1d d4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fd4,ebx
c000ff86:	e8 47 fe ff ff       	call   c000fdd2 <EnvVarContainer::__loadSystem()>
c000ff8b:	83 c4 18             	add    esp,0x18
c000ff8e:	5b                   	pop    ebx
c000ff8f:	c3                   	ret    

c000ff90 <Krnl::loadUserEnv()>:
c000ff90:	53                   	push   ebx
c000ff91:	83 ec 14             	sub    esp,0x14
c000ff94:	6a 0c                	push   0xc
c000ff96:	e8 66 78 ff ff       	call   c0007801 <malloc>
c000ff9b:	89 c3                	mov    ebx,eax
c000ff9d:	58                   	pop    eax
c000ff9e:	5a                   	pop    edx
c000ff9f:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c000ffa5:	53                   	push   ebx
c000ffa6:	e8 43 fe ff ff       	call   c000fdee <EnvVarContainer::EnvVarContainer(Process*)>
c000ffab:	89 1d d0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fd0,ebx
c000ffb1:	83 c4 18             	add    esp,0x18
c000ffb4:	5b                   	pop    ebx
c000ffb5:	c3                   	ret    

c000ffb6 <Krnl::flushEnv()>:
c000ffb6:	c3                   	ret    

c000ffb7 <Krnl::getProcessTotalEnvCount(Process*)>:
c000ffb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffbb:	8b 15 d0 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fd0
c000ffc1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffc7:	a1 d4 2f 02 c0       	mov    eax,ds:0xc0022fd4
c000ffcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffce:	03 01                	add    eax,DWORD PTR [ecx]
c000ffd0:	85 d2                	test   edx,edx
c000ffd2:	74 02                	je     c000ffd6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000ffd4:	03 02                	add    eax,DWORD PTR [edx]
c000ffd6:	c3                   	ret    

c000ffd7 <Krnl::getProcessEnvPair(Process*, int)>:
c000ffd7:	57                   	push   edi
c000ffd8:	56                   	push   esi
c000ffd9:	8b 35 d0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fd0
c000ffdf:	53                   	push   ebx
c000ffe0:	85 f6                	test   esi,esi
c000ffe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffe6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffea:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000fff0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fff4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fff6:	75 16                	jne    c001000e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000fff8:	39 c2                	cmp    edx,eax
c000fffa:	7c 16                	jl     c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000fffc:	8b 0d d4 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fd4
c0010002:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010004:	01 c6                	add    esi,eax
c0010006:	39 d6                	cmp    esi,edx
c0010008:	7e 3c                	jle    c0010046 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001000a:	29 c2                	sub    edx,eax
c001000c:	eb 04                	jmp    c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001000e:	39 c2                	cmp    edx,eax
c0010010:	7d 05                	jge    c0010017 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010012:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010015:	eb 20                	jmp    c0010037 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010017:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010019:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001001c:	39 d1                	cmp    ecx,edx
c001001e:	7e 04                	jle    c0010024 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010020:	29 c2                	sub    edx,eax
c0010022:	eb 10                	jmp    c0010034 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010024:	8b 35 d4 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fd4
c001002a:	03 0e                	add    ecx,DWORD PTR [esi]
c001002c:	39 d1                	cmp    ecx,edx
c001002e:	7e 16                	jle    c0010046 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010030:	29 c2                	sub    edx,eax
c0010032:	29 fa                	sub    edx,edi
c0010034:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010037:	8d 14 d0             	lea    edx,[eax+edx*8]
c001003a:	8b 02                	mov    eax,DWORD PTR [edx]
c001003c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001003f:	89 03                	mov    DWORD PTR [ebx],eax
c0010041:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010044:	eb 1d                	jmp    c0010063 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010046:	83 ec 0c             	sub    esp,0xc
c0010049:	68 e6 e1 01 c0       	push   0xc001e1e6
c001004e:	e8 ac 00 00 00       	call   c00100ff <KePanic(char const*)>
c0010053:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010059:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	89 d8                	mov    eax,ebx
c0010065:	5b                   	pop    ebx
c0010066:	5e                   	pop    esi
c0010067:	5f                   	pop    edi
c0010068:	c2 04 00             	ret    0x4

c001006b <CPU::current()>:
c001006b:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0010070:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010076:	c3                   	ret    

c0010077 <operator new(unsigned long)>:
c0010077:	e9 85 77 ff ff       	jmp    c0007801 <malloc>

c001007c <operator delete(void*)>:
c001007c:	e9 a0 77 ff ff       	jmp    c0007821 <rfree>

c0010081 <disableIRQs()>:
c0010081:	fa                   	cli    
c0010082:	c3                   	ret    

c0010083 <enableIRQs()>:
c0010083:	fb                   	sti    
c0010084:	c3                   	ret    

c0010085 <lockScheduler()>:
c0010085:	fa                   	cli    
c0010086:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c001008c:	c3                   	ret    

c001008d <unlockScheduler()>:
c001008d:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0010092:	48                   	dec    eax
c0010093:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0010098:	75 01                	jne    c001009b <unlockScheduler()+0xe>
c001009a:	fb                   	sti    
c001009b:	c3                   	ret    

c001009c <lockStuff()>:
c001009c:	fa                   	cli    
c001009d:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c00100a3:	ff 05 04 38 02 c0    	inc    DWORD PTR ds:0xc0023804
c00100a9:	c3                   	ret    

c00100aa <unlockStuff()>:
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00100b2:	48                   	dec    eax
c00100b3:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c00100b8:	75 18                	jne    c00100d2 <unlockStuff()+0x28>
c00100ba:	83 3d 00 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023800,0x0
c00100c1:	74 0f                	je     c00100d2 <unlockStuff()+0x28>
c00100c3:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c00100cd:	e8 2e 32 00 00       	call   c0013300 <schedule()>
c00100d2:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00100d7:	48                   	dec    eax
c00100d8:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00100dd:	75 01                	jne    c00100e0 <unlockStuff()+0x36>
c00100df:	fb                   	sti    
c00100e0:	83 c4 0c             	add    esp,0xc
c00100e3:	c3                   	ret    

c00100e4 <Virt::getAKernelVAS()>:
c00100e4:	a1 50 06 02 c0       	mov    eax,ds:0xc0020650
c00100e9:	c3                   	ret    

c00100ea <__not_memcpy>:
c00100ea:	57                   	push   edi
c00100eb:	56                   	push   esi
c00100ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100f8:	89 c7                	mov    edi,eax
c00100fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100fc:	5e                   	pop    esi
c00100fd:	5f                   	pop    edi
c00100fe:	c3                   	ret    

c00100ff <KePanic(char const*)>:
c00100ff:	c6 05 d8 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022fd8,0x1
c0010106:	e9 ed 4f 00 00       	jmp    c00150f8 <HalPanic(char const*)>

c001010b <Krnl::powerThread(void*)>:
c001010b:	83 ec 0c             	sub    esp,0xc
c001010e:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0010113:	48                   	dec    eax
c0010114:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0010119:	75 01                	jne    c001011c <Krnl::powerThread(void*)+0x11>
c001011b:	fb                   	sti    
c001011c:	83 ec 0c             	sub    esp,0xc
c001011f:	c6 05 e0 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022fe0,0x0
c0010126:	6a 0a                	push   0xa
c0010128:	e8 e3 34 00 00       	call   c0013610 <sleep(unsigned int)>
c001012d:	83 05 24 30 02 c0 0a 	add    DWORD PTR ds:0xc0023024,0xa
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	eb e3                	jmp    c001011c <Krnl::powerThread(void*)+0x11>

c0010139 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010139:	57                   	push   edi
c001013a:	b9 09 00 00 00       	mov    ecx,0x9
c001013f:	56                   	push   esi
c0010140:	bf 00 30 02 c0       	mov    edi,0xc0023000
c0010145:	fc                   	cld    
c0010146:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001014a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001014c:	5e                   	pop    esi
c001014d:	5f                   	pop    edi
c001014e:	c3                   	ret    

c001014f <Krnl::userIOReceived()>:
c001014f:	c7 05 24 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023024,0x0
c0010159:	c3                   	ret    

c001015a <Krnl::handlePowerButton()>:
c001015a:	83 ec 0c             	sub    esp,0xc
c001015d:	a1 00 30 02 c0       	mov    eax,ds:0xc0023000
c0010162:	83 f8 02             	cmp    eax,0x2
c0010165:	75 10                	jne    c0010177 <Krnl::handlePowerButton()+0x1d>
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0010170:	e8 27 6d ff ff       	call   c0006e9c <Computer::shutdown()>
c0010175:	eb 11                	jmp    c0010188 <Krnl::handlePowerButton()+0x2e>
c0010177:	48                   	dec    eax
c0010178:	75 11                	jne    c001018b <Krnl::handlePowerButton()+0x31>
c001017a:	83 ec 0c             	sub    esp,0xc
c001017d:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0010183:	e8 44 6d ff ff       	call   c0006ecc <Computer::sleep()>
c0010188:	83 c4 10             	add    esp,0x10
c001018b:	83 c4 0c             	add    esp,0xc
c001018e:	c3                   	ret    

c001018f <Krnl::handleSleepButton()>:
c001018f:	83 ec 0c             	sub    esp,0xc
c0010192:	a1 04 30 02 c0       	mov    eax,ds:0xc0023004
c0010197:	83 f8 02             	cmp    eax,0x2
c001019a:	75 10                	jne    c00101ac <Krnl::handleSleepButton()+0x1d>
c001019c:	83 ec 0c             	sub    esp,0xc
c001019f:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00101a5:	e8 f2 6c ff ff       	call   c0006e9c <Computer::shutdown()>
c00101aa:	eb 11                	jmp    c00101bd <Krnl::handleSleepButton()+0x2e>
c00101ac:	48                   	dec    eax
c00101ad:	75 11                	jne    c00101c0 <Krnl::handleSleepButton()+0x31>
c00101af:	83 ec 0c             	sub    esp,0xc
c00101b2:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00101b8:	e8 0f 6d ff ff       	call   c0006ecc <Computer::sleep()>
c00101bd:	83 c4 10             	add    esp,0x10
c00101c0:	83 c4 0c             	add    esp,0xc
c00101c3:	c3                   	ret    

c00101c4 <Krnl::setupPowerManager()>:
c00101c4:	83 ec 0c             	sub    esp,0xc
c00101c7:	c7 05 24 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023024,0x0
c00101d1:	68 f0 00 00 00       	push   0xf0
c00101d6:	c6 05 e0 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022fe0,0x0
c00101dd:	6a 00                	push   0x0
c00101df:	68 0b 01 01 c0       	push   0xc001010b
c00101e4:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c00101ea:	e8 f1 2e 00 00       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c00101ef:	c7 05 00 30 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023000,0x2
c00101f9:	c7 05 04 30 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023004,0x1
c0010203:	c7 05 08 30 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023008,0x3
c001020d:	c7 05 0c 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002300c,0x0
c0010217:	c7 05 18 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023018,0x0
c0010221:	c7 05 10 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023010,0x0
c001022b:	c7 05 1c 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002301c,0x0
c0010235:	c7 05 14 30 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023014,0x3c
c001023f:	c7 05 20 30 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023020,0x3c
c0010249:	83 c4 1c             	add    esp,0x1c
c001024c:	c3                   	ret    
c001024d:	66 90                	xchg   ax,ax
c001024f:	90                   	nop

c0010250 <KeResolveCompatibilitySymbol(char*)>:
c0010250:	83 ec 0c             	sub    esp,0xc
c0010253:	83 ec 08             	sub    esp,0x8
c0010256:	68 00 e2 01 c0       	push   0xc001e200
c001025b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001025f:	e8 7c 04 ff ff       	call   c00006e0 <strcmp>
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	85 c0                	test   eax,eax
c0010269:	0f 94 c0             	sete   al
c001026c:	84 c0                	test   al,al
c001026e:	74 0c                	je     c001027c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010270:	b8 58 05 02 c0       	mov    eax,0xc0020558
c0010275:	e9 62 01 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001027a:	66 90                	xchg   ax,ax
c001027c:	83 ec 08             	sub    esp,0x8
c001027f:	68 09 e2 01 c0       	push   0xc001e209
c0010284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010288:	e8 53 04 ff ff       	call   c00006e0 <strcmp>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	85 c0                	test   eax,eax
c0010292:	0f 94 c0             	sete   al
c0010295:	84 c0                	test   al,al
c0010297:	74 0b                	je     c00102a4 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010299:	b8 50 bc 01 c0       	mov    eax,0xc001bc50
c001029e:	e9 39 01 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102a3:	90                   	nop
c00102a4:	83 ec 08             	sub    esp,0x8
c00102a7:	68 13 e2 01 c0       	push   0xc001e213
c00102ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b0:	e8 2b 04 ff ff       	call   c00006e0 <strcmp>
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	85 c0                	test   eax,eax
c00102ba:	0f 94 c0             	sete   al
c00102bd:	84 c0                	test   al,al
c00102bf:	74 0b                	je     c00102cc <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102c1:	b8 84 b9 01 c0       	mov    eax,0xc001b984
c00102c6:	e9 11 01 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102cb:	90                   	nop
c00102cc:	83 ec 08             	sub    esp,0x8
c00102cf:	68 1c e2 01 c0       	push   0xc001e21c
c00102d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d8:	e8 03 04 ff ff       	call   c00006e0 <strcmp>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	85 c0                	test   eax,eax
c00102e2:	0f 94 c0             	sete   al
c00102e5:	84 c0                	test   al,al
c00102e7:	74 0b                	je     c00102f4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00102e9:	b8 ff 00 01 c0       	mov    eax,0xc00100ff
c00102ee:	e9 e9 00 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102f3:	90                   	nop
c00102f4:	83 ec 08             	sub    esp,0x8
c00102f7:	68 2f e2 01 c0       	push   0xc001e22f
c00102fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010300:	e8 db 03 ff ff       	call   c00006e0 <strcmp>
c0010305:	83 c4 10             	add    esp,0x10
c0010308:	85 c0                	test   eax,eax
c001030a:	0f 94 c0             	sete   al
c001030d:	84 c0                	test   al,al
c001030f:	74 0b                	je     c001031c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010311:	b8 87 fa 00 c0       	mov    eax,0xc000fa87
c0010316:	e9 c1 00 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001031b:	90                   	nop
c001031c:	83 ec 08             	sub    esp,0x8
c001031f:	68 4c e2 01 c0       	push   0xc001e24c
c0010324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010328:	e8 b3 03 ff ff       	call   c00006e0 <strcmp>
c001032d:	83 c4 10             	add    esp,0x10
c0010330:	85 c0                	test   eax,eax
c0010332:	0f 94 c0             	sete   al
c0010335:	84 c0                	test   al,al
c0010337:	74 0b                	je     c0010344 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010339:	b8 50 bd 01 c0       	mov    eax,0xc001bd50
c001033e:	e9 99 00 00 00       	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010343:	90                   	nop
c0010344:	83 ec 08             	sub    esp,0x8
c0010347:	68 56 e2 01 c0       	push   0xc001e256
c001034c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010350:	e8 8b 03 ff ff       	call   c00006e0 <strcmp>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	85 c0                	test   eax,eax
c001035a:	0f 94 c0             	sete   al
c001035d:	84 c0                	test   al,al
c001035f:	74 07                	je     c0010368 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010361:	b8 d0 ba 01 c0       	mov    eax,0xc001bad0
c0010366:	eb 74                	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010368:	83 ec 08             	sub    esp,0x8
c001036b:	68 5f e2 01 c0       	push   0xc001e25f
c0010370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010374:	e8 67 03 ff ff       	call   c00006e0 <strcmp>
c0010379:	83 c4 10             	add    esp,0x10
c001037c:	85 c0                	test   eax,eax
c001037e:	0f 94 c0             	sete   al
c0010381:	84 c0                	test   al,al
c0010383:	74 07                	je     c001038c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010385:	b8 5c 05 02 c0       	mov    eax,0xc002055c
c001038a:	eb 50                	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001038c:	83 ec 08             	sub    esp,0x8
c001038f:	68 77 e2 01 c0       	push   0xc001e277
c0010394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010398:	e8 43 03 ff ff       	call   c00006e0 <strcmp>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	85 c0                	test   eax,eax
c00103a2:	0f 94 c0             	sete   al
c00103a5:	84 c0                	test   al,al
c00103a7:	74 07                	je     c00103b0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103a9:	b8 5c 05 02 c0       	mov    eax,0xc002055c
c00103ae:	eb 2c                	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103b0:	83 ec 08             	sub    esp,0x8
c00103b3:	68 84 e2 01 c0       	push   0xc001e284
c00103b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103bc:	e8 1f 03 ff ff       	call   c00006e0 <strcmp>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	85 c0                	test   eax,eax
c00103c6:	0f 94 c0             	sete   al
c00103c9:	84 c0                	test   al,al
c00103cb:	74 07                	je     c00103d4 <KeResolveCompatibilitySymbol(char*)+0x184>
c00103cd:	b8 5d 05 02 c0       	mov    eax,0xc002055d
c00103d2:	eb 08                	jmp    c00103dc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d4:	b8 00 00 00 00       	mov    eax,0x0
c00103d9:	8d 76 00             	lea    esi,[esi+0x0]
c00103dc:	83 c4 0c             	add    esp,0xc
c00103df:	c3                   	ret    

c00103e0 <SysSeekDir(regs*)>:
c00103e0:	31 c0                	xor    eax,eax
c00103e2:	31 d2                	xor    edx,edx
c00103e4:	c3                   	ret    

c00103e5 <SysTellDir(regs*)>:
c00103e5:	31 c0                	xor    eax,eax
c00103e7:	31 d2                	xor    edx,edx
c00103e9:	c3                   	ret    

c00103ea <SysVerify(regs*)>:
c00103ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ee:	31 d2                	xor    edx,edx
c00103f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103f3:	c3                   	ret    

c00103f4 <SysGetArgc(regs*)>:
c00103f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103fc:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010402:	99                   	cdq    
c0010403:	c3                   	ret    

c0010404 <SysTTYName(regs*)>:
c0010404:	b8 01 00 00 00       	mov    eax,0x1
c0010409:	31 d2                	xor    edx,edx
c001040b:	c3                   	ret    

c001040c <SysFormatDisk(regs*)>:
c001040c:	56                   	push   esi
c001040d:	53                   	push   ebx
c001040e:	50                   	push   eax
c001040f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010413:	8b 1d 54 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020654
c0010419:	eb 28                	jmp    c0010443 <SysFormatDisk(regs*)+0x37>
c001041b:	83 ec 0c             	sub    esp,0xc
c001041e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010421:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010424:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010426:	51                   	push   ecx
c0010427:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001042a:	51                   	push   ecx
c001042b:	50                   	push   eax
c001042c:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c0010433:	50                   	push   eax
c0010434:	53                   	push   ebx
c0010435:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010438:	83 c4 20             	add    esp,0x20
c001043b:	83 f8 08             	cmp    eax,0x8
c001043e:	75 12                	jne    c0010452 <SysFormatDisk(regs*)+0x46>
c0010440:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010443:	85 db                	test   ebx,ebx
c0010445:	75 d4                	jne    c001041b <SysFormatDisk(regs*)+0xf>
c0010447:	59                   	pop    ecx
c0010448:	b8 03 00 00 00       	mov    eax,0x3
c001044d:	31 d2                	xor    edx,edx
c001044f:	5b                   	pop    ebx
c0010450:	5e                   	pop    esi
c0010451:	c3                   	ret    
c0010452:	85 c0                	test   eax,eax
c0010454:	74 1b                	je     c0010471 <SysFormatDisk(regs*)+0x65>
c0010456:	83 f8 09             	cmp    eax,0x9
c0010459:	74 0b                	je     c0010466 <SysFormatDisk(regs*)+0x5a>
c001045b:	59                   	pop    ecx
c001045c:	b8 02 00 00 00       	mov    eax,0x2
c0010461:	31 d2                	xor    edx,edx
c0010463:	5b                   	pop    ebx
c0010464:	5e                   	pop    esi
c0010465:	c3                   	ret    
c0010466:	59                   	pop    ecx
c0010467:	b8 01 00 00 00       	mov    eax,0x1
c001046c:	31 d2                	xor    edx,edx
c001046e:	5b                   	pop    ebx
c001046f:	5e                   	pop    esi
c0010470:	c3                   	ret    
c0010471:	59                   	pop    ecx
c0010472:	31 c0                	xor    eax,eax
c0010474:	31 d2                	xor    edx,edx
c0010476:	5b                   	pop    ebx
c0010477:	5e                   	pop    esi
c0010478:	c3                   	ret    

c0010479 <SysSetDiskVolumeLabel(regs*)>:
c0010479:	56                   	push   esi
c001047a:	53                   	push   ebx
c001047b:	53                   	push   ebx
c001047c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010480:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010483:	83 f8 19             	cmp    eax,0x19
c0010486:	77 2d                	ja     c00104b5 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010488:	8b 0c 85 c0 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd540]
c001048f:	85 c9                	test   ecx,ecx
c0010491:	74 22                	je     c00104b5 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010493:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010496:	85 db                	test   ebx,ebx
c0010498:	74 1b                	je     c00104b5 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001049a:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104a0:	85 d2                	test   edx,edx
c00104a2:	74 11                	je     c00104b5 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104a4:	8b 32                	mov    esi,DWORD PTR [edx]
c00104a6:	53                   	push   ebx
c00104a7:	50                   	push   eax
c00104a8:	51                   	push   ecx
c00104a9:	52                   	push   edx
c00104aa:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00104ad:	83 c4 10             	add    esp,0x10
c00104b0:	99                   	cdq    
c00104b1:	59                   	pop    ecx
c00104b2:	5b                   	pop    ebx
c00104b3:	5e                   	pop    esi
c00104b4:	c3                   	ret    
c00104b5:	59                   	pop    ecx
c00104b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104c0:	5b                   	pop    ebx
c00104c1:	5e                   	pop    esi
c00104c2:	c3                   	ret    

c00104c3 <SysGetDiskVolumeLabel(regs*)>:
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00104cd:	83 fa 19             	cmp    edx,0x19
c00104d0:	77 38                	ja     c001050a <SysGetDiskVolumeLabel(regs*)+0x47>
c00104d2:	8b 0c 95 c0 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd540]
c00104d9:	85 c9                	test   ecx,ecx
c00104db:	74 2d                	je     c001050a <SysGetDiskVolumeLabel(regs*)+0x47>
c00104dd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00104e0:	85 db                	test   ebx,ebx
c00104e2:	74 26                	je     c001050a <SysGetDiskVolumeLabel(regs*)+0x47>
c00104e4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00104e7:	85 f6                	test   esi,esi
c00104e9:	74 1f                	je     c001050a <SysGetDiskVolumeLabel(regs*)+0x47>
c00104eb:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00104f1:	85 c0                	test   eax,eax
c00104f3:	74 15                	je     c001050a <SysGetDiskVolumeLabel(regs*)+0x47>
c00104f5:	83 ec 0c             	sub    esp,0xc
c00104f8:	8b 38                	mov    edi,DWORD PTR [eax]
c00104fa:	56                   	push   esi
c00104fb:	53                   	push   ebx
c00104fc:	52                   	push   edx
c00104fd:	51                   	push   ecx
c00104fe:	50                   	push   eax
c00104ff:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010502:	83 c4 20             	add    esp,0x20
c0010505:	99                   	cdq    
c0010506:	5b                   	pop    ebx
c0010507:	5e                   	pop    esi
c0010508:	5f                   	pop    edi
c0010509:	c3                   	ret    
c001050a:	5b                   	pop    ebx
c001050b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010510:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010515:	5e                   	pop    esi
c0010516:	5f                   	pop    edi
c0010517:	c3                   	ret    

c0010518 <SysShutdown(regs*)>:
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010522:	85 c0                	test   eax,eax
c0010524:	74 18                	je     c001053e <SysShutdown(regs*)+0x26>
c0010526:	83 f8 01             	cmp    eax,0x1
c0010529:	74 38                	je     c0010563 <SysShutdown(regs*)+0x4b>
c001052b:	83 f8 02             	cmp    eax,0x2
c001052e:	74 24                	je     c0010554 <SysShutdown(regs*)+0x3c>
c0010530:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010535:	ba ff ff ff ff       	mov    edx,0xffffffff
c001053a:	83 c4 0c             	add    esp,0xc
c001053d:	c3                   	ret    
c001053e:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0010543:	8b 10                	mov    edx,DWORD PTR [eax]
c0010545:	6a 00                	push   0x0
c0010547:	6a 00                	push   0x0
c0010549:	6a 00                	push   0x0
c001054b:	50                   	push   eax
c001054c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001054f:	83 c4 10             	add    esp,0x10
c0010552:	eb dc                	jmp    c0010530 <SysShutdown(regs*)+0x18>
c0010554:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0010559:	8b 10                	mov    edx,DWORD PTR [eax]
c001055b:	6a 00                	push   0x0
c001055d:	6a 00                	push   0x0
c001055f:	6a 01                	push   0x1
c0010561:	eb e8                	jmp    c001054b <SysShutdown(regs*)+0x33>
c0010563:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c0010568:	85 c0                	test   eax,eax
c001056a:	74 02                	je     c001056e <SysShutdown(regs*)+0x56>
c001056c:	ff d0                	call   eax
c001056e:	31 c0                	xor    eax,eax
c0010570:	31 d2                	xor    edx,edx
c0010572:	83 c4 0c             	add    esp,0xc
c0010575:	c3                   	ret    

c0010576 <SysRealpath(regs*)>:
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010580:	85 d2                	test   edx,edx
c0010582:	74 07                	je     c001058b <SysRealpath(regs*)+0x15>
c0010584:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010587:	85 c0                	test   eax,eax
c0010589:	75 0b                	jne    c0010596 <SysRealpath(regs*)+0x20>
c001058b:	b8 01 00 00 00       	mov    eax,0x1
c0010590:	31 d2                	xor    edx,edx
c0010592:	83 c4 0c             	add    esp,0xc
c0010595:	c3                   	ret    
c0010596:	51                   	push   ecx
c0010597:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001059d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105a0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00105a6:	51                   	push   ecx
c00105a7:	52                   	push   edx
c00105a8:	50                   	push   eax
c00105a9:	e8 ba a2 ff ff       	call   c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	31 c0                	xor    eax,eax
c00105b3:	31 d2                	xor    edx,edx
c00105b5:	83 c4 0c             	add    esp,0xc
c00105b8:	c3                   	ret    

c00105b9 <SysReadDir(regs*)>:
c00105b9:	53                   	push   ebx
c00105ba:	83 ec 18             	sub    esp,0x18
c00105bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105c4:	83 f8 02             	cmp    eax,0x2
c00105c7:	76 61                	jbe    c001062a <SysReadDir(regs*)+0x71>
c00105c9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00105d0:	77 49                	ja     c001061b <SysReadDir(regs*)+0x62>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	50                   	push   eax
c00105d6:	e8 18 8b ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	85 c0                	test   eax,eax
c00105e0:	74 39                	je     c001061b <SysReadDir(regs*)+0x62>
c00105e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00105ef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00105f3:	51                   	push   ecx
c00105f4:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00105f7:	51                   	push   ecx
c00105f8:	6a 00                	push   0x0
c00105fa:	68 10 01 00 00       	push   0x110
c00105ff:	50                   	push   eax
c0010600:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010603:	83 c4 20             	add    esp,0x20
c0010606:	85 c0                	test   eax,eax
c0010608:	74 29                	je     c0010633 <SysReadDir(regs*)+0x7a>
c001060a:	83 f8 07             	cmp    eax,0x7
c001060d:	74 1b                	je     c001062a <SysReadDir(regs*)+0x71>
c001060f:	b8 02 00 00 00       	mov    eax,0x2
c0010614:	31 d2                	xor    edx,edx
c0010616:	83 c4 18             	add    esp,0x18
c0010619:	5b                   	pop    ebx
c001061a:	c3                   	ret    
c001061b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010620:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010625:	83 c4 18             	add    esp,0x18
c0010628:	5b                   	pop    ebx
c0010629:	c3                   	ret    
c001062a:	b8 01 00 00 00       	mov    eax,0x1
c001062f:	31 d2                	xor    edx,edx
c0010631:	eb e3                	jmp    c0010616 <SysReadDir(regs*)+0x5d>
c0010633:	31 c0                	xor    eax,eax
c0010635:	31 d2                	xor    edx,edx
c0010637:	eb dd                	jmp    c0010616 <SysReadDir(regs*)+0x5d>

c0010639 <SysIsATTY(regs*)>:
c0010639:	83 ec 0c             	sub    esp,0xc
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010643:	83 f8 02             	cmp    eax,0x2
c0010646:	76 07                	jbe    c001064f <SysIsATTY(regs*)+0x16>
c0010648:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001064d:	75 28                	jne    c0010677 <SysIsATTY(regs*)+0x3e>
c001064f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010654:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010657:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001065d:	85 c0                	test   eax,eax
c001065f:	74 26                	je     c0010687 <SysIsATTY(regs*)+0x4e>
c0010661:	83 ec 0c             	sub    esp,0xc
c0010664:	8b 10                	mov    edx,DWORD PTR [eax]
c0010666:	50                   	push   eax
c0010667:	ff 12                	call   DWORD PTR [edx]
c0010669:	31 d2                	xor    edx,edx
c001066b:	25 ff 00 00 00       	and    eax,0xff
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	83 c4 0c             	add    esp,0xc
c0010676:	c3                   	ret    
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	50                   	push   eax
c001067b:	e8 73 8a ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	85 c0                	test   eax,eax
c0010685:	75 da                	jne    c0010661 <SysIsATTY(regs*)+0x28>
c0010687:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001068c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010691:	83 c4 0c             	add    esp,0xc
c0010694:	c3                   	ret    

c0010695 <SysSeek(regs*)>:
c0010695:	53                   	push   ebx
c0010696:	83 ec 08             	sub    esp,0x8
c0010699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106a0:	8d 50 fd             	lea    edx,[eax-0x3]
c00106a3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106a9:	77 34                	ja     c00106df <SysSeek(regs*)+0x4a>
c00106ab:	83 ec 0c             	sub    esp,0xc
c00106ae:	50                   	push   eax
c00106af:	e8 3f 8a ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c00106b4:	83 c4 0c             	add    esp,0xc
c00106b7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106ba:	31 db                	xor    ebx,ebx
c00106bc:	53                   	push   ebx
c00106bd:	51                   	push   ecx
c00106be:	50                   	push   eax
c00106bf:	e8 cc a4 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00106c4:	83 c4 10             	add    esp,0x10
c00106c7:	85 c0                	test   eax,eax
c00106c9:	0f 95 c0             	setne  al
c00106cc:	31 d2                	xor    edx,edx
c00106ce:	25 ff 00 00 00       	and    eax,0xff
c00106d3:	f7 d8                	neg    eax
c00106d5:	83 d2 00             	adc    edx,0x0
c00106d8:	83 c4 08             	add    esp,0x8
c00106db:	f7 da                	neg    edx
c00106dd:	5b                   	pop    ebx
c00106de:	c3                   	ret    
c00106df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106e9:	83 c4 08             	add    esp,0x8
c00106ec:	5b                   	pop    ebx
c00106ed:	c3                   	ret    

c00106ee <SysTell(regs*)>:
c00106ee:	53                   	push   ebx
c00106ef:	83 ec 08             	sub    esp,0x8
c00106f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106f9:	83 f8 02             	cmp    eax,0x2
c00106fc:	76 50                	jbe    c001074e <SysTell(regs*)+0x60>
c00106fe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010703:	76 19                	jbe    c001071e <SysTell(regs*)+0x30>
c0010705:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010708:	31 d2                	xor    edx,edx
c001070a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010710:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010717:	31 c0                	xor    eax,eax
c0010719:	83 c4 08             	add    esp,0x8
c001071c:	5b                   	pop    ebx
c001071d:	c3                   	ret    
c001071e:	83 ec 0c             	sub    esp,0xc
c0010721:	50                   	push   eax
c0010722:	e8 cc 89 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c0010727:	5a                   	pop    edx
c0010728:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001072b:	59                   	pop    ecx
c001072c:	53                   	push   ebx
c001072d:	50                   	push   eax
c001072e:	e8 b3 a4 ff ff       	call   c000abe6 <File::tell(unsigned long long*)>
c0010733:	83 c4 10             	add    esp,0x10
c0010736:	85 c0                	test   eax,eax
c0010738:	0f 95 c0             	setne  al
c001073b:	31 d2                	xor    edx,edx
c001073d:	25 ff 00 00 00       	and    eax,0xff
c0010742:	f7 d8                	neg    eax
c0010744:	83 d2 00             	adc    edx,0x0
c0010747:	83 c4 08             	add    esp,0x8
c001074a:	f7 da                	neg    edx
c001074c:	5b                   	pop    ebx
c001074d:	c3                   	ret    
c001074e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010753:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010758:	83 c4 08             	add    esp,0x8
c001075b:	5b                   	pop    ebx
c001075c:	c3                   	ret    

c001075d <SysSize(regs*)>:
c001075d:	53                   	push   ebx
c001075e:	83 ec 18             	sub    esp,0x18
c0010761:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010765:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010768:	83 f8 02             	cmp    eax,0x2
c001076b:	76 56                	jbe    c00107c3 <SysSize(regs*)+0x66>
c001076d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010772:	76 19                	jbe    c001078d <SysSize(regs*)+0x30>
c0010774:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010777:	31 d2                	xor    edx,edx
c0010779:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001077f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010786:	31 c0                	xor    eax,eax
c0010788:	83 c4 18             	add    esp,0x18
c001078b:	5b                   	pop    ebx
c001078c:	c3                   	ret    
c001078d:	83 ec 0c             	sub    esp,0xc
c0010790:	50                   	push   eax
c0010791:	e8 5d 89 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c0010796:	83 c4 0c             	add    esp,0xc
c0010799:	8d 54 24 13          	lea    edx,[esp+0x13]
c001079d:	52                   	push   edx
c001079e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107a1:	52                   	push   edx
c00107a2:	50                   	push   eax
c00107a3:	e8 d6 a5 ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c00107a8:	83 c4 10             	add    esp,0x10
c00107ab:	85 c0                	test   eax,eax
c00107ad:	0f 95 c0             	setne  al
c00107b0:	31 d2                	xor    edx,edx
c00107b2:	25 ff 00 00 00       	and    eax,0xff
c00107b7:	f7 d8                	neg    eax
c00107b9:	83 d2 00             	adc    edx,0x0
c00107bc:	83 c4 18             	add    esp,0x18
c00107bf:	f7 da                	neg    edx
c00107c1:	5b                   	pop    ebx
c00107c2:	c3                   	ret    
c00107c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107cd:	83 c4 18             	add    esp,0x18
c00107d0:	5b                   	pop    ebx
c00107d1:	c3                   	ret    

c00107d2 <SysSizeFromFilename(regs*)>:
c00107d2:	57                   	push   edi
c00107d3:	56                   	push   esi
c00107d4:	53                   	push   ebx
c00107d5:	83 ec 20             	sub    esp,0x20
c00107d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00107dc:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00107df:	83 fb 02             	cmp    ebx,0x2
c00107e2:	0f 86 8c 00 00 00    	jbe    c0010874 <SysSizeFromFilename(regs*)+0xa2>
c00107e8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00107ee:	76 1b                	jbe    c001080b <SysSizeFromFilename(regs*)+0x39>
c00107f0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00107f3:	31 d2                	xor    edx,edx
c00107f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010802:	83 c4 20             	add    esp,0x20
c0010805:	31 c0                	xor    eax,eax
c0010807:	5b                   	pop    ebx
c0010808:	5e                   	pop    esi
c0010809:	5f                   	pop    edi
c001080a:	c3                   	ret    
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	68 14 01 00 00       	push   0x114
c0010813:	e8 e9 6f ff ff       	call   c0007801 <malloc>
c0010818:	83 c4 0c             	add    esp,0xc
c001081b:	89 c7                	mov    edi,eax
c001081d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010822:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010825:	50                   	push   eax
c0010826:	53                   	push   ebx
c0010827:	57                   	push   edi
c0010828:	e8 e5 a1 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c001082d:	83 c4 0c             	add    esp,0xc
c0010830:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010834:	50                   	push   eax
c0010835:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010838:	52                   	push   edx
c0010839:	57                   	push   edi
c001083a:	e8 3f a5 ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	85 ff                	test   edi,edi
c0010844:	74 14                	je     c001085a <SysSizeFromFilename(regs*)+0x88>
c0010846:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001084a:	8b 17                	mov    edx,DWORD PTR [edi]
c001084c:	83 ec 0c             	sub    esp,0xc
c001084f:	57                   	push   edi
c0010850:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001085a:	85 c0                	test   eax,eax
c001085c:	0f 95 c0             	setne  al
c001085f:	31 d2                	xor    edx,edx
c0010861:	25 ff 00 00 00       	and    eax,0xff
c0010866:	f7 d8                	neg    eax
c0010868:	83 d2 00             	adc    edx,0x0
c001086b:	83 c4 20             	add    esp,0x20
c001086e:	f7 da                	neg    edx
c0010870:	5b                   	pop    ebx
c0010871:	5e                   	pop    esi
c0010872:	5f                   	pop    edi
c0010873:	c3                   	ret    
c0010874:	83 c4 20             	add    esp,0x20
c0010877:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001087c:	5b                   	pop    ebx
c001087d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010882:	5e                   	pop    esi
c0010883:	5f                   	pop    edi
c0010884:	c3                   	ret    

c0010885 <SysClose(regs*)>:
c0010885:	53                   	push   ebx
c0010886:	83 ec 08             	sub    esp,0x8
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010890:	83 f8 02             	cmp    eax,0x2
c0010893:	76 41                	jbe    c00108d6 <SysClose(regs*)+0x51>
c0010895:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001089b:	83 fa 01             	cmp    edx,0x1
c001089e:	76 2d                	jbe    c00108cd <SysClose(regs*)+0x48>
c00108a0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00108a5:	77 2f                	ja     c00108d6 <SysClose(regs*)+0x51>
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	50                   	push   eax
c00108ab:	e8 43 88 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c00108b0:	89 c3                	mov    ebx,eax
c00108b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00108b5:	e8 76 a2 ff ff       	call   c000ab30 <File::close()>
c00108ba:	83 c4 10             	add    esp,0x10
c00108bd:	85 db                	test   ebx,ebx
c00108bf:	74 0c                	je     c00108cd <SysClose(regs*)+0x48>
c00108c1:	83 ec 0c             	sub    esp,0xc
c00108c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108c6:	53                   	push   ebx
c00108c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	31 c0                	xor    eax,eax
c00108cf:	31 d2                	xor    edx,edx
c00108d1:	83 c4 08             	add    esp,0x8
c00108d4:	5b                   	pop    ebx
c00108d5:	c3                   	ret    
c00108d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108e0:	83 c4 08             	add    esp,0x8
c00108e3:	5b                   	pop    ebx
c00108e4:	c3                   	ret    

c00108e5 <SysOpenDir(regs*)>:
c00108e5:	56                   	push   esi
c00108e6:	53                   	push   ebx
c00108e7:	50                   	push   eax
c00108e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108ef:	85 c0                	test   eax,eax
c00108f1:	74 5b                	je     c001094e <SysOpenDir(regs*)+0x69>
c00108f3:	83 ec 0c             	sub    esp,0xc
c00108f6:	68 14 01 00 00       	push   0x114
c00108fb:	e8 01 6f ff ff       	call   c0007801 <malloc>
c0010900:	83 c4 0c             	add    esp,0xc
c0010903:	89 c6                	mov    esi,eax
c0010905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001090d:	50                   	push   eax
c001090e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010911:	50                   	push   eax
c0010912:	56                   	push   esi
c0010913:	e8 24 a6 ff ff       	call   c000af3c <Directory::Directory(char const*, Process*)>
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	85 f6                	test   esi,esi
c001091d:	74 2f                	je     c001094e <SysOpenDir(regs*)+0x69>
c001091f:	83 ec 0c             	sub    esp,0xc
c0010922:	56                   	push   esi
c0010923:	e8 d4 a6 ff ff       	call   c000affc <Directory::open()>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	85 c0                	test   eax,eax
c001092d:	75 1f                	jne    c001094e <SysOpenDir(regs*)+0x69>
c001092f:	83 ec 0c             	sub    esp,0xc
c0010932:	56                   	push   esi
c0010933:	e8 c6 84 ff ff       	call   c0008dfe <UnixFile::getFileDescriptor()>
c0010938:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001093b:	83 c4 10             	add    esp,0x10
c001093e:	89 02                	mov    DWORD PTR [edx],eax
c0010940:	c1 f8 1f             	sar    eax,0x1f
c0010943:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010946:	31 c0                	xor    eax,eax
c0010948:	59                   	pop    ecx
c0010949:	31 d2                	xor    edx,edx
c001094b:	5b                   	pop    ebx
c001094c:	5e                   	pop    esi
c001094d:	c3                   	ret    
c001094e:	59                   	pop    ecx
c001094f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010954:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010959:	5b                   	pop    ebx
c001095a:	5e                   	pop    esi
c001095b:	c3                   	ret    

c001095c <SysCloseDir(regs*)>:
c001095c:	53                   	push   ebx
c001095d:	83 ec 08             	sub    esp,0x8
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010967:	8d 50 fd             	lea    edx,[eax-0x3]
c001096a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010970:	77 2f                	ja     c00109a1 <SysCloseDir(regs*)+0x45>
c0010972:	83 ec 0c             	sub    esp,0xc
c0010975:	50                   	push   eax
c0010976:	e8 78 87 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c001097b:	89 c3                	mov    ebx,eax
c001097d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010980:	e8 d3 a6 ff ff       	call   c000b058 <Directory::close()>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	85 db                	test   ebx,ebx
c001098a:	74 0c                	je     c0010998 <SysCloseDir(regs*)+0x3c>
c001098c:	83 ec 0c             	sub    esp,0xc
c001098f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010991:	53                   	push   ebx
c0010992:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	31 c0                	xor    eax,eax
c001099a:	31 d2                	xor    edx,edx
c001099c:	83 c4 08             	add    esp,0x8
c001099f:	5b                   	pop    ebx
c00109a0:	c3                   	ret    
c00109a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109ab:	83 c4 08             	add    esp,0x8
c00109ae:	5b                   	pop    ebx
c00109af:	c3                   	ret    

c00109b0 <SysMakeDir(regs*)>:
c00109b0:	56                   	push   esi
c00109b1:	53                   	push   ebx
c00109b2:	83 ec 10             	sub    esp,0x10
c00109b5:	68 14 01 00 00       	push   0x114
c00109ba:	e8 42 6e ff ff       	call   c0007801 <malloc>
c00109bf:	83 c4 0c             	add    esp,0xc
c00109c2:	89 c3                	mov    ebx,eax
c00109c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109c9:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00109cc:	56                   	push   esi
c00109cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00109d1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109d4:	50                   	push   eax
c00109d5:	53                   	push   ebx
c00109d6:	e8 61 a5 ff ff       	call   c000af3c <Directory::Directory(char const*, Process*)>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	85 db                	test   ebx,ebx
c00109e0:	74 32                	je     c0010a14 <SysMakeDir(regs*)+0x64>
c00109e2:	83 ec 0c             	sub    esp,0xc
c00109e5:	53                   	push   ebx
c00109e6:	e8 f1 a7 ff ff       	call   c000b1dc <Directory::create()>
c00109eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ee:	89 c6                	mov    esi,eax
c00109f0:	e8 63 a6 ff ff       	call   c000b058 <Directory::close()>
c00109f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	31 c0                	xor    eax,eax
c0010a02:	59                   	pop    ecx
c0010a03:	85 f6                	test   esi,esi
c0010a05:	5b                   	pop    ebx
c0010a06:	0f 95 c0             	setne  al
c0010a09:	5e                   	pop    esi
c0010a0a:	31 d2                	xor    edx,edx
c0010a0c:	f7 d8                	neg    eax
c0010a0e:	83 d2 00             	adc    edx,0x0
c0010a11:	f7 da                	neg    edx
c0010a13:	c3                   	ret    
c0010a14:	59                   	pop    ecx
c0010a15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a1f:	5b                   	pop    ebx
c0010a20:	5e                   	pop    esi
c0010a21:	c3                   	ret    

c0010a22 <SysWait(regs*)>:
c0010a22:	83 ec 10             	sub    esp,0x10
c0010a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a29:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a2c:	52                   	push   edx
c0010a2d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a30:	51                   	push   ecx
c0010a31:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a34:	50                   	push   eax
c0010a35:	e8 f2 2a 00 00       	call   c001352c <waitTask(int, int*, int)>
c0010a3a:	83 c4 1c             	add    esp,0x1c
c0010a3d:	99                   	cdq    
c0010a3e:	c3                   	ret    

c0010a3f <SysNotImpl(regs*)>:
c0010a3f:	83 ec 18             	sub    esp,0x18
c0010a42:	68 91 e2 01 c0       	push   0xc001e291
c0010a47:	e8 b3 f6 ff ff       	call   c00100ff <KePanic(char const*)>
c0010a4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a56:	83 c4 1c             	add    esp,0x1c
c0010a59:	c3                   	ret    

c0010a5a <SysPanic(regs*)>:
c0010a5a:	83 ec 18             	sub    esp,0x18
c0010a5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a61:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a64:	50                   	push   eax
c0010a65:	e8 95 f6 ff ff       	call   c00100ff <KePanic(char const*)>
c0010a6a:	b8 01 00 00 00       	mov    eax,0x1
c0010a6f:	31 d2                	xor    edx,edx
c0010a71:	83 c4 1c             	add    esp,0x1c
c0010a74:	c3                   	ret    

c0010a75 <SysRmdir(regs*)>:
c0010a75:	56                   	push   esi
c0010a76:	53                   	push   ebx
c0010a77:	83 ec 20             	sub    esp,0x20
c0010a7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a81:	68 14 01 00 00       	push   0x114
c0010a86:	e8 76 6d ff ff       	call   c0007801 <malloc>
c0010a8b:	83 c4 0c             	add    esp,0xc
c0010a8e:	89 c3                	mov    ebx,eax
c0010a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a98:	50                   	push   eax
c0010a99:	56                   	push   esi
c0010a9a:	53                   	push   ebx
c0010a9b:	e8 72 9f ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0010aa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa3:	e8 a2 a1 ff ff       	call   c000ac4a <File::unlink()>
c0010aa8:	83 c4 10             	add    esp,0x10
c0010aab:	85 db                	test   ebx,ebx
c0010aad:	74 14                	je     c0010ac3 <SysRmdir(regs*)+0x4e>
c0010aaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ab5:	83 ec 0c             	sub    esp,0xc
c0010ab8:	53                   	push   ebx
c0010ab9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010abc:	83 c4 10             	add    esp,0x10
c0010abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ac3:	85 c0                	test   eax,eax
c0010ac5:	0f 95 c0             	setne  al
c0010ac8:	31 d2                	xor    edx,edx
c0010aca:	25 ff 00 00 00       	and    eax,0xff
c0010acf:	f7 d8                	neg    eax
c0010ad1:	83 d2 00             	adc    edx,0x0
c0010ad4:	83 c4 14             	add    esp,0x14
c0010ad7:	f7 da                	neg    edx
c0010ad9:	5b                   	pop    ebx
c0010ada:	5e                   	pop    esi
c0010adb:	c3                   	ret    

c0010adc <SysUnlink(regs*)>:
c0010adc:	56                   	push   esi
c0010add:	53                   	push   ebx
c0010ade:	83 ec 20             	sub    esp,0x20
c0010ae1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ae5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ae8:	68 14 01 00 00       	push   0x114
c0010aed:	e8 0f 6d ff ff       	call   c0007801 <malloc>
c0010af2:	83 c4 0c             	add    esp,0xc
c0010af5:	89 c3                	mov    ebx,eax
c0010af7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010afc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010aff:	50                   	push   eax
c0010b00:	56                   	push   esi
c0010b01:	53                   	push   ebx
c0010b02:	e8 0b 9f ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0010b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0a:	e8 3b a1 ff ff       	call   c000ac4a <File::unlink()>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	85 db                	test   ebx,ebx
c0010b14:	74 14                	je     c0010b2a <SysUnlink(regs*)+0x4e>
c0010b16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	53                   	push   ebx
c0010b20:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2a:	85 c0                	test   eax,eax
c0010b2c:	0f 95 c0             	setne  al
c0010b2f:	31 d2                	xor    edx,edx
c0010b31:	25 ff 00 00 00       	and    eax,0xff
c0010b36:	f7 d8                	neg    eax
c0010b38:	83 d2 00             	adc    edx,0x0
c0010b3b:	83 c4 14             	add    esp,0x14
c0010b3e:	f7 da                	neg    edx
c0010b40:	5b                   	pop    ebx
c0010b41:	5e                   	pop    esi
c0010b42:	c3                   	ret    

c0010b43 <SysGetArgv(regs*)>:
c0010b43:	83 ec 0c             	sub    esp,0xc
c0010b46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b4a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b4d:	85 c0                	test   eax,eax
c0010b4f:	78 2c                	js     c0010b7d <SysGetArgv(regs*)+0x3a>
c0010b51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b57:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b5a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b60:	7d 1b                	jge    c0010b7d <SysGetArgv(regs*)+0x3a>
c0010b62:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010b69:	85 c0                	test   eax,eax
c0010b6b:	74 18                	je     c0010b85 <SysGetArgv(regs*)+0x42>
c0010b6d:	83 ec 08             	sub    esp,0x8
c0010b70:	50                   	push   eax
c0010b71:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010b74:	50                   	push   eax
c0010b75:	e8 86 fa fe ff       	call   c0000600 <strcpy>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	31 c0                	xor    eax,eax
c0010b7f:	31 d2                	xor    edx,edx
c0010b81:	83 c4 0c             	add    esp,0xc
c0010b84:	c3                   	ret    
c0010b85:	b8 01 00 00 00       	mov    eax,0x1
c0010b8a:	31 d2                	xor    edx,edx
c0010b8c:	83 c4 0c             	add    esp,0xc
c0010b8f:	c3                   	ret    

c0010b90 <SysUSleep(regs*)>:
c0010b90:	83 ec 1c             	sub    esp,0x1c
c0010b93:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b97:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b9a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010b9d:	6a 00                	push   0x0
c0010b9f:	6a 64                	push   0x64
c0010ba1:	52                   	push   edx
c0010ba2:	50                   	push   eax
c0010ba3:	e8 a8 b0 00 00       	call   c001bc50 <__udivdi3>
c0010ba8:	83 c4 14             	add    esp,0x14
c0010bab:	50                   	push   eax
c0010bac:	e8 4f 2a 00 00       	call   c0013600 <milliTenthSleep(unsigned int)>
c0010bb1:	31 c0                	xor    eax,eax
c0010bb3:	31 d2                	xor    edx,edx
c0010bb5:	83 c4 1c             	add    esp,0x1c
c0010bb8:	c3                   	ret    

c0010bb9 <SysSpawn(regs*)>:
c0010bb9:	56                   	push   esi
c0010bba:	53                   	push   ebx
c0010bbb:	50                   	push   eax
c0010bbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bc3:	85 c0                	test   eax,eax
c0010bc5:	75 08                	jne    c0010bcf <SysSpawn(regs*)+0x16>
c0010bc7:	59                   	pop    ecx
c0010bc8:	31 c0                	xor    eax,eax
c0010bca:	31 d2                	xor    edx,edx
c0010bcc:	5b                   	pop    ebx
c0010bcd:	5e                   	pop    esi
c0010bce:	c3                   	ret    
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	68 1f 07 00 00       	push   0x71f
c0010bd7:	e8 25 6c ff ff       	call   c0007801 <malloc>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	89 c6                	mov    esi,eax
c0010be1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010be4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010be7:	85 c0                	test   eax,eax
c0010be9:	75 33                	jne    c0010c1e <SysSpawn(regs*)+0x65>
c0010beb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bf0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf3:	52                   	push   edx
c0010bf4:	50                   	push   eax
c0010bf5:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010bf8:	53                   	push   ebx
c0010bf9:	56                   	push   esi
c0010bfa:	e8 e5 20 00 00       	call   c0012ce4 <Process::Process(char const*, Process*, char**)>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c09:	75 bc                	jne    c0010bc7 <SysSpawn(regs*)+0xe>
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	56                   	push   esi
c0010c0f:	e8 c4 25 00 00       	call   c00131d8 <Process::createUserThread()>
c0010c14:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	99                   	cdq    
c0010c1a:	59                   	pop    ecx
c0010c1b:	5b                   	pop    ebx
c0010c1c:	5e                   	pop    esi
c0010c1d:	c3                   	ret    
c0010c1e:	31 c0                	xor    eax,eax
c0010c20:	eb d1                	jmp    c0010bf3 <SysSpawn(regs*)+0x3a>

c0010c22 <SysGetEnv(regs*)>:
c0010c22:	57                   	push   edi
c0010c23:	56                   	push   esi
c0010c24:	53                   	push   ebx
c0010c25:	83 ec 1c             	sub    esp,0x1c
c0010c28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c31:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c34:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c3a:	50                   	push   eax
c0010c3b:	e8 77 f3 ff ff       	call   c000ffb7 <Krnl::getProcessTotalEnvCount(Process*)>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	39 c7                	cmp    edi,eax
c0010c45:	7c 14                	jl     c0010c5b <SysGetEnv(regs*)+0x39>
c0010c47:	85 f6                	test   esi,esi
c0010c49:	75 0b                	jne    c0010c56 <SysGetEnv(regs*)+0x34>
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	31 c0                	xor    eax,eax
c0010c50:	5b                   	pop    ebx
c0010c51:	31 d2                	xor    edx,edx
c0010c53:	5e                   	pop    esi
c0010c54:	5f                   	pop    edi
c0010c55:	c3                   	ret    
c0010c56:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c59:	eb f0                	jmp    c0010c4b <SysGetEnv(regs*)+0x29>
c0010c5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c5f:	52                   	push   edx
c0010c60:	57                   	push   edi
c0010c61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c67:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010c6a:	51                   	push   ecx
c0010c6b:	50                   	push   eax
c0010c6c:	e8 66 f3 ff ff       	call   c000ffd7 <Krnl::getProcessEnvPair(Process*, int)>
c0010c71:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c7c:	83 c4 0c             	add    esp,0xc
c0010c7f:	85 db                	test   ebx,ebx
c0010c81:	75 23                	jne    c0010ca6 <SysGetEnv(regs*)+0x84>
c0010c83:	83 ec 0c             	sub    esp,0xc
c0010c86:	50                   	push   eax
c0010c87:	e8 b4 f8 fe ff       	call   c0000540 <strlen>
c0010c8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c8f:	89 c3                	mov    ebx,eax
c0010c91:	e8 aa f8 fe ff       	call   c0000540 <strlen>
c0010c96:	31 d2                	xor    edx,edx
c0010c98:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	5b                   	pop    ebx
c0010ca3:	5e                   	pop    esi
c0010ca4:	5f                   	pop    edi
c0010ca5:	c3                   	ret    
c0010ca6:	83 ec 08             	sub    esp,0x8
c0010ca9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cac:	50                   	push   eax
c0010cad:	56                   	push   esi
c0010cae:	e8 4d f9 fe ff       	call   c0000600 <strcpy>
c0010cb3:	58                   	pop    eax
c0010cb4:	5a                   	pop    edx
c0010cb5:	68 ab e2 01 c0       	push   0xc001e2ab
c0010cba:	56                   	push   esi
c0010cbb:	e8 00 fb fe ff       	call   c00007c0 <strcat>
c0010cc0:	59                   	pop    ecx
c0010cc1:	5b                   	pop    ebx
c0010cc2:	57                   	push   edi
c0010cc3:	56                   	push   esi
c0010cc4:	e8 f7 fa fe ff       	call   c00007c0 <strcat>
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	e9 7a ff ff ff       	jmp    c0010c4b <SysGetEnv(regs*)+0x29>

c0010cd1 <SysSetFatAttrib(regs*)>:
c0010cd1:	57                   	push   edi
c0010cd2:	56                   	push   esi
c0010cd3:	53                   	push   ebx
c0010cd4:	83 ec 1c             	sub    esp,0x1c
c0010cd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010cdb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010cde:	68 14 01 00 00       	push   0x114
c0010ce3:	e8 19 6b ff ff       	call   c0007801 <malloc>
c0010ce8:	83 c4 0c             	add    esp,0xc
c0010ceb:	89 c3                	mov    ebx,eax
c0010ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cf5:	50                   	push   eax
c0010cf6:	57                   	push   edi
c0010cf7:	53                   	push   ebx
c0010cf8:	e8 15 9d ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0010cfd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d00:	83 c4 0c             	add    esp,0xc
c0010d03:	0f b6 d4             	movzx  edx,ah
c0010d06:	25 ff 00 00 00       	and    eax,0xff
c0010d0b:	52                   	push   edx
c0010d0c:	50                   	push   eax
c0010d0d:	53                   	push   ebx
c0010d0e:	e8 d1 9f ff ff       	call   c000ace4 <File::chfatattr(unsigned char, unsigned char)>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	85 db                	test   ebx,ebx
c0010d18:	74 14                	je     c0010d2e <SysSetFatAttrib(regs*)+0x5d>
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	53                   	push   ebx
c0010d24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d27:	83 c4 10             	add    esp,0x10
c0010d2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d2e:	85 c0                	test   eax,eax
c0010d30:	0f 95 c0             	setne  al
c0010d33:	31 d2                	xor    edx,edx
c0010d35:	25 ff 00 00 00       	and    eax,0xff
c0010d3a:	f7 d8                	neg    eax
c0010d3c:	83 d2 00             	adc    edx,0x0
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	f7 da                	neg    edx
c0010d44:	5b                   	pop    ebx
c0010d45:	5e                   	pop    esi
c0010d46:	5f                   	pop    edi
c0010d47:	c3                   	ret    

c0010d48 <SysPipe(regs*)>:
c0010d48:	57                   	push   edi
c0010d49:	56                   	push   esi
c0010d4a:	53                   	push   ebx
c0010d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4f:	83 ec 0c             	sub    esp,0xc
c0010d52:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d55:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d58:	6a 20                	push   0x20
c0010d5a:	e8 a2 6a ff ff       	call   c0007801 <malloc>
c0010d5f:	89 c3                	mov    ebx,eax
c0010d61:	58                   	pop    eax
c0010d62:	5a                   	pop    edx
c0010d63:	68 00 50 00 00       	push   0x5000
c0010d68:	53                   	push   ebx
c0010d69:	e8 98 73 ff ff       	call   c0008106 <Pipe::Pipe(int)>
c0010d6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d71:	e8 88 80 ff ff       	call   c0008dfe <UnixFile::getFileDescriptor()>
c0010d76:	89 07                	mov    DWORD PTR [edi],eax
c0010d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7b:	e8 7e 80 ff ff       	call   c0008dfe <UnixFile::getFileDescriptor()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	89 06                	mov    DWORD PTR [esi],eax
c0010d85:	31 d2                	xor    edx,edx
c0010d87:	5b                   	pop    ebx
c0010d88:	31 c0                	xor    eax,eax
c0010d8a:	5e                   	pop    esi
c0010d8b:	5f                   	pop    edi
c0010d8c:	c3                   	ret    

c0010d8d <SysGetUnixTime(regs*)>:
c0010d8d:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0010d92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d9c:	e9 81 a6 ff ff       	jmp    c000b422 <Clock::timeInSecondsLocal()>

c0010da1 <string_ends_with(char const*, char const*)>:
c0010da1:	57                   	push   edi
c0010da2:	56                   	push   esi
c0010da3:	53                   	push   ebx
c0010da4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010da8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	53                   	push   ebx
c0010db0:	e8 8b f7 fe ff       	call   c0000540 <strlen>
c0010db5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010db8:	89 c6                	mov    esi,eax
c0010dba:	e8 81 f7 fe ff       	call   c0000540 <strlen>
c0010dbf:	83 c4 10             	add    esp,0x10
c0010dc2:	39 c6                	cmp    esi,eax
c0010dc4:	7d 06                	jge    c0010dcc <string_ends_with(char const*, char const*)+0x2b>
c0010dc6:	5b                   	pop    ebx
c0010dc7:	31 c0                	xor    eax,eax
c0010dc9:	5e                   	pop    esi
c0010dca:	5f                   	pop    edi
c0010dcb:	c3                   	ret    
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	29 c6                	sub    esi,eax
c0010dd1:	57                   	push   edi
c0010dd2:	01 f3                	add    ebx,esi
c0010dd4:	53                   	push   ebx
c0010dd5:	e8 06 f9 fe ff       	call   c00006e0 <strcmp>
c0010dda:	83 c4 10             	add    esp,0x10
c0010ddd:	85 c0                	test   eax,eax
c0010ddf:	5b                   	pop    ebx
c0010de0:	0f 94 c0             	sete   al
c0010de3:	5e                   	pop    esi
c0010de4:	25 ff 00 00 00       	and    eax,0xff
c0010de9:	5f                   	pop    edi
c0010dea:	c3                   	ret    

c0010deb <SysOpen(regs*)>:
c0010deb:	56                   	push   esi
c0010dec:	53                   	push   ebx
c0010ded:	81 ec 04 01 00 00    	sub    esp,0x104
c0010df3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010dfa:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010dfd:	85 c9                	test   ecx,ecx
c0010dff:	0f 84 b9 01 00 00    	je     c0010fbe <SysOpen(regs*)+0x1d3>
c0010e05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e08:	85 c0                	test   eax,eax
c0010e0a:	0f 84 ae 01 00 00    	je     c0010fbe <SysOpen(regs*)+0x1d3>
c0010e10:	52                   	push   edx
c0010e11:	68 ad e2 01 c0       	push   0xc001e2ad
c0010e16:	50                   	push   eax
c0010e17:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e1b:	56                   	push   esi
c0010e1c:	e8 47 9a ff ff       	call   c000a868 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e21:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e24:	e8 17 f7 fe ff       	call   c0000540 <strlen>
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	48                   	dec    eax
c0010e2d:	74 1d                	je     c0010e4c <SysOpen(regs*)+0x61>
c0010e2f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e32:	eb 0f                	jmp    c0010e43 <SysOpen(regs*)+0x58>
c0010e34:	80 fa 3a             	cmp    dl,0x3a
c0010e37:	74 0f                	je     c0010e48 <SysOpen(regs*)+0x5d>
c0010e39:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e3d:	48                   	dec    eax
c0010e3e:	74 0c                	je     c0010e4c <SysOpen(regs*)+0x61>
c0010e40:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e43:	80 fa 2e             	cmp    dl,0x2e
c0010e46:	75 ec                	jne    c0010e34 <SysOpen(regs*)+0x49>
c0010e48:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e4c:	83 ec 08             	sub    esp,0x8
c0010e4f:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010e54:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e57:	50                   	push   eax
c0010e58:	e8 44 ff ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	85 c0                	test   eax,eax
c0010e62:	74 1d                	je     c0010e81 <SysOpen(regs*)+0x96>
c0010e64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e67:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e74:	81 c4 04 01 00 00    	add    esp,0x104
c0010e7a:	31 c0                	xor    eax,eax
c0010e7c:	31 d2                	xor    edx,edx
c0010e7e:	5b                   	pop    ebx
c0010e7f:	5e                   	pop    esi
c0010e80:	c3                   	ret    
c0010e81:	83 ec 08             	sub    esp,0x8
c0010e84:	68 b6 e2 01 c0       	push   0xc001e2b6
c0010e89:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e8c:	50                   	push   eax
c0010e8d:	e8 0f ff ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010e92:	83 c4 10             	add    esp,0x10
c0010e95:	85 c0                	test   eax,eax
c0010e97:	75 cb                	jne    c0010e64 <SysOpen(regs*)+0x79>
c0010e99:	83 ec 08             	sub    esp,0x8
c0010e9c:	68 b2 e2 01 c0       	push   0xc001e2b2
c0010ea1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ea4:	50                   	push   eax
c0010ea5:	e8 36 f8 fe ff       	call   c00006e0 <strcmp>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	85 c0                	test   eax,eax
c0010eaf:	74 b3                	je     c0010e64 <SysOpen(regs*)+0x79>
c0010eb1:	83 ec 08             	sub    esp,0x8
c0010eb4:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010eb9:	56                   	push   esi
c0010eba:	e8 e2 fe ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	75 9e                	jne    c0010e64 <SysOpen(regs*)+0x79>
c0010ec6:	83 ec 08             	sub    esp,0x8
c0010ec9:	68 bb e2 01 c0       	push   0xc001e2bb
c0010ece:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ed1:	50                   	push   eax
c0010ed2:	e8 ca fe ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	85 c0                	test   eax,eax
c0010edc:	0f 85 ef 00 00 00    	jne    c0010fd1 <SysOpen(regs*)+0x1e6>
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 c0 e2 01 c0       	push   0xc001e2c0
c0010eea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eed:	50                   	push   eax
c0010eee:	e8 ae fe ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	85 c0                	test   eax,eax
c0010ef8:	0f 85 d3 00 00 00    	jne    c0010fd1 <SysOpen(regs*)+0x1e6>
c0010efe:	83 ec 08             	sub    esp,0x8
c0010f01:	68 bc e2 01 c0       	push   0xc001e2bc
c0010f06:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f09:	51                   	push   ecx
c0010f0a:	e8 d1 f7 fe ff       	call   c00006e0 <strcmp>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	85 c0                	test   eax,eax
c0010f14:	0f 84 b7 00 00 00    	je     c0010fd1 <SysOpen(regs*)+0x1e6>
c0010f1a:	83 ec 08             	sub    esp,0x8
c0010f1d:	68 bb e2 01 c0       	push   0xc001e2bb
c0010f22:	56                   	push   esi
c0010f23:	e8 79 fe ff ff       	call   c0010da1 <string_ends_with(char const*, char const*)>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	85 c0                	test   eax,eax
c0010f2d:	0f 85 9e 00 00 00    	jne    c0010fd1 <SysOpen(regs*)+0x1e6>
c0010f33:	83 ec 0c             	sub    esp,0xc
c0010f36:	68 14 01 00 00       	push   0x114
c0010f3b:	e8 c1 68 ff ff       	call   c0007801 <malloc>
c0010f40:	83 c4 0c             	add    esp,0xc
c0010f43:	89 c6                	mov    esi,eax
c0010f45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f4d:	50                   	push   eax
c0010f4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f51:	52                   	push   edx
c0010f52:	56                   	push   esi
c0010f53:	e8 ba 9a ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	85 f6                	test   esi,esi
c0010f5d:	74 5f                	je     c0010fbe <SysOpen(regs*)+0x1d3>
c0010f5f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f62:	89 d0                	mov    eax,edx
c0010f64:	25 ff 00 00 00       	and    eax,0xff
c0010f69:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f6c:	89 d0                	mov    eax,edx
c0010f6e:	83 e0 01             	and    eax,0x1
c0010f71:	f6 c2 02             	test   dl,0x2
c0010f74:	74 03                	je     c0010f79 <SysOpen(regs*)+0x18e>
c0010f76:	83 c8 02             	or     eax,0x2
c0010f79:	f6 c2 04             	test   dl,0x4
c0010f7c:	74 03                	je     c0010f81 <SysOpen(regs*)+0x196>
c0010f7e:	83 c8 04             	or     eax,0x4
c0010f81:	f6 c2 08             	test   dl,0x8
c0010f84:	74 03                	je     c0010f89 <SysOpen(regs*)+0x19e>
c0010f86:	83 c8 0a             	or     eax,0xa
c0010f89:	83 e2 10             	and    edx,0x10
c0010f8c:	74 03                	je     c0010f91 <SysOpen(regs*)+0x1a6>
c0010f8e:	83 c8 12             	or     eax,0x12
c0010f91:	83 ec 08             	sub    esp,0x8
c0010f94:	50                   	push   eax
c0010f95:	56                   	push   esi
c0010f96:	e8 37 9b ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	85 c0                	test   eax,eax
c0010fa0:	75 1c                	jne    c0010fbe <SysOpen(regs*)+0x1d3>
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	56                   	push   esi
c0010fa6:	e8 53 7e ff ff       	call   c0008dfe <UnixFile::getFileDescriptor()>
c0010fab:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	89 02                	mov    DWORD PTR [edx],eax
c0010fb3:	c1 f8 1f             	sar    eax,0x1f
c0010fb6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010fb9:	e9 b6 fe ff ff       	jmp    c0010e74 <SysOpen(regs*)+0x89>
c0010fbe:	81 c4 04 01 00 00    	add    esp,0x104
c0010fc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fce:	5b                   	pop    ebx
c0010fcf:	5e                   	pop    esi
c0010fd0:	c3                   	ret    
c0010fd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fd4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010fda:	e9 8e fe ff ff       	jmp    c0010e6d <SysOpen(regs*)+0x82>

c0010fdf <KeSystemCall(regs*, void*)>:
c0010fdf:	53                   	push   ebx
c0010fe0:	83 ec 08             	sub    esp,0x8
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fea:	83 f8 30             	cmp    eax,0x30
c0010fed:	77 16                	ja     c0011005 <KeSystemCall(regs*, void*)+0x26>
c0010fef:	8b 14 85 60 f4 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0ba0]
c0010ff6:	85 d2                	test   edx,edx
c0010ff8:	74 0b                	je     c0011005 <KeSystemCall(regs*, void*)+0x26>
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	53                   	push   ebx
c0010ffe:	ff d2                	call   edx
c0011000:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011003:	eb 0d                	jmp    c0011012 <KeSystemCall(regs*, void*)+0x33>
c0011005:	52                   	push   edx
c0011006:	52                   	push   edx
c0011007:	50                   	push   eax
c0011008:	68 c5 e2 01 c0       	push   0xc001e2c5
c001100d:	e8 8a 94 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0011012:	83 c4 10             	add    esp,0x10
c0011015:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001101a:	31 d2                	xor    edx,edx
c001101c:	83 c4 08             	add    esp,0x8
c001101f:	5b                   	pop    ebx
c0011020:	c3                   	ret    

c0011021 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011021:	55                   	push   ebp
c0011022:	57                   	push   edi
c0011023:	56                   	push   esi
c0011024:	53                   	push   ebx
c0011025:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001102b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011032:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011034:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011037:	80 fb 40             	cmp    bl,0x40
c001103a:	75 1b                	jne    c0011057 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001103c:	8a 16                	mov    dl,BYTE PTR [esi]
c001103e:	84 d2                	test   dl,dl
c0011040:	0f 84 f1 00 00 00    	je     c0011137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011046:	8d 46 01             	lea    eax,[esi+0x1]
c0011049:	80 fa 3a             	cmp    dl,0x3a
c001104c:	74 04                	je     c0011052 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001104e:	89 c6                	mov    esi,eax
c0011050:	eb ea                	jmp    c001103c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011052:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011055:	89 c6                	mov    esi,eax
c0011057:	50                   	push   eax
c0011058:	6a 40                	push   0x40
c001105a:	6a 00                	push   0x0
c001105c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011060:	50                   	push   eax
c0011061:	e8 6a f4 fe ff       	call   c00004d0 <memset>
c0011066:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001106d:	31 c0                	xor    eax,eax
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011074:	84 c9                	test   cl,cl
c0011076:	0f 84 bb 00 00 00    	je     c0011137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001107c:	3d c7 00 00 00       	cmp    eax,0xc7
c0011081:	0f 8f b0 00 00 00    	jg     c0011137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011087:	80 f9 0a             	cmp    cl,0xa
c001108a:	0f 85 98 00 00 00    	jne    c0011128 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011090:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011095:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011099:	a8 df                	test   al,0xdf
c001109b:	0f 94 c1             	sete   cl
c001109e:	3c 23                	cmp    al,0x23
c00110a0:	0f 94 c2             	sete   dl
c00110a3:	08 d1                	or     cl,dl
c00110a5:	75 4a                	jne    c00110f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110a7:	8d 50 f7             	lea    edx,[eax-0x9]
c00110aa:	80 fa 01             	cmp    dl,0x1
c00110ad:	76 42                	jbe    c00110f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110af:	3c 5b                	cmp    al,0x5b
c00110b1:	75 42                	jne    c00110f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00110b3:	80 fb 40             	cmp    bl,0x40
c00110b6:	75 39                	jne    c00110f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110b8:	83 ec 0c             	sub    esp,0xc
c00110bb:	8d 54 24 65          	lea    edx,[esp+0x65]
c00110bf:	52                   	push   edx
c00110c0:	e8 7b f4 fe ff       	call   c0000540 <strlen>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	83 f8 3f             	cmp    eax,0x3f
c00110cb:	77 6a                	ja     c0011137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110cd:	50                   	push   eax
c00110ce:	50                   	push   eax
c00110cf:	8d 54 24 61          	lea    edx,[esp+0x61]
c00110d3:	52                   	push   edx
c00110d4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110d8:	52                   	push   edx
c00110d9:	e8 22 f5 fe ff       	call   c0000600 <strcpy>
c00110de:	58                   	pop    eax
c00110df:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110e3:	52                   	push   edx
c00110e4:	e8 57 f4 fe ff       	call   c0000540 <strlen>
c00110e9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	31 d2                	xor    edx,edx
c00110f3:	eb 3a                	jmp    c001112f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00110f5:	80 fb 40             	cmp    bl,0x40
c00110f8:	74 06                	je     c0011100 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00110fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00110fe:	eb 20                	jmp    c0011120 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011100:	50                   	push   eax
c0011101:	50                   	push   eax
c0011102:	55                   	push   ebp
c0011103:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011107:	50                   	push   eax
c0011108:	e8 d3 f5 fe ff       	call   c00006e0 <strcmp>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	85 c0                	test   eax,eax
c0011112:	75 dd                	jne    c00110f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011114:	eb e4                	jmp    c00110fa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011116:	8d 50 01             	lea    edx,[eax+0x1]
c0011119:	80 f9 3d             	cmp    cl,0x3d
c001111c:	74 1d                	je     c001113b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001111e:	89 d0                	mov    eax,edx
c0011120:	8a 08                	mov    cl,BYTE PTR [eax]
c0011122:	84 c9                	test   cl,cl
c0011124:	75 f0                	jne    c0011116 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011126:	eb 0f                	jmp    c0011137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011128:	8d 50 01             	lea    edx,[eax+0x1]
c001112b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001112f:	47                   	inc    edi
c0011130:	89 d0                	mov    eax,edx
c0011132:	e9 3b ff ff ff       	jmp    c0011072 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011137:	31 c0                	xor    eax,eax
c0011139:	eb 33                	jmp    c001116e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001113b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001113f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011142:	50                   	push   eax
c0011143:	50                   	push   eax
c0011144:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011148:	50                   	push   eax
c0011149:	56                   	push   esi
c001114a:	e8 91 f5 fe ff       	call   c00006e0 <strcmp>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	85 c0                	test   eax,eax
c0011154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011158:	75 97                	jne    c00110f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001115a:	51                   	push   ecx
c001115b:	51                   	push   ecx
c001115c:	52                   	push   edx
c001115d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011164:	e8 97 f4 fe ff       	call   c0000600 <strcpy>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	b0 01                	mov    al,0x1
c001116e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011174:	5b                   	pop    ebx
c0011175:	5e                   	pop    esi
c0011176:	5f                   	pop    edi
c0011177:	5d                   	pop    ebp
c0011178:	c3                   	ret    

c0011179 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011179:	57                   	push   edi
c001117a:	56                   	push   esi
c001117b:	53                   	push   ebx
c001117c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011182:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011189:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011190:	53                   	push   ebx
c0011191:	e8 aa f3 fe ff       	call   c0000540 <strlen>
c0011196:	89 34 24             	mov    DWORD PTR [esp],esi
c0011199:	89 c7                	mov    edi,eax
c001119b:	e8 a0 f3 fe ff       	call   c0000540 <strlen>
c00111a0:	83 c4 10             	add    esp,0x10
c00111a3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00111a7:	3d ff 00 00 00       	cmp    eax,0xff
c00111ac:	0f 87 d3 00 00 00    	ja     c0011285 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111b2:	57                   	push   edi
c00111b3:	57                   	push   edi
c00111b4:	56                   	push   esi
c00111b5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00111b9:	56                   	push   esi
c00111ba:	e8 41 f4 fe ff       	call   c0000600 <strcpy>
c00111bf:	58                   	pop    eax
c00111c0:	5a                   	pop    edx
c00111c1:	68 76 e5 01 c0       	push   0xc001e576
c00111c6:	56                   	push   esi
c00111c7:	e8 f4 f5 fe ff       	call   c00007c0 <strcat>
c00111cc:	59                   	pop    ecx
c00111cd:	5f                   	pop    edi
c00111ce:	53                   	push   ebx
c00111cf:	56                   	push   esi
c00111d0:	e8 eb f5 fe ff       	call   c00007c0 <strcat>
c00111d5:	58                   	pop    eax
c00111d6:	5a                   	pop    edx
c00111d7:	68 d9 e2 01 c0       	push   0xc001e2d9
c00111dc:	56                   	push   esi
c00111dd:	e8 de f5 fe ff       	call   c00007c0 <strcat>
c00111e2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00111e9:	e8 13 66 ff ff       	call   c0007801 <malloc>
c00111ee:	83 c4 0c             	add    esp,0xc
c00111f1:	89 c3                	mov    ebx,eax
c00111f3:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c00111f9:	56                   	push   esi
c00111fa:	50                   	push   eax
c00111fb:	e8 12 98 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0011200:	83 c4 10             	add    esp,0x10
c0011203:	85 db                	test   ebx,ebx
c0011205:	74 7e                	je     c0011285 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011207:	51                   	push   ecx
c0011208:	51                   	push   ecx
c0011209:	6a 01                	push   0x1
c001120b:	53                   	push   ebx
c001120c:	e8 c1 98 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	85 c0                	test   eax,eax
c0011216:	74 08                	je     c0011220 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011218:	83 ec 0c             	sub    esp,0xc
c001121b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001121d:	53                   	push   ebx
c001121e:	eb 5f                	jmp    c001127f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011220:	52                   	push   edx
c0011221:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011225:	50                   	push   eax
c0011226:	8d 44 24 20          	lea    eax,[esp+0x20]
c001122a:	50                   	push   eax
c001122b:	53                   	push   ebx
c001122c:	e8 4d 9b ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c0011231:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	89 c1                	mov    ecx,eax
c001123a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001123e:	74 31                	je     c0011271 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	50                   	push   eax
c0011244:	e8 b8 65 ff ff       	call   c0007801 <malloc>
c0011249:	89 c6                	mov    esi,eax
c001124b:	58                   	pop    eax
c001124c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001124e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011252:	52                   	push   edx
c0011253:	56                   	push   esi
c0011254:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011258:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001125c:	53                   	push   ebx
c001125d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011260:	83 c4 20             	add    esp,0x20
c0011263:	85 c0                	test   eax,eax
c0011265:	75 0a                	jne    c0011271 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001126b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001126f:	74 18                	je     c0011289 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	53                   	push   ebx
c0011275:	e8 b6 98 ff ff       	call   c000ab30 <File::close()>
c001127a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001127f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011282:	83 c4 10             	add    esp,0x10
c0011285:	31 c0                	xor    eax,eax
c0011287:	eb 3b                	jmp    c00112c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	53                   	push   ebx
c001128d:	e8 9e 98 ff ff       	call   c000ab30 <File::close()>
c0011292:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011297:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001129a:	83 c4 0c             	add    esp,0xc
c001129d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112a4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112ab:	56                   	push   esi
c00112ac:	e8 70 fd ff ff       	call   c0011021 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00112b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00112b4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00112b8:	e8 54 65 ff ff       	call   c0007811 <free>
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00112c4:	81 c4 20 01 00 00    	add    esp,0x120
c00112ca:	5b                   	pop    ebx
c00112cb:	5e                   	pop    esi
c00112cc:	5f                   	pop    edi
c00112cd:	c3                   	ret    

c00112ce <Reg::getLine(char*, char*, char*)>:
c00112ce:	57                   	push   edi
c00112cf:	56                   	push   esi
c00112d0:	53                   	push   ebx
c00112d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00112d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00112dd:	57                   	push   edi
c00112de:	56                   	push   esi
c00112df:	53                   	push   ebx
c00112e0:	68 de e2 01 c0       	push   0xc001e2de
c00112e5:	e8 8f fe ff ff       	call   c0011179 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	84 c0                	test   al,al
c00112ef:	75 10                	jne    c0011301 <Reg::getLine(char*, char*, char*)+0x33>
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	68 03 e3 01 c0       	push   0xc001e303
c00112f9:	e8 7b fe ff ff       	call   c0011179 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112fe:	83 c4 10             	add    esp,0x10
c0011301:	5b                   	pop    ebx
c0011302:	5e                   	pop    esi
c0011303:	5f                   	pop    edi
c0011304:	c3                   	ret    

c0011305 <Reg::readInt(char*, char*, int*)>:
c0011305:	55                   	push   ebp
c0011306:	57                   	push   edi
c0011307:	56                   	push   esi
c0011308:	53                   	push   ebx
c0011309:	81 ec f0 00 00 00    	sub    esp,0xf0
c001130f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011313:	57                   	push   edi
c0011314:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001131b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011322:	e8 a7 ff ff ff       	call   c00112ce <Reg::getLine(char*, char*, char*)>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	84 c0                	test   al,al
c001132c:	0f 84 b3 00 00 00    	je     c00113e5 <Reg::readInt(char*, char*, int*)+0xe0>
c0011332:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011336:	80 fa 2b             	cmp    dl,0x2b
c0011339:	74 0c                	je     c0011347 <Reg::readInt(char*, char*, int*)+0x42>
c001133b:	80 fa 2d             	cmp    dl,0x2d
c001133e:	75 0e                	jne    c001134e <Reg::readInt(char*, char*, int*)+0x49>
c0011340:	ba 01 00 00 00       	mov    edx,0x1
c0011345:	eb 0b                	jmp    c0011352 <Reg::readInt(char*, char*, int*)+0x4d>
c0011347:	ba 01 00 00 00       	mov    edx,0x1
c001134c:	eb 02                	jmp    c0011350 <Reg::readInt(char*, char*, int*)+0x4b>
c001134e:	31 d2                	xor    edx,edx
c0011350:	31 c0                	xor    eax,eax
c0011352:	be 0a 00 00 00       	mov    esi,0xa
c0011357:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001135c:	75 20                	jne    c001137e <Reg::readInt(char*, char*, int*)+0x79>
c001135e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011362:	80 f9 78             	cmp    cl,0x78
c0011365:	75 0a                	jne    c0011371 <Reg::readInt(char*, char*, int*)+0x6c>
c0011367:	83 c2 02             	add    edx,0x2
c001136a:	be 10 00 00 00       	mov    esi,0x10
c001136f:	eb 0d                	jmp    c001137e <Reg::readInt(char*, char*, int*)+0x79>
c0011371:	80 f9 62             	cmp    cl,0x62
c0011374:	75 08                	jne    c001137e <Reg::readInt(char*, char*, int*)+0x79>
c0011376:	83 c2 02             	add    edx,0x2
c0011379:	be 02 00 00 00       	mov    esi,0x2
c001137e:	01 d7                	add    edi,edx
c0011380:	31 d2                	xor    edx,edx
c0011382:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011384:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011388:	80 fb 0d             	cmp    bl,0xd
c001138b:	0f 94 c3             	sete   bl
c001138e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011393:	0f 94 c1             	sete   cl
c0011396:	08 cb                	or     bl,cl
c0011398:	75 3a                	jne    c00113d4 <Reg::readInt(char*, char*, int*)+0xcf>
c001139a:	0f af d6             	imul   edx,esi
c001139d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00113a2:	83 fe 10             	cmp    esi,0x10
c00113a5:	75 26                	jne    c00113cd <Reg::readInt(char*, char*, int*)+0xc8>
c00113a7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113ab:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00113ae:	89 e9                	mov    ecx,ebp
c00113b0:	80 f9 05             	cmp    cl,0x5
c00113b3:	77 06                	ja     c00113bb <Reg::readInt(char*, char*, int*)+0xb6>
c00113b5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00113b9:	eb 16                	jmp    c00113d1 <Reg::readInt(char*, char*, int*)+0xcc>
c00113bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113bf:	83 e9 61             	sub    ecx,0x61
c00113c2:	80 f9 05             	cmp    cl,0x5
c00113c5:	77 06                	ja     c00113cd <Reg::readInt(char*, char*, int*)+0xc8>
c00113c7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00113cb:	eb 04                	jmp    c00113d1 <Reg::readInt(char*, char*, int*)+0xcc>
c00113cd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00113d1:	47                   	inc    edi
c00113d2:	eb ae                	jmp    c0011382 <Reg::readInt(char*, char*, int*)+0x7d>
c00113d4:	84 c0                	test   al,al
c00113d6:	74 02                	je     c00113da <Reg::readInt(char*, char*, int*)+0xd5>
c00113d8:	f7 da                	neg    edx
c00113da:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00113e1:	89 10                	mov    DWORD PTR [eax],edx
c00113e3:	88 d8                	mov    al,bl
c00113e5:	81 c4 ec 00 00 00    	add    esp,0xec
c00113eb:	5b                   	pop    ebx
c00113ec:	5e                   	pop    esi
c00113ed:	5f                   	pop    edi
c00113ee:	5d                   	pop    ebp
c00113ef:	c3                   	ret    

c00113f0 <Reg::readString(char*, char*, char*, int)>:
c00113f0:	57                   	push   edi
c00113f1:	56                   	push   esi
c00113f2:	53                   	push   ebx
c00113f3:	81 ec d4 00 00 00    	sub    esp,0xd4
c00113f9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011400:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011404:	57                   	push   edi
c0011405:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001140c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011413:	e8 b6 fe ff ff       	call   c00112ce <Reg::getLine(char*, char*, char*)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	89 c6                	mov    esi,eax
c001141d:	84 c0                	test   al,al
c001141f:	74 44                	je     c0011465 <Reg::readString(char*, char*, char*, int)+0x75>
c0011421:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011428:	31 c0                	xor    eax,eax
c001142a:	4a                   	dec    edx
c001142b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001142e:	84 c9                	test   cl,cl
c0011430:	74 0f                	je     c0011441 <Reg::readString(char*, char*, char*, int)+0x51>
c0011432:	39 c2                	cmp    edx,eax
c0011434:	7e 0b                	jle    c0011441 <Reg::readString(char*, char*, char*, int)+0x51>
c0011436:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011439:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001143e:	40                   	inc    eax
c001143f:	eb ea                	jmp    c001142b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011441:	83 ec 0c             	sub    esp,0xc
c0011444:	53                   	push   ebx
c0011445:	e8 f6 f0 fe ff       	call   c0000540 <strlen>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011452:	75 11                	jne    c0011465 <Reg::readString(char*, char*, char*, int)+0x75>
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	53                   	push   ebx
c0011458:	e8 e3 f0 fe ff       	call   c0000540 <strlen>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011465:	81 c4 d0 00 00 00    	add    esp,0xd0
c001146b:	89 f0                	mov    eax,esi
c001146d:	5b                   	pop    ebx
c001146e:	5e                   	pop    esi
c001146f:	5f                   	pop    edi
c0011470:	c3                   	ret    

c0011471 <Reg::readBool(char*, char*, bool*)>:
c0011471:	83 ec 20             	sub    esp,0x20
c0011474:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011478:	50                   	push   eax
c0011479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001147d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011481:	e8 7f fe ff ff       	call   c0011305 <Reg::readInt(char*, char*, int*)>
c0011486:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001148b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001148f:	0f 95 02             	setne  BYTE PTR [edx]
c0011492:	83 c4 2c             	add    esp,0x2c
c0011495:	c3                   	ret    

c0011496 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011496:	53                   	push   ebx
c0011497:	83 ec 1c             	sub    esp,0x1c
c001149a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001149e:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114a2:	50                   	push   eax
c00114a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114ab:	e8 c1 ff ff ff       	call   c0011471 <Reg::readBool(char*, char*, bool*)>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	84 c0                	test   al,al
c00114b5:	74 04                	je     c00114bb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00114b7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00114bb:	88 d8                	mov    al,bl
c00114bd:	83 c4 18             	add    esp,0x18
c00114c0:	5b                   	pop    ebx
c00114c1:	c3                   	ret    

c00114c2 <Reg::readIntWithDefault(char*, char*, int)>:
c00114c2:	53                   	push   ebx
c00114c3:	83 ec 1c             	sub    esp,0x1c
c00114c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114ce:	50                   	push   eax
c00114cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114d7:	e8 29 fe ff ff       	call   c0011305 <Reg::readInt(char*, char*, int*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	84 c0                	test   al,al
c00114e1:	74 04                	je     c00114e7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00114e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114e7:	89 d8                	mov    eax,ebx
c00114e9:	83 c4 18             	add    esp,0x18
c00114ec:	5b                   	pop    ebx
c00114ed:	c3                   	ret    

c00114ee <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00114ee:	57                   	push   edi
c00114ef:	56                   	push   esi
c00114f0:	56                   	push   esi
c00114f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00114f5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00114f9:	56                   	push   esi
c00114fa:	57                   	push   edi
c00114fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011503:	e8 e8 fe ff ff       	call   c00113f0 <Reg::readString(char*, char*, char*, int)>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	84 c0                	test   al,al
c001150d:	75 1a                	jne    c0011529 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001150f:	51                   	push   ecx
c0011510:	56                   	push   esi
c0011511:	6a 00                	push   0x0
c0011513:	57                   	push   edi
c0011514:	e8 b7 ef fe ff       	call   c00004d0 <memset>
c0011519:	8d 4e ff             	lea    ecx,[esi-0x1]
c001151c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011520:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011522:	83 c4 10             	add    esp,0x10
c0011525:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011529:	89 f8                	mov    eax,edi
c001152b:	5a                   	pop    edx
c001152c:	5e                   	pop    esi
c001152d:	5f                   	pop    edi
c001152e:	c3                   	ret    

c001152f <SysEject(regs*)>:
c001152f:	83 ec 0c             	sub    esp,0xc
c0011532:	83 ca ff             	or     edx,0xffffffff
c0011535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011539:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001153c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011541:	83 e9 41             	sub    ecx,0x41
c0011544:	83 f9 19             	cmp    ecx,0x19
c0011547:	77 18                	ja     c0011561 <SysEject(regs*)+0x32>
c0011549:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c0011550:	85 c9                	test   ecx,ecx
c0011552:	74 0d                	je     c0011561 <SysEject(regs*)+0x32>
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	51                   	push   ecx
c0011558:	e8 bd b5 ff ff       	call   c000cb1a <LogicalDisk::eject()>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	99                   	cdq    
c0011561:	83 c4 0c             	add    esp,0xc
c0011564:	c3                   	ret    

c0011565 <SysExit(regs*)>:
c0011565:	83 ec 18             	sub    esp,0x18
c0011568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001156c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001156f:	e8 b0 26 00 00       	call   c0013c24 <terminateTask(int)>
c0011574:	83 c8 ff             	or     eax,0xffffffff
c0011577:	83 c4 1c             	add    esp,0x1c
c001157a:	89 c2                	mov    edx,eax
c001157c:	c3                   	ret    

c001157d <SysGetCwd(regs*)>:
c001157d:	83 ec 10             	sub    esp,0x10
c0011580:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011584:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011587:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001158a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001158f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011592:	e8 7d 92 ff ff       	call   c000a814 <Fs::getcwd(Process*, char*, int)>
c0011597:	83 c4 1c             	add    esp,0x1c
c001159a:	99                   	cdq    
c001159b:	c3                   	ret    

c001159c <SysGetPID(regs*)>:
c001159c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00115a6:	99                   	cdq    
c00115a7:	c3                   	ret    

c00115a8 <SysGetRAMData(regs*)>:
c00115a8:	8b 0d 88 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020588
c00115ae:	69 05 84 05 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020584,0xc8
c00115b8:	99                   	cdq    
c00115b9:	f7 f9                	idiv   ecx
c00115bb:	c1 e0 18             	shl    eax,0x18
c00115be:	09 c8                	or     eax,ecx
c00115c0:	99                   	cdq    
c00115c1:	c3                   	ret    

c00115c2 <SysGetVGAPtr(regs*)>:
c00115c2:	55                   	push   ebp
c00115c3:	57                   	push   edi
c00115c4:	56                   	push   esi
c00115c5:	53                   	push   ebx
c00115c6:	83 ec 18             	sub    esp,0x18
c00115c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00115d0:	e8 4f 21 00 00       	call   c0013724 <Thr::processFromPID(int)>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	89 c1                	mov    ecx,eax
c00115da:	b8 01 00 00 00       	mov    eax,0x1
c00115df:	85 c9                	test   ecx,ecx
c00115e1:	74 57                	je     c001163a <SysGetVGAPtr(regs*)+0x78>
c00115e3:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00115e9:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00115ed:	74 0c                	je     c00115fb <SysGetVGAPtr(regs*)+0x39>
c00115ef:	83 ec 0c             	sub    esp,0xc
c00115f2:	55                   	push   ebp
c00115f3:	e8 47 6e ff ff       	call   c000843f <setActiveTerminal(VgaText*)>
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00115fe:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011601:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011608:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001160b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001160e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011614:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011617:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001161a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011620:	50                   	push   eax
c0011621:	50                   	push   eax
c0011622:	68 1e e3 01 c0       	push   0xc001e31e
c0011627:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001162a:	05 a8 0f 00 00       	add    eax,0xfa8
c001162f:	50                   	push   eax
c0011630:	e8 cb ef fe ff       	call   c0000600 <strcpy>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	31 c0                	xor    eax,eax
c001163a:	83 c4 0c             	add    esp,0xc
c001163d:	31 d2                	xor    edx,edx
c001163f:	5b                   	pop    ebx
c0011640:	5e                   	pop    esi
c0011641:	5f                   	pop    edi
c0011642:	5d                   	pop    ebp
c0011643:	c3                   	ret    

c0011644 <SysLoadDLL(regs*)>:
c0011644:	56                   	push   esi
c0011645:	53                   	push   ebx
c0011646:	31 d2                	xor    edx,edx
c0011648:	51                   	push   ecx
c0011649:	b8 01 00 00 00       	mov    eax,0x1
c001164e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011652:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011656:	0f 84 8c 00 00 00    	je     c00116e8 <SysLoadDLL(regs*)+0xa4>
c001165c:	83 ec 0c             	sub    esp,0xc
c001165f:	68 14 01 00 00       	push   0x114
c0011664:	e8 98 61 ff ff       	call   c0007801 <malloc>
c0011669:	83 c4 0c             	add    esp,0xc
c001166c:	89 c3                	mov    ebx,eax
c001166e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011673:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011676:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011679:	53                   	push   ebx
c001167a:	e8 93 93 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	31 d2                	xor    edx,edx
c0011684:	b8 02 00 00 00       	mov    eax,0x2
c0011689:	85 db                	test   ebx,ebx
c001168b:	74 5b                	je     c00116e8 <SysLoadDLL(regs*)+0xa4>
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	53                   	push   ebx
c0011691:	e8 aa 96 ff ff       	call   c000ad40 <File::exists()>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	84 c0                	test   al,al
c001169b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169d:	75 11                	jne    c00116b0 <SysLoadDLL(regs*)+0x6c>
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	53                   	push   ebx
c00116a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a6:	83 c4 10             	add    esp,0x10
c00116a9:	b8 03 00 00 00       	mov    eax,0x3
c00116ae:	eb 36                	jmp    c00116e6 <SysLoadDLL(regs*)+0xa2>
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	53                   	push   ebx
c00116b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b7:	58                   	pop    eax
c00116b8:	5a                   	pop    edx
c00116b9:	6a 00                	push   0x0
c00116bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00116be:	e8 4b 12 00 00       	call   c001290e <Thr::loadDLL(char const*, bool)>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	89 c1                	mov    ecx,eax
c00116c8:	31 d2                	xor    edx,edx
c00116ca:	b8 04 00 00 00       	mov    eax,0x4
c00116cf:	85 c9                	test   ecx,ecx
c00116d1:	74 15                	je     c00116e8 <SysLoadDLL(regs*)+0xa4>
c00116d3:	53                   	push   ebx
c00116d4:	53                   	push   ebx
c00116d5:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00116db:	51                   	push   ecx
c00116dc:	e8 5e 14 00 00       	call   c0012b3f <Thr::executeDLL(unsigned long, void*)>
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	31 c0                	xor    eax,eax
c00116e6:	31 d2                	xor    edx,edx
c00116e8:	59                   	pop    ecx
c00116e9:	5b                   	pop    ebx
c00116ea:	5e                   	pop    esi
c00116eb:	c3                   	ret    

c00116ec <SysRead(regs*)>:
c00116ec:	57                   	push   edi
c00116ed:	56                   	push   esi
c00116ee:	53                   	push   ebx
c00116ef:	83 ec 10             	sub    esp,0x10
c00116f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116f9:	83 f8 02             	cmp    eax,0x2
c00116fc:	77 10                	ja     c001170e <SysRead(regs*)+0x22>
c00116fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011703:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011706:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001170c:	eb 0e                	jmp    c001171c <SysRead(regs*)+0x30>
c001170e:	83 ec 0c             	sub    esp,0xc
c0011711:	50                   	push   eax
c0011712:	e8 dc 79 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	89 c1                	mov    ecx,eax
c001171c:	83 c8 ff             	or     eax,0xffffffff
c001171f:	85 c9                	test   ecx,ecx
c0011721:	89 c2                	mov    edx,eax
c0011723:	74 28                	je     c001174d <SysRead(regs*)+0x61>
c0011725:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001172d:	31 ff                	xor    edi,edi
c001172f:	83 ec 0c             	sub    esp,0xc
c0011732:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011734:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011738:	52                   	push   edx
c0011739:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001173c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001173f:	57                   	push   edi
c0011740:	56                   	push   esi
c0011741:	51                   	push   ecx
c0011742:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011745:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011749:	83 c4 20             	add    esp,0x20
c001174c:	99                   	cdq    
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	5b                   	pop    ebx
c0011751:	5e                   	pop    esi
c0011752:	5f                   	pop    edi
c0011753:	c3                   	ret    

c0011754 <SysSbrk(regs*)>:
c0011754:	56                   	push   esi
c0011755:	53                   	push   ebx
c0011756:	50                   	push   eax
c0011757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001175c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011763:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011766:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001176c:	85 db                	test   ebx,ebx
c001176e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011771:	74 02                	je     c0011775 <SysSbrk(regs*)+0x21>
c0011773:	79 06                	jns    c001177b <SysSbrk(regs*)+0x27>
c0011775:	89 f0                	mov    eax,esi
c0011777:	31 d2                	xor    edx,edx
c0011779:	eb 2a                	jmp    c00117a5 <SysSbrk(regs*)+0x51>
c001177b:	83 c8 ff             	or     eax,0xffffffff
c001177e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011784:	89 c2                	mov    edx,eax
c0011786:	77 1d                	ja     c00117a5 <SysSbrk(regs*)+0x51>
c0011788:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001178e:	50                   	push   eax
c001178f:	c1 ea 0c             	shr    edx,0xc
c0011792:	68 07 0c 00 00       	push   0xc07
c0011797:	52                   	push   edx
c0011798:	51                   	push   ecx
c0011799:	e8 44 82 ff ff       	call   c00099e2 <VAS::allocatePages(int, int)>
c001179e:	89 f0                	mov    eax,esi
c00117a0:	31 d2                	xor    edx,edx
c00117a2:	83 c4 10             	add    esp,0x10
c00117a5:	59                   	pop    ecx
c00117a6:	5b                   	pop    ebx
c00117a7:	5e                   	pop    esi
c00117a8:	c3                   	ret    

c00117a9 <SysSetCwd(regs*)>:
c00117a9:	83 ec 14             	sub    esp,0x14
c00117ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117b0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00117b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117b8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00117bb:	e8 1f 96 ff ff       	call   c000addf <Fs::setcwd(Process*, char*)>
c00117c0:	83 c4 1c             	add    esp,0x1c
c00117c3:	99                   	cdq    
c00117c4:	c3                   	ret    

c00117c5 <SysSetTime(regs*)>:
c00117c5:	55                   	push   ebp
c00117c6:	31 c9                	xor    ecx,ecx
c00117c8:	57                   	push   edi
c00117c9:	bd 0c 00 00 00       	mov    ebp,0xc
c00117ce:	56                   	push   esi
c00117cf:	53                   	push   ebx
c00117d0:	31 db                	xor    ebx,ebx
c00117d2:	83 ec 10             	sub    esp,0x10
c00117d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00117d9:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00117dc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00117df:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00117e2:	89 c2                	mov    edx,eax
c00117e4:	66 81 ef 6c 07       	sub    di,0x76c
c00117e9:	83 e2 1f             	and    edx,0x1f
c00117ec:	c1 e7 10             	shl    edi,0x10
c00117ef:	42                   	inc    edx
c00117f0:	c1 e8 05             	shr    eax,0x5
c00117f3:	88 d1                	mov    cl,dl
c00117f5:	31 d2                	xor    edx,edx
c00117f7:	f7 f5                	div    ebp
c00117f9:	89 dd                	mov    ebp,ebx
c00117fb:	88 d5                	mov    ch,dl
c00117fd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011803:	0f b7 c1             	movzx  eax,cx
c0011806:	31 d2                	xor    edx,edx
c0011808:	09 f8                	or     eax,edi
c001180a:	bf 3c 00 00 00       	mov    edi,0x3c
c001180f:	89 c1                	mov    ecx,eax
c0011811:	89 f0                	mov    eax,esi
c0011813:	f7 f7                	div    edi
c0011815:	c1 e2 10             	shl    edx,0x10
c0011818:	09 d5                	or     ebp,edx
c001181a:	31 d2                	xor    edx,edx
c001181c:	89 eb                	mov    ebx,ebp
c001181e:	f7 f7                	div    edi
c0011820:	bf 10 0e 00 00       	mov    edi,0xe10
c0011825:	88 d7                	mov    bh,dl
c0011827:	89 f0                	mov    eax,esi
c0011829:	31 d2                	xor    edx,edx
c001182b:	f7 f7                	div    edi
c001182d:	bf 18 00 00 00       	mov    edi,0x18
c0011832:	31 d2                	xor    edx,edx
c0011834:	f7 f7                	div    edi
c0011836:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c001183b:	88 d3                	mov    bl,dl
c001183d:	53                   	push   ebx
c001183e:	51                   	push   ecx
c001183f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011845:	e8 a6 9d ff ff       	call   c000b5f0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001184a:	83 c4 1c             	add    esp,0x1c
c001184d:	83 f0 01             	xor    eax,0x1
c0011850:	5b                   	pop    ebx
c0011851:	0f b6 c0             	movzx  eax,al
c0011854:	5e                   	pop    esi
c0011855:	31 d2                	xor    edx,edx
c0011857:	5f                   	pop    edi
c0011858:	5d                   	pop    ebp
c0011859:	c3                   	ret    

c001185a <SysTimezone(regs*)>:
c001185a:	53                   	push   ebx
c001185b:	83 ec 08             	sub    esp,0x8
c001185e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011862:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011866:	75 17                	jne    c001187f <SysTimezone(regs*)+0x25>
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	68 28 e3 01 c0       	push   0xc001e328
c0011870:	e8 27 8c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0011875:	83 c8 ff             	or     eax,0xffffffff
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	89 c2                	mov    edx,eax
c001187d:	eb 20                	jmp    c001189f <SysTimezone(regs*)+0x45>
c001187f:	83 ec 0c             	sub    esp,0xc
c0011882:	68 3d e3 01 c0       	push   0xc001e33d
c0011887:	e8 10 8c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001188c:	58                   	pop    eax
c001188d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011890:	e8 b7 9a ff ff       	call   c000b34c <User::loadClockSettings(int)>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	b8 01 00 00 00       	mov    eax,0x1
c001189d:	31 d2                	xor    edx,edx
c001189f:	83 c4 08             	add    esp,0x8
c00118a2:	5b                   	pop    ebx
c00118a3:	c3                   	ret    

c00118a4 <SysWrite(regs*)>:
c00118a4:	57                   	push   edi
c00118a5:	56                   	push   esi
c00118a6:	53                   	push   ebx
c00118a7:	83 ec 10             	sub    esp,0x10
c00118aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118b1:	83 f8 02             	cmp    eax,0x2
c00118b4:	77 10                	ja     c00118c6 <SysWrite(regs*)+0x22>
c00118b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118be:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00118c4:	eb 0e                	jmp    c00118d4 <SysWrite(regs*)+0x30>
c00118c6:	83 ec 0c             	sub    esp,0xc
c00118c9:	50                   	push   eax
c00118ca:	e8 24 78 ff ff       	call   c00090f3 <getFromFileDescriptor(int)>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	89 c1                	mov    ecx,eax
c00118d4:	83 c8 ff             	or     eax,0xffffffff
c00118d7:	85 c9                	test   ecx,ecx
c00118d9:	89 c2                	mov    edx,eax
c00118db:	74 28                	je     c0011905 <SysWrite(regs*)+0x61>
c00118dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e5:	31 ff                	xor    edi,edi
c00118e7:	83 ec 0c             	sub    esp,0xc
c00118ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00118ec:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118f0:	52                   	push   edx
c00118f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00118f4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00118f7:	57                   	push   edi
c00118f8:	56                   	push   esi
c00118f9:	51                   	push   ecx
c00118fa:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011901:	83 c4 20             	add    esp,0x20
c0011904:	99                   	cdq    
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	5b                   	pop    ebx
c0011909:	5e                   	pop    esi
c001190a:	5f                   	pop    edi
c001190b:	c3                   	ret    

c001190c <SysWsbe(regs*)>:
c001190c:	57                   	push   edi
c001190d:	b9 0b 00 00 00       	mov    ecx,0xb
c0011912:	56                   	push   esi
c0011913:	be 7c e3 01 c0       	mov    esi,0xc001e37c
c0011918:	53                   	push   ebx
c0011919:	83 ec 30             	sub    esp,0x30
c001191c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011920:	fc                   	cld    
c0011921:	83 ec 0c             	sub    esp,0xc
c0011924:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011926:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001192a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001192f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011932:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011938:	8b 06                	mov    eax,DWORD PTR [esi]
c001193a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001193d:	57                   	push   edi
c001193e:	e8 fd eb fe ff       	call   c0000540 <strlen>
c0011943:	5a                   	pop    edx
c0011944:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011948:	52                   	push   edx
c0011949:	31 d2                	xor    edx,edx
c001194b:	57                   	push   edi
c001194c:	52                   	push   edx
c001194d:	50                   	push   eax
c001194e:	56                   	push   esi
c001194f:	ff d3                	call   ebx
c0011951:	83 c4 14             	add    esp,0x14
c0011954:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011958:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001195b:	e8 c4 22 00 00       	call   c0013c24 <terminateTask(int)>
c0011960:	83 c4 40             	add    esp,0x40
c0011963:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011968:	5b                   	pop    ebx
c0011969:	31 d2                	xor    edx,edx
c001196b:	5e                   	pop    esi
c001196c:	5f                   	pop    edi
c001196d:	c3                   	ret    

c001196e <SysYield(regs*)>:
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	fa                   	cli    
c0011972:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0011978:	e8 83 19 00 00       	call   c0013300 <schedule()>
c001197d:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0011982:	48                   	dec    eax
c0011983:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0011988:	75 01                	jne    c001198b <SysYield(regs*)+0x1d>
c001198a:	fb                   	sti    
c001198b:	31 c0                	xor    eax,eax
c001198d:	31 d2                	xor    edx,edx
c001198f:	83 c4 0c             	add    esp,0xc
c0011992:	c3                   	ret    

c0011993 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011993:	55                   	push   ebp
c0011994:	57                   	push   edi
c0011995:	56                   	push   esi
c0011996:	53                   	push   ebx
c0011997:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001199d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00119a5:	0f 95 c2             	setne  dl
c00119a8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00119b0:	0f 94 c0             	sete   al
c00119b3:	84 c2                	test   dl,al
c00119b5:	74 34                	je     c00119eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119b7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00119c2:	74 27                	je     c00119eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119c4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00119cb:	05 00 10 00 00       	add    eax,0x1000
c00119d0:	89 c1                	mov    ecx,eax
c00119d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119d7:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00119dd:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00119e4:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00119eb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00119fb:	6a 01                	push   0x1
c00119fd:	e8 47 78 ff ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	89 c3                	mov    ebx,eax
c0011a07:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a0d:	0f 86 25 01 00 00    	jbe    c0011b38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011a13:	c1 ee 0c             	shr    esi,0xc
c0011a16:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011a1d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011a21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a29:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a34:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a3b:	29 ef                	sub    edi,ebp
c0011a3d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a41:	0f 83 f8 00 00 00    	jae    c0011b3f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a47:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a4d:	76 05                	jbe    c0011a54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a4f:	bf 00 10 00 00       	mov    edi,0x1000
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	31 d2                	xor    edx,edx
c0011a59:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011a60:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011a62:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011a66:	50                   	push   eax
c0011a67:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011a6b:	56                   	push   esi
c0011a6c:	52                   	push   edx
c0011a6d:	57                   	push   edi
c0011a6e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011a75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a78:	83 c4 20             	add    esp,0x20
c0011a7b:	85 c0                	test   eax,eax
c0011a7d:	75 06                	jne    c0011a85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011a7f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011a83:	74 13                	je     c0011a98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011a85:	83 ec 0c             	sub    esp,0xc
c0011a88:	53                   	push   ebx
c0011a89:	e8 eb 7a ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	31 c0                	xor    eax,eax
c0011a93:	e9 7c 01 00 00       	jmp    c0011c14 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011a98:	fa                   	cli    
c0011a99:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0011a9f:	e8 39 60 ff ff       	call   c0007add <Phys::allocatePage()>
c0011aa4:	6a 07                	push   0x7
c0011aa6:	89 c7                	mov    edi,eax
c0011aa8:	53                   	push   ebx
c0011aa9:	50                   	push   eax
c0011aaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ab8:	e8 21 7e ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011abd:	83 c4 0c             	add    esp,0xc
c0011ac0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011ac7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011acd:	6a 00                	push   0x0
c0011acf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ad7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011add:	e8 6e 7c ff ff       	call   c0009750 <VAS::mapOtherVASIn(bool, VAS*)>
c0011ae2:	58                   	pop    eax
c0011ae3:	5a                   	pop    edx
c0011ae4:	68 07 0c 00 00       	push   0xc07
c0011ae9:	55                   	push   ebp
c0011aea:	57                   	push   edi
c0011aeb:	89 df                	mov    edi,ebx
c0011aed:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011af4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011afa:	6a 00                	push   0x0
c0011afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b04:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b0a:	e8 8f 81 ff ff       	call   c0009c9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011b0f:	b9 00 10 00 00       	mov    ecx,0x1000
c0011b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b16:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0011b1b:	83 c4 20             	add    esp,0x20
c0011b1e:	48                   	dec    eax
c0011b1f:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0011b24:	85 c0                	test   eax,eax
c0011b26:	75 01                	jne    c0011b29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b28:	fb                   	sti    
c0011b29:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b2f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b33:	e9 f1 fe ff ff       	jmp    c0011a29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b38:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b3f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b46:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b4c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b52:	0f 86 ae 00 00 00    	jbe    c0011c06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011b58:	fa                   	cli    
c0011b59:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0011b5f:	c1 ee 0c             	shr    esi,0xc
c0011b62:	51                   	push   ecx
c0011b63:	31 ff                	xor    edi,edi
c0011b65:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b6c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b72:	6a 00                	push   0x0
c0011b74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b7c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b82:	e8 c9 7b ff ff       	call   c0009750 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b87:	83 c4 10             	add    esp,0x10
c0011b8a:	e8 4e 5f ff ff       	call   c0007add <Phys::allocatePage()>
c0011b8f:	47                   	inc    edi
c0011b90:	6a 07                	push   0x7
c0011b92:	53                   	push   ebx
c0011b93:	50                   	push   eax
c0011b94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b98:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b9e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011ba1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011ba7:	e8 32 7d ff ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bac:	58                   	pop    eax
c0011bad:	5a                   	pop    edx
c0011bae:	68 07 0c 00 00       	push   0xc07
c0011bb3:	55                   	push   ebp
c0011bb4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011bba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bbe:	50                   	push   eax
c0011bbf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011bc6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bcc:	6a 00                	push   0x0
c0011bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bdc:	e8 bd 80 ff ff       	call   c0009c9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011be1:	83 c4 1c             	add    esp,0x1c
c0011be4:	68 00 10 00 00       	push   0x1000
c0011be9:	6a 00                	push   0x0
c0011beb:	53                   	push   ebx
c0011bec:	e8 df e8 fe ff       	call   c00004d0 <memset>
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	39 fe                	cmp    esi,edi
c0011bf6:	77 92                	ja     c0011b8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011bf8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0011bfd:	48                   	dec    eax
c0011bfe:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0011c03:	75 01                	jne    c0011c06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c05:	fb                   	sti    
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	53                   	push   ebx
c0011c0a:	e8 6a 79 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	b0 01                	mov    al,0x1
c0011c14:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011c1a:	5b                   	pop    ebx
c0011c1b:	5e                   	pop    esi
c0011c1c:	5f                   	pop    edi
c0011c1d:	5d                   	pop    ebp
c0011c1e:	c3                   	ret    

c0011c1f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011c1f:	55                   	push   ebp
c0011c20:	57                   	push   edi
c0011c21:	56                   	push   esi
c0011c22:	53                   	push   ebx
c0011c23:	83 ec 48             	sub    esp,0x48
c0011c26:	68 14 01 00 00       	push   0x114
c0011c2b:	e8 d1 5b ff ff       	call   c0007801 <malloc>
c0011c30:	83 c4 0c             	add    esp,0xc
c0011c33:	89 c6                	mov    esi,eax
c0011c35:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c39:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c3d:	50                   	push   eax
c0011c3e:	e8 cf 8d ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0011c43:	58                   	pop    eax
c0011c44:	5a                   	pop    edx
c0011c45:	6a 01                	push   0x1
c0011c47:	56                   	push   esi
c0011c48:	e8 85 8e ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	85 c0                	test   eax,eax
c0011c52:	0f 85 47 01 00 00    	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c60:	83 ec 0c             	sub    esp,0xc
c0011c63:	6a 34                	push   0x34
c0011c65:	e8 97 5b ff ff       	call   c0007801 <malloc>
c0011c6a:	89 c3                	mov    ebx,eax
c0011c6c:	58                   	pop    eax
c0011c6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c6f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011c73:	57                   	push   edi
c0011c74:	53                   	push   ebx
c0011c75:	6a 00                	push   0x0
c0011c77:	6a 34                	push   0x34
c0011c79:	56                   	push   esi
c0011c7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c7d:	83 c4 20             	add    esp,0x20
c0011c80:	85 c0                	test   eax,eax
c0011c82:	0f 85 17 01 00 00    	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c88:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011c8e:	0f 85 0b 01 00 00    	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c97:	85 c0                	test   eax,eax
c0011c99:	0f 84 00 01 00 00    	je     c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c9f:	31 d2                	xor    edx,edx
c0011ca1:	55                   	push   ebp
c0011ca2:	52                   	push   edx
c0011ca3:	50                   	push   eax
c0011ca4:	56                   	push   esi
c0011ca5:	e8 e6 8e ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	85 c0                	test   eax,eax
c0011caf:	0f 85 ea 00 00 00    	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cb5:	83 ec 0c             	sub    esp,0xc
c0011cb8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011cbb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011cbf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011cc3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011cc7:	0f af c2             	imul   eax,edx
c0011cca:	50                   	push   eax
c0011ccb:	e8 31 5b ff ff       	call   c0007801 <malloc>
c0011cd0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011cd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011cd6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cdd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011ce1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011ce5:	0f af c2             	imul   eax,edx
c0011ce8:	99                   	cdq    
c0011ce9:	52                   	push   edx
c0011cea:	50                   	push   eax
c0011ceb:	56                   	push   esi
c0011cec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011cef:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011cf2:	83 c4 20             	add    esp,0x20
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	0f 84 a2 00 00 00    	je     c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cfd:	31 d2                	xor    edx,edx
c0011cff:	51                   	push   ecx
c0011d00:	52                   	push   edx
c0011d01:	50                   	push   eax
c0011d02:	56                   	push   esi
c0011d03:	e8 88 8e ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0011d08:	83 c4 10             	add    esp,0x10
c0011d0b:	85 c0                	test   eax,eax
c0011d0d:	0f 85 8c 00 00 00    	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d13:	83 ec 0c             	sub    esp,0xc
c0011d16:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d1a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d1e:	31 ed                	xor    ebp,ebp
c0011d20:	0f af c2             	imul   eax,edx
c0011d23:	50                   	push   eax
c0011d24:	e8 d8 5a ff ff       	call   c0007801 <malloc>
c0011d29:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d36:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d3a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d3e:	0f af c2             	imul   eax,edx
c0011d41:	99                   	cdq    
c0011d42:	52                   	push   edx
c0011d43:	50                   	push   eax
c0011d44:	56                   	push   esi
c0011d45:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d48:	83 c4 20             	add    esp,0x20
c0011d4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d53:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011d57:	0f 86 80 00 00 00    	jbe    c0011ddd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011d5d:	0f b7 fd             	movzx  edi,bp
c0011d60:	c1 e7 05             	shl    edi,0x5
c0011d63:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011d67:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011d6a:	75 6b                	jne    c0011dd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011d6c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d73:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011d76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d7a:	52                   	push   edx
c0011d7b:	31 d2                	xor    edx,edx
c0011d7d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d80:	52                   	push   edx
c0011d81:	50                   	push   eax
c0011d82:	56                   	push   esi
c0011d83:	e8 08 8e ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0011d88:	83 c4 10             	add    esp,0x10
c0011d8b:	85 c0                	test   eax,eax
c0011d8d:	74 17                	je     c0011da6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011d8f:	83 ec 0c             	sub    esp,0xc
c0011d92:	68 a8 e3 01 c0       	push   0xc001e3a8
c0011d97:	e8 00 87 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	31 c0                	xor    eax,eax
c0011da1:	e9 87 00 00 00       	jmp    c0011e2d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011da6:	83 ec 0c             	sub    esp,0xc
c0011da9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011dac:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011daf:	50                   	push   eax
c0011db0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011db8:	56                   	push   esi
c0011db9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011dbd:	e8 d1 fb ff ff       	call   c0011993 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011dc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dc6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011dca:	83 c4 20             	add    esp,0x20
c0011dcd:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011dd1:	73 04                	jae    c0011dd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011dd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011dd7:	45                   	inc    ebp
c0011dd8:	e9 76 ff ff ff       	jmp    c0011d53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011ddd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011de1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011de5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011de9:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011def:	83 ec 0c             	sub    esp,0xc
c0011df2:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011df8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dfd:	05 00 10 00 00       	add    eax,0x1000
c0011e02:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e09:	e8 03 5a ff ff       	call   c0007811 <free>
c0011e0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e11:	e8 fb 59 ff ff       	call   c0007811 <free>
c0011e16:	58                   	pop    eax
c0011e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e1b:	e8 f1 59 ff ff       	call   c0007811 <free>
c0011e20:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e23:	e8 08 8d ff ff       	call   c000ab30 <File::close()>
c0011e28:	83 c4 10             	add    esp,0x10
c0011e2b:	b0 01                	mov    al,0x1
c0011e2d:	83 c4 3c             	add    esp,0x3c
c0011e30:	5b                   	pop    ebx
c0011e31:	5e                   	pop    esi
c0011e32:	5f                   	pop    edi
c0011e33:	5d                   	pop    ebp
c0011e34:	c3                   	ret    

c0011e35 <Thr::runtimeReferenceHelper()>:
c0011e35:	83 ec 18             	sub    esp,0x18
c0011e38:	68 b0 e3 01 c0       	push   0xc001e3b0
c0011e3d:	e8 5a 86 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0011e42:	fa                   	cli    
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	eb fe                	jmp    c0011e46 <Thr::runtimeReferenceHelper()+0x11>

c0011e48 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e48:	57                   	push   edi
c0011e49:	56                   	push   esi
c0011e4a:	53                   	push   ebx
c0011e4b:	31 db                	xor    ebx,ebx
c0011e4d:	39 1d e0 37 02 c0    	cmp    DWORD PTR ds:0xc00237e0,ebx
c0011e53:	7e 3c                	jle    c0011e91 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011e55:	8b 34 9d 60 37 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc8a0]
c0011e5c:	31 ff                	xor    edi,edi
c0011e5e:	39 3c 9d 60 36 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc9a0],edi
c0011e65:	7e 27                	jle    c0011e8e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011e67:	50                   	push   eax
c0011e68:	50                   	push   eax
c0011e69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e6f:	03 04 9d e0 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc920]
c0011e76:	50                   	push   eax
c0011e77:	e8 64 e8 fe ff       	call   c00006e0 <strcmp>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	85 c0                	test   eax,eax
c0011e81:	75 05                	jne    c0011e88 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011e83:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011e86:	eb 0b                	jmp    c0011e93 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011e88:	83 c6 10             	add    esi,0x10
c0011e8b:	47                   	inc    edi
c0011e8c:	eb d0                	jmp    c0011e5e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011e8e:	43                   	inc    ebx
c0011e8f:	eb bc                	jmp    c0011e4d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011e91:	31 c0                	xor    eax,eax
c0011e93:	5b                   	pop    ebx
c0011e94:	5e                   	pop    esi
c0011e95:	5f                   	pop    edi
c0011e96:	c3                   	ret    

c0011e97 <Thr::loadKernelSymbolTable(char const*)>:
c0011e97:	55                   	push   ebp
c0011e98:	57                   	push   edi
c0011e99:	56                   	push   esi
c0011e9a:	53                   	push   ebx
c0011e9b:	83 ec 68             	sub    esp,0x68
c0011e9e:	8b 35 30 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023830
c0011ea4:	68 14 01 00 00       	push   0x114
c0011ea9:	e8 53 59 ff ff       	call   c0007801 <malloc>
c0011eae:	83 c4 0c             	add    esp,0xc
c0011eb1:	89 c3                	mov    ebx,eax
c0011eb3:	56                   	push   esi
c0011eb4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011eb8:	50                   	push   eax
c0011eb9:	e8 54 8b ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0011ebe:	5e                   	pop    esi
c0011ebf:	5f                   	pop    edi
c0011ec0:	6a 01                	push   0x1
c0011ec2:	53                   	push   ebx
c0011ec3:	e8 0a 8c ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	85 c0                	test   eax,eax
c0011ecd:	74 0a                	je     c0011ed9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011ecf:	83 ec 0c             	sub    esp,0xc
c0011ed2:	68 d2 e3 01 c0       	push   0xc001e3d2
c0011ed7:	eb 34                	jmp    c0011f0d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011ed9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	6a 34                	push   0x34
c0011ee6:	e8 16 59 ff ff       	call   c0007801 <malloc>
c0011eeb:	59                   	pop    ecx
c0011eec:	89 c7                	mov    edi,eax
c0011eee:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ef4:	56                   	push   esi
c0011ef5:	57                   	push   edi
c0011ef6:	6a 00                	push   0x0
c0011ef8:	6a 34                	push   0x34
c0011efa:	53                   	push   ebx
c0011efb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011efe:	83 c4 20             	add    esp,0x20
c0011f01:	85 c0                	test   eax,eax
c0011f03:	74 17                	je     c0011f1c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f05:	83 ec 0c             	sub    esp,0xc
c0011f08:	68 e9 e3 01 c0       	push   0xc001e3e9
c0011f0d:	e8 ed e1 ff ff       	call   c00100ff <KePanic(char const*)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	31 c0                	xor    eax,eax
c0011f17:	e9 31 02 00 00       	jmp    c001214d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011f1c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011f22:	75 e1                	jne    c0011f05 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f24:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f27:	85 c0                	test   eax,eax
c0011f29:	74 da                	je     c0011f05 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f2b:	52                   	push   edx
c0011f2c:	31 d2                	xor    edx,edx
c0011f2e:	52                   	push   edx
c0011f2f:	50                   	push   eax
c0011f30:	53                   	push   ebx
c0011f31:	e8 5a 8c ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	85 c0                	test   eax,eax
c0011f3b:	75 c8                	jne    c0011f05 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f3d:	83 ec 0c             	sub    esp,0xc
c0011f40:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f44:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f48:	31 ed                	xor    ebp,ebp
c0011f4a:	0f af c2             	imul   eax,edx
c0011f4d:	50                   	push   eax
c0011f4e:	e8 ae 58 ff ff       	call   c0007801 <malloc>
c0011f53:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f59:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f60:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f64:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f68:	0f af c2             	imul   eax,edx
c0011f6b:	99                   	cdq    
c0011f6c:	52                   	push   edx
c0011f6d:	50                   	push   eax
c0011f6e:	53                   	push   ebx
c0011f6f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f72:	83 c4 20             	add    esp,0x20
c0011f75:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011f85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011f8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f95:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011f99:	0f 86 aa 00 00 00    	jbe    c0012049 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011f9f:	0f b7 f5             	movzx  esi,bp
c0011fa2:	6b f6 28             	imul   esi,esi,0x28
c0011fa5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011fa9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011fac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fb0:	50                   	push   eax
c0011fb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011fb5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011fb9:	8b 16                	mov    edx,DWORD PTR [esi]
c0011fbb:	6b c0 28             	imul   eax,eax,0x28
c0011fbe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011fc2:	89 d0                	mov    eax,edx
c0011fc4:	31 d2                	xor    edx,edx
c0011fc6:	52                   	push   edx
c0011fc7:	50                   	push   eax
c0011fc8:	53                   	push   ebx
c0011fc9:	e8 c2 8b ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0011fce:	83 c4 0c             	add    esp,0xc
c0011fd1:	6a 20                	push   0x20
c0011fd3:	6a 00                	push   0x0
c0011fd5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fd9:	52                   	push   edx
c0011fda:	e8 f1 e4 fe ff       	call   c00004d0 <memset>
c0011fdf:	58                   	pop    eax
c0011fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fe2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011fe6:	51                   	push   ecx
c0011fe7:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011feb:	52                   	push   edx
c0011fec:	6a 00                	push   0x0
c0011fee:	6a 1f                	push   0x1f
c0011ff0:	53                   	push   ebx
c0011ff1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011ff4:	83 c4 18             	add    esp,0x18
c0011ff7:	68 00 e4 01 c0       	push   0xc001e400
c0011ffc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012000:	52                   	push   edx
c0012001:	e8 da e6 fe ff       	call   c00006e0 <strcmp>
c0012006:	83 c4 10             	add    esp,0x10
c0012009:	85 c0                	test   eax,eax
c001200b:	75 0f                	jne    c001201c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001200d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012010:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001201c:	50                   	push   eax
c001201d:	50                   	push   eax
c001201e:	68 08 e4 01 c0       	push   0xc001e408
c0012023:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012027:	50                   	push   eax
c0012028:	e8 b3 e6 fe ff       	call   c00006e0 <strcmp>
c001202d:	83 c4 10             	add    esp,0x10
c0012030:	85 c0                	test   eax,eax
c0012032:	75 0f                	jne    c0012043 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012034:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012037:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001203b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001203f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012043:	45                   	inc    ebp
c0012044:	e9 4c ff ff ff       	jmp    c0011f95 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012049:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001204e:	75 10                	jne    c0012060 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	68 10 e4 01 c0       	push   0xc001e410
c0012058:	e8 a2 e0 ff ff       	call   c00100ff <KePanic(char const*)>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012065:	75 10                	jne    c0012077 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012067:	83 ec 0c             	sub    esp,0xc
c001206a:	68 10 e4 01 c0       	push   0xc001e410
c001206f:	e8 8b e0 ff ff       	call   c00100ff <KePanic(char const*)>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	31 d2                	xor    edx,edx
c0012079:	50                   	push   eax
c001207a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207e:	52                   	push   edx
c001207f:	50                   	push   eax
c0012080:	53                   	push   ebx
c0012081:	e8 0a 8b ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0012086:	5a                   	pop    edx
c0012087:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001208b:	e8 71 57 ff ff       	call   c0007801 <malloc>
c0012090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012094:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012098:	31 c9                	xor    ecx,ecx
c001209a:	5e                   	pop    esi
c001209b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001209d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00120a1:	55                   	push   ebp
c00120a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120a6:	51                   	push   ecx
c00120a7:	52                   	push   edx
c00120a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120ac:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00120b0:	53                   	push   ebx
c00120b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120b4:	83 c4 14             	add    esp,0x14
c00120b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120bb:	e8 41 57 ff ff       	call   c0007801 <malloc>
c00120c0:	89 c6                	mov    esi,eax
c00120c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120c7:	56                   	push   esi
c00120c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00120cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00120d0:	51                   	push   ecx
c00120d1:	52                   	push   edx
c00120d2:	53                   	push   ebx
c00120d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00120da:	8b 15 e0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237e0
c00120e0:	83 c4 1c             	add    esp,0x1c
c00120e3:	c1 e8 04             	shr    eax,0x4
c00120e6:	89 04 95 60 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc9a0],eax
c00120ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120f1:	31 d2                	xor    edx,edx
c00120f3:	52                   	push   edx
c00120f4:	50                   	push   eax
c00120f5:	53                   	push   ebx
c00120f6:	e8 95 8a ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00120fb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00120fd:	31 d2                	xor    edx,edx
c00120ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012102:	56                   	push   esi
c0012103:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012107:	52                   	push   edx
c0012108:	50                   	push   eax
c0012109:	53                   	push   ebx
c001210a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001210d:	83 c4 14             	add    esp,0x14
c0012110:	53                   	push   ebx
c0012111:	e8 1a 8a ff ff       	call   c000ab30 <File::close()>
c0012116:	5d                   	pop    ebp
c0012117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001211b:	e8 f1 56 ff ff       	call   c0007811 <free>
c0012120:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012123:	e8 e9 56 ff ff       	call   c0007811 <free>
c0012128:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c001212d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012131:	8d 50 01             	lea    edx,[eax+0x1]
c0012134:	89 0c 85 60 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8a0],ecx
c001213b:	89 34 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],esi
c0012142:	89 15 e0 37 02 c0    	mov    DWORD PTR ds:0xc00237e0,edx
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	b0 01                	mov    al,0x1
c001214d:	83 c4 5c             	add    esp,0x5c
c0012150:	5b                   	pop    ebx
c0012151:	5e                   	pop    esi
c0012152:	5f                   	pop    edi
c0012153:	5d                   	pop    ebp
c0012154:	c3                   	ret    

c0012155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012155:	55                   	push   ebp
c0012156:	57                   	push   edi
c0012157:	56                   	push   esi
c0012158:	53                   	push   ebx
c0012159:	81 ec 68 03 00 00    	sub    esp,0x368
c001215f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012166:	8b 1d 30 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023830
c001216c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012170:	68 14 01 00 00       	push   0x114
c0012175:	e8 87 56 ff ff       	call   c0007801 <malloc>
c001217a:	83 c4 0c             	add    esp,0xc
c001217d:	89 c5                	mov    ebp,eax
c001217f:	53                   	push   ebx
c0012180:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012187:	50                   	push   eax
c0012188:	e8 85 88 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c001218d:	5e                   	pop    esi
c001218e:	5f                   	pop    edi
c001218f:	6a 01                	push   0x1
c0012191:	55                   	push   ebp
c0012192:	e8 3b 89 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	85 c0                	test   eax,eax
c001219c:	0f 85 a7 06 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121a2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	6a 34                	push   0x34
c00121af:	e8 4d 56 ff ff       	call   c0007801 <malloc>
c00121b4:	5b                   	pop    ebx
c00121b5:	89 c7                	mov    edi,eax
c00121b7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00121bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121be:	53                   	push   ebx
c00121bf:	57                   	push   edi
c00121c0:	6a 00                	push   0x0
c00121c2:	6a 34                	push   0x34
c00121c4:	55                   	push   ebp
c00121c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121c8:	83 c4 20             	add    esp,0x20
c00121cb:	85 c0                	test   eax,eax
c00121cd:	0f 85 76 06 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121d3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00121d9:	0f 85 6a 06 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121df:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00121e2:	85 c0                	test   eax,eax
c00121e4:	0f 84 5f 06 00 00    	je     c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121ea:	31 d2                	xor    edx,edx
c00121ec:	51                   	push   ecx
c00121ed:	52                   	push   edx
c00121ee:	50                   	push   eax
c00121ef:	55                   	push   ebp
c00121f0:	e8 9b 89 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	85 c0                	test   eax,eax
c00121fa:	0f 85 49 06 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012200:	83 ec 0c             	sub    esp,0xc
c0012203:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012206:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001220a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001220e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012212:	0f af c2             	imul   eax,edx
c0012215:	50                   	push   eax
c0012216:	e8 e6 55 ff ff       	call   c0007801 <malloc>
c001221b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001221e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012222:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012225:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012229:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001222d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012231:	0f af c2             	imul   eax,edx
c0012234:	99                   	cdq    
c0012235:	52                   	push   edx
c0012236:	50                   	push   eax
c0012237:	55                   	push   ebp
c0012238:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001223b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001223e:	83 c4 20             	add    esp,0x20
c0012241:	85 c0                	test   eax,eax
c0012243:	0f 84 00 06 00 00    	je     c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012249:	52                   	push   edx
c001224a:	31 d2                	xor    edx,edx
c001224c:	52                   	push   edx
c001224d:	50                   	push   eax
c001224e:	55                   	push   ebp
c001224f:	e8 3c 89 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	85 c0                	test   eax,eax
c0012259:	0f 85 ea 05 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012266:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001226a:	31 f6                	xor    esi,esi
c001226c:	0f af c2             	imul   eax,edx
c001226f:	50                   	push   eax
c0012270:	e8 8c 55 ff ff       	call   c0007801 <malloc>
c0012275:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012278:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001227c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001227f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012283:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012287:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001228b:	0f af c2             	imul   eax,edx
c001228e:	99                   	cdq    
c001228f:	52                   	push   edx
c0012290:	50                   	push   eax
c0012291:	55                   	push   ebp
c0012292:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012295:	83 c4 20             	add    esp,0x20
c0012298:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001229c:	0f 86 8a 00 00 00    	jbe    c001232c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00122a2:	0f b7 de             	movzx  ebx,si
c00122a5:	c1 e3 05             	shl    ebx,0x5
c00122a8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00122ac:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00122af:	75 75                	jne    c0012326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00122b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00122b4:	31 d2                	xor    edx,edx
c00122b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00122bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122c1:	50                   	push   eax
c00122c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00122c5:	52                   	push   edx
c00122c6:	50                   	push   eax
c00122c7:	55                   	push   ebp
c00122c8:	e8 c3 88 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	85 c0                	test   eax,eax
c00122d2:	0f 85 71 05 00 00    	jne    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122d8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00122df:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122e2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00122e6:	31 d2                	xor    edx,edx
c00122e8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00122fa:	50                   	push   eax
c00122fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012303:	52                   	push   edx
c0012304:	50                   	push   eax
c0012305:	55                   	push   ebp
c0012306:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012309:	83 c4 1c             	add    esp,0x1c
c001230c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001230f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012312:	50                   	push   eax
c0012313:	6a 00                	push   0x0
c0012315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012319:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001231d:	50                   	push   eax
c001231e:	e8 ad e1 fe ff       	call   c00004d0 <memset>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	46                   	inc    esi
c0012327:	e9 6c ff ff ff       	jmp    c0012298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001232c:	53                   	push   ebx
c001232d:	31 db                	xor    ebx,ebx
c001232f:	68 00 01 00 00       	push   0x100
c0012334:	6a 00                	push   0x0
c0012336:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001233a:	50                   	push   eax
c001233b:	e8 90 e1 fe ff       	call   c00004d0 <memset>
c0012340:	83 c4 0c             	add    esp,0xc
c0012343:	68 00 01 00 00       	push   0x100
c0012348:	6a 00                	push   0x0
c001234a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012351:	50                   	push   eax
c0012352:	e8 79 e1 fe ff       	call   c00004d0 <memset>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012362:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001236a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012372:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001237a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012382:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012386:	0f 86 30 01 00 00    	jbe    c00124bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001238c:	0f b7 f3             	movzx  esi,bx
c001238f:	6b f6 28             	imul   esi,esi,0x28
c0012392:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012396:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001239d:	52                   	push   edx
c001239e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00123a2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00123a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00123a8:	6b d2 28             	imul   edx,edx,0x28
c00123ab:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00123af:	31 d2                	xor    edx,edx
c00123b1:	52                   	push   edx
c00123b2:	50                   	push   eax
c00123b3:	55                   	push   ebp
c00123b4:	e8 d7 87 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00123b9:	83 c4 0c             	add    esp,0xc
c00123bc:	6a 20                	push   0x20
c00123be:	6a 00                	push   0x0
c00123c0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123c7:	51                   	push   ecx
c00123c8:	e8 03 e1 fe ff       	call   c00004d0 <memset>
c00123cd:	59                   	pop    ecx
c00123ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123d1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00123d5:	52                   	push   edx
c00123d6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00123dd:	51                   	push   ecx
c00123de:	6a 00                	push   0x0
c00123e0:	6a 1f                	push   0x1f
c00123e2:	55                   	push   ebp
c00123e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123e6:	83 c4 1c             	add    esp,0x1c
c00123e9:	6a 09                	push   0x9
c00123eb:	68 2a e4 01 c0       	push   0xc001e42a
c00123f0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123f7:	51                   	push   ecx
c00123f8:	e8 93 df fe ff       	call   c0000390 <memcmp>
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	85 c0                	test   eax,eax
c0012402:	75 21                	jne    c0012425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012408:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001240c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012410:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012414:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012417:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001241e:	89 d0                	mov    eax,edx
c0012420:	40                   	inc    eax
c0012421:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012425:	50                   	push   eax
c0012426:	6a 09                	push   0x9
c0012428:	68 34 e4 01 c0       	push   0xc001e434
c001242d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012434:	50                   	push   eax
c0012435:	e8 56 df fe ff       	call   c0000390 <memcmp>
c001243a:	83 c4 10             	add    esp,0x10
c001243d:	85 c0                	test   eax,eax
c001243f:	75 21                	jne    c0012462 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012445:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012449:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001244d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012451:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012454:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001245b:	89 d0                	mov    eax,edx
c001245d:	40                   	inc    eax
c001245e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012462:	50                   	push   eax
c0012463:	50                   	push   eax
c0012464:	68 00 e4 01 c0       	push   0xc001e400
c0012469:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012470:	50                   	push   eax
c0012471:	e8 6a e2 fe ff       	call   c00006e0 <strcmp>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	85 c0                	test   eax,eax
c001247b:	75 0f                	jne    c001248c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001247d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012480:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012488:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001248c:	50                   	push   eax
c001248d:	50                   	push   eax
c001248e:	68 08 e4 01 c0       	push   0xc001e408
c0012493:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001249a:	50                   	push   eax
c001249b:	e8 40 e2 fe ff       	call   c00006e0 <strcmp>
c00124a0:	83 c4 10             	add    esp,0x10
c00124a3:	85 c0                	test   eax,eax
c00124a5:	75 0f                	jne    c00124b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00124a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00124ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00124b6:	43                   	inc    ebx
c00124b7:	e9 c6 fe ff ff       	jmp    c0012382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00124bc:	31 d2                	xor    edx,edx
c00124be:	50                   	push   eax
c00124bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124c3:	52                   	push   edx
c00124c4:	50                   	push   eax
c00124c5:	55                   	push   ebp
c00124c6:	e8 c5 86 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c00124cb:	58                   	pop    eax
c00124cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124d0:	e8 2c 53 ff ff       	call   c0007801 <malloc>
c00124d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124dc:	31 d2                	xor    edx,edx
c00124de:	58                   	pop    eax
c00124df:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00124e3:	53                   	push   ebx
c00124e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124ec:	52                   	push   edx
c00124ed:	50                   	push   eax
c00124ee:	55                   	push   ebp
c00124ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124f2:	83 c4 14             	add    esp,0x14
c00124f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124f9:	e8 03 53 ff ff       	call   c0007801 <malloc>
c00124fe:	31 d2                	xor    edx,edx
c0012500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001250b:	52                   	push   edx
c001250c:	50                   	push   eax
c001250d:	55                   	push   ebp
c001250e:	e8 7d 86 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0012513:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012516:	31 d2                	xor    edx,edx
c0012518:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001251b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001251f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012523:	52                   	push   edx
c0012524:	50                   	push   eax
c0012525:	55                   	push   ebp
c0012526:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012529:	83 c4 20             	add    esp,0x20
c001252c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012534:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012538:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001253c:	0f 84 0b 03 00 00    	je     c001284d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012542:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012549:	31 d2                	xor    edx,edx
c001254b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001254f:	c1 e8 03             	shr    eax,0x3
c0012552:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012556:	51                   	push   ecx
c0012557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001255b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001255f:	52                   	push   edx
c0012560:	50                   	push   eax
c0012561:	55                   	push   ebp
c0012562:	e8 29 86 ff ff       	call   c000ab90 <File::seek(unsigned long long)>
c0012567:	5b                   	pop    ebx
c0012568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001256c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012573:	e8 89 52 ff ff       	call   c0007801 <malloc>
c0012578:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	31 d2                	xor    edx,edx
c0012581:	5e                   	pop    esi
c0012582:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012586:	50                   	push   eax
c0012587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001258f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012596:	52                   	push   edx
c0012597:	50                   	push   eax
c0012598:	55                   	push   ebp
c0012599:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001259c:	83 c4 20             	add    esp,0x20
c001259f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00125a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125ab:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00125af:	0f 8d 7c 02 00 00    	jge    c0012831 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00125b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00125b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125bd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00125c2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00125c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00125c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125cd:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00125d1:	89 d8                	mov    eax,ebx
c00125d3:	c1 e8 08             	shr    eax,0x8
c00125d6:	89 c6                	mov    esi,eax
c00125d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00125dc:	c1 e6 04             	shl    esi,0x4
c00125df:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00125e3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00125e6:	85 d2                	test   edx,edx
c00125e8:	0f 85 bf 00 00 00    	jne    c00126ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125f5:	03 06                	add    eax,DWORD PTR [esi]
c00125f7:	50                   	push   eax
c00125f8:	e8 4b f8 ff ff       	call   c0011e48 <Thr::getAddressOfKernelSymbol(char const*)>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	89 c2                	mov    edx,eax
c0012602:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012607:	85 c0                	test   eax,eax
c0012609:	0f 85 9e 00 00 00    	jne    c00126ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012616:	03 06                	add    eax,DWORD PTR [esi]
c0012618:	50                   	push   eax
c0012619:	e8 32 dc ff ff       	call   c0010250 <KeResolveCompatibilitySymbol(char*)>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	89 c2                	mov    edx,eax
c0012623:	85 c0                	test   eax,eax
c0012625:	0f 85 82 00 00 00    	jne    c00126ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001262b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001262f:	50                   	push   eax
c0012630:	50                   	push   eax
c0012631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012635:	03 06                	add    eax,DWORD PTR [esi]
c0012637:	50                   	push   eax
c0012638:	68 3e e4 01 c0       	push   0xc001e43e
c001263d:	e8 5a 7e ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0012642:	58                   	pop    eax
c0012643:	5a                   	pop    edx
c0012644:	68 58 e4 01 c0       	push   0xc001e458
c0012649:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012650:	50                   	push   eax
c0012651:	e8 aa df fe ff       	call   c0000600 <strcpy>
c0012656:	59                   	pop    ecx
c0012657:	58                   	pop    eax
c0012658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001265c:	03 06                	add    eax,DWORD PTR [esi]
c001265e:	50                   	push   eax
c001265f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012666:	50                   	push   eax
c0012667:	e8 54 e1 fe ff       	call   c00007c0 <strcat>
c001266c:	58                   	pop    eax
c001266d:	5a                   	pop    edx
c001266e:	68 ee e4 01 c0       	push   0xc001e4ee
c0012673:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001267a:	50                   	push   eax
c001267b:	e8 40 e1 fe ff       	call   c00007c0 <strcat>
c0012680:	83 c4 10             	add    esp,0x10
c0012683:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012688:	0f 84 5d 01 00 00    	je     c00127eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001268e:	83 ec 0c             	sub    esp,0xc
c0012691:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012698:	50                   	push   eax
c0012699:	e8 61 da ff ff       	call   c00100ff <KePanic(char const*)>
c001269e:	83 c4 10             	add    esp,0x10
c00126a1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126a5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00126a9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00126ad:	80 fb 01             	cmp    bl,0x1
c00126b0:	0f 85 88 00 00 00    	jne    c001273e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00126b6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00126bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00126c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00126c5:	01 ce                	add    esi,ecx
c00126c7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00126cd:	0f 94 c0             	sete   al
c00126d0:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00126d6:	0f 94 c3             	sete   bl
c00126d9:	09 c3                	or     ebx,eax
c00126db:	8b 06                	mov    eax,DWORD PTR [esi]
c00126dd:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00126e2:	74 41                	je     c0012725 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00126e4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00126e7:	84 db                	test   bl,bl
c00126e9:	75 15                	jne    c0012700 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00126eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ef:	66 83 f8 0c          	cmp    ax,0xc
c00126f3:	76 05                	jbe    c00126fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00126f5:	b8 0c 00 00 00       	mov    eax,0xc
c00126fa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00126fe:	76 37                	jbe    c0012737 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012700:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012704:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012709:	0f 84 dc 00 00 00    	je     c00127eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001270f:	83 ec 0c             	sub    esp,0xc
c0012712:	68 6f e4 01 c0       	push   0xc001e46f
c0012717:	e8 e3 d9 ff ff       	call   c00100ff <KePanic(char const*)>
c001271c:	83 c4 10             	add    esp,0x10
c001271f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012723:	eb 12                	jmp    c0012737 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012725:	01 c1                	add    ecx,eax
c0012727:	84 db                	test   bl,bl
c0012729:	75 0c                	jne    c0012737 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001272b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001272f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012733:	77 02                	ja     c0012737 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012735:	01 d1                	add    ecx,edx
c0012737:	89 0e                	mov    DWORD PTR [esi],ecx
c0012739:	e9 ea 00 00 00       	jmp    c0012828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001273e:	80 fb 02             	cmp    bl,0x2
c0012741:	75 7c                	jne    c00127bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012743:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001274a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001274e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012752:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012758:	74 20                	je     c001277a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001275a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012760:	74 18                	je     c001277a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012762:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012766:	b9 0a 00 00 00       	mov    ecx,0xa
c001276b:	66 83 f8 0e          	cmp    ax,0xe
c001276f:	77 03                	ja     c0012774 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012771:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012774:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012778:	76 1f                	jbe    c0012799 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001277a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001277e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012783:	74 66                	je     c00127eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012785:	83 ec 0c             	sub    esp,0xc
c0012788:	68 8b e4 01 c0       	push   0xc001e48b
c001278d:	e8 6d d9 ff ff       	call   c00100ff <KePanic(char const*)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012799:	8b 06                	mov    eax,DWORD PTR [esi]
c001279b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00127a0:	74 13                	je     c00127b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00127a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00127a6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00127ad:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00127b1:	01 c8                	add    eax,ecx
c00127b3:	eb 04                	jmp    c00127b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00127b5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00127b9:	01 c2                	add    edx,eax
c00127bb:	89 16                	mov    DWORD PTR [esi],edx
c00127bd:	eb 69                	jmp    c0012828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127bf:	0f b6 db             	movzx  ebx,bl
c00127c2:	50                   	push   eax
c00127c3:	50                   	push   eax
c00127c4:	53                   	push   ebx
c00127c5:	68 a7 e4 01 c0       	push   0xc001e4a7
c00127ca:	e8 cd 7c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127d7:	74 12                	je     c00127eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127d9:	83 ec 0c             	sub    esp,0xc
c00127dc:	68 b2 e4 01 c0       	push   0xc001e4b2
c00127e1:	e8 19 d9 ff ff       	call   c00100ff <KePanic(char const*)>
c00127e6:	83 c4 10             	add    esp,0x10
c00127e9:	eb 3d                	jmp    c0012828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127eb:	83 ec 0c             	sub    esp,0xc
c00127ee:	55                   	push   ebp
c00127ef:	e8 3c 83 ff ff       	call   c000ab30 <File::close()>
c00127f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00127fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127fd:	59                   	pop    ecx
c00127fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012802:	e8 0a 50 ff ff       	call   c0007811 <free>
c0012807:	5b                   	pop    ebx
c0012808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001280c:	e8 00 50 ff ff       	call   c0007811 <free>
c0012811:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012814:	e8 f8 4f ff ff       	call   c0007811 <free>
c0012819:	5e                   	pop    esi
c001281a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281e:	e8 ee 4f ff ff       	call   c0007811 <free>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	eb 21                	jmp    c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012828:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001282c:	e9 76 fd ff ff       	jmp    c00125a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012831:	83 ec 0c             	sub    esp,0xc
c0012834:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012838:	e8 d4 4f ff ff       	call   c0007811 <free>
c001283d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	e9 eb fc ff ff       	jmp    c0012534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012849:	31 c0                	xor    eax,eax
c001284b:	eb 33                	jmp    c0012880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001284d:	83 ec 0c             	sub    esp,0xc
c0012850:	55                   	push   ebp
c0012851:	e8 da 82 ff ff       	call   c000ab30 <File::close()>
c0012856:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012859:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001285c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001285f:	58                   	pop    eax
c0012860:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012864:	e8 a8 4f ff ff       	call   c0007811 <free>
c0012869:	89 3c 24             	mov    DWORD PTR [esp],edi
c001286c:	e8 a0 4f ff ff       	call   c0007811 <free>
c0012871:	5a                   	pop    edx
c0012872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012876:	e8 96 4f ff ff       	call   c0007811 <free>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	b0 01                	mov    al,0x1
c0012880:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012886:	5b                   	pop    ebx
c0012887:	5e                   	pop    esi
c0012888:	5f                   	pop    edi
c0012889:	5d                   	pop    ebp
c001288a:	c3                   	ret    

c001288b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001288b:	56                   	push   esi
c001288c:	31 d2                	xor    edx,edx
c001288e:	53                   	push   ebx
c001288f:	8b 1d 40 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023040
c0012895:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012899:	39 d3                	cmp    ebx,edx
c001289b:	7e 1b                	jle    c00128b8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001289d:	8b 04 95 60 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcda0]
c00128a4:	39 c8                	cmp    eax,ecx
c00128a6:	77 0d                	ja     c00128b5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00128a8:	8b 34 95 60 30 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcfa0]
c00128af:	01 c6                	add    esi,eax
c00128b1:	39 ce                	cmp    esi,ecx
c00128b3:	77 05                	ja     c00128ba <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00128b5:	42                   	inc    edx
c00128b6:	eb e1                	jmp    c0012899 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00128b8:	31 c0                	xor    eax,eax
c00128ba:	5b                   	pop    ebx
c00128bb:	5e                   	pop    esi
c00128bc:	c3                   	ret    

c00128bd <Thr::getDriverNameFromAddress(unsigned long)>:
c00128bd:	53                   	push   ebx
c00128be:	31 c0                	xor    eax,eax
c00128c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00128c4:	8b 1d 40 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023040
c00128ca:	39 c3                	cmp    ebx,eax
c00128cc:	7e 22                	jle    c00128f0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00128ce:	8b 14 85 60 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcda0]
c00128d5:	39 ca                	cmp    edx,ecx
c00128d7:	77 14                	ja     c00128ed <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128d9:	03 14 85 60 30 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcfa0]
c00128e0:	39 ca                	cmp    edx,ecx
c00128e2:	76 09                	jbe    c00128ed <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128e4:	8b 04 85 60 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcba0]
c00128eb:	eb 05                	jmp    c00128f2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00128ed:	40                   	inc    eax
c00128ee:	eb da                	jmp    c00128ca <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00128f0:	31 c0                	xor    eax,eax
c00128f2:	5b                   	pop    ebx
c00128f3:	c3                   	ret    

c00128f4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00128f4:	53                   	push   ebx
c00128f5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128f9:	53                   	push   ebx
c00128fa:	e8 8c ff ff ff       	call   c001288b <Thr::getDriverBaseFromAddress(unsigned long)>
c00128ff:	5a                   	pop    edx
c0012900:	31 d2                	xor    edx,edx
c0012902:	85 c0                	test   eax,eax
c0012904:	74 04                	je     c001290a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012906:	89 da                	mov    edx,ebx
c0012908:	29 c2                	sub    edx,eax
c001290a:	89 d0                	mov    eax,edx
c001290c:	5b                   	pop    ebx
c001290d:	c3                   	ret    

c001290e <Thr::loadDLL(char const*, bool)>:
c001290e:	55                   	push   ebp
c001290f:	57                   	push   edi
c0012910:	56                   	push   esi
c0012911:	53                   	push   ebx
c0012912:	81 ec 34 01 00 00    	sub    esp,0x134
c0012918:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001291f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012926:	56                   	push   esi
c0012927:	68 ca e4 01 c0       	push   0xc001e4ca
c001292c:	e8 6b 7b ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0012931:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012938:	e8 c4 4e ff ff       	call   c0007801 <malloc>
c001293d:	83 c4 0c             	add    esp,0xc
c0012940:	89 c3                	mov    ebx,eax
c0012942:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c0012948:	56                   	push   esi
c0012949:	50                   	push   eax
c001294a:	e8 c3 80 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	85 db                	test   ebx,ebx
c0012954:	75 3c                	jne    c0012992 <Thr::loadDLL(char const*, bool)+0x84>
c0012956:	89 f8                	mov    eax,edi
c0012958:	84 c0                	test   al,al
c001295a:	0f 84 d2 01 00 00    	je     c0012b32 <Thr::loadDLL(char const*, bool)+0x224>
c0012960:	55                   	push   ebp
c0012961:	55                   	push   ebp
c0012962:	68 db e4 01 c0       	push   0xc001e4db
c0012967:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001296b:	55                   	push   ebp
c001296c:	e8 8f dc fe ff       	call   c0000600 <strcpy>
c0012971:	58                   	pop    eax
c0012972:	5a                   	pop    edx
c0012973:	56                   	push   esi
c0012974:	55                   	push   ebp
c0012975:	e8 46 de fe ff       	call   c00007c0 <strcat>
c001297a:	59                   	pop    ecx
c001297b:	58                   	pop    eax
c001297c:	68 ee e4 01 c0       	push   0xc001e4ee
c0012981:	55                   	push   ebp
c0012982:	e8 39 de fe ff       	call   c00007c0 <strcat>
c0012987:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001298a:	e8 70 d7 ff ff       	call   c00100ff <KePanic(char const*)>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	51                   	push   ecx
c0012993:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012997:	50                   	push   eax
c0012998:	8d 44 24 20          	lea    eax,[esp+0x20]
c001299c:	50                   	push   eax
c001299d:	53                   	push   ebx
c001299e:	e8 db 83 ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	85 db                	test   ebx,ebx
c00129a8:	74 0c                	je     c00129b6 <Thr::loadDLL(char const*, bool)+0xa8>
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129af:	53                   	push   ebx
c00129b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00129b3:	83 c4 10             	add    esp,0x10
c00129b6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00129bb:	75 0a                	jne    c00129c7 <Thr::loadDLL(char const*, bool)+0xb9>
c00129bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129c1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00129c5:	75 3c                	jne    c0012a03 <Thr::loadDLL(char const*, bool)+0xf5>
c00129c7:	89 f8                	mov    eax,edi
c00129c9:	84 c0                	test   al,al
c00129cb:	0f 84 49 01 00 00    	je     c0012b1a <Thr::loadDLL(char const*, bool)+0x20c>
c00129d1:	51                   	push   ecx
c00129d2:	51                   	push   ecx
c00129d3:	68 db e4 01 c0       	push   0xc001e4db
c00129d8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00129dc:	53                   	push   ebx
c00129dd:	e8 1e dc fe ff       	call   c0000600 <strcpy>
c00129e2:	5d                   	pop    ebp
c00129e3:	58                   	pop    eax
c00129e4:	56                   	push   esi
c00129e5:	53                   	push   ebx
c00129e6:	e8 d5 dd fe ff       	call   c00007c0 <strcat>
c00129eb:	58                   	pop    eax
c00129ec:	5a                   	pop    edx
c00129ed:	68 ee e4 01 c0       	push   0xc001e4ee
c00129f2:	53                   	push   ebx
c00129f3:	e8 c8 dd fe ff       	call   c00007c0 <strcat>
c00129f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129fb:	e8 ff d6 ff ff       	call   c00100ff <KePanic(char const*)>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	52                   	push   edx
c0012a04:	6a 03                	push   0x3
c0012a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a0e:	05 ff 0f 00 00       	add    eax,0xfff
c0012a13:	83 d2 00             	adc    edx,0x0
c0012a16:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012a1a:	50                   	push   eax
c0012a1b:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c0012a21:	e8 bc 6f ff ff       	call   c00099e2 <VAS::allocatePages(int, int)>
c0012a26:	59                   	pop    ecx
c0012a27:	89 c3                	mov    ebx,eax
c0012a29:	5d                   	pop    ebp
c0012a2a:	50                   	push   eax
c0012a2b:	68 be d2 01 c0       	push   0xc001d2be
c0012a30:	e8 67 7a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0012a35:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a38:	e8 03 db fe ff       	call   c0000540 <strlen>
c0012a3d:	8b 2d 40 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023040
c0012a43:	40                   	inc    eax
c0012a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a47:	e8 b5 4d ff ff       	call   c0007801 <malloc>
c0012a4c:	89 04 ad 60 34 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcba0],eax
c0012a53:	58                   	pop    eax
c0012a54:	a1 40 30 02 c0       	mov    eax,ds:0xc0023040
c0012a59:	5a                   	pop    edx
c0012a5a:	56                   	push   esi
c0012a5b:	ff 34 85 60 34 02 c0 	push   DWORD PTR [eax*4-0x3ffdcba0]
c0012a62:	e8 99 db fe ff       	call   c0000600 <strcpy>
c0012a67:	a1 40 30 02 c0       	mov    eax,ds:0xc0023040
c0012a6c:	8d 50 01             	lea    edx,[eax+0x1]
c0012a6f:	89 1c 85 60 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcda0],ebx
c0012a76:	89 15 40 30 02 c0    	mov    DWORD PTR ds:0xc0023040,edx
c0012a7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	89 14 85 60 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcfa0],edx
c0012a8a:	6a 01                	push   0x1
c0012a8c:	53                   	push   ebx
c0012a8d:	56                   	push   esi
c0012a8e:	e8 c2 f6 ff ff       	call   c0012155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012a93:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012a9f:	0f 85 89 00 00 00    	jne    c0012b2e <Thr::loadDLL(char const*, bool)+0x220>
c0012aa5:	89 f8                	mov    eax,edi
c0012aa7:	84 c0                	test   al,al
c0012aa9:	74 73                	je     c0012b1e <Thr::loadDLL(char const*, bool)+0x210>
c0012aab:	83 ec 0c             	sub    esp,0xc
c0012aae:	68 f0 e4 01 c0       	push   0xc001e4f0
c0012ab3:	e8 47 d6 ff ff       	call   c00100ff <KePanic(char const*)>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	eb 61                	jmp    c0012b1e <Thr::loadDLL(char const*, bool)+0x210>
c0012abd:	50                   	push   eax
c0012abe:	50                   	push   eax
c0012abf:	89 e8                	mov    eax,ebp
c0012ac1:	c1 e0 0c             	shl    eax,0xc
c0012ac4:	01 d8                	add    eax,ebx
c0012ac6:	50                   	push   eax
c0012ac7:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c0012acd:	e8 88 6a ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0012ad2:	83 c4 10             	add    esp,0x10
c0012ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ad7:	a8 60                	test   al,0x60
c0012ad9:	75 11                	jne    c0012aec <Thr::loadDLL(char const*, bool)+0x1de>
c0012adb:	83 ec 0c             	sub    esp,0xc
c0012ade:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ae3:	50                   	push   eax
c0012ae4:	e8 92 4f ff ff       	call   c0007a7b <Phys::freePage(unsigned long)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	45                   	inc    ebp
c0012aed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012af1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012af5:	05 ff 0f 00 00       	add    eax,0xfff
c0012afa:	bf 00 00 00 00       	mov    edi,0x0
c0012aff:	83 d2 00             	adc    edx,0x0
c0012b02:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b06:	c1 ea 0c             	shr    edx,0xc
c0012b09:	39 c5                	cmp    ebp,eax
c0012b0b:	89 d1                	mov    ecx,edx
c0012b0d:	89 f8                	mov    eax,edi
c0012b0f:	19 c8                	sbb    eax,ecx
c0012b11:	72 aa                	jb     c0012abd <Thr::loadDLL(char const*, bool)+0x1af>
c0012b13:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b18:	75 18                	jne    c0012b32 <Thr::loadDLL(char const*, bool)+0x224>
c0012b1a:	31 db                	xor    ebx,ebx
c0012b1c:	eb 14                	jmp    c0012b32 <Thr::loadDLL(char const*, bool)+0x224>
c0012b1e:	83 ec 0c             	sub    esp,0xc
c0012b21:	68 0f e5 01 c0       	push   0xc001e50f
c0012b26:	e8 d4 d5 ff ff       	call   c00100ff <KePanic(char const*)>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	31 ed                	xor    ebp,ebp
c0012b30:	eb bb                	jmp    c0012aed <Thr::loadDLL(char const*, bool)+0x1df>
c0012b32:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b38:	89 d8                	mov    eax,ebx
c0012b3a:	5b                   	pop    ebx
c0012b3b:	5e                   	pop    esi
c0012b3c:	5f                   	pop    edi
c0012b3d:	5d                   	pop    ebp
c0012b3e:	c3                   	ret    

c0012b3f <Thr::executeDLL(unsigned long, void*)>:
c0012b3f:	56                   	push   esi
c0012b40:	53                   	push   ebx
c0012b41:	52                   	push   edx
c0012b42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b4a:	85 db                	test   ebx,ebx
c0012b4c:	75 10                	jne    c0012b5e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	68 2b e5 01 c0       	push   0xc001e52b
c0012b56:	e8 a4 d5 ff ff       	call   c00100ff <KePanic(char const*)>
c0012b5b:	83 c4 10             	add    esp,0x10
c0012b5e:	50                   	push   eax
c0012b5f:	50                   	push   eax
c0012b60:	53                   	push   ebx
c0012b61:	68 55 e5 01 c0       	push   0xc001e555
c0012b66:	e8 31 79 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0012b6b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012b6f:	89 d8                	mov    eax,ebx
c0012b71:	83 c4 14             	add    esp,0x14
c0012b74:	5b                   	pop    ebx
c0012b75:	5e                   	pop    esi
c0012b76:	ff e0                	jmp    eax

c0012b78 <userModeEntryPoint(void*)>:
c0012b78:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0012b7d:	48                   	dec    eax
c0012b7e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0012b83:	75 03                	jne    c0012b88 <userModeEntryPoint(void*)+0x10>
c0012b85:	fb                   	sti    
c0012b86:	66 90                	xchg   ax,ax
c0012b88:	fb                   	sti    
c0012b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b91:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012b97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b9b:	e9 9f d6 fe ff       	jmp    c000023f <goToUsermode>

c0012ba0 <changeTSS>:
c0012ba0:	83 ec 14             	sub    esp,0x14
c0012ba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012bab:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012bb0:	c1 e2 15             	shl    edx,0x15
c0012bb3:	29 d0                	sub    eax,edx
c0012bb5:	50                   	push   eax
c0012bb6:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0012bbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bc1:	05 7c 11 00 00       	add    eax,0x117c
c0012bc6:	50                   	push   eax
c0012bc7:	e8 d0 5f ff ff       	call   c0008b9c <TSS::setESP(unsigned long)>
c0012bcc:	83 c4 1c             	add    esp,0x1c
c0012bcf:	c3                   	ret    

c0012bd0 <switchToThread(ThreadControlBlock*)>:
c0012bd0:	57                   	push   edi
c0012bd1:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0012bd6:	56                   	push   esi
c0012bd7:	85 c0                	test   eax,eax
c0012bd9:	53                   	push   ebx
c0012bda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bde:	0f 85 90 00 00 00    	jne    c0012c74 <switchToThread(ThreadControlBlock*)+0xa4>
c0012be4:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012be7:	80 fa ff             	cmp    dl,0xff
c0012bea:	0f 84 80 00 00 00    	je     c0012c70 <switchToThread(ThreadControlBlock*)+0xa0>
c0012bf0:	81 e2 ff 00 00 00    	and    edx,0xff
c0012bf6:	b8 00 04 00 00       	mov    eax,0x400
c0012bfb:	29 d0                	sub    eax,edx
c0012bfd:	d1 f8                	sar    eax,1
c0012bff:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c02:	66 90                	xchg   ax,ax
c0012c04:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c07:	e8 e5 25 00 00       	call   c00151f1 <HalQueryPerformanceCounter()>
c0012c0c:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012c11:	89 15 4c 38 02 c0    	mov    DWORD PTR ds:0xc002384c,edx
c0012c17:	89 c6                	mov    esi,eax
c0012c19:	89 d7                	mov    edi,edx
c0012c1b:	2b 35 38 38 02 c0    	sub    esi,DWORD PTR ds:0xc0023838
c0012c21:	a3 38 38 02 c0       	mov    ds:0xc0023838,eax
c0012c26:	1b 3d 3c 38 02 c0    	sbb    edi,DWORD PTR ds:0xc002383c
c0012c2c:	89 35 40 38 02 c0    	mov    DWORD PTR ds:0xc0023840,esi
c0012c32:	89 3d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edi
c0012c38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c3e:	89 15 3c 38 02 c0    	mov    DWORD PTR ds:0xc002383c,edx
c0012c44:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c47:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c4a:	01 c6                	add    esi,eax
c0012c4c:	11 d7                	adc    edi,edx
c0012c4e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c51:	83 ec 0c             	sub    esp,0xc
c0012c54:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012c57:	53                   	push   ebx
c0012c58:	e8 1a d6 fe ff       	call   c0000277 <switchToThreadASM>
c0012c5d:	0f 20 c0             	mov    eax,cr0
c0012c60:	83 c8 08             	or     eax,0x8
c0012c63:	0f 22 c0             	mov    cr0,eax
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	5b                   	pop    ebx
c0012c6a:	5e                   	pop    esi
c0012c6b:	5f                   	pop    edi
c0012c6c:	c3                   	ret    
c0012c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c70:	31 c0                	xor    eax,eax
c0012c72:	eb 90                	jmp    c0012c04 <switchToThread(ThreadControlBlock*)+0x34>
c0012c74:	5b                   	pop    ebx
c0012c75:	c7 05 00 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x1
c0012c7f:	5e                   	pop    esi
c0012c80:	5f                   	pop    edi
c0012c81:	c3                   	ret    
c0012c82:	66 90                	xchg   ax,ax

c0012c84 <Process::addArgs(char**)>:
c0012c84:	57                   	push   edi
c0012c85:	56                   	push   esi
c0012c86:	53                   	push   ebx
c0012c87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c8b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c8f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012c99:	85 ff                	test   edi,edi
c0012c9b:	74 43                	je     c0012ce0 <Process::addArgs(char**)+0x5c>
c0012c9d:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c9f:	85 c0                	test   eax,eax
c0012ca1:	74 3d                	je     c0012ce0 <Process::addArgs(char**)+0x5c>
c0012ca3:	31 db                	xor    ebx,ebx
c0012ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	50                   	push   eax
c0012cac:	e8 8f d8 fe ff       	call   c0000540 <strlen>
c0012cb1:	40                   	inc    eax
c0012cb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012cb5:	e8 47 4b ff ff       	call   c0007801 <malloc>
c0012cba:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012cc1:	5a                   	pop    edx
c0012cc2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012cc5:	59                   	pop    ecx
c0012cc6:	43                   	inc    ebx
c0012cc7:	52                   	push   edx
c0012cc8:	50                   	push   eax
c0012cc9:	e8 32 d9 fe ff       	call   c0000600 <strcpy>
c0012cce:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012cda:	85 c0                	test   eax,eax
c0012cdc:	75 ca                	jne    c0012ca8 <Process::addArgs(char**)+0x24>
c0012cde:	66 90                	xchg   ax,ax
c0012ce0:	5b                   	pop    ebx
c0012ce1:	5e                   	pop    esi
c0012ce2:	5f                   	pop    edi
c0012ce3:	c3                   	ret    

c0012ce4 <Process::Process(char const*, Process*, char**)>:
c0012ce4:	56                   	push   esi
c0012ce5:	53                   	push   ebx
c0012ce6:	83 ec 14             	sub    esp,0x14
c0012ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ced:	05 0c 02 00 00       	add    eax,0x20c
c0012cf2:	bb 07 00 00 00       	mov    ebx,0x7
c0012cf7:	89 c6                	mov    esi,eax
c0012cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cfc:	85 db                	test   ebx,ebx
c0012cfe:	78 14                	js     c0012d14 <Process::Process(char const*, Process*, char**)+0x30>
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	56                   	push   esi
c0012d04:	e8 53 98 00 00       	call   c001c55c <ThreadControlBlock::ThreadControlBlock()>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	83 c6 5f             	add    esi,0x5f
c0012d0f:	4b                   	dec    ebx
c0012d10:	eb ea                	jmp    c0012cfc <Process::Process(char const*, Process*, char**)+0x18>
c0012d12:	66 90                	xchg   ax,ax
c0012d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d26:	e8 c9 d1 ff ff       	call   c000fef4 <Krnl::newProcessEnv(Process*)>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	89 c2                	mov    edx,eax
c0012d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d34:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d3e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d47:	a1 24 f5 01 c0       	mov    eax,ds:0xc001f524
c0012d4c:	8d 50 01             	lea    edx,[eax+0x1]
c0012d4f:	89 15 24 f5 01 c0    	mov    DWORD PTR ds:0xc001f524,edx
c0012d55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012d59:	89 02                	mov    DWORD PTR [edx],eax
c0012d5b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d6a:	e8 92 4a ff ff       	call   c0007801 <malloc>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	89 c3                	mov    ebx,eax
c0012d74:	83 ec 08             	sub    esp,0x8
c0012d77:	6a 00                	push   0x0
c0012d79:	53                   	push   ebx
c0012d7a:	e8 0d 70 ff ff       	call   c0009d8c <VAS::VAS(bool)>
c0012d7f:	83 c4 10             	add    esp,0x10
c0012d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d86:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d90:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012d9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012da2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012db2:	85 c0                	test   eax,eax
c0012db4:	74 42                	je     c0012df8 <Process::Process(char const*, Process*, char**)+0x114>
c0012db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dc0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012de4:	05 0c 01 00 00       	add    eax,0x10c
c0012de9:	83 ec 08             	sub    esp,0x8
c0012dec:	52                   	push   edx
c0012ded:	50                   	push   eax
c0012dee:	e8 0d d8 fe ff       	call   c0000600 <strcpy>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	eb 64                	jmp    c0012e5c <Process::Process(char const*, Process*, char**)+0x178>
c0012df8:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e07:	e8 f5 49 ff ff       	call   c0007801 <malloc>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	89 c3                	mov    ebx,eax
c0012e11:	83 ec 08             	sub    esp,0x8
c0012e14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e18:	53                   	push   ebx
c0012e19:	e8 24 5b ff ff       	call   c0008942 <VgaText::VgaText(char const*)>
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e25:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e35:	83 ec 0c             	sub    esp,0xc
c0012e38:	50                   	push   eax
c0012e39:	e8 a4 53 ff ff       	call   c00081e2 <addToTerminalCycle(VgaText*)>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e45:	05 0c 01 00 00       	add    eax,0x10c
c0012e4a:	83 ec 08             	sub    esp,0x8
c0012e4d:	68 74 e5 01 c0       	push   0xc001e574
c0012e52:	50                   	push   eax
c0012e53:	e8 a8 d7 fe ff       	call   c0000600 <strcpy>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	90                   	nop
c0012e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e60:	83 c0 0c             	add    eax,0xc
c0012e63:	83 ec 08             	sub    esp,0x8
c0012e66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e6a:	50                   	push   eax
c0012e6b:	e8 90 d7 fe ff       	call   c0000600 <strcpy>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	83 ec 08             	sub    esp,0x8
c0012e76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e7e:	e8 01 fe ff ff       	call   c0012c84 <Process::addArgs(char**)>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	83 ec 08             	sub    esp,0x8
c0012e89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e91:	e8 89 ed ff ff       	call   c0011c1f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012e9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ea1:	83 f0 01             	xor    eax,0x1
c0012ea4:	88 c2                	mov    dl,al
c0012ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012eaa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012eb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012eb4:	25 ff 00 00 00       	and    eax,0xff
c0012eb9:	83 ec 08             	sub    esp,0x8
c0012ebc:	50                   	push   eax
c0012ebd:	68 cc e5 01 c0       	push   0xc001e5cc
c0012ec2:	e8 d5 75 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	90                   	nop
c0012ecb:	83 c4 14             	add    esp,0x14
c0012ece:	5b                   	pop    ebx
c0012ecf:	5e                   	pop    esi
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop
c0012ed2:	66 90                	xchg   ax,ax

c0012ed4 <Process::Process(bool, char const*, Process*, char**)>:
c0012ed4:	56                   	push   esi
c0012ed5:	53                   	push   ebx
c0012ed6:	83 ec 24             	sub    esp,0x24
c0012ed9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012edd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ee1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ee5:	05 0c 02 00 00       	add    eax,0x20c
c0012eea:	bb 07 00 00 00       	mov    ebx,0x7
c0012eef:	89 c6                	mov    esi,eax
c0012ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ef4:	85 db                	test   ebx,ebx
c0012ef6:	78 14                	js     c0012f0c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	56                   	push   esi
c0012efc:	e8 5b 96 00 00       	call   c001c55c <ThreadControlBlock::ThreadControlBlock()>
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	83 c6 5f             	add    esi,0x5f
c0012f07:	4b                   	dec    ebx
c0012f08:	eb ea                	jmp    c0012ef4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f17:	83 ec 0c             	sub    esp,0xc
c0012f1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f1e:	e8 d1 cf ff ff       	call   c000fef4 <Krnl::newProcessEnv(Process*)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	89 c2                	mov    edx,eax
c0012f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f3f:	a1 24 f5 01 c0       	mov    eax,ds:0xc001f524
c0012f44:	8d 50 01             	lea    edx,[eax+0x1]
c0012f47:	89 15 24 f5 01 c0    	mov    DWORD PTR ds:0xc001f524,edx
c0012f4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f51:	89 02                	mov    DWORD PTR [edx],eax
c0012f53:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f62:	e8 9a 48 ff ff       	call   c0007801 <malloc>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	89 c3                	mov    ebx,eax
c0012f6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012f70:	25 ff 00 00 00       	and    eax,0xff
c0012f75:	83 ec 08             	sub    esp,0x8
c0012f78:	50                   	push   eax
c0012f79:	53                   	push   ebx
c0012f7a:	e8 0d 6e ff ff       	call   c0009d8c <VAS::VAS(bool)>
c0012f7f:	83 c4 10             	add    esp,0x10
c0012f82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f86:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f90:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012f9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012fa2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012fa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fb2:	85 c0                	test   eax,eax
c0012fb4:	74 42                	je     c0012ff8 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fc0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012fc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012fd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fe4:	05 0c 01 00 00       	add    eax,0x10c
c0012fe9:	83 ec 08             	sub    esp,0x8
c0012fec:	52                   	push   edx
c0012fed:	50                   	push   eax
c0012fee:	e8 0d d6 fe ff       	call   c0000600 <strcpy>
c0012ff3:	83 c4 10             	add    esp,0x10
c0012ff6:	eb 64                	jmp    c001305c <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012ff8:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013000:	83 ec 0c             	sub    esp,0xc
c0013003:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013007:	e8 f5 47 ff ff       	call   c0007801 <malloc>
c001300c:	83 c4 10             	add    esp,0x10
c001300f:	89 c3                	mov    ebx,eax
c0013011:	83 ec 08             	sub    esp,0x8
c0013014:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013018:	53                   	push   ebx
c0013019:	e8 24 59 ff ff       	call   c0008942 <VgaText::VgaText(char const*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013025:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001302b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001302f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013035:	83 ec 0c             	sub    esp,0xc
c0013038:	50                   	push   eax
c0013039:	e8 a4 51 ff ff       	call   c00081e2 <addToTerminalCycle(VgaText*)>
c001303e:	83 c4 10             	add    esp,0x10
c0013041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013045:	05 0c 01 00 00       	add    eax,0x10c
c001304a:	83 ec 08             	sub    esp,0x8
c001304d:	68 74 e5 01 c0       	push   0xc001e574
c0013052:	50                   	push   eax
c0013053:	e8 a8 d5 fe ff       	call   c0000600 <strcpy>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	90                   	nop
c001305c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013060:	83 c0 0c             	add    eax,0xc
c0013063:	83 ec 08             	sub    esp,0x8
c0013066:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001306a:	50                   	push   eax
c001306b:	e8 90 d5 fe ff       	call   c0000600 <strcpy>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	83 ec 08             	sub    esp,0x8
c0013076:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001307a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307e:	e8 01 fc ff ff       	call   c0012c84 <Process::addArgs(char**)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	90                   	nop
c0013087:	83 c4 24             	add    esp,0x24
c001308a:	5b                   	pop    ebx
c001308b:	5e                   	pop    esi
c001308c:	c3                   	ret    
c001308d:	8d 76 00             	lea    esi,[esi+0x0]

c0013090 <taskStartupFunction>:
c0013090:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013095:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013098:	c3                   	ret    
c0013099:	90                   	nop
c001309a:	66 90                	xchg   ax,ax

c001309c <Semaphore::Semaphore(int)>:
c001309c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a4:	89 10                	mov    DWORD PTR [eax],edx
c00130a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00130b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00130bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00130c7:	90                   	nop
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop
c00130ca:	66 90                	xchg   ax,ax

c00130cc <Mutex::Mutex()>:
c00130cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d0:	6a 01                	push   0x1
c00130d2:	50                   	push   eax
c00130d3:	e8 c4 ff ff ff       	call   c001309c <Semaphore::Semaphore(int)>
c00130d8:	83 c4 08             	add    esp,0x8
c00130db:	90                   	nop
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop
c00130de:	66 90                	xchg   ax,ax

c00130e0 <Process::createThread(void (*)(void*), void*, int)>:
c00130e0:	57                   	push   edi
c00130e1:	31 c9                	xor    ecx,ecx
c00130e3:	56                   	push   esi
c00130e4:	53                   	push   ebx
c00130e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130e9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00130f0:	89 f2                	mov    edx,esi
c00130f2:	66 90                	xchg   ax,ax
c00130f4:	31 c0                	xor    eax,eax
c00130f6:	66 89 d0             	mov    ax,dx
c00130f9:	83 e2 01             	and    edx,0x1
c00130fc:	74 12                	je     c0013110 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00130fe:	d1 f8                	sar    eax,1
c0013100:	41                   	inc    ecx
c0013101:	89 c2                	mov    edx,eax
c0013103:	83 f9 10             	cmp    ecx,0x10
c0013106:	75 ec                	jne    c00130f4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013108:	31 db                	xor    ebx,ebx
c001310a:	89 d8                	mov    eax,ebx
c001310c:	5b                   	pop    ebx
c001310d:	5e                   	pop    esi
c001310e:	5f                   	pop    edi
c001310f:	c3                   	ret    
c0013110:	b8 01 00 00 00       	mov    eax,0x1
c0013115:	d3 e0                	shl    eax,cl
c0013117:	09 c6                	or     esi,eax
c0013119:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001311c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013123:	01 c0                	add    eax,eax
c0013125:	01 c8                	add    eax,ecx
c0013127:	8d 04 80             	lea    eax,[eax+eax*4]
c001312a:	01 d8                	add    eax,ebx
c001312c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013133:	75 0b                	jne    c0013140 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013135:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001313f:	90                   	nop
c0013140:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013146:	83 ec 08             	sub    esp,0x8
c0013149:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001314c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001314f:	01 c0                	add    eax,eax
c0013151:	01 c8                	add    eax,ecx
c0013153:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013156:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013159:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001315f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013165:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013169:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001316f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013175:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001317c:	89 ca                	mov    edx,ecx
c001317e:	f7 da                	neg    edx
c0013180:	c1 e2 15             	shl    edx,0x15
c0013183:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013189:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001318f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013193:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001319d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00131a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131a7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00131ad:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00131b7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00131c1:	53                   	push   ebx
c00131c2:	68 24 38 02 c0       	push   0xc0023824
c00131c7:	e8 30 91 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	89 d8                	mov    eax,ebx
c00131d1:	5b                   	pop    ebx
c00131d2:	5e                   	pop    esi
c00131d3:	5f                   	pop    edi
c00131d4:	c3                   	ret    
c00131d5:	90                   	nop
c00131d6:	66 90                	xchg   ax,ax

c00131d8 <Process::createUserThread()>:
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	68 80 00 00 00       	push   0x80
c00131e0:	6a 00                	push   0x0
c00131e2:	68 78 2b 01 c0       	push   0xc0012b78
c00131e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131eb:	50                   	push   eax
c00131ec:	e8 ef fe ff ff       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c00131f1:	83 c4 1c             	add    esp,0x1c
c00131f4:	c3                   	ret    
c00131f5:	8d 76 00             	lea    esi,[esi+0x0]

c00131f8 <setupMultitasking(void (*)())>:
c00131f8:	56                   	push   esi
c00131f9:	53                   	push   ebx
c00131fa:	53                   	push   ebx
c00131fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131ff:	eb 13                	jmp    c0013214 <setupMultitasking(void (*)())+0x1c>
c0013201:	8d 76 00             	lea    esi,[esi+0x0]
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 24 38 02 c0       	push   0xc0023824
c001320c:	e8 33 90 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	68 24 38 02 c0       	push   0xc0023824
c001321c:	e8 ff 8f 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013221:	83 c4 10             	add    esp,0x10
c0013224:	84 c0                	test   al,al
c0013226:	74 dc                	je     c0013204 <setupMultitasking(void (*)())+0xc>
c0013228:	83 ec 0c             	sub    esp,0xc
c001322b:	68 1f 07 00 00       	push   0x71f
c0013230:	e8 cc 45 ff ff       	call   c0007801 <malloc>
c0013235:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001323c:	89 c3                	mov    ebx,eax
c001323e:	6a 00                	push   0x0
c0013240:	68 78 e5 01 c0       	push   0xc001e578
c0013245:	6a 01                	push   0x1
c0013247:	50                   	push   eax
c0013248:	e8 87 fc ff ff       	call   c0012ed4 <Process::Process(bool, char const*, Process*, char**)>
c001324d:	83 c4 14             	add    esp,0x14
c0013250:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013256:	89 1d 30 38 02 c0    	mov    DWORD PTR ds:0xc0023830,ebx
c001325c:	50                   	push   eax
c001325d:	e8 dd 51 ff ff       	call   c000843f <setActiveTerminal(VgaText*)>
c0013262:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001326a:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013274:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001327a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001327d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013287:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001328d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013293:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001329d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00132a7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00132b1:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00132b7:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00132bd:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00132c7:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00132cd:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00132d7:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00132dd:	5a                   	pop    edx
c00132de:	59                   	pop    ecx
c00132df:	68 74 e5 01 c0       	push   0xc001e574
c00132e4:	50                   	push   eax
c00132e5:	e8 16 d3 fe ff       	call   c0000600 <strcpy>
c00132ea:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00132f1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132f5:	83 c4 14             	add    esp,0x14
c00132f8:	5b                   	pop    ebx
c00132f9:	5e                   	pop    esi
c00132fa:	e9 6a cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00132ff:	90                   	nop

c0013300 <schedule()>:
c0013300:	8b 15 04 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023804
c0013306:	85 d2                	test   edx,edx
c0013308:	74 0e                	je     c0013318 <schedule()+0x18>
c001330a:	c7 05 00 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x1
c0013314:	c3                   	ret    
c0013315:	8d 76 00             	lea    esi,[esi+0x0]
c0013318:	53                   	push   ebx
c0013319:	83 ec 14             	sub    esp,0x14
c001331c:	68 24 38 02 c0       	push   0xc0023824
c0013321:	e8 fa 8e 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	84 c0                	test   al,al
c001332b:	75 3b                	jne    c0013368 <schedule()+0x68>
c001332d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013332:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013335:	4a                   	dec    edx
c0013336:	74 38                	je     c0013370 <schedule()+0x70>
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	68 24 38 02 c0       	push   0xc0023824
c0013340:	e8 f7 8e 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013345:	c7 04 24 24 38 02 c0 	mov    DWORD PTR [esp],0xc0023824
c001334c:	89 c3                	mov    ebx,eax
c001334e:	e8 f1 8e 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013353:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001335a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001335d:	e8 6e f8 ff ff       	call   c0012bd0 <switchToThread(ThreadControlBlock*)>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	8d 76 00             	lea    esi,[esi+0x0]
c0013368:	83 c4 08             	add    esp,0x8
c001336b:	5b                   	pop    ebx
c001336c:	c3                   	ret    
c001336d:	8d 76 00             	lea    esi,[esi+0x0]
c0013370:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013377:	83 ec 08             	sub    esp,0x8
c001337a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001337f:	50                   	push   eax
c0013380:	68 24 38 02 c0       	push   0xc0023824
c0013385:	e8 72 8f 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	eb a9                	jmp    c0013338 <schedule()+0x38>
c001338f:	90                   	nop

c0013390 <Semaphore::tryAcquire()>:
c0013390:	53                   	push   ebx
c0013391:	83 ec 08             	sub    esp,0x8
c0013394:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013398:	fa                   	cli    
c0013399:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001339e:	8d 50 01             	lea    edx,[eax+0x1]
c00133a1:	89 15 08 38 02 c0    	mov    DWORD PTR ds:0xc0023808,edx
c00133a7:	8b 15 04 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023804
c00133ad:	8d 5a 01             	lea    ebx,[edx+0x1]
c00133b0:	89 1d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ebx
c00133b6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00133b9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00133bb:	7c 33                	jl     c00133f0 <Semaphore::tryAcquire()+0x60>
c00133bd:	89 15 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,edx
c00133c3:	85 d2                	test   edx,edx
c00133c5:	75 0d                	jne    c00133d4 <Semaphore::tryAcquire()+0x44>
c00133c7:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c00133cd:	85 d2                	test   edx,edx
c00133cf:	75 6b                	jne    c001343c <Semaphore::tryAcquire()+0xac>
c00133d1:	8d 76 00             	lea    esi,[esi+0x0]
c00133d4:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00133d9:	85 c0                	test   eax,eax
c00133db:	74 0b                	je     c00133e8 <Semaphore::tryAcquire()+0x58>
c00133dd:	8d 76 00             	lea    esi,[esi+0x0]
c00133e0:	31 c0                	xor    eax,eax
c00133e2:	83 c4 08             	add    esp,0x8
c00133e5:	5b                   	pop    ebx
c00133e6:	c3                   	ret    
c00133e7:	90                   	nop
c00133e8:	fb                   	sti    
c00133e9:	83 c4 08             	add    esp,0x8
c00133ec:	5b                   	pop    ebx
c00133ed:	c3                   	ret    
c00133ee:	66 90                	xchg   ax,ax
c00133f0:	43                   	inc    ebx
c00133f1:	89 15 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,edx
c00133f7:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00133fa:	85 d2                	test   edx,edx
c00133fc:	75 22                	jne    c0013420 <Semaphore::tryAcquire()+0x90>
c00133fe:	8b 0d 00 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023800
c0013404:	85 c9                	test   ecx,ecx
c0013406:	74 18                	je     c0013420 <Semaphore::tryAcquire()+0x90>
c0013408:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0013412:	e8 e9 fe ff ff       	call   c0013300 <schedule()>
c0013417:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001341c:	48                   	dec    eax
c001341d:	8d 76 00             	lea    esi,[esi+0x0]
c0013420:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013425:	85 c0                	test   eax,eax
c0013427:	75 0b                	jne    c0013434 <Semaphore::tryAcquire()+0xa4>
c0013429:	fb                   	sti    
c001342a:	b0 01                	mov    al,0x1
c001342c:	83 c4 08             	add    esp,0x8
c001342f:	5b                   	pop    ebx
c0013430:	c3                   	ret    
c0013431:	8d 76 00             	lea    esi,[esi+0x0]
c0013434:	b0 01                	mov    al,0x1
c0013436:	83 c4 08             	add    esp,0x8
c0013439:	5b                   	pop    ebx
c001343a:	c3                   	ret    
c001343b:	90                   	nop
c001343c:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0013446:	e8 b5 fe ff ff       	call   c0013300 <schedule()>
c001344b:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013450:	48                   	dec    eax
c0013451:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013456:	85 c0                	test   eax,eax
c0013458:	75 86                	jne    c00133e0 <Semaphore::tryAcquire()+0x50>
c001345a:	eb 8c                	jmp    c00133e8 <Semaphore::tryAcquire()+0x58>

c001345c <Semaphore::assertLocked(char const*)>:
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013463:	fa                   	cli    
c0013464:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c001346a:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c001346f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013472:	89 0d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ecx
c0013478:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001347a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001347d:	7c 29                	jl     c00134a8 <Semaphore::assertLocked(char const*)+0x4c>
c001347f:	90                   	nop
c0013480:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0013485:	85 c0                	test   eax,eax
c0013487:	75 0b                	jne    c0013494 <Semaphore::assertLocked(char const*)+0x38>
c0013489:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001348e:	85 c0                	test   eax,eax
c0013490:	75 2e                	jne    c00134c0 <Semaphore::assertLocked(char const*)+0x64>
c0013492:	66 90                	xchg   ax,ax
c0013494:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013499:	48                   	dec    eax
c001349a:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c001349f:	75 03                	jne    c00134a4 <Semaphore::assertLocked(char const*)+0x48>
c00134a1:	fb                   	sti    
c00134a2:	66 90                	xchg   ax,ax
c00134a4:	83 c4 0c             	add    esp,0xc
c00134a7:	c3                   	ret    
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134af:	52                   	push   edx
c00134b0:	e8 4a cc ff ff       	call   c00100ff <KePanic(char const*)>
c00134b5:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	48                   	dec    eax
c00134be:	eb c0                	jmp    c0013480 <Semaphore::assertLocked(char const*)+0x24>
c00134c0:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c00134ca:	e8 31 fe ff ff       	call   c0013300 <schedule()>
c00134cf:	eb c3                	jmp    c0013494 <Semaphore::assertLocked(char const*)+0x38>
c00134d1:	8d 76 00             	lea    esi,[esi+0x0]

c00134d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00134d4:	83 ec 0c             	sub    esp,0xc
c00134d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134e3:	e8 18 fe ff ff       	call   c0013300 <schedule()>
c00134e8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00134ed:	48                   	dec    eax
c00134ee:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00134f3:	75 03                	jne    c00134f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00134f5:	fb                   	sti    
c00134f6:	66 90                	xchg   ax,ax
c00134f8:	83 c4 0c             	add    esp,0xc
c00134fb:	c3                   	ret    

c00134fc <blockTask(TaskState)>:
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	fa                   	cli    
c0013500:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013506:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001350f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013512:	e8 e9 fd ff ff       	call   c0013300 <schedule()>
c0013517:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001351c:	48                   	dec    eax
c001351d:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013522:	75 04                	jne    c0013528 <blockTask(TaskState)+0x2c>
c0013524:	fb                   	sti    
c0013525:	8d 76 00             	lea    esi,[esi+0x0]
c0013528:	83 c4 0c             	add    esp,0xc
c001352b:	c3                   	ret    

c001352c <waitTask(int, int*, int)>:
c001352c:	83 ec 18             	sub    esp,0x18
c001352f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013534:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013538:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001353b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001353f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013544:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013547:	6a 07                	push   0x7
c0013549:	e8 ae ff ff ff       	call   c00134fc <blockTask(TaskState)>
c001354e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013559:	85 d2                	test   edx,edx
c001355b:	74 0b                	je     c0013568 <waitTask(int, int*, int)+0x3c>
c001355d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013560:	89 02                	mov    DWORD PTR [edx],eax
c0013562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013567:	90                   	nop
c0013568:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001356b:	83 c4 0c             	add    esp,0xc
c001356e:	c3                   	ret    
c001356f:	90                   	nop

c0013570 <milliTenthSleepUntil(unsigned int)>:
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013577:	39 05 2c 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b2c,eax
c001357d:	76 05                	jbe    c0013584 <milliTenthSleepUntil(unsigned int)+0x14>
c001357f:	90                   	nop
c0013580:	83 c4 0c             	add    esp,0xc
c0013583:	c3                   	ret    
c0013584:	fa                   	cli    
c0013585:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c001358b:	83 ec 08             	sub    esp,0x8
c001358e:	ff 05 04 38 02 c0    	inc    DWORD PTR ds:0xc0023804
c0013594:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001359a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001359d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135a3:	52                   	push   edx
c00135a4:	68 18 38 02 c0       	push   0xc0023818
c00135a9:	e8 4e 8d 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00135ae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00135b5:	e8 42 ff ff ff       	call   c00134fc <blockTask(TaskState)>
c00135ba:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	48                   	dec    eax
c00135c3:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c00135c8:	85 c0                	test   eax,eax
c00135ca:	75 0c                	jne    c00135d8 <milliTenthSleepUntil(unsigned int)+0x68>
c00135cc:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00135d1:	85 c0                	test   eax,eax
c00135d3:	75 17                	jne    c00135ec <milliTenthSleepUntil(unsigned int)+0x7c>
c00135d5:	8d 76 00             	lea    esi,[esi+0x0]
c00135d8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00135dd:	48                   	dec    eax
c00135de:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00135e3:	75 9b                	jne    c0013580 <milliTenthSleepUntil(unsigned int)+0x10>
c00135e5:	fb                   	sti    
c00135e6:	83 c4 0c             	add    esp,0xc
c00135e9:	c3                   	ret    
c00135ea:	66 90                	xchg   ax,ax
c00135ec:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c00135f6:	e8 05 fd ff ff       	call   c0013300 <schedule()>
c00135fb:	eb db                	jmp    c00135d8 <milliTenthSleepUntil(unsigned int)+0x68>
c00135fd:	8d 76 00             	lea    esi,[esi+0x0]

c0013600 <milliTenthSleep(unsigned int)>:
c0013600:	a1 2c 2b 02 c0       	mov    eax,ds:0xc0022b2c
c0013605:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013609:	e9 62 ff ff ff       	jmp    c0013570 <milliTenthSleepUntil(unsigned int)>
c001360e:	66 90                	xchg   ax,ax

c0013610 <sleep(unsigned int)>:
c0013610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013614:	8d 04 80             	lea    eax,[eax+eax*4]
c0013617:	8d 04 80             	lea    eax,[eax+eax*4]
c001361a:	8d 04 80             	lea    eax,[eax+eax*4]
c001361d:	8d 04 80             	lea    eax,[eax+eax*4]
c0013620:	c1 e0 04             	shl    eax,0x4
c0013623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013627:	eb d7                	jmp    c0013600 <milliTenthSleep(unsigned int)>
c0013629:	90                   	nop
c001362a:	66 90                	xchg   ax,ax

c001362c <Semaphore::acquire()>:
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013633:	fa                   	cli    
c0013634:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0013639:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c001363f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013642:	89 0d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ecx
c0013648:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001364b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001364d:	7d 2d                	jge    c001367c <Semaphore::acquire()+0x50>
c001364f:	41                   	inc    ecx
c0013650:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013653:	90                   	nop
c0013654:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0013659:	85 c0                	test   eax,eax
c001365b:	75 0b                	jne    c0013668 <Semaphore::acquire()+0x3c>
c001365d:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0013662:	85 c0                	test   eax,eax
c0013664:	75 62                	jne    c00136c8 <Semaphore::acquire()+0x9c>
c0013666:	66 90                	xchg   ax,ax
c0013668:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001366d:	48                   	dec    eax
c001366e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013673:	75 03                	jne    c0013678 <Semaphore::acquire()+0x4c>
c0013675:	fb                   	sti    
c0013676:	66 90                	xchg   ax,ax
c0013678:	83 c4 0c             	add    esp,0xc
c001367b:	c3                   	ret    
c001367c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013681:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013688:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001368b:	85 c9                	test   ecx,ecx
c001368d:	74 4d                	je     c00136dc <Semaphore::acquire()+0xb0>
c001368f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013692:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013698:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001369b:	90                   	nop
c001369c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136a1:	83 ec 0c             	sub    esp,0xc
c00136a4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00136a7:	68 f4 e5 01 c0       	push   0xc001e5f4
c00136ac:	e8 eb 6d ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c00136b1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00136b8:	e8 3f fe ff ff       	call   c00134fc <blockTask(TaskState)>
c00136bd:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	48                   	dec    eax
c00136c6:	eb 8c                	jmp    c0013654 <Semaphore::acquire()+0x28>
c00136c8:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c00136d2:	e8 29 fc ff ff       	call   c0013300 <schedule()>
c00136d7:	eb 8f                	jmp    c0013668 <Semaphore::acquire()+0x3c>
c00136d9:	8d 76 00             	lea    esi,[esi+0x0]
c00136dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00136e4:	eb b6                	jmp    c001369c <Semaphore::acquire()+0x70>
c00136e6:	66 90                	xchg   ax,ax

c00136e8 <taskReturned>:
c00136e8:	83 ec 18             	sub    esp,0x18
c00136eb:	68 14 e6 01 c0       	push   0xc001e614
c00136f0:	e8 0a ca ff ff       	call   c00100ff <KePanic(char const*)>
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	83 ec 0c             	sub    esp,0xc
c00136fb:	6a 02                	push   0x2
c00136fd:	e8 fa fd ff ff       	call   c00134fc <blockTask(TaskState)>
c0013702:	fa                   	cli    
c0013703:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013709:	e8 f2 fb ff ff       	call   c0013300 <schedule()>
c001370e:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	48                   	dec    eax
c0013717:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c001371c:	85 c0                	test   eax,eax
c001371e:	75 d8                	jne    c00136f8 <taskReturned+0x10>
c0013720:	fb                   	sti    
c0013721:	eb d5                	jmp    c00136f8 <taskReturned+0x10>
c0013723:	90                   	nop

c0013724 <Thr::processFromPID(int)>:
c0013724:	57                   	push   edi
c0013725:	56                   	push   esi
c0013726:	53                   	push   ebx
c0013727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001372b:	fa                   	cli    
c001372c:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	68 24 38 02 c0       	push   0xc0023824
c001373a:	e8 fd 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001373f:	83 c4 10             	add    esp,0x10
c0013742:	89 c7                	mov    edi,eax
c0013744:	eb 16                	jmp    c001375c <Thr::processFromPID(int)+0x38>
c0013746:	66 90                	xchg   ax,ax
c0013748:	83 ec 0c             	sub    esp,0xc
c001374b:	68 24 38 02 c0       	push   0xc0023824
c0013750:	e8 e7 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	39 f8                	cmp    eax,edi
c001375a:	74 4c                	je     c00137a8 <Thr::processFromPID(int)+0x84>
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	68 24 38 02 c0       	push   0xc0023824
c0013764:	e8 d3 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013769:	c7 04 24 24 38 02 c0 	mov    DWORD PTR [esp],0xc0023824
c0013770:	89 c3                	mov    ebx,eax
c0013772:	e8 cd 8a 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013777:	58                   	pop    eax
c0013778:	5a                   	pop    edx
c0013779:	53                   	push   ebx
c001377a:	68 24 38 02 c0       	push   0xc0023824
c001377f:	e8 78 8b 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013784:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	39 30                	cmp    DWORD PTR [eax],esi
c001378c:	75 ba                	jne    c0013748 <Thr::processFromPID(int)+0x24>
c001378e:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013793:	48                   	dec    eax
c0013794:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013799:	74 09                	je     c00137a4 <Thr::processFromPID(int)+0x80>
c001379b:	90                   	nop
c001379c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001379f:	5b                   	pop    ebx
c00137a0:	5e                   	pop    esi
c00137a1:	5f                   	pop    edi
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop
c00137a4:	fb                   	sti    
c00137a5:	eb f5                	jmp    c001379c <Thr::processFromPID(int)+0x78>
c00137a7:	90                   	nop
c00137a8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00137ad:	48                   	dec    eax
c00137ae:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00137b3:	75 07                	jne    c00137bc <Thr::processFromPID(int)+0x98>
c00137b5:	fb                   	sti    
c00137b6:	5b                   	pop    ebx
c00137b7:	5e                   	pop    esi
c00137b8:	5f                   	pop    edi
c00137b9:	c3                   	ret    
c00137ba:	66 90                	xchg   ax,ax
c00137bc:	5b                   	pop    ebx
c00137bd:	31 c0                	xor    eax,eax
c00137bf:	5e                   	pop    esi
c00137c0:	5f                   	pop    edi
c00137c1:	c3                   	ret    
c00137c2:	66 90                	xchg   ax,ax

c00137c4 <unblockTask(ThreadControlBlock*)>:
c00137c4:	53                   	push   ebx
c00137c5:	83 ec 08             	sub    esp,0x8
c00137c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137cc:	fa                   	cli    
c00137cd:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c00137d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137d6:	85 c0                	test   eax,eax
c00137d8:	74 66                	je     c0013840 <unblockTask(ThreadControlBlock*)+0x7c>
c00137da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137dd:	48                   	dec    eax
c00137de:	74 38                	je     c0013818 <unblockTask(ThreadControlBlock*)+0x54>
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	68 24 38 02 c0       	push   0xc0023824
c00137e8:	e8 4f 8a 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	85 c0                	test   eax,eax
c00137f2:	75 1c                	jne    c0013810 <unblockTask(ThreadControlBlock*)+0x4c>
c00137f4:	eb 5e                	jmp    c0013854 <unblockTask(ThreadControlBlock*)+0x90>
c00137f6:	66 90                	xchg   ax,ax
c00137f8:	83 ec 08             	sub    esp,0x8
c00137fb:	50                   	push   eax
c00137fc:	68 24 38 02 c0       	push   0xc0023824
c0013801:	e8 e6 8d 00 00       	call   c001c5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	85 c0                	test   eax,eax
c001380b:	74 47                	je     c0013854 <unblockTask(ThreadControlBlock*)+0x90>
c001380d:	8d 76 00             	lea    esi,[esi+0x0]
c0013810:	39 c3                	cmp    ebx,eax
c0013812:	75 e4                	jne    c00137f8 <unblockTask(ThreadControlBlock*)+0x34>
c0013814:	eb 12                	jmp    c0013828 <unblockTask(ThreadControlBlock*)+0x64>
c0013816:	66 90                	xchg   ax,ax
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	68 96 e5 01 c0       	push   0xc001e596
c0013820:	e8 77 6c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001382d:	48                   	dec    eax
c001382e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013833:	75 03                	jne    c0013838 <unblockTask(ThreadControlBlock*)+0x74>
c0013835:	fb                   	sti    
c0013836:	66 90                	xchg   ax,ax
c0013838:	83 c4 08             	add    esp,0x8
c001383b:	5b                   	pop    ebx
c001383c:	c3                   	ret    
c001383d:	8d 76 00             	lea    esi,[esi+0x0]
c0013840:	83 ec 0c             	sub    esp,0xc
c0013843:	68 7f e5 01 c0       	push   0xc001e57f
c0013848:	e8 4f 6c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	eb d6                	jmp    c0013828 <unblockTask(ThreadControlBlock*)+0x64>
c0013852:	66 90                	xchg   ax,ax
c0013854:	83 ec 08             	sub    esp,0x8
c0013857:	53                   	push   ebx
c0013858:	68 24 38 02 c0       	push   0xc0023824
c001385d:	e8 9a 8a 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	eb c1                	jmp    c0013828 <unblockTask(ThreadControlBlock*)+0x64>
c0013867:	90                   	nop

c0013868 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013868:	55                   	push   ebp
c0013869:	57                   	push   edi
c001386a:	56                   	push   esi
c001386b:	53                   	push   ebx
c001386c:	83 ec 1c             	sub    esp,0x1c
c001386f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013873:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013876:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001387c:	85 ed                	test   ebp,ebp
c001387e:	7e 24                	jle    c00138a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013880:	31 f6                	xor    esi,esi
c0013882:	66 90                	xchg   ax,ax
c0013884:	83 ec 0c             	sub    esp,0xc
c0013887:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001388e:	46                   	inc    esi
c001388f:	57                   	push   edi
c0013890:	e8 7c 3f ff ff       	call   c0007811 <free>
c0013895:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013898:	83 c4 10             	add    esp,0x10
c001389b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00138a1:	7f e1                	jg     c0013884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00138a3:	90                   	nop
c00138a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00138ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00138b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00138b9:	d3 c0                	rol    eax,cl
c00138bb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00138c2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138c5:	89 f7                	mov    edi,esi
c00138c7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00138cf:	0f 85 77 01 00 00    	jne    c0013a4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00138d5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00138db:	85 ed                	test   ebp,ebp
c00138dd:	74 1d                	je     c00138fc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00138df:	83 ec 0c             	sub    esp,0xc
c00138e2:	55                   	push   ebp
c00138e3:	e8 28 c5 ff ff       	call   c000fe10 <EnvVarContainer::~EnvVarContainer()>
c00138e8:	59                   	pop    ecx
c00138e9:	5e                   	pop    esi
c00138ea:	6a 0c                	push   0xc
c00138ec:	55                   	push   ebp
c00138ed:	e8 b4 6a ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c00138f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138f5:	83 c4 10             	add    esp,0x10
c00138f8:	89 f7                	mov    edi,esi
c00138fa:	66 90                	xchg   ax,ax
c00138fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013902:	85 c0                	test   eax,eax
c0013904:	0f 84 b6 00 00 00    	je     c00139c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001390a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001390d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013911:	31 c9                	xor    ecx,ecx
c0013913:	eb 17                	jmp    c001392c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013915:	8d 76 00             	lea    esi,[esi+0x0]
c0013918:	41                   	inc    ecx
c0013919:	83 f9 10             	cmp    ecx,0x10
c001391c:	0f 84 9e 00 00 00    	je     c00139c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013922:	66 90                	xchg   ax,ax
c0013924:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001392a:	66 90                	xchg   ax,ax
c001392c:	31 d2                	xor    edx,edx
c001392e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013935:	d3 fa                	sar    edx,cl
c0013937:	83 e2 01             	and    edx,0x1
c001393a:	74 dc                	je     c0013918 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001393c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001393f:	01 d2                	add    edx,edx
c0013941:	01 ca                	add    edx,ecx
c0013943:	8d 14 92             	lea    edx,[edx+edx*4]
c0013946:	01 d0                	add    eax,edx
c0013948:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001394e:	83 fd 07             	cmp    ebp,0x7
c0013951:	75 c5                	jne    c0013918 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013953:	05 40 02 00 00       	add    eax,0x240
c0013958:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001395b:	83 fd ff             	cmp    ebp,0xffffffff
c001395e:	0f 8c f0 00 00 00    	jl     c0013a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013964:	0f 84 ae 01 00 00    	je     c0013b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c001396a:	85 ed                	test   ebp,ebp
c001396c:	0f 84 92 01 00 00    	je     c0013b04 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013972:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013974:	75 a2                	jne    c0013918 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013976:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001397c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013980:	01 d0                	add    eax,edx
c0013982:	66 90                	xchg   ax,ax
c0013984:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013991:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013994:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001399a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00139a1:	50                   	push   eax
c00139a2:	e8 1d fe ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00139ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139b1:	89 f7                	mov    edi,esi
c00139b3:	41                   	inc    ecx
c00139b4:	83 f9 10             	cmp    ecx,0x10
c00139b7:	0f 85 67 ff ff ff    	jne    c0013924 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00139bd:	8d 76 00             	lea    esi,[esi+0x0]
c00139c0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00139c6:	85 c0                	test   eax,eax
c00139c8:	74 62                	je     c0013a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139ca:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00139d0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00139d6:	74 54                	je     c0013a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139d8:	83 ec 0c             	sub    esp,0xc
c00139db:	68 24 38 02 c0       	push   0xc0023824
c00139e0:	e8 57 88 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139e5:	c7 04 24 24 38 02 c0 	mov    DWORD PTR [esp],0xc0023824
c00139ec:	89 c7                	mov    edi,eax
c00139ee:	e8 2d 88 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	84 c0                	test   al,al
c00139f8:	0f 84 ce 00 00 00    	je     c0013acc <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00139fe:	66 90                	xchg   ax,ax
c0013a00:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a03:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a09:	85 d2                	test   edx,edx
c0013a0b:	74 0f                	je     c0013a1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013a0d:	83 ec 0c             	sub    esp,0xc
c0013a10:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a12:	52                   	push   edx
c0013a13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a16:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013a26:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013a29:	8d 76 00             	lea    esi,[esi+0x0]
c0013a2c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013a32:	85 db                	test   ebx,ebx
c0013a34:	74 16                	je     c0013a4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	53                   	push   ebx
c0013a3a:	e8 3b 5d ff ff       	call   c000977a <VAS::~VAS()>
c0013a3f:	58                   	pop    eax
c0013a40:	5a                   	pop    edx
c0013a41:	6a 14                	push   0x14
c0013a43:	53                   	push   ebx
c0013a44:	e8 5d 69 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c0013a49:	83 c4 10             	add    esp,0x10
c0013a4c:	83 c4 1c             	add    esp,0x1c
c0013a4f:	5b                   	pop    ebx
c0013a50:	5e                   	pop    esi
c0013a51:	5f                   	pop    edi
c0013a52:	5d                   	pop    ebp
c0013a53:	c3                   	ret    
c0013a54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	68 48 e6 01 c0       	push   0xc001e648
c0013a60:	e8 9a c6 ff ff       	call   c00100ff <KePanic(char const*)>
c0013a65:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a68:	83 c4 10             	add    esp,0x10
c0013a6b:	89 f7                	mov    edi,esi
c0013a6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a71:	e9 a2 fe ff ff       	jmp    c0013918 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a76:	66 90                	xchg   ax,ax
c0013a78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a7e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013a84:	75 1e                	jne    c0013aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013a86:	83 ec 0c             	sub    esp,0xc
c0013a89:	68 b0 e6 01 c0       	push   0xc001e6b0
c0013a8e:	e8 09 6a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0013a93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013a9a:	e8 5d fa ff ff       	call   c00134fc <blockTask(TaskState)>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	66 90                	xchg   ax,ax
c0013aa4:	83 ec 08             	sub    esp,0x8
c0013aa7:	56                   	push   esi
c0013aa8:	68 24 38 02 c0       	push   0xc0023824
c0013aad:	e8 4a 88 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ab2:	c7 04 24 24 38 02 c0 	mov    DWORD PTR [esp],0xc0023824
c0013ab9:	e8 7e 87 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013abe:	83 c4 10             	add    esp,0x10
c0013ac1:	39 f8                	cmp    eax,edi
c0013ac3:	0f 84 37 ff ff ff    	je     c0013a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0013acc:	83 ec 0c             	sub    esp,0xc
c0013acf:	68 24 38 02 c0       	push   0xc0023824
c0013ad4:	e8 63 87 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ad9:	c7 04 24 24 38 02 c0 	mov    DWORD PTR [esp],0xc0023824
c0013ae0:	89 c6                	mov    esi,eax
c0013ae2:	e8 5d 87 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	39 f3                	cmp    ebx,esi
c0013aec:	74 b6                	je     c0013aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013aee:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013af1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013af4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013afa:	75 a8                	jne    c0013aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013afc:	e9 77 ff ff ff       	jmp    c0013a78 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b01:	8d 76 00             	lea    esi,[esi+0x0]
c0013b04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	68 7c e6 01 c0       	push   0xc001e67c
c0013b10:	e9 4b ff ff ff       	jmp    c0013a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013b15:	8d 76 00             	lea    esi,[esi+0x0]
c0013b18:	8b 36                	mov    esi,DWORD PTR [esi]
c0013b1a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b1e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013b21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b24:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013b2a:	01 d7                	add    edi,edx
c0013b2c:	89 f8                	mov    eax,edi
c0013b2e:	e9 51 fe ff ff       	jmp    c0013984 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013b33:	90                   	nop

c0013b34 <cleanerTaskFunction(void*)>:
c0013b34:	53                   	push   ebx
c0013b35:	83 ec 08             	sub    esp,0x8
c0013b38:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013b3d:	48                   	dec    eax
c0013b3e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013b43:	75 03                	jne    c0013b48 <cleanerTaskFunction(void*)+0x14>
c0013b45:	fb                   	sti    
c0013b46:	66 90                	xchg   ax,ax
c0013b48:	fa                   	cli    
c0013b49:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013b4e:	80 3d ec 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237ec,0x0
c0013b55:	8d 50 01             	lea    edx,[eax+0x1]
c0013b58:	89 15 08 38 02 c0    	mov    DWORD PTR ds:0xc0023808,edx
c0013b5e:	0f 84 ac 00 00 00    	je     c0013c10 <cleanerTaskFunction(void*)+0xdc>
c0013b64:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013b69:	85 c0                	test   eax,eax
c0013b6b:	75 03                	jne    c0013b70 <cleanerTaskFunction(void*)+0x3c>
c0013b6d:	fb                   	sti    
c0013b6e:	66 90                	xchg   ax,ax
c0013b70:	c6 05 ec 37 02 c0 00 	mov    BYTE PTR ds:0xc00237ec,0x0
c0013b77:	fa                   	cli    
c0013b78:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013b7e:	ff 05 04 38 02 c0    	inc    DWORD PTR ds:0xc0023804
c0013b84:	fa                   	cli    
c0013b85:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013b8b:	eb 2b                	jmp    c0013bb8 <cleanerTaskFunction(void*)+0x84>
c0013b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	68 0c 38 02 c0       	push   0xc002380c
c0013b98:	e8 9f 86 00 00       	call   c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b9d:	c7 04 24 0c 38 02 c0 	mov    DWORD PTR [esp],0xc002380c
c0013ba4:	89 c3                	mov    ebx,eax
c0013ba6:	e8 99 86 00 00       	call   c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013bab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bae:	e8 b5 fc ff ff       	call   c0013868 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	66 90                	xchg   ax,ax
c0013bb8:	83 ec 0c             	sub    esp,0xc
c0013bbb:	68 0c 38 02 c0       	push   0xc002380c
c0013bc0:	e8 5b 86 00 00       	call   c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	84 c0                	test   al,al
c0013bca:	74 c4                	je     c0013b90 <cleanerTaskFunction(void*)+0x5c>
c0013bcc:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013bd1:	48                   	dec    eax
c0013bd2:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013bd7:	75 03                	jne    c0013bdc <cleanerTaskFunction(void*)+0xa8>
c0013bd9:	fb                   	sti    
c0013bda:	66 90                	xchg   ax,ax
c0013bdc:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0013be1:	48                   	dec    eax
c0013be2:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0013be7:	0f 85 4b ff ff ff    	jne    c0013b38 <cleanerTaskFunction(void*)+0x4>
c0013bed:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0013bf2:	85 c0                	test   eax,eax
c0013bf4:	0f 84 3e ff ff ff    	je     c0013b38 <cleanerTaskFunction(void*)+0x4>
c0013bfa:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0013c04:	e8 f7 f6 ff ff       	call   c0013300 <schedule()>
c0013c09:	e9 2a ff ff ff       	jmp    c0013b38 <cleanerTaskFunction(void*)+0x4>
c0013c0e:	66 90                	xchg   ax,ax
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	6a 02                	push   0x2
c0013c15:	e8 ba f8 ff ff       	call   c00134d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	e9 4e ff ff ff       	jmp    c0013b70 <cleanerTaskFunction(void*)+0x3c>
c0013c22:	66 90                	xchg   ax,ax

c0013c24 <terminateTask(int)>:
c0013c24:	83 ec 14             	sub    esp,0x14
c0013c27:	fa                   	cli    
c0013c28:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013c2e:	ff 05 04 38 02 c0    	inc    DWORD PTR ds:0xc0023804
c0013c34:	fa                   	cli    
c0013c35:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013c3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c44:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c4f:	50                   	push   eax
c0013c50:	68 0c 38 02 c0       	push   0xc002380c
c0013c55:	e8 a2 86 00 00       	call   c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013c69:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0013c6e:	85 c0                	test   eax,eax
c0013c70:	74 5e                	je     c0013cd0 <terminateTask(int)+0xac>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	c6 05 ec 37 02 c0 01 	mov    BYTE PTR ds:0xc00237ec,0x1
c0013c7c:	50                   	push   eax
c0013c7d:	e8 42 fb ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	8d 76 00             	lea    esi,[esi+0x0]
c0013c88:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013c8d:	48                   	dec    eax
c0013c8e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013c93:	75 03                	jne    c0013c98 <terminateTask(int)+0x74>
c0013c95:	fb                   	sti    
c0013c96:	66 90                	xchg   ax,ax
c0013c98:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0013c9d:	48                   	dec    eax
c0013c9e:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0013ca3:	75 0b                	jne    c0013cb0 <terminateTask(int)+0x8c>
c0013ca5:	83 3d 00 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023800,0x0
c0013cac:	75 36                	jne    c0013ce4 <terminateTask(int)+0xc0>
c0013cae:	66 90                	xchg   ax,ax
c0013cb0:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013cb5:	48                   	dec    eax
c0013cb6:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013cbb:	75 03                	jne    c0013cc0 <terminateTask(int)+0x9c>
c0013cbd:	fb                   	sti    
c0013cbe:	66 90                	xchg   ax,ax
c0013cc0:	fa                   	cli    
c0013cc1:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013cc7:	90                   	nop
c0013cc8:	e8 33 f6 ff ff       	call   c0013300 <schedule()>
c0013ccd:	eb e1                	jmp    c0013cb0 <terminateTask(int)+0x8c>
c0013ccf:	90                   	nop
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	68 ad e5 01 c0       	push   0xc001e5ad
c0013cd8:	e8 bf 67 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0013cdd:	83 c4 10             	add    esp,0x10
c0013ce0:	eb a6                	jmp    c0013c88 <terminateTask(int)+0x64>
c0013ce2:	66 90                	xchg   ax,ax
c0013ce4:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0013cee:	eb d8                	jmp    c0013cc8 <terminateTask(int)+0xa4>

c0013cf0 <Thr::terminateFromIRQ(int)>:
c0013cf0:	83 ec 18             	sub    esp,0x18
c0013cf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf7:	50                   	push   eax
c0013cf8:	e8 27 ff ff ff       	call   c0013c24 <terminateTask(int)>
c0013cfd:	90                   	nop
c0013cfe:	66 90                	xchg   ax,ax

c0013d00 <Semaphore::release()>:
c0013d00:	83 ec 0c             	sub    esp,0xc
c0013d03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d07:	fa                   	cli    
c0013d08:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0013d0d:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013d13:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d16:	89 0d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ecx
c0013d1c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013d1f:	85 c9                	test   ecx,ecx
c0013d21:	74 41                	je     c0013d64 <Semaphore::release()+0x64>
c0013d23:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d2c:	51                   	push   ecx
c0013d2d:	e8 92 fa ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c0013d32:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	48                   	dec    eax
c0013d3b:	90                   	nop
c0013d3c:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0013d41:	85 c0                	test   eax,eax
c0013d43:	75 0b                	jne    c0013d50 <Semaphore::release()+0x50>
c0013d45:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0013d4a:	85 c0                	test   eax,eax
c0013d4c:	75 1e                	jne    c0013d6c <Semaphore::release()+0x6c>
c0013d4e:	66 90                	xchg   ax,ax
c0013d50:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013d55:	48                   	dec    eax
c0013d56:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013d5b:	75 03                	jne    c0013d60 <Semaphore::release()+0x60>
c0013d5d:	fb                   	sti    
c0013d5e:	66 90                	xchg   ax,ax
c0013d60:	83 c4 0c             	add    esp,0xc
c0013d63:	c3                   	ret    
c0013d64:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013d67:	eb d3                	jmp    c0013d3c <Semaphore::release()+0x3c>
c0013d69:	8d 76 00             	lea    esi,[esi+0x0]
c0013d6c:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0013d76:	e8 85 f5 ff ff       	call   c0013300 <schedule()>
c0013d7b:	eb d3                	jmp    c0013d50 <Semaphore::release()+0x50>
c0013d7d:	8d 76 00             	lea    esi,[esi+0x0]

c0013d80 <__static_initialization_and_destruction_0(int, int)>:
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013d88:	0f 85 8e 00 00 00    	jne    c0013e1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013d96:	0f 85 80 00 00 00    	jne    c0013e1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d9c:	83 ec 0c             	sub    esp,0xc
c0013d9f:	68 24 38 02 c0       	push   0xc0023824
c0013da4:	e8 ff 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	83 ec 04             	sub    esp,0x4
c0013daf:	68 e8 f1 01 c0       	push   0xc001f1e8
c0013db4:	68 24 38 02 c0       	push   0xc0023824
c0013db9:	68 58 c5 01 c0       	push   0xc001c558
c0013dbe:	e8 93 65 ff ff       	call   c000a356 <__cxa_atexit>
c0013dc3:	83 c4 10             	add    esp,0x10
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	68 18 38 02 c0       	push   0xc0023818
c0013dce:	e8 d5 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013dd3:	83 c4 10             	add    esp,0x10
c0013dd6:	83 ec 04             	sub    esp,0x4
c0013dd9:	68 e8 f1 01 c0       	push   0xc001f1e8
c0013dde:	68 18 38 02 c0       	push   0xc0023818
c0013de3:	68 58 c5 01 c0       	push   0xc001c558
c0013de8:	e8 69 65 ff ff       	call   c000a356 <__cxa_atexit>
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	68 0c 38 02 c0       	push   0xc002380c
c0013df8:	e8 ab 87 00 00       	call   c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	83 ec 04             	sub    esp,0x4
c0013e03:	68 e8 f1 01 c0       	push   0xc001f1e8
c0013e08:	68 0c 38 02 c0       	push   0xc002380c
c0013e0d:	68 58 c5 01 c0       	push   0xc001c558
c0013e12:	e8 3f 65 ff ff       	call   c000a356 <__cxa_atexit>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	66 90                	xchg   ax,ax
c0013e1c:	90                   	nop
c0013e1d:	83 c4 0c             	add    esp,0xc
c0013e20:	c3                   	ret    
c0013e21:	8d 76 00             	lea    esi,[esi+0x0]

c0013e24 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	83 ec 08             	sub    esp,0x8
c0013e2a:	68 ff ff 00 00       	push   0xffff
c0013e2f:	6a 01                	push   0x1
c0013e31:	e8 4a ff ff ff       	call   c0013d80 <__static_initialization_and_destruction_0(int, int)>
c0013e36:	83 c4 10             	add    esp,0x10
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    

c0013e3d <Vm::inbv(unsigned short)>:
c0013e3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e41:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e46:	75 06                	jne    c0013e4e <Vm::inbv(unsigned short)+0x11>
c0013e48:	a0 6c 38 02 c0       	mov    al,ds:0xc002386c
c0013e4d:	c3                   	ret    
c0013e4e:	ec                   	in     al,dx
c0013e4f:	c3                   	ret    

c0013e50 <Vm::outbv(unsigned short, unsigned char)>:
c0013e50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e58:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e5d:	75 25                	jne    c0013e84 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013e5f:	8b 0d 6c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002386c
c0013e65:	8d 51 01             	lea    edx,[ecx+0x1]
c0013e68:	88 81 80 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc780],al
c0013e6e:	89 15 6c 38 02 c0    	mov    DWORD PTR ds:0xc002386c,edx
c0013e74:	83 fa 20             	cmp    edx,0x20
c0013e77:	75 0c                	jne    c0013e85 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013e79:	c7 05 6c 38 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x1f
c0013e83:	c3                   	ret    
c0013e84:	ee                   	out    dx,al
c0013e85:	c3                   	ret    

c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013e86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013e8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013e90:	c1 e0 04             	shl    eax,0x4
c0013e93:	01 d0                	add    eax,edx
c0013e95:	c3                   	ret    

c0013e96 <Vm::getSegment(unsigned int)>:
c0013e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	c3                   	ret    

c0013e9e <Vm::getOffset(unsigned int)>:
c0013e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ea2:	c3                   	ret    

c0013ea3 <Vm::mainloop2()>:
c0013ea3:	83 ec 18             	sub    esp,0x18
c0013ea6:	fa                   	cli    
c0013ea7:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013ead:	6a 02                	push   0x2
c0013eaf:	c6 05 65 38 02 c0 01 	mov    BYTE PTR ds:0xc0023865,0x1
c0013eb6:	e8 19 f6 ff ff       	call   c00134d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013ebb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ec0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013ec4:	52                   	push   edx
c0013ec5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013ec9:	52                   	push   edx
c0013eca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013ece:	52                   	push   edx
c0013ecf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013ed3:	50                   	push   eax
c0013ed4:	e8 36 c3 fe ff       	call   c000020f <goToVM86>
c0013ed9:	83 c4 2c             	add    esp,0x2c
c0013edc:	c3                   	ret    

c0013edd <Vm::mainVm8086Loop(void*)>:
c0013edd:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013ee2:	48                   	dec    eax
c0013ee3:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013ee8:	75 01                	jne    c0013eeb <Vm::mainVm8086Loop(void*)+0xe>
c0013eea:	fb                   	sti    
c0013eeb:	eb b6                	jmp    c0013ea3 <Vm::mainloop2()>

c0013eed <Vm::mainloop3(unsigned long)>:
c0013eed:	83 ec 18             	sub    esp,0x18
c0013ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ef4:	fa                   	cli    
c0013ef5:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013efb:	6a 02                	push   0x2
c0013efd:	c6 05 64 38 02 c0 01 	mov    BYTE PTR ds:0xc0023864,0x1
c0013f04:	a3 60 38 02 c0       	mov    ds:0xc0023860,eax
c0013f09:	e8 c6 f5 ff ff       	call   c00134d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f0e:	83 c4 1c             	add    esp,0x1c
c0013f11:	eb 90                	jmp    c0013ea3 <Vm::mainloop2()>

c0013f13 <Vm::initialise8086()>:
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	68 80 00 00 00       	push   0x80
c0013f1b:	6a 00                	push   0x0
c0013f1d:	68 dd 3e 01 c0       	push   0xc0013edd
c0013f22:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c0013f28:	e8 b3 f1 ff ff       	call   c00130e0 <Process::createThread(void (*)(void*), void*, int)>
c0013f2d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013f34:	a3 68 38 02 c0       	mov    ds:0xc0023868,eax
c0013f39:	68 00 01 00 00       	push   0x100
c0013f3e:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0013f43:	6a 00                	push   0x0
c0013f45:	6a 00                	push   0x0
c0013f47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f4d:	e8 86 5c ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f52:	83 c4 2c             	add    esp,0x2c
c0013f55:	c3                   	ret    

c0013f56 <Vm::finish8086()>:
c0013f56:	53                   	push   ebx
c0013f57:	83 ec 08             	sub    esp,0x8
c0013f5a:	fa                   	cli    
c0013f5b:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013f61:	80 3d 64 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023864,0x0
c0013f68:	75 15                	jne    c0013f7f <Vm::finish8086()+0x29>
c0013f6a:	e8 91 f3 ff ff       	call   c0013300 <schedule()>
c0013f6f:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013f74:	48                   	dec    eax
c0013f75:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013f7a:	75 de                	jne    c0013f5a <Vm::finish8086()+0x4>
c0013f7c:	fb                   	sti    
c0013f7d:	eb db                	jmp    c0013f5a <Vm::finish8086()+0x4>
c0013f7f:	83 ec 0c             	sub    esp,0xc
c0013f82:	8b 1d 60 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023860
c0013f88:	ff 35 68 38 02 c0    	push   DWORD PTR ds:0xc0023868
c0013f8e:	c6 05 64 38 02 c0 00 	mov    BYTE PTR ds:0xc0023864,0x0
c0013f95:	e8 2a f8 ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c0013f9a:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0013f9f:	83 c4 10             	add    esp,0x10
c0013fa2:	8d 50 ff             	lea    edx,[eax-0x1]
c0013fa5:	89 15 08 38 02 c0    	mov    DWORD PTR ds:0xc0023808,edx
c0013fab:	85 d2                	test   edx,edx
c0013fad:	75 01                	jne    c0013fb0 <Vm::finish8086()+0x5a>
c0013faf:	fb                   	sti    
c0013fb0:	89 d8                	mov    eax,ebx
c0013fb2:	83 c4 08             	add    esp,0x8
c0013fb5:	5b                   	pop    ebx
c0013fb6:	c3                   	ret    

c0013fb7 <Vm::getOutput8086(unsigned char*)>:
c0013fb7:	57                   	push   edi
c0013fb8:	8b 0d 6c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002386c
c0013fbe:	56                   	push   esi
c0013fbf:	be 80 38 02 c0       	mov    esi,0xc0023880
c0013fc4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013fc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fca:	a1 6c 38 02 c0       	mov    eax,ds:0xc002386c
c0013fcf:	5e                   	pop    esi
c0013fd0:	c7 05 6c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x0
c0013fda:	5f                   	pop    edi
c0013fdb:	c3                   	ret    

c0013fdc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013fdc:	55                   	push   ebp
c0013fdd:	57                   	push   edi
c0013fde:	56                   	push   esi
c0013fdf:	53                   	push   ebx
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fe7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013feb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013fef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013ff3:	fa                   	cli    
c0013ff4:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c0013ffa:	80 3d 65 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023865,0x0
c0014001:	75 15                	jne    c0014018 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014003:	e8 f8 f2 ff ff       	call   c0013300 <schedule()>
c0014008:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001400d:	48                   	dec    eax
c001400e:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0014013:	75 de                	jne    c0013ff3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014015:	fb                   	sti    
c0014016:	eb db                	jmp    c0013ff3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014018:	a1 68 38 02 c0       	mov    eax,ds:0xc0023868
c001401d:	c7 05 6c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x0
c0014027:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001402b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001402f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014033:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014037:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001403b:	0f b7 ff             	movzx  edi,di
c001403e:	0f b7 f6             	movzx  esi,si
c0014041:	50                   	push   eax
c0014042:	6a 20                	push   0x20
c0014044:	6a 00                	push   0x0
c0014046:	68 80 38 02 c0       	push   0xc0023880
c001404b:	e8 80 c4 fe ff       	call   c00004d0 <memset>
c0014050:	5a                   	pop    edx
c0014051:	59                   	pop    ecx
c0014052:	57                   	push   edi
c0014053:	56                   	push   esi
c0014054:	e8 2d fe ff ff       	call   c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	89 c7                	mov    edi,eax
c001405e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014062:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014066:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014068:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001406d:	c6 05 65 38 02 c0 00 	mov    BYTE PTR ds:0xc0023865,0x0
c0014074:	48                   	dec    eax
c0014075:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c001407a:	75 01                	jne    c001407d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001407c:	fb                   	sti    
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	ff 35 68 38 02 c0    	push   DWORD PTR ds:0xc0023868
c0014086:	e8 39 f7 ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c001408b:	83 c4 1c             	add    esp,0x1c
c001408e:	b0 01                	mov    al,0x1
c0014090:	5b                   	pop    ebx
c0014091:	5e                   	pop    esi
c0014092:	5f                   	pop    edi
c0014093:	5d                   	pop    ebp
c0014094:	c3                   	ret    

c0014095 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014095:	55                   	push   ebp
c0014096:	57                   	push   edi
c0014097:	56                   	push   esi
c0014098:	53                   	push   ebx
c0014099:	83 ec 2c             	sub    esp,0x2c
c001409c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00140a0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00140a4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00140a8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00140ac:	fa                   	cli    
c00140ad:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c00140b3:	0f b6 35 65 38 02 c0 	movzx  esi,BYTE PTR ds:0xc0023865
c00140ba:	89 f0                	mov    eax,esi
c00140bc:	84 c0                	test   al,al
c00140be:	75 1d                	jne    c00140dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00140c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00140c4:	e8 37 f2 ff ff       	call   c0013300 <schedule()>
c00140c9:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00140ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140d2:	48                   	dec    eax
c00140d3:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00140d8:	75 d2                	jne    c00140ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140da:	fb                   	sti    
c00140db:	eb cf                	jmp    c00140ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140dd:	a1 68 38 02 c0       	mov    eax,ds:0xc0023868
c00140e2:	c7 05 6c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x0
c00140ec:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00140f0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140f4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00140f8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00140fc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014100:	50                   	push   eax
c0014101:	6a 20                	push   0x20
c0014103:	6a 00                	push   0x0
c0014105:	68 80 38 02 c0       	push   0xc0023880
c001410a:	e8 c1 c3 fe ff       	call   c00004d0 <memset>
c001410f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014116:	e8 e6 36 ff ff       	call   c0007801 <malloc>
c001411b:	83 c4 0c             	add    esp,0xc
c001411e:	89 c3                	mov    ebx,eax
c0014120:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c0014126:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001412a:	50                   	push   eax
c001412b:	e8 e2 68 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	85 db                	test   ebx,ebx
c0014135:	75 0a                	jne    c0014141 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014137:	83 ec 0c             	sub    esp,0xc
c001413a:	68 d8 e6 01 c0       	push   0xc001e6d8
c001413f:	eb 3e                	jmp    c001417f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014141:	50                   	push   eax
c0014142:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014146:	50                   	push   eax
c0014147:	8d 44 24 20          	lea    eax,[esp+0x20]
c001414b:	50                   	push   eax
c001414c:	53                   	push   ebx
c001414d:	e8 2c 6c ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001415a:	74 0a                	je     c0014166 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	68 ec e6 01 c0       	push   0xc001e6ec
c0014164:	eb 19                	jmp    c001417f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014166:	51                   	push   ecx
c0014167:	51                   	push   ecx
c0014168:	6a 01                	push   0x1
c001416a:	53                   	push   ebx
c001416b:	e8 62 69 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	85 c0                	test   eax,eax
c0014175:	74 24                	je     c001419b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014177:	83 ec 0c             	sub    esp,0xc
c001417a:	68 05 e7 01 c0       	push   0xc001e705
c001417f:	e8 7b bf ff ff       	call   c00100ff <KePanic(char const*)>
c0014184:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	48                   	dec    eax
c001418d:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0014192:	85 c0                	test   eax,eax
c0014194:	75 01                	jne    c0014197 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014196:	fb                   	sti    
c0014197:	31 f6                	xor    esi,esi
c0014199:	eb 58                	jmp    c00141f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001419b:	0f b7 ed             	movzx  ebp,bp
c001419e:	50                   	push   eax
c001419f:	0f b7 ff             	movzx  edi,di
c00141a2:	50                   	push   eax
c00141a3:	55                   	push   ebp
c00141a4:	57                   	push   edi
c00141a5:	e8 dc fc ff ff       	call   c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>
c00141aa:	5a                   	pop    edx
c00141ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141ad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00141b1:	51                   	push   ecx
c00141b2:	50                   	push   eax
c00141b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00141b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00141bb:	53                   	push   ebx
c00141bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00141bf:	83 c4 14             	add    esp,0x14
c00141c2:	53                   	push   ebx
c00141c3:	e8 68 69 ff ff       	call   c000ab30 <File::close()>
c00141c8:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00141cd:	83 c4 10             	add    esp,0x10
c00141d0:	48                   	dec    eax
c00141d1:	c6 05 65 38 02 c0 00 	mov    BYTE PTR ds:0xc0023865,0x0
c00141d8:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c00141dd:	85 c0                	test   eax,eax
c00141df:	75 01                	jne    c00141e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00141e1:	fb                   	sti    
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	ff 35 68 38 02 c0    	push   DWORD PTR ds:0xc0023868
c00141eb:	e8 d4 f5 ff ff       	call   c00137c4 <unblockTask(ThreadControlBlock*)>
c00141f0:	83 c4 10             	add    esp,0x10
c00141f3:	83 c4 2c             	add    esp,0x2c
c00141f6:	89 f0                	mov    eax,esi
c00141f8:	5b                   	pop    ebx
c00141f9:	5e                   	pop    esi
c00141fa:	5f                   	pop    edi
c00141fb:	5d                   	pop    ebp
c00141fc:	c3                   	ret    

c00141fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00141fd:	57                   	push   edi
c00141fe:	56                   	push   esi
c00141ff:	53                   	push   ebx
c0014200:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014208:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001420c:	83 e8 06             	sub    eax,0x6
c001420f:	0f b7 c0             	movzx  eax,ax
c0014212:	50                   	push   eax
c0014213:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014218:	50                   	push   eax
c0014219:	e8 68 fc ff ff       	call   c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>
c001421e:	5a                   	pop    edx
c001421f:	5e                   	pop    esi
c0014220:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014223:	8d 56 fa             	lea    edx,[esi-0x6]
c0014226:	81 e2 ff ff 00 00    	and    edx,0xffff
c001422c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001422f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014232:	83 c2 02             	add    edx,0x2
c0014235:	66 89 10             	mov    WORD PTR [eax],dx
c0014238:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001423b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001423f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014242:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014246:	89 d6                	mov    esi,edx
c0014248:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001424e:	66 81 e6 ff fd       	and    si,0xfdff
c0014253:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014257:	74 07                	je     c0014260 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014259:	89 d6                	mov    esi,edx
c001425b:	66 81 ce 00 02       	or     si,0x200
c0014260:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014269:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001426d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014275:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014278:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014280:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014283:	5b                   	pop    ebx
c0014284:	5e                   	pop    esi
c0014285:	5f                   	pop    edi
c0014286:	c3                   	ret    

c0014287 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014287:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001428c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014291:	c1 e0 04             	shl    eax,0x4
c0014294:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014297:	c3                   	ret    

c0014298 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014298:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001429d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142a2:	c1 e0 04             	shl    eax,0x4
c00142a5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00142a9:	c3                   	ret    

c00142aa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00142aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142b4:	c1 e0 04             	shl    eax,0x4
c00142b7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00142ba:	c3                   	ret    

c00142bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00142bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142c5:	c1 e0 04             	shl    eax,0x4
c00142c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142cc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00142cf:	c3                   	ret    

c00142d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00142d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142da:	c1 e0 04             	shl    eax,0x4
c00142dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142e1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00142e5:	c3                   	ret    

c00142e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00142e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142f0:	c1 e0 04             	shl    eax,0x4
c00142f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142f7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00142fa:	c3                   	ret    

c00142fb <Vm::faultHandler(regs*)>:
c00142fb:	55                   	push   ebp
c00142fc:	57                   	push   edi
c00142fd:	56                   	push   esi
c00142fe:	53                   	push   ebx
c00142ff:	83 ec 1c             	sub    esp,0x1c
c0014302:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014306:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014309:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001430d:	0f b7 f8             	movzx  edi,ax
c0014310:	52                   	push   edx
c0014311:	0f b7 c0             	movzx  eax,ax
c0014314:	50                   	push   eax
c0014315:	e8 6c fb ff ff       	call   c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>
c001431a:	5a                   	pop    edx
c001431b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001431e:	59                   	pop    ecx
c001431f:	89 c1                	mov    ecx,eax
c0014321:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014328:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001432d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014331:	0f b7 c5             	movzx  eax,bp
c0014334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001433c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014340:	e8 41 fb ff ff       	call   c0013e86 <Vm::realToLinear(unsigned short, unsigned short)>
c0014345:	5e                   	pop    esi
c0014346:	be 06 00 00 00       	mov    esi,0x6
c001434b:	5a                   	pop    edx
c001434c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014351:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014356:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014359:	80 fa 9d             	cmp    dl,0x9d
c001435c:	0f 84 2c 02 00 00    	je     c001458e <Vm::faultHandler(regs*)+0x293>
c0014362:	0f 87 91 00 00 00    	ja     c00143f9 <Vm::faultHandler(regs*)+0xfe>
c0014368:	80 fa 66             	cmp    dl,0x66
c001436b:	0f 84 98 01 00 00    	je     c0014509 <Vm::faultHandler(regs*)+0x20e>
c0014371:	77 47                	ja     c00143ba <Vm::faultHandler(regs*)+0xbf>
c0014373:	80 fa 36             	cmp    dl,0x36
c0014376:	0f 84 80 01 00 00    	je     c00144fc <Vm::faultHandler(regs*)+0x201>
c001437c:	77 1a                	ja     c0014398 <Vm::faultHandler(regs*)+0x9d>
c001437e:	80 fa 26             	cmp    dl,0x26
c0014381:	0f 84 4e 01 00 00    	je     c00144d5 <Vm::faultHandler(regs*)+0x1da>
c0014387:	80 fa 2e             	cmp    dl,0x2e
c001438a:	0f 85 e2 05 00 00    	jne    c0014972 <Vm::faultHandler(regs*)+0x677>
c0014390:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014393:	31 f6                	xor    esi,esi
c0014395:	41                   	inc    ecx
c0014396:	eb be                	jmp    c0014356 <Vm::faultHandler(regs*)+0x5b>
c0014398:	80 fa 64             	cmp    dl,0x64
c001439b:	0f 84 41 01 00 00    	je     c00144e2 <Vm::faultHandler(regs*)+0x1e7>
c00143a1:	0f 87 48 01 00 00    	ja     c00144ef <Vm::faultHandler(regs*)+0x1f4>
c00143a7:	80 fa 3e             	cmp    dl,0x3e
c00143aa:	0f 85 c2 05 00 00    	jne    c0014972 <Vm::faultHandler(regs*)+0x677>
c00143b0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143b3:	be 01 00 00 00       	mov    esi,0x1
c00143b8:	eb db                	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c00143ba:	80 fa 6d             	cmp    dl,0x6d
c00143bd:	0f 84 ec 02 00 00    	je     c00146af <Vm::faultHandler(regs*)+0x3b4>
c00143c3:	77 17                	ja     c00143dc <Vm::faultHandler(regs*)+0xe1>
c00143c5:	80 fa 67             	cmp    dl,0x67
c00143c8:	0f 84 48 01 00 00    	je     c0014516 <Vm::faultHandler(regs*)+0x21b>
c00143ce:	80 fa 6c             	cmp    dl,0x6c
c00143d1:	0f 84 69 02 00 00    	je     c0014640 <Vm::faultHandler(regs*)+0x345>
c00143d7:	e9 96 05 00 00       	jmp    c0014972 <Vm::faultHandler(regs*)+0x677>
c00143dc:	80 fa 6f             	cmp    dl,0x6f
c00143df:	0f 84 f4 03 00 00    	je     c00147d9 <Vm::faultHandler(regs*)+0x4de>
c00143e5:	0f 82 59 03 00 00    	jb     c0014744 <Vm::faultHandler(regs*)+0x449>
c00143eb:	80 fa 9c             	cmp    dl,0x9c
c00143ee:	0f 84 2f 01 00 00    	je     c0014523 <Vm::faultHandler(regs*)+0x228>
c00143f4:	e9 79 05 00 00       	jmp    c0014972 <Vm::faultHandler(regs*)+0x677>
c00143f9:	80 fa ec             	cmp    dl,0xec
c00143fc:	0f 84 14 05 00 00    	je     c0014916 <Vm::faultHandler(regs*)+0x61b>
c0014402:	77 7b                	ja     c001447f <Vm::faultHandler(regs*)+0x184>
c0014404:	80 fa e4             	cmp    dl,0xe4
c0014407:	0f 84 93 04 00 00    	je     c00148a0 <Vm::faultHandler(regs*)+0x5a5>
c001440d:	77 53                	ja     c0014462 <Vm::faultHandler(regs*)+0x167>
c001440f:	80 fa cd             	cmp    dl,0xcd
c0014412:	0f 84 d9 01 00 00    	je     c00145f1 <Vm::faultHandler(regs*)+0x2f6>
c0014418:	80 fa cf             	cmp    dl,0xcf
c001441b:	0f 85 51 05 00 00    	jne    c0014972 <Vm::faultHandler(regs*)+0x677>
c0014421:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014424:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014427:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001442b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001442e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014432:	81 ca 00 02 02 00    	or     edx,0x20200
c0014438:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001443b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001443f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014445:	66 c1 e8 09          	shr    ax,0x9
c0014449:	83 e0 01             	and    eax,0x1
c001444c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001444f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014452:	83 c0 06             	add    eax,0x6
c0014455:	25 ff ff 00 00       	and    eax,0xffff
c001445a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001445d:	e9 0c 05 00 00       	jmp    c001496e <Vm::faultHandler(regs*)+0x673>
c0014462:	80 fa e6             	cmp    dl,0xe6
c0014465:	0f 84 7f 04 00 00    	je     c00148ea <Vm::faultHandler(regs*)+0x5ef>
c001446b:	0f 82 4b 04 00 00    	jb     c00148bc <Vm::faultHandler(regs*)+0x5c1>
c0014471:	80 fa e7             	cmp    dl,0xe7
c0014474:	0f 84 87 04 00 00    	je     c0014901 <Vm::faultHandler(regs*)+0x606>
c001447a:	e9 f3 04 00 00       	jmp    c0014972 <Vm::faultHandler(regs*)+0x677>
c001447f:	80 fa ef             	cmp    dl,0xef
c0014482:	0f 84 d1 04 00 00    	je     c0014959 <Vm::faultHandler(regs*)+0x65e>
c0014488:	77 28                	ja     c00144b2 <Vm::faultHandler(regs*)+0x1b7>
c001448a:	80 fa ed             	cmp    dl,0xed
c001448d:	0f 84 9f 04 00 00    	je     c0014932 <Vm::faultHandler(regs*)+0x637>
c0014493:	80 fa ee             	cmp    dl,0xee
c0014496:	0f 85 d6 04 00 00    	jne    c0014972 <Vm::faultHandler(regs*)+0x677>
c001449c:	50                   	push   eax
c001449d:	50                   	push   eax
c001449e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00144a2:	50                   	push   eax
c00144a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00144a7:	50                   	push   eax
c00144a8:	e8 a3 f9 ff ff       	call   c0013e50 <Vm::outbv(unsigned short, unsigned char)>
c00144ad:	e9 9f 04 00 00       	jmp    c0014951 <Vm::faultHandler(regs*)+0x656>
c00144b2:	80 fa fa             	cmp    dl,0xfa
c00144b5:	0f 84 69 01 00 00    	je     c0014624 <Vm::faultHandler(regs*)+0x329>
c00144bb:	80 fa fb             	cmp    dl,0xfb
c00144be:	0f 84 6e 01 00 00    	je     c0014632 <Vm::faultHandler(regs*)+0x337>
c00144c4:	80 fa f3             	cmp    dl,0xf3
c00144c7:	0f 85 a5 04 00 00    	jne    c0014972 <Vm::faultHandler(regs*)+0x677>
c00144cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144d0:	e9 c0 fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c00144d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144d8:	be 02 00 00 00       	mov    esi,0x2
c00144dd:	e9 b3 fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c00144e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144e5:	be 03 00 00 00       	mov    esi,0x3
c00144ea:	e9 a6 fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c00144ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144f2:	be 04 00 00 00       	mov    esi,0x4
c00144f7:	e9 99 fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c00144fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ff:	be 05 00 00 00       	mov    esi,0x5
c0014504:	e9 8c fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c0014509:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001450c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014511:	e9 7f fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c0014516:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014519:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001451e:	e9 72 fe ff ff       	jmp    c0014395 <Vm::faultHandler(regs*)+0x9a>
c0014523:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014526:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001452a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001452f:	74 30                	je     c0014561 <Vm::faultHandler(regs*)+0x266>
c0014531:	83 e9 04             	sub    ecx,0x4
c0014534:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001453a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014540:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014543:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014546:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001454c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014550:	0f 84 15 04 00 00    	je     c001496b <Vm::faultHandler(regs*)+0x670>
c0014556:	80 ce 02             	or     dh,0x2
c0014559:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001455c:	e9 0a 04 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014561:	83 e9 02             	sub    ecx,0x2
c0014564:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001456a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001456d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014571:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014577:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001457b:	74 05                	je     c0014582 <Vm::faultHandler(regs*)+0x287>
c001457d:	80 ce 02             	or     dh,0x2
c0014580:	eb 03                	jmp    c0014585 <Vm::faultHandler(regs*)+0x28a>
c0014582:	80 e6 fd             	and    dh,0xfd
c0014585:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014589:	e9 dd 03 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c001458e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014593:	74 2a                	je     c00145bf <Vm::faultHandler(regs*)+0x2c4>
c0014595:	8b 10                	mov    edx,DWORD PTR [eax]
c0014597:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001459d:	81 ca 00 02 02 00    	or     edx,0x20200
c00145a3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145ae:	c1 e8 09             	shr    eax,0x9
c00145b1:	83 e0 01             	and    eax,0x1
c00145b4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145b7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145ba:	83 c0 04             	add    eax,0x4
c00145bd:	eb 25                	jmp    c00145e4 <Vm::faultHandler(regs*)+0x2e9>
c00145bf:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00145c2:	81 ca 00 02 02 00    	or     edx,0x20200
c00145c8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145cb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00145ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145d4:	66 c1 e8 09          	shr    ax,0x9
c00145d8:	83 e0 01             	and    eax,0x1
c00145db:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145e1:	83 c0 02             	add    eax,0x2
c00145e4:	25 ff ff 00 00       	and    eax,0xffff
c00145e9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00145ec:	e9 7a 03 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c00145f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00145f5:	3c ee                	cmp    al,0xee
c00145f7:	75 10                	jne    c0014609 <Vm::faultHandler(regs*)+0x30e>
c00145f9:	83 ec 0c             	sub    esp,0xc
c00145fc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145ff:	e8 e9 f8 ff ff       	call   c0013eed <Vm::mainloop3(unsigned long)>
c0014604:	e9 4b 03 00 00       	jmp    c0014954 <Vm::faultHandler(regs*)+0x659>
c0014609:	83 ec 0c             	sub    esp,0xc
c001460c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014614:	51                   	push   ecx
c0014615:	50                   	push   eax
c0014616:	53                   	push   ebx
c0014617:	e8 e1 fb ff ff       	call   c00141fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001461c:	83 c4 20             	add    esp,0x20
c001461f:	e9 4a 03 00 00       	jmp    c001496e <Vm::faultHandler(regs*)+0x673>
c0014624:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014629:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001462d:	e9 39 03 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014632:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014637:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001463b:	e9 2b 03 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014640:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014643:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014648:	74 2b                	je     c0014675 <Vm::faultHandler(regs*)+0x37a>
c001464a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014651:	76 22                	jbe    c0014675 <Vm::faultHandler(regs*)+0x37a>
c0014653:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014657:	50                   	push   eax
c0014658:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001465c:	50                   	push   eax
c001465d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014661:	50                   	push   eax
c0014662:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014666:	50                   	push   eax
c0014667:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001466b:	50                   	push   eax
c001466c:	6a 6c                	push   0x6c
c001466e:	6a 6c                	push   0x6c
c0014670:	e9 b9 01 00 00       	jmp    c001482e <Vm::faultHandler(regs*)+0x533>
c0014675:	83 ec 0c             	sub    esp,0xc
c0014678:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001467c:	0f b7 f6             	movzx  esi,si
c001467f:	50                   	push   eax
c0014680:	e8 b8 f7 ff ff       	call   c0013e3d <Vm::inbv(unsigned short)>
c0014685:	83 c4 0c             	add    esp,0xc
c0014688:	0f b6 c0             	movzx  eax,al
c001468b:	50                   	push   eax
c001468c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014690:	50                   	push   eax
c0014691:	56                   	push   esi
c0014692:	e8 24 fc ff ff       	call   c00142bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001469d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146a1:	74 03                	je     c00146a6 <Vm::faultHandler(regs*)+0x3ab>
c00146a3:	48                   	dec    eax
c00146a4:	eb 01                	jmp    c00146a7 <Vm::faultHandler(regs*)+0x3ac>
c00146a6:	40                   	inc    eax
c00146a7:	0f b7 c0             	movzx  eax,ax
c00146aa:	e9 8d 00 00 00       	jmp    c001473c <Vm::faultHandler(regs*)+0x441>
c00146af:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146b5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00146ba:	74 29                	je     c00146e5 <Vm::faultHandler(regs*)+0x3ea>
c00146bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00146c1:	76 22                	jbe    c00146e5 <Vm::faultHandler(regs*)+0x3ea>
c00146c3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146c7:	50                   	push   eax
c00146c8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146cc:	50                   	push   eax
c00146cd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146d1:	50                   	push   eax
c00146d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146d6:	50                   	push   eax
c00146d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146db:	50                   	push   eax
c00146dc:	6a 6d                	push   0x6d
c00146de:	6a 6d                	push   0x6d
c00146e0:	e9 49 01 00 00       	jmp    c001482e <Vm::faultHandler(regs*)+0x533>
c00146e5:	0f b7 c8             	movzx  ecx,ax
c00146e8:	0f b7 f6             	movzx  esi,si
c00146eb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00146ee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00146f3:	74 20                	je     c0014715 <Vm::faultHandler(regs*)+0x41a>
c00146f5:	ed                   	in     eax,dx
c00146f6:	55                   	push   ebp
c00146f7:	50                   	push   eax
c00146f8:	51                   	push   ecx
c00146f9:	56                   	push   esi
c00146fa:	e8 e7 fb ff ff       	call   c00142e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014705:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014709:	74 05                	je     c0014710 <Vm::faultHandler(regs*)+0x415>
c001470b:	83 e8 04             	sub    eax,0x4
c001470e:	eb 27                	jmp    c0014737 <Vm::faultHandler(regs*)+0x43c>
c0014710:	83 c0 04             	add    eax,0x4
c0014713:	eb 22                	jmp    c0014737 <Vm::faultHandler(regs*)+0x43c>
c0014715:	66 ed                	in     ax,dx
c0014717:	0f b7 c0             	movzx  eax,ax
c001471a:	57                   	push   edi
c001471b:	50                   	push   eax
c001471c:	51                   	push   ecx
c001471d:	56                   	push   esi
c001471e:	e8 ad fb ff ff       	call   c00142d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014729:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001472d:	74 05                	je     c0014734 <Vm::faultHandler(regs*)+0x439>
c001472f:	83 e8 02             	sub    eax,0x2
c0014732:	eb 03                	jmp    c0014737 <Vm::faultHandler(regs*)+0x43c>
c0014734:	83 c0 02             	add    eax,0x2
c0014737:	25 ff ff 00 00       	and    eax,0xffff
c001473c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001473f:	e9 27 02 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014744:	8d 46 ff             	lea    eax,[esi-0x1]
c0014747:	3c 05                	cmp    al,0x5
c0014749:	77 24                	ja     c001476f <Vm::faultHandler(regs*)+0x474>
c001474b:	0f b6 c0             	movzx  eax,al
c001474e:	ff 24 85 78 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1888]
c0014755:	0f b7 fd             	movzx  edi,bp
c0014758:	eb 15                	jmp    c001476f <Vm::faultHandler(regs*)+0x474>
c001475a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001475e:	eb 0f                	jmp    c001476f <Vm::faultHandler(regs*)+0x474>
c0014760:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014764:	eb 09                	jmp    c001476f <Vm::faultHandler(regs*)+0x474>
c0014766:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001476a:	eb 03                	jmp    c001476f <Vm::faultHandler(regs*)+0x474>
c001476c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001476f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014772:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014777:	74 29                	je     c00147a2 <Vm::faultHandler(regs*)+0x4a7>
c0014779:	3d ff ff 00 00       	cmp    eax,0xffff
c001477e:	76 22                	jbe    c00147a2 <Vm::faultHandler(regs*)+0x4a7>
c0014780:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014784:	50                   	push   eax
c0014785:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014789:	50                   	push   eax
c001478a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001478e:	50                   	push   eax
c001478f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014793:	50                   	push   eax
c0014794:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014798:	50                   	push   eax
c0014799:	6a 6e                	push   0x6e
c001479b:	6a 6e                	push   0x6e
c001479d:	e9 8c 00 00 00       	jmp    c001482e <Vm::faultHandler(regs*)+0x533>
c00147a2:	0f b7 c0             	movzx  eax,ax
c00147a5:	52                   	push   edx
c00147a6:	52                   	push   edx
c00147a7:	50                   	push   eax
c00147a8:	57                   	push   edi
c00147a9:	e8 d9 fa ff ff       	call   c0014287 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00147ae:	59                   	pop    ecx
c00147af:	0f b6 c0             	movzx  eax,al
c00147b2:	5e                   	pop    esi
c00147b3:	50                   	push   eax
c00147b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00147b8:	50                   	push   eax
c00147b9:	e8 92 f6 ff ff       	call   c0013e50 <Vm::outbv(unsigned short, unsigned char)>
c00147be:	83 c4 10             	add    esp,0x10
c00147c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147c4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147c8:	74 03                	je     c00147cd <Vm::faultHandler(regs*)+0x4d2>
c00147ca:	48                   	dec    eax
c00147cb:	eb 01                	jmp    c00147ce <Vm::faultHandler(regs*)+0x4d3>
c00147cd:	40                   	inc    eax
c00147ce:	0f b7 c0             	movzx  eax,ax
c00147d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00147d4:	e9 92 01 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c00147d9:	8d 46 ff             	lea    eax,[esi-0x1]
c00147dc:	3c 05                	cmp    al,0x5
c00147de:	77 1f                	ja     c00147ff <Vm::faultHandler(regs*)+0x504>
c00147e0:	0f b6 c0             	movzx  eax,al
c00147e3:	ff 24 85 90 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1870]
c00147ea:	89 ef                	mov    edi,ebp
c00147ec:	eb 11                	jmp    c00147ff <Vm::faultHandler(regs*)+0x504>
c00147ee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00147f1:	eb 0c                	jmp    c00147ff <Vm::faultHandler(regs*)+0x504>
c00147f3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00147f6:	eb 07                	jmp    c00147ff <Vm::faultHandler(regs*)+0x504>
c00147f8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00147fb:	eb 02                	jmp    c00147ff <Vm::faultHandler(regs*)+0x504>
c00147fd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00147ff:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014802:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014807:	74 37                	je     c0014840 <Vm::faultHandler(regs*)+0x545>
c0014809:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001480f:	76 2f                	jbe    c0014840 <Vm::faultHandler(regs*)+0x545>
c0014811:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014815:	50                   	push   eax
c0014816:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001481a:	50                   	push   eax
c001481b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001481f:	50                   	push   eax
c0014820:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014824:	50                   	push   eax
c0014825:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014829:	50                   	push   eax
c001482a:	6a 6f                	push   0x6f
c001482c:	6a 6f                	push   0x6f
c001482e:	68 1e e7 01 c0       	push   0xc001e71e
c0014833:	e8 64 5c ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014838:	83 c4 20             	add    esp,0x20
c001483b:	e9 86 01 00 00       	jmp    c00149c6 <Vm::faultHandler(regs*)+0x6cb>
c0014840:	0f b7 d7             	movzx  edx,di
c0014843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014846:	0f b7 c6             	movzx  eax,si
c0014849:	81 e1 00 04 00 00    	and    ecx,0x400
c001484f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014852:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014857:	74 1d                	je     c0014876 <Vm::faultHandler(regs*)+0x57b>
c0014859:	55                   	push   ebp
c001485a:	55                   	push   ebp
c001485b:	50                   	push   eax
c001485c:	52                   	push   edx
c001485d:	e8 48 fa ff ff       	call   c00142aa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	89 fa                	mov    edx,edi
c0014867:	ef                   	out    dx,eax
c0014868:	85 c9                	test   ecx,ecx
c001486a:	74 05                	je     c0014871 <Vm::faultHandler(regs*)+0x576>
c001486c:	83 ee 04             	sub    esi,0x4
c001486f:	eb 21                	jmp    c0014892 <Vm::faultHandler(regs*)+0x597>
c0014871:	83 c6 04             	add    esi,0x4
c0014874:	eb 1c                	jmp    c0014892 <Vm::faultHandler(regs*)+0x597>
c0014876:	55                   	push   ebp
c0014877:	55                   	push   ebp
c0014878:	50                   	push   eax
c0014879:	52                   	push   edx
c001487a:	e8 19 fa ff ff       	call   c0014298 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	89 fa                	mov    edx,edi
c0014884:	66 ef                	out    dx,ax
c0014886:	85 c9                	test   ecx,ecx
c0014888:	74 05                	je     c001488f <Vm::faultHandler(regs*)+0x594>
c001488a:	83 ee 02             	sub    esi,0x2
c001488d:	eb 03                	jmp    c0014892 <Vm::faultHandler(regs*)+0x597>
c001488f:	83 c6 02             	add    esi,0x2
c0014892:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014898:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001489b:	e9 cb 00 00 00       	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c00148a0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148a7:	83 ec 0c             	sub    esp,0xc
c00148aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148ae:	50                   	push   eax
c00148af:	e8 89 f5 ff ff       	call   c0013e3d <Vm::inbv(unsigned short)>
c00148b4:	0f b6 c0             	movzx  eax,al
c00148b7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00148ba:	eb 3f                	jmp    c00148fb <Vm::faultHandler(regs*)+0x600>
c00148bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148c1:	74 07                	je     c00148ca <Vm::faultHandler(regs*)+0x5cf>
c00148c3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148c7:	ed                   	in     eax,dx
c00148c8:	eb 14                	jmp    c00148de <Vm::faultHandler(regs*)+0x5e3>
c00148ca:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00148cd:	66 31 f6             	xor    si,si
c00148d0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00148d3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148d7:	66 ed                	in     ax,dx
c00148d9:	0f b7 c0             	movzx  eax,ax
c00148dc:	09 f0                	or     eax,esi
c00148de:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00148e1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148e5:	e9 84 00 00 00       	jmp    c001496e <Vm::faultHandler(regs*)+0x673>
c00148ea:	52                   	push   edx
c00148eb:	52                   	push   edx
c00148ec:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00148f0:	50                   	push   eax
c00148f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148f5:	50                   	push   eax
c00148f6:	e8 55 f5 ff ff       	call   c0013e50 <Vm::outbv(unsigned short, unsigned char)>
c00148fb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148ff:	eb 53                	jmp    c0014954 <Vm::faultHandler(regs*)+0x659>
c0014901:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014904:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014908:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001490d:	74 03                	je     c0014912 <Vm::faultHandler(regs*)+0x617>
c001490f:	ef                   	out    dx,eax
c0014910:	eb cf                	jmp    c00148e1 <Vm::faultHandler(regs*)+0x5e6>
c0014912:	66 ef                	out    dx,ax
c0014914:	eb cb                	jmp    c00148e1 <Vm::faultHandler(regs*)+0x5e6>
c0014916:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001491d:	83 ec 0c             	sub    esp,0xc
c0014920:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014924:	50                   	push   eax
c0014925:	e8 13 f5 ff ff       	call   c0013e3d <Vm::inbv(unsigned short)>
c001492a:	0f b6 c0             	movzx  eax,al
c001492d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014930:	eb 1f                	jmp    c0014951 <Vm::faultHandler(regs*)+0x656>
c0014932:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014935:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001493a:	74 03                	je     c001493f <Vm::faultHandler(regs*)+0x644>
c001493c:	ed                   	in     eax,dx
c001493d:	eb 0d                	jmp    c001494c <Vm::faultHandler(regs*)+0x651>
c001493f:	66 ed                	in     ax,dx
c0014941:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014944:	0f b7 c0             	movzx  eax,ax
c0014947:	66 31 d2             	xor    dx,dx
c001494a:	09 d0                	or     eax,edx
c001494c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001494f:	eb 1a                	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014951:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014954:	83 c4 10             	add    esp,0x10
c0014957:	eb 15                	jmp    c001496e <Vm::faultHandler(regs*)+0x673>
c0014959:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001495c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001495f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014964:	74 03                	je     c0014969 <Vm::faultHandler(regs*)+0x66e>
c0014966:	ef                   	out    dx,eax
c0014967:	eb 02                	jmp    c001496b <Vm::faultHandler(regs*)+0x670>
c0014969:	66 ef                	out    dx,ax
c001496b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001496e:	b0 01                	mov    al,0x1
c0014970:	eb 56                	jmp    c00149c8 <Vm::faultHandler(regs*)+0x6cd>
c0014972:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014976:	50                   	push   eax
c0014977:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001497b:	50                   	push   eax
c001497c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014980:	50                   	push   eax
c0014981:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014985:	50                   	push   eax
c0014986:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001498a:	50                   	push   eax
c001498b:	52                   	push   edx
c001498c:	52                   	push   edx
c001498d:	68 4b e7 01 c0       	push   0xc001e74b
c0014992:	e8 05 5b ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014997:	83 c4 20             	add    esp,0x20
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	6a 60                	push   0x60
c001499f:	e8 99 f4 ff ff       	call   c0013e3d <Vm::inbv(unsigned short)>
c00149a4:	83 c4 10             	add    esp,0x10
c00149a7:	3c 1c                	cmp    al,0x1c
c00149a9:	74 04                	je     c00149af <Vm::faultHandler(regs*)+0x6b4>
c00149ab:	3c 5a                	cmp    al,0x5a
c00149ad:	75 eb                	jne    c001499a <Vm::faultHandler(regs*)+0x69f>
c00149af:	3c 5a                	cmp    al,0x5a
c00149b1:	74 04                	je     c00149b7 <Vm::faultHandler(regs*)+0x6bc>
c00149b3:	3c 1c                	cmp    al,0x1c
c00149b5:	75 0f                	jne    c00149c6 <Vm::faultHandler(regs*)+0x6cb>
c00149b7:	83 ec 0c             	sub    esp,0xc
c00149ba:	6a 60                	push   0x60
c00149bc:	e8 7c f4 ff ff       	call   c0013e3d <Vm::inbv(unsigned short)>
c00149c1:	83 c4 10             	add    esp,0x10
c00149c4:	eb e9                	jmp    c00149af <Vm::faultHandler(regs*)+0x6b4>
c00149c6:	31 c0                	xor    eax,eax
c00149c8:	83 c4 1c             	add    esp,0x1c
c00149cb:	5b                   	pop    ebx
c00149cc:	5e                   	pop    esi
c00149cd:	5f                   	pop    edi
c00149ce:	5d                   	pop    ebp
c00149cf:	c3                   	ret    

c00149d0 <noCopro(unsigned long)>:
c00149d0:	c3                   	ret    

c00149d1 <nmiHandler(regs*, void*)>:
c00149d1:	83 ec 0c             	sub    esp,0xc
c00149d4:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c00149d9:	83 ec 0c             	sub    esp,0xc
c00149dc:	50                   	push   eax
c00149dd:	e8 3e 26 ff ff       	call   c0007020 <Computer::handleNMI()>
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	90                   	nop
c00149e6:	83 c4 0c             	add    esp,0xc
c00149e9:	c3                   	ret    

c00149ea <doubleFault(regs*, void*)>:
c00149ea:	55                   	push   ebp
c00149eb:	89 e5                	mov    ebp,esp
c00149ed:	83 ec 08             	sub    esp,0x8
c00149f0:	83 ec 0c             	sub    esp,0xc
c00149f3:	68 a8 e7 01 c0       	push   0xc001e7a8
c00149f8:	e8 02 b7 ff ff       	call   c00100ff <KePanic(char const*)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	90                   	nop
c0014a01:	c9                   	leave  
c0014a02:	c3                   	ret    

c0014a03 <displayDebugInfo(regs*)>:
c0014a03:	83 ec 1c             	sub    esp,0x1c
c0014a06:	0f 20 c0             	mov    eax,cr0
c0014a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a0d:	0f 20 d0             	mov    eax,cr2
c0014a10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a14:	0f 20 d8             	mov    eax,cr3
c0014a17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a1b:	0f 20 e0             	mov    eax,cr4
c0014a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a25:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014a28:	83 ec 08             	sub    esp,0x8
c0014a2b:	50                   	push   eax
c0014a2c:	68 c4 e7 01 c0       	push   0xc001e7c4
c0014a31:	e8 66 5a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014a36:	83 c4 10             	add    esp,0x10
c0014a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a3d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a40:	83 ec 08             	sub    esp,0x8
c0014a43:	50                   	push   eax
c0014a44:	68 b5 e7 01 c0       	push   0xc001e7b5
c0014a49:	e8 4e 5a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014a4e:	83 c4 10             	add    esp,0x10
c0014a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a55:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014a58:	83 ec 08             	sub    esp,0x8
c0014a5b:	50                   	push   eax
c0014a5c:	68 c0 e7 01 c0       	push   0xc001e7c0
c0014a61:	e8 36 5a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a70:	83 ec 08             	sub    esp,0x8
c0014a73:	50                   	push   eax
c0014a74:	68 cf e7 01 c0       	push   0xc001e7cf
c0014a79:	e8 1e 5a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a85:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014a88:	83 ec 08             	sub    esp,0x8
c0014a8b:	50                   	push   eax
c0014a8c:	68 da e7 01 c0       	push   0xc001e7da
c0014a91:	e8 06 5a ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	83 ec 08             	sub    esp,0x8
c0014a9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014aa0:	68 e5 e7 01 c0       	push   0xc001e7e5
c0014aa5:	e8 f2 59 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	83 ec 08             	sub    esp,0x8
c0014ab0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014ab4:	68 f0 e7 01 c0       	push   0xc001e7f0
c0014ab9:	e8 de 59 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014ac6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014acc:	83 ec 0c             	sub    esp,0xc
c0014acf:	50                   	push   eax
c0014ad0:	e8 6a 39 ff ff       	call   c000843f <setActiveTerminal(VgaText*)>
c0014ad5:	83 c4 10             	add    esp,0x10
c0014ad8:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014add:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ae3:	83 ec 08             	sub    esp,0x8
c0014ae6:	68 fb e7 01 c0       	push   0xc001e7fb
c0014aeb:	50                   	push   eax
c0014aec:	e8 8d 3c ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014af1:	83 c4 10             	add    esp,0x10
c0014af4:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014af9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014aff:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b04:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b06:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b09:	83 c2 0c             	add    edx,0xc
c0014b0c:	83 ec 08             	sub    esp,0x8
c0014b0f:	52                   	push   edx
c0014b10:	50                   	push   eax
c0014b11:	e8 68 3c ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014b16:	83 c4 10             	add    esp,0x10
c0014b19:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014b1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b24:	83 ec 08             	sub    esp,0x8
c0014b27:	68 04 e8 01 c0       	push   0xc001e804
c0014b2c:	50                   	push   eax
c0014b2d:	e8 4c 3c ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b44:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b47:	83 ec 08             	sub    esp,0x8
c0014b4a:	52                   	push   edx
c0014b4b:	50                   	push   eax
c0014b4c:	e8 e7 3b ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014b59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b5f:	83 ec 08             	sub    esp,0x8
c0014b62:	68 0c e8 01 c0       	push   0xc001e80c
c0014b67:	50                   	push   eax
c0014b68:	e8 11 3c ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014b6d:	83 c4 10             	add    esp,0x10
c0014b70:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b7f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014b82:	83 ec 08             	sub    esp,0x8
c0014b85:	52                   	push   edx
c0014b86:	50                   	push   eax
c0014b87:	e8 ac 3b ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b9a:	83 ec 08             	sub    esp,0x8
c0014b9d:	68 14 e8 01 c0       	push   0xc001e814
c0014ba2:	50                   	push   eax
c0014ba3:	e8 d6 3b ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014ba8:	83 c4 10             	add    esp,0x10
c0014bab:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bba:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014bbd:	83 ec 08             	sub    esp,0x8
c0014bc0:	52                   	push   edx
c0014bc1:	50                   	push   eax
c0014bc2:	e8 71 3b ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014bc7:	83 c4 10             	add    esp,0x10
c0014bca:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014bcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bd5:	83 ec 08             	sub    esp,0x8
c0014bd8:	68 1c e8 01 c0       	push   0xc001e81c
c0014bdd:	50                   	push   eax
c0014bde:	e8 9b 3b ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014be3:	83 c4 10             	add    esp,0x10
c0014be6:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014beb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bf1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bf5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014bf8:	83 ec 08             	sub    esp,0x8
c0014bfb:	52                   	push   edx
c0014bfc:	50                   	push   eax
c0014bfd:	e8 36 3b ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c10:	83 ec 08             	sub    esp,0x8
c0014c13:	68 24 e8 01 c0       	push   0xc001e824
c0014c18:	50                   	push   eax
c0014c19:	e8 60 3b ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c30:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014c33:	83 ec 08             	sub    esp,0x8
c0014c36:	52                   	push   edx
c0014c37:	50                   	push   eax
c0014c38:	e8 fb 3a ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014c3d:	83 c4 10             	add    esp,0x10
c0014c40:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c4b:	83 ec 08             	sub    esp,0x8
c0014c4e:	68 2c e8 01 c0       	push   0xc001e82c
c0014c53:	50                   	push   eax
c0014c54:	e8 25 3b ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c6b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014c6e:	83 ec 08             	sub    esp,0x8
c0014c71:	52                   	push   edx
c0014c72:	50                   	push   eax
c0014c73:	e8 c0 3a ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c86:	83 ec 08             	sub    esp,0x8
c0014c89:	68 34 e8 01 c0       	push   0xc001e834
c0014c8e:	50                   	push   eax
c0014c8f:	e8 ea 3a ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014c9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ca2:	83 ec 08             	sub    esp,0x8
c0014ca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ca9:	50                   	push   eax
c0014caa:	e8 89 3a ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014cb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cbd:	83 ec 08             	sub    esp,0x8
c0014cc0:	68 3d e8 01 c0       	push   0xc001e83d
c0014cc5:	50                   	push   eax
c0014cc6:	e8 b3 3a ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014ccb:	83 c4 10             	add    esp,0x10
c0014cce:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd9:	83 ec 08             	sub    esp,0x8
c0014cdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ce0:	50                   	push   eax
c0014ce1:	e8 52 3a ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014cee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cf4:	83 ec 08             	sub    esp,0x8
c0014cf7:	68 45 e8 01 c0       	push   0xc001e845
c0014cfc:	50                   	push   eax
c0014cfd:	e8 7c 3a ff ff       	call   c000877e <VgaText::puts(char const*)>
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014d0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d10:	83 ec 08             	sub    esp,0x8
c0014d13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d17:	50                   	push   eax
c0014d18:	e8 1b 3a ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c0014d1d:	83 c4 10             	add    esp,0x10
c0014d20:	fa                   	cli    
c0014d21:	f4                   	hlt    
c0014d22:	eb fe                	jmp    c0014d22 <displayDebugInfo(regs*)+0x31f>

c0014d24 <HalSystemIdle()>:
c0014d24:	56                   	push   esi
c0014d25:	53                   	push   ebx
c0014d26:	83 ec 14             	sub    esp,0x14
c0014d29:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0014d2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d34:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d3a:	83 e0 04             	and    eax,0x4
c0014d3d:	84 c0                	test   al,al
c0014d3f:	0f 95 c0             	setne  al
c0014d42:	84 c0                	test   al,al
c0014d44:	74 4c                	je     c0014d92 <HalSystemIdle()+0x6e>
c0014d46:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0014d4b:	83 ec 08             	sub    esp,0x8
c0014d4e:	68 e1 00 00 00       	push   0xe1
c0014d53:	50                   	push   eax
c0014d54:	e8 df 20 ff ff       	call   c0006e38 <Computer::rdmsr(unsigned int)>
c0014d59:	83 c4 10             	add    esp,0x10
c0014d5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d64:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0014d69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d6d:	83 e2 02             	and    edx,0x2
c0014d70:	89 d3                	mov    ebx,edx
c0014d72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d76:	83 e2 00             	and    edx,0x0
c0014d79:	89 d6                	mov    esi,edx
c0014d7b:	56                   	push   esi
c0014d7c:	53                   	push   ebx
c0014d7d:	68 e1 00 00 00       	push   0xe1
c0014d82:	50                   	push   eax
c0014d83:	e8 dc 20 ff ff       	call   c0006e64 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014d88:	83 c4 10             	add    esp,0x10
c0014d8b:	e8 04 b4 fe ff       	call   c0000194 <doTPAUSE>
c0014d90:	eb 01                	jmp    c0014d93 <HalSystemIdle()+0x6f>
c0014d92:	f4                   	hlt    
c0014d93:	90                   	nop
c0014d94:	83 c4 14             	add    esp,0x14
c0014d97:	5b                   	pop    ebx
c0014d98:	5e                   	pop    esi
c0014d99:	c3                   	ret    

c0014d9a <displayProgramFault(char const*)>:
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	83 ec 0c             	sub    esp,0xc
c0014da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da4:	e8 f3 56 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014da9:	83 c4 10             	add    esp,0x10
c0014dac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014db6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dbc:	85 c0                	test   eax,eax
c0014dbe:	74 21                	je     c0014de1 <displayProgramFault(char const*)+0x47>
c0014dc0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014dca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dd0:	6a 04                	push   0x4
c0014dd2:	6a 0f                	push   0xf
c0014dd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dd8:	50                   	push   eax
c0014dd9:	e8 12 3a ff ff       	call   c00087f0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	90                   	nop
c0014de2:	83 c4 0c             	add    esp,0xc
c0014de5:	c3                   	ret    

c0014de6 <gpFault(regs*, void*)>:
c0014de6:	83 ec 1c             	sub    esp,0x1c
c0014de9:	c7 05 b0 38 02 c0 fb 42 01 c0 	mov    DWORD PTR ds:0xc00238b0,0xc00142fb
c0014df3:	a1 b0 38 02 c0       	mov    eax,ds:0xc00238b0
c0014df8:	85 c0                	test   eax,eax
c0014dfa:	74 1c                	je     c0014e18 <gpFault(regs*, void*)+0x32>
c0014dfc:	a1 b0 38 02 c0       	mov    eax,ds:0xc00238b0
c0014e01:	83 ec 0c             	sub    esp,0xc
c0014e04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e08:	ff d0                	call   eax
c0014e0a:	83 c4 10             	add    esp,0x10
c0014e0d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e16:	75 2e                	jne    c0014e46 <gpFault(regs*, void*)+0x60>
c0014e18:	83 ec 0c             	sub    esp,0xc
c0014e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e1f:	e8 df fb ff ff       	call   c0014a03 <displayDebugInfo(regs*)>
c0014e24:	83 c4 10             	add    esp,0x10
c0014e27:	83 ec 0c             	sub    esp,0xc
c0014e2a:	68 4d e8 01 c0       	push   0xc001e84d
c0014e2f:	e8 66 ff ff ff       	call   c0014d9a <displayProgramFault(char const*)>
c0014e34:	83 c4 10             	add    esp,0x10
c0014e37:	83 ec 0c             	sub    esp,0xc
c0014e3a:	6a 00                	push   0x0
c0014e3c:	e8 af ee ff ff       	call   c0013cf0 <Thr::terminateFromIRQ(int)>
c0014e41:	83 c4 10             	add    esp,0x10
c0014e44:	eb 01                	jmp    c0014e47 <gpFault(regs*, void*)+0x61>
c0014e46:	90                   	nop
c0014e47:	83 c4 1c             	add    esp,0x1c
c0014e4a:	c3                   	ret    

c0014e4b <pgFault(regs*, void*)>:
c0014e4b:	83 ec 1c             	sub    esp,0x1c
c0014e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e52:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e55:	0f 20 d0             	mov    eax,cr2
c0014e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e60:	83 ec 04             	sub    esp,0x4
c0014e63:	52                   	push   edx
c0014e64:	50                   	push   eax
c0014e65:	68 2c e9 01 c0       	push   0xc001e92c
c0014e6a:	e8 2d 56 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014e6f:	83 c4 10             	add    esp,0x10
c0014e72:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e7c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014e82:	0f 20 d2             	mov    edx,cr2
c0014e85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e8d:	83 ec 08             	sub    esp,0x8
c0014e90:	52                   	push   edx
c0014e91:	50                   	push   eax
c0014e92:	e8 37 52 ff ff       	call   c000a0ce <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e97:	83 c4 10             	add    esp,0x10
c0014e9a:	84 c0                	test   al,al
c0014e9c:	75 2e                	jne    c0014ecc <pgFault(regs*, void*)+0x81>
c0014e9e:	83 ec 0c             	sub    esp,0xc
c0014ea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ea5:	e8 59 fb ff ff       	call   c0014a03 <displayDebugInfo(regs*)>
c0014eaa:	83 c4 10             	add    esp,0x10
c0014ead:	83 ec 0c             	sub    esp,0xc
c0014eb0:	68 66 e8 01 c0       	push   0xc001e866
c0014eb5:	e8 e0 fe ff ff       	call   c0014d9a <displayProgramFault(char const*)>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	83 ec 0c             	sub    esp,0xc
c0014ec0:	6a 00                	push   0x0
c0014ec2:	e8 29 ee ff ff       	call   c0013cf0 <Thr::terminateFromIRQ(int)>
c0014ec7:	83 c4 10             	add    esp,0x10
c0014eca:	eb 01                	jmp    c0014ecd <pgFault(regs*, void*)+0x82>
c0014ecc:	90                   	nop
c0014ecd:	83 c4 1c             	add    esp,0x1c
c0014ed0:	c3                   	ret    

c0014ed1 <otherISRHandler(regs*, void*)>:
c0014ed1:	83 ec 0c             	sub    esp,0xc
c0014ed4:	83 ec 0c             	sub    esp,0xc
c0014ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014edb:	e8 23 fb ff ff       	call   c0014a03 <displayDebugInfo(regs*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	83 ec 0c             	sub    esp,0xc
c0014ee6:	68 54 e9 01 c0       	push   0xc001e954
c0014eeb:	e8 aa fe ff ff       	call   c0014d9a <displayProgramFault(char const*)>
c0014ef0:	83 c4 10             	add    esp,0x10
c0014ef3:	83 ec 0c             	sub    esp,0xc
c0014ef6:	6a 00                	push   0x0
c0014ef8:	e8 f3 ed ff ff       	call   c0013cf0 <Thr::terminateFromIRQ(int)>
c0014efd:	83 c4 10             	add    esp,0x10
c0014f00:	90                   	nop
c0014f01:	83 c4 0c             	add    esp,0xc
c0014f04:	c3                   	ret    

c0014f05 <opcodeFault(regs*, void*)>:
c0014f05:	55                   	push   ebp
c0014f06:	89 e5                	mov    ebp,esp
c0014f08:	83 ec 08             	sub    esp,0x8
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	83 ec 08             	sub    esp,0x8
c0014f14:	50                   	push   eax
c0014f15:	68 71 e8 01 c0       	push   0xc001e871
c0014f1a:	e8 7d 55 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0014f27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f2d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014f33:	84 c0                	test   al,al
c0014f35:	74 21                	je     c0014f58 <opcodeFault(regs*, void*)+0x53>
c0014f37:	83 ec 0c             	sub    esp,0xc
c0014f3a:	68 7c e9 01 c0       	push   0xc001e97c
c0014f3f:	e8 58 55 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4d:	8d 50 19             	lea    edx,[eax+0x19]
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f56:	eb 2b                	jmp    c0014f83 <opcodeFault(regs*, void*)+0x7e>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f5e:	e8 a0 fa ff ff       	call   c0014a03 <displayDebugInfo(regs*)>
c0014f63:	83 c4 10             	add    esp,0x10
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	68 7f e8 01 c0       	push   0xc001e87f
c0014f6e:	e8 27 fe ff ff       	call   c0014d9a <displayProgramFault(char const*)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	83 ec 0c             	sub    esp,0xc
c0014f79:	6a 00                	push   0x0
c0014f7b:	e8 70 ed ff ff       	call   c0013cf0 <Thr::terminateFromIRQ(int)>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	c9                   	leave  
c0014f84:	c3                   	ret    

c0014f85 <i386SaveCoprocessor(void*)>:
c0014f85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f89:	83 c0 3f             	add    eax,0x3f
c0014f8c:	83 e0 c0             	and    eax,0xffffffc0
c0014f8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f93:	ff 25 ac 38 02 c0    	jmp    DWORD PTR ds:0xc00238ac

c0014f99 <i386LoadCoprocessor(void*)>:
c0014f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f9d:	83 c0 3f             	add    eax,0x3f
c0014fa0:	83 e0 c0             	and    eax,0xffffffc0
c0014fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fa7:	ff 25 a8 38 02 c0    	jmp    DWORD PTR ds:0xc00238a8

c0014fad <x87EmulHandler(regs*, void*)>:
c0014fad:	53                   	push   ebx
c0014fae:	83 ec 08             	sub    esp,0x8
c0014fb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fb6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014fba:	74 10                	je     c0014fcc <x87EmulHandler(regs*, void*)+0x1f>
c0014fbc:	83 ec 0c             	sub    esp,0xc
c0014fbf:	68 8c e8 01 c0       	push   0xc001e88c
c0014fc4:	e8 36 b1 ff ff       	call   c00100ff <KePanic(char const*)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	0f 20 c0             	mov    eax,cr0
c0014fcf:	a8 08                	test   al,0x8
c0014fd1:	74 59                	je     c001502c <x87EmulHandler(regs*, void*)+0x7f>
c0014fd3:	0f 06                	clts   
c0014fd5:	a1 a4 38 02 c0       	mov    eax,ds:0xc00238a4
c0014fda:	85 c0                	test   eax,eax
c0014fdc:	74 0e                	je     c0014fec <x87EmulHandler(regs*, void*)+0x3f>
c0014fde:	83 ec 0c             	sub    esp,0xc
c0014fe1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014fe4:	e8 9c ff ff ff       	call   c0014f85 <i386SaveCoprocessor(void*)>
c0014fe9:	83 c4 10             	add    esp,0x10
c0014fec:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014ff2:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014ff6:	75 12                	jne    c001500a <x87EmulHandler(regs*, void*)+0x5d>
c0014ff8:	83 ec 0c             	sub    esp,0xc
c0014ffb:	68 40 02 00 00       	push   0x240
c0015000:	e8 fc 27 ff ff       	call   c0007801 <malloc>
c0015005:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015008:	eb 10                	jmp    c001501a <x87EmulHandler(regs*, void*)+0x6d>
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	a1 a4 38 02 c0       	mov    eax,ds:0xc00238a4
c0015012:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015015:	e8 7f ff ff ff       	call   c0014f99 <i386LoadCoprocessor(void*)>
c001501a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	a3 a4 38 02 c0       	mov    ds:0xc00238a4,eax
c0015027:	83 c4 08             	add    esp,0x8
c001502a:	5b                   	pop    ebx
c001502b:	c3                   	ret    
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	68 a0 e8 01 c0       	push   0xc001e8a0
c0015034:	e8 63 54 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0015039:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015041:	83 c4 18             	add    esp,0x18
c0015044:	5b                   	pop    ebx
c0015045:	e9 a6 ec ff ff       	jmp    c0013cf0 <Thr::terminateFromIRQ(int)>

c001504a <HalInitialiseCoprocessor()>:
c001504a:	83 ec 10             	sub    esp,0x10
c001504d:	c7 05 a4 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238a4,0x0
c0015057:	6a 00                	push   0x0
c0015059:	68 ad 4f 01 c0       	push   0xc0014fad
c001505e:	6a 07                	push   0x7
c0015060:	e8 ab 6d ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015065:	e8 e6 65 00 00       	call   c001b650 <avxDetect>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	85 c0                	test   eax,eax
c001506f:	74 1c                	je     c001508d <HalInitialiseCoprocessor()+0x43>
c0015071:	c7 05 ac 38 02 c0 7a b6 01 c0 	mov    DWORD PTR ds:0xc00238ac,0xc001b67a
c001507b:	c7 05 a8 38 02 c0 8b b6 01 c0 	mov    DWORD PTR ds:0xc00238a8,0xc001b68b
c0015085:	83 c4 0c             	add    esp,0xc
c0015088:	e9 0f 66 00 00       	jmp    c001b69c <avxInit>
c001508d:	e8 3e 68 00 00       	call   c001b8d0 <absolutelyNoChanceInHell>
c0015092:	85 c0                	test   eax,eax
c0015094:	74 1c                	je     c00150b2 <HalInitialiseCoprocessor()+0x68>
c0015096:	c7 05 ac 38 02 c0 e8 b8 01 c0 	mov    DWORD PTR ds:0xc00238ac,0xc001b8e8
c00150a0:	c7 05 a8 38 02 c0 f0 b8 01 c0 	mov    DWORD PTR ds:0xc00238a8,0xc001b8f0
c00150aa:	83 c4 0c             	add    esp,0xc
c00150ad:	e9 46 68 00 00       	jmp    c001b8f8 <sseInit>
c00150b2:	e8 5f 68 00 00       	call   c001b916 <x87Detect>
c00150b7:	85 c0                	test   eax,eax
c00150b9:	74 1c                	je     c00150d7 <HalInitialiseCoprocessor()+0x8d>
c00150bb:	c7 05 ac 38 02 c0 31 b9 01 c0 	mov    DWORD PTR ds:0xc00238ac,0xc001b931
c00150c5:	c7 05 a8 38 02 c0 38 b9 01 c0 	mov    DWORD PTR ds:0xc00238a8,0xc001b938
c00150cf:	83 c4 0c             	add    esp,0xc
c00150d2:	e9 68 68 00 00       	jmp    c001b93f <x87Init>
c00150d7:	c7 05 ac 38 02 c0 d0 49 01 c0 	mov    DWORD PTR ds:0xc00238ac,0xc00149d0
c00150e1:	c7 05 a8 38 02 c0 d0 49 01 c0 	mov    DWORD PTR ds:0xc00238a8,0xc00149d0
c00150eb:	0f 20 c0             	mov    eax,cr0
c00150ee:	83 c8 04             	or     eax,0x4
c00150f1:	0f 22 c0             	mov    cr0,eax
c00150f4:	83 c4 0c             	add    esp,0xc
c00150f7:	c3                   	ret    

c00150f8 <HalPanic(char const*)>:
c00150f8:	53                   	push   ebx
c00150f9:	83 ec 10             	sub    esp,0x10
c00150fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015100:	fa                   	cli    
c0015101:	53                   	push   ebx
c0015102:	68 b6 e8 01 c0       	push   0xc001e8b6
c0015107:	e8 90 53 ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001510c:	83 c4 0c             	add    esp,0xc
c001510f:	6a 01                	push   0x1
c0015111:	6a 0f                	push   0xf
c0015113:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c0015119:	e8 74 31 ff ff       	call   c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001511e:	58                   	pop    eax
c001511f:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c0015125:	e8 60 33 ff ff       	call   c000848a <VgaText::clearScreen()>
c001512a:	5a                   	pop    edx
c001512b:	59                   	pop    ecx
c001512c:	68 1e e9 01 c0       	push   0xc001e91e
c0015131:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c0015137:	e8 8e 31 ff ff       	call   c00082ca <VgaText::setTitle(char*)>
c001513c:	83 c4 0c             	add    esp,0xc
c001513f:	6a 01                	push   0x1
c0015141:	6a 0f                	push   0xf
c0015143:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c0015149:	e8 44 31 ff ff       	call   c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001514e:	58                   	pop    eax
c001514f:	5a                   	pop    edx
c0015150:	68 cf e8 01 c0       	push   0xc001e8cf
c0015155:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001515b:	e8 1e 36 ff ff       	call   c000877e <VgaText::puts(char const*)>
c0015160:	83 c4 0c             	add    esp,0xc
c0015163:	6a 0f                	push   0xf
c0015165:	6a 01                	push   0x1
c0015167:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001516d:	e8 20 31 ff ff       	call   c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015172:	59                   	pop    ecx
c0015173:	58                   	pop    eax
c0015174:	68 d8 e8 01 c0       	push   0xc001e8d8
c0015179:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001517f:	e8 fa 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c0015184:	83 c4 0c             	add    esp,0xc
c0015187:	6a 01                	push   0x1
c0015189:	6a 0f                	push   0xf
c001518b:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c0015191:	e8 fc 30 ff ff       	call   c0008292 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015196:	58                   	pop    eax
c0015197:	5a                   	pop    edx
c0015198:	68 1c e9 01 c0       	push   0xc001e91c
c001519d:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c00151a3:	e8 d6 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00151a8:	59                   	pop    ecx
c00151a9:	58                   	pop    eax
c00151aa:	68 e5 e8 01 c0       	push   0xc001e8e5
c00151af:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c00151b5:	e8 c4 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00151ba:	58                   	pop    eax
c00151bb:	5a                   	pop    edx
c00151bc:	68 1f e9 01 c0       	push   0xc001e91f
c00151c1:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c00151c7:	e8 b2 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00151cc:	59                   	pop    ecx
c00151cd:	58                   	pop    eax
c00151ce:	53                   	push   ebx
c00151cf:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c00151d5:	e8 a4 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00151da:	58                   	pop    eax
c00151db:	5a                   	pop    edx
c00151dc:	68 1c e9 01 c0       	push   0xc001e91c
c00151e1:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c00151e7:	e8 92 35 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	eb fe                	jmp    c00151ef <HalPanic(char const*)+0xf7>

c00151f1 <HalQueryPerformanceCounter()>:
c00151f1:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c00151f6:	31 d2                	xor    edx,edx
c00151f8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00151fe:	31 c0                	xor    eax,eax
c0015200:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015207:	74 02                	je     c001520b <HalQueryPerformanceCounter()+0x1a>
c0015209:	0f 31                	rdtsc  
c001520b:	c3                   	ret    

c001520c <HalInitialise()>:
c001520c:	53                   	push   ebx
c001520d:	83 ec 08             	sub    esp,0x8
c0015210:	e8 2e 6e ff ff       	call   c000c043 <setupINTS()>
c0015215:	80 3d 20 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e20,0x0
c001521c:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0015221:	75 07                	jne    c001522a <HalInitialise()+0x1e>
c0015223:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001522a:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015230:	83 e0 01             	and    eax,0x1
c0015233:	a2 a0 38 02 c0       	mov    ds:0xc00238a0,al
c0015238:	e8 a7 02 00 00       	call   c00154e4 <picOpen()>
c001523d:	80 3d a0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a0,0x0
c0015244:	74 0a                	je     c0015250 <HalInitialise()+0x44>
c0015246:	e8 e1 01 00 00       	call   c001542c <picDisable()>
c001524b:	e8 74 5d 00 00       	call   c001afc4 <apicOpen()>
c0015250:	bb 0f 00 00 00       	mov    ebx,0xf
c0015255:	50                   	push   eax
c0015256:	6a 00                	push   0x0
c0015258:	68 d1 4e 01 c0       	push   0xc0014ed1
c001525d:	6a 00                	push   0x0
c001525f:	e8 ac 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015264:	83 c4 0c             	add    esp,0xc
c0015267:	6a 00                	push   0x0
c0015269:	68 d1 4e 01 c0       	push   0xc0014ed1
c001526e:	6a 01                	push   0x1
c0015270:	e8 9b 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015275:	83 c4 0c             	add    esp,0xc
c0015278:	6a 00                	push   0x0
c001527a:	68 d1 49 01 c0       	push   0xc00149d1
c001527f:	6a 02                	push   0x2
c0015281:	e8 8a 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015286:	83 c4 0c             	add    esp,0xc
c0015289:	6a 00                	push   0x0
c001528b:	68 d1 4e 01 c0       	push   0xc0014ed1
c0015290:	6a 03                	push   0x3
c0015292:	e8 79 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015297:	83 c4 0c             	add    esp,0xc
c001529a:	6a 00                	push   0x0
c001529c:	68 d1 4e 01 c0       	push   0xc0014ed1
c00152a1:	6a 04                	push   0x4
c00152a3:	e8 68 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152a8:	83 c4 0c             	add    esp,0xc
c00152ab:	6a 00                	push   0x0
c00152ad:	68 d1 4e 01 c0       	push   0xc0014ed1
c00152b2:	6a 05                	push   0x5
c00152b4:	e8 57 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152b9:	83 c4 0c             	add    esp,0xc
c00152bc:	6a 00                	push   0x0
c00152be:	68 05 4f 01 c0       	push   0xc0014f05
c00152c3:	6a 06                	push   0x6
c00152c5:	e8 46 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ca:	83 c4 0c             	add    esp,0xc
c00152cd:	6a 00                	push   0x0
c00152cf:	68 ea 49 01 c0       	push   0xc00149ea
c00152d4:	6a 08                	push   0x8
c00152d6:	e8 35 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152db:	83 c4 0c             	add    esp,0xc
c00152de:	6a 00                	push   0x0
c00152e0:	68 d1 4e 01 c0       	push   0xc0014ed1
c00152e5:	6a 09                	push   0x9
c00152e7:	e8 24 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ec:	83 c4 0c             	add    esp,0xc
c00152ef:	6a 00                	push   0x0
c00152f1:	68 d1 4e 01 c0       	push   0xc0014ed1
c00152f6:	6a 0a                	push   0xa
c00152f8:	e8 13 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152fd:	83 c4 0c             	add    esp,0xc
c0015300:	6a 00                	push   0x0
c0015302:	68 d1 4e 01 c0       	push   0xc0014ed1
c0015307:	6a 0b                	push   0xb
c0015309:	e8 02 6b ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001530e:	83 c4 0c             	add    esp,0xc
c0015311:	6a 00                	push   0x0
c0015313:	68 e6 4d 01 c0       	push   0xc0014de6
c0015318:	6a 0d                	push   0xd
c001531a:	e8 f1 6a ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001531f:	83 c4 0c             	add    esp,0xc
c0015322:	6a 00                	push   0x0
c0015324:	68 4b 4e 01 c0       	push   0xc0014e4b
c0015329:	6a 0e                	push   0xe
c001532b:	e8 e0 6a ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	50                   	push   eax
c0015334:	6a 00                	push   0x0
c0015336:	68 d1 4e 01 c0       	push   0xc0014ed1
c001533b:	53                   	push   ebx
c001533c:	43                   	inc    ebx
c001533d:	e8 ce 6a ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	83 fb 1e             	cmp    ebx,0x1e
c0015348:	75 e9                	jne    c0015333 <HalInitialise()+0x127>
c001534a:	50                   	push   eax
c001534b:	6a 00                	push   0x0
c001534d:	68 df 0f 01 c0       	push   0xc0010fdf
c0015352:	6a 60                	push   0x60
c0015354:	e8 b7 6a ff ff       	call   c000be10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015359:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c001535e:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015368:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001536f:	e8 8d 24 ff ff       	call   c0007801 <malloc>
c0015374:	89 04 24             	mov    DWORD PTR [esp],eax
c0015377:	89 c3                	mov    ebx,eax
c0015379:	e8 2e 09 00 00       	call   c0015cac <RTC::RTC()>
c001537e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015388:	5a                   	pop    edx
c0015389:	59                   	pop    ecx
c001538a:	53                   	push   ebx
c001538b:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015391:	e8 46 65 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c0015396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015398:	6a 00                	push   0x0
c001539a:	6a 00                	push   0x0
c001539c:	6a 00                	push   0x0
c001539e:	53                   	push   ebx
c001539f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153a2:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c00153a7:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00153ad:	83 c4 28             	add    esp,0x28
c00153b0:	5b                   	pop    ebx
c00153b1:	c3                   	ret    

c00153b2 <HalMakeBeep(int)>:
c00153b2:	53                   	push   ebx
c00153b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00153b7:	85 db                	test   ebx,ebx
c00153b9:	75 07                	jne    c00153c2 <HalMakeBeep(int)+0x10>
c00153bb:	e4 61                	in     al,0x61
c00153bd:	83 e0 fc             	and    eax,0xfffffffc
c00153c0:	eb 26                	jmp    c00153e8 <HalMakeBeep(int)+0x36>
c00153c2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00153c7:	99                   	cdq    
c00153c8:	f7 fb                	idiv   ebx
c00153ca:	89 c1                	mov    ecx,eax
c00153cc:	b0 b6                	mov    al,0xb6
c00153ce:	e6 43                	out    0x43,al
c00153d0:	88 c8                	mov    al,cl
c00153d2:	e6 42                	out    0x42,al
c00153d4:	89 c8                	mov    eax,ecx
c00153d6:	c1 e8 08             	shr    eax,0x8
c00153d9:	e6 42                	out    0x42,al
c00153db:	e4 61                	in     al,0x61
c00153dd:	88 c2                	mov    dl,al
c00153df:	83 ca 03             	or     edx,0x3
c00153e2:	38 c2                	cmp    dl,al
c00153e4:	74 04                	je     c00153ea <HalMakeBeep(int)+0x38>
c00153e6:	88 d0                	mov    al,dl
c00153e8:	e6 61                	out    0x61,al
c00153ea:	5b                   	pop    ebx
c00153eb:	c3                   	ret    

c00153ec <HalGetRand()>:
c00153ec:	31 c0                	xor    eax,eax
c00153ee:	c3                   	ret    

c00153ef <HalEndOfInterrupt(int)>:
c00153ef:	80 3d a0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a0,0x0
c00153f6:	74 23                	je     c001541b <HalEndOfInterrupt(int)+0x2c>
c00153f8:	83 ec 14             	sub    esp,0x14
c00153fb:	6a 1b                	push   0x1b
c00153fd:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015403:	e8 30 1a ff ff       	call   c0006e38 <Computer::rdmsr(unsigned int)>
c0015408:	25 00 f0 ff ff       	and    eax,0xfffff000
c001540d:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015417:	83 c4 1c             	add    esp,0x1c
c001541a:	c3                   	ret    
c001541b:	e9 54 02 00 00       	jmp    c0015674 <picEOI(int)>

c0015420 <HalRestart()>:
c0015420:	c3                   	ret    

c0015421 <HalShutdown()>:
c0015421:	c3                   	ret    

c0015422 <HalSleep()>:
c0015422:	c3                   	ret    
c0015423:	90                   	nop

c0015424 <picIoWait()>:
c0015424:	eb 00                	jmp    c0015426 <picIoWait()+0x2>
c0015426:	eb 00                	jmp    c0015428 <picIoWait()+0x4>
c0015428:	90                   	nop
c0015429:	c3                   	ret    
c001542a:	66 90                	xchg   ax,ax

c001542c <picDisable()>:
c001542c:	83 ec 10             	sub    esp,0x10
c001542f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015436:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001543b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001543f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015444:	ee                   	out    dx,al
c0015445:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001544c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015451:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015455:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001545a:	ee                   	out    dx,al
c001545b:	90                   	nop
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	c3                   	ret    

c0015460 <picGetIRQReg(int)>:
c0015460:	83 ec 10             	sub    esp,0x10
c0015463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015467:	25 ff 00 00 00       	and    eax,0xff
c001546c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015473:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015477:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001547b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015480:	ee                   	out    dx,al
c0015481:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015485:	25 ff 00 00 00       	and    eax,0xff
c001548a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015491:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015495:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015499:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001549e:	ee                   	out    dx,al
c001549f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00154a6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00154ab:	89 c2                	mov    edx,eax
c00154ad:	ec                   	in     al,dx
c00154ae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154b2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154b6:	25 ff 00 00 00       	and    eax,0xff
c00154bb:	c1 e0 08             	shl    eax,0x8
c00154be:	89 c1                	mov    ecx,eax
c00154c0:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00154c7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00154cc:	89 c2                	mov    edx,eax
c00154ce:	ec                   	in     al,dx
c00154cf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00154d3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154d7:	25 ff 00 00 00       	and    eax,0xff
c00154dc:	09 c8                	or     eax,ecx
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	c3                   	ret    
c00154e2:	66 90                	xchg   ax,ax

c00154e4 <picOpen()>:
c00154e4:	83 ec 50             	sub    esp,0x50
c00154e7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00154ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00154f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00154f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154fb:	ee                   	out    dx,al
c00154fc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015503:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015508:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001550c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015510:	ee                   	out    dx,al
c0015511:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015519:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015521:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015528:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001552c:	89 c2                	mov    edx,eax
c001552e:	ec                   	in     al,dx
c001552f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015533:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015537:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001553b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015542:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015546:	89 c2                	mov    edx,eax
c0015548:	ec                   	in     al,dx
c0015549:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001554d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015551:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015555:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001555c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015561:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015565:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015569:	ee                   	out    dx,al
c001556a:	e8 b5 fe ff ff       	call   c0015424 <picIoWait()>
c001556f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015576:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001557b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001557f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015583:	ee                   	out    dx,al
c0015584:	e8 9b fe ff ff       	call   c0015424 <picIoWait()>
c0015589:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001558d:	25 ff 00 00 00       	and    eax,0xff
c0015592:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015599:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001559d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00155a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155a5:	ee                   	out    dx,al
c00155a6:	e8 79 fe ff ff       	call   c0015424 <picIoWait()>
c00155ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00155af:	25 ff 00 00 00       	and    eax,0xff
c00155b4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00155bb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00155bf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00155c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00155c7:	ee                   	out    dx,al
c00155c8:	e8 57 fe ff ff       	call   c0015424 <picIoWait()>
c00155cd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00155d4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00155d9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00155dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00155e1:	ee                   	out    dx,al
c00155e2:	e8 3d fe ff ff       	call   c0015424 <picIoWait()>
c00155e7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00155ee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00155f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00155f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00155fb:	ee                   	out    dx,al
c00155fc:	e8 23 fe ff ff       	call   c0015424 <picIoWait()>
c0015601:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015608:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001560d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015611:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015615:	ee                   	out    dx,al
c0015616:	e8 09 fe ff ff       	call   c0015424 <picIoWait()>
c001561b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015622:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015627:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001562b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001562f:	ee                   	out    dx,al
c0015630:	e8 ef fd ff ff       	call   c0015424 <picIoWait()>
c0015635:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015639:	25 ff 00 00 00       	and    eax,0xff
c001563e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015645:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015649:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001564d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015651:	ee                   	out    dx,al
c0015652:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015656:	25 ff 00 00 00       	and    eax,0xff
c001565b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015662:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015666:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001566a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001566e:	ee                   	out    dx,al
c001566f:	90                   	nop
c0015670:	83 c4 50             	add    esp,0x50
c0015673:	c3                   	ret    

c0015674 <picEOI(int)>:
c0015674:	83 ec 10             	sub    esp,0x10
c0015677:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001567c:	75 22                	jne    c00156a0 <picEOI(int)+0x2c>
c001567e:	6a 0b                	push   0xb
c0015680:	e8 db fd ff ff       	call   c0015460 <picGetIRQReg(int)>
c0015685:	83 c4 04             	add    esp,0x4
c0015688:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001568d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015692:	25 ff ff 00 00       	and    eax,0xffff
c0015697:	25 80 00 00 00       	and    eax,0x80
c001569c:	74 72                	je     c0015710 <picEOI(int)+0x9c>
c001569e:	66 90                	xchg   ax,ax
c00156a0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00156a5:	75 31                	jne    c00156d8 <picEOI(int)+0x64>
c00156a7:	6a 0b                	push   0xb
c00156a9:	e8 b2 fd ff ff       	call   c0015460 <picGetIRQReg(int)>
c00156ae:	83 c4 04             	add    esp,0x4
c00156b1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00156b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00156ba:	66 85 c0             	test   ax,ax
c00156bd:	78 19                	js     c00156d8 <picEOI(int)+0x64>
c00156bf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00156c6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00156cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00156cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00156d4:	ee                   	out    dx,al
c00156d5:	eb 3d                	jmp    c0015714 <picEOI(int)+0xa0>
c00156d7:	90                   	nop
c00156d8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156dd:	7e 19                	jle    c00156f8 <picEOI(int)+0x84>
c00156df:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00156e6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00156eb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00156ef:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00156f4:	ee                   	out    dx,al
c00156f5:	8d 76 00             	lea    esi,[esi+0x0]
c00156f8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00156ff:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015704:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015708:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001570d:	ee                   	out    dx,al
c001570e:	eb 04                	jmp    c0015714 <picEOI(int)+0xa0>
c0015710:	90                   	nop
c0015711:	8d 76 00             	lea    esi,[esi+0x0]
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	c3                   	ret    

c0015718 <RTC::open(int, int, void*)>:
c0015718:	31 c0                	xor    eax,eax
c001571a:	c3                   	ret    
c001571b:	90                   	nop

c001571c <RTC::close(int, int, void*)>:
c001571c:	31 c0                	xor    eax,eax
c001571e:	c3                   	ret    
c001571f:	90                   	nop

c0015720 <RTC::timeInSecondsUTC()>:
c0015720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015724:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001572a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015730:	c3                   	ret    
c0015731:	90                   	nop

c0015732 <RTC::timeInDatetimeUTC()>:
c0015732:	53                   	push   ebx
c0015733:	83 ec 14             	sub    esp,0x14
c0015736:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001573a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001573e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015740:	50                   	push   eax
c0015741:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015744:	83 c4 0c             	add    esp,0xc
c0015747:	52                   	push   edx
c0015748:	50                   	push   eax
c0015749:	53                   	push   ebx
c001574a:	e8 01 5f ff ff       	call   c000b650 <secondsToDatetime(unsigned long long)>
c001574f:	89 d8                	mov    eax,ebx
c0015751:	83 c4 14             	add    esp,0x14
c0015754:	5b                   	pop    ebx
c0015755:	c2 04 00             	ret    0x4

c0015758 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015758:	56                   	push   esi
c0015759:	53                   	push   ebx
c001575a:	83 ec 14             	sub    esp,0x14
c001575d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015761:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015763:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015766:	8d 44 24 08          	lea    eax,[esp+0x8]
c001576a:	52                   	push   edx
c001576b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001576f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015773:	50                   	push   eax
c0015774:	e8 d7 5e ff ff       	call   c000b650 <secondsToDatetime(unsigned long long)>
c0015779:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001577d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015785:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015789:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001578d:	89 f0                	mov    eax,esi
c001578f:	83 c4 20             	add    esp,0x20
c0015792:	5b                   	pop    ebx
c0015793:	5e                   	pop    esi
c0015794:	ff e0                	jmp    eax

c0015796 <RTC::~RTC()>:
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	ba bc e9 01 c0       	mov    edx,0xc001e9bc
c001579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157a2:	89 10                	mov    DWORD PTR [eax],edx
c00157a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157a8:	83 ec 0c             	sub    esp,0xc
c00157ab:	50                   	push   eax
c00157ac:	e8 23 5c ff ff       	call   c000b3d4 <Clock::~Clock()>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	90                   	nop
c00157b5:	83 c4 0c             	add    esp,0xc
c00157b8:	c3                   	ret    
c00157b9:	90                   	nop

c00157ba <RTC::~RTC()>:
c00157ba:	83 ec 0c             	sub    esp,0xc
c00157bd:	83 ec 0c             	sub    esp,0xc
c00157c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157c4:	e8 cd ff ff ff       	call   c0015796 <RTC::~RTC()>
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	83 ec 08             	sub    esp,0x8
c00157cf:	68 60 01 00 00       	push   0x160
c00157d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157d8:	e8 c9 4b ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	83 c4 0c             	add    esp,0xc
c00157e3:	c3                   	ret    

c00157e4 <RTC::get_update_in_progress_flag()>:
c00157e4:	83 ec 14             	sub    esp,0x14
c00157e7:	6a 0a                	push   0xa
c00157e9:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00157ef:	e8 f8 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c00157f4:	83 c4 1c             	add    esp,0x1c
c00157f7:	c0 e8 07             	shr    al,0x7
c00157fa:	c3                   	ret    
c00157fb:	90                   	nop

c00157fc <RTC::completeRTCRefresh()>:
c00157fc:	55                   	push   ebp
c00157fd:	57                   	push   edi
c00157fe:	56                   	push   esi
c00157ff:	53                   	push   ebx
c0015800:	83 ec 2c             	sub    esp,0x2c
c0015803:	8b 1d 2c 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b2c
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015810:	e8 cf ff ff ff       	call   c00157e4 <RTC::get_update_in_progress_flag()>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	84 c0                	test   al,al
c001581a:	74 0e                	je     c001582a <RTC::completeRTCRefresh()+0x2e>
c001581c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015822:	3b 05 2c 2b 02 c0    	cmp    eax,DWORD PTR ds:0xc0022b2c
c0015828:	73 df                	jae    c0015809 <RTC::completeRTCRefresh()+0xd>
c001582a:	55                   	push   ebp
c001582b:	55                   	push   ebp
c001582c:	6a 00                	push   0x0
c001582e:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015834:	e8 b3 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015839:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001583d:	58                   	pop    eax
c001583e:	5a                   	pop    edx
c001583f:	6a 02                	push   0x2
c0015841:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015847:	e8 a0 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c001584c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015850:	59                   	pop    ecx
c0015851:	5b                   	pop    ebx
c0015852:	6a 04                	push   0x4
c0015854:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c001585a:	e8 8d 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c001585f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015863:	5e                   	pop    esi
c0015864:	5f                   	pop    edi
c0015865:	6a 07                	push   0x7
c0015867:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c001586d:	e8 7a 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015872:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015876:	5d                   	pop    ebp
c0015877:	58                   	pop    eax
c0015878:	6a 08                	push   0x8
c001587a:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015880:	e8 67 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015885:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015889:	58                   	pop    eax
c001588a:	5a                   	pop    edx
c001588b:	6a 09                	push   0x9
c001588d:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015893:	e8 54 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015898:	83 c4 10             	add    esp,0x10
c001589b:	0f b6 e8             	movzx  ebp,al
c001589e:	8b 1d 2c 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b2c
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158ab:	e8 34 ff ff ff       	call   c00157e4 <RTC::get_update_in_progress_flag()>
c00158b0:	83 c4 10             	add    esp,0x10
c00158b3:	84 c0                	test   al,al
c00158b5:	74 0e                	je     c00158c5 <RTC::completeRTCRefresh()+0xc9>
c00158b7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00158bd:	3b 05 2c 2b 02 c0    	cmp    eax,DWORD PTR ds:0xc0022b2c
c00158c3:	73 df                	jae    c00158a4 <RTC::completeRTCRefresh()+0xa8>
c00158c5:	50                   	push   eax
c00158c6:	50                   	push   eax
c00158c7:	6a 00                	push   0x0
c00158c9:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00158cf:	e8 18 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c00158d4:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00158d8:	58                   	pop    eax
c00158d9:	5a                   	pop    edx
c00158da:	6a 02                	push   0x2
c00158dc:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00158e2:	e8 05 16 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c00158e7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00158eb:	59                   	pop    ecx
c00158ec:	5b                   	pop    ebx
c00158ed:	6a 04                	push   0x4
c00158ef:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00158f5:	e8 f2 15 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c00158fa:	5e                   	pop    esi
c00158fb:	88 c3                	mov    bl,al
c00158fd:	5f                   	pop    edi
c00158fe:	6a 07                	push   0x7
c0015900:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015906:	e8 e1 15 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c001590b:	89 c6                	mov    esi,eax
c001590d:	58                   	pop    eax
c001590e:	5a                   	pop    edx
c001590f:	6a 08                	push   0x8
c0015911:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015917:	e8 d0 15 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c001591c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015920:	59                   	pop    ecx
c0015921:	5f                   	pop    edi
c0015922:	6a 09                	push   0x9
c0015924:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c001592a:	e8 bd 15 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c001592f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015933:	0f b6 f8             	movzx  edi,al
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c001593d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015941:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015945:	89 f1                	mov    ecx,esi
c0015947:	0f 94 c0             	sete   al
c001594a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001594e:	0f 94 c2             	sete   dl
c0015951:	21 d0                	and    eax,edx
c0015953:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015957:	0f 94 c2             	sete   dl
c001595a:	21 c2                	and    edx,eax
c001595c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015960:	0f 94 c0             	sete   al
c0015963:	21 d0                	and    eax,edx
c0015965:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015969:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001596d:	0f 94 c1             	sete   cl
c0015970:	84 c8                	test   al,cl
c0015972:	75 29                	jne    c001599d <RTC::completeRTCRefresh()+0x1a1>
c0015974:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015978:	89 fd                	mov    ebp,edi
c001597a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001597e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015982:	89 f0                	mov    eax,esi
c0015984:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015988:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001598c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015990:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015994:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015998:	e9 01 ff ff ff       	jmp    c001589e <RTC::completeRTCRefresh()+0xa2>
c001599d:	39 fd                	cmp    ebp,edi
c001599f:	75 d3                	jne    c0015974 <RTC::completeRTCRefresh()+0x178>
c00159a1:	55                   	push   ebp
c00159a2:	55                   	push   ebp
c00159a3:	6a 0b                	push   0xb
c00159a5:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c00159ab:	e8 3c 15 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c00159b0:	83 c4 10             	add    esp,0x10
c00159b3:	89 c5                	mov    ebp,eax
c00159b5:	a8 04                	test   al,0x4
c00159b7:	75 78                	jne    c0015a31 <RTC::completeRTCRefresh()+0x235>
c00159b9:	b1 0a                	mov    cl,0xa
c00159bb:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c00159bf:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00159c3:	83 e2 0f             	and    edx,0xf
c00159c6:	c0 e8 04             	shr    al,0x4
c00159c9:	c1 ef 04             	shr    edi,0x4
c00159cc:	f6 e1                	mul    cl
c00159ce:	6b ff 0a             	imul   edi,edi,0xa
c00159d1:	01 d0                	add    eax,edx
c00159d3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159d7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00159db:	83 e2 0f             	and    edx,0xf
c00159de:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159e2:	c0 e8 04             	shr    al,0x4
c00159e5:	f6 e1                	mul    cl
c00159e7:	01 d0                	add    eax,edx
c00159e9:	88 da                	mov    dl,bl
c00159eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00159ef:	83 e2 0f             	and    edx,0xf
c00159f2:	88 d8                	mov    al,bl
c00159f4:	83 e3 80             	and    ebx,0xffffff80
c00159f7:	c0 e8 04             	shr    al,0x4
c00159fa:	83 e0 07             	and    eax,0x7
c00159fd:	f6 e1                	mul    cl
c00159ff:	01 d0                	add    eax,edx
c0015a01:	89 f2                	mov    edx,esi
c0015a03:	09 c3                	or     ebx,eax
c0015a05:	83 e2 0f             	and    edx,0xf
c0015a08:	89 f0                	mov    eax,esi
c0015a0a:	c0 e8 04             	shr    al,0x4
c0015a0d:	f6 e1                	mul    cl
c0015a0f:	8d 34 02             	lea    esi,[edx+eax*1]
c0015a12:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a16:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a1a:	83 e2 0f             	and    edx,0xf
c0015a1d:	c0 e8 04             	shr    al,0x4
c0015a20:	f6 e1                	mul    cl
c0015a22:	01 d0                	add    eax,edx
c0015a24:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a2c:	83 e0 0f             	and    eax,0xf
c0015a2f:	01 c7                	add    edi,eax
c0015a31:	83 e5 02             	and    ebp,0x2
c0015a34:	75 14                	jne    c0015a4a <RTC::completeRTCRefresh()+0x24e>
c0015a36:	84 db                	test   bl,bl
c0015a38:	79 10                	jns    c0015a4a <RTC::completeRTCRefresh()+0x24e>
c0015a3a:	83 e3 7f             	and    ebx,0x7f
c0015a3d:	b9 18 00 00 00       	mov    ecx,0x18
c0015a42:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a45:	99                   	cdq    
c0015a46:	f7 f9                	idiv   ecx
c0015a48:	88 d3                	mov    bl,dl
c0015a4a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a50:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015a56:	77 06                	ja     c0015a5e <RTC::completeRTCRefresh()+0x262>
c0015a58:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015a5e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015a63:	31 d2                	xor    edx,edx
c0015a65:	c1 e1 10             	shl    ecx,0x10
c0015a68:	89 d7                	mov    edi,edx
c0015a6a:	c1 e5 10             	shl    ebp,0x10
c0015a6d:	31 c0                	xor    eax,eax
c0015a6f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015a75:	09 cf                	or     edi,ecx
c0015a77:	89 fa                	mov    edx,edi
c0015a79:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015a7d:	88 da                	mov    dl,bl
c0015a7f:	89 f3                	mov    ebx,esi
c0015a81:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015a85:	88 d8                	mov    al,bl
c0015a87:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015a8b:	0f b7 c8             	movzx  ecx,ax
c0015a8e:	09 e9                	or     ecx,ebp
c0015a90:	89 c8                	mov    eax,ecx
c0015a92:	51                   	push   ecx
c0015a93:	51                   	push   ecx
c0015a94:	52                   	push   edx
c0015a95:	50                   	push   eax
c0015a96:	e8 28 5a ff ff       	call   c000b4c3 <datetimeToSeconds(datetime_t)>
c0015a9b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015a9f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015aa5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015aab:	83 c4 3c             	add    esp,0x3c
c0015aae:	5b                   	pop    ebx
c0015aaf:	5e                   	pop    esi
c0015ab0:	5f                   	pop    edi
c0015ab1:	5d                   	pop    ebp
c0015ab2:	c3                   	ret    
c0015ab3:	90                   	nop

c0015ab4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015ab4:	55                   	push   ebp
c0015ab5:	57                   	push   edi
c0015ab6:	56                   	push   esi
c0015ab7:	53                   	push   ebx
c0015ab8:	83 ec 30             	sub    esp,0x30
c0015abb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015abf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015ac3:	6a 00                	push   0x0
c0015ac5:	6a 00                	push   0x0
c0015ac7:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015acd:	e8 30 15 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ad2:	83 c4 0c             	add    esp,0xc
c0015ad5:	6a 00                	push   0x0
c0015ad7:	6a 02                	push   0x2
c0015ad9:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015adf:	e8 1e 15 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ae4:	31 d2                	xor    edx,edx
c0015ae6:	89 f9                	mov    ecx,edi
c0015ae8:	89 f8                	mov    eax,edi
c0015aea:	c1 e9 10             	shr    ecx,0x10
c0015aed:	0f b6 c4             	movzx  eax,ah
c0015af0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015af4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015af8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015afc:	b9 64 00 00 00       	mov    ecx,0x64
c0015b01:	89 f0                	mov    eax,esi
c0015b03:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b07:	89 f0                	mov    eax,esi
c0015b09:	0f b6 c4             	movzx  eax,ah
c0015b0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b10:	89 f0                	mov    eax,esi
c0015b12:	c1 e8 10             	shr    eax,0x10
c0015b15:	66 f7 f1             	div    cx
c0015b18:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015b1d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015b22:	59                   	pop    ecx
c0015b23:	5b                   	pop    ebx
c0015b24:	89 fb                	mov    ebx,edi
c0015b26:	6a 0b                	push   0xb
c0015b28:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015b2e:	e8 b9 13 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015b33:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b3f:	75 74                	jne    c0015bb5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b41:	b2 0a                	mov    dl,0xa
c0015b43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b47:	0f b6 c1             	movzx  eax,cl
c0015b4a:	f6 f2                	div    dl
c0015b4c:	88 c3                	mov    bl,al
c0015b4e:	88 e0                	mov    al,ah
c0015b50:	c1 e3 04             	shl    ebx,0x4
c0015b53:	09 c3                	or     ebx,eax
c0015b55:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015b5a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015b5e:	f6 f2                	div    dl
c0015b60:	88 c1                	mov    cl,al
c0015b62:	88 e0                	mov    al,ah
c0015b64:	c1 e1 04             	shl    ecx,0x4
c0015b67:	09 c1                	or     ecx,eax
c0015b69:	89 f8                	mov    eax,edi
c0015b6b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015b6f:	0f b6 c0             	movzx  eax,al
c0015b72:	f6 f2                	div    dl
c0015b74:	88 c3                	mov    bl,al
c0015b76:	88 e0                	mov    al,ah
c0015b78:	c1 e3 04             	shl    ebx,0x4
c0015b7b:	09 c3                	or     ebx,eax
c0015b7d:	89 f0                	mov    eax,esi
c0015b7f:	0f b6 c0             	movzx  eax,al
c0015b82:	f6 f2                	div    dl
c0015b84:	88 c1                	mov    cl,al
c0015b86:	88 e0                	mov    al,ah
c0015b88:	c1 e1 04             	shl    ecx,0x4
c0015b8b:	09 c1                	or     ecx,eax
c0015b8d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015b92:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015b96:	f6 f2                	div    dl
c0015b98:	88 c1                	mov    cl,al
c0015b9a:	88 e0                	mov    al,ah
c0015b9c:	c1 e1 04             	shl    ecx,0x4
c0015b9f:	09 c1                	or     ecx,eax
c0015ba1:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015ba6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015baa:	f6 f2                	div    dl
c0015bac:	89 c5                	mov    ebp,eax
c0015bae:	88 e0                	mov    al,ah
c0015bb0:	c1 e5 04             	shl    ebp,0x4
c0015bb3:	09 c5                	or     ebp,eax
c0015bb5:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015bba:	75 17                	jne    c0015bd3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015bbc:	80 fb 0b             	cmp    bl,0xb
c0015bbf:	76 0c                	jbe    c0015bcd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015bc1:	80 eb 0c             	sub    bl,0xc
c0015bc4:	75 02                	jne    c0015bc8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015bc6:	b3 0c                	mov    bl,0xc
c0015bc8:	83 cb 80             	or     ebx,0xffffff80
c0015bcb:	eb 06                	jmp    c0015bd3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015bcd:	84 db                	test   bl,bl
c0015bcf:	75 02                	jne    c0015bd3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015bd1:	b3 0c                	mov    bl,0xc
c0015bd3:	0f b6 db             	movzx  ebx,bl
c0015bd6:	50                   	push   eax
c0015bd7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015bdc:	50                   	push   eax
c0015bdd:	6a 00                	push   0x0
c0015bdf:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015be5:	e8 18 14 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bea:	83 c4 0c             	add    esp,0xc
c0015bed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015bf2:	50                   	push   eax
c0015bf3:	6a 02                	push   0x2
c0015bf5:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015bfb:	e8 02 14 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c00:	83 c4 0c             	add    esp,0xc
c0015c03:	53                   	push   ebx
c0015c04:	6a 04                	push   0x4
c0015c06:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015c0c:	e8 f1 13 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c11:	83 c4 0c             	add    esp,0xc
c0015c14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015c19:	50                   	push   eax
c0015c1a:	6a 07                	push   0x7
c0015c1c:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015c22:	e8 db 13 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c27:	83 c4 0c             	add    esp,0xc
c0015c2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015c2f:	50                   	push   eax
c0015c30:	6a 08                	push   0x8
c0015c32:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015c38:	e8 c5 13 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c3d:	83 c4 0c             	add    esp,0xc
c0015c40:	89 e8                	mov    eax,ebp
c0015c42:	0f b6 e8             	movzx  ebp,al
c0015c45:	55                   	push   ebp
c0015c46:	6a 09                	push   0x9
c0015c48:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015c4e:	e8 af 13 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c53:	5a                   	pop    edx
c0015c54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c58:	e8 9f fb ff ff       	call   c00157fc <RTC::completeRTCRefresh()>
c0015c5d:	83 c4 3c             	add    esp,0x3c
c0015c60:	b0 01                	mov    al,0x1
c0015c62:	5b                   	pop    ebx
c0015c63:	5e                   	pop    esi
c0015c64:	5f                   	pop    edi
c0015c65:	5d                   	pop    ebp
c0015c66:	c3                   	ret    

c0015c67 <rtcIRQHandler(regs*, void*)>:
c0015c67:	53                   	push   ebx
c0015c68:	83 ec 10             	sub    esp,0x10
c0015c6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c6f:	6a 0c                	push   0xc
c0015c71:	ff 35 58 05 02 c0    	push   DWORD PTR ds:0xc0020558
c0015c77:	e8 70 12 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015c7c:	83 c4 10             	add    esp,0x10
c0015c7f:	84 c0                	test   al,al
c0015c81:	79 24                	jns    c0015ca7 <rtcIRQHandler(regs*, void*)+0x40>
c0015c83:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015c8a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015c91:	66 ff 05 b4 38 02 c0 	inc    WORD PTR ds:0xc00238b4
c0015c98:	75 0d                	jne    c0015ca7 <rtcIRQHandler(regs*, void*)+0x40>
c0015c9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015c9e:	83 c4 08             	add    esp,0x8
c0015ca1:	5b                   	pop    ebx
c0015ca2:	e9 55 fb ff ff       	jmp    c00157fc <RTC::completeRTCRefresh()>
c0015ca7:	83 c4 08             	add    esp,0x8
c0015caa:	5b                   	pop    ebx
c0015cab:	c3                   	ret    

c0015cac <RTC::RTC()>:
c0015cac:	83 ec 1c             	sub    esp,0x1c
c0015caf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb3:	83 ec 08             	sub    esp,0x8
c0015cb6:	68 9f e9 01 c0       	push   0xc001e99f
c0015cbb:	50                   	push   eax
c0015cbc:	e8 dd 56 ff ff       	call   c000b39e <Clock::Clock(char const*)>
c0015cc1:	83 c4 10             	add    esp,0x10
c0015cc4:	ba bc e9 01 c0       	mov    edx,0xc001e9bc
c0015cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ccd:	89 10                	mov    DWORD PTR [eax],edx
c0015ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd3:	83 ec 0c             	sub    esp,0xc
c0015cd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cda:	6a 01                	push   0x1
c0015cdc:	68 67 5c 01 c0       	push   0xc0015c67
c0015ce1:	6a 08                	push   0x8
c0015ce3:	50                   	push   eax
c0015ce4:	e8 9f 5b ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015ce9:	83 c4 20             	add    esp,0x20
c0015cec:	89 c2                	mov    edx,eax
c0015cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015cf8:	fa                   	cli    
c0015cf9:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0015cfe:	40                   	inc    eax
c0015cff:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0015d04:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0015d09:	83 ec 08             	sub    esp,0x8
c0015d0c:	6a 0b                	push   0xb
c0015d0e:	50                   	push   eax
c0015d0f:	e8 d8 11 ff ff       	call   c0006eec <Computer::readCMOS(unsigned char)>
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d1b:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0015d20:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015d24:	83 ca 10             	or     edx,0x10
c0015d27:	81 e2 ff 00 00 00    	and    edx,0xff
c0015d2d:	83 ec 04             	sub    esp,0x4
c0015d30:	52                   	push   edx
c0015d31:	6a 0b                	push   0xb
c0015d33:	50                   	push   eax
c0015d34:	e8 c9 12 ff ff       	call   c0007002 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d43:	e8 b4 fa ff ff       	call   c00157fc <RTC::completeRTCRefresh()>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0015d50:	48                   	dec    eax
c0015d51:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0015d56:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c0015d5b:	85 c0                	test   eax,eax
c0015d5d:	75 01                	jne    c0015d60 <RTC::RTC()+0xb4>
c0015d5f:	fb                   	sti    
c0015d60:	90                   	nop
c0015d61:	83 c4 1c             	add    esp,0x1c
c0015d64:	c3                   	ret    
c0015d65:	66 90                	xchg   ax,ax
c0015d67:	90                   	nop

c0015d68 <HalConsoleScroll(int, int)>:
c0015d68:	83 ec 10             	sub    esp,0x10
c0015d6b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015d73:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015d7b:	90                   	nop
c0015d7c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015d81:	0f 8f e1 00 00 00    	jg     c0015e68 <HalConsoleScroll(int, int)+0x100>
c0015d87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015d8f:	90                   	nop
c0015d90:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015d98:	0f 8f be 00 00 00    	jg     c0015e5c <HalConsoleScroll(int, int)+0xf4>
c0015d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015da2:	89 d0                	mov    eax,edx
c0015da4:	c1 e0 02             	shl    eax,0x2
c0015da7:	01 d0                	add    eax,edx
c0015da9:	c1 e0 05             	shl    eax,0x5
c0015dac:	89 c2                	mov    edx,eax
c0015dae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015db2:	01 d0                	add    eax,edx
c0015db4:	89 c2                	mov    edx,eax
c0015db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dc1:	89 d0                	mov    eax,edx
c0015dc3:	c1 e0 02             	shl    eax,0x2
c0015dc6:	01 d0                	add    eax,edx
c0015dc8:	c1 e0 05             	shl    eax,0x5
c0015dcb:	89 c2                	mov    edx,eax
c0015dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dd1:	01 d0                	add    eax,edx
c0015dd3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ddd:	01 c2                	add    edx,eax
c0015ddf:	8a 01                	mov    al,BYTE PTR [ecx]
c0015de1:	88 02                	mov    BYTE PTR [edx],al
c0015de3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015de8:	75 66                	jne    c0015e50 <HalConsoleScroll(int, int)+0xe8>
c0015dea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dee:	83 e0 01             	and    eax,0x1
c0015df1:	74 39                	je     c0015e2c <HalConsoleScroll(int, int)+0xc4>
c0015df3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015df7:	83 e0 0f             	and    eax,0xf
c0015dfa:	88 c2                	mov    dl,al
c0015dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e00:	c1 e0 04             	shl    eax,0x4
c0015e03:	88 d1                	mov    cl,dl
c0015e05:	09 c1                	or     ecx,eax
c0015e07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e0b:	89 d0                	mov    eax,edx
c0015e0d:	c1 e0 02             	shl    eax,0x2
c0015e10:	01 d0                	add    eax,edx
c0015e12:	c1 e0 05             	shl    eax,0x5
c0015e15:	89 c2                	mov    edx,eax
c0015e17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e1b:	01 d0                	add    eax,edx
c0015e1d:	89 c2                	mov    edx,eax
c0015e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e23:	01 d0                	add    eax,edx
c0015e25:	88 ca                	mov    dl,cl
c0015e27:	88 10                	mov    BYTE PTR [eax],dl
c0015e29:	eb 25                	jmp    c0015e50 <HalConsoleScroll(int, int)+0xe8>
c0015e2b:	90                   	nop
c0015e2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e30:	89 d0                	mov    eax,edx
c0015e32:	c1 e0 02             	shl    eax,0x2
c0015e35:	01 d0                	add    eax,edx
c0015e37:	c1 e0 05             	shl    eax,0x5
c0015e3a:	89 c2                	mov    edx,eax
c0015e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e40:	01 d0                	add    eax,edx
c0015e42:	89 c2                	mov    edx,eax
c0015e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e48:	01 d0                	add    eax,edx
c0015e4a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e50:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015e54:	e9 37 ff ff ff       	jmp    c0015d90 <HalConsoleScroll(int, int)+0x28>
c0015e59:	8d 76 00             	lea    esi,[esi+0x0]
c0015e5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015e60:	e9 17 ff ff ff       	jmp    c0015d7c <HalConsoleScroll(int, int)+0x14>
c0015e65:	8d 76 00             	lea    esi,[esi+0x0]
c0015e68:	90                   	nop
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	c3                   	ret    
c0015e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015e70 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015e70:	83 ec 14             	sub    esp,0x14
c0015e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e77:	88 04 24             	mov    BYTE PTR [esp],al
c0015e7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015e7d:	25 ff 00 00 00       	and    eax,0xff
c0015e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e86:	89 d1                	mov    ecx,edx
c0015e88:	83 e1 0f             	and    ecx,0xf
c0015e8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e8f:	c1 e2 04             	shl    edx,0x4
c0015e92:	81 e2 ff 00 00 00    	and    edx,0xff
c0015e98:	09 ca                	or     edx,ecx
c0015e9a:	c1 e2 08             	shl    edx,0x8
c0015e9d:	09 d0                	or     eax,edx
c0015e9f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015ea4:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015eac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015eb0:	89 d0                	mov    eax,edx
c0015eb2:	c1 e0 02             	shl    eax,0x2
c0015eb5:	01 d0                	add    eax,edx
c0015eb7:	c1 e0 04             	shl    eax,0x4
c0015eba:	89 c2                	mov    edx,eax
c0015ebc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ec0:	01 d0                	add    eax,edx
c0015ec2:	01 c0                	add    eax,eax
c0015ec4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015ec8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015ed1:	66 89 02             	mov    WORD PTR [edx],ax
c0015ed4:	90                   	nop
c0015ed5:	83 c4 14             	add    esp,0x14
c0015ed8:	c3                   	ret    
c0015ed9:	8d 76 00             	lea    esi,[esi+0x0]

c0015edc <HalConsoleCursorUpdate(int, int)>:
c0015edc:	83 ec 20             	sub    esp,0x20
c0015edf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ee3:	89 c2                	mov    edx,eax
c0015ee5:	89 d0                	mov    eax,edx
c0015ee7:	c1 e0 02             	shl    eax,0x2
c0015eea:	01 d0                	add    eax,edx
c0015eec:	c1 e0 04             	shl    eax,0x4
c0015eef:	89 c2                	mov    edx,eax
c0015ef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ef5:	01 d0                	add    eax,edx
c0015ef7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015efc:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f03:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f08:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f10:	ee                   	out    dx,al
c0015f11:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f16:	25 ff 00 00 00       	and    eax,0xff
c0015f1b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015f22:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015f26:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015f2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f2e:	ee                   	out    dx,al
c0015f2f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015f36:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f3b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f43:	ee                   	out    dx,al
c0015f44:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f49:	66 c1 e8 08          	shr    ax,0x8
c0015f4d:	25 ff 00 00 00       	and    eax,0xff
c0015f52:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015f59:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f5d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015f61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f65:	ee                   	out    dx,al
c0015f66:	90                   	nop
c0015f67:	83 c4 20             	add    esp,0x20
c0015f6a:	c3                   	ret    
c0015f6b:	90                   	nop

c0015f6c <FAT::getName()>:
c0015f6c:	b8 f0 e9 01 c0       	mov    eax,0xc001e9f0
c0015f71:	c3                   	ret    
c0015f72:	66 90                	xchg   ax,ax

c0015f74 <FAT::tell(void*, unsigned long long*)>:
c0015f74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f79:	75 09                	jne    c0015f84 <FAT::tell(void*, unsigned long long*)+0x10>
c0015f7b:	b8 04 00 00 00       	mov    eax,0x4
c0015f80:	c3                   	ret    
c0015f81:	8d 76 00             	lea    esi,[esi+0x0]
c0015f84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f89:	75 09                	jne    c0015f94 <FAT::tell(void*, unsigned long long*)+0x20>
c0015f8b:	b8 04 00 00 00       	mov    eax,0x4
c0015f90:	c3                   	ret    
c0015f91:	8d 76 00             	lea    esi,[esi+0x0]
c0015f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015f9b:	ba 00 00 00 00       	mov    edx,0x0
c0015fa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fa4:	89 01                	mov    DWORD PTR [ecx],eax
c0015fa6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015fa9:	b8 00 00 00 00       	mov    eax,0x0
c0015fae:	c3                   	ret    
c0015faf:	90                   	nop

c0015fb0 <FAT::stat(void*, unsigned long long*)>:
c0015fb0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015fb5:	75 09                	jne    c0015fc0 <FAT::stat(void*, unsigned long long*)+0x10>
c0015fb7:	b8 04 00 00 00       	mov    eax,0x4
c0015fbc:	c3                   	ret    
c0015fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fc0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015fc5:	75 09                	jne    c0015fd0 <FAT::stat(void*, unsigned long long*)+0x20>
c0015fc7:	b8 04 00 00 00       	mov    eax,0x4
c0015fcc:	c3                   	ret    
c0015fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015fd7:	ba 00 00 00 00       	mov    edx,0x0
c0015fdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fe0:	89 01                	mov    DWORD PTR [ecx],eax
c0015fe2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015fe5:	b8 00 00 00 00       	mov    eax,0x0
c0015fea:	c3                   	ret    
c0015feb:	90                   	nop

c0015fec <FAT::~FAT()>:
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c0015ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff8:	89 10                	mov    DWORD PTR [eax],edx
c0015ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffe:	83 ec 0c             	sub    esp,0xc
c0016001:	50                   	push   eax
c0016002:	e8 db 47 ff ff       	call   c000a7e2 <Filesystem::~Filesystem()>
c0016007:	83 c4 10             	add    esp,0x10
c001600a:	90                   	nop
c001600b:	83 c4 0c             	add    esp,0xc
c001600e:	c3                   	ret    
c001600f:	90                   	nop

c0016010 <FAT::~FAT()>:
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	83 ec 0c             	sub    esp,0xc
c0016016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001601a:	e8 cd ff ff ff       	call   c0015fec <FAT::~FAT()>
c001601f:	83 c4 10             	add    esp,0x10
c0016022:	83 ec 08             	sub    esp,0x8
c0016025:	6a 08                	push   0x8
c0016027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001602b:	e8 76 43 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c0016030:	83 c4 10             	add    esp,0x10
c0016033:	83 c4 0c             	add    esp,0xc
c0016036:	c3                   	ret    
c0016037:	90                   	nop

c0016038 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016038:	83 ec 1c             	sub    esp,0x1c
c001603b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016042:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016047:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001604b:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c0016052:	83 f8 ff             	cmp    eax,0xffffffff
c0016055:	75 35                	jne    c001608c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016057:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001605b:	88 c2                	mov    dl,al
c001605d:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016062:	01 d0                	add    eax,edx
c0016064:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016068:	8b 15 c0 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238c0
c001606e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016072:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c0016079:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c001607e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016082:	89 14 85 60 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6a0],edx
c0016089:	eb 19                	jmp    c00160a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001608b:	90                   	nop
c001608c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016090:	88 c2                	mov    dl,al
c0016092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016096:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c001609d:	01 d0                	add    eax,edx
c001609f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160a3:	90                   	nop
c00160a4:	83 ec 04             	sub    esp,0x4
c00160a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160af:	8d 44 24 15          	lea    eax,[esp+0x15]
c00160b3:	50                   	push   eax
c00160b4:	e8 9b ed fe ff       	call   c0004e54 <f_getlabel>
c00160b9:	83 c4 10             	add    esp,0x10
c00160bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160c5:	75 09                	jne    c00160d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00160c7:	b8 00 00 00 00       	mov    eax,0x0
c00160cc:	eb 0a                	jmp    c00160d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00160ce:	66 90                	xchg   ax,ax
c00160d0:	b8 01 00 00 00       	mov    eax,0x1
c00160d5:	8d 76 00             	lea    esi,[esi+0x0]
c00160d8:	83 c4 1c             	add    esp,0x1c
c00160db:	c3                   	ret    

c00160dc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00160dc:	57                   	push   edi
c00160dd:	83 ec 58             	sub    esp,0x58
c00160e0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00160e8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00160ec:	b8 00 00 00 00       	mov    eax,0x0
c00160f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00160f6:	fc                   	cld    
c00160f7:	89 d7                	mov    edi,edx
c00160f9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00160fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00160ff:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c0016106:	83 f8 ff             	cmp    eax,0xffffffff
c0016109:	75 35                	jne    c0016140 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001610b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001610f:	88 c2                	mov    dl,al
c0016111:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016116:	01 d0                	add    eax,edx
c0016118:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001611c:	8b 15 c0 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238c0
c0016122:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016126:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c001612d:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016132:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016136:	89 14 85 60 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6a0],edx
c001613d:	eb 19                	jmp    c0016158 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001613f:	90                   	nop
c0016140:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016144:	88 c2                	mov    dl,al
c0016146:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001614a:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c0016151:	01 d0                	add    eax,edx
c0016153:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016157:	90                   	nop
c0016158:	83 ec 08             	sub    esp,0x8
c001615b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001615f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016163:	50                   	push   eax
c0016164:	e8 57 a6 fe ff       	call   c00007c0 <strcat>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016173:	50                   	push   eax
c0016174:	e8 2c ee fe ff       	call   c0004fa5 <f_setlabel>
c0016179:	83 c4 10             	add    esp,0x10
c001617c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016180:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016185:	75 09                	jne    c0016190 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016187:	b8 00 00 00 00       	mov    eax,0x0
c001618c:	eb 0a                	jmp    c0016198 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001618e:	66 90                	xchg   ax,ax
c0016190:	b8 01 00 00 00       	mov    eax,0x1
c0016195:	8d 76 00             	lea    esi,[esi+0x0]
c0016198:	83 c4 58             	add    esp,0x58
c001619b:	5f                   	pop    edi
c001619c:	c3                   	ret    
c001619d:	90                   	nop
c001619e:	66 90                	xchg   ax,ax

c00161a0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00161a0:	83 ec 2c             	sub    esp,0x2c
c00161a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161ab:	83 ec 08             	sub    esp,0x8
c00161ae:	68 14 ea 01 c0       	push   0xc001ea14
c00161b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161b7:	e8 24 a5 fe ff       	call   c00006e0 <strcmp>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	85 c0                	test   eax,eax
c00161c1:	0f 94 c0             	sete   al
c00161c4:	84 c0                	test   al,al
c00161c6:	74 10                	je     c00161d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00161c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161d0:	e9 b3 00 00 00       	jmp    c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161d5:	8d 76 00             	lea    esi,[esi+0x0]
c00161d8:	83 ec 08             	sub    esp,0x8
c00161db:	68 06 ea 01 c0       	push   0xc001ea06
c00161e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161e4:	e8 f7 a4 fe ff       	call   c00006e0 <strcmp>
c00161e9:	83 c4 10             	add    esp,0x10
c00161ec:	85 c0                	test   eax,eax
c00161ee:	0f 94 c0             	sete   al
c00161f1:	84 c0                	test   al,al
c00161f3:	74 0f                	je     c0016204 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00161f5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161fd:	e9 86 00 00 00       	jmp    c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016202:	66 90                	xchg   ax,ax
c0016204:	83 ec 08             	sub    esp,0x8
c0016207:	68 0c ea 01 c0       	push   0xc001ea0c
c001620c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016210:	e8 cb a4 fe ff       	call   c00006e0 <strcmp>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	85 c0                	test   eax,eax
c001621a:	0f 94 c0             	sete   al
c001621d:	84 c0                	test   al,al
c001621f:	74 0b                	je     c001622c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016221:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016229:	eb 5d                	jmp    c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001622b:	90                   	nop
c001622c:	83 ec 08             	sub    esp,0x8
c001622f:	68 3c ca 01 c0       	push   0xc001ca3c
c0016234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016238:	e8 a3 a4 fe ff       	call   c00006e0 <strcmp>
c001623d:	83 c4 10             	add    esp,0x10
c0016240:	85 c0                	test   eax,eax
c0016242:	0f 94 c0             	sete   al
c0016245:	84 c0                	test   al,al
c0016247:	74 0b                	je     c0016254 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016249:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016251:	eb 35                	jmp    c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016253:	90                   	nop
c0016254:	83 ec 08             	sub    esp,0x8
c0016257:	68 12 ea 01 c0       	push   0xc001ea12
c001625c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016260:	e8 7b a4 fe ff       	call   c00006e0 <strcmp>
c0016265:	83 c4 10             	add    esp,0x10
c0016268:	85 c0                	test   eax,eax
c001626a:	0f 94 c0             	sete   al
c001626d:	84 c0                	test   al,al
c001626f:	74 0b                	je     c001627c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016271:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016279:	eb 0d                	jmp    c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001627b:	90                   	nop
c001627c:	b8 08 00 00 00       	mov    eax,0x8
c0016281:	e9 ea 00 00 00       	jmp    c0016370 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016286:	66 90                	xchg   ax,ax
c0016288:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001628f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016294:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016298:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c001629f:	83 f8 ff             	cmp    eax,0xffffffff
c00162a2:	75 34                	jne    c00162d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00162a4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162a8:	88 c2                	mov    dl,al
c00162aa:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c00162af:	01 d0                	add    eax,edx
c00162b1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162b5:	8b 15 c0 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238c0
c00162bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162bf:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c00162c6:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c00162cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00162cf:	89 14 85 60 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6a0],edx
c00162d6:	eb 18                	jmp    c00162f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00162d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162dc:	88 c2                	mov    dl,al
c00162de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162e2:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c00162e9:	01 d0                	add    eax,edx
c00162eb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162ef:	90                   	nop
c00162f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f4:	88 04 24             	mov    BYTE PTR [esp],al
c00162f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016307:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001630c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	68 00 20 00 00       	push   0x2000
c001631c:	e8 e0 14 ff ff       	call   c0007801 <malloc>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016328:	68 00 20 00 00       	push   0x2000
c001632d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016331:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016335:	50                   	push   eax
c0016336:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001633a:	50                   	push   eax
c001633b:	e8 55 ef fe ff       	call   c0005295 <f_mkfs>
c0016340:	83 c4 10             	add    esp,0x10
c0016343:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016347:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001634c:	75 0a                	jne    c0016358 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001634e:	b8 00 00 00 00       	mov    eax,0x0
c0016353:	eb 1b                	jmp    c0016370 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016355:	8d 76 00             	lea    esi,[esi+0x0]
c0016358:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001635d:	75 09                	jne    c0016368 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001635f:	b8 09 00 00 00       	mov    eax,0x9
c0016364:	eb 0a                	jmp    c0016370 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016366:	66 90                	xchg   ax,ax
c0016368:	b8 01 00 00 00       	mov    eax,0x1
c001636d:	8d 76 00             	lea    esi,[esi+0x0]
c0016370:	83 c4 2c             	add    esp,0x2c
c0016373:	c3                   	ret    

c0016374 <FAT::tryMount(LogicalDisk*, int)>:
c0016374:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001637a:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c001637f:	83 f8 14             	cmp    eax,0x14
c0016382:	75 18                	jne    c001639c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	68 18 ea 01 c0       	push   0xc001ea18
c001638c:	e8 6e 9d ff ff       	call   c00100ff <KePanic(char const*)>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	b0 00                	mov    al,0x0
c0016396:	e9 e9 01 00 00       	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001639b:	90                   	nop
c001639c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00163a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00163a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163af:	3d 00 02 00 00       	cmp    eax,0x200
c00163b4:	74 0a                	je     c00163c0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00163b6:	b0 00                	mov    al,0x0
c00163b8:	e9 c7 01 00 00       	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]
c00163c0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00163c8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00163cf:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c00163d6:	83 f8 ff             	cmp    eax,0xffffffff
c00163d9:	74 09                	je     c00163e4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00163db:	b0 01                	mov    al,0x1
c00163dd:	e9 a2 01 00 00       	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163e2:	66 90                	xchg   ax,ax
c00163e4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00163ee:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00163f6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00163fd:	88 c2                	mov    dl,al
c00163ff:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016404:	01 d0                	add    eax,edx
c0016406:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001640d:	8b 15 c0 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238c0
c0016413:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001641a:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c0016421:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016426:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001642d:	89 14 85 60 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6a0],edx
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 34 02 00 00       	push   0x234
c001643c:	e8 c0 13 ff ff       	call   c0007801 <malloc>
c0016441:	83 c4 10             	add    esp,0x10
c0016444:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001644b:	83 ec 04             	sub    esp,0x4
c001644e:	6a 00                	push   0x0
c0016450:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016457:	50                   	push   eax
c0016458:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001645f:	e8 57 d6 fe ff       	call   c0003abb <f_mount>
c0016464:	83 c4 10             	add    esp,0x10
c0016467:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001646e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016476:	74 1c                	je     c0016494 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016482:	e8 9a 13 ff ff       	call   c0007821 <rfree>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	b0 00                	mov    al,0x0
c001648c:	e9 f3 00 00 00       	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	83 ec 04             	sub    esp,0x4
c0016497:	68 00 01 00 00       	push   0x100
c001649c:	6a 00                	push   0x0
c001649e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164a5:	50                   	push   eax
c00164a6:	e8 25 a0 fe ff       	call   c00004d0 <memset>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	83 ec 08             	sub    esp,0x8
c00164b1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00164b8:	50                   	push   eax
c00164b9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164c0:	50                   	push   eax
c00164c1:	e8 fa a2 fe ff       	call   c00007c0 <strcat>
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	83 ec 08             	sub    esp,0x8
c00164cc:	68 26 ea 01 c0       	push   0xc001ea26
c00164d1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164d8:	50                   	push   eax
c00164d9:	e8 e2 a2 fe ff       	call   c00007c0 <strcat>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	83 ec 04             	sub    esp,0x4
c00164e4:	6a 01                	push   0x1
c00164e6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00164ed:	50                   	push   eax
c00164ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164f2:	50                   	push   eax
c00164f3:	e8 25 d6 fe ff       	call   c0003b1d <f_open>
c00164f8:	83 c4 10             	add    esp,0x10
c00164fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016502:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016509:	85 c0                	test   eax,eax
c001650b:	74 0b                	je     c0016518 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001650d:	78 31                	js     c0016540 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001650f:	83 e8 04             	sub    eax,0x4
c0016512:	83 f8 01             	cmp    eax,0x1
c0016515:	77 29                	ja     c0016540 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016517:	90                   	nop
c0016518:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016527:	50                   	push   eax
c0016528:	e8 a3 dd fe ff       	call   c00042d0 <f_close>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	90                   	nop
c0016531:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016539:	74 41                	je     c001657c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001653b:	eb 33                	jmp    c0016570 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001653d:	8d 76 00             	lea    esi,[esi+0x0]
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001654a:	e8 d2 12 ff ff       	call   c0007821 <rfree>
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	83 ec 04             	sub    esp,0x4
c0016555:	6a 00                	push   0x0
c0016557:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001655e:	50                   	push   eax
c001655f:	6a 00                	push   0x0
c0016561:	e8 55 d5 fe ff       	call   c0003abb <f_mount>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	b0 00                	mov    al,0x0
c001656b:	eb 17                	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	a1 c0 38 02 c0       	mov    eax,ds:0xc00238c0
c0016575:	40                   	inc    eax
c0016576:	a3 c0 38 02 c0       	mov    ds:0xc00238c0,eax
c001657b:	90                   	nop
c001657c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016583:	90                   	nop
c0016584:	81 c4 4c 03 00 00    	add    esp,0x34c
c001658a:	c3                   	ret    
c001658b:	90                   	nop

c001658c <FAT::allocateSwapfile(char const*, int)>:
c001658c:	55                   	push   ebp
c001658d:	57                   	push   edi
c001658e:	56                   	push   esi
c001658f:	53                   	push   ebx
c0016590:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016596:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00165a1:	83 ec 0c             	sub    esp,0xc
c00165a4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00165ab:	e8 51 12 ff ff       	call   c0007801 <malloc>
c00165b0:	83 c4 10             	add    esp,0x10
c00165b3:	89 c7                	mov    edi,eax
c00165b5:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c00165ba:	83 ec 04             	sub    esp,0x4
c00165bd:	50                   	push   eax
c00165be:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00165c5:	57                   	push   edi
c00165c6:	e8 47 44 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00165d5:	83 ec 04             	sub    esp,0x4
c00165d8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00165dc:	50                   	push   eax
c00165dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165e1:	50                   	push   eax
c00165e2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00165e9:	e8 90 47 ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c00165ee:	83 c4 10             	add    esp,0x10
c00165f1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00165f8:	c1 e0 14             	shl    eax,0x14
c00165fb:	89 c7                	mov    edi,eax
c00165fd:	89 c5                	mov    ebp,eax
c00165ff:	c1 fd 1f             	sar    ebp,0x1f
c0016602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016606:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001660a:	89 f9                	mov    ecx,edi
c001660c:	31 c1                	xor    ecx,eax
c001660e:	89 cb                	mov    ebx,ecx
c0016610:	89 e9                	mov    ecx,ebp
c0016612:	31 d1                	xor    ecx,edx
c0016614:	89 ce                	mov    esi,ecx
c0016616:	89 f0                	mov    eax,esi
c0016618:	09 d8                	or     eax,ebx
c001661a:	0f 84 9c 00 00 00    	je     c00166bc <FAT::allocateSwapfile(char const*, int)+0x130>
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001662a:	e8 1b 46 ff ff       	call   c000ac4a <File::unlink()>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	83 ec 08             	sub    esp,0x8
c0016635:	6a 12                	push   0x12
c0016637:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001663e:	e8 8f 44 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001664d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016653:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001665a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016661:	c1 e0 14             	shl    eax,0x14
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	6a 01                	push   0x1
c0016669:	50                   	push   eax
c001666a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016671:	e8 bf ea fe ff       	call   c0005135 <f_expand>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016680:	8b 00                	mov    eax,DWORD PTR [eax]
c0016682:	83 c0 10             	add    eax,0x10
c0016685:	8b 00                	mov    eax,DWORD PTR [eax]
c0016687:	83 ec 0c             	sub    esp,0xc
c001668a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001668e:	52                   	push   edx
c001668f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016693:	52                   	push   edx
c0016694:	6a 00                	push   0x0
c0016696:	68 00 04 00 00       	push   0x400
c001669b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166a2:	ff d0                	call   eax
c00166a4:	83 c4 20             	add    esp,0x20
c00166a7:	83 ec 0c             	sub    esp,0xc
c00166aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166b1:	e8 7a 44 ff ff       	call   c000ab30 <File::close()>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	83 ec 08             	sub    esp,0x8
c00166bf:	6a 01                	push   0x1
c00166c1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166c8:	e8 05 44 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00166d9:	83 c0 0c             	add    eax,0xc
c00166dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166e5:	52                   	push   edx
c00166e6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00166ea:	52                   	push   edx
c00166eb:	6a 00                	push   0x0
c00166ed:	6a 04                	push   0x4
c00166ef:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166f6:	ff d0                	call   eax
c00166f8:	83 c4 20             	add    esp,0x20
c00166fb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016702:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016708:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001670f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016716:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016719:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016720:	83 ec 0c             	sub    esp,0xc
c0016723:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001672a:	e8 01 44 ff ff       	call   c000ab30 <File::close()>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016739:	ba 00 00 00 00       	mov    edx,0x0
c001673e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016744:	5b                   	pop    ebx
c0016745:	5e                   	pop    esi
c0016746:	5f                   	pop    edi
c0016747:	5d                   	pop    ebp
c0016748:	c3                   	ret    
c0016749:	90                   	nop
c001674a:	66 90                	xchg   ax,ax

c001674c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001674c:	57                   	push   edi
c001674d:	56                   	push   esi
c001674e:	53                   	push   ebx
c001674f:	81 ec 50 02 00 00    	sub    esp,0x250
c0016755:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001675d:	74 0d                	je     c001676c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001675f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016767:	75 0f                	jne    c0016778 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016769:	8d 76 00             	lea    esi,[esi+0x0]
c001676c:	b8 04 00 00 00       	mov    eax,0x4
c0016771:	e9 36 01 00 00       	jmp    c00168ac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016776:	66 90                	xchg   ax,ax
c0016778:	83 ec 08             	sub    esp,0x8
c001677b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016782:	50                   	push   eax
c0016783:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001678a:	e8 04 de fe ff       	call   c0004593 <f_readdir>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016799:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00167aa:	83 c0 16             	add    eax,0x16
c00167ad:	50                   	push   eax
c00167ae:	e8 8d 9d fe ff       	call   c0000540 <strlen>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	ba 00 00 00 00       	mov    edx,0x0
c00167bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167bf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00167c3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00167ca:	25 ff 00 00 00       	and    eax,0xff
c00167cf:	83 e0 10             	and    eax,0x10
c00167d2:	74 08                	je     c00167dc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00167d4:	b8 02 00 00 00       	mov    eax,0x2
c00167d9:	eb 09                	jmp    c00167e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00167db:	90                   	nop
c00167dc:	b8 01 00 00 00       	mov    eax,0x1
c00167e1:	8d 76 00             	lea    esi,[esi+0x0]
c00167e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00167f2:	83 c0 16             	add    eax,0x16
c00167f5:	50                   	push   eax
c00167f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167fa:	83 c0 10             	add    eax,0x10
c00167fd:	50                   	push   eax
c00167fe:	e8 fd 9d fe ff       	call   c0000600 <strcpy>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001680d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016814:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016818:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001681f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016826:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001682d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016834:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001683b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016842:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016849:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016850:	89 c6                	mov    esi,eax
c0016852:	89 d7                	mov    edi,edx
c0016854:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016856:	89 c8                	mov    eax,ecx
c0016858:	89 fa                	mov    edx,edi
c001685a:	89 f3                	mov    ebx,esi
c001685c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016863:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001686a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016871:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016878:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001687e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016885:	84 c0                	test   al,al
c0016887:	75 07                	jne    c0016890 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016889:	b8 07 00 00 00       	mov    eax,0x7
c001688e:	eb 1c                	jmp    c00168ac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016890:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016897:	85 c0                	test   eax,eax
c0016899:	75 09                	jne    c00168a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001689b:	b8 00 00 00 00       	mov    eax,0x0
c00168a0:	eb 0a                	jmp    c00168ac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168a2:	66 90                	xchg   ax,ax
c00168a4:	b8 01 00 00 00       	mov    eax,0x1
c00168a9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ac:	81 c4 50 02 00 00    	add    esp,0x250
c00168b2:	5b                   	pop    ebx
c00168b3:	5e                   	pop    esi
c00168b4:	5f                   	pop    edi
c00168b5:	c3                   	ret    
c00168b6:	66 90                	xchg   ax,ax

c00168b8 <FAT::read(void*, unsigned long, void*, int*)>:
c00168b8:	83 ec 1c             	sub    esp,0x1c
c00168bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00168c0:	74 0a                	je     c00168cc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00168c2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00168c7:	75 0b                	jne    c00168d4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00168c9:	8d 76 00             	lea    esi,[esi+0x0]
c00168cc:	b8 04 00 00 00       	mov    eax,0x4
c00168d1:	eb 41                	jmp    c0016914 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00168d3:	90                   	nop
c00168d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168d8:	50                   	push   eax
c00168d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168e5:	e8 fe d4 fe ff       	call   c0003de8 <f_read>
c00168ea:	83 c4 10             	add    esp,0x10
c00168ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168f5:	89 c2                	mov    edx,eax
c00168f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168fb:	89 10                	mov    DWORD PTR [eax],edx
c00168fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016901:	85 c0                	test   eax,eax
c0016903:	75 07                	jne    c001690c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016905:	b8 00 00 00 00       	mov    eax,0x0
c001690a:	eb 08                	jmp    c0016914 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001690c:	b8 01 00 00 00       	mov    eax,0x1
c0016911:	8d 76 00             	lea    esi,[esi+0x0]
c0016914:	83 c4 1c             	add    esp,0x1c
c0016917:	c3                   	ret    

c0016918 <FAT::write(void*, unsigned long, void*, int*)>:
c0016918:	83 ec 1c             	sub    esp,0x1c
c001691b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016920:	74 0a                	je     c001692c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016922:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016927:	75 0b                	jne    c0016934 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016929:	8d 76 00             	lea    esi,[esi+0x0]
c001692c:	b8 04 00 00 00       	mov    eax,0x4
c0016931:	eb 41                	jmp    c0016974 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016933:	90                   	nop
c0016934:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016938:	50                   	push   eax
c0016939:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001693d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016941:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016945:	e8 9d d6 fe ff       	call   c0003fe7 <f_write>
c001694a:	83 c4 10             	add    esp,0x10
c001694d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016951:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016955:	89 c2                	mov    edx,eax
c0016957:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001695b:	89 10                	mov    DWORD PTR [eax],edx
c001695d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016961:	85 c0                	test   eax,eax
c0016963:	75 07                	jne    c001696c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016965:	b8 00 00 00 00       	mov    eax,0x0
c001696a:	eb 08                	jmp    c0016974 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001696c:	b8 01 00 00 00       	mov    eax,0x1
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 c4 1c             	add    esp,0x1c
c0016977:	c3                   	ret    

c0016978 <FAT::close(void*)>:
c0016978:	83 ec 1c             	sub    esp,0x1c
c001697b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016980:	75 0a                	jne    c001698c <FAT::close(void*)+0x14>
c0016982:	b8 04 00 00 00       	mov    eax,0x4
c0016987:	eb 3f                	jmp    c00169c8 <FAT::close(void*)+0x50>
c0016989:	8d 76 00             	lea    esi,[esi+0x0]
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016993:	e8 38 d9 fe ff       	call   c00042d0 <f_close>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001699f:	83 ec 0c             	sub    esp,0xc
c00169a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169a6:	e8 66 0e ff ff       	call   c0007811 <free>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169b2:	85 c0                	test   eax,eax
c00169b4:	75 0a                	jne    c00169c0 <FAT::close(void*)+0x48>
c00169b6:	b8 00 00 00 00       	mov    eax,0x0
c00169bb:	eb 0b                	jmp    c00169c8 <FAT::close(void*)+0x50>
c00169bd:	8d 76 00             	lea    esi,[esi+0x0]
c00169c0:	b8 01 00 00 00       	mov    eax,0x1
c00169c5:	8d 76 00             	lea    esi,[esi+0x0]
c00169c8:	83 c4 1c             	add    esp,0x1c
c00169cb:	c3                   	ret    

c00169cc <FAT::closeDir(void*)>:
c00169cc:	83 ec 1c             	sub    esp,0x1c
c00169cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169d4:	75 0a                	jne    c00169e0 <FAT::closeDir(void*)+0x14>
c00169d6:	b8 04 00 00 00       	mov    eax,0x4
c00169db:	eb 3f                	jmp    c0016a1c <FAT::closeDir(void*)+0x50>
c00169dd:	8d 76 00             	lea    esi,[esi+0x0]
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169e7:	e8 85 db fe ff       	call   c0004571 <f_closedir>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169f3:	83 ec 0c             	sub    esp,0xc
c00169f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169fa:	e8 12 0e ff ff       	call   c0007811 <free>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a06:	85 c0                	test   eax,eax
c0016a08:	75 0a                	jne    c0016a14 <FAT::closeDir(void*)+0x48>
c0016a0a:	b8 00 00 00 00       	mov    eax,0x0
c0016a0f:	eb 0b                	jmp    c0016a1c <FAT::closeDir(void*)+0x50>
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	b8 01 00 00 00       	mov    eax,0x1
c0016a19:	8d 76 00             	lea    esi,[esi+0x0]
c0016a1c:	83 c4 1c             	add    esp,0x1c
c0016a1f:	c3                   	ret    

c0016a20 <FAT::seek(void*, unsigned long long)>:
c0016a20:	83 ec 2c             	sub    esp,0x2c
c0016a23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a33:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a38:	75 0a                	jne    c0016a44 <FAT::seek(void*, unsigned long long)+0x24>
c0016a3a:	b8 04 00 00 00       	mov    eax,0x4
c0016a3f:	eb 33                	jmp    c0016a74 <FAT::seek(void*, unsigned long long)+0x54>
c0016a41:	8d 76 00             	lea    esi,[esi+0x0]
c0016a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	50                   	push   eax
c0016a4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a50:	e8 aa d8 fe ff       	call   c00042ff <f_lseek>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a60:	85 c0                	test   eax,eax
c0016a62:	75 08                	jne    c0016a6c <FAT::seek(void*, unsigned long long)+0x4c>
c0016a64:	b8 00 00 00 00       	mov    eax,0x0
c0016a69:	eb 09                	jmp    c0016a74 <FAT::seek(void*, unsigned long long)+0x54>
c0016a6b:	90                   	nop
c0016a6c:	b8 01 00 00 00       	mov    eax,0x1
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	83 c4 2c             	add    esp,0x2c
c0016a77:	c3                   	ret    

c0016a78 <fatWrapperReadDisk>:
c0016a78:	53                   	push   ebx
c0016a79:	83 ec 18             	sub    esp,0x18
c0016a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016a88:	25 ff 00 00 00       	and    eax,0xff
c0016a8d:	8b 0c 85 c0 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd540]
c0016a94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a9c:	ba 00 00 00 00       	mov    edx,0x0
c0016aa1:	83 ec 0c             	sub    esp,0xc
c0016aa4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aa8:	53                   	push   ebx
c0016aa9:	52                   	push   edx
c0016aaa:	50                   	push   eax
c0016aab:	51                   	push   ecx
c0016aac:	e8 d3 60 ff ff       	call   c000cb84 <LogicalDisk::read(unsigned long long, int, void*)>
c0016ab1:	83 c4 20             	add    esp,0x20
c0016ab4:	83 c4 18             	add    esp,0x18
c0016ab7:	5b                   	pop    ebx
c0016ab8:	c3                   	ret    
c0016ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0016abc <fatWrapperWriteDisk>:
c0016abc:	53                   	push   ebx
c0016abd:	83 ec 18             	sub    esp,0x18
c0016ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ac8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016acc:	25 ff 00 00 00       	and    eax,0xff
c0016ad1:	8b 0c 85 c0 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd540]
c0016ad8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016adc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ae0:	ba 00 00 00 00       	mov    edx,0x0
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aec:	53                   	push   ebx
c0016aed:	52                   	push   edx
c0016aee:	50                   	push   eax
c0016aef:	51                   	push   ecx
c0016af0:	e8 fb 60 ff ff       	call   c000cbf0 <LogicalDisk::write(unsigned long long, int, void*)>
c0016af5:	83 c4 20             	add    esp,0x20
c0016af8:	83 c4 18             	add    esp,0x18
c0016afb:	5b                   	pop    ebx
c0016afc:	c3                   	ret    
c0016afd:	8d 76 00             	lea    esi,[esi+0x0]

c0016b00 <fatWrapperIoctl>:
c0016b00:	53                   	push   ebx
c0016b01:	83 ec 28             	sub    esp,0x28
c0016b04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b0c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016b10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016b14:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016b19:	75 35                	jne    c0016b50 <fatWrapperIoctl+0x50>
c0016b1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b23:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b27:	25 ff 00 00 00       	and    eax,0xff
c0016b2c:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c0016b33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b43:	66 89 02             	mov    WORD PTR [edx],ax
c0016b46:	b8 00 00 00 00       	mov    eax,0x0
c0016b4b:	e9 c4 00 00 00       	jmp    c0016c14 <fatWrapperIoctl+0x114>
c0016b50:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016b55:	75 75                	jne    c0016bcc <fatWrapperIoctl+0xcc>
c0016b57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b63:	25 ff 00 00 00       	and    eax,0xff
c0016b68:	8b 04 85 c0 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd540]
c0016b6f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b75:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016b7b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016b81:	89 c8                	mov    eax,ecx
c0016b83:	89 da                	mov    edx,ebx
c0016b85:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b89:	c1 e0 0a             	shl    eax,0xa
c0016b8c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b90:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016b96:	8b 0c 8d c0 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd540]
c0016b9d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016ba3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016ba9:	89 cb                	mov    ebx,ecx
c0016bab:	c1 fb 1f             	sar    ebx,0x1f
c0016bae:	53                   	push   ebx
c0016baf:	51                   	push   ecx
c0016bb0:	52                   	push   edx
c0016bb1:	50                   	push   eax
c0016bb2:	e8 99 50 00 00       	call   c001bc50 <__udivdi3>
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	89 c2                	mov    edx,eax
c0016bbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bc0:	89 10                	mov    DWORD PTR [eax],edx
c0016bc2:	b8 00 00 00 00       	mov    eax,0x0
c0016bc7:	eb 4b                	jmp    c0016c14 <fatWrapperIoctl+0x114>
c0016bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bcc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016bd1:	75 09                	jne    c0016bdc <fatWrapperIoctl+0xdc>
c0016bd3:	b8 00 00 00 00       	mov    eax,0x0
c0016bd8:	eb 3a                	jmp    c0016c14 <fatWrapperIoctl+0x114>
c0016bda:	66 90                	xchg   ax,ax
c0016bdc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016be1:	75 19                	jne    c0016bfc <fatWrapperIoctl+0xfc>
c0016be3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016be7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016beb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016bf5:	b8 00 00 00 00       	mov    eax,0x0
c0016bfa:	eb 18                	jmp    c0016c14 <fatWrapperIoctl+0x114>
c0016bfc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c01:	75 09                	jne    c0016c0c <fatWrapperIoctl+0x10c>
c0016c03:	b8 00 00 00 00       	mov    eax,0x0
c0016c08:	eb 0a                	jmp    c0016c14 <fatWrapperIoctl+0x114>
c0016c0a:	66 90                	xchg   ax,ax
c0016c0c:	b8 04 00 00 00       	mov    eax,0x4
c0016c11:	8d 76 00             	lea    esi,[esi+0x0]
c0016c14:	83 c4 28             	add    esp,0x28
c0016c17:	5b                   	pop    ebx
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop
c0016c1a:	66 90                	xchg   ax,ax

c0016c1c <FAT::FAT()>:
c0016c1c:	83 ec 1c             	sub    esp,0x1c
c0016c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	50                   	push   eax
c0016c27:	e8 92 3b ff ff       	call   c000a7be <Filesystem::Filesystem()>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c0016c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c38:	89 10                	mov    DWORD PTR [eax],edx
c0016c3a:	c7 05 c0 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238c0,0x0
c0016c44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c4c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c51:	7f 15                	jg     c0016c68 <FAT::FAT()+0x4c>
c0016c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c57:	c7 04 85 e0 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc720],0xffffffff
c0016c62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016c66:	eb e4                	jmp    c0016c4c <FAT::FAT()+0x30>
c0016c68:	90                   	nop
c0016c69:	83 c4 1c             	add    esp,0x1c
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop
c0016c6e:	66 90                	xchg   ax,ax

c0016c70 <FAT::fixFilepath(char*)>:
c0016c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c74:	8a 00                	mov    al,BYTE PTR [eax]
c0016c76:	3c 40                	cmp    al,0x40
c0016c78:	7e 2e                	jle    c0016ca8 <FAT::fixFilepath(char*)+0x38>
c0016c7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c7e:	8a 00                	mov    al,BYTE PTR [eax]
c0016c80:	83 e8 41             	sub    eax,0x41
c0016c83:	88 c2                	mov    dl,al
c0016c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c89:	88 10                	mov    BYTE PTR [eax],dl
c0016c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c8f:	8a 00                	mov    al,BYTE PTR [eax]
c0016c91:	0f be c0             	movsx  eax,al
c0016c94:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c0016c9b:	83 c0 30             	add    eax,0x30
c0016c9e:	88 c2                	mov    dl,al
c0016ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ca4:	88 10                	mov    BYTE PTR [eax],dl
c0016ca6:	66 90                	xchg   ax,ax
c0016ca8:	90                   	nop
c0016ca9:	c3                   	ret    
c0016caa:	66 90                	xchg   ax,ax

c0016cac <FAT::open(char const*, void**, FileOpenMode)>:
c0016cac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016cb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016cba:	74 0c                	je     c0016cc8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016cbc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016cc4:	75 0e                	jne    c0016cd4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016cc6:	66 90                	xchg   ax,ax
c0016cc8:	b8 04 00 00 00       	mov    eax,0x4
c0016ccd:	e9 0a 01 00 00       	jmp    c0016ddc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016cd2:	66 90                	xchg   ax,ax
c0016cd4:	83 ec 08             	sub    esp,0x8
c0016cd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ce2:	50                   	push   eax
c0016ce3:	e8 18 99 fe ff       	call   c0000600 <strcpy>
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	83 ec 08             	sub    esp,0x8
c0016cee:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cf2:	50                   	push   eax
c0016cf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cfa:	e8 71 ff ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d0a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d11:	83 e0 01             	and    eax,0x1
c0016d14:	74 0a                	je     c0016d20 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016d16:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016d1e:	66 90                	xchg   ax,ax
c0016d20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d27:	83 e0 04             	and    eax,0x4
c0016d2a:	74 10                	je     c0016d3c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016d2c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016d34:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d43:	83 e0 02             	and    eax,0x2
c0016d46:	74 08                	je     c0016d50 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d48:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d57:	83 e0 08             	and    eax,0x8
c0016d5a:	74 08                	je     c0016d64 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016d5c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016d64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d6b:	83 e0 10             	and    eax,0x10
c0016d6e:	74 08                	je     c0016d78 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016d70:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	68 28 02 00 00       	push   0x228
c0016d80:	e8 7c 0a ff ff       	call   c0007801 <malloc>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	89 c2                	mov    edx,eax
c0016d8a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016d91:	89 10                	mov    DWORD PTR [eax],edx
c0016d93:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016d9a:	31 d2                	xor    edx,edx
c0016d9c:	88 c2                	mov    dl,al
c0016d9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016da7:	83 ec 04             	sub    esp,0x4
c0016daa:	52                   	push   edx
c0016dab:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016daf:	52                   	push   edx
c0016db0:	50                   	push   eax
c0016db1:	e8 67 cd fe ff       	call   c0003b1d <f_open>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016dc0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016dc8:	74 0a                	je     c0016dd4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016dca:	b8 01 00 00 00       	mov    eax,0x1
c0016dcf:	eb 0b                	jmp    c0016ddc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd4:	b8 00 00 00 00       	mov    eax,0x0
c0016dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ddc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016de2:	c3                   	ret    
c0016de3:	90                   	nop

c0016de4 <FAT::openDir(char const*, void**)>:
c0016de4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016dea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016df2:	74 0c                	je     c0016e00 <FAT::openDir(char const*, void**)+0x1c>
c0016df4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016dfc:	75 0e                	jne    c0016e0c <FAT::openDir(char const*, void**)+0x28>
c0016dfe:	66 90                	xchg   ax,ax
c0016e00:	b8 04 00 00 00       	mov    eax,0x4
c0016e05:	e9 82 00 00 00       	jmp    c0016e8c <FAT::openDir(char const*, void**)+0xa8>
c0016e0a:	66 90                	xchg   ax,ax
c0016e0c:	83 ec 08             	sub    esp,0x8
c0016e0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e1a:	50                   	push   eax
c0016e1b:	e8 e0 97 fe ff       	call   c0000600 <strcpy>
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	83 ec 08             	sub    esp,0x8
c0016e26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e2a:	50                   	push   eax
c0016e2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e32:	e8 39 fe ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0016e37:	83 c4 10             	add    esp,0x10
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	6a 30                	push   0x30
c0016e3f:	e8 bd 09 ff ff       	call   c0007801 <malloc>
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	89 c2                	mov    edx,eax
c0016e49:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e50:	89 10                	mov    DWORD PTR [eax],edx
c0016e52:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e5b:	83 ec 08             	sub    esp,0x8
c0016e5e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016e62:	52                   	push   edx
c0016e63:	50                   	push   eax
c0016e64:	e8 3d d6 fe ff       	call   c00044a6 <f_opendir>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016e73:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016e7b:	74 07                	je     c0016e84 <FAT::openDir(char const*, void**)+0xa0>
c0016e7d:	b8 01 00 00 00       	mov    eax,0x1
c0016e82:	eb 08                	jmp    c0016e8c <FAT::openDir(char const*, void**)+0xa8>
c0016e84:	b8 00 00 00 00       	mov    eax,0x0
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]
c0016e8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e92:	c3                   	ret    
c0016e93:	90                   	nop

c0016e94 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016e94:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016e9a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016ea2:	75 0c                	jne    c0016eb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016ea4:	b8 04 00 00 00       	mov    eax,0x4
c0016ea9:	e9 d6 00 00 00       	jmp    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016eae:	66 90                	xchg   ax,ax
c0016eb0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016eb8:	75 0a                	jne    c0016ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016eba:	b8 04 00 00 00       	mov    eax,0x4
c0016ebf:	e9 c0 00 00 00       	jmp    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ec4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016ecc:	75 0a                	jne    c0016ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016ece:	b8 04 00 00 00       	mov    eax,0x4
c0016ed3:	e9 ac 00 00 00       	jmp    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ed8:	83 ec 08             	sub    esp,0x8
c0016edb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016ee2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016ee9:	50                   	push   eax
c0016eea:	e8 11 97 fe ff       	call   c0000600 <strcpy>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	83 ec 08             	sub    esp,0x8
c0016ef5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016efc:	50                   	push   eax
c0016efd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f04:	e8 67 fd ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	83 ec 08             	sub    esp,0x8
c0016f0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f13:	50                   	push   eax
c0016f14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f1b:	50                   	push   eax
c0016f1c:	e8 04 d7 fe ff       	call   c0004625 <f_stat>
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016f2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016f32:	85 c0                	test   eax,eax
c0016f34:	74 0a                	je     c0016f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016f36:	83 f8 04             	cmp    eax,0x4
c0016f39:	74 39                	je     c0016f74 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f3b:	eb 3f                	jmp    c0016f7c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f44:	25 ff 00 00 00       	and    eax,0xff
c0016f49:	83 e0 10             	and    eax,0x10
c0016f4c:	0f 95 c2             	setne  dl
c0016f4f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016f56:	88 10                	mov    BYTE PTR [eax],dl
c0016f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f5c:	ba 00 00 00 00       	mov    edx,0x0
c0016f61:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016f68:	89 01                	mov    DWORD PTR [ecx],eax
c0016f6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f6d:	b8 00 00 00 00       	mov    eax,0x0
c0016f72:	eb 10                	jmp    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f74:	b8 02 00 00 00       	mov    eax,0x2
c0016f79:	eb 09                	jmp    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f7b:	90                   	nop
c0016f7c:	b8 01 00 00 00       	mov    eax,0x1
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]
c0016f84:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016f8a:	c3                   	ret    
c0016f8b:	90                   	nop

c0016f8c <FAT::unlink(char const*)>:
c0016f8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016f9a:	75 08                	jne    c0016fa4 <FAT::unlink(char const*)+0x18>
c0016f9c:	b8 04 00 00 00       	mov    eax,0x4
c0016fa1:	eb 61                	jmp    c0017004 <FAT::unlink(char const*)+0x78>
c0016fa3:	90                   	nop
c0016fa4:	83 ec 08             	sub    esp,0x8
c0016fa7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fb2:	50                   	push   eax
c0016fb3:	e8 48 96 fe ff       	call   c0000600 <strcpy>
c0016fb8:	83 c4 10             	add    esp,0x10
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016fc2:	50                   	push   eax
c0016fc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fca:	e8 a1 fc ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fd9:	50                   	push   eax
c0016fda:	e8 ab d8 fe ff       	call   c000488a <f_unlink>
c0016fdf:	83 c4 10             	add    esp,0x10
c0016fe2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016fe9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016ff0:	85 c0                	test   eax,eax
c0016ff2:	75 08                	jne    c0016ffc <FAT::unlink(char const*)+0x70>
c0016ff4:	b8 00 00 00 00       	mov    eax,0x0
c0016ff9:	eb 09                	jmp    c0017004 <FAT::unlink(char const*)+0x78>
c0016ffb:	90                   	nop
c0016ffc:	b8 01 00 00 00       	mov    eax,0x1
c0017001:	8d 76 00             	lea    esi,[esi+0x0]
c0017004:	81 c4 1c 01 00 00    	add    esp,0x11c
c001700a:	c3                   	ret    
c001700b:	90                   	nop

c001700c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001700c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017012:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017019:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017020:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017024:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017028:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017030:	75 0a                	jne    c001703c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017032:	b8 04 00 00 00       	mov    eax,0x4
c0017037:	e9 54 01 00 00       	jmp    c0017190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001703c:	83 ec 08             	sub    esp,0x8
c001703f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017046:	8d 44 24 24          	lea    eax,[esp+0x24]
c001704a:	50                   	push   eax
c001704b:	e8 b0 95 fe ff       	call   c0000600 <strcpy>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	83 ec 08             	sub    esp,0x8
c0017056:	8d 44 24 20          	lea    eax,[esp+0x20]
c001705a:	50                   	push   eax
c001705b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017062:	e8 09 fc ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017072:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001707a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001707e:	25 ff 00 00 00       	and    eax,0xff
c0017083:	83 e0 01             	and    eax,0x1
c0017086:	74 08                	je     c0017090 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017088:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017090:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017094:	25 ff 00 00 00       	and    eax,0xff
c0017099:	83 e0 02             	and    eax,0x2
c001709c:	74 0a                	je     c00170a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001709e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00170a6:	66 90                	xchg   ax,ax
c00170a8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170ac:	25 ff 00 00 00       	and    eax,0xff
c00170b1:	83 e0 04             	and    eax,0x4
c00170b4:	74 0a                	je     c00170c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00170b6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00170be:	66 90                	xchg   ax,ax
c00170c0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170c4:	25 ff 00 00 00       	and    eax,0xff
c00170c9:	83 e0 08             	and    eax,0x8
c00170cc:	74 0a                	je     c00170d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00170ce:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00170d6:	66 90                	xchg   ax,ax
c00170d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170dc:	25 ff 00 00 00       	and    eax,0xff
c00170e1:	83 e0 01             	and    eax,0x1
c00170e4:	74 0a                	je     c00170f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00170e6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00170ee:	66 90                	xchg   ax,ax
c00170f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f4:	25 ff 00 00 00       	and    eax,0xff
c00170f9:	83 e0 02             	and    eax,0x2
c00170fc:	74 0a                	je     c0017108 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00170fe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017106:	66 90                	xchg   ax,ax
c0017108:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001710c:	25 ff 00 00 00       	and    eax,0xff
c0017111:	83 e0 04             	and    eax,0x4
c0017114:	74 0a                	je     c0017120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017116:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001711e:	66 90                	xchg   ax,ax
c0017120:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017124:	25 ff 00 00 00       	and    eax,0xff
c0017129:	83 e0 08             	and    eax,0x8
c001712c:	74 0a                	je     c0017138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001712e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017136:	66 90                	xchg   ax,ax
c0017138:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001713f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017146:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001714d:	31 d2                	xor    edx,edx
c001714f:	88 c2                	mov    dl,al
c0017151:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017158:	25 ff 00 00 00       	and    eax,0xff
c001715d:	83 ec 04             	sub    esp,0x4
c0017160:	52                   	push   edx
c0017161:	50                   	push   eax
c0017162:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017166:	50                   	push   eax
c0017167:	e8 91 db fe ff       	call   c0004cfd <f_chmod>
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017176:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001717d:	85 c0                	test   eax,eax
c001717f:	75 07                	jne    c0017188 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017181:	b8 00 00 00 00       	mov    eax,0x0
c0017186:	eb 08                	jmp    c0017190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017188:	b8 01 00 00 00       	mov    eax,0x1
c001718d:	8d 76 00             	lea    esi,[esi+0x0]
c0017190:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017196:	c3                   	ret    
c0017197:	90                   	nop

c0017198 <FAT::rename(char const*, char const*)>:
c0017198:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001719e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00171a6:	74 0c                	je     c00171b4 <FAT::rename(char const*, char const*)+0x1c>
c00171a8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00171b0:	75 0e                	jne    c00171c0 <FAT::rename(char const*, char const*)+0x28>
c00171b2:	66 90                	xchg   ax,ax
c00171b4:	b8 04 00 00 00       	mov    eax,0x4
c00171b9:	e9 9e 00 00 00       	jmp    c001725c <FAT::rename(char const*, char const*)+0xc4>
c00171be:	66 90                	xchg   ax,ax
c00171c0:	83 ec 08             	sub    esp,0x8
c00171c3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00171d1:	50                   	push   eax
c00171d2:	e8 29 94 fe ff       	call   c0000600 <strcpy>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	83 ec 08             	sub    esp,0x8
c00171dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00171e4:	50                   	push   eax
c00171e5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171ec:	e8 7f fa ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c00171f1:	83 c4 10             	add    esp,0x10
c00171f4:	83 ec 08             	sub    esp,0x8
c00171f7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00171fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017202:	50                   	push   eax
c0017203:	e8 f8 93 fe ff       	call   c0000600 <strcpy>
c0017208:	83 c4 10             	add    esp,0x10
c001720b:	83 ec 08             	sub    esp,0x8
c001720e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017212:	50                   	push   eax
c0017213:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001721a:	e8 51 fa ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	83 ec 08             	sub    esp,0x8
c0017225:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017229:	50                   	push   eax
c001722a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017231:	50                   	push   eax
c0017232:	e8 10 d9 fe ff       	call   c0004b47 <f_rename>
c0017237:	83 c4 10             	add    esp,0x10
c001723a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017241:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017248:	85 c0                	test   eax,eax
c001724a:	75 08                	jne    c0017254 <FAT::rename(char const*, char const*)+0xbc>
c001724c:	b8 00 00 00 00       	mov    eax,0x0
c0017251:	eb 09                	jmp    c001725c <FAT::rename(char const*, char const*)+0xc4>
c0017253:	90                   	nop
c0017254:	b8 01 00 00 00       	mov    eax,0x1
c0017259:	8d 76 00             	lea    esi,[esi+0x0]
c001725c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017262:	c3                   	ret    
c0017263:	90                   	nop

c0017264 <FAT::mkdir(char const*)>:
c0017264:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001726a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017272:	75 08                	jne    c001727c <FAT::mkdir(char const*)+0x18>
c0017274:	b8 04 00 00 00       	mov    eax,0x4
c0017279:	eb 61                	jmp    c00172dc <FAT::mkdir(char const*)+0x78>
c001727b:	90                   	nop
c001727c:	83 ec 08             	sub    esp,0x8
c001727f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017286:	8d 44 24 18          	lea    eax,[esp+0x18]
c001728a:	50                   	push   eax
c001728b:	e8 70 93 fe ff       	call   c0000600 <strcpy>
c0017290:	83 c4 10             	add    esp,0x10
c0017293:	83 ec 08             	sub    esp,0x8
c0017296:	8d 44 24 14          	lea    eax,[esp+0x14]
c001729a:	50                   	push   eax
c001729b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172a2:	e8 c9 f9 ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c00172a7:	83 c4 10             	add    esp,0x10
c00172aa:	83 ec 0c             	sub    esp,0xc
c00172ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172b1:	50                   	push   eax
c00172b2:	e8 f5 d6 fe ff       	call   c00049ac <f_mkdir>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00172c1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00172c8:	85 c0                	test   eax,eax
c00172ca:	75 08                	jne    c00172d4 <FAT::mkdir(char const*)+0x70>
c00172cc:	b8 00 00 00 00       	mov    eax,0x0
c00172d1:	eb 09                	jmp    c00172dc <FAT::mkdir(char const*)+0x78>
c00172d3:	90                   	nop
c00172d4:	b8 01 00 00 00       	mov    eax,0x1
c00172d9:	8d 76 00             	lea    esi,[esi+0x0]
c00172dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172e2:	c3                   	ret    
c00172e3:	90                   	nop

c00172e4 <FAT::exists(char const*)>:
c00172e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00172ea:	83 ec 08             	sub    esp,0x8
c00172ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00172f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172f8:	50                   	push   eax
c00172f9:	e8 02 93 fe ff       	call   c0000600 <strcpy>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	83 ec 08             	sub    esp,0x8
c0017304:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017308:	50                   	push   eax
c0017309:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017310:	e8 5b f9 ff ff       	call   c0016c70 <FAT::fixFilepath(char*)>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	83 ec 08             	sub    esp,0x8
c001731b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017322:	50                   	push   eax
c0017323:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017327:	50                   	push   eax
c0017328:	e8 f8 d2 fe ff       	call   c0004625 <f_stat>
c001732d:	83 c4 10             	add    esp,0x10
c0017330:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017337:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001733e:	85 c0                	test   eax,eax
c0017340:	75 06                	jne    c0017348 <FAT::exists(char const*)+0x64>
c0017342:	b0 01                	mov    al,0x1
c0017344:	eb 06                	jmp    c001734c <FAT::exists(char const*)+0x68>
c0017346:	66 90                	xchg   ax,ax
c0017348:	b0 00                	mov    al,0x0
c001734a:	66 90                	xchg   ax,ax
c001734c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017352:	c3                   	ret    
c0017353:	90                   	nop

c0017354 <isoReadDiscSectorHelper>:
c0017354:	83 ec 2c             	sub    esp,0x2c
c0017357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001735b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001735f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017364:	83 e8 41             	sub    eax,0x41
c0017367:	8b 0c 85 c0 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd540]
c001736e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017372:	ba 00 00 00 00       	mov    edx,0x0
c0017377:	83 ec 0c             	sub    esp,0xc
c001737a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001737e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017382:	52                   	push   edx
c0017383:	50                   	push   eax
c0017384:	51                   	push   ecx
c0017385:	e8 fa 57 ff ff       	call   c000cb84 <LogicalDisk::read(unsigned long long, int, void*)>
c001738a:	83 c4 20             	add    esp,0x20
c001738d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017391:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017396:	74 0c                	je     c00173a4 <isoReadDiscSectorHelper+0x50>
c0017398:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001739c:	c1 e0 0b             	shl    eax,0xb
c001739f:	eb 0b                	jmp    c00173ac <isoReadDiscSectorHelper+0x58>
c00173a1:	8d 76 00             	lea    esi,[esi+0x0]
c00173a4:	b8 00 00 00 00       	mov    eax,0x0
c00173a9:	8d 76 00             	lea    esi,[esi+0x0]
c00173ac:	83 c4 2c             	add    esp,0x2c
c00173af:	c3                   	ret    

c00173b0 <iso_kprintf>:
c00173b0:	83 ec 0c             	sub    esp,0xc
c00173b3:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c00173b8:	83 ec 08             	sub    esp,0x8
c00173bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173bf:	50                   	push   eax
c00173c0:	e8 b9 13 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00173c5:	83 c4 10             	add    esp,0x10
c00173c8:	90                   	nop
c00173c9:	83 c4 0c             	add    esp,0xc
c00173cc:	c3                   	ret    
c00173cd:	8d 76 00             	lea    esi,[esi+0x0]

c00173d0 <iso_kprintfd>:
c00173d0:	83 ec 0c             	sub    esp,0xc
c00173d3:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c00173d8:	83 ec 08             	sub    esp,0x8
c00173db:	68 9c ea 01 c0       	push   0xc001ea9c
c00173e0:	50                   	push   eax
c00173e1:	e8 98 13 ff ff       	call   c000877e <VgaText::puts(char const*)>
c00173e6:	83 c4 10             	add    esp,0x10
c00173e9:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c00173ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173f2:	83 ec 08             	sub    esp,0x8
c00173f5:	52                   	push   edx
c00173f6:	50                   	push   eax
c00173f7:	e8 3c 13 ff ff       	call   c0008738 <VgaText::putx(unsigned int)>
c00173fc:	83 c4 10             	add    esp,0x10
c00173ff:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c0017404:	83 ec 08             	sub    esp,0x8
c0017407:	68 1d e9 01 c0       	push   0xc001e91d
c001740c:	50                   	push   eax
c001740d:	e8 6c 13 ff ff       	call   c000877e <VgaText::puts(char const*)>
c0017412:	83 c4 10             	add    esp,0x10
c0017415:	90                   	nop
c0017416:	83 c4 0c             	add    esp,0xc
c0017419:	c3                   	ret    

c001741a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001741a:	b8 08 00 00 00       	mov    eax,0x8
c001741f:	c3                   	ret    

c0017420 <ISO9660::getName()>:
c0017420:	b8 9f ea 01 c0       	mov    eax,0xc001ea9f
c0017425:	c3                   	ret    

c0017426 <ISO9660::closeDir(void*)>:
c0017426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001742a:	8b 00                	mov    eax,DWORD PTR [eax]
c001742c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001742f:	90                   	nop

c0017430 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017430:	b8 01 00 00 00       	mov    eax,0x1
c0017435:	c3                   	ret    

c0017436 <ISO9660::unlink(char const*)>:
c0017436:	b8 01 00 00 00       	mov    eax,0x1
c001743b:	c3                   	ret    

c001743c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001743c:	b8 03 00 00 00       	mov    eax,0x3
c0017441:	c3                   	ret    

c0017442 <ISO9660::rename(char const*, char const*)>:
c0017442:	b8 01 00 00 00       	mov    eax,0x1
c0017447:	c3                   	ret    

c0017448 <ISO9660::mkdir(char const*)>:
c0017448:	b8 01 00 00 00       	mov    eax,0x1
c001744d:	c3                   	ret    

c001744e <ISO9660::~ISO9660()>:
c001744e:	83 ec 0c             	sub    esp,0xc
c0017451:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c0017456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001745a:	89 10                	mov    DWORD PTR [eax],edx
c001745c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	50                   	push   eax
c0017464:	e8 79 33 ff ff       	call   c000a7e2 <Filesystem::~Filesystem()>
c0017469:	83 c4 10             	add    esp,0x10
c001746c:	90                   	nop
c001746d:	83 c4 0c             	add    esp,0xc
c0017470:	c3                   	ret    
c0017471:	90                   	nop

c0017472 <ISO9660::~ISO9660()>:
c0017472:	83 ec 0c             	sub    esp,0xc
c0017475:	83 ec 0c             	sub    esp,0xc
c0017478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747c:	e8 cd ff ff ff       	call   c001744e <ISO9660::~ISO9660()>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	6a 08                	push   0x8
c0017489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001748d:	e8 14 2f ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	83 c4 0c             	add    esp,0xc
c0017498:	c3                   	ret    
c0017499:	90                   	nop

c001749a <ISO9660::exists(char const*)>:
c001749a:	83 ec 18             	sub    esp,0x18
c001749d:	68 ba ea 01 c0       	push   0xc001eaba
c00174a2:	e8 58 8c ff ff       	call   c00100ff <KePanic(char const*)>
c00174a7:	31 c0                	xor    eax,eax
c00174a9:	83 c4 1c             	add    esp,0x1c
c00174ac:	c3                   	ret    
c00174ad:	90                   	nop

c00174ae <ISO9660::open(char const*, void**, FileOpenMode)>:
c00174ae:	56                   	push   esi
c00174af:	53                   	push   ebx
c00174b0:	53                   	push   ebx
c00174b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00174b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00174b9:	85 db                	test   ebx,ebx
c00174bb:	74 72                	je     c001752f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c00174bd:	85 f6                	test   esi,esi
c00174bf:	74 6e                	je     c001752f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c00174c1:	ba 03 00 00 00       	mov    edx,0x3
c00174c6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00174cb:	75 67                	jne    c0017534 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c00174cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00174d0:	3a 05 c0 39 02 c0    	cmp    al,BYTE PTR ds:0xc00239c0
c00174d6:	74 34                	je     c001750c <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c00174d8:	83 ec 0c             	sub    esp,0xc
c00174db:	50                   	push   eax
c00174dc:	e8 de f2 fe ff       	call   c00067bf <init_percd>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	ba 0b 00 00 00       	mov    edx,0xb
c00174e9:	40                   	inc    eax
c00174ea:	74 48                	je     c0017534 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c00174ec:	80 3d c0 39 02 c0 00 	cmp    BYTE PTR ds:0xc00239c0,0x0
c00174f3:	74 10                	je     c0017505 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00174f5:	83 ec 0c             	sub    esp,0xc
c00174f8:	68 d8 ea 01 c0       	push   0xc001ead8
c00174fd:	e8 fd 8b ff ff       	call   c00100ff <KePanic(char const*)>
c0017502:	83 c4 10             	add    esp,0x10
c0017505:	8a 03                	mov    al,BYTE PTR [ebx]
c0017507:	a2 c0 39 02 c0       	mov    ds:0xc00239c0,al
c001750c:	83 c3 03             	add    ebx,0x3
c001750f:	51                   	push   ecx
c0017510:	51                   	push   ecx
c0017511:	6a 00                	push   0x0
c0017513:	53                   	push   ebx
c0017514:	e8 e4 ed fe ff       	call   c00062fd <iso_open>
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	ba 01 00 00 00       	mov    edx,0x1
c0017521:	83 f8 ff             	cmp    eax,0xffffffff
c0017524:	74 0e                	je     c0017534 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017526:	83 c0 64             	add    eax,0x64
c0017529:	31 d2                	xor    edx,edx
c001752b:	89 06                	mov    DWORD PTR [esi],eax
c001752d:	eb 05                	jmp    c0017534 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c001752f:	ba 04 00 00 00       	mov    edx,0x4
c0017534:	89 d0                	mov    eax,edx
c0017536:	5a                   	pop    edx
c0017537:	5b                   	pop    ebx
c0017538:	5e                   	pop    esi
c0017539:	c3                   	ret    

c001753a <ISO9660::openDir(char const*, void**)>:
c001753a:	56                   	push   esi
c001753b:	53                   	push   ebx
c001753c:	53                   	push   ebx
c001753d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017541:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017545:	85 db                	test   ebx,ebx
c0017547:	74 66                	je     c00175af <ISO9660::openDir(char const*, void**)+0x75>
c0017549:	85 f6                	test   esi,esi
c001754b:	74 62                	je     c00175af <ISO9660::openDir(char const*, void**)+0x75>
c001754d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017550:	3a 05 c0 39 02 c0    	cmp    al,BYTE PTR ds:0xc00239c0
c0017556:	74 34                	je     c001758c <ISO9660::openDir(char const*, void**)+0x52>
c0017558:	83 ec 0c             	sub    esp,0xc
c001755b:	50                   	push   eax
c001755c:	e8 5e f2 fe ff       	call   c00067bf <init_percd>
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	ba 0b 00 00 00       	mov    edx,0xb
c0017569:	40                   	inc    eax
c001756a:	74 48                	je     c00175b4 <ISO9660::openDir(char const*, void**)+0x7a>
c001756c:	80 3d c0 39 02 c0 00 	cmp    BYTE PTR ds:0xc00239c0,0x0
c0017573:	74 10                	je     c0017585 <ISO9660::openDir(char const*, void**)+0x4b>
c0017575:	83 ec 0c             	sub    esp,0xc
c0017578:	68 d8 ea 01 c0       	push   0xc001ead8
c001757d:	e8 7d 8b ff ff       	call   c00100ff <KePanic(char const*)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	8a 03                	mov    al,BYTE PTR [ebx]
c0017587:	a2 c0 39 02 c0       	mov    ds:0xc00239c0,al
c001758c:	83 c3 03             	add    ebx,0x3
c001758f:	51                   	push   ecx
c0017590:	51                   	push   ecx
c0017591:	6a 01                	push   0x1
c0017593:	53                   	push   ebx
c0017594:	e8 64 ed fe ff       	call   c00062fd <iso_open>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	ba 01 00 00 00       	mov    edx,0x1
c00175a1:	83 f8 ff             	cmp    eax,0xffffffff
c00175a4:	74 0e                	je     c00175b4 <ISO9660::openDir(char const*, void**)+0x7a>
c00175a6:	83 c0 64             	add    eax,0x64
c00175a9:	31 d2                	xor    edx,edx
c00175ab:	89 06                	mov    DWORD PTR [esi],eax
c00175ad:	eb 05                	jmp    c00175b4 <ISO9660::openDir(char const*, void**)+0x7a>
c00175af:	ba 04 00 00 00       	mov    edx,0x4
c00175b4:	89 d0                	mov    eax,edx
c00175b6:	5a                   	pop    edx
c00175b7:	5b                   	pop    ebx
c00175b8:	5e                   	pop    esi
c00175b9:	c3                   	ret    

c00175ba <ISO9660::read(void*, unsigned long, void*, int*)>:
c00175ba:	53                   	push   ebx
c00175bb:	83 ec 08             	sub    esp,0x8
c00175be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175c6:	85 c0                	test   eax,eax
c00175c8:	74 25                	je     c00175ef <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175ca:	85 db                	test   ebx,ebx
c00175cc:	74 21                	je     c00175ef <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175ce:	83 e8 64             	sub    eax,0x64
c00175d1:	52                   	push   edx
c00175d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175da:	50                   	push   eax
c00175db:	e8 c5 ed fe ff       	call   c00063a5 <iso_read>
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	89 03                	mov    DWORD PTR [ebx],eax
c00175e5:	09 d0                	or     eax,edx
c00175e7:	0f 94 c0             	sete   al
c00175ea:	0f b6 c0             	movzx  eax,al
c00175ed:	eb 05                	jmp    c00175f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00175ef:	b8 04 00 00 00       	mov    eax,0x4
c00175f4:	83 c4 08             	add    esp,0x8
c00175f7:	5b                   	pop    ebx
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <ISO9660::seek(void*, unsigned long long)>:
c00175fa:	57                   	push   edi
c00175fb:	56                   	push   esi
c00175fc:	b8 04 00 00 00       	mov    eax,0x4
c0017601:	51                   	push   ecx
c0017602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017606:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001760a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001760e:	85 d2                	test   edx,edx
c0017610:	74 1c                	je     c001762e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017612:	6a 00                	push   0x0
c0017614:	83 ea 64             	sub    edx,0x64
c0017617:	57                   	push   edi
c0017618:	56                   	push   esi
c0017619:	52                   	push   edx
c001761a:	e8 9c ee fe ff       	call   c00064bb <iso_seek>
c001761f:	83 c4 10             	add    esp,0x10
c0017622:	31 f0                	xor    eax,esi
c0017624:	31 fa                	xor    edx,edi
c0017626:	09 d0                	or     eax,edx
c0017628:	0f 95 c0             	setne  al
c001762b:	0f b6 c0             	movzx  eax,al
c001762e:	5a                   	pop    edx
c001762f:	5e                   	pop    esi
c0017630:	5f                   	pop    edi
c0017631:	c3                   	ret    

c0017632 <ISO9660::tell(void*, unsigned long long*)>:
c0017632:	53                   	push   ebx
c0017633:	83 ec 08             	sub    esp,0x8
c0017636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001763a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001763e:	85 c0                	test   eax,eax
c0017640:	74 1c                	je     c001765e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017642:	85 db                	test   ebx,ebx
c0017644:	74 18                	je     c001765e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017646:	83 ec 0c             	sub    esp,0xc
c0017649:	83 e8 64             	sub    eax,0x64
c001764c:	50                   	push   eax
c001764d:	e8 ed ee fe ff       	call   c000653f <iso_tell>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	89 03                	mov    DWORD PTR [ebx],eax
c0017657:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001765a:	31 c0                	xor    eax,eax
c001765c:	eb 05                	jmp    c0017663 <ISO9660::tell(void*, unsigned long long*)+0x31>
c001765e:	b8 04 00 00 00       	mov    eax,0x4
c0017663:	83 c4 08             	add    esp,0x8
c0017666:	5b                   	pop    ebx
c0017667:	c3                   	ret    

c0017668 <ISO9660::stat(void*, unsigned long long*)>:
c0017668:	53                   	push   ebx
c0017669:	83 ec 08             	sub    esp,0x8
c001766c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017670:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017674:	85 c0                	test   eax,eax
c0017676:	74 20                	je     c0017698 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017678:	85 db                	test   ebx,ebx
c001767a:	74 1c                	je     c0017698 <ISO9660::stat(void*, unsigned long long*)+0x30>
c001767c:	83 ec 0c             	sub    esp,0xc
c001767f:	83 e8 64             	sub    eax,0x64
c0017682:	50                   	push   eax
c0017683:	e8 e8 ee fe ff       	call   c0006570 <iso_total>
c0017688:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001768f:	89 03                	mov    DWORD PTR [ebx],eax
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	31 c0                	xor    eax,eax
c0017696:	eb 05                	jmp    c001769d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017698:	b8 04 00 00 00       	mov    eax,0x4
c001769d:	83 c4 08             	add    esp,0x8
c00176a0:	5b                   	pop    ebx
c00176a1:	c3                   	ret    

c00176a2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00176a2:	55                   	push   ebp
c00176a3:	57                   	push   edi
c00176a4:	56                   	push   esi
c00176a5:	53                   	push   ebx
c00176a6:	83 ec 0c             	sub    esp,0xc
c00176a9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00176ad:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00176b1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00176b5:	85 ff                	test   edi,edi
c00176b7:	0f 94 c2             	sete   dl
c00176ba:	85 f6                	test   esi,esi
c00176bc:	0f 94 c0             	sete   al
c00176bf:	08 c2                	or     dl,al
c00176c1:	0f 85 b7 00 00 00    	jne    c001777e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c00176c7:	85 db                	test   ebx,ebx
c00176c9:	0f 84 af 00 00 00    	je     c001777e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c00176cf:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00176d2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00176d8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00176df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00176e2:	3a 05 c0 39 02 c0    	cmp    al,BYTE PTR ds:0xc00239c0
c00176e8:	74 38                	je     c0017722 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	50                   	push   eax
c00176ee:	e8 cc f0 fe ff       	call   c00067bf <init_percd>
c00176f3:	83 c4 10             	add    esp,0x10
c00176f6:	ba 0b 00 00 00       	mov    edx,0xb
c00176fb:	40                   	inc    eax
c00176fc:	0f 84 81 00 00 00    	je     c0017783 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017702:	80 3d c0 39 02 c0 00 	cmp    BYTE PTR ds:0xc00239c0,0x0
c0017709:	74 10                	je     c001771b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c001770b:	83 ec 0c             	sub    esp,0xc
c001770e:	68 d8 ea 01 c0       	push   0xc001ead8
c0017713:	e8 e7 89 ff ff       	call   c00100ff <KePanic(char const*)>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	8a 03                	mov    al,BYTE PTR [ebx]
c001771d:	a2 c0 39 02 c0       	mov    ds:0xc00239c0,al
c0017722:	83 c3 03             	add    ebx,0x3
c0017725:	55                   	push   ebp
c0017726:	55                   	push   ebp
c0017727:	6a 00                	push   0x0
c0017729:	53                   	push   ebx
c001772a:	e8 ce eb fe ff       	call   c00062fd <iso_open>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	89 c5                	mov    ebp,eax
c0017734:	83 f8 ff             	cmp    eax,0xffffffff
c0017737:	75 0f                	jne    c0017748 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017739:	56                   	push   esi
c001773a:	56                   	push   esi
c001773b:	6a 01                	push   0x1
c001773d:	53                   	push   ebx
c001773e:	e8 ba eb fe ff       	call   c00062fd <iso_open>
c0017743:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017746:	eb 2f                	jmp    c0017777 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	50                   	push   eax
c001774c:	e8 1f ee fe ff       	call   c0006570 <iso_total>
c0017751:	5a                   	pop    edx
c0017752:	59                   	pop    ecx
c0017753:	50                   	push   eax
c0017754:	68 e8 ea 01 c0       	push   0xc001eae8
c0017759:	e8 3e 2d ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001775e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017761:	e8 0a ee fe ff       	call   c0006570 <iso_total>
c0017766:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001776d:	89 06                	mov    DWORD PTR [esi],eax
c001776f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017772:	e8 10 ec fe ff       	call   c0006387 <iso_close>
c0017777:	83 c4 10             	add    esp,0x10
c001777a:	31 d2                	xor    edx,edx
c001777c:	eb 05                	jmp    c0017783 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c001777e:	ba 04 00 00 00       	mov    edx,0x4
c0017783:	83 c4 0c             	add    esp,0xc
c0017786:	89 d0                	mov    eax,edx
c0017788:	5b                   	pop    ebx
c0017789:	5e                   	pop    esi
c001778a:	5f                   	pop    edi
c001778b:	5d                   	pop    ebp
c001778c:	c3                   	ret    
c001778d:	90                   	nop

c001778e <ISO9660::close(void*)>:
c001778e:	83 ec 0c             	sub    esp,0xc
c0017791:	b8 04 00 00 00       	mov    eax,0x4
c0017796:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001779a:	85 d2                	test   edx,edx
c001779c:	74 11                	je     c00177af <ISO9660::close(void*)+0x21>
c001779e:	83 ec 0c             	sub    esp,0xc
c00177a1:	83 ea 64             	sub    edx,0x64
c00177a4:	52                   	push   edx
c00177a5:	e8 dd eb fe ff       	call   c0006387 <iso_close>
c00177aa:	83 c4 10             	add    esp,0x10
c00177ad:	31 c0                	xor    eax,eax
c00177af:	83 c4 0c             	add    esp,0xc
c00177b2:	c3                   	ret    
c00177b3:	90                   	nop

c00177b4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00177b4:	55                   	push   ebp
c00177b5:	57                   	push   edi
c00177b6:	56                   	push   esi
c00177b7:	53                   	push   ebx
c00177b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177be:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00177c5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00177cc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00177d3:	85 c0                	test   eax,eax
c00177d5:	0f 84 96 00 00 00    	je     c0017871 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177db:	85 db                	test   ebx,ebx
c00177dd:	0f 84 8e 00 00 00    	je     c0017871 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	83 e8 64             	sub    eax,0x64
c00177e9:	50                   	push   eax
c00177ea:	e8 d2 ed fe ff       	call   c00065c1 <iso_readdir>
c00177ef:	83 c4 10             	add    esp,0x10
c00177f2:	89 c6                	mov    esi,eax
c00177f4:	85 c0                	test   eax,eax
c00177f6:	75 18                	jne    c0017810 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c00177f8:	52                   	push   edx
c00177f9:	68 10 01 00 00       	push   0x110
c00177fe:	6a 00                	push   0x0
c0017800:	57                   	push   edi
c0017801:	e8 ca 8c fe ff       	call   c00004d0 <memset>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	b8 01 00 00 00       	mov    eax,0x1
c001780e:	eb 66                	jmp    c0017876 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017810:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017816:	8d 68 08             	lea    ebp,[eax+0x8]
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	55                   	push   ebp
c001781d:	e8 1e 8d fe ff       	call   c0000540 <strlen>
c0017822:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001782a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017835:	75 0a                	jne    c0017841 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017837:	b8 02 00 00 00       	mov    eax,0x2
c001783c:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001783f:	74 05                	je     c0017846 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017841:	b8 01 00 00 00       	mov    eax,0x1
c0017846:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001784a:	50                   	push   eax
c001784b:	50                   	push   eax
c001784c:	55                   	push   ebp
c001784d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017851:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017855:	50                   	push   eax
c0017856:	e8 a5 8d fe ff       	call   c0000600 <strcpy>
c001785b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017862:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017864:	31 c0                	xor    eax,eax
c0017866:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	eb 05                	jmp    c0017876 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017871:	b8 04 00 00 00       	mov    eax,0x4
c0017876:	81 c4 1c 01 00 00    	add    esp,0x11c
c001787c:	5b                   	pop    ebx
c001787d:	5e                   	pop    esi
c001787e:	5f                   	pop    edi
c001787f:	5d                   	pop    ebp
c0017880:	c3                   	ret    

c0017881 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017881:	57                   	push   edi
c0017882:	56                   	push   esi
c0017883:	53                   	push   ebx
c0017884:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017888:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001788c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017890:	39 35 c4 39 02 c0    	cmp    DWORD PTR ds:0xc00239c4,esi
c0017896:	75 08                	jne    c00178a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017898:	38 1d 28 f5 01 c0    	cmp    BYTE PTR ds:0xc001f528,bl
c001789e:	74 59                	je     c00178f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c00178a0:	83 ec 0c             	sub    esp,0xc
c00178a3:	31 d2                	xor    edx,edx
c00178a5:	68 e0 39 02 c0       	push   0xc00239e0
c00178aa:	0f be c3             	movsx  eax,bl
c00178ad:	6a 01                	push   0x1
c00178af:	52                   	push   edx
c00178b0:	56                   	push   esi
c00178b1:	ff 34 85 bc 29 02 c0 	push   DWORD PTR [eax*4-0x3ffdd644]
c00178b8:	e8 c7 52 ff ff       	call   c000cb84 <LogicalDisk::read(unsigned long long, int, void*)>
c00178bd:	83 c4 20             	add    esp,0x20
c00178c0:	85 c0                	test   eax,eax
c00178c2:	75 0e                	jne    c00178d2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00178c4:	89 35 c4 39 02 c0    	mov    DWORD PTR ds:0xc00239c4,esi
c00178ca:	88 1d 28 f5 01 c0    	mov    BYTE PTR ds:0xc001f528,bl
c00178d0:	eb 27                	jmp    c00178f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	68 fa ea 01 c0       	push   0xc001eafa
c00178da:	e8 bd 2b ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c00178df:	83 c4 0c             	add    esp,0xc
c00178e2:	68 00 08 00 00       	push   0x800
c00178e7:	6a 00                	push   0x0
c00178e9:	57                   	push   edi
c00178ea:	e8 e1 8b fe ff       	call   c00004d0 <memset>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	b8 01 00 00 00       	mov    eax,0x1
c00178f7:	eb 0e                	jmp    c0017907 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c00178f9:	be e0 39 02 c0       	mov    esi,0xc00239e0
c00178fe:	b9 00 08 00 00       	mov    ecx,0x800
c0017903:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017905:	31 c0                	xor    eax,eax
c0017907:	5b                   	pop    ebx
c0017908:	5e                   	pop    esi
c0017909:	5f                   	pop    edi
c001790a:	c3                   	ret    
c001790b:	90                   	nop

c001790c <ISO9660::tryMount(LogicalDisk*, int)>:
c001790c:	53                   	push   ebx
c001790d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017913:	c7 05 c4 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00239c4,0xdeadbeef
c001791d:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017924:	8d 58 41             	lea    ebx,[eax+0x41]
c0017927:	0f be db             	movsx  ebx,bl
c001792a:	53                   	push   ebx
c001792b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001792f:	50                   	push   eax
c0017930:	6a 10                	push   0x10
c0017932:	e8 4a ff ff ff       	call   c0017881 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	31 d2                	xor    edx,edx
c001793c:	85 c0                	test   eax,eax
c001793e:	75 33                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017940:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017945:	75 2c                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017947:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001794c:	75 25                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001794e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017953:	75 1e                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017955:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001795a:	75 17                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001795c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017961:	75 10                	jne    c0017973 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017963:	83 ec 0c             	sub    esp,0xc
c0017966:	53                   	push   ebx
c0017967:	e8 53 ee fe ff       	call   c00067bf <init_percd>
c001796c:	83 c4 10             	add    esp,0x10
c001796f:	40                   	inc    eax
c0017970:	0f 95 c2             	setne  dl
c0017973:	88 d0                	mov    al,dl
c0017975:	81 c4 08 08 00 00    	add    esp,0x808
c001797b:	5b                   	pop    ebx
c001797c:	c3                   	ret    
c001797d:	90                   	nop

c001797e <ISO9660::ISO9660()>:
c001797e:	83 ec 0c             	sub    esp,0xc
c0017981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017985:	83 ec 0c             	sub    esp,0xc
c0017988:	50                   	push   eax
c0017989:	e8 30 2e ff ff       	call   c000a7be <Filesystem::Filesystem()>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c0017996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799a:	89 10                	mov    DWORD PTR [eax],edx
c001799c:	e8 66 ef fe ff       	call   c0006907 <fs_iso9660_init>
c00179a1:	90                   	nop
c00179a2:	83 c4 0c             	add    esp,0xc
c00179a5:	c3                   	ret    

c00179a6 <SoundCard::beginPlayback()>:
c00179a6:	c7 44 24 04 80 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb80
c00179ae:	e9 4c 87 ff ff       	jmp    c00100ff <KePanic(char const*)>
c00179b3:	90                   	nop

c00179b4 <SoundCard::stopPlayback()>:
c00179b4:	c7 44 24 04 80 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb80
c00179bc:	e9 3e 87 ff ff       	jmp    c00100ff <KePanic(char const*)>
c00179c1:	90                   	nop

c00179c2 <SoundCard::SoundCard(char const*)>:
c00179c2:	83 ec 1c             	sub    esp,0x1c
c00179c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c9:	83 ec 08             	sub    esp,0x8
c00179cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179d0:	50                   	push   eax
c00179d1:	e8 9e 40 ff ff       	call   c000ba74 <Device::Device(char const*)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c00179de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e2:	89 10                	mov    DWORD PTR [eax],edx
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00179ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00179fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a01:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017a27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a2f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017a34:	7f 19                	jg     c0017a4f <SoundCard::SoundCard(char const*)+0x8d>
c0017a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a3e:	83 c2 54             	add    edx,0x54
c0017a41:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a49:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a4d:	eb e0                	jmp    c0017a2f <SoundCard::SoundCard(char const*)+0x6d>
c0017a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a53:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a5a:	90                   	nop
c0017a5b:	83 c4 1c             	add    esp,0x1c
c0017a5e:	c3                   	ret    
c0017a5f:	90                   	nop

c0017a60 <SoundCard::~SoundCard()>:
c0017a60:	83 ec 0c             	sub    esp,0xc
c0017a63:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c0017a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6c:	89 10                	mov    DWORD PTR [eax],edx
c0017a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a72:	83 ec 0c             	sub    esp,0xc
c0017a75:	50                   	push   eax
c0017a76:	e8 63 3d ff ff       	call   c000b7de <Device::~Device()>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	90                   	nop
c0017a7f:	83 c4 0c             	add    esp,0xc
c0017a82:	c3                   	ret    
c0017a83:	90                   	nop

c0017a84 <SoundCard::~SoundCard()>:
c0017a84:	83 ec 0c             	sub    esp,0xc
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a8e:	e8 cd ff ff ff       	call   c0017a60 <SoundCard::~SoundCard()>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	83 ec 08             	sub    esp,0x8
c0017a99:	68 e8 01 00 00       	push   0x1e8
c0017a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa2:	e8 ff 28 ff ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	83 c4 0c             	add    esp,0xc
c0017aad:	c3                   	ret    

c0017aae <SoundCard::configureRates(int, int, int)>:
c0017aae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ab2:	31 c0                	xor    eax,eax
c0017ab4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017abb:	75 20                	jne    c0017add <SoundCard::configureRates(int, int, int)+0x2f>
c0017abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ac1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017acb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017adb:	b0 01                	mov    al,0x1
c0017add:	c3                   	ret    

c0017ade <SoundCard::getSamples16(int, short*)>:
c0017ade:	55                   	push   ebp
c0017adf:	57                   	push   edi
c0017ae0:	31 ff                	xor    edi,edi
c0017ae2:	56                   	push   esi
c0017ae3:	53                   	push   ebx
c0017ae4:	31 db                	xor    ebx,ebx
c0017ae6:	83 ec 10             	sub    esp,0x10
c0017ae9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017aed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017af1:	8d 04 36             	lea    eax,[esi+esi*1]
c0017af4:	50                   	push   eax
c0017af5:	6a 00                	push   0x0
c0017af7:	55                   	push   ebp
c0017af8:	e8 d3 89 fe ff       	call   c00004d0 <memset>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b04:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b0b:	85 c0                	test   eax,eax
c0017b0d:	74 1b                	je     c0017b2a <SoundCard::getSamples16(int, short*)+0x4c>
c0017b0f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b13:	75 15                	jne    c0017b2a <SoundCard::getSamples16(int, short*)+0x4c>
c0017b15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b19:	55                   	push   ebp
c0017b1a:	56                   	push   esi
c0017b1b:	50                   	push   eax
c0017b1c:	e8 ef 02 00 00       	call   c0017e10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	39 c7                	cmp    edi,eax
c0017b26:	7d 02                	jge    c0017b2a <SoundCard::getSamples16(int, short*)+0x4c>
c0017b28:	89 c7                	mov    edi,eax
c0017b2a:	43                   	inc    ebx
c0017b2b:	83 fb 20             	cmp    ebx,0x20
c0017b2e:	75 d0                	jne    c0017b00 <SoundCard::getSamples16(int, short*)+0x22>
c0017b30:	83 c4 0c             	add    esp,0xc
c0017b33:	89 f8                	mov    eax,edi
c0017b35:	5b                   	pop    ebx
c0017b36:	5e                   	pop    esi
c0017b37:	5f                   	pop    edi
c0017b38:	5d                   	pop    ebp
c0017b39:	c3                   	ret    

c0017b3a <SoundCard::getSamples32(int, int*)>:
c0017b3a:	55                   	push   ebp
c0017b3b:	57                   	push   edi
c0017b3c:	31 ff                	xor    edi,edi
c0017b3e:	56                   	push   esi
c0017b3f:	31 f6                	xor    esi,esi
c0017b41:	53                   	push   ebx
c0017b42:	83 ec 10             	sub    esp,0x10
c0017b45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b49:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b4d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b51:	c1 e0 02             	shl    eax,0x2
c0017b54:	50                   	push   eax
c0017b55:	6a 00                	push   0x0
c0017b57:	55                   	push   ebp
c0017b58:	e8 73 89 fe ff       	call   c00004d0 <memset>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017b67:	85 c0                	test   eax,eax
c0017b69:	74 1b                	je     c0017b86 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b6b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b6f:	75 15                	jne    c0017b86 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b71:	53                   	push   ebx
c0017b72:	55                   	push   ebp
c0017b73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b77:	50                   	push   eax
c0017b78:	e8 57 03 00 00       	call   c0017ed4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	39 c6                	cmp    esi,eax
c0017b82:	7d 02                	jge    c0017b86 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b84:	89 c6                	mov    esi,eax
c0017b86:	47                   	inc    edi
c0017b87:	83 ff 20             	cmp    edi,0x20
c0017b8a:	75 d4                	jne    c0017b60 <SoundCard::getSamples32(int, int*)+0x26>
c0017b8c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017b92:	85 f6                	test   esi,esi
c0017b94:	75 0f                	jne    c0017ba5 <SoundCard::getSamples32(int, int*)+0x6b>
c0017b96:	84 c0                	test   al,al
c0017b98:	74 1b                	je     c0017bb5 <SoundCard::getSamples32(int, int*)+0x7b>
c0017b9a:	83 ec 0c             	sub    esp,0xc
c0017b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b9f:	53                   	push   ebx
c0017ba0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017ba3:	eb 0d                	jmp    c0017bb2 <SoundCard::getSamples32(int, int*)+0x78>
c0017ba5:	84 c0                	test   al,al
c0017ba7:	75 0c                	jne    c0017bb5 <SoundCard::getSamples32(int, int*)+0x7b>
c0017ba9:	83 ec 0c             	sub    esp,0xc
c0017bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bae:	53                   	push   ebx
c0017baf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	83 c4 0c             	add    esp,0xc
c0017bb8:	89 f0                	mov    eax,esi
c0017bba:	5b                   	pop    ebx
c0017bbb:	5e                   	pop    esi
c0017bbc:	5f                   	pop    edi
c0017bbd:	5d                   	pop    ebp
c0017bbe:	c3                   	ret    
c0017bbf:	90                   	nop

c0017bc0 <SoundCard::addChannel(SoundPort*)>:
c0017bc0:	83 ec 0c             	sub    esp,0xc
c0017bc3:	31 c0                	xor    eax,eax
c0017bc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bc9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017bd1:	74 1b                	je     c0017bee <SoundCard::addChannel(SoundPort*)+0x2e>
c0017bd3:	40                   	inc    eax
c0017bd4:	83 f8 20             	cmp    eax,0x20
c0017bd7:	75 f0                	jne    c0017bc9 <SoundCard::addChannel(SoundPort*)+0x9>
c0017bd9:	83 ec 0c             	sub    esp,0xc
c0017bdc:	68 a5 eb 01 c0       	push   0xc001eba5
c0017be1:	e8 19 85 ff ff       	call   c00100ff <KePanic(char const*)>
c0017be6:	83 c4 10             	add    esp,0x10
c0017be9:	83 c8 ff             	or     eax,0xffffffff
c0017bec:	eb 0b                	jmp    c0017bf9 <SoundCard::addChannel(SoundPort*)+0x39>
c0017bee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bf2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017bf9:	83 c4 0c             	add    esp,0xc
c0017bfc:	c3                   	ret    
c0017bfd:	90                   	nop

c0017bfe <SoundCard::removeChannel(int)>:
c0017bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c06:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c11:	c3                   	ret    
c0017c12:	66 90                	xchg   ax,ax

c0017c14 <SoundPort::SoundPort(int, int, int, int)>:
c0017c14:	83 ec 0c             	sub    esp,0xc
c0017c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c26:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c32:	89 10                	mov    DWORD PTR [eax],edx
c0017c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c4a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c4f:	75 13                	jne    c0017c64 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c57:	05 a0 0f 00 00       	add    eax,0xfa0
c0017c5c:	01 c0                	add    eax,eax
c0017c5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c62:	66 90                	xchg   ax,ax
c0017c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c6c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c73:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c81:	c1 e0 02             	shl    eax,0x2
c0017c84:	83 ec 0c             	sub    esp,0xc
c0017c87:	50                   	push   eax
c0017c88:	e8 74 fb fe ff       	call   c0007801 <malloc>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	89 c2                	mov    edx,eax
c0017c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017c99:	90                   	nop
c0017c9a:	83 c4 0c             	add    esp,0xc
c0017c9d:	c3                   	ret    
c0017c9e:	66 90                	xchg   ax,ax

c0017ca0 <SoundPort::~SoundPort()>:
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017caa:	85 c0                	test   eax,eax
c0017cac:	74 1e                	je     c0017ccc <SoundPort::~SoundPort()+0x2c>
c0017cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cb5:	83 ec 0c             	sub    esp,0xc
c0017cb8:	50                   	push   eax
c0017cb9:	e8 53 fb fe ff       	call   c0007811 <free>
c0017cbe:	83 c4 10             	add    esp,0x10
c0017cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017ccc:	90                   	nop
c0017ccd:	83 c4 0c             	add    esp,0xc
c0017cd0:	c3                   	ret    
c0017cd1:	90                   	nop
c0017cd2:	66 90                	xchg   ax,ax

c0017cd4 <SoundPort::unpause()>:
c0017cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017cdc:	c3                   	ret    
c0017cdd:	90                   	nop
c0017cde:	66 90                	xchg   ax,ax

c0017ce0 <SoundPort::pause()>:
c0017ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017ce8:	c3                   	ret    
c0017ce9:	90                   	nop
c0017cea:	66 90                	xchg   ax,ax

c0017cec <SoundPort::getBufferUsed()>:
c0017cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017cf3:	c3                   	ret    

c0017cf4 <SoundPort::getBufferSize()>:
c0017cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017cfb:	c3                   	ret    

c0017cfc <SoundPort::buffer16(short*, int)>:
c0017cfc:	55                   	push   ebp
c0017cfd:	57                   	push   edi
c0017cfe:	56                   	push   esi
c0017cff:	53                   	push   ebx
c0017d00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d04:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d08:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d0b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d0e:	74 68                	je     c0017d78 <SoundPort::buffer16(short*, int)+0x7c>
c0017d10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d14:	85 c9                	test   ecx,ecx
c0017d16:	7e 60                	jle    c0017d78 <SoundPort::buffer16(short*, int)+0x7c>
c0017d18:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017d1c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d1f:	c1 e1 0f             	shl    ecx,0xf
c0017d22:	8d 70 01             	lea    esi,[eax+0x1]
c0017d25:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d28:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017d2b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d2e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d31:	74 4d                	je     c0017d80 <SoundPort::buffer16(short*, int)+0x84>
c0017d33:	31 f6                	xor    esi,esi
c0017d35:	eb 21                	jmp    c0017d58 <SoundPort::buffer16(short*, int)+0x5c>
c0017d37:	90                   	nop
c0017d38:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017d3d:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d40:	c1 e3 0f             	shl    ebx,0xf
c0017d43:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d46:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d49:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d4c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d4f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d52:	74 1c                	je     c0017d70 <SoundPort::buffer16(short*, int)+0x74>
c0017d54:	89 c6                	mov    esi,eax
c0017d56:	66 90                	xchg   ax,ax
c0017d58:	8d 46 01             	lea    eax,[esi+0x1]
c0017d5b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017d5f:	75 d7                	jne    c0017d38 <SoundPort::buffer16(short*, int)+0x3c>
c0017d61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d65:	8d 76 00             	lea    esi,[esi+0x0]
c0017d68:	5b                   	pop    ebx
c0017d69:	5e                   	pop    esi
c0017d6a:	5f                   	pop    edi
c0017d6b:	5d                   	pop    ebp
c0017d6c:	c3                   	ret    
c0017d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d70:	5b                   	pop    ebx
c0017d71:	8d 46 02             	lea    eax,[esi+0x2]
c0017d74:	5e                   	pop    esi
c0017d75:	5f                   	pop    edi
c0017d76:	5d                   	pop    ebp
c0017d77:	c3                   	ret    
c0017d78:	5b                   	pop    ebx
c0017d79:	31 c0                	xor    eax,eax
c0017d7b:	5e                   	pop    esi
c0017d7c:	5f                   	pop    edi
c0017d7d:	5d                   	pop    ebp
c0017d7e:	c3                   	ret    
c0017d7f:	90                   	nop
c0017d80:	b8 01 00 00 00       	mov    eax,0x1
c0017d85:	eb e1                	jmp    c0017d68 <SoundPort::buffer16(short*, int)+0x6c>
c0017d87:	90                   	nop

c0017d88 <SoundPort::buffer32(int*, int)>:
c0017d88:	55                   	push   ebp
c0017d89:	57                   	push   edi
c0017d8a:	56                   	push   esi
c0017d8b:	53                   	push   ebx
c0017d8c:	51                   	push   ecx
c0017d8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d95:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017d9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017da2:	74 5c                	je     c0017e00 <SoundPort::buffer32(int*, int)+0x78>
c0017da4:	85 c0                	test   eax,eax
c0017da6:	7e 58                	jle    c0017e00 <SoundPort::buffer32(int*, int)+0x78>
c0017da8:	8d 71 01             	lea    esi,[ecx+0x1]
c0017dab:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017dae:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017db1:	8b 37                	mov    esi,DWORD PTR [edi]
c0017db3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017db6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017db9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dbc:	74 4a                	je     c0017e08 <SoundPort::buffer32(int*, int)+0x80>
c0017dbe:	31 f6                	xor    esi,esi
c0017dc0:	eb 1e                	jmp    c0017de0 <SoundPort::buffer32(int*, int)+0x58>
c0017dc2:	66 90                	xchg   ax,ax
c0017dc4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017dc7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017dca:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017dcd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017dd0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017dd4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dd7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dda:	74 18                	je     c0017df4 <SoundPort::buffer32(int*, int)+0x6c>
c0017ddc:	89 de                	mov    esi,ebx
c0017dde:	66 90                	xchg   ax,ax
c0017de0:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017de3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017de6:	75 dc                	jne    c0017dc4 <SoundPort::buffer32(int*, int)+0x3c>
c0017de8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017deb:	90                   	nop
c0017dec:	5a                   	pop    edx
c0017ded:	5b                   	pop    ebx
c0017dee:	5e                   	pop    esi
c0017def:	5f                   	pop    edi
c0017df0:	5d                   	pop    ebp
c0017df1:	c3                   	ret    
c0017df2:	66 90                	xchg   ax,ax
c0017df4:	5a                   	pop    edx
c0017df5:	8d 46 02             	lea    eax,[esi+0x2]
c0017df8:	5b                   	pop    ebx
c0017df9:	5e                   	pop    esi
c0017dfa:	5f                   	pop    edi
c0017dfb:	5d                   	pop    ebp
c0017dfc:	c3                   	ret    
c0017dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017e00:	5a                   	pop    edx
c0017e01:	31 c0                	xor    eax,eax
c0017e03:	5b                   	pop    ebx
c0017e04:	5e                   	pop    esi
c0017e05:	5f                   	pop    edi
c0017e06:	5d                   	pop    ebp
c0017e07:	c3                   	ret    
c0017e08:	b8 01 00 00 00       	mov    eax,0x1
c0017e0d:	eb dd                	jmp    c0017dec <SoundPort::buffer32(int*, int)+0x64>
c0017e0f:	90                   	nop

c0017e10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e10:	57                   	push   edi
c0017e11:	56                   	push   esi
c0017e12:	53                   	push   ebx
c0017e13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017e1b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017e21:	39 03                	cmp    DWORD PTR [ebx],eax
c0017e23:	74 13                	je     c0017e38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	68 f8 eb 01 c0       	push   0xc001ebf8
c0017e2d:	e8 cd 82 ff ff       	call   c00100ff <KePanic(char const*)>
c0017e32:	83 c4 10             	add    esp,0x10
c0017e35:	8d 76 00             	lea    esi,[esi+0x0]
c0017e38:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017e3e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e41:	74 11                	je     c0017e54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e43:	83 ec 0c             	sub    esp,0xc
c0017e46:	68 37 ec 01 c0       	push   0xc001ec37
c0017e4b:	e8 af 82 ff ff       	call   c00100ff <KePanic(char const*)>
c0017e50:	83 c4 10             	add    esp,0x10
c0017e53:	90                   	nop
c0017e54:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e5a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017e5d:	74 11                	je     c0017e70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	68 37 ec 01 c0       	push   0xc001ec37
c0017e67:	e8 93 82 ff ff       	call   c00100ff <KePanic(char const*)>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	90                   	nop
c0017e70:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017e73:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017e77:	7e 07                	jle    c0017e80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017e79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e80:	85 f6                	test   esi,esi
c0017e82:	7e 2c                	jle    c0017eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017e84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e88:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017e8b:	31 c9                	xor    ecx,ecx
c0017e8d:	01 d7                	add    edi,edx
c0017e8f:	90                   	nop
c0017e90:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017e93:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017e96:	85 c0                	test   eax,eax
c0017e98:	79 06                	jns    c0017ea0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017e9a:	05 ff 7f 00 00       	add    eax,0x7fff
c0017e9f:	90                   	nop
c0017ea0:	c1 f8 0f             	sar    eax,0xf
c0017ea3:	83 c1 04             	add    ecx,0x4
c0017ea6:	66 01 02             	add    WORD PTR [edx],ax
c0017ea9:	83 c2 02             	add    edx,0x2
c0017eac:	39 d7                	cmp    edi,edx
c0017eae:	75 e0                	jne    c0017e90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017eb0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017eb3:	50                   	push   eax
c0017eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017eb7:	29 f0                	sub    eax,esi
c0017eb9:	c1 e0 02             	shl    eax,0x2
c0017ebc:	50                   	push   eax
c0017ebd:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017ec0:	50                   	push   eax
c0017ec1:	52                   	push   edx
c0017ec2:	e8 19 85 fe ff       	call   c00003e0 <memmove>
c0017ec7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017eca:	83 c4 10             	add    esp,0x10
c0017ecd:	89 f0                	mov    eax,esi
c0017ecf:	5b                   	pop    ebx
c0017ed0:	5e                   	pop    esi
c0017ed1:	5f                   	pop    edi
c0017ed2:	c3                   	ret    
c0017ed3:	90                   	nop

c0017ed4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017ed4:	57                   	push   edi
c0017ed5:	56                   	push   esi
c0017ed6:	53                   	push   ebx
c0017ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017edb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017edf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ee3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017ee9:	39 06                	cmp    DWORD PTR [esi],eax
c0017eeb:	74 13                	je     c0017f00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017eed:	83 ec 0c             	sub    esp,0xc
c0017ef0:	68 18 ec 01 c0       	push   0xc001ec18
c0017ef5:	e8 05 82 ff ff       	call   c00100ff <KePanic(char const*)>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	8d 76 00             	lea    esi,[esi+0x0]
c0017f00:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f06:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f09:	74 11                	je     c0017f1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	68 53 ec 01 c0       	push   0xc001ec53
c0017f13:	e8 e7 81 ff ff       	call   c00100ff <KePanic(char const*)>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	90                   	nop
c0017f1c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017f22:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017f25:	74 11                	je     c0017f38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	68 53 ec 01 c0       	push   0xc001ec53
c0017f2f:	e8 cb 81 ff ff       	call   c00100ff <KePanic(char const*)>
c0017f34:	83 c4 10             	add    esp,0x10
c0017f37:	90                   	nop
c0017f38:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017f3b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017f3f:	7e 07                	jle    c0017f48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f45:	8d 76 00             	lea    esi,[esi+0x0]
c0017f48:	85 ff                	test   edi,edi
c0017f4a:	7e 1c                	jle    c0017f68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f4c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f53:	31 c0                	xor    eax,eax
c0017f55:	8d 76 00             	lea    esi,[esi+0x0]
c0017f58:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f5b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017f5e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017f61:	83 c0 04             	add    eax,0x4
c0017f64:	39 c1                	cmp    ecx,eax
c0017f66:	75 f0                	jne    c0017f58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017f68:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f6b:	50                   	push   eax
c0017f6c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017f6f:	29 f8                	sub    eax,edi
c0017f71:	c1 e0 02             	shl    eax,0x2
c0017f74:	50                   	push   eax
c0017f75:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017f78:	50                   	push   eax
c0017f79:	52                   	push   edx
c0017f7a:	e8 61 84 fe ff       	call   c00003e0 <memmove>
c0017f7f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	89 f8                	mov    eax,edi
c0017f87:	5b                   	pop    ebx
c0017f88:	5e                   	pop    esi
c0017f89:	5f                   	pop    edi
c0017f8a:	c3                   	ret    
c0017f8b:	90                   	nop

c0017f8c <PCI::open(int, int, void*)>:
c0017f8c:	83 ec 18             	sub    esp,0x18
c0017f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017f9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017f9f:	50                   	push   eax
c0017fa0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017fa3:	31 c0                	xor    eax,eax
c0017fa5:	83 c4 1c             	add    esp,0x1c
c0017fa8:	c3                   	ret    
c0017fa9:	90                   	nop

c0017faa <PCI::close(int, int, void*)>:
c0017faa:	31 c0                	xor    eax,eax
c0017fac:	c3                   	ret    
c0017fad:	90                   	nop

c0017fae <PCI::PCI()>:
c0017fae:	83 ec 0c             	sub    esp,0xc
c0017fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb5:	83 ec 08             	sub    esp,0x8
c0017fb8:	68 6f ec 01 c0       	push   0xc001ec6f
c0017fbd:	50                   	push   eax
c0017fbe:	e8 6d 32 ff ff       	call   c000b230 <Bus::Bus(char const*)>
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	ba 18 ed 01 c0       	mov    edx,0xc001ed18
c0017fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fcf:	89 10                	mov    DWORD PTR [eax],edx
c0017fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe3:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c0017fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017ff2:	31 d2                	xor    edx,edx
c0017ff4:	88 c2                	mov    dl,al
c0017ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ffa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018005:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001800b:	31 d2                	xor    edx,edx
c001800d:	88 c2                	mov    dl,al
c001800f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018013:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001801c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018022:	8d 50 01             	lea    edx,[eax+0x1]
c0018025:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018029:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001802f:	31 d2                	xor    edx,edx
c0018031:	88 c2                	mov    dl,al
c0018033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018037:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001803b:	83 c9 c0             	or     ecx,0xffffffc0
c001803e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018042:	90                   	nop
c0018043:	83 c4 0c             	add    esp,0xc
c0018046:	c3                   	ret    
c0018047:	90                   	nop

c0018048 <PCI::readBAR8(unsigned int, int)>:
c0018048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001804c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018050:	f6 c2 01             	test   dl,0x1
c0018053:	74 07                	je     c001805c <PCI::readBAR8(unsigned int, int)+0x14>
c0018055:	83 e2 fc             	and    edx,0xfffffffc
c0018058:	01 c2                	add    edx,eax
c001805a:	ec                   	in     al,dx
c001805b:	c3                   	ret    
c001805c:	83 e2 f0             	and    edx,0xfffffff0
c001805f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018062:	c3                   	ret    
c0018063:	90                   	nop

c0018064 <PCI::readBAR16(unsigned int, int)>:
c0018064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001806c:	f6 c2 01             	test   dl,0x1
c001806f:	74 08                	je     c0018079 <PCI::readBAR16(unsigned int, int)+0x15>
c0018071:	83 e2 fc             	and    edx,0xfffffffc
c0018074:	01 c2                	add    edx,eax
c0018076:	66 ed                	in     ax,dx
c0018078:	c3                   	ret    
c0018079:	83 e2 f0             	and    edx,0xfffffff0
c001807c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018080:	c3                   	ret    
c0018081:	90                   	nop

c0018082 <PCI::readBAR32(unsigned int, int)>:
c0018082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001808a:	f6 c2 01             	test   dl,0x1
c001808d:	74 07                	je     c0018096 <PCI::readBAR32(unsigned int, int)+0x14>
c001808f:	83 e2 fc             	and    edx,0xfffffffc
c0018092:	01 c2                	add    edx,eax
c0018094:	ed                   	in     eax,dx
c0018095:	c3                   	ret    
c0018096:	83 e2 f0             	and    edx,0xfffffff0
c0018099:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001809c:	c3                   	ret    
c001809d:	90                   	nop

c001809e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001809e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180aa:	f6 c2 01             	test   dl,0x1
c00180ad:	74 07                	je     c00180b6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00180af:	83 e2 fc             	and    edx,0xfffffffc
c00180b2:	01 ca                	add    edx,ecx
c00180b4:	ee                   	out    dx,al
c00180b5:	c3                   	ret    
c00180b6:	83 e2 f0             	and    edx,0xfffffff0
c00180b9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00180bc:	c3                   	ret    
c00180bd:	90                   	nop

c00180be <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00180be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180ca:	f6 c2 01             	test   dl,0x1
c00180cd:	74 08                	je     c00180d7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00180cf:	83 e2 fc             	and    edx,0xfffffffc
c00180d2:	01 ca                	add    edx,ecx
c00180d4:	66 ef                	out    dx,ax
c00180d6:	c3                   	ret    
c00180d7:	83 e2 f0             	and    edx,0xfffffff0
c00180da:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00180e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180ec:	f6 c2 01             	test   dl,0x1
c00180ef:	74 07                	je     c00180f8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00180f1:	83 e2 fc             	and    edx,0xfffffffc
c00180f4:	01 ca                	add    edx,ecx
c00180f6:	ef                   	out    dx,eax
c00180f7:	c3                   	ret    
c00180f8:	83 e2 f0             	and    edx,0xfffffff0
c00180fb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00180fe:	c3                   	ret    
c00180ff:	90                   	nop

c0018100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018100:	55                   	push   ebp
c0018101:	57                   	push   edi
c0018102:	56                   	push   esi
c0018103:	53                   	push   ebx
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001810b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001810f:	89 f0                	mov    eax,esi
c0018111:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018115:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018119:	3c 07                	cmp    al,0x7
c001811b:	76 10                	jbe    c001812d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001811d:	83 ec 0c             	sub    esp,0xc
c0018120:	68 77 ec 01 c0       	push   0xc001ec77
c0018125:	e8 d5 7f ff ff       	call   c00100ff <KePanic(char const*)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	80 fb 0f             	cmp    bl,0xf
c0018130:	76 10                	jbe    c0018142 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018132:	83 ec 0c             	sub    esp,0xc
c0018135:	68 a7 ec 01 c0       	push   0xc001eca7
c001813a:	e8 c0 7f ff ff       	call   c00100ff <KePanic(char const*)>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	8d 04 36             	lea    eax,[esi+esi*1]
c0018145:	ba f8 0c 00 00       	mov    edx,0xcf8
c001814a:	83 c8 f0             	or     eax,0xfffffff0
c001814d:	ee                   	out    dx,al
c001814e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018153:	89 e8                	mov    eax,ebp
c0018155:	ee                   	out    dx,al
c0018156:	83 c4 0c             	add    esp,0xc
c0018159:	89 d8                	mov    eax,ebx
c001815b:	66 81 e7 fc 00       	and    di,0xfc
c0018160:	5b                   	pop    ebx
c0018161:	c1 e0 08             	shl    eax,0x8
c0018164:	5e                   	pop    esi
c0018165:	09 f8                	or     eax,edi
c0018167:	5f                   	pop    edi
c0018168:	66 0d 00 c0          	or     ax,0xc000
c001816c:	5d                   	pop    ebp
c001816d:	c3                   	ret    

c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001816e:	57                   	push   edi
c001816f:	56                   	push   esi
c0018170:	53                   	push   ebx
c0018171:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018175:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018179:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001817f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001818b:	83 ff 01             	cmp    edi,0x1
c001818e:	75 3e                	jne    c00181ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018190:	89 de                	mov    esi,ebx
c0018192:	0f b6 c0             	movzx  eax,al
c0018195:	81 e6 fc 00 00 00    	and    esi,0xfc
c001819b:	c1 e0 10             	shl    eax,0x10
c001819e:	0f b6 c9             	movzx  ecx,cl
c00181a1:	09 f0                	or     eax,esi
c00181a3:	c1 e1 08             	shl    ecx,0x8
c00181a6:	0f b6 d2             	movzx  edx,dl
c00181a9:	09 c8                	or     eax,ecx
c00181ab:	c1 e2 0b             	shl    edx,0xb
c00181ae:	09 d0                	or     eax,edx
c00181b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181b5:	0d 00 00 00 80       	or     eax,0x80000000
c00181ba:	ef                   	out    dx,eax
c00181bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00181c0:	ed                   	in     eax,dx
c00181c1:	83 e3 02             	and    ebx,0x2
c00181c4:	0f b6 cb             	movzx  ecx,bl
c00181c7:	c1 e1 03             	shl    ecx,0x3
c00181ca:	d3 e8                	shr    eax,cl
c00181cc:	eb 43                	jmp    c0018211 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181ce:	83 ff 02             	cmp    edi,0x2
c00181d1:	75 2c                	jne    c00181ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00181d3:	83 ec 0c             	sub    esp,0xc
c00181d6:	0f b6 c9             	movzx  ecx,cl
c00181d9:	0f b6 d2             	movzx  edx,dl
c00181dc:	0f b6 fb             	movzx  edi,bl
c00181df:	0f b6 c0             	movzx  eax,al
c00181e2:	57                   	push   edi
c00181e3:	51                   	push   ecx
c00181e4:	52                   	push   edx
c00181e5:	50                   	push   eax
c00181e6:	56                   	push   esi
c00181e7:	e8 14 ff ff ff       	call   c0018100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181ec:	89 c2                	mov    edx,eax
c00181ee:	ed                   	in     eax,dx
c00181ef:	83 e3 02             	and    ebx,0x2
c00181f2:	83 c4 20             	add    esp,0x20
c00181f5:	0f b6 cb             	movzx  ecx,bl
c00181f8:	c1 e1 03             	shl    ecx,0x3
c00181fb:	d3 e8                	shr    eax,cl
c00181fd:	eb 12                	jmp    c0018211 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181ff:	83 ec 0c             	sub    esp,0xc
c0018202:	68 d7 ec 01 c0       	push   0xc001ecd7
c0018207:	e8 f3 7e ff ff       	call   c00100ff <KePanic(char const*)>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	31 c0                	xor    eax,eax
c0018211:	5b                   	pop    ebx
c0018212:	5e                   	pop    esi
c0018213:	5f                   	pop    edi
c0018214:	c3                   	ret    
c0018215:	90                   	nop

c0018216 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018216:	83 ec 18             	sub    esp,0x18
c0018219:	6a 00                	push   0x0
c001821b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018220:	50                   	push   eax
c0018221:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018226:	50                   	push   eax
c0018227:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001822c:	50                   	push   eax
c001822d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018231:	e8 38 ff ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018236:	83 c4 2c             	add    esp,0x2c
c0018239:	c3                   	ret    

c001823a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001823a:	83 ec 18             	sub    esp,0x18
c001823d:	6a 0e                	push   0xe
c001823f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018244:	50                   	push   eax
c0018245:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001824a:	50                   	push   eax
c001824b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018250:	50                   	push   eax
c0018251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018255:	e8 14 ff ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001825a:	83 c4 2c             	add    esp,0x2c
c001825d:	0f b6 c0             	movzx  eax,al
c0018260:	c3                   	ret    
c0018261:	90                   	nop

c0018262 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018262:	55                   	push   ebp
c0018263:	57                   	push   edi
c0018264:	56                   	push   esi
c0018265:	53                   	push   ebx
c0018266:	83 ec 18             	sub    esp,0x18
c0018269:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001826e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018273:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018278:	6a 0a                	push   0xa
c001827a:	56                   	push   esi
c001827b:	55                   	push   ebp
c001827c:	57                   	push   edi
c001827d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018281:	e8 e8 fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018286:	83 c4 14             	add    esp,0x14
c0018289:	89 c3                	mov    ebx,eax
c001828b:	6a 0a                	push   0xa
c001828d:	0f b6 db             	movzx  ebx,bl
c0018290:	56                   	push   esi
c0018291:	55                   	push   ebp
c0018292:	57                   	push   edi
c0018293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018297:	e8 d2 fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001829c:	83 c4 2c             	add    esp,0x2c
c001829f:	25 00 ff 00 00       	and    eax,0xff00
c00182a4:	09 d8                	or     eax,ebx
c00182a6:	5b                   	pop    ebx
c00182a7:	5e                   	pop    esi
c00182a8:	5f                   	pop    edi
c00182a9:	5d                   	pop    ebp
c00182aa:	c3                   	ret    
c00182ab:	90                   	nop

c00182ac <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00182ac:	83 ec 18             	sub    esp,0x18
c00182af:	6a 08                	push   0x8
c00182b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b6:	50                   	push   eax
c00182b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182bc:	50                   	push   eax
c00182bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c2:	50                   	push   eax
c00182c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c7:	e8 a2 fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182cc:	83 c4 2c             	add    esp,0x2c
c00182cf:	0f b6 c4             	movzx  eax,ah
c00182d2:	c3                   	ret    
c00182d3:	90                   	nop

c00182d4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00182d4:	83 ec 18             	sub    esp,0x18
c00182d7:	6a 08                	push   0x8
c00182d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182de:	50                   	push   eax
c00182df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182e4:	50                   	push   eax
c00182e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ea:	50                   	push   eax
c00182eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ef:	e8 7a fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182f4:	83 c4 2c             	add    esp,0x2c
c00182f7:	c3                   	ret    

c00182f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00182f8:	83 ec 18             	sub    esp,0x18
c00182fb:	6a 3c                	push   0x3c
c00182fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018302:	50                   	push   eax
c0018303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018308:	50                   	push   eax
c0018309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001830e:	50                   	push   eax
c001830f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018313:	e8 56 fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018318:	83 c4 2c             	add    esp,0x2c
c001831b:	c3                   	ret    

c001831c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001831c:	83 ec 18             	sub    esp,0x18
c001831f:	6a 18                	push   0x18
c0018321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018326:	50                   	push   eax
c0018327:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001832c:	50                   	push   eax
c001832d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018332:	50                   	push   eax
c0018333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018337:	e8 32 fe ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001833c:	83 c4 2c             	add    esp,0x2c
c001833f:	0f b6 c4             	movzx  eax,ah
c0018342:	c3                   	ret    
c0018343:	90                   	nop

c0018344 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018344:	55                   	push   ebp
c0018345:	57                   	push   edi
c0018346:	56                   	push   esi
c0018347:	53                   	push   ebx
c0018348:	83 ec 28             	sub    esp,0x28
c001834b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001834f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018354:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018359:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001835e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018365:	8d 43 12             	lea    eax,[ebx+0x12]
c0018368:	83 c3 10             	add    ebx,0x10
c001836b:	0f b6 c0             	movzx  eax,al
c001836e:	0f b6 db             	movzx  ebx,bl
c0018371:	50                   	push   eax
c0018372:	51                   	push   ecx
c0018373:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018377:	57                   	push   edi
c0018378:	55                   	push   ebp
c0018379:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001837d:	e8 ec fd ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018382:	83 c4 14             	add    esp,0x14
c0018385:	89 c6                	mov    esi,eax
c0018387:	53                   	push   ebx
c0018388:	c1 e6 10             	shl    esi,0x10
c001838b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001838f:	51                   	push   ecx
c0018390:	57                   	push   edi
c0018391:	55                   	push   ebp
c0018392:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018396:	e8 d3 fd ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001839b:	83 c4 3c             	add    esp,0x3c
c001839e:	0f b7 c0             	movzx  eax,ax
c00183a1:	5b                   	pop    ebx
c00183a2:	09 f0                	or     eax,esi
c00183a4:	5e                   	pop    esi
c00183a5:	5f                   	pop    edi
c00183a6:	5d                   	pop    ebp
c00183a7:	c3                   	ret    

c00183a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00183a8:	55                   	push   ebp
c00183a9:	57                   	push   edi
c00183aa:	56                   	push   esi
c00183ab:	53                   	push   ebx
c00183ac:	83 ec 0c             	sub    esp,0xc
c00183af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00183b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183b7:	89 f5                	mov    ebp,esi
c00183b9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00183bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00183cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00183cf:	83 f9 01             	cmp    ecx,0x1
c00183d2:	75 5d                	jne    c0018431 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00183d4:	0f b6 c8             	movzx  ecx,al
c00183d7:	0f b6 d2             	movzx  edx,dl
c00183da:	c1 e1 10             	shl    ecx,0x10
c00183dd:	c1 e2 0b             	shl    edx,0xb
c00183e0:	89 f0                	mov    eax,esi
c00183e2:	25 fc 00 00 00       	and    eax,0xfc
c00183e7:	09 c1                	or     ecx,eax
c00183e9:	89 e8                	mov    eax,ebp
c00183eb:	0f b6 c0             	movzx  eax,al
c00183ee:	c1 e0 08             	shl    eax,0x8
c00183f1:	09 c1                	or     ecx,eax
c00183f3:	09 d1                	or     ecx,edx
c00183f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183fa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018400:	89 c8                	mov    eax,ecx
c0018402:	ef                   	out    dx,eax
c0018403:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018408:	ed                   	in     eax,dx
c0018409:	0f b7 db             	movzx  ebx,bx
c001840c:	83 e6 02             	and    esi,0x2
c001840f:	74 0a                	je     c001841b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018411:	0f b7 d0             	movzx  edx,ax
c0018414:	c1 e3 10             	shl    ebx,0x10
c0018417:	09 d3                	or     ebx,edx
c0018419:	eb 05                	jmp    c0018420 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001841b:	66 31 c0             	xor    ax,ax
c001841e:	09 c3                	or     ebx,eax
c0018420:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018425:	89 c8                	mov    eax,ecx
c0018427:	ef                   	out    dx,eax
c0018428:	ba fc 0c 00 00       	mov    edx,0xcfc
c001842d:	89 d8                	mov    eax,ebx
c001842f:	eb 41                	jmp    c0018472 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018431:	83 f9 02             	cmp    ecx,0x2
c0018434:	75 45                	jne    c001847b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018436:	83 ec 0c             	sub    esp,0xc
c0018439:	0f b6 d2             	movzx  edx,dl
c001843c:	89 f1                	mov    ecx,esi
c001843e:	0f b6 c0             	movzx  eax,al
c0018441:	0f b6 f1             	movzx  esi,cl
c0018444:	89 e9                	mov    ecx,ebp
c0018446:	56                   	push   esi
c0018447:	0f b6 c9             	movzx  ecx,cl
c001844a:	51                   	push   ecx
c001844b:	52                   	push   edx
c001844c:	50                   	push   eax
c001844d:	57                   	push   edi
c001844e:	e8 ad fc ff ff       	call   c0018100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018453:	89 c2                	mov    edx,eax
c0018455:	ed                   	in     eax,dx
c0018456:	83 c4 20             	add    esp,0x20
c0018459:	0f b7 db             	movzx  ebx,bx
c001845c:	f6 c2 02             	test   dl,0x2
c001845f:	74 0c                	je     c001846d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018461:	0f b7 c8             	movzx  ecx,ax
c0018464:	89 d8                	mov    eax,ebx
c0018466:	c1 e0 10             	shl    eax,0x10
c0018469:	09 c8                	or     eax,ecx
c001846b:	eb 05                	jmp    c0018472 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001846d:	66 31 c0             	xor    ax,ax
c0018470:	09 d8                	or     eax,ebx
c0018472:	ef                   	out    dx,eax
c0018473:	83 c4 0c             	add    esp,0xc
c0018476:	5b                   	pop    ebx
c0018477:	5e                   	pop    esi
c0018478:	5f                   	pop    edi
c0018479:	5d                   	pop    ebp
c001847a:	c3                   	ret    
c001847b:	c7 44 24 20 d7 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ecd7
c0018483:	83 c4 0c             	add    esp,0xc
c0018486:	5b                   	pop    ebx
c0018487:	5e                   	pop    esi
c0018488:	5f                   	pop    edi
c0018489:	5d                   	pop    ebp
c001848a:	e9 70 7c ff ff       	jmp    c00100ff <KePanic(char const*)>
c001848f:	90                   	nop

c0018490 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018490:	55                   	push   ebp
c0018491:	57                   	push   edi
c0018492:	56                   	push   esi
c0018493:	53                   	push   ebx
c0018494:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001849a:	80 3d ec 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241ec,0x0
c00184a1:	0f 85 84 00 00 00    	jne    c001852b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 14 01 00 00       	push   0x114
c00184af:	e8 4d f3 fe ff       	call   c0007801 <malloc>
c00184b4:	83 c4 0c             	add    esp,0xc
c00184b7:	89 c3                	mov    ebx,eax
c00184b9:	ff 35 30 38 02 c0    	push   DWORD PTR ds:0xc0023830
c00184bf:	68 dd ec 01 c0       	push   0xc001ecdd
c00184c4:	50                   	push   eax
c00184c5:	e8 48 25 ff ff       	call   c000aa12 <File::File(char const*, Process*)>
c00184ca:	5a                   	pop    edx
c00184cb:	59                   	pop    ecx
c00184cc:	6a 01                	push   0x1
c00184ce:	53                   	push   ebx
c00184cf:	e8 fe 25 ff ff       	call   c000aad2 <File::open(FileOpenMode)>
c00184d4:	83 c4 0c             	add    esp,0xc
c00184d7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00184db:	50                   	push   eax
c00184dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184e0:	50                   	push   eax
c00184e1:	53                   	push   ebx
c00184e2:	e8 97 28 ff ff       	call   c000ad7e <File::stat(unsigned long long*, bool*)>
c00184e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184eb:	40                   	inc    eax
c00184ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00184ef:	e8 0d f3 fe ff       	call   c0007801 <malloc>
c00184f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184f8:	a3 e8 41 02 c0       	mov    ds:0xc00241e8,eax
c00184fd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018501:	5e                   	pop    esi
c0018502:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018504:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018508:	51                   	push   ecx
c0018509:	50                   	push   eax
c001850a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001850e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018512:	53                   	push   ebx
c0018513:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018516:	83 c4 14             	add    esp,0x14
c0018519:	53                   	push   ebx
c001851a:	e8 11 26 ff ff       	call   c000ab30 <File::close()>
c001851f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018523:	83 c4 10             	add    esp,0x10
c0018526:	a3 e4 41 02 c0       	mov    ds:0xc00241e4,eax
c001852b:	a1 e4 41 02 c0       	mov    eax,ds:0xc00241e4
c0018530:	8b 15 e8 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e8
c0018536:	89 04 24             	mov    DWORD PTR [esp],eax
c0018539:	31 ff                	xor    edi,edi
c001853b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018543:	31 f6                	xor    esi,esi
c0018545:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001854a:	31 db                	xor    ebx,ebx
c001854c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018554:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018559:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018560:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018564:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001856b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001856f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018572:	0f 8e 6b 01 00 00    	jle    c00186e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018578:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001857b:	d4 40                	aam    0x40
c001857d:	d5 39                	aad    0x39
c001857f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018583:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018587:	d4 40                	aam    0x40
c0018589:	d5 39                	aad    0x39
c001858b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001858f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018593:	d4 40                	aam    0x40
c0018595:	d5 39                	aad    0x39
c0018597:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001859b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001859f:	d4 40                	aam    0x40
c00185a1:	d5 39                	aad    0x39
c00185a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185a7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00185ab:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00185af:	3c 56                	cmp    al,0x56
c00185b1:	74 45                	je     c00185f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00185b3:	d4 40                	aam    0x40
c00185b5:	d5 39                	aad    0x39
c00185b7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185ba:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00185be:	0f b6 c9             	movzx  ecx,cl
c00185c1:	c1 e1 04             	shl    ecx,0x4
c00185c4:	d4 40                	aam    0x40
c00185c6:	d5 39                	aad    0x39
c00185c8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185cb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00185cf:	0f b6 db             	movzx  ebx,bl
c00185d2:	09 cb                	or     ebx,ecx
c00185d4:	c1 e3 04             	shl    ebx,0x4
c00185d7:	d4 40                	aam    0x40
c00185d9:	d5 39                	aad    0x39
c00185db:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185de:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00185e2:	0f b6 c9             	movzx  ecx,cl
c00185e5:	09 cb                	or     ebx,ecx
c00185e7:	c1 e3 04             	shl    ebx,0x4
c00185ea:	89 d9                	mov    ecx,ebx
c00185ec:	d4 40                	aam    0x40
c00185ee:	d5 39                	aad    0x39
c00185f0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185f3:	0f b6 db             	movzx  ebx,bl
c00185f6:	09 cb                	or     ebx,ecx
c00185f8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00185fc:	80 f9 44             	cmp    cl,0x44
c00185ff:	74 47                	je     c0018648 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018601:	88 c8                	mov    al,cl
c0018603:	d4 40                	aam    0x40
c0018605:	d5 39                	aad    0x39
c0018607:	83 e8 30             	sub    eax,0x30
c001860a:	0f b6 e8             	movzx  ebp,al
c001860d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018611:	c1 e5 04             	shl    ebp,0x4
c0018614:	d4 40                	aam    0x40
c0018616:	d5 39                	aad    0x39
c0018618:	83 e8 30             	sub    eax,0x30
c001861b:	0f b6 f0             	movzx  esi,al
c001861e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018622:	09 ee                	or     esi,ebp
c0018624:	c1 e6 04             	shl    esi,0x4
c0018627:	d4 40                	aam    0x40
c0018629:	d5 39                	aad    0x39
c001862b:	83 e8 30             	sub    eax,0x30
c001862e:	0f b6 e8             	movzx  ebp,al
c0018631:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018635:	09 ee                	or     esi,ebp
c0018637:	c1 e6 04             	shl    esi,0x4
c001863a:	89 f5                	mov    ebp,esi
c001863c:	d4 40                	aam    0x40
c001863e:	d5 39                	aad    0x39
c0018640:	83 e8 30             	sub    eax,0x30
c0018643:	0f b6 f0             	movzx  esi,al
c0018646:	09 ee                	or     esi,ebp
c0018648:	83 c7 10             	add    edi,0x10
c001864b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001864f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018652:	3c 0a                	cmp    al,0xa
c0018654:	74 09                	je     c001865f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018656:	45                   	inc    ebp
c0018657:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001865a:	75 16                	jne    c0018672 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001865c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001865f:	3c 0a                	cmp    al,0xa
c0018661:	0f 94 c0             	sete   al
c0018664:	0f b6 c0             	movzx  eax,al
c0018667:	01 c7                	add    edi,eax
c0018669:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001866e:	75 0c                	jne    c001867c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018670:	eb 15                	jmp    c0018687 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018672:	47                   	inc    edi
c0018673:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018676:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001867a:	eb d3                	jmp    c001864f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001867c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018681:	0f 85 e8 fe ff ff    	jne    c001856f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018687:	80 f9 44             	cmp    cl,0x44
c001868a:	74 0b                	je     c0018697 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001868c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018691:	0f 85 d8 fe ff ff    	jne    c001856f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018697:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001869b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001869f:	c1 e1 04             	shl    ecx,0x4
c00186a2:	83 e8 30             	sub    eax,0x30
c00186a5:	09 c8                	or     eax,ecx
c00186a7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00186ab:	0f 85 be fe ff ff    	jne    c001856f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186b1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00186b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186b9:	c1 e1 04             	shl    ecx,0x4
c00186bc:	83 e8 30             	sub    eax,0x30
c00186bf:	09 c8                	or     eax,ecx
c00186c1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00186c5:	0f 85 a4 fe ff ff    	jne    c001856f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186cb:	50                   	push   eax
c00186cc:	50                   	push   eax
c00186cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00186d1:	50                   	push   eax
c00186d2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00186d9:	e8 22 7f fe ff       	call   c0000600 <strcpy>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	eb 15                	jmp    c00186f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00186e3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186ea:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00186f5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00186f8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018705:	5b                   	pop    ebx
c0018706:	5e                   	pop    esi
c0018707:	5f                   	pop    edi
c0018708:	5d                   	pop    ebp
c0018709:	c3                   	ret    

c001870a <PCI::checkBus(unsigned char)>:
c001870a:	56                   	push   esi
c001870b:	53                   	push   ebx
c001870c:	31 f6                	xor    esi,esi
c001870e:	51                   	push   ecx
c001870f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018713:	0f b6 c3             	movzx  eax,bl
c0018716:	52                   	push   edx
c0018717:	56                   	push   esi
c0018718:	46                   	inc    esi
c0018719:	50                   	push   eax
c001871a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001871e:	e8 f3 02 00 00       	call   c0018a16 <PCI::checkDevice(unsigned char, unsigned char)>
c0018723:	83 c4 10             	add    esp,0x10
c0018726:	83 fe 20             	cmp    esi,0x20
c0018729:	75 e8                	jne    c0018713 <PCI::checkBus(unsigned char)+0x9>
c001872b:	58                   	pop    eax
c001872c:	5b                   	pop    ebx
c001872d:	5e                   	pop    esi
c001872e:	c3                   	ret    
c001872f:	90                   	nop

c0018730 <PCI::foundDevice(PCIDeviceInfo)>:
c0018730:	55                   	push   ebp
c0018731:	57                   	push   edi
c0018732:	56                   	push   esi
c0018733:	53                   	push   ebx
c0018734:	83 ec 1c             	sub    esp,0x1c
c0018737:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001873b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018741:	0f 84 52 01 00 00    	je     c0018899 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018747:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001874b:	66 81 f9 06 04       	cmp    cx,0x406
c0018750:	75 2c                	jne    c001877e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018752:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018757:	50                   	push   eax
c0018758:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001875d:	50                   	push   eax
c001875e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018763:	50                   	push   eax
c0018764:	56                   	push   esi
c0018765:	e8 b2 fb ff ff       	call   c001831c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001876a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001876e:	0f b6 c0             	movzx  eax,al
c0018771:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018775:	83 c4 2c             	add    esp,0x2c
c0018778:	5b                   	pop    ebx
c0018779:	5e                   	pop    esi
c001877a:	5f                   	pop    edi
c001877b:	5d                   	pop    ebp
c001877c:	eb 8c                	jmp    c001870a <PCI::checkBus(unsigned char)>
c001877e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018782:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018788:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001878c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018790:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018794:	88 d3                	mov    bl,dl
c0018796:	85 c0                	test   eax,eax
c0018798:	74 33                	je     c00187cd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001879a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001879d:	85 d2                	test   edx,edx
c001879f:	74 28                	je     c00187c9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187a1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00187a7:	31 ef                	xor    edi,ebp
c00187a9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00187af:	75 18                	jne    c00187c9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00187b5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00187bb:	75 0c                	jne    c00187c9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187bd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00187c3:	0f 84 d0 00 00 00    	je     c0018899 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00187c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00187cb:	eb c9                	jmp    c0018796 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00187cd:	66 81 f9 01 06       	cmp    cx,0x601
c00187d2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00187d6:	75 19                	jne    c00187f1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00187d8:	83 ec 0c             	sub    esp,0xc
c00187db:	68 64 01 00 00       	push   0x164
c00187e0:	e8 1c f0 fe ff       	call   c0007801 <malloc>
c00187e5:	89 c5                	mov    ebp,eax
c00187e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00187ea:	e8 47 0e 00 00       	call   c0019636 <SATABus::SATABus()>
c00187ef:	eb 1e                	jmp    c001880f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00187f1:	66 81 f9 01 01       	cmp    cx,0x101
c00187f6:	75 60                	jne    c0018858 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	68 70 02 00 00       	push   0x270
c0018800:	e8 fc ef fe ff       	call   c0007801 <malloc>
c0018805:	89 c5                	mov    ebp,eax
c0018807:	89 04 24             	mov    DWORD PTR [esp],eax
c001880a:	e8 cb 02 00 00       	call   c0018ada <IDE::IDE()>
c001880f:	58                   	pop    eax
c0018810:	5a                   	pop    edx
c0018811:	55                   	push   ebp
c0018812:	56                   	push   esi
c0018813:	e8 c4 30 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c0018818:	83 ec 1c             	sub    esp,0x1c
c001881b:	b9 09 00 00 00       	mov    ecx,0x9
c0018820:	fc                   	cld    
c0018821:	89 e7                	mov    edi,esp
c0018823:	89 de                	mov    esi,ebx
c0018825:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018827:	55                   	push   ebp
c0018828:	e8 f5 2f ff ff       	call   c000b822 <Device::preOpenPCI(PCIDeviceInfo)>
c001882d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018830:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018834:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001883c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018844:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001884c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001884f:	83 c4 4c             	add    esp,0x4c
c0018852:	5b                   	pop    ebx
c0018853:	5e                   	pop    esi
c0018854:	5f                   	pop    edi
c0018855:	5d                   	pop    ebp
c0018856:	ff e0                	jmp    eax
c0018858:	83 ec 0c             	sub    esp,0xc
c001885b:	68 58 01 00 00       	push   0x158
c0018860:	e8 9c ef fe ff       	call   c0007801 <malloc>
c0018865:	89 c5                	mov    ebp,eax
c0018867:	58                   	pop    eax
c0018868:	5a                   	pop    edx
c0018869:	68 f6 ec 01 c0       	push   0xc001ecf6
c001886e:	55                   	push   ebp
c001886f:	e8 06 33 ff ff       	call   c000bb7a <DriverlessDevice::DriverlessDevice(char const*)>
c0018874:	59                   	pop    ecx
c0018875:	5f                   	pop    edi
c0018876:	55                   	push   ebp
c0018877:	56                   	push   esi
c0018878:	e8 5f 30 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c001887d:	b9 09 00 00 00       	mov    ecx,0x9
c0018882:	fc                   	cld    
c0018883:	89 df                	mov    edi,ebx
c0018885:	89 de                	mov    esi,ebx
c0018887:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018889:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001888d:	83 c4 2c             	add    esp,0x2c
c0018890:	5b                   	pop    ebx
c0018891:	5e                   	pop    esi
c0018892:	5f                   	pop    edi
c0018893:	5d                   	pop    ebp
c0018894:	e9 89 2f ff ff       	jmp    c000b822 <Device::preOpenPCI(PCIDeviceInfo)>
c0018899:	83 c4 1c             	add    esp,0x1c
c001889c:	5b                   	pop    ebx
c001889d:	5e                   	pop    esi
c001889e:	5f                   	pop    edi
c001889f:	5d                   	pop    ebp
c00188a0:	c3                   	ret    
c00188a1:	90                   	nop

c00188a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00188a2:	55                   	push   ebp
c00188a3:	57                   	push   edi
c00188a4:	56                   	push   esi
c00188a5:	53                   	push   ebx
c00188a6:	83 ec 68             	sub    esp,0x68
c00188a9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00188ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00188b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188b8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00188bf:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c00188c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00188c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00188cf:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00188d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00188d8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00188dd:	6a 0c                	push   0xc
c00188df:	57                   	push   edi
c00188e0:	53                   	push   ebx
c00188e1:	56                   	push   esi
c00188e2:	55                   	push   ebp
c00188e3:	e8 86 f8 ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e8:	83 c4 20             	add    esp,0x20
c00188eb:	57                   	push   edi
c00188ec:	53                   	push   ebx
c00188ed:	56                   	push   esi
c00188ee:	55                   	push   ebp
c00188ef:	e8 6e f9 ff ff       	call   c0018262 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00188f4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00188f9:	57                   	push   edi
c00188fa:	53                   	push   ebx
c00188fb:	56                   	push   esi
c00188fc:	55                   	push   ebp
c00188fd:	e8 f6 f9 ff ff       	call   c00182f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018902:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018906:	83 c4 14             	add    esp,0x14
c0018909:	6a 3c                	push   0x3c
c001890b:	57                   	push   edi
c001890c:	53                   	push   ebx
c001890d:	56                   	push   esi
c001890e:	55                   	push   ebp
c001890f:	e8 5a f8 ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018914:	0f b6 c4             	movzx  eax,ah
c0018917:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001891b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001891f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018923:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c0018928:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001892e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018934:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018938:	83 c4 20             	add    esp,0x20
c001893b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018940:	74 30                	je     c0018972 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018942:	31 c0                	xor    eax,eax
c0018944:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018948:	7e 28                	jle    c0018972 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001894a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018952:	39 cb                	cmp    ebx,ecx
c0018954:	75 19                	jne    c001896f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018956:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001895e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018962:	75 0b                	jne    c001896f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018964:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001896b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001896f:	40                   	inc    eax
c0018970:	eb d2                	jmp    c0018944 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018972:	31 d2                	xor    edx,edx
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	57                   	push   edi
c0018978:	53                   	push   ebx
c0018979:	56                   	push   esi
c001897a:	52                   	push   edx
c001897b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001897f:	55                   	push   ebp
c0018980:	e8 bf f9 ff ff       	call   c0018344 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018985:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018989:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001898d:	42                   	inc    edx
c001898e:	83 c4 20             	add    esp,0x20
c0018991:	83 fa 06             	cmp    edx,0x6
c0018994:	75 de                	jne    c0018974 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018996:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001899b:	83 ec 0c             	sub    esp,0xc
c001899e:	86 e0                	xchg   al,ah
c00189a0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00189a5:	6a 02                	push   0x2
c00189a7:	57                   	push   edi
c00189a8:	53                   	push   ebx
c00189a9:	56                   	push   esi
c00189aa:	55                   	push   ebp
c00189ab:	e8 be f7 ff ff       	call   c001816e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189b0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00189b5:	83 c4 20             	add    esp,0x20
c00189b8:	57                   	push   edi
c00189b9:	53                   	push   ebx
c00189ba:	56                   	push   esi
c00189bb:	55                   	push   ebp
c00189bc:	e8 eb f8 ff ff       	call   c00182ac <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00189c1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00189c5:	57                   	push   edi
c00189c6:	53                   	push   ebx
c00189c7:	56                   	push   esi
c00189c8:	55                   	push   ebp
c00189c9:	e8 48 f8 ff ff       	call   c0018216 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189ce:	b9 09 00 00 00       	mov    ecx,0x9
c00189d3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00189d8:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c00189dc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00189e0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00189e4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00189e8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00189ec:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00189f0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00189f4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00189f8:	83 ec 0c             	sub    esp,0xc
c00189fb:	fc                   	cld    
c00189fc:	89 e7                	mov    edi,esp
c00189fe:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a02:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a04:	55                   	push   ebp
c0018a05:	e8 26 fd ff ff       	call   c0018730 <PCI::foundDevice(PCIDeviceInfo)>
c0018a0a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a10:	5b                   	pop    ebx
c0018a11:	5e                   	pop    esi
c0018a12:	5f                   	pop    edi
c0018a13:	5d                   	pop    ebp
c0018a14:	c3                   	ret    
c0018a15:	90                   	nop

c0018a16 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018a16:	55                   	push   ebp
c0018a17:	57                   	push   edi
c0018a18:	56                   	push   esi
c0018a19:	53                   	push   ebx
c0018a1a:	83 ec 0c             	sub    esp,0xc
c0018a1d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a21:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018a26:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018a2b:	6a 00                	push   0x0
c0018a2d:	56                   	push   esi
c0018a2e:	57                   	push   edi
c0018a2f:	55                   	push   ebp
c0018a30:	e8 e1 f7 ff ff       	call   c0018216 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a35:	6a 00                	push   0x0
c0018a37:	56                   	push   esi
c0018a38:	57                   	push   edi
c0018a39:	55                   	push   ebp
c0018a3a:	e8 63 fe ff ff       	call   c00188a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a3f:	83 c4 20             	add    esp,0x20
c0018a42:	6a 00                	push   0x0
c0018a44:	56                   	push   esi
c0018a45:	57                   	push   edi
c0018a46:	55                   	push   ebp
c0018a47:	e8 ee f7 ff ff       	call   c001823a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a4c:	83 c4 10             	add    esp,0x10
c0018a4f:	84 c0                	test   al,al
c0018a51:	79 27                	jns    c0018a7a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a53:	bb 01 00 00 00       	mov    ebx,0x1
c0018a58:	53                   	push   ebx
c0018a59:	56                   	push   esi
c0018a5a:	57                   	push   edi
c0018a5b:	55                   	push   ebp
c0018a5c:	e8 b5 f7 ff ff       	call   c0018216 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	66 40                	inc    ax
c0018a66:	74 0c                	je     c0018a74 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018a68:	53                   	push   ebx
c0018a69:	56                   	push   esi
c0018a6a:	57                   	push   edi
c0018a6b:	55                   	push   ebp
c0018a6c:	e8 31 fe ff ff       	call   c00188a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a71:	83 c4 10             	add    esp,0x10
c0018a74:	43                   	inc    ebx
c0018a75:	83 fb 08             	cmp    ebx,0x8
c0018a78:	75 de                	jne    c0018a58 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018a7a:	83 c4 0c             	add    esp,0xc
c0018a7d:	5b                   	pop    ebx
c0018a7e:	5e                   	pop    esi
c0018a7f:	5f                   	pop    edi
c0018a80:	5d                   	pop    ebp
c0018a81:	c3                   	ret    

c0018a82 <PCI::detect()>:
c0018a82:	56                   	push   esi
c0018a83:	53                   	push   ebx
c0018a84:	53                   	push   ebx
c0018a85:	31 db                	xor    ebx,ebx
c0018a87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a8b:	6a 00                	push   0x0
c0018a8d:	6a 00                	push   0x0
c0018a8f:	6a 00                	push   0x0
c0018a91:	56                   	push   esi
c0018a92:	e8 a3 f7 ff ff       	call   c001823a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a97:	83 c4 10             	add    esp,0x10
c0018a9a:	a8 80                	test   al,0x80
c0018a9c:	75 21                	jne    c0018abf <PCI::detect()+0x3d>
c0018a9e:	51                   	push   ecx
c0018a9f:	51                   	push   ecx
c0018aa0:	6a 00                	push   0x0
c0018aa2:	56                   	push   esi
c0018aa3:	e8 62 fc ff ff       	call   c001870a <PCI::checkBus(unsigned char)>
c0018aa8:	83 c4 10             	add    esp,0x10
c0018aab:	eb 24                	jmp    c0018ad1 <PCI::detect()+0x4f>
c0018aad:	52                   	push   edx
c0018aae:	52                   	push   edx
c0018aaf:	53                   	push   ebx
c0018ab0:	43                   	inc    ebx
c0018ab1:	56                   	push   esi
c0018ab2:	e8 53 fc ff ff       	call   c001870a <PCI::checkBus(unsigned char)>
c0018ab7:	83 c4 10             	add    esp,0x10
c0018aba:	83 fb 08             	cmp    ebx,0x8
c0018abd:	74 12                	je     c0018ad1 <PCI::detect()+0x4f>
c0018abf:	53                   	push   ebx
c0018ac0:	6a 00                	push   0x0
c0018ac2:	6a 00                	push   0x0
c0018ac4:	56                   	push   esi
c0018ac5:	e8 4c f7 ff ff       	call   c0018216 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018aca:	83 c4 10             	add    esp,0x10
c0018acd:	66 40                	inc    ax
c0018acf:	74 dc                	je     c0018aad <PCI::detect()+0x2b>
c0018ad1:	58                   	pop    eax
c0018ad2:	5b                   	pop    ebx
c0018ad3:	5e                   	pop    esi
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop

c0018ad6 <IDE::close(int, int, void*)>:
c0018ad6:	83 c8 ff             	or     eax,0xffffffff
c0018ad9:	c3                   	ret    

c0018ada <IDE::IDE()>:
c0018ada:	83 ec 0c             	sub    esp,0xc
c0018add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ae1:	83 ec 08             	sub    esp,0x8
c0018ae4:	68 3c ed 01 c0       	push   0xc001ed3c
c0018ae9:	50                   	push   eax
c0018aea:	e8 31 31 ff ff       	call   c000bc20 <HardDiskController::HardDiskController(char const*)>
c0018aef:	83 c4 10             	add    esp,0x10
c0018af2:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c0018af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018afb:	89 10                	mov    DWORD PTR [eax],edx
c0018afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b01:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b08:	90                   	nop
c0018b09:	83 c4 0c             	add    esp,0xc
c0018b0c:	c3                   	ret    
c0018b0d:	90                   	nop

c0018b0e <IDE::prepareInterrupt(unsigned char)>:
c0018b0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018b17:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018b1f:	c3                   	ret    

c0018b20 <selectDrive(unsigned char, unsigned char)>:
c0018b20:	c3                   	ret    
c0018b21:	90                   	nop

c0018b22 <IDE::getBase(unsigned char)>:
c0018b22:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b2b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018b33:	c3                   	ret    

c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018b34:	55                   	push   ebp
c0018b35:	57                   	push   edi
c0018b36:	56                   	push   esi
c0018b37:	53                   	push   ebx
c0018b38:	83 ec 1c             	sub    esp,0x1c
c0018b3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b3f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b43:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b4e:	80 f9 03             	cmp    cl,0x3
c0018b51:	77 51                	ja     c0018ba4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b57:	0f b6 f2             	movzx  esi,dl
c0018b5a:	0f b6 db             	movzx  ebx,bl
c0018b5d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018b60:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018b64:	83 ca 80             	or     edx,0xffffff80
c0018b67:	0f b6 d2             	movzx  edx,dl
c0018b6a:	52                   	push   edx
c0018b6b:	6a 0c                	push   0xc
c0018b6d:	56                   	push   esi
c0018b6e:	57                   	push   edi
c0018b6f:	e8 c0 ff ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b74:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b7d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018b81:	ee                   	out    dx,al
c0018b82:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018b87:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018b8b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018b8f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b93:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018b9b:	83 c4 2c             	add    esp,0x2c
c0018b9e:	5b                   	pop    ebx
c0018b9f:	5e                   	pop    esi
c0018ba0:	5f                   	pop    edi
c0018ba1:	5d                   	pop    ebp
c0018ba2:	eb 90                	jmp    c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ba4:	80 fb 07             	cmp    bl,0x7
c0018ba7:	77 12                	ja     c0018bbb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018ba9:	0f b6 d2             	movzx  edx,dl
c0018bac:	0f b6 db             	movzx  ebx,bl
c0018baf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018bb7:	89 da                	mov    edx,ebx
c0018bb9:	eb 2f                	jmp    c0018bea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bbb:	80 fb 0d             	cmp    bl,0xd
c0018bbe:	77 13                	ja     c0018bd3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018bc0:	0f b6 d2             	movzx  edx,dl
c0018bc3:	0f b6 db             	movzx  ebx,bl
c0018bc6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018bcd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018bd1:	eb 17                	jmp    c0018bea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bd3:	80 fb 15             	cmp    bl,0x15
c0018bd6:	77 13                	ja     c0018beb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018bd8:	0f b6 d2             	movzx  edx,dl
c0018bdb:	0f b6 db             	movzx  ebx,bl
c0018bde:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018be6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018bea:	ee                   	out    dx,al
c0018beb:	83 c4 1c             	add    esp,0x1c
c0018bee:	5b                   	pop    ebx
c0018bef:	5e                   	pop    esi
c0018bf0:	5f                   	pop    edi
c0018bf1:	5d                   	pop    ebp
c0018bf2:	c3                   	ret    
c0018bf3:	90                   	nop

c0018bf4 <IDE::read(unsigned char, unsigned char)>:
c0018bf4:	55                   	push   ebp
c0018bf5:	57                   	push   edi
c0018bf6:	56                   	push   esi
c0018bf7:	53                   	push   ebx
c0018bf8:	83 ec 1c             	sub    esp,0x1c
c0018bfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018bff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c03:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c0a:	3c 03                	cmp    al,0x3
c0018c0c:	77 43                	ja     c0018c51 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c0e:	0f b6 f2             	movzx  esi,dl
c0018c11:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c14:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018c18:	83 c8 80             	or     eax,0xffffff80
c0018c1b:	0f b6 c0             	movzx  eax,al
c0018c1e:	50                   	push   eax
c0018c1f:	6a 0c                	push   0xc
c0018c21:	56                   	push   esi
c0018c22:	57                   	push   edi
c0018c23:	e8 0c ff ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c28:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018c2d:	0f b6 c3             	movzx  eax,bl
c0018c30:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018c34:	ec                   	in     al,dx
c0018c35:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018c39:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018c3e:	52                   	push   edx
c0018c3f:	6a 0c                	push   0xc
c0018c41:	56                   	push   esi
c0018c42:	57                   	push   edi
c0018c43:	e8 ec fe ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c48:	83 c4 20             	add    esp,0x20
c0018c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c4f:	eb 49                	jmp    c0018c9a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c51:	80 fb 07             	cmp    bl,0x7
c0018c54:	77 12                	ja     c0018c68 <IDE::read(unsigned char, unsigned char)+0x74>
c0018c56:	0f b6 d2             	movzx  edx,dl
c0018c59:	0f b6 c3             	movzx  eax,bl
c0018c5c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018c64:	89 c2                	mov    edx,eax
c0018c66:	eb 31                	jmp    c0018c99 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c68:	80 fb 0d             	cmp    bl,0xd
c0018c6b:	77 13                	ja     c0018c80 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018c6d:	0f b6 d2             	movzx  edx,dl
c0018c70:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018c77:	0f b6 d3             	movzx  edx,bl
c0018c7a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018c7e:	eb 19                	jmp    c0018c99 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c80:	31 c0                	xor    eax,eax
c0018c82:	80 fb 15             	cmp    bl,0x15
c0018c85:	77 13                	ja     c0018c9a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c87:	0f b6 d2             	movzx  edx,dl
c0018c8a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018c92:	0f b6 d3             	movzx  edx,bl
c0018c95:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018c99:	ec                   	in     al,dx
c0018c9a:	83 c4 1c             	add    esp,0x1c
c0018c9d:	5b                   	pop    ebx
c0018c9e:	5e                   	pop    esi
c0018c9f:	5f                   	pop    edi
c0018ca0:	5d                   	pop    ebp
c0018ca1:	c3                   	ret    

c0018ca2 <IDE::waitInterrupt(unsigned char)>:
c0018ca2:	57                   	push   edi
c0018ca3:	56                   	push   esi
c0018ca4:	31 f6                	xor    esi,esi
c0018ca6:	53                   	push   ebx
c0018ca7:	83 ec 10             	sub    esp,0x10
c0018caa:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018cae:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018cb2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cb6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018cbb:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018cc2:	84 db                	test   bl,bl
c0018cc4:	75 33                	jne    c0018cf9 <IDE::waitInterrupt(unsigned char)+0x57>
c0018cc6:	52                   	push   edx
c0018cc7:	6a 0c                	push   0xc
c0018cc9:	50                   	push   eax
c0018cca:	57                   	push   edi
c0018ccb:	e8 24 ff ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0018cd0:	83 c4 10             	add    esp,0x10
c0018cd3:	a8 01                	test   al,0x1
c0018cd5:	75 2a                	jne    c0018d01 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018cd7:	f7 c6 04 00 00 00    	test   esi,0x4
c0018cdd:	75 12                	jne    c0018cf1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018cdf:	83 fe 32             	cmp    esi,0x32
c0018ce2:	7e 0d                	jle    c0018cf1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018ce4:	83 ec 0c             	sub    esp,0xc
c0018ce7:	6a 64                	push   0x64
c0018ce9:	e8 12 a9 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c0018cee:	83 c4 10             	add    esp,0x10
c0018cf1:	83 fe 3c             	cmp    esi,0x3c
c0018cf4:	74 0b                	je     c0018d01 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018cf6:	46                   	inc    esi
c0018cf7:	eb bd                	jmp    c0018cb6 <IDE::waitInterrupt(unsigned char)+0x14>
c0018cf9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d01:	83 c4 10             	add    esp,0x10
c0018d04:	88 d8                	mov    al,bl
c0018d06:	5b                   	pop    ebx
c0018d07:	5e                   	pop    esi
c0018d08:	5f                   	pop    edi
c0018d09:	c3                   	ret    

c0018d0a <ideChannel0IRQHandler(regs*, void*)>:
c0018d0a:	83 ec 10             	sub    esp,0x10
c0018d0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d11:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018d18:	6a 07                	push   0x7
c0018d1a:	6a 00                	push   0x0
c0018d1c:	50                   	push   eax
c0018d1d:	e8 d2 fe ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0018d22:	83 c4 1c             	add    esp,0x1c
c0018d25:	c3                   	ret    

c0018d26 <ideChannel1IRQHandler(regs*, void*)>:
c0018d26:	83 ec 10             	sub    esp,0x10
c0018d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d2d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018d34:	6a 07                	push   0x7
c0018d36:	6a 01                	push   0x1
c0018d38:	50                   	push   eax
c0018d39:	e8 b6 fe ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0018d3e:	83 c4 1c             	add    esp,0x1c
c0018d41:	c3                   	ret    

c0018d42 <IDE::enableIRQs(unsigned char, bool)>:
c0018d42:	57                   	push   edi
c0018d43:	56                   	push   esi
c0018d44:	be 04 00 00 00       	mov    esi,0x4
c0018d49:	53                   	push   ebx
c0018d4a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d53:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d58:	0f 94 c0             	sete   al
c0018d5b:	01 c0                	add    eax,eax
c0018d5d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018d64:	0f b6 c0             	movzx  eax,al
c0018d67:	50                   	push   eax
c0018d68:	6a 0c                	push   0xc
c0018d6a:	57                   	push   edi
c0018d6b:	53                   	push   ebx
c0018d6c:	e8 c3 fd ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d71:	83 c4 10             	add    esp,0x10
c0018d74:	50                   	push   eax
c0018d75:	6a 0c                	push   0xc
c0018d77:	57                   	push   edi
c0018d78:	53                   	push   ebx
c0018d79:	e8 76 fe ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0018d7e:	83 c4 10             	add    esp,0x10
c0018d81:	4e                   	dec    esi
c0018d82:	75 f0                	jne    c0018d74 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018d84:	5b                   	pop    ebx
c0018d85:	5e                   	pop    esi
c0018d86:	5f                   	pop    edi
c0018d87:	c3                   	ret    

c0018d88 <IDE::open(int, int, void*)>:
c0018d88:	55                   	push   ebp
c0018d89:	57                   	push   edi
c0018d8a:	56                   	push   esi
c0018d8b:	53                   	push   ebx
c0018d8c:	83 ec 1c             	sub    esp,0x1c
c0018d8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d93:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018d9c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018da5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018dac:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018db3:	0f 85 b0 02 00 00    	jne    c0019069 <IDE::open(int, int, void*)+0x2e1>
c0018db9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018dbf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018dc3:	83 e0 7f             	and    eax,0x7f
c0018dc6:	3c 05                	cmp    al,0x5
c0018dc8:	74 04                	je     c0018dce <IDE::open(int, int, void*)+0x46>
c0018dca:	3c 0f                	cmp    al,0xf
c0018dcc:	75 32                	jne    c0018e00 <IDE::open(int, int, void*)+0x78>
c0018dce:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018dd4:	83 e0 fc             	and    eax,0xfffffffc
c0018dd7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018dde:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018de4:	83 e0 fc             	and    eax,0xfffffffc
c0018de7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018dee:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018df4:	83 e0 fc             	and    eax,0xfffffffc
c0018df7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018dfe:	eb 14                	jmp    c0018e14 <IDE::open(int, int, void*)+0x8c>
c0018e00:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e0a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018e14:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018e1b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018e22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e26:	89 c6                	mov    esi,eax
c0018e28:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e2d:	c1 e6 10             	shl    esi,0x10
c0018e30:	89 e8                	mov    eax,ebp
c0018e32:	89 fa                	mov    edx,edi
c0018e34:	c1 e0 0b             	shl    eax,0xb
c0018e37:	09 f0                	or     eax,esi
c0018e39:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e40:	c1 e6 08             	shl    esi,0x8
c0018e43:	09 c6                	or     esi,eax
c0018e45:	89 f0                	mov    eax,esi
c0018e47:	0d 08 00 00 80       	or     eax,0x80000008
c0018e4c:	ef                   	out    dx,eax
c0018e4d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e52:	89 ca                	mov    edx,ecx
c0018e54:	ed                   	in     eax,dx
c0018e55:	c1 e8 10             	shr    eax,0x10
c0018e58:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e5d:	0f 84 f5 00 00 00    	je     c0018f58 <IDE::open(int, int, void*)+0x1d0>
c0018e63:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018e69:	89 fa                	mov    edx,edi
c0018e6b:	89 f0                	mov    eax,esi
c0018e6d:	ef                   	out    dx,eax
c0018e6e:	b0 fe                	mov    al,0xfe
c0018e70:	89 ca                	mov    edx,ecx
c0018e72:	ee                   	out    dx,al
c0018e73:	89 f0                	mov    eax,esi
c0018e75:	89 fa                	mov    edx,edi
c0018e77:	ef                   	out    dx,eax
c0018e78:	89 ca                	mov    edx,ecx
c0018e7a:	ed                   	in     eax,dx
c0018e7b:	3c fe                	cmp    al,0xfe
c0018e7d:	0f 85 a9 00 00 00    	jne    c0018f2c <IDE::open(int, int, void*)+0x1a4>
c0018e83:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c0018e89:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018e90:	74 33                	je     c0018ec5 <IDE::open(int, int, void*)+0x13d>
c0018e92:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018e98:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018e9c:	40                   	inc    eax
c0018e9d:	83 ec 0c             	sub    esp,0xc
c0018ea0:	0f b6 c0             	movzx  eax,al
c0018ea3:	50                   	push   eax
c0018ea4:	55                   	push   ebp
c0018ea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018ea9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018eaf:	51                   	push   ecx
c0018eb0:	e8 63 57 ff ff       	call   c000e618 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018eb5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018eba:	83 c4 1c             	add    esp,0x1c
c0018ebd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018ec3:	eb 0a                	jmp    c0018ecf <IDE::open(int, int, void*)+0x147>
c0018ec5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018ecf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018ed6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018edd:	c1 e1 10             	shl    ecx,0x10
c0018ee0:	c1 e0 08             	shl    eax,0x8
c0018ee3:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ee8:	09 c1                	or     ecx,eax
c0018eea:	89 fa                	mov    edx,edi
c0018eec:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018ef3:	c1 e0 0b             	shl    eax,0xb
c0018ef6:	09 c1                	or     ecx,eax
c0018ef8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018efe:	89 c8                	mov    eax,ecx
c0018f00:	ef                   	out    dx,eax
c0018f01:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f06:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f0c:	89 f2                	mov    edx,esi
c0018f0e:	ee                   	out    dx,al
c0018f0f:	89 c8                	mov    eax,ecx
c0018f11:	89 fa                	mov    edx,edi
c0018f13:	ef                   	out    dx,eax
c0018f14:	89 f2                	mov    edx,esi
c0018f16:	ed                   	in     eax,dx
c0018f17:	0f b6 c0             	movzx  eax,al
c0018f1a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018f20:	74 46                	je     c0018f68 <IDE::open(int, int, void*)+0x1e0>
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	68 54 ed 01 c0       	push   0xc001ed54
c0018f2a:	eb 34                	jmp    c0018f60 <IDE::open(int, int, void*)+0x1d8>
c0018f2c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018f35:	75 17                	jne    c0018f4e <IDE::open(int, int, void*)+0x1c6>
c0018f37:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018f3c:	74 07                	je     c0018f45 <IDE::open(int, int, void*)+0x1bd>
c0018f3e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f43:	75 09                	jne    c0018f4e <IDE::open(int, int, void*)+0x1c6>
c0018f45:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f4c:	eb 1a                	jmp    c0018f68 <IDE::open(int, int, void*)+0x1e0>
c0018f4e:	83 ec 0c             	sub    esp,0xc
c0018f51:	68 5c ed 01 c0       	push   0xc001ed5c
c0018f56:	eb 08                	jmp    c0018f60 <IDE::open(int, int, void*)+0x1d8>
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	68 8d ed 01 c0       	push   0xc001ed8d
c0018f60:	e8 9a 71 ff ff       	call   c00100ff <KePanic(char const*)>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018f6f:	79 1a                	jns    c0018f8b <IDE::open(int, int, void*)+0x203>
c0018f71:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018f77:	83 e0 fc             	and    eax,0xfffffffc
c0018f7a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018f81:	83 c0 08             	add    eax,0x8
c0018f84:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018f8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f91:	89 c2                	mov    edx,eax
c0018f93:	83 e2 0f             	and    edx,0xf
c0018f96:	66 83 fa 08          	cmp    dx,0x8
c0018f9a:	75 0a                	jne    c0018fa6 <IDE::open(int, int, void*)+0x21e>
c0018f9c:	83 e8 02             	sub    eax,0x2
c0018f9f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fa6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018fac:	89 c2                	mov    edx,eax
c0018fae:	83 e2 0f             	and    edx,0xf
c0018fb1:	66 83 fa 08          	cmp    dx,0x8
c0018fb5:	75 0a                	jne    c0018fc1 <IDE::open(int, int, void*)+0x239>
c0018fb7:	83 e8 02             	sub    eax,0x2
c0018fba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018fc1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018fc8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018fcf:	89 d0                	mov    eax,edx
c0018fd1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fd4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fd8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018fdc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018fdf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fe4:	0f b6 c9             	movzx  ecx,cl
c0018fe7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018fee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018ff1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018ff5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018ff9:	8d 50 02             	lea    edx,[eax+0x2]
c0018ffc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019001:	0f b6 d2             	movzx  edx,dl
c0019004:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001900a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001900d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019011:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019015:	8d 48 03             	lea    ecx,[eax+0x3]
c0019018:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001901d:	0f b6 c9             	movzx  ecx,cl
c0019020:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019026:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019029:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001902d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019031:	8d 50 04             	lea    edx,[eax+0x4]
c0019034:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001903a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001903f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019046:	66 85 f6             	test   si,si
c0019049:	74 5b                	je     c00190a6 <IDE::open(int, int, void*)+0x31e>
c001904b:	0f b6 d2             	movzx  edx,dl
c001904e:	83 c0 05             	add    eax,0x5
c0019051:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019054:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019058:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001905c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019062:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019067:	eb 3d                	jmp    c00190a6 <IDE::open(int, int, void*)+0x31e>
c0019069:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001906f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019076:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001907d:	66 05 06 02          	add    ax,0x206
c0019081:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019088:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001908f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019096:	66 05 06 02          	add    ax,0x206
c001909a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00190a1:	e9 e5 fe ff ff       	jmp    c0018f8b <IDE::open(int, int, void*)+0x203>
c00190a6:	50                   	push   eax
c00190a7:	50                   	push   eax
c00190a8:	6a 00                	push   0x0
c00190aa:	53                   	push   ebx
c00190ab:	e8 5e fa ff ff       	call   c0018b0e <IDE::prepareInterrupt(unsigned char)>
c00190b0:	5a                   	pop    edx
c00190b1:	59                   	pop    ecx
c00190b2:	6a 01                	push   0x1
c00190b4:	53                   	push   ebx
c00190b5:	e8 54 fa ff ff       	call   c0018b0e <IDE::prepareInterrupt(unsigned char)>
c00190ba:	83 c4 0c             	add    esp,0xc
c00190bd:	6a 00                	push   0x0
c00190bf:	6a 00                	push   0x0
c00190c1:	53                   	push   ebx
c00190c2:	e8 7b fc ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c00190c7:	83 c4 0c             	add    esp,0xc
c00190ca:	6a 00                	push   0x0
c00190cc:	6a 01                	push   0x1
c00190ce:	53                   	push   ebx
c00190cf:	e8 6e fc ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c00190d4:	83 c4 10             	add    esp,0x10
c00190d7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00190de:	74 34                	je     c0019114 <IDE::open(int, int, void*)+0x38c>
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	53                   	push   ebx
c00190e4:	6a 01                	push   0x1
c00190e6:	68 0a 8d 01 c0       	push   0xc0018d0a
c00190eb:	6a 0e                	push   0xe
c00190ed:	53                   	push   ebx
c00190ee:	e8 95 27 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190f3:	83 c4 14             	add    esp,0x14
c00190f6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00190fc:	53                   	push   ebx
c00190fd:	6a 01                	push   0x1
c00190ff:	68 26 8d 01 c0       	push   0xc0018d26
c0019104:	6a 0f                	push   0xf
c0019106:	53                   	push   ebx
c0019107:	e8 7c 27 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001910c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019112:	eb 38                	jmp    c001914c <IDE::open(int, int, void*)+0x3c4>
c0019114:	83 ec 0c             	sub    esp,0xc
c0019117:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019121:	53                   	push   ebx
c0019122:	6a 00                	push   0x0
c0019124:	68 0a 8d 01 c0       	push   0xc0018d0a
c0019129:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001912f:	53                   	push   ebx
c0019130:	e8 53 27 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019135:	83 c4 14             	add    esp,0x14
c0019138:	53                   	push   ebx
c0019139:	6a 00                	push   0x0
c001913b:	68 26 8d 01 c0       	push   0xc0018d26
c0019140:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019146:	53                   	push   ebx
c0019147:	e8 3c 27 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001914c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001914e:	83 c4 20             	add    esp,0x20
c0019151:	83 ec 0c             	sub    esp,0xc
c0019154:	53                   	push   ebx
c0019155:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019158:	83 c4 0c             	add    esp,0xc
c001915b:	6a 07                	push   0x7
c001915d:	6a 00                	push   0x0
c001915f:	53                   	push   ebx
c0019160:	e8 8f fa ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019165:	83 c4 0c             	add    esp,0xc
c0019168:	6a 07                	push   0x7
c001916a:	6a 01                	push   0x1
c001916c:	53                   	push   ebx
c001916d:	e8 82 fa ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019172:	83 c4 0c             	add    esp,0xc
c0019175:	6a 01                	push   0x1
c0019177:	6a 00                	push   0x0
c0019179:	53                   	push   ebx
c001917a:	e8 c3 fb ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c001917f:	83 c4 0c             	add    esp,0xc
c0019182:	6a 01                	push   0x1
c0019184:	6a 01                	push   0x1
c0019186:	53                   	push   ebx
c0019187:	e8 b6 fb ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c001918c:	83 c4 2c             	add    esp,0x2c
c001918f:	31 c0                	xor    eax,eax
c0019191:	5b                   	pop    ebx
c0019192:	5e                   	pop    esi
c0019193:	5f                   	pop    edi
c0019194:	5d                   	pop    ebp
c0019195:	c3                   	ret    

c0019196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019196:	55                   	push   ebp
c0019197:	57                   	push   edi
c0019198:	56                   	push   esi
c0019199:	53                   	push   ebx
c001919a:	83 ec 1c             	sub    esp,0x1c
c001919d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00191a5:	8d 50 f8             	lea    edx,[eax-0x8]
c00191a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00191ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00191b0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00191b4:	80 fa 03             	cmp    dl,0x3
c00191b7:	77 5d                	ja     c0019216 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00191b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00191c1:	0f b6 db             	movzx  ebx,bl
c00191c4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00191c7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00191cb:	83 ca 80             	or     edx,0xffffff80
c00191ce:	0f b6 d2             	movzx  edx,dl
c00191d1:	52                   	push   edx
c00191d2:	6a 0c                	push   0xc
c00191d4:	53                   	push   ebx
c00191d5:	56                   	push   esi
c00191d6:	e8 59 f9 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191db:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00191e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191e8:	0f b6 c0             	movzx  eax,al
c00191eb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00191ef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00191f1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00191f6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00191fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00191fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019202:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001920a:	83 c4 2c             	add    esp,0x2c
c001920d:	5b                   	pop    ebx
c001920e:	5e                   	pop    esi
c001920f:	5f                   	pop    edi
c0019210:	5d                   	pop    ebp
c0019211:	e9 1e f9 ff ff       	jmp    c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019216:	3c 07                	cmp    al,0x7
c0019218:	77 10                	ja     c001922a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001921a:	0f b6 db             	movzx  ebx,bl
c001921d:	0f b6 d0             	movzx  edx,al
c0019220:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019228:	eb 2d                	jmp    c0019257 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001922a:	3c 0d                	cmp    al,0xd
c001922c:	77 13                	ja     c0019241 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001922e:	0f b6 db             	movzx  ebx,bl
c0019231:	0f b6 c0             	movzx  eax,al
c0019234:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001923b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001923f:	eb 16                	jmp    c0019257 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019241:	3c 15                	cmp    al,0x15
c0019243:	77 14                	ja     c0019259 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019245:	0f b6 db             	movzx  ebx,bl
c0019248:	0f b6 c0             	movzx  eax,al
c001924b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019253:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019257:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019259:	83 c4 1c             	add    esp,0x1c
c001925c:	5b                   	pop    ebx
c001925d:	5e                   	pop    esi
c001925e:	5f                   	pop    edi
c001925f:	5d                   	pop    ebp
c0019260:	c3                   	ret    
c0019261:	90                   	nop

c0019262 <IDE::detect()>:
c0019262:	55                   	push   ebp
c0019263:	57                   	push   edi
c0019264:	56                   	push   esi
c0019265:	53                   	push   ebx
c0019266:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001926c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019273:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001927a:	0f 85 97 02 00 00    	jne    c0019517 <IDE::detect()+0x2b5>
c0019280:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019287:	31 f6                	xor    esi,esi
c0019289:	31 ed                	xor    ebp,ebp
c001928b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019293:	89 e8                	mov    eax,ebp
c0019295:	c1 e0 06             	shl    eax,0x6
c0019298:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00192a0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00192a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192a8:	c1 e0 04             	shl    eax,0x4
c00192ab:	83 c8 a0             	or     eax,0xffffffa0
c00192ae:	0f b6 c0             	movzx  eax,al
c00192b1:	50                   	push   eax
c00192b2:	6a 06                	push   0x6
c00192b4:	56                   	push   esi
c00192b5:	53                   	push   ebx
c00192b6:	e8 79 f8 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192bb:	83 c4 0c             	add    esp,0xc
c00192be:	6a 0c                	push   0xc
c00192c0:	56                   	push   esi
c00192c1:	53                   	push   ebx
c00192c2:	e8 2d f9 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00192c7:	83 c4 0c             	add    esp,0xc
c00192ca:	6a 0c                	push   0xc
c00192cc:	56                   	push   esi
c00192cd:	53                   	push   ebx
c00192ce:	e8 21 f9 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00192d3:	83 c4 0c             	add    esp,0xc
c00192d6:	6a 0c                	push   0xc
c00192d8:	56                   	push   esi
c00192d9:	53                   	push   ebx
c00192da:	e8 15 f9 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	6a 0c                	push   0xc
c00192e4:	56                   	push   esi
c00192e5:	53                   	push   ebx
c00192e6:	e8 09 f9 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00192eb:	68 ec 00 00 00       	push   0xec
c00192f0:	6a 07                	push   0x7
c00192f2:	56                   	push   esi
c00192f3:	53                   	push   ebx
c00192f4:	e8 3b f8 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192f9:	83 c4 1c             	add    esp,0x1c
c00192fc:	6a 0c                	push   0xc
c00192fe:	56                   	push   esi
c00192ff:	53                   	push   ebx
c0019300:	e8 ef f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019305:	83 c4 0c             	add    esp,0xc
c0019308:	6a 0c                	push   0xc
c001930a:	56                   	push   esi
c001930b:	53                   	push   ebx
c001930c:	e8 e3 f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019311:	83 c4 0c             	add    esp,0xc
c0019314:	6a 0c                	push   0xc
c0019316:	56                   	push   esi
c0019317:	53                   	push   ebx
c0019318:	e8 d7 f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c001931d:	83 c4 0c             	add    esp,0xc
c0019320:	6a 0c                	push   0xc
c0019322:	56                   	push   esi
c0019323:	53                   	push   ebx
c0019324:	e8 cb f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019329:	83 c4 0c             	add    esp,0xc
c001932c:	6a 0c                	push   0xc
c001932e:	56                   	push   esi
c001932f:	53                   	push   ebx
c0019330:	e8 bf f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019335:	83 c4 10             	add    esp,0x10
c0019338:	84 c0                	test   al,al
c001933a:	0f 84 5f 01 00 00    	je     c001949f <IDE::detect()+0x23d>
c0019340:	31 ff                	xor    edi,edi
c0019342:	50                   	push   eax
c0019343:	6a 0c                	push   0xc
c0019345:	56                   	push   esi
c0019346:	53                   	push   ebx
c0019347:	e8 a8 f8 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	a8 01                	test   al,0x1
c0019351:	0f 85 69 01 00 00    	jne    c00194c0 <IDE::detect()+0x25e>
c0019357:	84 c0                	test   al,al
c0019359:	78 04                	js     c001935f <IDE::detect()+0xfd>
c001935b:	a8 08                	test   al,0x8
c001935d:	75 23                	jne    c0019382 <IDE::detect()+0x120>
c001935f:	47                   	inc    edi
c0019360:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019366:	7e da                	jle    c0019342 <IDE::detect()+0xe0>
c0019368:	83 ec 0c             	sub    esp,0xc
c001936b:	6a 32                	push   0x32
c001936d:	e8 8e a2 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001937b:	75 c5                	jne    c0019342 <IDE::detect()+0xe0>
c001937d:	e9 3e 01 00 00       	jmp    c00194c0 <IDE::detect()+0x25e>
c0019382:	31 c9                	xor    ecx,ecx
c0019384:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019388:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	68 80 00 00 00       	push   0x80
c0019394:	57                   	push   edi
c0019395:	6a 00                	push   0x0
c0019397:	56                   	push   esi
c0019398:	53                   	push   ebx
c0019399:	e8 f8 fd ff ff       	call   c0019196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001939e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00193a3:	89 e8                	mov    eax,ebp
c00193a5:	89 d1                	mov    ecx,edx
c00193a7:	c1 e0 06             	shl    eax,0x6
c00193aa:	01 d8                	add    eax,ebx
c00193ac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00193b3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00193ba:	89 f2                	mov    edx,esi
c00193bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00193c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00193c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00193cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00193d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00193df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00193e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00193ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00193f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00193fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019401:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019405:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019409:	83 c4 20             	add    esp,0x20
c001940c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001940f:	83 c0 02             	add    eax,0x2
c0019412:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019418:	83 c7 02             	add    edi,0x2
c001941b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001941e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019424:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019428:	75 e2                	jne    c001940c <IDE::detect()+0x1aa>
c001942a:	89 e8                	mov    eax,ebp
c001942c:	c1 e0 06             	shl    eax,0x6
c001942f:	01 d8                	add    eax,ebx
c0019431:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019437:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001943e:	66 c1 ea 09          	shr    dx,0x9
c0019442:	83 e2 01             	and    edx,0x1
c0019445:	84 c9                	test   cl,cl
c0019447:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001944d:	75 22                	jne    c0019471 <IDE::detect()+0x20f>
c001944f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019456:	74 46                	je     c001949e <IDE::detect()+0x23c>
c0019458:	83 ec 0c             	sub    esp,0xc
c001945b:	68 7c 01 00 00       	push   0x17c
c0019460:	e8 9c e3 fe ff       	call   c0007801 <malloc>
c0019465:	89 c7                	mov    edi,eax
c0019467:	89 04 24             	mov    DWORD PTR [esp],eax
c001946a:	e8 11 05 00 00       	call   c0019980 <ATA::ATA()>
c001946f:	eb 17                	jmp    c0019488 <IDE::detect()+0x226>
c0019471:	83 ec 0c             	sub    esp,0xc
c0019474:	68 84 01 00 00       	push   0x184
c0019479:	e8 83 e3 fe ff       	call   c0007801 <malloc>
c001947e:	89 c7                	mov    edi,eax
c0019480:	89 04 24             	mov    DWORD PTR [esp],eax
c0019483:	e8 f0 0a 00 00       	call   c0019f78 <ATAPI::ATAPI()>
c0019488:	5a                   	pop    edx
c0019489:	59                   	pop    ecx
c001948a:	57                   	push   edi
c001948b:	53                   	push   ebx
c001948c:	e8 4b 24 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c0019491:	8b 07                	mov    eax,DWORD PTR [edi]
c0019493:	53                   	push   ebx
c0019494:	55                   	push   ebp
c0019495:	6a 00                	push   0x0
c0019497:	57                   	push   edi
c0019498:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001949b:	83 c4 20             	add    esp,0x20
c001949e:	45                   	inc    ebp
c001949f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00194a4:	74 0d                	je     c00194b3 <IDE::detect()+0x251>
c00194a6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00194ae:	e9 e0 fd ff ff       	jmp    c0019293 <IDE::detect()+0x31>
c00194b3:	4e                   	dec    esi
c00194b4:	74 61                	je     c0019517 <IDE::detect()+0x2b5>
c00194b6:	be 01 00 00 00       	mov    esi,0x1
c00194bb:	e9 cb fd ff ff       	jmp    c001928b <IDE::detect()+0x29>
c00194c0:	50                   	push   eax
c00194c1:	6a 04                	push   0x4
c00194c3:	56                   	push   esi
c00194c4:	53                   	push   ebx
c00194c5:	e8 2a f7 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00194ca:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00194ce:	83 c4 0c             	add    esp,0xc
c00194d1:	6a 05                	push   0x5
c00194d3:	56                   	push   esi
c00194d4:	53                   	push   ebx
c00194d5:	e8 1a f7 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194e1:	80 fa 14             	cmp    dl,0x14
c00194e4:	75 04                	jne    c00194ea <IDE::detect()+0x288>
c00194e6:	3c eb                	cmp    al,0xeb
c00194e8:	eb 07                	jmp    c00194f1 <IDE::detect()+0x28f>
c00194ea:	3c 96                	cmp    al,0x96
c00194ec:	75 b1                	jne    c001949f <IDE::detect()+0x23d>
c00194ee:	80 fa 69             	cmp    dl,0x69
c00194f1:	75 ac                	jne    c001949f <IDE::detect()+0x23d>
c00194f3:	68 a1 00 00 00       	push   0xa1
c00194f8:	6a 07                	push   0x7
c00194fa:	56                   	push   esi
c00194fb:	53                   	push   ebx
c00194fc:	e8 33 f6 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019501:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019508:	e8 f3 a0 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	b1 01                	mov    cl,0x1
c0019512:	e9 6d fe ff ff       	jmp    c0019384 <IDE::detect()+0x122>
c0019517:	81 c4 1c 02 00 00    	add    esp,0x21c
c001951d:	5b                   	pop    ebx
c001951e:	5e                   	pop    esi
c001951f:	5f                   	pop    edi
c0019520:	5d                   	pop    ebp
c0019521:	c3                   	ret    

c0019522 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019522:	55                   	push   ebp
c0019523:	57                   	push   edi
c0019524:	56                   	push   esi
c0019525:	53                   	push   ebx
c0019526:	83 ec 1c             	sub    esp,0x1c
c0019529:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001952d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019531:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019535:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019539:	88 c3                	mov    bl,al
c001953b:	84 c0                	test   al,al
c001953d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019541:	0f 84 81 00 00 00    	je     c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019547:	83 ec 0c             	sub    esp,0xc
c001954a:	68 b7 ed 01 c0       	push   0xc001edb7
c001954f:	e8 48 0f ff ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001955b:	3c 01                	cmp    al,0x1
c001955d:	74 63                	je     c00195c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001955f:	3c 02                	cmp    al,0x2
c0019561:	75 53                	jne    c00195b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019563:	01 f6                	add    esi,esi
c0019565:	09 ee                	or     esi,ebp
c0019567:	50                   	push   eax
c0019568:	89 f0                	mov    eax,esi
c001956a:	6a 01                	push   0x1
c001956c:	0f b6 f0             	movzx  esi,al
c001956f:	c1 e6 06             	shl    esi,0x6
c0019572:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001957a:	50                   	push   eax
c001957b:	57                   	push   edi
c001957c:	e8 73 f6 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	a8 01                	test   al,0x1
c0019586:	74 02                	je     c001958a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019588:	b3 07                	mov    bl,0x7
c001958a:	a8 02                	test   al,0x2
c001958c:	74 02                	je     c0019590 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001958e:	b3 03                	mov    bl,0x3
c0019590:	a8 04                	test   al,0x4
c0019592:	74 02                	je     c0019596 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019594:	b3 14                	mov    bl,0x14
c0019596:	a8 08                	test   al,0x8
c0019598:	74 02                	je     c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001959a:	b3 03                	mov    bl,0x3
c001959c:	a8 10                	test   al,0x10
c001959e:	74 02                	je     c00195a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00195a0:	b3 15                	mov    bl,0x15
c00195a2:	a8 20                	test   al,0x20
c00195a4:	74 02                	je     c00195a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00195a6:	b3 03                	mov    bl,0x3
c00195a8:	a8 40                	test   al,0x40
c00195aa:	74 02                	je     c00195ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00195ac:	b3 16                	mov    bl,0x16
c00195ae:	84 c0                	test   al,al
c00195b0:	79 16                	jns    c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195b2:	b3 0d                	mov    bl,0xd
c00195b4:	eb 12                	jmp    c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195b6:	3c 03                	cmp    al,0x3
c00195b8:	74 0c                	je     c00195c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00195ba:	3c 04                	cmp    al,0x4
c00195bc:	75 0a                	jne    c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195be:	b3 08                	mov    bl,0x8
c00195c0:	eb 06                	jmp    c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195c2:	b3 13                	mov    bl,0x13
c00195c4:	eb 02                	jmp    c00195c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195c6:	b3 17                	mov    bl,0x17
c00195c8:	83 c4 1c             	add    esp,0x1c
c00195cb:	88 d8                	mov    al,bl
c00195cd:	5b                   	pop    ebx
c00195ce:	5e                   	pop    esi
c00195cf:	5f                   	pop    edi
c00195d0:	5d                   	pop    ebp
c00195d1:	c3                   	ret    

c00195d2 <IDE::polling(unsigned char, unsigned int)>:
c00195d2:	55                   	push   ebp
c00195d3:	bd 04 00 00 00       	mov    ebp,0x4
c00195d8:	57                   	push   edi
c00195d9:	56                   	push   esi
c00195da:	53                   	push   ebx
c00195db:	83 ec 0c             	sub    esp,0xc
c00195de:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195e2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00195e6:	0f b6 f3             	movzx  esi,bl
c00195e9:	52                   	push   edx
c00195ea:	6a 0c                	push   0xc
c00195ec:	56                   	push   esi
c00195ed:	57                   	push   edi
c00195ee:	e8 01 f6 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	4d                   	dec    ebp
c00195f7:	75 ed                	jne    c00195e6 <IDE::polling(unsigned char, unsigned int)+0x14>
c00195f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00195fe:	50                   	push   eax
c00195ff:	6a 0c                	push   0xc
c0019601:	56                   	push   esi
c0019602:	57                   	push   edi
c0019603:	e8 ec f5 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	a8 01                	test   al,0x1
c001960d:	75 17                	jne    c0019626 <IDE::polling(unsigned char, unsigned int)+0x54>
c001960f:	a8 20                	test   al,0x20
c0019611:	75 0f                	jne    c0019622 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019613:	4b                   	dec    ebx
c0019614:	74 10                	je     c0019626 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019616:	84 c0                	test   al,al
c0019618:	78 e4                	js     c00195fe <IDE::polling(unsigned char, unsigned int)+0x2c>
c001961a:	a8 08                	test   al,0x8
c001961c:	74 e0                	je     c00195fe <IDE::polling(unsigned char, unsigned int)+0x2c>
c001961e:	31 c0                	xor    eax,eax
c0019620:	eb 06                	jmp    c0019628 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019622:	b0 01                	mov    al,0x1
c0019624:	eb 02                	jmp    c0019628 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019626:	b0 02                	mov    al,0x2
c0019628:	83 c4 0c             	add    esp,0xc
c001962b:	5b                   	pop    ebx
c001962c:	5e                   	pop    esi
c001962d:	5f                   	pop    edi
c001962e:	5d                   	pop    ebp
c001962f:	c3                   	ret    

c0019630 <SATABus::close(int, int, void*)>:
c0019630:	31 c0                	xor    eax,eax
c0019632:	c3                   	ret    
c0019633:	90                   	nop

c0019634 <SATABus::detect()>:
c0019634:	c3                   	ret    
c0019635:	90                   	nop

c0019636 <SATABus::SATABus()>:
c0019636:	83 ec 0c             	sub    esp,0xc
c0019639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001963d:	83 ec 08             	sub    esp,0x8
c0019640:	68 f0 ed 01 c0       	push   0xc001edf0
c0019645:	50                   	push   eax
c0019646:	e8 d5 25 ff ff       	call   c000bc20 <HardDiskController::HardDiskController(char const*)>
c001964b:	83 c4 10             	add    esp,0x10
c001964e:	ba 1c ee 01 c0       	mov    edx,0xc001ee1c
c0019653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019657:	89 10                	mov    DWORD PTR [eax],edx
c0019659:	83 ec 0c             	sub    esp,0xc
c001965c:	6a 50                	push   0x50
c001965e:	e8 38 e5 fe ff       	call   c0007b9b <Phys::allocateContiguousPages(int)>
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	89 c2                	mov    edx,eax
c0019668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001966c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019672:	83 ec 0c             	sub    esp,0xc
c0019675:	6a 50                	push   0x50
c0019677:	e8 cd fb fe ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	89 c2                	mov    edx,eax
c0019681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019685:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001968b:	a1 50 06 02 c0       	mov    eax,ds:0xc0020650
c0019690:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019694:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001969a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001969e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00196a4:	83 ec 0c             	sub    esp,0xc
c00196a7:	6a 03                	push   0x3
c00196a9:	6a 50                	push   0x50
c00196ab:	51                   	push   ecx
c00196ac:	52                   	push   edx
c00196ad:	50                   	push   eax
c00196ae:	e8 25 05 ff ff       	call   c0009bd8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196b3:	83 c4 20             	add    esp,0x20
c00196b6:	90                   	nop
c00196b7:	83 c4 0c             	add    esp,0xc
c00196ba:	c3                   	ret    
c00196bb:	90                   	nop

c00196bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00196bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196c0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00196c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196c6:	09 c2                	or     edx,eax
c00196c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00196d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00196d4:	31 c0                	xor    eax,eax
c00196d6:	c1 e9 08             	shr    ecx,0x8
c00196d9:	83 e1 0f             	and    ecx,0xf
c00196dc:	39 c8                	cmp    eax,ecx
c00196de:	74 0a                	je     c00196ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00196e0:	f6 c2 01             	test   dl,0x1
c00196e3:	74 08                	je     c00196ed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00196e5:	d1 ea                	shr    edx,1
c00196e7:	40                   	inc    eax
c00196e8:	eb f2                	jmp    c00196dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00196ea:	83 c8 ff             	or     eax,0xffffffff
c00196ed:	c3                   	ret    

c00196ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00196ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00196f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00196f5:	89 c2                	mov    edx,eax
c00196f7:	c1 ea 08             	shr    edx,0x8
c00196fa:	83 e2 0f             	and    edx,0xf
c00196fd:	fe ca                	dec    dl
c00196ff:	75 31                	jne    c0019732 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019701:	83 e0 0f             	and    eax,0xf
c0019704:	3c 03                	cmp    al,0x3
c0019706:	75 2a                	jne    c0019732 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019708:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001970b:	b8 02 00 00 00       	mov    eax,0x2
c0019710:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019716:	74 1c                	je     c0019734 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019718:	b8 04 00 00 00       	mov    eax,0x4
c001971d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019723:	74 0f                	je     c0019734 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019725:	31 c0                	xor    eax,eax
c0019727:	83 fa 03             	cmp    edx,0x3
c001972a:	0f 94 c0             	sete   al
c001972d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019731:	c3                   	ret    
c0019732:	31 c0                	xor    eax,eax
c0019734:	c3                   	ret    
c0019735:	90                   	nop

c0019736 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001973a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001973d:	0f ba e2 0f          	bt     edx,0xf
c0019741:	72 f7                	jb     c001973a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019743:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019746:	83 ca 10             	or     edx,0x10
c0019749:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001974c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001974f:	83 ca 01             	or     edx,0x1
c0019752:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019755:	c3                   	ret    

c0019756 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001975a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001975d:	83 e2 fe             	and    edx,0xfffffffe
c0019760:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019763:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019766:	83 e2 ef             	and    edx,0xffffffef
c0019769:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001976c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001976f:	0f ba e2 0e          	bt     edx,0xe
c0019773:	72 f7                	jb     c001976c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019775:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019778:	0f ba e2 0f          	bt     edx,0xf
c001977c:	72 ee                	jb     c001976c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001977e:	c3                   	ret    
c001977f:	90                   	nop

c0019780 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019780:	55                   	push   ebp
c0019781:	57                   	push   edi
c0019782:	56                   	push   esi
c0019783:	53                   	push   ebx
c0019784:	83 ec 1c             	sub    esp,0x1c
c0019787:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001978b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001978f:	53                   	push   ebx
c0019790:	56                   	push   esi
c0019791:	e8 c0 ff ff ff       	call   c0019756 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019796:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001979a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197a0:	83 ec 0c             	sub    esp,0xc
c00197a3:	c1 e5 0a             	shl    ebp,0xa
c00197a6:	01 e8                	add    eax,ebp
c00197a8:	89 03                	mov    DWORD PTR [ebx],eax
c00197aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197ac:	68 00 04 00 00       	push   0x400
c00197b1:	6a 00                	push   0x0
c00197b3:	50                   	push   eax
c00197b4:	e8 17 6d fe ff       	call   c00004d0 <memset>
c00197b9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00197bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00197c3:	01 e8                	add    eax,ebp
c00197c5:	83 c4 1c             	add    esp,0x1c
c00197c8:	89 03                	mov    DWORD PTR [ebx],eax
c00197ca:	c1 e2 08             	shl    edx,0x8
c00197cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00197d4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00197da:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197e0:	01 f8                	add    eax,edi
c00197e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00197e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00197e8:	68 00 01 00 00       	push   0x100
c00197ed:	6a 00                	push   0x0
c00197ef:	50                   	push   eax
c00197f0:	e8 db 6c fe ff       	call   c00004d0 <memset>
c00197f5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00197fb:	01 fa                	add    edx,edi
c00197fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019801:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019804:	c1 e7 0d             	shl    edi,0xd
c0019807:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001980e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019814:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001981a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001981e:	31 ff                	xor    edi,edi
c0019820:	83 c4 10             	add    esp,0x10
c0019823:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001982d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019833:	83 c5 20             	add    ebp,0x20
c0019836:	01 f8                	add    eax,edi
c0019838:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001983b:	52                   	push   edx
c001983c:	68 00 01 00 00       	push   0x100
c0019841:	6a 00                	push   0x0
c0019843:	50                   	push   eax
c0019844:	e8 87 6c fe ff       	call   c00004d0 <memset>
c0019849:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019856:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001985d:	01 f8                	add    eax,edi
c001985f:	81 c7 00 01 00 00    	add    edi,0x100
c0019865:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019868:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001986e:	75 b3                	jne    c0019823 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019870:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019877:	50                   	push   eax
c0019878:	50                   	push   eax
c0019879:	53                   	push   ebx
c001987a:	56                   	push   esi
c001987b:	e8 b6 fe ff ff       	call   c0019736 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019880:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019887:	83 c4 2c             	add    esp,0x2c
c001988a:	5b                   	pop    ebx
c001988b:	5e                   	pop    esi
c001988c:	5f                   	pop    edi
c001988d:	5d                   	pop    ebp
c001988e:	c3                   	ret    
c001988f:	90                   	nop

c0019890 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019890:	55                   	push   ebp
c0019891:	57                   	push   edi
c0019892:	56                   	push   esi
c0019893:	53                   	push   ebx
c0019894:	31 db                	xor    ebx,ebx
c0019896:	83 ec 0c             	sub    esp,0xc
c0019899:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001989d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198a1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00198a4:	f7 c7 01 00 00 00    	test   edi,0x1
c00198aa:	74 7a                	je     c0019926 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198ac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00198b0:	89 d8                	mov    eax,ebx
c00198b2:	c1 e0 07             	shl    eax,0x7
c00198b5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00198bc:	55                   	push   ebp
c00198bd:	56                   	push   esi
c00198be:	e8 2b fe ff ff       	call   c00196ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00198c3:	5a                   	pop    edx
c00198c4:	83 f8 01             	cmp    eax,0x1
c00198c7:	59                   	pop    ecx
c00198c8:	75 21                	jne    c00198eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00198ca:	50                   	push   eax
c00198cb:	53                   	push   ebx
c00198cc:	55                   	push   ebp
c00198cd:	56                   	push   esi
c00198ce:	e8 ad fe ff ff       	call   c0019780 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198d3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00198da:	e8 22 df fe ff       	call   c0007801 <malloc>
c00198df:	89 c5                	mov    ebp,eax
c00198e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e4:	e8 43 0d 00 00       	call   c001a62c <SATA::SATA()>
c00198e9:	eb 24                	jmp    c001990f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00198eb:	83 f8 04             	cmp    eax,0x4
c00198ee:	75 36                	jne    c0019926 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198f0:	51                   	push   ecx
c00198f1:	53                   	push   ebx
c00198f2:	55                   	push   ebp
c00198f3:	56                   	push   esi
c00198f4:	e8 87 fe ff ff       	call   c0019780 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198f9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019900:	e8 fc de fe ff       	call   c0007801 <malloc>
c0019905:	89 c5                	mov    ebp,eax
c0019907:	89 04 24             	mov    DWORD PTR [esp],eax
c001990a:	e8 79 10 00 00       	call   c001a988 <SATAPI::SATAPI()>
c001990f:	58                   	pop    eax
c0019910:	5a                   	pop    edx
c0019911:	55                   	push   ebp
c0019912:	56                   	push   esi
c0019913:	e8 c4 1f ff ff       	call   c000b8dc <Device::addChild(Device*)>
c0019918:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001991b:	56                   	push   esi
c001991c:	6a 00                	push   0x0
c001991e:	53                   	push   ebx
c001991f:	55                   	push   ebp
c0019920:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019923:	83 c4 20             	add    esp,0x20
c0019926:	d1 ef                	shr    edi,1
c0019928:	43                   	inc    ebx
c0019929:	83 fb 20             	cmp    ebx,0x20
c001992c:	0f 85 72 ff ff ff    	jne    c00198a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019932:	83 c4 0c             	add    esp,0xc
c0019935:	5b                   	pop    ebx
c0019936:	5e                   	pop    esi
c0019937:	5f                   	pop    edi
c0019938:	5d                   	pop    ebp
c0019939:	c3                   	ret    

c001993a <SATABus::open(int, int, void*)>:
c001993a:	83 ec 14             	sub    esp,0x14
c001993d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019941:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019947:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001994d:	52                   	push   edx
c001994e:	50                   	push   eax
c001994f:	e8 3c ff ff ff       	call   c0019890 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019954:	31 c0                	xor    eax,eax
c0019956:	83 c4 1c             	add    esp,0x1c
c0019959:	c3                   	ret    

c001995a <ATA::close(int, int, void*)>:
c001995a:	83 ec 0c             	sub    esp,0xc
c001995d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019961:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019967:	85 c0                	test   eax,eax
c0019969:	74 0c                	je     c0019977 <ATA::close(int, int, void*)+0x1d>
c001996b:	83 ec 0c             	sub    esp,0xc
c001996e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019970:	50                   	push   eax
c0019971:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	31 c0                	xor    eax,eax
c0019979:	83 c4 0c             	add    esp,0xc
c001997c:	c3                   	ret    
c001997d:	90                   	nop

c001997e <ATA::powerSaving(PowerSavingLevel)>:
c001997e:	c3                   	ret    
c001997f:	90                   	nop

c0019980 <ATA::ATA()>:
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019987:	83 ec 04             	sub    esp,0x4
c001998a:	68 00 02 00 00       	push   0x200
c001998f:	68 e9 ee 01 c0       	push   0xc001eee9
c0019994:	50                   	push   eax
c0019995:	e8 10 23 ff ff       	call   c000bcaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001999a:	83 c4 10             	add    esp,0x10
c001999d:	ba 5c ee 01 c0       	mov    edx,0xc001ee5c
c00199a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199a6:	89 10                	mov    DWORD PTR [eax],edx
c00199a8:	90                   	nop
c00199a9:	83 c4 0c             	add    esp,0xc
c00199ac:	c3                   	ret    
c00199ad:	90                   	nop

c00199ae <ATA::flush(bool)>:
c00199ae:	53                   	push   ebx
c00199af:	83 ec 08             	sub    esp,0x8
c00199b2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00199b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199bb:	19 c0                	sbb    eax,eax
c00199bd:	83 e0 fd             	and    eax,0xfffffffd
c00199c0:	05 ea 00 00 00       	add    eax,0xea
c00199c5:	50                   	push   eax
c00199c6:	6a 07                	push   0x7
c00199c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199cf:	50                   	push   eax
c00199d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199d6:	e8 59 f1 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199db:	83 c4 0c             	add    esp,0xc
c00199de:	6a 00                	push   0x0
c00199e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199e7:	50                   	push   eax
c00199e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199ee:	e8 df fb ff ff       	call   c00195d2 <IDE::polling(unsigned char, unsigned int)>
c00199f3:	83 c4 18             	add    esp,0x18
c00199f6:	5b                   	pop    ebx
c00199f7:	c3                   	ret    

c00199f8 <ATA::readyForCommand()>:
c00199f8:	56                   	push   esi
c00199f9:	53                   	push   ebx
c00199fa:	53                   	push   ebx
c00199fb:	31 db                	xor    ebx,ebx
c00199fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a01:	51                   	push   ecx
c0019a02:	6a 0c                	push   0xc
c0019a04:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a0b:	50                   	push   eax
c0019a0c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a12:	e8 dd f1 ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	a8 88                	test   al,0x88
c0019a1c:	74 1f                	je     c0019a3d <ATA::readyForCommand()+0x45>
c0019a1e:	43                   	inc    ebx
c0019a1f:	83 fb 63             	cmp    ebx,0x63
c0019a22:	7e dd                	jle    c0019a01 <ATA::readyForCommand()+0x9>
c0019a24:	83 ec 0c             	sub    esp,0xc
c0019a27:	6a 0a                	push   0xa
c0019a29:	e8 d2 9b ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019a37:	75 c8                	jne    c0019a01 <ATA::readyForCommand()+0x9>
c0019a39:	31 c0                	xor    eax,eax
c0019a3b:	eb 02                	jmp    c0019a3f <ATA::readyForCommand()+0x47>
c0019a3d:	b0 01                	mov    al,0x1
c0019a3f:	5a                   	pop    edx
c0019a40:	5b                   	pop    ebx
c0019a41:	5e                   	pop    esi
c0019a42:	c3                   	ret    
c0019a43:	90                   	nop

c0019a44 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a44:	55                   	push   ebp
c0019a45:	57                   	push   edi
c0019a46:	56                   	push   esi
c0019a47:	53                   	push   ebx
c0019a48:	83 ec 2c             	sub    esp,0x2c
c0019a4b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a53:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a5b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a5f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a67:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a71:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019a77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a7b:	c1 e0 06             	shl    eax,0x6
c0019a7e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019a86:	74 5d                	je     c0019ae5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019a88:	89 fa                	mov    edx,edi
c0019a8a:	89 f0                	mov    eax,esi
c0019a8c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019a90:	c1 ea 1c             	shr    edx,0x1c
c0019a93:	89 d1                	mov    ecx,edx
c0019a95:	09 c1                	or     ecx,eax
c0019a97:	74 25                	je     c0019abe <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019a99:	31 ed                	xor    ebp,ebp
c0019a9b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019aa2:	89 fa                	mov    edx,edi
c0019aa4:	89 f0                	mov    eax,esi
c0019aa6:	0f ad d0             	shrd   eax,edx,cl
c0019aa9:	d3 ea                	shr    edx,cl
c0019aab:	f6 c1 20             	test   cl,0x20
c0019aae:	74 02                	je     c0019ab2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019ab0:	89 d0                	mov    eax,edx
c0019ab2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019ab6:	45                   	inc    ebp
c0019ab7:	83 fd 06             	cmp    ebp,0x6
c0019aba:	75 df                	jne    c0019a9b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019abc:	eb 76                	jmp    c0019b34 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019abe:	89 f0                	mov    eax,esi
c0019ac0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019ac5:	89 fa                	mov    edx,edi
c0019ac7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ace:	0f ac d0 10          	shrd   eax,edx,0x10
c0019ad2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019ad7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019adb:	c1 ee 18             	shr    esi,0x18
c0019ade:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019ae3:	eb 56                	jmp    c0019b3b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019ae5:	6a 00                	push   0x0
c0019ae7:	6a 3f                	push   0x3f
c0019ae9:	57                   	push   edi
c0019aea:	56                   	push   esi
c0019aeb:	e8 60 22 00 00       	call   c001bd50 <__umoddi3>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	40                   	inc    eax
c0019af4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019af8:	6a 00                	push   0x0
c0019afa:	68 f0 03 00 00       	push   0x3f0
c0019aff:	57                   	push   edi
c0019b00:	56                   	push   esi
c0019b01:	e8 4a 21 00 00       	call   c001bc50 <__udivdi3>
c0019b06:	83 c4 10             	add    esp,0x10
c0019b09:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b0e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b15:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b1a:	6a 00                	push   0x0
c0019b1c:	6a 3f                	push   0x3f
c0019b1e:	57                   	push   edi
c0019b1f:	56                   	push   esi
c0019b20:	e8 2b 21 00 00       	call   c001bc50 <__udivdi3>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	89 c6                	mov    esi,eax
c0019b2a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019b2f:	83 e6 0f             	and    esi,0xf
c0019b32:	eb 07                	jmp    c0019b3b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b34:	31 f6                	xor    esi,esi
c0019b36:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019b3b:	bf 01 00 00 00       	mov    edi,0x1
c0019b40:	50                   	push   eax
c0019b41:	6a 00                	push   0x0
c0019b43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b4a:	50                   	push   eax
c0019b4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b4f:	e8 ee f1 ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c0019b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b57:	e8 9c fe ff ff       	call   c00199f8 <ATA::readyForCommand()>
c0019b5c:	83 c4 10             	add    esp,0x10
c0019b5f:	84 c0                	test   al,al
c0019b61:	0f 84 4e 02 00 00    	je     c0019db5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019b67:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019b6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019b73:	c1 e0 04             	shl    eax,0x4
c0019b76:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019b7d:	09 c6                	or     esi,eax
c0019b7f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019b84:	75 05                	jne    c0019b8b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019b86:	83 ce a0             	or     esi,0xffffffa0
c0019b89:	eb 03                	jmp    c0019b8e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019b8b:	83 ce e0             	or     esi,0xffffffe0
c0019b8e:	89 f0                	mov    eax,esi
c0019b90:	0f b6 f0             	movzx  esi,al
c0019b93:	56                   	push   esi
c0019b94:	6a 06                	push   0x6
c0019b96:	51                   	push   ecx
c0019b97:	52                   	push   edx
c0019b98:	e8 97 ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b9d:	83 c4 10             	add    esp,0x10
c0019ba0:	6a 00                	push   0x0
c0019ba2:	6a 01                	push   0x1
c0019ba4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bab:	50                   	push   eax
c0019bac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bb2:	e8 7d ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bb7:	83 c4 10             	add    esp,0x10
c0019bba:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019bbf:	75 6e                	jne    c0019c2f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019bc1:	6a 00                	push   0x0
c0019bc3:	6a 08                	push   0x8
c0019bc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bcc:	50                   	push   eax
c0019bcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bd3:	e8 5c ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bd8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019bdd:	50                   	push   eax
c0019bde:	6a 09                	push   0x9
c0019be0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019be7:	50                   	push   eax
c0019be8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bee:	e8 41 ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bf3:	83 c4 20             	add    esp,0x20
c0019bf6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019bfb:	50                   	push   eax
c0019bfc:	6a 0a                	push   0xa
c0019bfe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c05:	50                   	push   eax
c0019c06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c0c:	e8 23 ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c11:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019c16:	50                   	push   eax
c0019c17:	6a 0b                	push   0xb
c0019c19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c20:	50                   	push   eax
c0019c21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c27:	e8 08 ef ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c2c:	83 c4 20             	add    esp,0x20
c0019c2f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019c34:	50                   	push   eax
c0019c35:	6a 02                	push   0x2
c0019c37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c3e:	50                   	push   eax
c0019c3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c45:	e8 ea ee ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c4a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c4f:	50                   	push   eax
c0019c50:	6a 03                	push   0x3
c0019c52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c59:	50                   	push   eax
c0019c5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c60:	e8 cf ee ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c65:	83 c4 20             	add    esp,0x20
c0019c68:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019c6d:	50                   	push   eax
c0019c6e:	6a 04                	push   0x4
c0019c70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c77:	50                   	push   eax
c0019c78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c7e:	e8 b1 ee ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c88:	50                   	push   eax
c0019c89:	6a 05                	push   0x5
c0019c8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c92:	50                   	push   eax
c0019c93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c99:	e8 96 ee ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c9e:	83 c4 20             	add    esp,0x20
c0019ca1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019ca6:	0f 94 c0             	sete   al
c0019ca9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019cae:	74 09                	je     c0019cb9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019cb0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019cb7:	eb 07                	jmp    c0019cc0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019cb9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019cc0:	0f b6 c0             	movzx  eax,al
c0019cc3:	50                   	push   eax
c0019cc4:	6a 07                	push   0x7
c0019cc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ccd:	50                   	push   eax
c0019cce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cd4:	e8 5b ee ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cd9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	85 f6                	test   esi,esi
c0019ce2:	0f 84 ae 00 00 00    	je     c0019d96 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019ce8:	50                   	push   eax
c0019ce9:	6a 01                	push   0x1
c0019ceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cf2:	50                   	push   eax
c0019cf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cf9:	e8 d4 f8 ff ff       	call   c00195d2 <IDE::polling(unsigned char, unsigned int)>
c0019cfe:	83 c4 10             	add    esp,0x10
c0019d01:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d07:	84 c0                	test   al,al
c0019d09:	74 20                	je     c0019d2b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d0b:	0f b6 f8             	movzx  edi,al
c0019d0e:	0f b6 d2             	movzx  edx,dl
c0019d11:	57                   	push   edi
c0019d12:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019d19:	50                   	push   eax
c0019d1a:	52                   	push   edx
c0019d1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d21:	e8 fc f7 ff ff       	call   c0019522 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019d26:	e9 87 00 00 00       	jmp    c0019db2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019d2b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d30:	74 33                	je     c0019d65 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019d32:	31 ed                	xor    ebp,ebp
c0019d34:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019d38:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019d3c:	50                   	push   eax
c0019d3d:	50                   	push   eax
c0019d3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d45:	50                   	push   eax
c0019d46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d4c:	e8 d1 ed ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c0019d51:	89 c2                	mov    edx,eax
c0019d53:	89 f8                	mov    eax,edi
c0019d55:	66 ef                	out    dx,ax
c0019d57:	45                   	inc    ebp
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019d61:	75 d1                	jne    c0019d34 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019d63:	eb 23                	jmp    c0019d88 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019d65:	0f b6 d2             	movzx  edx,dl
c0019d68:	51                   	push   ecx
c0019d69:	51                   	push   ecx
c0019d6a:	52                   	push   edx
c0019d6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d71:	e8 ac ed ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c0019d76:	b9 00 01 00 00       	mov    ecx,0x100
c0019d7b:	89 c2                	mov    edx,eax
c0019d7d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019d81:	fc                   	cld    
c0019d82:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019d90:	4e                   	dec    esi
c0019d91:	e9 4a ff ff ff       	jmp    c0019ce0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019d96:	31 ff                	xor    edi,edi
c0019d98:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d9d:	74 16                	je     c0019db5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019d9f:	50                   	push   eax
c0019da0:	50                   	push   eax
c0019da1:	31 c0                	xor    eax,eax
c0019da3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019da8:	0f 94 c0             	sete   al
c0019dab:	50                   	push   eax
c0019dac:	53                   	push   ebx
c0019dad:	e8 fc fb ff ff       	call   c00199ae <ATA::flush(bool)>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	83 c4 2c             	add    esp,0x2c
c0019db8:	89 f8                	mov    eax,edi
c0019dba:	5b                   	pop    ebx
c0019dbb:	5e                   	pop    esi
c0019dbc:	5f                   	pop    edi
c0019dbd:	5d                   	pop    ebp
c0019dbe:	c3                   	ret    
c0019dbf:	90                   	nop

c0019dc0 <ATA::read(unsigned long long, int, void*)>:
c0019dc0:	57                   	push   edi
c0019dc1:	b8 04 00 00 00       	mov    eax,0x4
c0019dc6:	56                   	push   esi
c0019dc7:	53                   	push   ebx
c0019dc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dcc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019dd0:	8d 7a ff             	lea    edi,[edx-0x1]
c0019dd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019dd7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ddb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019de1:	77 25                	ja     c0019e08 <ATA::read(unsigned long long, int, void*)+0x48>
c0019de3:	b8 06 00 00 00       	mov    eax,0x6
c0019de8:	85 f6                	test   esi,esi
c0019dea:	74 1c                	je     c0019e08 <ATA::read(unsigned long long, int, void*)+0x48>
c0019dec:	50                   	push   eax
c0019ded:	50                   	push   eax
c0019dee:	6a 00                	push   0x0
c0019df0:	56                   	push   esi
c0019df1:	52                   	push   edx
c0019df2:	53                   	push   ebx
c0019df3:	51                   	push   ecx
c0019df4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019df8:	e8 47 fc ff ff       	call   c0019a44 <ATA::access(unsigned long long, int, void*, bool)>
c0019dfd:	83 c4 20             	add    esp,0x20
c0019e00:	85 c0                	test   eax,eax
c0019e02:	0f 95 c0             	setne  al
c0019e05:	0f b6 c0             	movzx  eax,al
c0019e08:	5b                   	pop    ebx
c0019e09:	5e                   	pop    esi
c0019e0a:	5f                   	pop    edi
c0019e0b:	c3                   	ret    

c0019e0c <ATA::write(unsigned long long, int, void*)>:
c0019e0c:	57                   	push   edi
c0019e0d:	b8 04 00 00 00       	mov    eax,0x4
c0019e12:	56                   	push   esi
c0019e13:	53                   	push   ebx
c0019e14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e1c:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e27:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e2d:	77 25                	ja     c0019e54 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e2f:	b8 06 00 00 00       	mov    eax,0x6
c0019e34:	85 f6                	test   esi,esi
c0019e36:	74 1c                	je     c0019e54 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e38:	50                   	push   eax
c0019e39:	50                   	push   eax
c0019e3a:	6a 01                	push   0x1
c0019e3c:	56                   	push   esi
c0019e3d:	52                   	push   edx
c0019e3e:	53                   	push   ebx
c0019e3f:	51                   	push   ecx
c0019e40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e44:	e8 fb fb ff ff       	call   c0019a44 <ATA::access(unsigned long long, int, void*, bool)>
c0019e49:	83 c4 20             	add    esp,0x20
c0019e4c:	85 c0                	test   eax,eax
c0019e4e:	0f 95 c0             	setne  al
c0019e51:	0f b6 c0             	movzx  eax,al
c0019e54:	5b                   	pop    ebx
c0019e55:	5e                   	pop    esi
c0019e56:	5f                   	pop    edi
c0019e57:	c3                   	ret    

c0019e58 <ATA::detectCHS()>:
c0019e58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e5c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019e62:	c1 e0 06             	shl    eax,0x6
c0019e65:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019e6b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019e75:	c7 44 24 04 40 ee 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ee40
c0019e7d:	e9 7d 62 ff ff       	jmp    c00100ff <KePanic(char const*)>

c0019e82 <ATA::open(int, int, void*)>:
c0019e82:	53                   	push   ebx
c0019e83:	83 ec 08             	sub    esp,0x8
c0019e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e92:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019e98:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019e9e:	c1 e0 06             	shl    eax,0x6
c0019ea1:	01 d0                	add    eax,edx
c0019ea3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019eaa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019eb0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019eb7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019ec1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019ec7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019ece:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019ed5:	75 0c                	jne    c0019ee3 <ATA::open(int, int, void*)+0x61>
c0019ed7:	83 ec 0c             	sub    esp,0xc
c0019eda:	53                   	push   ebx
c0019edb:	e8 78 ff ff ff       	call   c0019e58 <ATA::detectCHS()>
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019ee9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019eef:	c1 e0 06             	shl    eax,0x6
c0019ef2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019ef9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f03:	d1 e8                	shr    eax,1
c0019f05:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f0b:	6a 04                	push   0x4
c0019f0d:	6a 0c                	push   0xc
c0019f0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f16:	50                   	push   eax
c0019f17:	52                   	push   edx
c0019f18:	e8 17 ec ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f1d:	90                   	nop
c0019f1e:	90                   	nop
c0019f1f:	6a 00                	push   0x0
c0019f21:	6a 0c                	push   0xc
c0019f23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f2a:	50                   	push   eax
c0019f2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f31:	e8 fe eb ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f36:	83 c4 14             	add    esp,0x14
c0019f39:	53                   	push   ebx
c0019f3a:	e8 d3 1d ff ff       	call   c000bd12 <PhysicalDisk::startCache()>
c0019f3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f42:	e8 43 2e ff ff       	call   c000cd8a <createPartitionsForDisk(PhysicalDisk*)>
c0019f47:	31 c0                	xor    eax,eax
c0019f49:	83 c4 18             	add    esp,0x18
c0019f4c:	5b                   	pop    ebx
c0019f4d:	c3                   	ret    

c0019f4e <ATAPI::write(unsigned long long, int, void*)>:
c0019f4e:	b8 03 00 00 00       	mov    eax,0x3
c0019f53:	c3                   	ret    

c0019f54 <ATAPI::close(int, int, void*)>:
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f61:	85 c0                	test   eax,eax
c0019f63:	74 0c                	je     c0019f71 <ATAPI::close(int, int, void*)+0x1d>
c0019f65:	83 ec 0c             	sub    esp,0xc
c0019f68:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f6a:	50                   	push   eax
c0019f6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	31 c0                	xor    eax,eax
c0019f73:	83 c4 0c             	add    esp,0xc
c0019f76:	c3                   	ret    
c0019f77:	90                   	nop

c0019f78 <ATAPI::ATAPI()>:
c0019f78:	83 ec 0c             	sub    esp,0xc
c0019f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7f:	83 ec 04             	sub    esp,0x4
c0019f82:	68 00 08 00 00       	push   0x800
c0019f87:	68 89 ef 01 c0       	push   0xc001ef89
c0019f8c:	50                   	push   eax
c0019f8d:	e8 18 1d ff ff       	call   c000bcaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	ba a4 ee 01 c0       	mov    edx,0xc001eea4
c0019f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9e:	89 10                	mov    DWORD PTR [eax],edx
c0019fa0:	90                   	nop
c0019fa1:	83 c4 0c             	add    esp,0xc
c0019fa4:	c3                   	ret    
c0019fa5:	90                   	nop

c0019fa6 <ATAPI::readyForCommand()>:
c0019fa6:	56                   	push   esi
c0019fa7:	53                   	push   ebx
c0019fa8:	53                   	push   ebx
c0019fa9:	31 db                	xor    ebx,ebx
c0019fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019faf:	51                   	push   ecx
c0019fb0:	6a 0c                	push   0xc
c0019fb2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fb9:	50                   	push   eax
c0019fba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fc0:	e8 2f ec ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c0019fc5:	83 c4 10             	add    esp,0x10
c0019fc8:	a8 88                	test   al,0x88
c0019fca:	74 25                	je     c0019ff1 <ATAPI::readyForCommand()+0x4b>
c0019fcc:	43                   	inc    ebx
c0019fcd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019fd3:	7e da                	jle    c0019faf <ATAPI::readyForCommand()+0x9>
c0019fd5:	83 ec 0c             	sub    esp,0xc
c0019fd8:	68 5e 01 00 00       	push   0x15e
c0019fdd:	e8 1e 96 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c0019fe2:	83 c4 10             	add    esp,0x10
c0019fe5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019feb:	75 c2                	jne    c0019faf <ATAPI::readyForCommand()+0x9>
c0019fed:	31 c0                	xor    eax,eax
c0019fef:	eb 02                	jmp    c0019ff3 <ATAPI::readyForCommand()+0x4d>
c0019ff1:	b0 01                	mov    al,0x1
c0019ff3:	5a                   	pop    edx
c0019ff4:	5b                   	pop    ebx
c0019ff5:	5e                   	pop    esi
c0019ff6:	c3                   	ret    
c0019ff7:	90                   	nop

c0019ff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019ff8:	55                   	push   ebp
c0019ff9:	57                   	push   edi
c0019ffa:	56                   	push   esi
c0019ffb:	53                   	push   ebx
c0019ffc:	83 ec 20             	sub    esp,0x20
c0019fff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a003:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a007:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a00b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a00f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a013:	6a 01                	push   0x1
c001a015:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a01c:	50                   	push   eax
c001a01d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a023:	e8 1a ed ff ff       	call   c0018d42 <IDE::enableIRQs(unsigned char, bool)>
c001a028:	5e                   	pop    esi
c001a029:	58                   	pop    eax
c001a02a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a031:	50                   	push   eax
c001a032:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a038:	e8 d1 ea ff ff       	call   c0018b0e <IDE::prepareInterrupt(unsigned char)>
c001a03d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a040:	e8 61 ff ff ff       	call   c0019fa6 <ATAPI::readyForCommand()>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	84 c0                	test   al,al
c001a04a:	75 0a                	jne    c001a056 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a04c:	bb 01 00 00 00       	mov    ebx,0x1
c001a051:	e9 57 02 00 00       	jmp    c001a2ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a056:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a05c:	c1 e0 04             	shl    eax,0x4
c001a05f:	0f b6 c0             	movzx  eax,al
c001a062:	50                   	push   eax
c001a063:	6a 06                	push   0x6
c001a065:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a06c:	50                   	push   eax
c001a06d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a073:	e8 bc ea ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a078:	6a 00                	push   0x0
c001a07a:	6a 01                	push   0x1
c001a07c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a083:	50                   	push   eax
c001a084:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a08a:	e8 a5 ea ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08f:	83 c4 20             	add    esp,0x20
c001a092:	0f b6 c3             	movzx  eax,bl
c001a095:	0f b6 df             	movzx  ebx,bh
c001a098:	50                   	push   eax
c001a099:	6a 04                	push   0x4
c001a09b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0a2:	50                   	push   eax
c001a0a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0a9:	e8 86 ea ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ae:	53                   	push   ebx
c001a0af:	6a 05                	push   0x5
c001a0b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0b8:	50                   	push   eax
c001a0b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0bf:	e8 70 ea ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c4:	83 c4 20             	add    esp,0x20
c001a0c7:	68 a0 00 00 00       	push   0xa0
c001a0cc:	6a 07                	push   0x7
c001a0ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0d5:	50                   	push   eax
c001a0d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0dc:	e8 53 ea ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e1:	83 c4 0c             	add    esp,0xc
c001a0e4:	6a 01                	push   0x1
c001a0e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ed:	50                   	push   eax
c001a0ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0f4:	e8 d9 f4 ff ff       	call   c00195d2 <IDE::polling(unsigned char, unsigned int)>
c001a0f9:	83 c4 10             	add    esp,0x10
c001a0fc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a102:	84 c0                	test   al,al
c001a104:	74 23                	je     c001a129 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a106:	0f b6 d8             	movzx  ebx,al
c001a109:	0f b6 d2             	movzx  edx,dl
c001a10c:	53                   	push   ebx
c001a10d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a114:	50                   	push   eax
c001a115:	52                   	push   edx
c001a116:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a11c:	e8 01 f4 ff ff       	call   c0019522 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	e9 84 01 00 00       	jmp    c001a2ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a129:	0f b6 d2             	movzx  edx,dl
c001a12c:	53                   	push   ebx
c001a12d:	53                   	push   ebx
c001a12e:	52                   	push   edx
c001a12f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a135:	e8 e8 e9 ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c001a13a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a13e:	b9 06 00 00 00       	mov    ecx,0x6
c001a143:	89 c2                	mov    edx,eax
c001a145:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a148:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a155:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a15c:	85 db                	test   ebx,ebx
c001a15e:	0f 84 ec 00 00 00    	je     c001a250 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a164:	51                   	push   ecx
c001a165:	51                   	push   ecx
c001a166:	52                   	push   edx
c001a167:	50                   	push   eax
c001a168:	e8 35 eb ff ff       	call   c0018ca2 <IDE::waitInterrupt(unsigned char)>
c001a16d:	83 c4 10             	add    esp,0x10
c001a170:	84 c0                	test   al,al
c001a172:	0f 84 d4 fe ff ff    	je     c001a04c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a178:	56                   	push   esi
c001a179:	56                   	push   esi
c001a17a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a181:	50                   	push   eax
c001a182:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a188:	e8 81 e9 ff ff       	call   c0018b0e <IDE::prepareInterrupt(unsigned char)>
c001a18d:	83 c4 0c             	add    esp,0xc
c001a190:	6a 04                	push   0x4
c001a192:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a199:	50                   	push   eax
c001a19a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1a0:	e8 4f ea ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c001a1a5:	83 c4 0c             	add    esp,0xc
c001a1a8:	89 c6                	mov    esi,eax
c001a1aa:	6a 05                	push   0x5
c001a1ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1b3:	50                   	push   eax
c001a1b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1ba:	e8 35 ea ff ff       	call   c0018bf4 <IDE::read(unsigned char, unsigned char)>
c001a1bf:	89 f1                	mov    ecx,esi
c001a1c1:	0f b6 c0             	movzx  eax,al
c001a1c4:	0f b6 f1             	movzx  esi,cl
c001a1c7:	c1 e0 08             	shl    eax,0x8
c001a1ca:	09 c6                	or     esi,eax
c001a1cc:	d1 fe                	sar    esi,1
c001a1ce:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a1da:	74 41                	je     c001a21d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a1dc:	31 c9                	xor    ecx,ecx
c001a1de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1eb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a1ef:	75 0a                	jne    c001a1fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a1f1:	01 c9                	add    ecx,ecx
c001a1f3:	01 cd                	add    ebp,ecx
c001a1f5:	4b                   	dec    ebx
c001a1f6:	e9 54 ff ff ff       	jmp    c001a14f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a1fb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a200:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a204:	51                   	push   ecx
c001a205:	51                   	push   ecx
c001a206:	52                   	push   edx
c001a207:	50                   	push   eax
c001a208:	e8 15 e9 ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c001a20d:	89 c2                	mov    edx,eax
c001a20f:	89 f0                	mov    eax,esi
c001a211:	66 ef                	out    dx,ax
c001a213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	41                   	inc    ecx
c001a21b:	eb c1                	jmp    c001a1de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a21d:	31 f6                	xor    esi,esi
c001a21f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a225:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a22c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a230:	75 06                	jne    c001a238 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a232:	01 f6                	add    esi,esi
c001a234:	01 f5                	add    ebp,esi
c001a236:	eb bd                	jmp    c001a1f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a238:	51                   	push   ecx
c001a239:	51                   	push   ecx
c001a23a:	52                   	push   edx
c001a23b:	50                   	push   eax
c001a23c:	e8 e1 e8 ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c001a241:	89 c2                	mov    edx,eax
c001a243:	66 ed                	in     ax,dx
c001a245:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a24a:	83 c4 10             	add    esp,0x10
c001a24d:	46                   	inc    esi
c001a24e:	eb cf                	jmp    c001a21f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a250:	51                   	push   ecx
c001a251:	51                   	push   ecx
c001a252:	52                   	push   edx
c001a253:	50                   	push   eax
c001a254:	e8 49 ea ff ff       	call   c0018ca2 <IDE::waitInterrupt(unsigned char)>
c001a259:	83 c4 10             	add    esp,0x10
c001a25c:	84 c0                	test   al,al
c001a25e:	0f 84 e8 fd ff ff    	je     c001a04c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a264:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a269:	52                   	push   edx
c001a26a:	52                   	push   edx
c001a26b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a272:	50                   	push   eax
c001a273:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a279:	e8 90 e8 ff ff       	call   c0018b0e <IDE::prepareInterrupt(unsigned char)>
c001a27e:	83 c4 10             	add    esp,0x10
c001a281:	50                   	push   eax
c001a282:	50                   	push   eax
c001a283:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a28a:	50                   	push   eax
c001a28b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a291:	e8 8c e8 ff ff       	call   c0018b22 <IDE::getBase(unsigned char)>
c001a296:	8d 50 07             	lea    edx,[eax+0x7]
c001a299:	ec                   	in     al,dx
c001a29a:	83 c4 10             	add    esp,0x10
c001a29d:	a8 88                	test   al,0x88
c001a29f:	74 0a                	je     c001a2ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a2a1:	4b                   	dec    ebx
c001a2a2:	75 dd                	jne    c001a281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a2a4:	bb 02 00 00 00       	mov    ebx,0x2
c001a2a9:	eb 02                	jmp    c001a2ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a2ab:	31 db                	xor    ebx,ebx
c001a2ad:	83 c4 1c             	add    esp,0x1c
c001a2b0:	89 d8                	mov    eax,ebx
c001a2b2:	5b                   	pop    ebx
c001a2b3:	5e                   	pop    esi
c001a2b4:	5f                   	pop    edi
c001a2b5:	5d                   	pop    ebp
c001a2b6:	c3                   	ret    
c001a2b7:	90                   	nop

c001a2b8 <ATAPI::diskRemoved()>:
c001a2b8:	53                   	push   ebx
c001a2b9:	83 ec 14             	sub    esp,0x14
c001a2bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a2c0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a2c7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a2cd:	e8 38 28 ff ff       	call   c000cb0a <LogicalDisk::unmount()>
c001a2d2:	58                   	pop    eax
c001a2d3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a2d9:	e8 72 31 ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c001a2de:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a2e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a2e8:	83 c4 18             	add    esp,0x18
c001a2eb:	5b                   	pop    ebx
c001a2ec:	e9 4f 31 ff ff       	jmp    c000d440 <VCache::invalidateReadBuffer()>
c001a2f1:	90                   	nop

c001a2f2 <ATAPI::eject()>:
c001a2f2:	57                   	push   edi
c001a2f3:	b9 03 00 00 00       	mov    ecx,0x3
c001a2f8:	53                   	push   ebx
c001a2f9:	83 ec 14             	sub    esp,0x14
c001a2fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a300:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a304:	fc                   	cld    
c001a305:	31 c0                	xor    eax,eax
c001a307:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a309:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a30e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a313:	50                   	push   eax
c001a314:	50                   	push   eax
c001a315:	6a 00                	push   0x0
c001a317:	6a 00                	push   0x0
c001a319:	6a 00                	push   0x0
c001a31b:	6a 02                	push   0x2
c001a31d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a321:	50                   	push   eax
c001a322:	53                   	push   ebx
c001a323:	e8 d0 fc ff ff       	call   c0019ff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a328:	83 c4 14             	add    esp,0x14
c001a32b:	53                   	push   ebx
c001a32c:	e8 87 ff ff ff       	call   c001a2b8 <ATAPI::diskRemoved()>
c001a331:	83 c4 24             	add    esp,0x24
c001a334:	31 c0                	xor    eax,eax
c001a336:	5b                   	pop    ebx
c001a337:	5f                   	pop    edi
c001a338:	c3                   	ret    
c001a339:	90                   	nop

c001a33a <ATAPI::diskInserted()>:
c001a33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a345:	c3                   	ret    

c001a346 <ATAPI::detectMedia()>:
c001a346:	56                   	push   esi
c001a347:	53                   	push   ebx
c001a348:	83 ec 28             	sub    esp,0x28
c001a34b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a34f:	6a 0c                	push   0xc
c001a351:	6a 00                	push   0x0
c001a353:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a357:	56                   	push   esi
c001a358:	e8 73 61 fe ff       	call   c00004d0 <memset>
c001a35d:	58                   	pop    eax
c001a35e:	5a                   	pop    edx
c001a35f:	6a 00                	push   0x0
c001a361:	6a 00                	push   0x0
c001a363:	6a 00                	push   0x0
c001a365:	6a 00                	push   0x0
c001a367:	56                   	push   esi
c001a368:	53                   	push   ebx
c001a369:	e8 8a fc ff ff       	call   c0019ff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a36e:	83 c4 1c             	add    esp,0x1c
c001a371:	6a 0c                	push   0xc
c001a373:	6a 00                	push   0x0
c001a375:	56                   	push   esi
c001a376:	e8 55 61 fe ff       	call   c00004d0 <memset>
c001a37b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a380:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a385:	59                   	pop    ecx
c001a386:	58                   	pop    eax
c001a387:	6a 01                	push   0x1
c001a389:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a38d:	50                   	push   eax
c001a38e:	6a 00                	push   0x0
c001a390:	6a 12                	push   0x12
c001a392:	56                   	push   esi
c001a393:	53                   	push   ebx
c001a394:	e8 5f fc ff ff       	call   c0019ff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a399:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a39d:	83 c4 20             	add    esp,0x20
c001a3a0:	83 e0 7f             	and    eax,0x7f
c001a3a3:	3c 70                	cmp    al,0x70
c001a3a5:	74 15                	je     c001a3bc <ATAPI::detectMedia()+0x76>
c001a3a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3ae:	75 0c                	jne    c001a3bc <ATAPI::detectMedia()+0x76>
c001a3b0:	83 ec 0c             	sub    esp,0xc
c001a3b3:	53                   	push   ebx
c001a3b4:	e8 81 ff ff ff       	call   c001a33a <ATAPI::diskInserted()>
c001a3b9:	83 c4 10             	add    esp,0x10
c001a3bc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a3c0:	83 e0 0f             	and    eax,0xf
c001a3c3:	3c 02                	cmp    al,0x2
c001a3c5:	75 1b                	jne    c001a3e2 <ATAPI::detectMedia()+0x9c>
c001a3c7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a3cc:	75 2d                	jne    c001a3fb <ATAPI::detectMedia()+0xb5>
c001a3ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3d5:	74 24                	je     c001a3fb <ATAPI::detectMedia()+0xb5>
c001a3d7:	83 ec 0c             	sub    esp,0xc
c001a3da:	53                   	push   ebx
c001a3db:	e8 d8 fe ff ff       	call   c001a2b8 <ATAPI::diskRemoved()>
c001a3e0:	eb 16                	jmp    c001a3f8 <ATAPI::detectMedia()+0xb2>
c001a3e2:	84 c0                	test   al,al
c001a3e4:	75 15                	jne    c001a3fb <ATAPI::detectMedia()+0xb5>
c001a3e6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3ed:	75 0c                	jne    c001a3fb <ATAPI::detectMedia()+0xb5>
c001a3ef:	83 ec 0c             	sub    esp,0xc
c001a3f2:	53                   	push   ebx
c001a3f3:	e8 42 ff ff ff       	call   c001a33a <ATAPI::diskInserted()>
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	83 c4 24             	add    esp,0x24
c001a3fe:	5b                   	pop    ebx
c001a3ff:	5e                   	pop    esi
c001a400:	c3                   	ret    
c001a401:	90                   	nop

c001a402 <ATAPI::open(int, int, void*)>:
c001a402:	56                   	push   esi
c001a403:	53                   	push   ebx
c001a404:	50                   	push   eax
c001a405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a409:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a40d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a411:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a417:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a41d:	c1 e0 06             	shl    eax,0x6
c001a420:	01 d0                	add    eax,edx
c001a422:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a429:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a42f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a436:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a440:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a446:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a44d:	6a 04                	push   0x4
c001a44f:	6a 0c                	push   0xc
c001a451:	51                   	push   ecx
c001a452:	52                   	push   edx
c001a453:	e8 dc e6 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a458:	90                   	nop
c001a459:	90                   	nop
c001a45a:	6a 00                	push   0x0
c001a45c:	6a 0c                	push   0xc
c001a45e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a465:	50                   	push   eax
c001a466:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a46c:	e8 c3 e6 ff ff       	call   c0018b34 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a471:	83 c4 14             	add    esp,0x14
c001a474:	68 74 01 00 00       	push   0x174
c001a479:	e8 83 d3 fe ff       	call   c0007801 <malloc>
c001a47e:	83 c4 0c             	add    esp,0xc
c001a481:	89 c6                	mov    esi,eax
c001a483:	6a 00                	push   0x0
c001a485:	68 ff ff ff 7f       	push   0x7fffffff
c001a48a:	6a 00                	push   0x0
c001a48c:	6a 00                	push   0x0
c001a48e:	53                   	push   ebx
c001a48f:	68 74 f0 01 c0       	push   0xc001f074
c001a494:	50                   	push   eax
c001a495:	e8 bc 24 ff ff       	call   c000c956 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a49a:	83 c4 14             	add    esp,0x14
c001a49d:	56                   	push   esi
c001a49e:	e8 69 25 ff ff       	call   c000ca0c <LogicalDisk::assignDriveLetter()>
c001a4a3:	5a                   	pop    edx
c001a4a4:	0f be c0             	movsx  eax,al
c001a4a7:	59                   	pop    ecx
c001a4a8:	50                   	push   eax
c001a4a9:	68 8c ee 01 c0       	push   0xc001ee8c
c001a4ae:	e8 e9 ff fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001a4b3:	58                   	pop    eax
c001a4b4:	5a                   	pop    edx
c001a4b5:	56                   	push   esi
c001a4b6:	53                   	push   ebx
c001a4b7:	e8 20 14 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c001a4bc:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a4c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4c5:	e8 48 18 ff ff       	call   c000bd12 <PhysicalDisk::startCache()>
c001a4ca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a4d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4d4:	e8 6d fe ff ff       	call   c001a346 <ATAPI::detectMedia()>
c001a4d9:	83 c4 14             	add    esp,0x14
c001a4dc:	31 c0                	xor    eax,eax
c001a4de:	5b                   	pop    ebx
c001a4df:	5e                   	pop    esi
c001a4e0:	c3                   	ret    
c001a4e1:	90                   	nop

c001a4e2 <ATAPI::read(unsigned long long, int, void*)>:
c001a4e2:	55                   	push   ebp
c001a4e3:	57                   	push   edi
c001a4e4:	56                   	push   esi
c001a4e5:	53                   	push   ebx
c001a4e6:	83 ec 1c             	sub    esp,0x1c
c001a4e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a4ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a4f1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a4f5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a4fc:	74 3c                	je     c001a53a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a4fe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a502:	b9 03 00 00 00       	mov    ecx,0x3
c001a507:	fc                   	cld    
c001a508:	31 c0                	xor    eax,eax
c001a50a:	0f ce                	bswap  esi
c001a50c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a50e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a513:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a517:	89 e8                	mov    eax,ebp
c001a519:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a51d:	50                   	push   eax
c001a51e:	50                   	push   eax
c001a51f:	55                   	push   ebp
c001a520:	c1 e5 0b             	shl    ebp,0xb
c001a523:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a527:	6a 00                	push   0x0
c001a529:	55                   	push   ebp
c001a52a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a52e:	50                   	push   eax
c001a52f:	53                   	push   ebx
c001a530:	e8 c3 fa ff ff       	call   c0019ff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a535:	83 c4 20             	add    esp,0x20
c001a538:	eb 1a                	jmp    c001a554 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a53a:	83 ec 0c             	sub    esp,0xc
c001a53d:	53                   	push   ebx
c001a53e:	e8 03 fe ff ff       	call   c001a346 <ATAPI::detectMedia()>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a54d:	75 af                	jne    c001a4fe <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a54f:	b8 02 00 00 00       	mov    eax,0x2
c001a554:	83 c4 1c             	add    esp,0x1c
c001a557:	5b                   	pop    ebx
c001a558:	5e                   	pop    esi
c001a559:	5f                   	pop    edi
c001a55a:	5d                   	pop    ebp
c001a55b:	c3                   	ret    

c001a55c <SATA::close(int, int, void*)>:
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a563:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a569:	85 c0                	test   eax,eax
c001a56b:	74 0c                	je     c001a579 <SATA::close(int, int, void*)+0x1d>
c001a56d:	83 ec 0c             	sub    esp,0xc
c001a570:	8b 10                	mov    edx,DWORD PTR [eax]
c001a572:	50                   	push   eax
c001a573:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a576:	83 c4 10             	add    esp,0x10
c001a579:	31 c0                	xor    eax,eax
c001a57b:	83 c4 0c             	add    esp,0xc
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <SATA::powerSaving(PowerSavingLevel)>:
c001a580:	c3                   	ret    
c001a581:	90                   	nop

c001a582 <SATA::open(int, int, void*)>:
c001a582:	56                   	push   esi
c001a583:	53                   	push   ebx
c001a584:	50                   	push   eax
c001a585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a58d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a597:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a59d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a5b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a5bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a5c2:	e8 16 d5 fe ff       	call   c0007add <Phys::allocatePage()>
c001a5c7:	89 c6                	mov    esi,eax
c001a5c9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a5cf:	81 c6 00 10 00 00    	add    esi,0x1000
c001a5d5:	e8 03 d5 fe ff       	call   c0007add <Phys::allocatePage()>
c001a5da:	39 c6                	cmp    esi,eax
c001a5dc:	74 10                	je     c001a5ee <SATA::open(int, int, void*)+0x6c>
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	68 d4 ee 01 c0       	push   0xc001eed4
c001a5e6:	e8 14 5b ff ff       	call   c00100ff <KePanic(char const*)>
c001a5eb:	83 c4 10             	add    esp,0x10
c001a5ee:	83 ec 0c             	sub    esp,0xc
c001a5f1:	6a 02                	push   0x2
c001a5f3:	e8 51 ec fe ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c001a5f8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a5fe:	6a 03                	push   0x3
c001a600:	50                   	push   eax
c001a601:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a607:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c001a60d:	e8 cc f2 fe ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c001a612:	83 c4 14             	add    esp,0x14
c001a615:	53                   	push   ebx
c001a616:	e8 f7 16 ff ff       	call   c000bd12 <PhysicalDisk::startCache()>
c001a61b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a61e:	e8 67 27 ff ff       	call   c000cd8a <createPartitionsForDisk(PhysicalDisk*)>
c001a623:	83 c4 14             	add    esp,0x14
c001a626:	31 c0                	xor    eax,eax
c001a628:	5b                   	pop    ebx
c001a629:	5e                   	pop    esi
c001a62a:	c3                   	ret    
c001a62b:	90                   	nop

c001a62c <SATA::SATA()>:
c001a62c:	83 ec 0c             	sub    esp,0xc
c001a62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a633:	83 ec 04             	sub    esp,0x4
c001a636:	68 00 02 00 00       	push   0x200
c001a63b:	68 e8 ee 01 c0       	push   0xc001eee8
c001a640:	50                   	push   eax
c001a641:	e8 64 16 ff ff       	call   c000bcaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	ba 58 ef 01 c0       	mov    edx,0xc001ef58
c001a64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a652:	89 10                	mov    DWORD PTR [eax],edx
c001a654:	90                   	nop
c001a655:	83 c4 0c             	add    esp,0xc
c001a658:	c3                   	ret    
c001a659:	90                   	nop

c001a65a <SATA::access(unsigned long long, int, void*, bool)>:
c001a65a:	55                   	push   ebp
c001a65b:	57                   	push   edi
c001a65c:	56                   	push   esi
c001a65d:	53                   	push   ebx
c001a65e:	83 ec 2c             	sub    esp,0x2c
c001a661:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a665:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a669:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a66d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a671:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a675:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a67a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a67e:	7e 10                	jle    c001a690 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a680:	83 ec 0c             	sub    esp,0xc
c001a683:	68 f8 ee 01 c0       	push   0xc001eef8
c001a688:	e8 72 5a ff ff       	call   c00100ff <KePanic(char const*)>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a696:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a69c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a6a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6a6:	89 d0                	mov    eax,edx
c001a6a8:	c1 e0 07             	shl    eax,0x7
c001a6ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6af:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a6b9:	51                   	push   ecx
c001a6ba:	8d 42 02             	lea    eax,[edx+0x2]
c001a6bd:	51                   	push   ecx
c001a6be:	c1 e0 07             	shl    eax,0x7
c001a6c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a6c5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a6c9:	50                   	push   eax
c001a6ca:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a6d0:	e8 e7 ef ff ff       	call   c00196bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a6d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6d9:	83 c4 10             	add    esp,0x10
c001a6dc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a6e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6e5:	0f 84 4f 01 00 00    	je     c001a83a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a6eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6ef:	c1 e0 09             	shl    eax,0x9
c001a6f2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a6f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6fb:	74 0e                	je     c001a70b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a6fd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a703:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a707:	89 c1                	mov    ecx,eax
c001a709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a70b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a70f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a715:	8d 42 02             	lea    eax,[edx+0x2]
c001a718:	c1 e0 07             	shl    eax,0x7
c001a71b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a71f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a721:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a727:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a72d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a731:	c1 e1 05             	shl    ecx,0x5
c001a734:	01 c8                	add    eax,ecx
c001a736:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a73a:	83 e1 01             	and    ecx,0x1
c001a73d:	89 ce                	mov    esi,ecx
c001a73f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a741:	c1 e6 06             	shl    esi,0x6
c001a744:	83 e1 bf             	and    ecx,0xffffffbf
c001a747:	09 f1                	or     ecx,esi
c001a749:	88 08                	mov    BYTE PTR [eax],cl
c001a74b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a74d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a753:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a759:	89 08                	mov    DWORD PTR [eax],ecx
c001a75b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a761:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a767:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a76d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a770:	50                   	push   eax
c001a771:	68 90 00 00 00       	push   0x90
c001a776:	6a 00                	push   0x0
c001a778:	56                   	push   esi
c001a779:	e8 52 5d fe ff       	call   c00004d0 <memset>
c001a77e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a784:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a788:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a78e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a792:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a796:	83 c4 10             	add    esp,0x10
c001a799:	48                   	dec    eax
c001a79a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a79f:	89 c1                	mov    ecx,eax
c001a7a1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a7a7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a7ac:	09 c8                	or     eax,ecx
c001a7ae:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a7b4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a7b7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a7be:	66 25 00 7f          	and    ax,0x7f00
c001a7c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7c6:	66 0d 27 80          	or     ax,0x8027
c001a7ca:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a7cf:	66 89 06             	mov    WORD PTR [esi],ax
c001a7d2:	19 c0                	sbb    eax,eax
c001a7d4:	83 e0 f0             	and    eax,0xfffffff0
c001a7d7:	83 c0 35             	add    eax,0x35
c001a7da:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a7dd:	89 e8                	mov    eax,ebp
c001a7df:	c1 e8 10             	shr    eax,0x10
c001a7e2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a7e5:	89 e8                	mov    eax,ebp
c001a7e7:	c1 e8 18             	shr    eax,0x18
c001a7ea:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a7ed:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a7f1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a7f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7f8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a7fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7ff:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a803:	89 d6                	mov    esi,edx
c001a805:	31 c0                	xor    eax,eax
c001a807:	c1 e6 07             	shl    esi,0x7
c001a80a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a80e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a814:	80 e1 88             	and    cl,0x88
c001a817:	74 0a                	je     c001a823 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a819:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a81e:	74 0a                	je     c001a82a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a820:	40                   	inc    eax
c001a821:	eb eb                	jmp    c001a80e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a823:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a828:	75 17                	jne    c001a841 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	68 31 ef 01 c0       	push   0xc001ef31
c001a832:	e8 65 fc fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	b8 01 00 00 00       	mov    eax,0x1
c001a83f:	eb 5d                	jmp    c001a89e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a841:	b8 01 00 00 00       	mov    eax,0x1
c001a846:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a84a:	c1 e2 07             	shl    edx,0x7
c001a84d:	d3 e0                	shl    eax,cl
c001a84f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a853:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a859:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a85f:	85 c8                	test   eax,ecx
c001a861:	74 16                	je     c001a879 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a863:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a869:	0f ba e1 1e          	bt     ecx,0x1e
c001a86d:	73 ea                	jae    c001a859 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a86f:	83 ec 0c             	sub    esp,0xc
c001a872:	68 3f ef 01 c0       	push   0xc001ef3f
c001a877:	eb b9                	jmp    c001a832 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a879:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a87f:	0f ba e0 1e          	bt     eax,0x1e
c001a883:	72 b5                	jb     c001a83a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a885:	31 c0                	xor    eax,eax
c001a887:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a88c:	75 10                	jne    c001a89e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a88e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a894:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a89c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a89e:	83 c4 2c             	add    esp,0x2c
c001a8a1:	5b                   	pop    ebx
c001a8a2:	5e                   	pop    esi
c001a8a3:	5f                   	pop    edi
c001a8a4:	5d                   	pop    ebp
c001a8a5:	c3                   	ret    

c001a8a6 <SATA::read(unsigned long long, int, void*)>:
c001a8a6:	57                   	push   edi
c001a8a7:	b8 04 00 00 00       	mov    eax,0x4
c001a8ac:	56                   	push   esi
c001a8ad:	53                   	push   ebx
c001a8ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8b6:	8d 7a ff             	lea    edi,[edx-0x1]
c001a8b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a8c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a8c7:	77 25                	ja     c001a8ee <SATA::read(unsigned long long, int, void*)+0x48>
c001a8c9:	b8 06 00 00 00       	mov    eax,0x6
c001a8ce:	85 f6                	test   esi,esi
c001a8d0:	74 1c                	je     c001a8ee <SATA::read(unsigned long long, int, void*)+0x48>
c001a8d2:	50                   	push   eax
c001a8d3:	50                   	push   eax
c001a8d4:	6a 00                	push   0x0
c001a8d6:	56                   	push   esi
c001a8d7:	52                   	push   edx
c001a8d8:	53                   	push   ebx
c001a8d9:	51                   	push   ecx
c001a8da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8de:	e8 77 fd ff ff       	call   c001a65a <SATA::access(unsigned long long, int, void*, bool)>
c001a8e3:	83 c4 20             	add    esp,0x20
c001a8e6:	85 c0                	test   eax,eax
c001a8e8:	0f 95 c0             	setne  al
c001a8eb:	0f b6 c0             	movzx  eax,al
c001a8ee:	5b                   	pop    ebx
c001a8ef:	5e                   	pop    esi
c001a8f0:	5f                   	pop    edi
c001a8f1:	c3                   	ret    

c001a8f2 <SATA::write(unsigned long long, int, void*)>:
c001a8f2:	55                   	push   ebp
c001a8f3:	b8 04 00 00 00       	mov    eax,0x4
c001a8f8:	57                   	push   edi
c001a8f9:	56                   	push   esi
c001a8fa:	53                   	push   ebx
c001a8fb:	83 ec 0c             	sub    esp,0xc
c001a8fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a902:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a906:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a909:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a90d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a911:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a917:	77 3d                	ja     c001a956 <SATA::write(unsigned long long, int, void*)+0x64>
c001a919:	b8 06 00 00 00       	mov    eax,0x6
c001a91e:	85 ed                	test   ebp,ebp
c001a920:	74 34                	je     c001a956 <SATA::write(unsigned long long, int, void*)+0x64>
c001a922:	c1 e3 09             	shl    ebx,0x9
c001a925:	01 eb                	add    ebx,ebp
c001a927:	89 d6                	mov    esi,edx
c001a929:	89 cf                	mov    edi,ecx
c001a92b:	83 c6 01             	add    esi,0x1
c001a92e:	83 d7 00             	adc    edi,0x0
c001a931:	50                   	push   eax
c001a932:	50                   	push   eax
c001a933:	6a 01                	push   0x1
c001a935:	55                   	push   ebp
c001a936:	81 c5 00 02 00 00    	add    ebp,0x200
c001a93c:	6a 01                	push   0x1
c001a93e:	51                   	push   ecx
c001a93f:	52                   	push   edx
c001a940:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a944:	e8 11 fd ff ff       	call   c001a65a <SATA::access(unsigned long long, int, void*, bool)>
c001a949:	83 c4 20             	add    esp,0x20
c001a94c:	89 f2                	mov    edx,esi
c001a94e:	89 f9                	mov    ecx,edi
c001a950:	39 dd                	cmp    ebp,ebx
c001a952:	75 d3                	jne    c001a927 <SATA::write(unsigned long long, int, void*)+0x35>
c001a954:	31 c0                	xor    eax,eax
c001a956:	83 c4 0c             	add    esp,0xc
c001a959:	5b                   	pop    ebx
c001a95a:	5e                   	pop    esi
c001a95b:	5f                   	pop    edi
c001a95c:	5d                   	pop    ebp
c001a95d:	c3                   	ret    

c001a95e <SATAPI::write(unsigned long long, int, void*)>:
c001a95e:	b8 03 00 00 00       	mov    eax,0x3
c001a963:	c3                   	ret    

c001a964 <SATAPI::close(int, int, void*)>:
c001a964:	83 ec 0c             	sub    esp,0xc
c001a967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a971:	85 c0                	test   eax,eax
c001a973:	74 0c                	je     c001a981 <SATAPI::close(int, int, void*)+0x1d>
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	8b 10                	mov    edx,DWORD PTR [eax]
c001a97a:	50                   	push   eax
c001a97b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	31 c0                	xor    eax,eax
c001a983:	83 c4 0c             	add    esp,0xc
c001a986:	c3                   	ret    
c001a987:	90                   	nop

c001a988 <SATAPI::SATAPI()>:
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98f:	83 ec 04             	sub    esp,0x4
c001a992:	68 00 08 00 00       	push   0x800
c001a997:	68 88 ef 01 c0       	push   0xc001ef88
c001a99c:	50                   	push   eax
c001a99d:	e8 08 13 ff ff       	call   c000bcaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	ba e8 f0 01 c0       	mov    edx,0xc001f0e8
c001a9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ae:	89 10                	mov    DWORD PTR [eax],edx
c001a9b0:	90                   	nop
c001a9b1:	83 c4 0c             	add    esp,0xc
c001a9b4:	c3                   	ret    
c001a9b5:	90                   	nop

c001a9b6 <SATAPI::diskRemoved()>:
c001a9b6:	c3                   	ret    
c001a9b7:	90                   	nop

c001a9b8 <SATAPI::diskInserted()>:
c001a9b8:	83 ec 18             	sub    esp,0x18
c001a9bb:	68 94 ef 01 c0       	push   0xc001ef94
c001a9c0:	e8 d7 fa fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001a9c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9c9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a9d0:	83 c4 1c             	add    esp,0x1c
c001a9d3:	c3                   	ret    

c001a9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a9d4:	55                   	push   ebp
c001a9d5:	57                   	push   edi
c001a9d6:	56                   	push   esi
c001a9d7:	53                   	push   ebx
c001a9d8:	83 ec 38             	sub    esp,0x38
c001a9db:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a9df:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a9e3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a9e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a9ef:	68 ac ef 01 c0       	push   0xc001efac
c001a9f4:	e8 a3 fa fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001a9f9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a9ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa09:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa13:	c1 e0 07             	shl    eax,0x7
c001aa16:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa1e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aa28:	58                   	pop    eax
c001aa29:	5a                   	pop    edx
c001aa2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa2e:	8d 58 02             	lea    ebx,[eax+0x2]
c001aa31:	c1 e3 07             	shl    ebx,0x7
c001aa34:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001aa38:	53                   	push   ebx
c001aa39:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa3f:	e8 78 ec ff ff       	call   c00196bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	b8 01 00 00 00       	mov    eax,0x1
c001aa50:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aa55:	0f 84 4c 02 00 00    	je     c001aca7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001aa5b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa61:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa63:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aa69:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aa6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa73:	c1 e1 05             	shl    ecx,0x5
c001aa76:	01 c8                	add    eax,ecx
c001aa78:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa7a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aa80:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aa86:	89 08                	mov    DWORD PTR [eax],ecx
c001aa88:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa8e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aa94:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aa9a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aa9d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aaa0:	50                   	push   eax
c001aaa1:	68 90 00 00 00       	push   0x90
c001aaa6:	6a 00                	push   0x0
c001aaa8:	53                   	push   ebx
c001aaa9:	e8 22 5a fe ff       	call   c00004d0 <memset>
c001aaae:	b9 0c 00 00 00       	mov    ecx,0xc
c001aab3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001aab7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aab9:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001aabf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001aac3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aac9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aacd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aad1:	48                   	dec    eax
c001aad2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001aad7:	89 c1                	mov    ecx,eax
c001aad9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001aadf:	25 00 00 c0 ff       	and    eax,0xffc00000
c001aae4:	09 c8                	or     eax,ecx
c001aae6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001aaec:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001aaef:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aaf6:	66 25 00 7f          	and    ax,0x7f00
c001aafa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aafe:	66 0d 27 80          	or     ax,0x8027
c001ab02:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab06:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab09:	89 d0                	mov    eax,edx
c001ab0b:	c1 ea 18             	shr    edx,0x18
c001ab0e:	c1 e8 10             	shr    eax,0x10
c001ab11:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab14:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab17:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ab1b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ab1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab22:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ab25:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ab30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab34:	31 c0                	xor    eax,eax
c001ab36:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab3c:	80 e1 88             	and    cl,0x88
c001ab3f:	74 0a                	je     c001ab4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001ab41:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab46:	74 0a                	je     c001ab52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001ab48:	40                   	inc    eax
c001ab49:	eb eb                	jmp    c001ab36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001ab4b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab50:	75 16                	jne    c001ab68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	68 c6 ef 01 c0       	push   0xc001efc6
c001ab5a:	e8 3d f9 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001ab5f:	5f                   	pop    edi
c001ab60:	5d                   	pop    ebp
c001ab61:	68 db ef 01 c0       	push   0xc001efdb
c001ab66:	eb 4f                	jmp    c001abb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001ab68:	be 01 00 00 00       	mov    esi,0x1
c001ab6d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ab71:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ab75:	d3 e6                	shl    esi,cl
c001ab77:	c1 e7 07             	shl    edi,0x7
c001ab7a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ab80:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ab85:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ab89:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ab8f:	85 c6                	test   esi,eax
c001ab91:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ab97:	0f 84 cb 00 00 00    	je     c001ac68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001ab9d:	0f ba e0 1e          	bt     eax,0x1e
c001aba1:	73 2c                	jae    c001abcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001aba3:	83 ec 0c             	sub    esp,0xc
c001aba6:	68 ed ef 01 c0       	push   0xc001efed
c001abab:	e8 ec f8 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001abb0:	5b                   	pop    ebx
c001abb1:	5e                   	pop    esi
c001abb2:	68 00 f0 01 c0       	push   0xc001f000
c001abb7:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001abbd:	e8 bc db fe ff       	call   c000877e <VgaText::puts(char const*)>
c001abc2:	83 c4 10             	add    esp,0x10
c001abc5:	b8 01 00 00 00       	mov    eax,0x1
c001abca:	e9 d8 00 00 00       	jmp    c001aca7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001abcf:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001abd5:	83 f8 0d             	cmp    eax,0xd
c001abd8:	77 0a                	ja     c001abe4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001abda:	83 ec 0c             	sub    esp,0xc
c001abdd:	68 c8 00 00 00       	push   0xc8
c001abe2:	eb 28                	jmp    c001ac0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001abe4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001abea:	83 f8 0d             	cmp    eax,0xd
c001abed:	77 0a                	ja     c001abf9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001abef:	83 ec 0c             	sub    esp,0xc
c001abf2:	68 58 02 00 00       	push   0x258
c001abf7:	eb 13                	jmp    c001ac0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001abf9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001abff:	83 f8 06             	cmp    eax,0x6
c001ac02:	77 10                	ja     c001ac14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001ac04:	83 ec 0c             	sub    esp,0xc
c001ac07:	68 dc 05 00 00       	push   0x5dc
c001ac0c:	e8 ef 89 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac18:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac1b:	75 06                	jne    c001ac23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001ac1d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac21:	74 15                	je     c001ac38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ac23:	83 fb 06             	cmp    ebx,0x6
c001ac26:	77 10                	ja     c001ac38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	68 c4 09 00 00       	push   0x9c4
c001ac30:	e8 cb 89 ff ff       	call   c0013600 <milliTenthSleep(unsigned int)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	43                   	inc    ebx
c001ac39:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ac3f:	0f 85 44 ff ff ff    	jne    c001ab89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001ac45:	51                   	push   ecx
c001ac46:	51                   	push   ecx
c001ac47:	68 11 f0 01 c0       	push   0xc001f011
c001ac4c:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001ac52:	e8 27 db fe ff       	call   c000877e <VgaText::puts(char const*)>
c001ac57:	c7 04 24 21 f0 01 c0 	mov    DWORD PTR [esp],0xc001f021
c001ac5e:	e8 39 f8 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001ac63:	e9 5a ff ff ff       	jmp    c001abc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001ac68:	0f ba e0 1e          	bt     eax,0x1e
c001ac6c:	73 19                	jae    c001ac87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001ac6e:	83 ec 0c             	sub    esp,0xc
c001ac71:	68 35 f0 01 c0       	push   0xc001f035
c001ac76:	e8 21 f8 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001ac7b:	58                   	pop    eax
c001ac7c:	5a                   	pop    edx
c001ac7d:	68 4a f0 01 c0       	push   0xc001f04a
c001ac82:	e9 30 ff ff ff       	jmp    c001abb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001ac87:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ac8c:	74 17                	je     c001aca5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ac8e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ac93:	74 10                	je     c001aca5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ac95:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ac9b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ac9f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aca3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aca5:	31 c0                	xor    eax,eax
c001aca7:	83 c4 2c             	add    esp,0x2c
c001acaa:	5b                   	pop    ebx
c001acab:	5e                   	pop    esi
c001acac:	5f                   	pop    edi
c001acad:	5d                   	pop    ebp
c001acae:	c3                   	ret    
c001acaf:	90                   	nop

c001acb0 <SATAPI::eject()>:
c001acb0:	57                   	push   edi
c001acb1:	b9 03 00 00 00       	mov    ecx,0x3
c001acb6:	83 ec 18             	sub    esp,0x18
c001acb9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001acbd:	fc                   	cld    
c001acbe:	31 c0                	xor    eax,eax
c001acc0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001acc2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001acc7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001accc:	50                   	push   eax
c001accd:	6a 00                	push   0x0
c001accf:	6a 00                	push   0x0
c001acd1:	6a 00                	push   0x0
c001acd3:	6a 00                	push   0x0
c001acd5:	6a 02                	push   0x2
c001acd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001acdb:	50                   	push   eax
c001acdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ace0:	e8 ef fc ff ff       	call   c001a9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ace5:	31 c0                	xor    eax,eax
c001ace7:	83 c4 38             	add    esp,0x38
c001acea:	5f                   	pop    edi
c001aceb:	c3                   	ret    

c001acec <SATAPI::detectMedia()>:
c001acec:	53                   	push   ebx
c001aced:	83 ec 14             	sub    esp,0x14
c001acf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001acf4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001acfa:	e8 51 27 ff ff       	call   c000d450 <VCache::writeWriteBuffer()>
c001acff:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad09:	83 c4 18             	add    esp,0x18
c001ad0c:	5b                   	pop    ebx
c001ad0d:	e9 2e 27 ff ff       	jmp    c000d440 <VCache::invalidateReadBuffer()>

c001ad12 <SATAPI::open(int, int, void*)>:
c001ad12:	56                   	push   esi
c001ad13:	53                   	push   ebx
c001ad14:	51                   	push   ecx
c001ad15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad1d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad27:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad2d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad3b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad45:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad4b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad52:	e8 86 cd fe ff       	call   c0007add <Phys::allocatePage()>
c001ad57:	89 c6                	mov    esi,eax
c001ad59:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ad5f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad65:	e8 73 cd fe ff       	call   c0007add <Phys::allocatePage()>
c001ad6a:	39 c6                	cmp    esi,eax
c001ad6c:	74 10                	je     c001ad7e <SATAPI::open(int, int, void*)+0x6c>
c001ad6e:	83 ec 0c             	sub    esp,0xc
c001ad71:	68 5d f0 01 c0       	push   0xc001f05d
c001ad76:	e8 84 53 ff ff       	call   c00100ff <KePanic(char const*)>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	83 ec 0c             	sub    esp,0xc
c001ad81:	6a 02                	push   0x2
c001ad83:	e8 c1 e4 fe ff       	call   c0009249 <Virt::allocateKernelVirtualPages(int)>
c001ad88:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ad8e:	6a 03                	push   0x3
c001ad90:	50                   	push   eax
c001ad91:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ad97:	ff 35 50 06 02 c0    	push   DWORD PTR ds:0xc0020650
c001ad9d:	e8 3c eb fe ff       	call   c00098de <VAS::mapPage(unsigned long, unsigned long, int)>
c001ada2:	83 c4 14             	add    esp,0x14
c001ada5:	68 74 01 00 00       	push   0x174
c001adaa:	e8 52 ca fe ff       	call   c0007801 <malloc>
c001adaf:	83 c4 0c             	add    esp,0xc
c001adb2:	89 c6                	mov    esi,eax
c001adb4:	6a 00                	push   0x0
c001adb6:	68 ff ff ff 7f       	push   0x7fffffff
c001adbb:	6a 00                	push   0x0
c001adbd:	6a 00                	push   0x0
c001adbf:	53                   	push   ebx
c001adc0:	68 73 f0 01 c0       	push   0xc001f073
c001adc5:	50                   	push   eax
c001adc6:	e8 8b 1b ff ff       	call   c000c956 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001adcb:	83 c4 14             	add    esp,0x14
c001adce:	56                   	push   esi
c001adcf:	e8 38 1c ff ff       	call   c000ca0c <LogicalDisk::assignDriveLetter()>
c001add4:	5a                   	pop    edx
c001add5:	0f be c0             	movsx  eax,al
c001add8:	59                   	pop    ecx
c001add9:	50                   	push   eax
c001adda:	68 8c ee 01 c0       	push   0xc001ee8c
c001addf:	e8 b8 f6 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001ade4:	58                   	pop    eax
c001ade5:	5a                   	pop    edx
c001ade6:	56                   	push   esi
c001ade7:	53                   	push   ebx
c001ade8:	e8 ef 0a ff ff       	call   c000b8dc <Device::addChild(Device*)>
c001aded:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001adf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adf6:	e8 17 0f ff ff       	call   c000bd12 <PhysicalDisk::startCache()>
c001adfb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae05:	e8 e2 fe ff ff       	call   c001acec <SATAPI::detectMedia()>
c001ae0a:	83 c4 14             	add    esp,0x14
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	5b                   	pop    ebx
c001ae10:	5e                   	pop    esi
c001ae11:	c3                   	ret    

c001ae12 <SATAPI::read(unsigned long long, int, void*)>:
c001ae12:	57                   	push   edi
c001ae13:	56                   	push   esi
c001ae14:	53                   	push   ebx
c001ae15:	83 ec 3c             	sub    esp,0x3c
c001ae18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae1c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ae20:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ae24:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ae28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae30:	68 81 f0 01 c0       	push   0xc001f081
c001ae35:	e8 62 f6 fe ff       	call   c000a49c <Dbg::kprintf(char const*, ...)>
c001ae3a:	83 c4 10             	add    esp,0x10
c001ae3d:	83 fe 04             	cmp    esi,0x4
c001ae40:	7e 10                	jle    c001ae52 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae42:	83 ec 0c             	sub    esp,0xc
c001ae45:	68 92 f0 01 c0       	push   0xc001f092
c001ae4a:	e8 b0 52 ff ff       	call   c00100ff <KePanic(char const*)>
c001ae4f:	83 c4 10             	add    esp,0x10
c001ae52:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ae58:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ae5e:	51                   	push   ecx
c001ae5f:	50                   	push   eax
c001ae60:	83 c0 02             	add    eax,0x2
c001ae63:	c1 e0 07             	shl    eax,0x7
c001ae66:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ae6c:	50                   	push   eax
c001ae6d:	52                   	push   edx
c001ae6e:	e8 0d e9 ff ff       	call   c0019780 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ae73:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ae77:	b9 03 00 00 00       	mov    ecx,0x3
c001ae7c:	fc                   	cld    
c001ae7d:	31 c0                	xor    eax,eax
c001ae7f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae81:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ae86:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ae8b:	83 c4 0c             	add    esp,0xc
c001ae8e:	6a 00                	push   0x0
c001ae90:	6a 00                	push   0x0
c001ae92:	6a 00                	push   0x0
c001ae94:	6a 00                	push   0x0
c001ae96:	6a 02                	push   0x2
c001ae98:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ae9c:	50                   	push   eax
c001ae9d:	53                   	push   ebx
c001ae9e:	e8 31 fb ff ff       	call   c001a9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aea3:	83 c4 20             	add    esp,0x20
c001aea6:	85 c0                	test   eax,eax
c001aea8:	74 27                	je     c001aed1 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001aeaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aeae:	50                   	push   eax
c001aeaf:	50                   	push   eax
c001aeb0:	68 bc f0 01 c0       	push   0xc001f0bc
c001aeb5:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001aebb:	e8 be d8 fe ff       	call   c000877e <VgaText::puts(char const*)>
c001aec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aec3:	e8 24 fe ff ff       	call   c001acec <SATAPI::detectMedia()>
c001aec8:	58                   	pop    eax
c001aec9:	5a                   	pop    edx
c001aeca:	68 c4 f0 01 c0       	push   0xc001f0c4
c001aecf:	eb 69                	jmp    c001af3a <SATAPI::read(unsigned long long, int, void*)+0x128>
c001aed1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001aed5:	b9 03 00 00 00       	mov    ecx,0x3
c001aeda:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aee0:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001aee5:	0f c8                	bswap  eax
c001aee7:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001aeeb:	89 f0                	mov    eax,esi
c001aeed:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001aef1:	57                   	push   edi
c001aef2:	56                   	push   esi
c001aef3:	c1 e6 0b             	shl    esi,0xb
c001aef6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001aefa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aefe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af02:	56                   	push   esi
c001af03:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af07:	50                   	push   eax
c001af08:	53                   	push   ebx
c001af09:	e8 c6 fa ff ff       	call   c001a9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af0e:	83 c4 20             	add    esp,0x20
c001af11:	85 c0                	test   eax,eax
c001af13:	74 37                	je     c001af4c <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001af15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af19:	50                   	push   eax
c001af1a:	50                   	push   eax
c001af1b:	68 ce f0 01 c0       	push   0xc001f0ce
c001af20:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001af26:	e8 53 d8 fe ff       	call   c000877e <VgaText::puts(char const*)>
c001af2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af2e:	e8 b9 fd ff ff       	call   c001acec <SATAPI::detectMedia()>
c001af33:	5a                   	pop    edx
c001af34:	59                   	pop    ecx
c001af35:	68 d6 f0 01 c0       	push   0xc001f0d6
c001af3a:	ff 35 a4 05 02 c0    	push   DWORD PTR ds:0xc00205a4
c001af40:	e8 39 d8 fe ff       	call   c000877e <VgaText::puts(char const*)>
c001af45:	83 c4 10             	add    esp,0x10
c001af48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4c:	83 c4 30             	add    esp,0x30
c001af4f:	5b                   	pop    ebx
c001af50:	5e                   	pop    esi
c001af51:	5f                   	pop    edi
c001af52:	c3                   	ret    
c001af53:	90                   	nop

c001af54 <IOAPIC::close(int, int, void*)>:
c001af54:	b8 00 00 00 00       	mov    eax,0x0
c001af59:	c3                   	ret    

c001af5a <apicGetBase()>:
c001af5a:	55                   	push   ebp
c001af5b:	89 e5                	mov    ebp,esp
c001af5d:	83 ec 18             	sub    esp,0x18
c001af60:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c001af65:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001af6b:	83 e0 08             	and    eax,0x8
c001af6e:	84 c0                	test   al,al
c001af70:	75 07                	jne    c001af79 <apicGetBase()+0x1f>
c001af72:	b8 00 00 00 00       	mov    eax,0x0
c001af77:	eb 21                	jmp    c001af9a <apicGetBase()+0x40>
c001af79:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c001af7e:	83 ec 08             	sub    esp,0x8
c001af81:	6a 1b                	push   0x1b
c001af83:	50                   	push   eax
c001af84:	e8 af be fe ff       	call   c0006e38 <Computer::rdmsr(unsigned int)>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af8f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af95:	25 00 00 ff ff       	and    eax,0xffff0000
c001af9a:	c9                   	leave  
c001af9b:	c3                   	ret    

c001af9c <IOAPIC::IOAPIC()>:
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa3:	83 ec 08             	sub    esp,0x8
c001afa6:	68 18 f1 01 c0       	push   0xc001f118
c001afab:	50                   	push   eax
c001afac:	e8 c3 0a ff ff       	call   c000ba74 <Device::Device(char const*)>
c001afb1:	83 c4 10             	add    esp,0x10
c001afb4:	ba 28 f1 01 c0       	mov    edx,0xc001f128
c001afb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbd:	89 10                	mov    DWORD PTR [eax],edx
c001afbf:	90                   	nop
c001afc0:	83 c4 0c             	add    esp,0xc
c001afc3:	c3                   	ret    

c001afc4 <apicOpen()>:
c001afc4:	55                   	push   ebp
c001afc5:	89 e5                	mov    ebp,esp
c001afc7:	53                   	push   ebx
c001afc8:	83 ec 34             	sub    esp,0x34
c001afcb:	a0 40 42 02 c0       	mov    al,ds:0xc0024240
c001afd0:	83 f0 01             	xor    eax,0x1
c001afd3:	84 c0                	test   al,al
c001afd5:	0f 84 9d 00 00 00    	je     c001b078 <apicOpen()+0xb4>
c001afdb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001afdf:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c001afe4:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001afe7:	0f 83 84 00 00 00    	jae    c001b071 <apicOpen()+0xad>
c001afed:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001aff4:	83 ec 0c             	sub    esp,0xc
c001aff7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001affa:	e8 02 c8 fe ff       	call   c0007801 <malloc>
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	89 c3                	mov    ebx,eax
c001b004:	83 ec 0c             	sub    esp,0xc
c001b007:	53                   	push   ebx
c001b008:	e8 8f ff ff ff       	call   c001af9c <IOAPIC::IOAPIC()>
c001b00d:	83 c4 10             	add    esp,0x10
c001b010:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b013:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b016:	25 ff 00 00 00       	and    eax,0xff
c001b01b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b01e:	89 14 85 20 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbde0],edx
c001b025:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c001b02a:	40                   	inc    eax
c001b02b:	a3 00 42 02 c0       	mov    ds:0xc0024200,eax
c001b030:	a1 58 05 02 c0       	mov    eax,ds:0xc0020558
c001b035:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b03b:	83 ec 08             	sub    esp,0x8
c001b03e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b041:	50                   	push   eax
c001b042:	e8 95 08 ff ff       	call   c000b8dc <Device::addChild(Device*)>
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b04d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b04f:	83 c0 08             	add    eax,0x8
c001b052:	8b 10                	mov    edx,DWORD PTR [eax]
c001b054:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b057:	25 ff 00 00 00       	and    eax,0xff
c001b05c:	6a 00                	push   0x0
c001b05e:	6a 00                	push   0x0
c001b060:	50                   	push   eax
c001b061:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b064:	ff d2                	call   edx
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b06c:	e9 6e ff ff ff       	jmp    c001afdf <apicOpen()+0x1b>
c001b071:	c6 05 40 42 02 c0 01 	mov    BYTE PTR ds:0xc0024240,0x1
c001b078:	e8 dd fe ff ff       	call   c001af5a <apicGetBase()>
c001b07d:	05 f0 00 00 00       	add    eax,0xf0
c001b082:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b085:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b088:	8b 00                	mov    eax,DWORD PTR [eax]
c001b08a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b08d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b094:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b09b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b09e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b0a1:	89 10                	mov    DWORD PTR [eax],edx
c001b0a3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b0aa:	a1 70 2d 02 c0       	mov    eax,ds:0xc0022d70
c001b0af:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b0b2:	7d 70                	jge    c001b124 <apicOpen()+0x160>
c001b0b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0b7:	8b 04 85 80 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd280]
c001b0be:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b0c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0c4:	8b 04 85 80 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd280]
c001b0cb:	c1 e8 08             	shr    eax,0x8
c001b0ce:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b0d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0d5:	8b 04 85 80 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd280]
c001b0dc:	c1 e8 18             	shr    eax,0x18
c001b0df:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b0e2:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b0e6:	75 37                	jne    c001b11f <apicOpen()+0x15b>
c001b0e8:	e8 6d fe ff ff       	call   c001af5a <apicGetBase()>
c001b0ed:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b0f1:	75 07                	jne    c001b0fa <apicOpen()+0x136>
c001b0f3:	ba 60 03 00 00       	mov    edx,0x360
c001b0f8:	eb 05                	jmp    c001b0ff <apicOpen()+0x13b>
c001b0fa:	ba 50 03 00 00       	mov    edx,0x350
c001b0ff:	01 d0                	add    eax,edx
c001b101:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b104:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b107:	8b 00                	mov    eax,DWORD PTR [eax]
c001b109:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b10c:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b113:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b117:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b11a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b11d:	89 10                	mov    DWORD PTR [eax],edx
c001b11f:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b122:	eb 86                	jmp    c001b0aa <apicOpen()+0xe6>
c001b124:	90                   	nop
c001b125:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b128:	c9                   	leave  
c001b129:	c3                   	ret    

c001b12a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b12a:	55                   	push   ebp
c001b12b:	89 e5                	mov    ebp,esp
c001b12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b130:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b136:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b139:	72 1d                	jb     c001b158 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b13b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b13e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b147:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b14d:	01 d0                	add    eax,edx
c001b14f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b152:	73 04                	jae    c001b158 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b154:	b0 01                	mov    al,0x1
c001b156:	eb 02                	jmp    c001b15a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b158:	b0 00                	mov    al,0x0
c001b15a:	5d                   	pop    ebp
c001b15b:	c3                   	ret    

c001b15c <IOAPIC::read(int)>:
c001b15c:	55                   	push   ebp
c001b15d:	89 e5                	mov    ebp,esp
c001b15f:	83 ec 10             	sub    esp,0x10
c001b162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b165:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b16b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b16e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b171:	31 d2                	xor    edx,edx
c001b173:	88 c2                	mov    dl,al
c001b175:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b178:	89 10                	mov    DWORD PTR [eax],edx
c001b17a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b17d:	83 c0 10             	add    eax,0x10
c001b180:	8b 00                	mov    eax,DWORD PTR [eax]
c001b182:	c9                   	leave  
c001b183:	c3                   	ret    

c001b184 <IOAPIC::open(int, int, void*)>:
c001b184:	55                   	push   ebp
c001b185:	89 e5                	mov    ebp,esp
c001b187:	57                   	push   edi
c001b188:	56                   	push   esi
c001b189:	53                   	push   ebx
c001b18a:	83 ec 04             	sub    esp,0x4
c001b18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b190:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b193:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b19c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1a2:	8b 14 85 60 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1a0]
c001b1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1bb:	8b 14 85 e0 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd120]
c001b1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1ce:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b1d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1d7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1dd:	89 c6                	mov    esi,eax
c001b1df:	81 e6 ff 00 00 00    	and    esi,0xff
c001b1e5:	89 d0                	mov    eax,edx
c001b1e7:	ba 00 00 00 00       	mov    edx,0x0
c001b1ec:	89 c7                	mov    edi,eax
c001b1ee:	83 e7 ff             	and    edi,0xffffffff
c001b1f1:	89 f9                	mov    ecx,edi
c001b1f3:	89 d0                	mov    eax,edx
c001b1f5:	25 ff 00 00 00       	and    eax,0xff
c001b1fa:	89 c3                	mov    ebx,eax
c001b1fc:	89 c8                	mov    eax,ecx
c001b1fe:	89 da                	mov    edx,ebx
c001b200:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b203:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b206:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b20a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b20e:	83 e0 00             	and    eax,0x0
c001b211:	09 d0                	or     eax,edx
c001b213:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b21a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b220:	8d 50 01             	lea    edx,[eax+0x1]
c001b223:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b226:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b22c:	31 d2                	xor    edx,edx
c001b22e:	88 c2                	mov    dl,al
c001b230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b233:	83 c2 08             	add    edx,0x8
c001b236:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b23a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b240:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b246:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b24a:	6a 01                	push   0x1
c001b24c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b24f:	e8 08 ff ff ff       	call   c001b15c <IOAPIC::read(int)>
c001b254:	83 c4 08             	add    esp,0x8
c001b257:	c1 f8 10             	sar    eax,0x10
c001b25a:	25 ff 00 00 00       	and    eax,0xff
c001b25f:	8d 50 01             	lea    edx,[eax+0x1]
c001b262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b265:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b26b:	b8 00 00 00 00       	mov    eax,0x0
c001b270:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b273:	5b                   	pop    ebx
c001b274:	5e                   	pop    esi
c001b275:	5f                   	pop    edi
c001b276:	5d                   	pop    ebp
c001b277:	c3                   	ret    

c001b278 <IOAPIC::write(int, int)>:
c001b278:	55                   	push   ebp
c001b279:	89 e5                	mov    ebp,esp
c001b27b:	83 ec 10             	sub    esp,0x10
c001b27e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b281:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b287:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b28a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b28d:	31 d2                	xor    edx,edx
c001b28f:	88 c2                	mov    dl,al
c001b291:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b294:	89 10                	mov    DWORD PTR [eax],edx
c001b296:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b299:	8d 50 10             	lea    edx,[eax+0x10]
c001b29c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b29f:	89 02                	mov    DWORD PTR [edx],eax
c001b2a1:	90                   	nop
c001b2a2:	c9                   	leave  
c001b2a3:	c3                   	ret    

c001b2a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b2a4:	55                   	push   ebp
c001b2a5:	89 e5                	mov    ebp,esp
c001b2a7:	53                   	push   ebx
c001b2a8:	83 ec 2c             	sub    esp,0x2c
c001b2ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2ae:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b2b1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b2b4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b2b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b2ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b2c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b2c3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b2c6:	88 d8                	mov    al,bl
c001b2c8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b2cb:	88 c8                	mov    al,cl
c001b2cd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b2d0:	88 d0                	mov    al,dl
c001b2d2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b2d5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2d8:	25 ff 00 00 00       	and    eax,0xff
c001b2dd:	83 c0 08             	add    eax,0x8
c001b2e0:	01 c0                	add    eax,eax
c001b2e2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b2e5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2e8:	25 ff 00 00 00       	and    eax,0xff
c001b2ed:	83 c0 08             	add    eax,0x8
c001b2f0:	01 c0                	add    eax,eax
c001b2f2:	40                   	inc    eax
c001b2f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b2f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2f9:	50                   	push   eax
c001b2fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2fd:	e8 5a fe ff ff       	call   c001b15c <IOAPIC::read(int)>
c001b302:	83 c4 08             	add    esp,0x8
c001b305:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b308:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b30f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b312:	c1 e0 18             	shl    eax,0x18
c001b315:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b318:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b31b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b31e:	52                   	push   edx
c001b31f:	50                   	push   eax
c001b320:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b323:	e8 50 ff ff ff       	call   c001b278 <IOAPIC::write(int, int)>
c001b328:	83 c4 0c             	add    esp,0xc
c001b32b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b32e:	50                   	push   eax
c001b32f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b332:	e8 25 fe ff ff       	call   c001b15c <IOAPIC::read(int)>
c001b337:	83 c4 08             	add    esp,0x8
c001b33a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b33d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b344:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b34b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b352:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b356:	74 09                	je     c001b361 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b358:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b35f:	eb 07                	jmp    c001b368 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b361:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b368:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b36c:	74 09                	je     c001b377 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b36e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b375:	eb 07                	jmp    c001b37e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b377:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b37e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b385:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b388:	25 ff 00 00 00       	and    eax,0xff
c001b38d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b390:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b393:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b396:	52                   	push   edx
c001b397:	50                   	push   eax
c001b398:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b39b:	e8 d8 fe ff ff       	call   c001b278 <IOAPIC::write(int, int)>
c001b3a0:	83 c4 0c             	add    esp,0xc
c001b3a3:	90                   	nop
c001b3a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b3a7:	c9                   	leave  
c001b3a8:	c3                   	ret    
c001b3a9:	66 90                	xchg   ax,ax
c001b3ab:	90                   	nop

c001b3ac <APICTimer::close(int, int, void*)>:
c001b3ac:	b8 00 00 00 00       	mov    eax,0x0
c001b3b1:	c3                   	ret    
c001b3b2:	66 90                	xchg   ax,ax

c001b3b4 <apicTimerHandler(regs*, void*)>:
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3bd:	b8 10 27 00 00       	mov    eax,0x2710
c001b3c2:	ba 00 00 00 00       	mov    edx,0x0
c001b3c7:	f7 f1                	div    ecx
c001b3c9:	83 ec 0c             	sub    esp,0xc
c001b3cc:	50                   	push   eax
c001b3cd:	e8 9e 1d ff ff       	call   c000d170 <timerHandler(unsigned int)>
c001b3d2:	83 c4 10             	add    esp,0x10
c001b3d5:	90                   	nop
c001b3d6:	83 c4 0c             	add    esp,0xc
c001b3d9:	c3                   	ret    
c001b3da:	66 90                	xchg   ax,ax

c001b3dc <APICTimer::open(int, int, void*)>:
c001b3dc:	83 ec 0c             	sub    esp,0xc
c001b3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3e5:	83 c0 24             	add    eax,0x24
c001b3e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3ea:	83 ec 08             	sub    esp,0x8
c001b3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3f5:	ff d0                	call   eax
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b402:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b40c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b410:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b41a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b420:	83 ec 0c             	sub    esp,0xc
c001b423:	51                   	push   ecx
c001b424:	6a 01                	push   0x1
c001b426:	68 b4 b3 01 c0       	push   0xc001b3b4
c001b42b:	52                   	push   edx
c001b42c:	50                   	push   eax
c001b42d:	e8 56 04 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b432:	83 c4 20             	add    esp,0x20
c001b435:	89 c2                	mov    edx,eax
c001b437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b441:	b8 00 00 00 00       	mov    eax,0x0
c001b446:	83 c4 0c             	add    esp,0xc
c001b449:	c3                   	ret    
c001b44a:	66 90                	xchg   ax,ax

c001b44c <APICTimer::write(int)>:
c001b44c:	83 ec 0c             	sub    esp,0xc
c001b44f:	83 ec 0c             	sub    esp,0xc
c001b452:	68 4c f1 01 c0       	push   0xc001f14c
c001b457:	e8 a3 4c ff ff       	call   c00100ff <KePanic(char const*)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b463:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b467:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b46d:	90                   	nop
c001b46e:	83 c4 0c             	add    esp,0xc
c001b471:	c3                   	ret    
c001b472:	66 90                	xchg   ax,ax

c001b474 <APICTimer::APICTimer()>:
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47b:	83 ec 08             	sub    esp,0x8
c001b47e:	68 5c f1 01 c0       	push   0xc001f15c
c001b483:	50                   	push   eax
c001b484:	e8 1b 1c ff ff       	call   c000d0a4 <Timer::Timer(char const*)>
c001b489:	83 c4 10             	add    esp,0x10
c001b48c:	ba 70 f1 01 c0       	mov    edx,0xc001f170
c001b491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b495:	89 10                	mov    DWORD PTR [eax],edx
c001b497:	90                   	nop
c001b498:	83 c4 0c             	add    esp,0xc
c001b49b:	c3                   	ret    

c001b49c <PIT::write(int)>:
c001b49c:	83 ec 10             	sub    esp,0x10
c001b49f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4b1:	a3 44 42 02 c0       	mov    ds:0xc0024244,eax
c001b4b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b4bb:	99                   	cdq    
c001b4bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b4c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b4cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b4d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b4d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b4d9:	ee                   	out    dx,al
c001b4da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4de:	25 ff 00 00 00       	and    eax,0xff
c001b4e3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b4ea:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b4ee:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b4f2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b4f7:	ee                   	out    dx,al
c001b4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4fc:	c1 f8 08             	sar    eax,0x8
c001b4ff:	25 ff 00 00 00       	and    eax,0xff
c001b504:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b50b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b50f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b513:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b518:	ee                   	out    dx,al
c001b519:	90                   	nop
c001b51a:	83 c4 10             	add    esp,0x10
c001b51d:	c3                   	ret    
c001b51e:	66 90                	xchg   ax,ax

c001b520 <pitHandler(regs*, void*)>:
c001b520:	83 ec 0c             	sub    esp,0xc
c001b523:	8b 0d 44 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024244
c001b529:	b8 10 27 00 00       	mov    eax,0x2710
c001b52e:	99                   	cdq    
c001b52f:	f7 f9                	idiv   ecx
c001b531:	83 ec 0c             	sub    esp,0xc
c001b534:	50                   	push   eax
c001b535:	e8 36 1c ff ff       	call   c000d170 <timerHandler(unsigned int)>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	90                   	nop
c001b53e:	83 c4 0c             	add    esp,0xc
c001b541:	c3                   	ret    
c001b542:	66 90                	xchg   ax,ax

c001b544 <PIT::open(int, int, void*)>:
c001b544:	83 ec 0c             	sub    esp,0xc
c001b547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b54b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b54d:	83 c0 24             	add    eax,0x24
c001b550:	8b 00                	mov    eax,DWORD PTR [eax]
c001b552:	83 ec 08             	sub    esp,0x8
c001b555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b55d:	ff d0                	call   eax
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	6a 00                	push   0x0
c001b56b:	6a 01                	push   0x1
c001b56d:	68 20 b5 01 c0       	push   0xc001b520
c001b572:	6a 00                	push   0x0
c001b574:	50                   	push   eax
c001b575:	e8 0e 03 ff ff       	call   c000b888 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b57a:	83 c4 20             	add    esp,0x20
c001b57d:	89 c2                	mov    edx,eax
c001b57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b583:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b589:	b8 00 00 00 00       	mov    eax,0x0
c001b58e:	83 c4 0c             	add    esp,0xc
c001b591:	c3                   	ret    
c001b592:	66 90                	xchg   ax,ax

c001b594 <PIT::close(int, int, void*)>:
c001b594:	83 ec 0c             	sub    esp,0xc
c001b597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a9:	6a 01                	push   0x1
c001b5ab:	68 20 b5 01 c0       	push   0xc001b520
c001b5b0:	6a 00                	push   0x0
c001b5b2:	50                   	push   eax
c001b5b3:	e8 06 03 ff ff       	call   c000b8be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	b8 00 00 00 00       	mov    eax,0x0
c001b5c0:	83 c4 0c             	add    esp,0xc
c001b5c3:	c3                   	ret    

c001b5c4 <PIT::PIT()>:
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5cb:	83 ec 08             	sub    esp,0x8
c001b5ce:	68 98 f1 01 c0       	push   0xc001f198
c001b5d3:	50                   	push   eax
c001b5d4:	e8 cb 1a ff ff       	call   c000d0a4 <Timer::Timer(char const*)>
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c001b5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e5:	89 10                	mov    DWORD PTR [eax],edx
c001b5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5f1:	31 d2                	xor    edx,edx
c001b5f3:	88 c2                	mov    dl,al
c001b5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b604:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b60a:	31 d2                	xor    edx,edx
c001b60c:	88 c2                	mov    dl,al
c001b60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b612:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b621:	8d 50 01             	lea    edx,[eax+0x1]
c001b624:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b628:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b62e:	31 d2                	xor    edx,edx
c001b630:	88 c2                	mov    dl,al
c001b632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b636:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b63a:	83 e1 3f             	and    ecx,0x3f
c001b63d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b641:	90                   	nop
c001b642:	83 c4 0c             	add    esp,0xc
c001b645:	c3                   	ret    
c001b646:	66 90                	xchg   ax,ax
c001b648:	66 90                	xchg   ax,ax
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	66 90                	xchg   ax,ax
c001b64e:	66 90                	xchg   ax,ax

c001b650 <avxDetect>:
c001b650:	b8 01 00 00 00       	mov    eax,0x1
c001b655:	0f a2                	cpuid  
c001b657:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b65d:	74 15                	je     c001b674 <avxDetect.noAVX>
c001b65f:	b8 01 00 00 00       	mov    eax,0x1
c001b664:	0f a2                	cpuid  
c001b666:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b66c:	74 06                	je     c001b674 <avxDetect.noAVX>
c001b66e:	b8 01 00 00 00       	mov    eax,0x1
c001b673:	c3                   	ret    

c001b674 <avxDetect.noAVX>:
c001b674:	b8 00 00 00 00       	mov    eax,0x0
c001b679:	c3                   	ret    

c001b67a <avxSave>:
c001b67a:	53                   	push   ebx
c001b67b:	52                   	push   edx
c001b67c:	31 c0                	xor    eax,eax
c001b67e:	48                   	dec    eax
c001b67f:	89 c2                	mov    edx,eax
c001b681:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b685:	0f ae 23             	xsave  [ebx]
c001b688:	5a                   	pop    edx
c001b689:	5b                   	pop    ebx
c001b68a:	c3                   	ret    

c001b68b <avxLoad>:
c001b68b:	53                   	push   ebx
c001b68c:	52                   	push   edx
c001b68d:	31 c0                	xor    eax,eax
c001b68f:	48                   	dec    eax
c001b690:	89 c2                	mov    edx,eax
c001b692:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b696:	0f ae 2b             	xrstor [ebx]
c001b699:	5a                   	pop    edx
c001b69a:	5b                   	pop    ebx
c001b69b:	c3                   	ret    

c001b69c <avxInit>:
c001b69c:	e8 57 02 00 00       	call   c001b8f8 <sseInit>
c001b6a1:	50                   	push   eax
c001b6a2:	51                   	push   ecx
c001b6a3:	0f 20 e0             	mov    eax,cr4
c001b6a6:	0d 00 00 04 00       	or     eax,0x40000
c001b6ab:	0f 22 e0             	mov    cr4,eax
c001b6ae:	31 c9                	xor    ecx,ecx
c001b6b0:	0f 01 d0             	xgetbv 
c001b6b3:	0d 07 00 00 00       	or     eax,0x7
c001b6b8:	0f 01 d1             	xsetbv 
c001b6bb:	59                   	pop    ecx
c001b6bc:	58                   	pop    eax
c001b6bd:	c3                   	ret    

c001b6be <avxClose>:
c001b6be:	c3                   	ret    

c001b6bf <wouldSheSayYes>:
c001b6bf:	c3                   	ret    
c001b6c0:	49                   	dec    ecx
c001b6c1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b6c5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b6c9:	75 20                	jne    c001b6eb <isr0+0xb>
c001b6cb:	4e                   	dec    esi
c001b6cc:	79 61                	jns    c001b72f <isr7+0x3>
c001b6ce:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b6d3:	66 90                	xchg   ax,ax
c001b6d5:	66 90                	xchg   ax,ax
c001b6d7:	66 90                	xchg   ax,ax
c001b6d9:	66 90                	xchg   ax,ax
c001b6db:	66 90                	xchg   ax,ax
c001b6dd:	66 90                	xchg   ax,ax
c001b6df:	90                   	nop

c001b6e0 <isr0>:
c001b6e0:	fa                   	cli    
c001b6e1:	68 00 00 00 00       	push   0x0
c001b6e6:	68 00 00 00 00       	push   0x0
c001b6eb:	e9 44 01 00 00       	jmp    c001b834 <int_common_stub>

c001b6f0 <isr1>:
c001b6f0:	fa                   	cli    
c001b6f1:	6a 00                	push   0x0
c001b6f3:	6a 01                	push   0x1
c001b6f5:	e9 3a 01 00 00       	jmp    c001b834 <int_common_stub>

c001b6fa <isr2>:
c001b6fa:	fa                   	cli    
c001b6fb:	6a 00                	push   0x0
c001b6fd:	6a 02                	push   0x2
c001b6ff:	e9 30 01 00 00       	jmp    c001b834 <int_common_stub>

c001b704 <isr3>:
c001b704:	fa                   	cli    
c001b705:	6a 00                	push   0x0
c001b707:	6a 03                	push   0x3
c001b709:	e9 26 01 00 00       	jmp    c001b834 <int_common_stub>

c001b70e <isr4>:
c001b70e:	fa                   	cli    
c001b70f:	6a 00                	push   0x0
c001b711:	6a 04                	push   0x4
c001b713:	e9 1c 01 00 00       	jmp    c001b834 <int_common_stub>

c001b718 <isr5>:
c001b718:	fa                   	cli    
c001b719:	6a 00                	push   0x0
c001b71b:	6a 05                	push   0x5
c001b71d:	e9 12 01 00 00       	jmp    c001b834 <int_common_stub>

c001b722 <isr6>:
c001b722:	fa                   	cli    
c001b723:	6a 00                	push   0x0
c001b725:	6a 06                	push   0x6
c001b727:	e9 08 01 00 00       	jmp    c001b834 <int_common_stub>

c001b72c <isr7>:
c001b72c:	fa                   	cli    
c001b72d:	6a 00                	push   0x0
c001b72f:	6a 07                	push   0x7
c001b731:	e9 fe 00 00 00       	jmp    c001b834 <int_common_stub>

c001b736 <isr8>:
c001b736:	fa                   	cli    
c001b737:	6a 08                	push   0x8
c001b739:	e9 f6 00 00 00       	jmp    c001b834 <int_common_stub>

c001b73e <isr9>:
c001b73e:	fa                   	cli    
c001b73f:	6a 00                	push   0x0
c001b741:	6a 09                	push   0x9
c001b743:	e9 ec 00 00 00       	jmp    c001b834 <int_common_stub>

c001b748 <isr10>:
c001b748:	fa                   	cli    
c001b749:	6a 0a                	push   0xa
c001b74b:	e9 e4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b750 <isr11>:
c001b750:	fa                   	cli    
c001b751:	6a 0b                	push   0xb
c001b753:	e9 dc 00 00 00       	jmp    c001b834 <int_common_stub>

c001b758 <isr12>:
c001b758:	fa                   	cli    
c001b759:	6a 0c                	push   0xc
c001b75b:	e9 d4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b760 <isr13>:
c001b760:	fa                   	cli    
c001b761:	6a 0d                	push   0xd
c001b763:	e9 cc 00 00 00       	jmp    c001b834 <int_common_stub>

c001b768 <isr14>:
c001b768:	fa                   	cli    
c001b769:	6a 0e                	push   0xe
c001b76b:	e9 c4 00 00 00       	jmp    c001b834 <int_common_stub>

c001b770 <isr15>:
c001b770:	fa                   	cli    
c001b771:	6a 00                	push   0x0
c001b773:	6a 0f                	push   0xf
c001b775:	e9 ba 00 00 00       	jmp    c001b834 <int_common_stub>

c001b77a <isr16>:
c001b77a:	fa                   	cli    
c001b77b:	6a 00                	push   0x0
c001b77d:	6a 10                	push   0x10
c001b77f:	e9 b0 00 00 00       	jmp    c001b834 <int_common_stub>

c001b784 <isr17>:
c001b784:	fa                   	cli    
c001b785:	6a 00                	push   0x0
c001b787:	6a 11                	push   0x11
c001b789:	e9 a6 00 00 00       	jmp    c001b834 <int_common_stub>

c001b78e <isr18>:
c001b78e:	fa                   	cli    
c001b78f:	6a 00                	push   0x0
c001b791:	6a 12                	push   0x12
c001b793:	e9 9c 00 00 00       	jmp    c001b834 <int_common_stub>

c001b798 <irq3>:
c001b798:	fa                   	cli    
c001b799:	6a 00                	push   0x0
c001b79b:	6a 23                	push   0x23
c001b79d:	e9 92 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7a2 <irq4>:
c001b7a2:	fa                   	cli    
c001b7a3:	6a 00                	push   0x0
c001b7a5:	6a 24                	push   0x24
c001b7a7:	e9 88 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7ac <irq5>:
c001b7ac:	fa                   	cli    
c001b7ad:	6a 00                	push   0x0
c001b7af:	6a 25                	push   0x25
c001b7b1:	e9 7e 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7b6 <irq6>:
c001b7b6:	fa                   	cli    
c001b7b7:	6a 00                	push   0x0
c001b7b9:	6a 26                	push   0x26
c001b7bb:	e9 74 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7c0 <irq7>:
c001b7c0:	fa                   	cli    
c001b7c1:	6a 00                	push   0x0
c001b7c3:	6a 27                	push   0x27
c001b7c5:	e9 6a 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7ca <irq8>:
c001b7ca:	fa                   	cli    
c001b7cb:	6a 00                	push   0x0
c001b7cd:	6a 28                	push   0x28
c001b7cf:	e9 60 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7d4 <irq9>:
c001b7d4:	fa                   	cli    
c001b7d5:	6a 00                	push   0x0
c001b7d7:	6a 29                	push   0x29
c001b7d9:	e9 56 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7de <irq10>:
c001b7de:	fa                   	cli    
c001b7df:	6a 00                	push   0x0
c001b7e1:	6a 2a                	push   0x2a
c001b7e3:	e9 4c 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7e8 <irq11>:
c001b7e8:	fa                   	cli    
c001b7e9:	6a 00                	push   0x0
c001b7eb:	6a 2b                	push   0x2b
c001b7ed:	e9 42 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7f2 <irq12>:
c001b7f2:	fa                   	cli    
c001b7f3:	6a 00                	push   0x0
c001b7f5:	6a 2c                	push   0x2c
c001b7f7:	e9 38 00 00 00       	jmp    c001b834 <int_common_stub>

c001b7fc <irq13>:
c001b7fc:	fa                   	cli    
c001b7fd:	6a 00                	push   0x0
c001b7ff:	6a 2d                	push   0x2d
c001b801:	e9 2e 00 00 00       	jmp    c001b834 <int_common_stub>

c001b806 <irq14>:
c001b806:	fa                   	cli    
c001b807:	6a 00                	push   0x0
c001b809:	6a 2e                	push   0x2e
c001b80b:	e9 24 00 00 00       	jmp    c001b834 <int_common_stub>

c001b810 <irq15>:
c001b810:	fa                   	cli    
c001b811:	6a 00                	push   0x0
c001b813:	6a 2f                	push   0x2f
c001b815:	e9 1a 00 00 00       	jmp    c001b834 <int_common_stub>

c001b81a <irq1>:
c001b81a:	fa                   	cli    
c001b81b:	6a 00                	push   0x0
c001b81d:	6a 21                	push   0x21
c001b81f:	eb 13                	jmp    c001b834 <int_common_stub>

c001b821 <irq2>:
c001b821:	fa                   	cli    
c001b822:	6a 00                	push   0x0
c001b824:	6a 22                	push   0x22
c001b826:	eb 0c                	jmp    c001b834 <int_common_stub>

c001b828 <isr96>:
c001b828:	6a 00                	push   0x0
c001b82a:	6a 60                	push   0x60
c001b82c:	fb                   	sti    
c001b82d:	eb 05                	jmp    c001b834 <int_common_stub>

c001b82f <irq0>:
c001b82f:	fa                   	cli    
c001b830:	6a 00                	push   0x0
c001b832:	6a 20                	push   0x20

c001b834 <int_common_stub>:
c001b834:	60                   	pusha  
c001b835:	1e                   	push   ds
c001b836:	06                   	push   es
c001b837:	0f a0                	push   fs
c001b839:	0f a8                	push   gs
c001b83b:	66 b8 10 00          	mov    ax,0x10
c001b83f:	66 8e d8             	mov    ds,ax
c001b842:	66 8e c0             	mov    es,ax
c001b845:	66 8e e0             	mov    fs,ax
c001b848:	66 8e e8             	mov    gs,ax
c001b84b:	54                   	push   esp
c001b84c:	fc                   	cld    
c001b84d:	e8 36 05 ff ff       	call   c000bd88 <int_handler>
c001b852:	81 c4 04 00 00 00    	add    esp,0x4
c001b858:	0f a9                	pop    gs
c001b85a:	0f a1                	pop    fs
c001b85c:	07                   	pop    es
c001b85d:	1f                   	pop    ds
c001b85e:	61                   	popa   
c001b85f:	81 c4 08 00 00 00    	add    esp,0x8
c001b865:	cf                   	iret   

c001b866 <irq16>:
c001b866:	fa                   	cli    
c001b867:	6a 00                	push   0x0
c001b869:	6a 30                	push   0x30
c001b86b:	e9 c4 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b870 <irq17>:
c001b870:	fa                   	cli    
c001b871:	6a 00                	push   0x0
c001b873:	6a 31                	push   0x31
c001b875:	e9 ba ff ff ff       	jmp    c001b834 <int_common_stub>

c001b87a <irq18>:
c001b87a:	fa                   	cli    
c001b87b:	6a 00                	push   0x0
c001b87d:	6a 32                	push   0x32
c001b87f:	e9 b0 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b884 <irq19>:
c001b884:	fa                   	cli    
c001b885:	6a 00                	push   0x0
c001b887:	6a 33                	push   0x33
c001b889:	e9 a6 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b88e <irq20>:
c001b88e:	fa                   	cli    
c001b88f:	6a 00                	push   0x0
c001b891:	6a 34                	push   0x34
c001b893:	e9 9c ff ff ff       	jmp    c001b834 <int_common_stub>

c001b898 <irq21>:
c001b898:	fa                   	cli    
c001b899:	6a 00                	push   0x0
c001b89b:	6a 35                	push   0x35
c001b89d:	e9 92 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b8a2 <irq22>:
c001b8a2:	fa                   	cli    
c001b8a3:	6a 00                	push   0x0
c001b8a5:	6a 36                	push   0x36
c001b8a7:	e9 88 ff ff ff       	jmp    c001b834 <int_common_stub>

c001b8ac <irq23>:
c001b8ac:	fa                   	cli    
c001b8ad:	6a 00                	push   0x0
c001b8af:	6a 37                	push   0x37
c001b8b1:	e9 7e ff ff ff       	jmp    c001b834 <int_common_stub>
c001b8b6:	66 90                	xchg   ax,ax
c001b8b8:	66 90                	xchg   ax,ax
c001b8ba:	66 90                	xchg   ax,ax
c001b8bc:	66 90                	xchg   ax,ax
c001b8be:	66 90                	xchg   ax,ax

c001b8c0 <i386GetRDRAND>:
c001b8c0:	b9 64 00 00 00       	mov    ecx,0x64

c001b8c5 <retry>:
c001b8c5:	0f c7 f0             	rdrand eax
c001b8c8:	72 05                	jb     c001b8cf <retry.done>
c001b8ca:	e2 f9                	loop   c001b8c5 <retry>

c001b8cc <retry.fail>:
c001b8cc:	31 c0                	xor    eax,eax
c001b8ce:	c3                   	ret    

c001b8cf <retry.done>:
c001b8cf:	c3                   	ret    

c001b8d0 <absolutelyNoChanceInHell>:
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	0f a2                	cpuid  
c001b8d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b8dd:	74 06                	je     c001b8e5 <sseDetect.noSSE>
c001b8df:	b8 01 00 00 00       	mov    eax,0x1
c001b8e4:	c3                   	ret    

c001b8e5 <sseDetect.noSSE>:
c001b8e5:	31 c0                	xor    eax,eax
c001b8e7:	c3                   	ret    

c001b8e8 <sseSave>:
c001b8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ec:	0f ae 00             	fxsave [eax]
c001b8ef:	c3                   	ret    

c001b8f0 <sseLoad>:
c001b8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f4:	0f ae 08             	fxrstor [eax]
c001b8f7:	c3                   	ret    

c001b8f8 <sseInit>:
c001b8f8:	e8 42 00 00 00       	call   c001b93f <x87Init>
c001b8fd:	0f 20 e0             	mov    eax,cr4
c001b900:	66 0d 00 06          	or     ax,0x600
c001b904:	0f 22 e0             	mov    cr4,eax
c001b907:	c3                   	ret    

c001b908 <sseClose>:
c001b908:	c3                   	ret    
c001b909:	66 90                	xchg   ax,ax
c001b90b:	66 90                	xchg   ax,ax
c001b90d:	66 90                	xchg   ax,ax
c001b90f:	90                   	nop

c001b910 <value_37F>:
c001b910:	7f 03                	jg     c001b915 <value_37A+0x1>

c001b912 <value_37E>:
c001b912:	7e 03                	jle    c001b917 <x87Detect+0x1>

c001b914 <value_37A>:
c001b914:	7a 03                	jp     c001b919 <x87Detect+0x3>

c001b916 <x87Detect>:
c001b916:	b8 01 00 00 00       	mov    eax,0x1
c001b91b:	0f a2                	cpuid  
c001b91d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b923:	74 06                	je     c001b92b <x87Detect.nox87>
c001b925:	b8 01 00 00 00       	mov    eax,0x1
c001b92a:	c3                   	ret    

c001b92b <x87Detect.nox87>:
c001b92b:	b8 00 00 00 00       	mov    eax,0x0
c001b930:	c3                   	ret    

c001b931 <x87Save>:
c001b931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b935:	dd 30                	fnsave [eax]
c001b937:	c3                   	ret    

c001b938 <x87Load>:
c001b938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93c:	dd 20                	frstor [eax]
c001b93e:	c3                   	ret    

c001b93f <x87Init>:
c001b93f:	0f 20 c0             	mov    eax,cr0
c001b942:	66 25 fb ff          	and    ax,0xfffb
c001b946:	66 0d 22 00          	or     ax,0x22
c001b94a:	0f 22 c0             	mov    cr0,eax
c001b94d:	db e3                	fninit 
c001b94f:	0f 06                	clts   
c001b951:	d9 2d 14 b9 01 c0    	fldcw  WORD PTR ds:0xc001b914
c001b957:	c3                   	ret    

c001b958 <x87Close>:
c001b958:	c3                   	ret    
c001b959:	66 90                	xchg   ax,ax
c001b95b:	90                   	nop

c001b95c <__do_global_ctors_aux>:
c001b95c:	a1 0c c9 01 c0       	mov    eax,ds:0xc001c90c
c001b961:	83 f8 ff             	cmp    eax,0xffffffff
c001b964:	74 1a                	je     c001b980 <__do_global_ctors_aux+0x24>
c001b966:	55                   	push   ebp
c001b967:	89 e5                	mov    ebp,esp
c001b969:	53                   	push   ebx
c001b96a:	52                   	push   edx
c001b96b:	bb 0c c9 01 c0       	mov    ebx,0xc001c90c
c001b970:	ff d0                	call   eax
c001b972:	83 eb 04             	sub    ebx,0x4
c001b975:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b977:	83 f8 ff             	cmp    eax,0xffffffff
c001b97a:	75 f4                	jne    c001b970 <__do_global_ctors_aux+0x14>
c001b97c:	58                   	pop    eax
c001b97d:	5b                   	pop    ebx
c001b97e:	5d                   	pop    ebp
c001b97f:	c3                   	ret    
c001b980:	c3                   	ret    
c001b981:	66 90                	xchg   ax,ax
c001b983:	90                   	nop

c001b984 <__divdi3>:
c001b984:	55                   	push   ebp
c001b985:	57                   	push   edi
c001b986:	56                   	push   esi
c001b987:	53                   	push   ebx
c001b988:	83 ec 1c             	sub    esp,0x1c
c001b98b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b98f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b993:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b996:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b99a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b99e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b9a2:	85 db                	test   ebx,ebx
c001b9a4:	0f 88 8e 00 00 00    	js     c001ba38 <__divdi3+0xb4>
c001b9aa:	89 dd                	mov    ebp,ebx
c001b9ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9b4:	89 d3                	mov    ebx,edx
c001b9b6:	85 d2                	test   edx,edx
c001b9b8:	79 0d                	jns    c001b9c7 <__divdi3+0x43>
c001b9ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b9be:	f7 d8                	neg    eax
c001b9c0:	83 d2 00             	adc    edx,0x0
c001b9c3:	f7 da                	neg    edx
c001b9c5:	89 d3                	mov    ebx,edx
c001b9c7:	89 c7                	mov    edi,eax
c001b9c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9cc:	85 db                	test   ebx,ebx
c001b9ce:	75 48                	jne    c001ba18 <__divdi3+0x94>
c001b9d0:	39 ef                	cmp    edi,ebp
c001b9d2:	76 24                	jbe    c001b9f8 <__divdi3+0x74>
c001b9d4:	89 ea                	mov    edx,ebp
c001b9d6:	f7 f7                	div    edi
c001b9d8:	89 c1                	mov    ecx,eax
c001b9da:	31 f6                	xor    esi,esi
c001b9dc:	89 c8                	mov    eax,ecx
c001b9de:	89 f2                	mov    edx,esi
c001b9e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9e4:	85 c9                	test   ecx,ecx
c001b9e6:	74 07                	je     c001b9ef <__divdi3+0x6b>
c001b9e8:	f7 d8                	neg    eax
c001b9ea:	83 d2 00             	adc    edx,0x0
c001b9ed:	f7 da                	neg    edx
c001b9ef:	83 c4 1c             	add    esp,0x1c
c001b9f2:	5b                   	pop    ebx
c001b9f3:	5e                   	pop    esi
c001b9f4:	5f                   	pop    edi
c001b9f5:	5d                   	pop    ebp
c001b9f6:	c3                   	ret    
c001b9f7:	90                   	nop
c001b9f8:	85 ff                	test   edi,edi
c001b9fa:	75 0b                	jne    c001ba07 <__divdi3+0x83>
c001b9fc:	b8 01 00 00 00       	mov    eax,0x1
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	f7 f3                	div    ebx
c001ba05:	89 c7                	mov    edi,eax
c001ba07:	31 d2                	xor    edx,edx
c001ba09:	89 e8                	mov    eax,ebp
c001ba0b:	f7 f7                	div    edi
c001ba0d:	89 c6                	mov    esi,eax
c001ba0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba12:	f7 f7                	div    edi
c001ba14:	89 c1                	mov    ecx,eax
c001ba16:	eb c4                	jmp    c001b9dc <__divdi3+0x58>
c001ba18:	39 eb                	cmp    ebx,ebp
c001ba1a:	77 3c                	ja     c001ba58 <__divdi3+0xd4>
c001ba1c:	0f bd f3             	bsr    esi,ebx
c001ba1f:	83 f6 1f             	xor    esi,0x1f
c001ba22:	75 40                	jne    c001ba64 <__divdi3+0xe0>
c001ba24:	39 eb                	cmp    ebx,ebp
c001ba26:	72 09                	jb     c001ba31 <__divdi3+0xad>
c001ba28:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba2b:	0f 87 97 00 00 00    	ja     c001bac8 <__divdi3+0x144>
c001ba31:	b9 01 00 00 00       	mov    ecx,0x1
c001ba36:	eb a4                	jmp    c001b9dc <__divdi3+0x58>
c001ba38:	f7 d9                	neg    ecx
c001ba3a:	83 d3 00             	adc    ebx,0x0
c001ba3d:	f7 db                	neg    ebx
c001ba3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba46:	89 dd                	mov    ebp,ebx
c001ba48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba50:	e9 5f ff ff ff       	jmp    c001b9b4 <__divdi3+0x30>
c001ba55:	8d 76 00             	lea    esi,[esi+0x0]
c001ba58:	31 f6                	xor    esi,esi
c001ba5a:	31 c9                	xor    ecx,ecx
c001ba5c:	e9 7b ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001ba61:	8d 76 00             	lea    esi,[esi+0x0]
c001ba64:	b8 20 00 00 00       	mov    eax,0x20
c001ba69:	29 f0                	sub    eax,esi
c001ba6b:	89 f1                	mov    ecx,esi
c001ba6d:	d3 e3                	shl    ebx,cl
c001ba6f:	89 fa                	mov    edx,edi
c001ba71:	88 c1                	mov    cl,al
c001ba73:	d3 ea                	shr    edx,cl
c001ba75:	09 da                	or     edx,ebx
c001ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba7b:	89 f1                	mov    ecx,esi
c001ba7d:	d3 e7                	shl    edi,cl
c001ba7f:	89 eb                	mov    ebx,ebp
c001ba81:	88 c1                	mov    cl,al
c001ba83:	d3 eb                	shr    ebx,cl
c001ba85:	89 f1                	mov    ecx,esi
c001ba87:	d3 e5                	shl    ebp,cl
c001ba89:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ba8c:	88 c1                	mov    cl,al
c001ba8e:	d3 ea                	shr    edx,cl
c001ba90:	09 d5                	or     ebp,edx
c001ba92:	89 e8                	mov    eax,ebp
c001ba94:	89 da                	mov    edx,ebx
c001ba96:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba9a:	89 d3                	mov    ebx,edx
c001ba9c:	89 c5                	mov    ebp,eax
c001ba9e:	f7 e7                	mul    edi
c001baa0:	39 d3                	cmp    ebx,edx
c001baa2:	72 18                	jb     c001babc <__divdi3+0x138>
c001baa4:	74 0a                	je     c001bab0 <__divdi3+0x12c>
c001baa6:	89 e9                	mov    ecx,ebp
c001baa8:	31 f6                	xor    esi,esi
c001baaa:	e9 2d ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001baaf:	90                   	nop
c001bab0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bab3:	89 f1                	mov    ecx,esi
c001bab5:	d3 e7                	shl    edi,cl
c001bab7:	39 c7                	cmp    edi,eax
c001bab9:	73 eb                	jae    c001baa6 <__divdi3+0x122>
c001babb:	90                   	nop
c001babc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001babf:	31 f6                	xor    esi,esi
c001bac1:	e9 16 ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001bac6:	66 90                	xchg   ax,ax
c001bac8:	31 c9                	xor    ecx,ecx
c001baca:	e9 0d ff ff ff       	jmp    c001b9dc <__divdi3+0x58>
c001bacf:	90                   	nop

c001bad0 <__moddi3>:
c001bad0:	55                   	push   ebp
c001bad1:	57                   	push   edi
c001bad2:	56                   	push   esi
c001bad3:	53                   	push   ebx
c001bad4:	83 ec 2c             	sub    esp,0x2c
c001bad7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001badb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001badf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bae3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bae7:	85 db                	test   ebx,ebx
c001bae9:	0f 88 85 00 00 00    	js     c001bb74 <__moddi3+0xa4>
c001baef:	89 de                	mov    esi,ebx
c001baf1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001baf9:	89 d7                	mov    edi,edx
c001bafb:	85 d2                	test   edx,edx
c001bafd:	79 09                	jns    c001bb08 <__moddi3+0x38>
c001baff:	f7 d8                	neg    eax
c001bb01:	83 d2 00             	adc    edx,0x0
c001bb04:	f7 da                	neg    edx
c001bb06:	89 d7                	mov    edi,edx
c001bb08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb0c:	89 cd                	mov    ebp,ecx
c001bb0e:	85 ff                	test   edi,edi
c001bb10:	75 52                	jne    c001bb64 <__moddi3+0x94>
c001bb12:	89 c3                	mov    ebx,eax
c001bb14:	39 f0                	cmp    eax,esi
c001bb16:	76 24                	jbe    c001bb3c <__moddi3+0x6c>
c001bb18:	89 c8                	mov    eax,ecx
c001bb1a:	89 f2                	mov    edx,esi
c001bb1c:	f7 f3                	div    ebx
c001bb1e:	89 d6                	mov    esi,edx
c001bb20:	89 f0                	mov    eax,esi
c001bb22:	31 d2                	xor    edx,edx
c001bb24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb28:	85 c9                	test   ecx,ecx
c001bb2a:	74 07                	je     c001bb33 <__moddi3+0x63>
c001bb2c:	f7 d8                	neg    eax
c001bb2e:	83 d2 00             	adc    edx,0x0
c001bb31:	f7 da                	neg    edx
c001bb33:	83 c4 2c             	add    esp,0x2c
c001bb36:	5b                   	pop    ebx
c001bb37:	5e                   	pop    esi
c001bb38:	5f                   	pop    edi
c001bb39:	5d                   	pop    ebp
c001bb3a:	c3                   	ret    
c001bb3b:	90                   	nop
c001bb3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb40:	85 db                	test   ebx,ebx
c001bb42:	75 0d                	jne    c001bb51 <__moddi3+0x81>
c001bb44:	b8 01 00 00 00       	mov    eax,0x1
c001bb49:	31 d2                	xor    edx,edx
c001bb4b:	f7 f7                	div    edi
c001bb4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb51:	89 f0                	mov    eax,esi
c001bb53:	31 d2                	xor    edx,edx
c001bb55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb59:	f7 f7                	div    edi
c001bb5b:	89 e8                	mov    eax,ebp
c001bb5d:	f7 f7                	div    edi
c001bb5f:	89 d6                	mov    esi,edx
c001bb61:	eb bd                	jmp    c001bb20 <__moddi3+0x50>
c001bb63:	90                   	nop
c001bb64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb68:	39 f7                	cmp    edi,esi
c001bb6a:	76 20                	jbe    c001bb8c <__moddi3+0xbc>
c001bb6c:	89 c8                	mov    eax,ecx
c001bb6e:	89 f2                	mov    edx,esi
c001bb70:	eb b2                	jmp    c001bb24 <__moddi3+0x54>
c001bb72:	66 90                	xchg   ax,ax
c001bb74:	f7 d9                	neg    ecx
c001bb76:	83 d3 00             	adc    ebx,0x0
c001bb79:	f7 db                	neg    ebx
c001bb7b:	89 de                	mov    esi,ebx
c001bb7d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bb85:	e9 6f ff ff ff       	jmp    c001baf9 <__moddi3+0x29>
c001bb8a:	66 90                	xchg   ax,ax
c001bb8c:	0f bd c7             	bsr    eax,edi
c001bb8f:	83 f0 1f             	xor    eax,0x1f
c001bb92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb96:	75 24                	jne    c001bbbc <__moddi3+0xec>
c001bb98:	39 f7                	cmp    edi,esi
c001bb9a:	72 06                	jb     c001bba2 <__moddi3+0xd2>
c001bb9c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bba0:	77 0c                	ja     c001bbae <__moddi3+0xde>
c001bba2:	89 e9                	mov    ecx,ebp
c001bba4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bba8:	19 fe                	sbb    esi,edi
c001bbaa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bbae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbb2:	89 f2                	mov    edx,esi
c001bbb4:	e9 6b ff ff ff       	jmp    c001bb24 <__moddi3+0x54>
c001bbb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbbc:	b8 20 00 00 00       	mov    eax,0x20
c001bbc1:	89 c2                	mov    edx,eax
c001bbc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bbc7:	29 da                	sub    edx,ebx
c001bbc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bbcd:	88 d9                	mov    cl,bl
c001bbcf:	d3 e7                	shl    edi,cl
c001bbd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd5:	88 d1                	mov    cl,dl
c001bbd7:	d3 e8                	shr    eax,cl
c001bbd9:	09 c7                	or     edi,eax
c001bbdb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bbdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbe3:	89 d8                	mov    eax,ebx
c001bbe5:	88 d9                	mov    cl,bl
c001bbe7:	d3 e7                	shl    edi,cl
c001bbe9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bbed:	89 f3                	mov    ebx,esi
c001bbef:	88 d1                	mov    cl,dl
c001bbf1:	d3 eb                	shr    ebx,cl
c001bbf3:	89 c7                	mov    edi,eax
c001bbf5:	88 c1                	mov    cl,al
c001bbf7:	d3 e6                	shl    esi,cl
c001bbf9:	89 e8                	mov    eax,ebp
c001bbfb:	88 d1                	mov    cl,dl
c001bbfd:	d3 e8                	shr    eax,cl
c001bbff:	09 f0                	or     eax,esi
c001bc01:	89 f9                	mov    ecx,edi
c001bc03:	d3 e5                	shl    ebp,cl
c001bc05:	89 da                	mov    edx,ebx
c001bc07:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bc0b:	89 d3                	mov    ebx,edx
c001bc0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc11:	89 c6                	mov    esi,eax
c001bc13:	89 d1                	mov    ecx,edx
c001bc15:	39 d3                	cmp    ebx,edx
c001bc17:	72 27                	jb     c001bc40 <__moddi3+0x170>
c001bc19:	74 21                	je     c001bc3c <__moddi3+0x16c>
c001bc1b:	29 f5                	sub    ebp,esi
c001bc1d:	19 cb                	sbb    ebx,ecx
c001bc1f:	89 de                	mov    esi,ebx
c001bc21:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc25:	d3 e6                	shl    esi,cl
c001bc27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc2b:	89 f9                	mov    ecx,edi
c001bc2d:	d3 ed                	shr    ebp,cl
c001bc2f:	09 ee                	or     esi,ebp
c001bc31:	89 f0                	mov    eax,esi
c001bc33:	d3 eb                	shr    ebx,cl
c001bc35:	89 da                	mov    edx,ebx
c001bc37:	e9 e8 fe ff ff       	jmp    c001bb24 <__moddi3+0x54>
c001bc3c:	39 c5                	cmp    ebp,eax
c001bc3e:	73 db                	jae    c001bc1b <__moddi3+0x14b>
c001bc40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc44:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc48:	89 d1                	mov    ecx,edx
c001bc4a:	89 c6                	mov    esi,eax
c001bc4c:	eb cd                	jmp    c001bc1b <__moddi3+0x14b>
c001bc4e:	66 90                	xchg   ax,ax

c001bc50 <__udivdi3>:
c001bc50:	55                   	push   ebp
c001bc51:	57                   	push   edi
c001bc52:	56                   	push   esi
c001bc53:	53                   	push   ebx
c001bc54:	83 ec 1c             	sub    esp,0x1c
c001bc57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bc63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc67:	85 d2                	test   edx,edx
c001bc69:	75 41                	jne    c001bcac <__udivdi3+0x5c>
c001bc6b:	39 f7                	cmp    edi,esi
c001bc6d:	76 15                	jbe    c001bc84 <__udivdi3+0x34>
c001bc6f:	89 e8                	mov    eax,ebp
c001bc71:	89 f2                	mov    edx,esi
c001bc73:	f7 f7                	div    edi
c001bc75:	31 db                	xor    ebx,ebx
c001bc77:	89 da                	mov    edx,ebx
c001bc79:	83 c4 1c             	add    esp,0x1c
c001bc7c:	5b                   	pop    ebx
c001bc7d:	5e                   	pop    esi
c001bc7e:	5f                   	pop    edi
c001bc7f:	5d                   	pop    ebp
c001bc80:	c3                   	ret    
c001bc81:	8d 76 00             	lea    esi,[esi+0x0]
c001bc84:	89 f9                	mov    ecx,edi
c001bc86:	85 ff                	test   edi,edi
c001bc88:	75 0b                	jne    c001bc95 <__udivdi3+0x45>
c001bc8a:	b8 01 00 00 00       	mov    eax,0x1
c001bc8f:	31 d2                	xor    edx,edx
c001bc91:	f7 f7                	div    edi
c001bc93:	89 c1                	mov    ecx,eax
c001bc95:	31 d2                	xor    edx,edx
c001bc97:	89 f0                	mov    eax,esi
c001bc99:	f7 f1                	div    ecx
c001bc9b:	89 c3                	mov    ebx,eax
c001bc9d:	89 e8                	mov    eax,ebp
c001bc9f:	f7 f1                	div    ecx
c001bca1:	89 da                	mov    edx,ebx
c001bca3:	83 c4 1c             	add    esp,0x1c
c001bca6:	5b                   	pop    ebx
c001bca7:	5e                   	pop    esi
c001bca8:	5f                   	pop    edi
c001bca9:	5d                   	pop    ebp
c001bcaa:	c3                   	ret    
c001bcab:	90                   	nop
c001bcac:	39 f2                	cmp    edx,esi
c001bcae:	77 1c                	ja     c001bccc <__udivdi3+0x7c>
c001bcb0:	0f bd da             	bsr    ebx,edx
c001bcb3:	83 f3 1f             	xor    ebx,0x1f
c001bcb6:	75 24                	jne    c001bcdc <__udivdi3+0x8c>
c001bcb8:	39 f2                	cmp    edx,esi
c001bcba:	72 08                	jb     c001bcc4 <__udivdi3+0x74>
c001bcbc:	39 ef                	cmp    edi,ebp
c001bcbe:	0f 87 84 00 00 00    	ja     c001bd48 <__udivdi3+0xf8>
c001bcc4:	b8 01 00 00 00       	mov    eax,0x1
c001bcc9:	eb ac                	jmp    c001bc77 <__udivdi3+0x27>
c001bccb:	90                   	nop
c001bccc:	31 db                	xor    ebx,ebx
c001bcce:	31 c0                	xor    eax,eax
c001bcd0:	89 da                	mov    edx,ebx
c001bcd2:	83 c4 1c             	add    esp,0x1c
c001bcd5:	5b                   	pop    ebx
c001bcd6:	5e                   	pop    esi
c001bcd7:	5f                   	pop    edi
c001bcd8:	5d                   	pop    ebp
c001bcd9:	c3                   	ret    
c001bcda:	66 90                	xchg   ax,ax
c001bcdc:	b8 20 00 00 00       	mov    eax,0x20
c001bce1:	29 d8                	sub    eax,ebx
c001bce3:	88 d9                	mov    cl,bl
c001bce5:	d3 e2                	shl    edx,cl
c001bce7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bceb:	89 fa                	mov    edx,edi
c001bced:	88 c1                	mov    cl,al
c001bcef:	d3 ea                	shr    edx,cl
c001bcf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bcf5:	09 d1                	or     ecx,edx
c001bcf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bcfb:	88 d9                	mov    cl,bl
c001bcfd:	d3 e7                	shl    edi,cl
c001bcff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd03:	89 f7                	mov    edi,esi
c001bd05:	88 c1                	mov    cl,al
c001bd07:	d3 ef                	shr    edi,cl
c001bd09:	88 d9                	mov    cl,bl
c001bd0b:	d3 e6                	shl    esi,cl
c001bd0d:	89 ea                	mov    edx,ebp
c001bd0f:	88 c1                	mov    cl,al
c001bd11:	d3 ea                	shr    edx,cl
c001bd13:	09 d6                	or     esi,edx
c001bd15:	89 f0                	mov    eax,esi
c001bd17:	89 fa                	mov    edx,edi
c001bd19:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd1d:	89 d7                	mov    edi,edx
c001bd1f:	89 c6                	mov    esi,eax
c001bd21:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd25:	39 d7                	cmp    edi,edx
c001bd27:	72 13                	jb     c001bd3c <__udivdi3+0xec>
c001bd29:	74 09                	je     c001bd34 <__udivdi3+0xe4>
c001bd2b:	89 f0                	mov    eax,esi
c001bd2d:	31 db                	xor    ebx,ebx
c001bd2f:	e9 43 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd34:	88 d9                	mov    cl,bl
c001bd36:	d3 e5                	shl    ebp,cl
c001bd38:	39 c5                	cmp    ebp,eax
c001bd3a:	73 ef                	jae    c001bd2b <__udivdi3+0xdb>
c001bd3c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd3f:	31 db                	xor    ebx,ebx
c001bd41:	e9 31 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd46:	66 90                	xchg   ax,ax
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	e9 28 ff ff ff       	jmp    c001bc77 <__udivdi3+0x27>
c001bd4f:	90                   	nop

c001bd50 <__umoddi3>:
c001bd50:	55                   	push   ebp
c001bd51:	57                   	push   edi
c001bd52:	56                   	push   esi
c001bd53:	53                   	push   ebx
c001bd54:	83 ec 1c             	sub    esp,0x1c
c001bd57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bd63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd67:	89 da                	mov    edx,ebx
c001bd69:	85 c0                	test   eax,eax
c001bd6b:	75 37                	jne    c001bda4 <__umoddi3+0x54>
c001bd6d:	39 df                	cmp    edi,ebx
c001bd6f:	76 13                	jbe    c001bd84 <__umoddi3+0x34>
c001bd71:	89 f0                	mov    eax,esi
c001bd73:	f7 f7                	div    edi
c001bd75:	89 d0                	mov    eax,edx
c001bd77:	31 d2                	xor    edx,edx
c001bd79:	83 c4 1c             	add    esp,0x1c
c001bd7c:	5b                   	pop    ebx
c001bd7d:	5e                   	pop    esi
c001bd7e:	5f                   	pop    edi
c001bd7f:	5d                   	pop    ebp
c001bd80:	c3                   	ret    
c001bd81:	8d 76 00             	lea    esi,[esi+0x0]
c001bd84:	89 fd                	mov    ebp,edi
c001bd86:	85 ff                	test   edi,edi
c001bd88:	75 0b                	jne    c001bd95 <__umoddi3+0x45>
c001bd8a:	b8 01 00 00 00       	mov    eax,0x1
c001bd8f:	31 d2                	xor    edx,edx
c001bd91:	f7 f7                	div    edi
c001bd93:	89 c5                	mov    ebp,eax
c001bd95:	89 d8                	mov    eax,ebx
c001bd97:	31 d2                	xor    edx,edx
c001bd99:	f7 f5                	div    ebp
c001bd9b:	89 f0                	mov    eax,esi
c001bd9d:	f7 f5                	div    ebp
c001bd9f:	89 d0                	mov    eax,edx
c001bda1:	eb d4                	jmp    c001bd77 <__umoddi3+0x27>
c001bda3:	90                   	nop
c001bda4:	89 f1                	mov    ecx,esi
c001bda6:	39 d8                	cmp    eax,ebx
c001bda8:	76 0a                	jbe    c001bdb4 <__umoddi3+0x64>
c001bdaa:	89 f0                	mov    eax,esi
c001bdac:	83 c4 1c             	add    esp,0x1c
c001bdaf:	5b                   	pop    ebx
c001bdb0:	5e                   	pop    esi
c001bdb1:	5f                   	pop    edi
c001bdb2:	5d                   	pop    ebp
c001bdb3:	c3                   	ret    
c001bdb4:	0f bd e8             	bsr    ebp,eax
c001bdb7:	83 f5 1f             	xor    ebp,0x1f
c001bdba:	75 1c                	jne    c001bdd8 <__umoddi3+0x88>
c001bdbc:	39 d8                	cmp    eax,ebx
c001bdbe:	72 04                	jb     c001bdc4 <__umoddi3+0x74>
c001bdc0:	39 f7                	cmp    edi,esi
c001bdc2:	77 08                	ja     c001bdcc <__umoddi3+0x7c>
c001bdc4:	89 da                	mov    edx,ebx
c001bdc6:	29 fe                	sub    esi,edi
c001bdc8:	19 c2                	sbb    edx,eax
c001bdca:	89 f1                	mov    ecx,esi
c001bdcc:	89 c8                	mov    eax,ecx
c001bdce:	83 c4 1c             	add    esp,0x1c
c001bdd1:	5b                   	pop    ebx
c001bdd2:	5e                   	pop    esi
c001bdd3:	5f                   	pop    edi
c001bdd4:	5d                   	pop    ebp
c001bdd5:	c3                   	ret    
c001bdd6:	66 90                	xchg   ax,ax
c001bdd8:	ba 20 00 00 00       	mov    edx,0x20
c001bddd:	29 ea                	sub    edx,ebp
c001bddf:	89 e9                	mov    ecx,ebp
c001bde1:	d3 e0                	shl    eax,cl
c001bde3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bde7:	89 f8                	mov    eax,edi
c001bde9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bded:	88 d1                	mov    cl,dl
c001bdef:	d3 e8                	shr    eax,cl
c001bdf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdf5:	09 c1                	or     ecx,eax
c001bdf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bdfb:	89 e9                	mov    ecx,ebp
c001bdfd:	d3 e7                	shl    edi,cl
c001bdff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001be03:	89 d8                	mov    eax,ebx
c001be05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be09:	88 d1                	mov    cl,dl
c001be0b:	d3 e8                	shr    eax,cl
c001be0d:	89 c7                	mov    edi,eax
c001be0f:	89 e9                	mov    ecx,ebp
c001be11:	d3 e3                	shl    ebx,cl
c001be13:	89 f0                	mov    eax,esi
c001be15:	88 d1                	mov    cl,dl
c001be17:	d3 e8                	shr    eax,cl
c001be19:	09 d8                	or     eax,ebx
c001be1b:	89 e9                	mov    ecx,ebp
c001be1d:	d3 e6                	shl    esi,cl
c001be1f:	89 f3                	mov    ebx,esi
c001be21:	89 fa                	mov    edx,edi
c001be23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be27:	89 d1                	mov    ecx,edx
c001be29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be2d:	89 c6                	mov    esi,eax
c001be2f:	89 d7                	mov    edi,edx
c001be31:	39 d1                	cmp    ecx,edx
c001be33:	72 27                	jb     c001be5c <__umoddi3+0x10c>
c001be35:	74 21                	je     c001be58 <__umoddi3+0x108>
c001be37:	89 ca                	mov    edx,ecx
c001be39:	29 f3                	sub    ebx,esi
c001be3b:	19 fa                	sbb    edx,edi
c001be3d:	89 d0                	mov    eax,edx
c001be3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be43:	d3 e0                	shl    eax,cl
c001be45:	89 e9                	mov    ecx,ebp
c001be47:	d3 eb                	shr    ebx,cl
c001be49:	09 d8                	or     eax,ebx
c001be4b:	d3 ea                	shr    edx,cl
c001be4d:	83 c4 1c             	add    esp,0x1c
c001be50:	5b                   	pop    ebx
c001be51:	5e                   	pop    esi
c001be52:	5f                   	pop    edi
c001be53:	5d                   	pop    ebp
c001be54:	c3                   	ret    
c001be55:	8d 76 00             	lea    esi,[esi+0x0]
c001be58:	39 c3                	cmp    ebx,eax
c001be5a:	73 db                	jae    c001be37 <__umoddi3+0xe7>
c001be5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001be64:	89 d7                	mov    edi,edx
c001be66:	89 c6                	mov    esi,eax
c001be68:	eb cd                	jmp    c001be37 <__umoddi3+0xe7>

Disassembly of section .init:

c001be6a <_init>:
c001be6a:	55                   	push   ebp
c001be6b:	89 e5                	mov    ebp,esp
c001be6d:	e8 82 42 fe ff       	call   c00000f4 <frame_dummy>
c001be72:	e8 e5 fa ff ff       	call   c001b95c <__do_global_ctors_aux>
c001be77:	5d                   	pop    ebp
c001be78:	c3                   	ret    

Disassembly of section .fini:

c001be79 <_fini>:
c001be79:	55                   	push   ebp
c001be7a:	89 e5                	mov    ebp,esp
c001be7c:	e8 03 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001be81:	5d                   	pop    ebp
c001be82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001be84 <Computer::~Computer()>:
c001be84:	83 ec 0c             	sub    esp,0xc
c001be87:	ba 80 d1 01 c0       	mov    edx,0xc001d180
c001be8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be90:	89 10                	mov    DWORD PTR [eax],edx
c001be92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be96:	83 ec 0c             	sub    esp,0xc
c001be99:	50                   	push   eax
c001be9a:	e8 3f f9 fe ff       	call   c000b7de <Device::~Device()>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	90                   	nop
c001bea3:	83 c4 0c             	add    esp,0xc
c001bea6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bea8 <Computer::~Computer()>:
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	83 ec 0c             	sub    esp,0xc
c001beae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001beb2:	e8 cd ff ff ff       	call   c001be84 <Computer::~Computer()>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	83 ec 08             	sub    esp,0x8
c001bebd:	68 70 01 00 00       	push   0x170
c001bec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bec6:	e8 db e4 fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	83 c4 0c             	add    esp,0xc
c001bed1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bed2 <idleCommon()>:
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	fa                   	cli    
c001bed6:	ff 05 08 38 02 c0    	inc    DWORD PTR ds:0xc0023808
c001bedc:	e8 1f 74 ff ff       	call   c0013300 <schedule()>
c001bee1:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001bee6:	48                   	dec    eax
c001bee7:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c001beec:	75 01                	jne    c001beef <idleCommon()+0x1d>
c001beee:	fb                   	sti    
c001beef:	83 c4 0c             	add    esp,0xc
c001bef2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bef4 <LinkedList<UnixFile>::~LinkedList()>:
c001bef4:	90                   	nop
c001bef5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bef6 <LinkedList<UnixFile>::LinkedList()>:
c001bef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf36:	90                   	nop
c001bf37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf40:	75 10                	jne    c001bf52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf42:	83 ec 0c             	sub    esp,0xc
c001bf45:	68 d4 d3 01 c0       	push   0xc001d3d4
c001bf4a:	e8 b0 41 ff ff       	call   c00100ff <KePanic(char const*)>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf56:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf58:	85 c0                	test   eax,eax
c001bf5a:	74 34                	je     c001bf90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf63:	85 c0                	test   eax,eax
c001bf65:	74 29                	je     c001bf90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf8e:	eb 65                	jmp    c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf94:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf96:	85 c0                	test   eax,eax
c001bf98:	75 4b                	jne    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfa1:	85 c0                	test   eax,eax
c001bfa3:	75 40                	jne    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfad:	89 10                	mov    DWORD PTR [eax],edx
c001bfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfcf:	85 c0                	test   eax,eax
c001bfd1:	74 22                	je     c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	68 f6 d3 01 c0       	push   0xc001d3f6
c001bfdb:	e8 1f 41 ff ff       	call   c00100ff <KePanic(char const*)>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	eb 10                	jmp    c001bff5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfe5:	83 ec 0c             	sub    esp,0xc
c001bfe8:	68 00 d4 01 c0       	push   0xc001d400
c001bfed:	e8 0d 41 ff ff       	call   c00100ff <KePanic(char const*)>
c001bff2:	83 c4 10             	add    esp,0x10
c001bff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bffc:	8d 50 01             	lea    edx,[eax+0x1]
c001bfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c003:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c006:	90                   	nop
c001c007:	83 c4 0c             	add    esp,0xc
c001c00a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c00c <LinkedList<UnixFile>::getFirstElement()>:
c001c00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c010:	8b 00                	mov    eax,DWORD PTR [eax]
c001c012:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c014 <LinkedList<UnixFile>::removeFirst()>:
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c01d:	85 c0                	test   eax,eax
c001c01f:	75 12                	jne    c001c033 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	68 0c d4 01 c0       	push   0xc001d40c
c001c029:	e8 d1 40 ff ff       	call   c00100ff <KePanic(char const*)>
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	eb 7e                	jmp    c001c0b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c03a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c03d:	85 c0                	test   eax,eax
c001c03f:	74 10                	je     c001c051 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c041:	83 ec 0c             	sub    esp,0xc
c001c044:	68 57 d4 01 c0       	push   0xc001d457
c001c049:	e8 b1 40 ff ff       	call   c00100ff <KePanic(char const*)>
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c055:	8b 00                	mov    eax,DWORD PTR [eax]
c001c057:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c05a:	85 c0                	test   eax,eax
c001c05c:	75 33                	jne    c001c091 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c077:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c07a:	83 f8 01             	cmp    eax,0x1
c001c07d:	74 21                	je     c001c0a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	68 30 d4 01 c0       	push   0xc001d430
c001c087:	e8 73 40 ff ff       	call   c00100ff <KePanic(char const*)>
c001c08c:	83 c4 10             	add    esp,0x10
c001c08f:	eb 0f                	jmp    c001c0a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c095:	8b 00                	mov    eax,DWORD PTR [eax]
c001c097:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09e:	89 10                	mov    DWORD PTR [eax],edx
c001c0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c0b1:	83 c4 0c             	add    esp,0xc
c001c0b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c0b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c0b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c0be <DriverlessDevice::~DriverlessDevice()>:
c001c0be:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c001c0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0c7:	89 10                	mov    DWORD PTR [eax],edx
c001c0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0cd:	50                   	push   eax
c001c0ce:	e8 0b f7 fe ff       	call   c000b7de <Device::~Device()>
c001c0d3:	83 c4 04             	add    esp,0x4
c001c0d6:	90                   	nop
c001c0d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c0d8 <DriverlessDevice::~DriverlessDevice()>:
c001c0d8:	83 ec 0c             	sub    esp,0xc
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e2:	e8 d7 ff ff ff       	call   c001c0be <DriverlessDevice::~DriverlessDevice()>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	83 ec 08             	sub    esp,0x8
c001c0ed:	68 58 01 00 00       	push   0x158
c001c0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0f6:	e8 ab e2 fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c0fb:	83 c4 10             	add    esp,0x10
c001c0fe:	83 c4 0c             	add    esp,0xc
c001c101:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c102 <LinkedList<Device>::addElement(Device*)>:
c001c102:	83 ec 0c             	sub    esp,0xc
c001c105:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c10a:	75 10                	jne    c001c11c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	68 d4 d3 01 c0       	push   0xc001d3d4
c001c114:	e8 e6 3f ff ff       	call   c00100ff <KePanic(char const*)>
c001c119:	83 c4 10             	add    esp,0x10
c001c11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c120:	8b 00                	mov    eax,DWORD PTR [eax]
c001c122:	85 c0                	test   eax,eax
c001c124:	74 3a                	je     c001c160 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c12d:	85 c0                	test   eax,eax
c001c12f:	74 2f                	je     c001c160 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c135:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c13c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c146:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c14a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c151:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c154:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c15e:	eb 68                	jmp    c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c164:	8b 00                	mov    eax,DWORD PTR [eax]
c001c166:	85 c0                	test   eax,eax
c001c168:	75 4e                	jne    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c171:	85 c0                	test   eax,eax
c001c173:	75 43                	jne    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c179:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c17d:	89 10                	mov    DWORD PTR [eax],edx
c001c17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c183:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c187:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c191:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1a2:	85 c0                	test   eax,eax
c001c1a4:	74 22                	je     c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	68 f6 d3 01 c0       	push   0xc001d3f6
c001c1ae:	e8 4c 3f ff ff       	call   c00100ff <KePanic(char const*)>
c001c1b3:	83 c4 10             	add    esp,0x10
c001c1b6:	eb 10                	jmp    c001c1c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1b8:	83 ec 0c             	sub    esp,0xc
c001c1bb:	68 00 d4 01 c0       	push   0xc001d400
c001c1c0:	e8 3a 3f ff ff       	call   c00100ff <KePanic(char const*)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1cf:	8d 50 01             	lea    edx,[eax+0x1]
c001c1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c1d9:	90                   	nop
c001c1da:	83 c4 0c             	add    esp,0xc
c001c1dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c1de <LinkedList<Device>::LinkedList()>:
c001c1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c202:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c20c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c217:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c21e:	90                   	nop
c001c21f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c220 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c224:	8b 00                	mov    eax,DWORD PTR [eax]
c001c226:	85 c0                	test   eax,eax
c001c228:	75 0e                	jne    c001c238 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c22e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c231:	85 c0                	test   eax,eax
c001c233:	75 03                	jne    c001c238 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c235:	b0 01                	mov    al,0x1
c001c237:	c3                   	ret    
c001c238:	b0 00                	mov    al,0x0
c001c23a:	90                   	nop
c001c23b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c23c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c240:	8b 00                	mov    eax,DWORD PTR [eax]
c001c242:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c24d:	85 c0                	test   eax,eax
c001c24f:	75 17                	jne    c001c268 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c251:	83 ec 0c             	sub    esp,0xc
c001c254:	68 0c d4 01 c0       	push   0xc001d40c
c001c259:	e8 a1 3e ff ff       	call   c00100ff <KePanic(char const*)>
c001c25e:	83 c4 10             	add    esp,0x10
c001c261:	e9 92 00 00 00       	jmp    c001c2f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c266:	66 90                	xchg   ax,ax
c001c268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c26f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c272:	85 c0                	test   eax,eax
c001c274:	0f 95 c0             	setne  al
c001c277:	84 c0                	test   al,al
c001c279:	74 11                	je     c001c28c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c27b:	83 ec 0c             	sub    esp,0xc
c001c27e:	68 57 d4 01 c0       	push   0xc001d457
c001c283:	e8 77 3e ff ff       	call   c00100ff <KePanic(char const*)>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	90                   	nop
c001c28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c290:	8b 00                	mov    eax,DWORD PTR [eax]
c001c292:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c295:	85 c0                	test   eax,eax
c001c297:	0f 94 c0             	sete   al
c001c29a:	84 c0                	test   al,al
c001c29c:	74 36                	je     c001c2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ba:	83 f8 01             	cmp    eax,0x1
c001c2bd:	74 25                	je     c001c2e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2bf:	83 ec 0c             	sub    esp,0xc
c001c2c2:	68 30 d4 01 c0       	push   0xc001d430
c001c2c7:	e8 33 3e ff ff       	call   c00100ff <KePanic(char const*)>
c001c2cc:	83 c4 10             	add    esp,0x10
c001c2cf:	eb 13                	jmp    c001c2e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e1:	89 10                	mov    DWORD PTR [eax],edx
c001c2e3:	90                   	nop
c001c2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2f8:	83 c4 0c             	add    esp,0xc
c001c2fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c2fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c304:	75 12                	jne    c001c318 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c306:	83 ec 0c             	sub    esp,0xc
c001c309:	68 d4 d3 01 c0       	push   0xc001d3d4
c001c30e:	e8 ec 3d ff ff       	call   c00100ff <KePanic(char const*)>
c001c313:	83 c4 10             	add    esp,0x10
c001c316:	66 90                	xchg   ax,ax
c001c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31e:	85 c0                	test   eax,eax
c001c320:	74 36                	je     c001c358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c329:	85 c0                	test   eax,eax
c001c32b:	74 2b                	je     c001c358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c331:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c334:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c338:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c343:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c34d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c354:	eb 6a                	jmp    c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c356:	66 90                	xchg   ax,ax
c001c358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c35e:	85 c0                	test   eax,eax
c001c360:	75 4e                	jne    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c369:	85 c0                	test   eax,eax
c001c36b:	75 43                	jne    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c371:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c375:	89 10                	mov    DWORD PTR [eax],edx
c001c377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c37f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c389:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c394:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c397:	85 c0                	test   eax,eax
c001c399:	74 25                	je     c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c39b:	83 ec 0c             	sub    esp,0xc
c001c39e:	68 f6 d3 01 c0       	push   0xc001d3f6
c001c3a3:	e8 57 3d ff ff       	call   c00100ff <KePanic(char const*)>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	eb 13                	jmp    c001c3c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c3b0:	83 ec 0c             	sub    esp,0xc
c001c3b3:	68 00 d4 01 c0       	push   0xc001d400
c001c3b8:	e8 42 3d ff ff       	call   c00100ff <KePanic(char const*)>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3c7:	8d 50 01             	lea    edx,[eax+0x1]
c001c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3d1:	90                   	nop
c001c3d2:	83 c4 0c             	add    esp,0xc
c001c3d5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c3d8 <ACPI::~ACPI()>:
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c001c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e4:	89 10                	mov    DWORD PTR [eax],edx
c001c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	50                   	push   eax
c001c3ee:	e8 eb f3 fe ff       	call   c000b7de <Device::~Device()>
c001c3f3:	83 c4 10             	add    esp,0x10
c001c3f6:	90                   	nop
c001c3f7:	83 c4 0c             	add    esp,0xc
c001c3fa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c3fc <ACPI::~ACPI()>:
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	83 ec 0c             	sub    esp,0xc
c001c402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c406:	e8 cd ff ff ff       	call   c001c3d8 <ACPI::~ACPI()>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	83 ec 08             	sub    esp,0x8
c001c411:	68 64 12 00 00       	push   0x1264
c001c416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c41a:	e8 87 df fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	83 c4 0c             	add    esp,0xc
c001c425:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c428 <LinkedList<Device>::~LinkedList()>:
c001c428:	90                   	nop
c001c429:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c42c <LinkedList<Device>::isEmpty()>:
c001c42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c430:	8b 00                	mov    eax,DWORD PTR [eax]
c001c432:	85 c0                	test   eax,eax
c001c434:	75 0e                	jne    c001c444 <LinkedList<Device>::isEmpty()+0x18>
c001c436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c43a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c43d:	85 c0                	test   eax,eax
c001c43f:	75 03                	jne    c001c444 <LinkedList<Device>::isEmpty()+0x18>
c001c441:	b0 01                	mov    al,0x1
c001c443:	c3                   	ret    
c001c444:	b0 00                	mov    al,0x0
c001c446:	90                   	nop
c001c447:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c448 <LinkedList<Device>::getFirstElement()>:
c001c448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c44c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c44e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c450 <LinkedList<Device>::removeFirst()>:
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c457:	8b 00                	mov    eax,DWORD PTR [eax]
c001c459:	85 c0                	test   eax,eax
c001c45b:	75 17                	jne    c001c474 <LinkedList<Device>::removeFirst()+0x24>
c001c45d:	83 ec 0c             	sub    esp,0xc
c001c460:	68 0c d4 01 c0       	push   0xc001d40c
c001c465:	e8 95 3c ff ff       	call   c00100ff <KePanic(char const*)>
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	e9 92 00 00 00       	jmp    c001c504 <LinkedList<Device>::removeFirst()+0xb4>
c001c472:	66 90                	xchg   ax,ax
c001c474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c47b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c481:	85 c0                	test   eax,eax
c001c483:	74 13                	je     c001c498 <LinkedList<Device>::removeFirst()+0x48>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	68 57 d4 01 c0       	push   0xc001d457
c001c48d:	e8 6d 3c ff ff       	call   c00100ff <KePanic(char const*)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	8d 76 00             	lea    esi,[esi+0x0]
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c49e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4a4:	85 c0                	test   eax,eax
c001c4a6:	75 34                	jne    c001c4dc <LinkedList<Device>::removeFirst()+0x8c>
c001c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4c4:	83 f8 01             	cmp    eax,0x1
c001c4c7:	74 27                	je     c001c4f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4c9:	83 ec 0c             	sub    esp,0xc
c001c4cc:	68 30 d4 01 c0       	push   0xc001d430
c001c4d1:	e8 29 3c ff ff       	call   c00100ff <KePanic(char const*)>
c001c4d6:	83 c4 10             	add    esp,0x10
c001c4d9:	eb 15                	jmp    c001c4f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4db:	90                   	nop
c001c4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	89 10                	mov    DWORD PTR [eax],edx
c001c4ee:	66 90                	xchg   ax,ax
c001c4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c501:	8d 76 00             	lea    esi,[esi+0x0]
c001c504:	83 c4 0c             	add    esp,0xc
c001c507:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c508 <CPU::~CPU()>:
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c001c510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c514:	89 10                	mov    DWORD PTR [eax],edx
c001c516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	50                   	push   eax
c001c51e:	e8 bb f2 fe ff       	call   c000b7de <Device::~Device()>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	90                   	nop
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c52c <CPU::~CPU()>:
c001c52c:	83 ec 0c             	sub    esp,0xc
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c536:	e8 cd ff ff ff       	call   c001c508 <CPU::~CPU()>
c001c53b:	83 c4 10             	add    esp,0x10
c001c53e:	83 ec 08             	sub    esp,0x8
c001c541:	68 94 11 00 00       	push   0x1194
c001c546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c54a:	e8 57 de fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	83 c4 0c             	add    esp,0xc
c001c555:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c558 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c558:	90                   	nop
c001c559:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c55c <ThreadControlBlock::ThreadControlBlock()>:
c001c55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c560:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c56b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c576:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c57d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c581:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c597:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c5a3:	90                   	nop
c001c5a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c5a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5e8:	90                   	nop
c001c5e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c5ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c5f3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c5f4 <PCI::~PCI()>:
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	ba 18 ed 01 c0       	mov    edx,0xc001ed18
c001c5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c600:	89 10                	mov    DWORD PTR [eax],edx
c001c602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	50                   	push   eax
c001c60a:	e8 59 ec fe ff       	call   c000b268 <Bus::~Bus()>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	90                   	nop
c001c613:	83 c4 0c             	add    esp,0xc
c001c616:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c618 <PCI::~PCI()>:
c001c618:	83 ec 0c             	sub    esp,0xc
c001c61b:	83 ec 0c             	sub    esp,0xc
c001c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c622:	e8 cd ff ff ff       	call   c001c5f4 <PCI::~PCI()>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	83 ec 08             	sub    esp,0x8
c001c62d:	68 5c 01 00 00       	push   0x15c
c001c632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c636:	e8 6b dd fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	83 c4 0c             	add    esp,0xc
c001c641:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c642 <IDE::~IDE()>:
c001c642:	83 ec 0c             	sub    esp,0xc
c001c645:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c001c64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64e:	89 10                	mov    DWORD PTR [eax],edx
c001c650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c654:	83 ec 0c             	sub    esp,0xc
c001c657:	50                   	push   eax
c001c658:	e8 fb f5 fe ff       	call   c000bc58 <HardDiskController::~HardDiskController()>
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	90                   	nop
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c666 <IDE::~IDE()>:
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	83 ec 0c             	sub    esp,0xc
c001c66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c670:	e8 cd ff ff ff       	call   c001c642 <IDE::~IDE()>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	83 ec 08             	sub    esp,0x8
c001c67b:	68 70 02 00 00       	push   0x270
c001c680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c684:	e8 1d dd fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	83 c4 0c             	add    esp,0xc
c001c68f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c690 <SATABus::~SATABus()>:
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	ba 1c ee 01 c0       	mov    edx,0xc001ee1c
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	89 10                	mov    DWORD PTR [eax],edx
c001c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a2:	83 ec 0c             	sub    esp,0xc
c001c6a5:	50                   	push   eax
c001c6a6:	e8 ad f5 fe ff       	call   c000bc58 <HardDiskController::~HardDiskController()>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	90                   	nop
c001c6af:	83 c4 0c             	add    esp,0xc
c001c6b2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c6b4 <SATABus::~SATABus()>:
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6be:	e8 cd ff ff ff       	call   c001c690 <SATABus::~SATABus()>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 ec 08             	sub    esp,0x8
c001c6c9:	68 64 01 00 00       	push   0x164
c001c6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d2:	e8 cf dc fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c6de <ATA::~ATA()>:
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	ba 5c ee 01 c0       	mov    edx,0xc001ee5c
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	89 10                	mov    DWORD PTR [eax],edx
c001c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	50                   	push   eax
c001c6f4:	e8 41 f6 fe ff       	call   c000bd3a <PhysicalDisk::~PhysicalDisk()>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	90                   	nop
c001c6fd:	83 c4 0c             	add    esp,0xc
c001c700:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c702 <ATA::~ATA()>:
c001c702:	83 ec 0c             	sub    esp,0xc
c001c705:	83 ec 0c             	sub    esp,0xc
c001c708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c70c:	e8 cd ff ff ff       	call   c001c6de <ATA::~ATA()>
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	83 ec 08             	sub    esp,0x8
c001c717:	68 7c 01 00 00       	push   0x17c
c001c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c720:	e8 81 dc fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	83 c4 0c             	add    esp,0xc
c001c72b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c72c <ATAPI::~ATAPI()>:
c001c72c:	83 ec 0c             	sub    esp,0xc
c001c72f:	ba a4 ee 01 c0       	mov    edx,0xc001eea4
c001c734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c738:	89 10                	mov    DWORD PTR [eax],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	50                   	push   eax
c001c742:	e8 f3 f5 fe ff       	call   c000bd3a <PhysicalDisk::~PhysicalDisk()>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	90                   	nop
c001c74b:	83 c4 0c             	add    esp,0xc
c001c74e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c750 <ATAPI::~ATAPI()>:
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	83 ec 0c             	sub    esp,0xc
c001c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75a:	e8 cd ff ff ff       	call   c001c72c <ATAPI::~ATAPI()>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	83 ec 08             	sub    esp,0x8
c001c765:	68 84 01 00 00       	push   0x184
c001c76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c76e:	e8 33 dc fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	83 c4 0c             	add    esp,0xc
c001c779:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c77a <SATA::~SATA()>:
c001c77a:	83 ec 0c             	sub    esp,0xc
c001c77d:	ba 58 ef 01 c0       	mov    edx,0xc001ef58
c001c782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c786:	89 10                	mov    DWORD PTR [eax],edx
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	50                   	push   eax
c001c790:	e8 a5 f5 fe ff       	call   c000bd3a <PhysicalDisk::~PhysicalDisk()>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	90                   	nop
c001c799:	83 c4 0c             	add    esp,0xc
c001c79c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c79e <SATA::~SATA()>:
c001c79e:	83 ec 0c             	sub    esp,0xc
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a8:	e8 cd ff ff ff       	call   c001c77a <SATA::~SATA()>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	83 ec 08             	sub    esp,0x8
c001c7b3:	68 7c 01 00 00       	push   0x17c
c001c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7bc:	e8 e5 db fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c7c1:	83 c4 10             	add    esp,0x10
c001c7c4:	83 c4 0c             	add    esp,0xc
c001c7c7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c7c8 <SATAPI::~SATAPI()>:
c001c7c8:	83 ec 0c             	sub    esp,0xc
c001c7cb:	ba e8 f0 01 c0       	mov    edx,0xc001f0e8
c001c7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d4:	89 10                	mov    DWORD PTR [eax],edx
c001c7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	50                   	push   eax
c001c7de:	e8 57 f5 fe ff       	call   c000bd3a <PhysicalDisk::~PhysicalDisk()>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	90                   	nop
c001c7e7:	83 c4 0c             	add    esp,0xc
c001c7ea:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c7ec <SATAPI::~SATAPI()>:
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	83 ec 0c             	sub    esp,0xc
c001c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f6:	e8 cd ff ff ff       	call   c001c7c8 <SATAPI::~SATAPI()>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	83 ec 08             	sub    esp,0x8
c001c801:	68 84 01 00 00       	push   0x184
c001c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c80a:	e8 97 db fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	83 c4 0c             	add    esp,0xc
c001c815:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c816 <IOAPIC::~IOAPIC()>:
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	ba 28 f1 01 c0       	mov    edx,0xc001f128
c001c81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c822:	89 10                	mov    DWORD PTR [eax],edx
c001c824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	50                   	push   eax
c001c82c:	e8 ad ef fe ff       	call   c000b7de <Device::~Device()>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	90                   	nop
c001c835:	83 c4 0c             	add    esp,0xc
c001c838:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c83a <IOAPIC::~IOAPIC()>:
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c844:	e8 cd ff ff ff       	call   c001c816 <IOAPIC::~IOAPIC()>
c001c849:	83 c4 10             	add    esp,0x10
c001c84c:	83 ec 08             	sub    esp,0x8
c001c84f:	68 68 01 00 00       	push   0x168
c001c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c858:	e8 49 db fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c85d:	83 c4 10             	add    esp,0x10
c001c860:	83 c4 0c             	add    esp,0xc
c001c863:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c864 <APICTimer::~APICTimer()>:
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	ba 70 f1 01 c0       	mov    edx,0xc001f170
c001c86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c870:	89 10                	mov    DWORD PTR [eax],edx
c001c872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	50                   	push   eax
c001c87a:	e8 5d 08 ff ff       	call   c000d0dc <Timer::~Timer()>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	90                   	nop
c001c883:	83 c4 0c             	add    esp,0xc
c001c886:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c888 <APICTimer::~APICTimer()>:
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c892:	e8 cd ff ff ff       	call   c001c864 <APICTimer::~APICTimer()>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	83 ec 08             	sub    esp,0x8
c001c89d:	68 60 01 00 00       	push   0x160
c001c8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a6:	e8 fb da fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	83 c4 0c             	add    esp,0xc
c001c8b1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c8b4 <PIT::~PIT()>:
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c001c8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c0:	89 10                	mov    DWORD PTR [eax],edx
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	50                   	push   eax
c001c8ca:	e8 0d 08 ff ff       	call   c000d0dc <Timer::~Timer()>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	90                   	nop
c001c8d3:	83 c4 0c             	add    esp,0xc
c001c8d6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c8d8 <PIT::~PIT()>:
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e2:	e8 cd ff ff ff       	call   c001c8b4 <PIT::~PIT()>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	83 ec 08             	sub    esp,0x8
c001c8ed:	68 5c 01 00 00       	push   0x15c
c001c8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8f6:	e8 ab da fe ff       	call   c000a3a6 <operator delete(void*, unsigned long)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	83 c4 0c             	add    esp,0xc
c001c901:	c3                   	ret    
